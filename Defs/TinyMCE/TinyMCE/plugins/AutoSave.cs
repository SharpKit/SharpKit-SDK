//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE.plugins
{
    /// <summary>
    /// This event gets fired when a draft removed/expired.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce.plugins.AutoSave", Export=false)]
    public  partial class AutoSave
    {
        /// <summary>
        /// Returns an expiration date UTC string.
        /// </summary>
        public string getExpDate(){return null;}
        /// <summary>
        /// Returns information about the plugin as a name/value array.
        /// The current keys are longname, author, authorurl, infourl and version.
        /// </summary>
        public object getInfo(){return null;}
        /// <summary>
        /// This method will return true/false if there is a local storage draft available.
        /// </summary>
        public bool hasDraft(){return false;}
        /// <summary>
        /// Initializes the plugin, this will be executed after the plugin has been created.
        /// This call is done before the editor instance has finished it's initialization so use the onInit event
        /// of the editor instance to intercept that event.
        /// </summary>
        /// <param name="ed">Editor instance that the plugin is initialized in.</param>
        /// <param name="url">Absolute URL to where the plugin is located.</param>
        public object init(SharpKit.TinyMCE.Editor ed, string url){return null;}
        /// <summary>
        /// Removes the currently stored draft.
        /// </summary>
        public object removeDraft(){return null;}
        /// <summary>
        /// This method will restore the contents from the storage engine back to the editor.
        /// </summary>
        public object restoreDraft(){return null;}
        /// <summary>
        /// This method will setup the storage engine. If the browser has support for it.
        /// </summary>
        public object setupStorage(){return null;}
        /// <summary>
        /// This method will store the current contents in the the storage engine.
        /// </summary>
        public object storeDraft(){return null;}
    }
}
