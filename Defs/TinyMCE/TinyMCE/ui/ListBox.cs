//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE.ui
{
    /// <summary>
    /// Fires when the menu gets rendered.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce.ui.ListBox", Export=false)]
    public  partial class ListBox
    {
        /// <summary>
        /// Adds a option item to the list box.
        /// </summary>
        /// <param name="n">Title for the new option.</param>
        /// <param name="v">Value for the new option.</param>
        /// <param name="o">Optional object with settings like for example class.</param>
        public object add(string n, string v, object o){return null;}
        /// <summary>
        /// Destroys the ListBox i.e. clear memory and events.
        /// </summary>
        public object destroy(){return null;}
        /// <summary>
        /// Returns the number of items inside the list box.
        /// </summary>
        /// <param name="Number">of items inside the list box.</param>
        public object getLength(object Number){return null;}
        /// <summary>
        /// Hides the drop menu.
        /// </summary>
        public object hideMenu(){return null;}
        public object isActive(){return null;}
        public object isDisabled(){return null;}
        public object isRendered(){return null;}
        /// <summary>
        /// Constructs a new listbox control instance.
        /// </summary>
        /// <param name="id">Control id for the list box.</param>
        /// <param name="s">Optional name/value settings object.</param>
        /// <param name="ed">Optional the editor instance this button is for.</param>
        public ListBox(string id, object s, SharpKit.TinyMCE.Editor ed){}
        /// <summary>
        /// Post render event. This will be executed after the control has been rendered and can be used to
        /// set states, add events to the control etc. It's recommended for subclasses of the control to call this method by using this.parent().
        /// </summary>
        public object postRender(){return null;}
        public object remove(){return null;}
        /// <summary>
        /// Renders the list box as a HTML string. This method is much faster than using the DOM and when
        /// creating a whole toolbar with buttons it does make a lot of difference.
        /// </summary>
        public string renderHTML(){return null;}
        /// <summary>
        /// Renders the menu to the DOM.
        /// </summary>
        public object renderMenu(){return null;}
        public object renderTo(){return null;}
        /// <summary>
        /// Selects a item/option by value. This will both add a visual selection to the
        /// item and change the title of the control to the title of the option.
        /// </summary>
        public object select(){return null;}
        /// <summary>
        /// Selects a item/option by index. This will both add a visual selection to the
        /// item and change the title of the control to the title of the option.
        /// </summary>
        /// <param name="idx">Index to select, pass -1 to select menu/title of select box.</param>
        public object selectByIndex(string idx){return null;}
        public object setActive(){return null;}
        public object setDisabled(){return null;}
        public object setState(){return null;}
        /// <summary>
        /// Displays the drop menu with all items.
        /// </summary>
        public object showMenu(){return null;}
        /// <summary>
        /// Array of ListBox items.
        /// </summary>
        public Array items{get;set;}
    }
}
