//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE.ui
{
    /// <summary>
    /// This class is the base class for all controls like buttons, toolbars, containers.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce.ui.Control", Export=false)]
    public  partial class Control
    {
        /// <summary>
        /// Constructs a new control instance.
        /// </summary>
        /// <param name="id">Control id.</param>
        /// <param name="s">Optional name/value settings object.</param>
        public Control(string id, object s){}
        /// <summary>
        /// Destroys the control will free any memory by removing event listeners etc.
        /// </summary>
        public object destroy(){return null;}
        /// <summary>
        /// Returns true/false if the control is disabled or not. This is a method since you can then
        /// choose to check some class or some internal bool state in subclasses.
        /// </summary>
        public bool isActive(){return false;}
        /// <summary>
        /// Returns true/false if the control is disabled or not. This is a method since you can then
        /// choose to check some class or some internal bool state in subclasses.
        /// </summary>
        public bool isDisabled(){return false;}
        /// <summary>
        /// Returns true/false if the control has been rendered or not.
        /// </summary>
        public bool isRendered(){return false;}
        /// <summary>
        /// Post render event. This will be executed after the control has been rendered and can be used to
        /// set states, add events to the control etc. It's recommended for subclasses of the control to call this method by using this.parent().
        /// </summary>
        public object postRender(){return null;}
        /// <summary>
        /// Removes the control. This means it will be removed from the DOM and any
        /// events tied to it will also be removed.
        /// </summary>
        public object remove(){return null;}
        /// <summary>
        /// Renders the control as a HTML string. This method is much faster than using the DOM and when
        /// creating a whole toolbar with buttons it does make a lot of difference.
        /// </summary>
        public string renderHTML(){return null;}
        /// <summary>
        /// Renders the control to the specified container element.
        /// </summary>
        /// <param name="n">HTML DOM element to add control to.</param>
        public object renderTo(SharpKit.TinyMCE.dom.Element n){return null;}
        /// <summary>
        /// Sets the activated state for the control. This will add CSS classes to the
        /// element that contains the control. So that it can be activated visually.
        /// </summary>
        /// <param name="s">Boolean state if the control should be activated or not.</param>
        public object setActive(bool s){return null;}
        /// <summary>
        /// Sets the disabled state for the control. This will add CSS classes to the
        /// element that contains the control. So that it can be disabled visually.
        /// </summary>
        /// <param name="s">Boolean state if the control should be disabled or not.</param>
        public object setDisabled(bool s){return null;}
        /// <summary>
        /// Sets the specified class state for the control.
        /// </summary>
        /// <param name="c">Class name to add/remove depending on state.</param>
        /// <param name="s">True/false state if the class should be removed or added.</param>
        public object setState(string c, bool s){return null;}
    }
}
