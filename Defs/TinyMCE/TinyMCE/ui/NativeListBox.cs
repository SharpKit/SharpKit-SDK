//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE.ui
{
    /// <summary>
    /// This class is used to create list boxes/select list.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce.ui.NativeListBox", Export=false)]
    public  partial class NativeListBox
    {
        /// <summary>
        /// Adds a option item to the list box.
        /// </summary>
        /// <param name="n">Title for the new option.</param>
        /// <param name="v">Value for the new option.</param>
        /// <param name="o">Optional object with settings like for example class.</param>
        public object add(string n, string v, object o){return null;}
        public object destroy(){return null;}
        /// <summary>
        /// Executes the specified callback function for the menu item. In this case when the user clicks the menu item.
        /// </summary>
        public object getLength(){return null;}
        public object hideMenu(){return null;}
        public object isActive(){return null;}
        /// <summary>
        /// Returns true/false if the control is disabled or not. This is a method since you can then
        /// choose to check some class or some internal bool state in subclasses.
        /// </summary>
        public bool isDisabled(){return false;}
        public object isRendered(){return null;}
        /// <summary>
        /// Constructs a new button control instance.
        /// </summary>
        /// <param name="id">Button control id for the button.</param>
        /// <param name="s">Optional name/value settings object.</param>
        public NativeListBox(string id, object s){}
        /// <summary>
        /// Post render handler. This function will be called after the UI has been
        /// rendered so that events can be added.
        /// </summary>
        public object postRender(){return null;}
        public object remove(){return null;}
        /// <summary>
        /// Renders the list box as a HTML string. This method is much faster than using the DOM and when
        /// creating a whole toolbar with buttons it does make a lot of difference.
        /// </summary>
        public string renderHTML(){return null;}
        public object renderMenu(){return null;}
        public object renderTo(){return null;}
        /// <summary>
        /// Selects a item/option by value. This will both add a visual selection to the
        /// item and change the title of the control to the title of the option.
        /// </summary>
        public object select(){return null;}
        /// <summary>
        /// Selects a item/option by index. This will both add a visual selection to the
        /// item and change the title of the control to the title of the option.
        /// </summary>
        /// <param name="idx">Index to select, pass -1 to select menu/title of select box.</param>
        public object selectByIndex(string idx){return null;}
        public object setActive(){return null;}
        /// <summary>
        /// Sets the disabled state for the control. This will add CSS classes to the
        /// element that contains the control. So that it can be disabled visually.
        /// </summary>
        /// <param name="s">Boolean state if the control should be disabled or not.</param>
        public object setDisabled(bool s){return null;}
        public object setState(){return null;}
        public object showMenu(){return null;}
    }
}
