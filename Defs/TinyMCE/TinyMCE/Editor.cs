//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE
{
    /// <summary>
    /// This class contains the core logic for a TinyMCE editor.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce.Editor", Export=false)]
    public  partial class Editor
    {
        /// <summary>
        /// Adds a button that later gets created by the ControlManager. This is a shorter and easier method
        /// of adding buttons without the need to deal with the ControlManager directly. But it's also less
        /// powerfull if you need more control use the ControlManagers factory methods instead.
        /// </summary>
        /// <param name="name">Button name to add.</param>
        /// <param name="settings">Settings object with title, cmd etc.</param>
        public object addButton(string name, object settings){return null;}
        /// <summary>
        /// Adds a custom command to the editor, you can also override existing commands with this method.
        /// The command that you add can be executed with execCommand.
        /// </summary>
        /// <param name="name">Command name to add/override.</param>
        /// <param name="callback">Function to execute when the command occurs.</param>
        /// <param name="scope">Optional scope to execute the function in.</param>
        public object addCommand(string name, object callback, object scope){return null;}
        /// <summary>
        /// Adds a custom query state command to the editor, you can also override existing commands with this method.
        /// The command that you add can be executed with queryCommandState function.
        /// </summary>
        /// <param name="name">Command name to add/override.</param>
        /// <param name="callback">Function to execute when the command state retrival occurs.</param>
        /// <param name="scope">Optional scope to execute the function in.</param>
        public object addQueryStateHandler(string name, object callback, object scope){return null;}
        /// <summary>
        /// Adds a custom query value command to the editor, you can also override existing commands with this method.
        /// The command that you add can be executed with queryCommandValue function.
        /// </summary>
        /// <param name="name">Command name to add/override.</param>
        /// <param name="callback">Function to execute when the command value retrival occurs.</param>
        /// <param name="scope">Optional scope to execute the function in.</param>
        public object addQueryValueHandler(string name, object callback, object scope){return null;}
        /// <summary>
        /// Adds a keyboard shortcut for some command or function.
        /// </summary>
        /// <param name="pa">Shortcut pattern. Like for example: ctrl+alt+o.</param>
        /// <param name="desc">Text description for the command.</param>
        /// <param name="sc">Optional scope to execute the function in.</param>
        public bool addShortcut(string pa, string desc, object sc){return false;}
        /// <summary>
        /// Adds visual aid for tables, anchors etc so they can be more easily edited inside the editor.
        /// </summary>
        /// <param name="elm">Optional root element to loop though to find tables etc that needs the visual aid.</param>
        public object addVisual(SharpKit.TinyMCE.dom.Element elm){return null;}
        /// <summary>
        /// URL converter function this gets executed each time a user adds an img, a or
        /// any other element that has a URL in it. This will be called both by the DOM and HTML
        /// manipulation functions.
        /// </summary>
        /// <param name="url">URL to convert.</param>
        /// <param name="name">Attribute name src, href etc.</param>
        public string convertURL(string url, string name){return null;}
        /// <summary>
        /// Destroys the editor instance by removing all events, element references or other resources
        /// that could leak memory. This method will be called automatically when the page is unloaded
        /// but you can also call it directly if you know what you are doing.
        /// </summary>
        /// <param name="s">Optional state if the destroy is an automatic destroy or user called one.</param>
        public object destroy(bool s){return null;}
        /// <summary>
        /// Constructs a editor instance by id.
        /// </summary>
        /// <param name="id">Unique id for the editor.</param>
        /// <param name="settings">Optional settings string for the editor.</param>
        public Editor(string id, object settings){}
        /// <summary>
        /// Executes a legacy callback. This method is useful to call old 2.x option callbacks.
        /// There new event model is a better way to add callback so this method might be removed in the future.
        /// </summary>
        /// <param name="n">Name of the callback to execute.</param>
        public object execCallback(string n){return null;}
        /// <summary>
        /// Executes a command on the current instance. These commands can be TinyMCE internal commands prefixed with "mce" or
        /// they can be build in browser commands such as "Bold". A compleate list of browser commands is available on MSDN or Mozilla.org.
        /// This function will dispatch the execCommand function on each plugin, theme or the execcommand_callback option if none of these
        /// return true it will handle the command as a internal browser command.
        /// </summary>
        /// <param name="cmd">Command name to execute, for example mceLink or Bold.</param>
        /// <param name="ui">True/false state if a UI (dialog) should be presented or not.</param>
        /// <param name="val">Optional command value, this can be anything.</param>
        /// <param name="a">Optional arguments object.</param>
        public bool execCommand(string cmd, bool ui, object val, object a){return false;}
        /// <summary>
        /// Focuses/activates the editor. This will set this editor as the activeEditor in the tinymce collection
        /// it will also place DOM focus inside the editor.
        /// </summary>
        /// <param name="skip_focus">Skip DOM focus. Just set is as the active editor.</param>
        public object focus(bool skip_focus){return null;}
        /// <summary>
        /// Returns the iframes body element.
        /// </summary>
        public SharpKit.TinyMCE.dom.Element getBody(){return null;}
        /// <summary>
        /// Returns the editors container element. The container element wrappes in
        /// all the elements added to the page for the editor. Such as UI, iframe etc.
        /// </summary>
        public SharpKit.TinyMCE.dom.Element getContainer(){return null;}
        /// <summary>
        /// Gets the content from the editor instance, this will cleanup the content before it gets returned using
        /// the different cleanup rules options.
        /// </summary>
        /// <param name="args">Optional content object, this gets passed around through the whole get process.</param>
        public string getContent(object args){return null;}
        /// <summary>
        /// Returns the editors content area container element. The this element is the one who
        /// holds the iframe or the editable element.
        /// </summary>
        public SharpKit.TinyMCE.dom.Element getContentAreaContainer(){return null;}
        /// <summary>
        /// Returns the iframes document object.
        /// </summary>
        public object getDoc(){return null;}
        /// <summary>
        /// Returns the target element/textarea that got replaced with a TinyMCE editor instance.
        /// </summary>
        public SharpKit.TinyMCE.dom.Element getElement(){return null;}
        /// <summary>
        /// Returns a language pack item by name/key.
        /// </summary>
        /// <param name="n">Name/key to get from the language pack.</param>
        /// <param name="dv">Optional default value to retrive.</param>
        public object getLang(string n, string dv){return null;}
        /// <summary>
        /// Returns a configuration parameter by name.
        /// </summary>
        /// <param name="n">Configruation parameter to retrive.</param>
        /// <param name="dv">Optional default value to return.</param>
        /// <param name="ty">Optional type parameter.</param>
        public string getParam(string n, string dv, string ty){return null;}
        /// <summary>
        /// Returns the iframes window object.
        /// </summary>
        public object getWin(){return null;}
        /// <summary>
        /// Hides the editor and shows any textarea/div that the editor is supposed to replace.
        /// </summary>
        public object hide(){return null;}
        /// <summary>
        /// Initializes the editor this will be called automatically when
        /// all plugins/themes and language packs are loaded by the rendered method.
        /// This method will setup the iframe and create the theme and plugin instances.
        /// </summary>
        public object init(){return null;}
        /// <summary>
        /// This method get called by the init method ones the iframe is loaded.
        /// It will fill the iframe with contents, setups DOM and selection objects for the iframe.
        /// This method should not be called directly.
        /// </summary>
        public object initContentBody(){return null;}
        /// <summary>
        /// Returns true/false if the editor is dirty or not. It will get dirty if the user has made modifications to the contents.
        /// </summary>
        public bool isDirty(){return false;}
        /// <summary>
        /// Returns true/false if the editor is hidden or not.
        /// </summary>
        public bool isHidden(){return false;}
        /// <summary>
        /// Loads contents from the textarea or div element that got converted into an editor instance.
        /// This method will move the contents from that textarea or div into the editor by using setContent
        /// so all events etc that method has will get dispatched as well.
        /// </summary>
        /// <param name="o">Optional content object, this gets passed around through the whole load process.</param>
        public string load(object o){return null;}
        /// <summary>
        /// Distpaches out a onNodeChange event to all observers. This method should be called when you
        /// need to update the UI states or element path etc.
        /// </summary>
        /// <param name="o">Optional object to pass along for the node changed event.</param>
        public object nodeChanged(object o){return null;}
        /// <summary>
        /// Returns a command specific state, for example if bold is enabled or not.
        /// </summary>
        /// <param name="cmd">Command to query state from.</param>
        public bool queryCommandState(string cmd){return false;}
        /// <summary>
        /// Returns a command specific value, for example the current font size.
        /// </summary>
        /// <param name="c">Command to query value from.</param>
        public object queryCommandValue(string c){return null;}
        /// <summary>
        /// Removes the editor from the dom and tinymce collection.
        /// </summary>
        public object remove(){return null;}
        /// <summary>
        /// Renderes the editor/adds it to the page.
        /// </summary>
        public object render(){return null;}
        /// <summary>
        /// Saves the contents from a editor out to the textarea or div element that got converted into an editor instance.
        /// This method will move the HTML contents from the editor into that textarea or div by getContent
        /// so all events etc that method has will get dispatched as well.
        /// </summary>
        /// <param name="o">Optional content object, this gets passed around through the whole save process.</param>
        public string save(object o){return null;}
        /// <summary>
        /// Sets the specified content to the editor instance, this will cleanup the content before it gets set using
        /// the different cleanup rules options.
        /// </summary>
        /// <param name="content">Content to set to editor, normally HTML contents but can be other formats as well.</param>
        /// <param name="args">Optional content object, this gets passed around through the whole set process.</param>
        public string setContent(string content, object args){return null;}
        /// <summary>
        /// Sets the progress state, this will display a throbber/progess for the editor.
        /// This is ideal for asycronous operations like an AJAX save call.
        /// </summary>
        /// <param name="b">Boolean state if the progress should be shown or hidden.</param>
        /// <param name="ti">Optional time to wait before the progress gets shown.</param>
        /// <param name="o">Optional object to pass to the progress observers.</param>
        public bool setProgressState(bool b, object ti, object o){return false;}
        /// <summary>
        /// Shows the editor and hides any textarea/div that the editor is supposed to replace.
        /// </summary>
        public object show(){return null;}
        /// <summary>
        /// Translates the specified string by replacing variables with language pack items it will also check if there is
        /// a key mathcin the input.
        /// </summary>
        /// <param name="s">String to translate by the language pack data.</param>
        public string translate(string s){return null;}
        /// <summary>
        /// URI object to current document that holds the TinyMCE editor instance.
        /// </summary>
        public SharpKit.TinyMCE.util.URI baseURI{get;set;}
        /// <summary>
        /// Array with CSS files to load into the iframe.
        /// </summary>
        public Array contentCSS{get;set;}
        /// <summary>
        /// Array of CSS styles to add to head of document when the editor loads.
        /// </summary>
        public Array contentStyles{get;set;}
        /// <summary>
        /// Control manager instance for the editor.
        /// </summary>
        public SharpKit.TinyMCE.ControlManager controlManager{get;set;}
        /// <summary>
        /// URI object to document configured for the TinyMCE instance.
        /// </summary>
        public SharpKit.TinyMCE.util.URI documentBaseURI{get;set;}
        /// <summary>
        /// DOM instance for the editor.
        /// </summary>
        public SharpKit.TinyMCE.dom.DOMUtils dom{get;set;}
        /// <summary>
        /// Formatter instance.
        /// </summary>
        public SharpKit.TinyMCE.Formatter formatter{get;set;}
        /// <summary>
        /// Editor instance id, normally the same as the div/textarea that was replaced.
        /// </summary>
        public string id{get;set;}
        /// <summary>
        /// Is set to true after the editor instance has been initialized
        /// </summary>
        public bool initialized{get;set;}
        /// <summary>
        /// State to force the editor to return false on a isDirty call.
        /// </summary>
        public bool isNotDirty{get;set;}
        /// <summary>
        /// HTML parser will be used when contents is inserted into the editor.
        /// </summary>
        public SharpKit.TinyMCE.html.DomParser parser{get;set;}
        /// <summary>
        /// Name/Value object containting plugin instances.
        /// </summary>
        public object plugins{get;set;}
        /// <summary>
        /// Schema instance, enables you to validate elements and it's children.
        /// </summary>
        public SharpKit.TinyMCE.html.Schema schema{get;set;}
        /// <summary>
        /// Selection instance for the editor.
        /// </summary>
        public SharpKit.TinyMCE.dom.Selection selection{get;set;}
        /// <summary>
        /// DOM serializer for the editor.
        /// </summary>
        public SharpKit.TinyMCE.dom.Serializer serializer{get;set;}
        /// <summary>
        /// Name/value collection with editor settings.
        /// </summary>
        public object settings{get;set;}
        /// <summary>
        /// Reference to the theme instance that was used to generate the UI.
        /// </summary>
        public SharpKit.TinyMCE.Theme theme{get;set;}
        /// <summary>
        /// Undo manager instance, responsible for handling undo levels.
        /// </summary>
        public SharpKit.TinyMCE.UndoManager undoManager{get;set;}
        /// <summary>
        /// Window manager reference, use this to open new windows and dialogs.
        /// </summary>
        public SharpKit.TinyMCE.WindowManager windowManager{get;set;}
    }
}
