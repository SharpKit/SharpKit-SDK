//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE.util
{
    /// <summary>
    /// This class is used to dispatch event to observers/listeners.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce.util.Dispatcher", Export=false)]
    public  partial class Dispatcher
    {
        /// <summary>
        /// Add an observer function to be executed when a dispatch call is done.
        /// </summary>
        /// <param name="callback">Callback function to execute when a dispatch event occurs.</param>
        /// <param name="s">Optional execution scope, defaults to the one specified in the class constructor.</param>
        public object add(object callback, object s){return null;}
        /// <summary>
        /// Add an observer function to be executed to the top of the list of observers.
        /// </summary>
        /// <param name="callback">Callback function to execute when a dispatch event occurs.</param>
        /// <param name="scope">Optional execution scope, defaults to the one specified in the class constructor.</param>
        public object addToTop(object callback, object scope){return null;}
        /// <summary>
        /// Dispatches an event to all observers/listeners.
        /// </summary>
        /// <param name="__">Any number of arguments to dispatch.</param>
        public object dispatch(object __){return null;}
        /// <summary>
        /// Constructs a new event dispatcher object.
        /// </summary>
        /// <param name="scope">Optional default execution scope for all observer functions.</param>
        public Dispatcher(object scope){}
        /// <summary>
        /// Removes an observer function.
        /// </summary>
        /// <param name="callback">Observer function to remove.</param>
        public object remove(object callback){return null;}
    }
}
