//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE.dom
{
    /// <summary>
    /// Fires when the Serializer does a postProcess on the contents.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce.dom.Serializer", Export=false)]
    public  partial class Serializer
    {
        /// <summary>
        /// Adds a attribute filter function to the parser used by the serializer, the parser will collect nodes that has the specified attributes
        /// and then execute the callback ones it has finished parsing the document.
        /// </summary>
        /// <param name="callback">Callback function to execute once it has collected nodes.</param>
        public object addAttributeFilter(object callback){return null;}
        /// <summary>
        /// Adds a node filter function to the parser used by the serializer, the parser will collect the specified nodes by name
        /// and then execute the callback ones it has finished parsing the document.
        /// </summary>
        /// <param name="callback">Callback function to execute once it has collected nodes.</param>
        public object addNodeFilter(object callback){return null;}
        /// <summary>
        /// Adds valid elements rules to the serializers schema instance this enables you to specify things
        /// like what elements should be outputted and what attributes specific elements might have.
        /// Consult the Wiki for more details on this format.
        /// </summary>
        /// <param name="rules">Valid elements rules string to add to schema.</param>
        public object addRules(string rules){return null;}
        /// <summary>
        /// Serializes the specified browser DOM node into a HTML string.
        /// </summary>
        /// <param name="node">DOM node to serialize.</param>
        /// <param name="args">Arguments option that gets passed to event handlers.</param>
        public object serialize(object node, object args){return null;}
        /// <summary>
        /// Constucts a new DOM serializer class.
        /// </summary>
        /// <param name="settings">Serializer settings object.</param>
        /// <param name="dom">DOMUtils instance reference.</param>
        /// <param name="schema">Optional schema reference.</param>
        public Serializer(object settings, SharpKit.TinyMCE.dom.DOMUtils dom, SharpKit.TinyMCE.html.Schema schema){}
        /// <summary>
        /// Sets the valid elements rules to the serializers schema instance this enables you to specify things
        /// like what elements should be outputted and what attributes specific elements might have.
        /// Consult the Wiki for more details on this format.
        /// </summary>
        /// <param name="rules">Valid elements rules string.</param>
        public object setRules(string rules){return null;}
    }
}
