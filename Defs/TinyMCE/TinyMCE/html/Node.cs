//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE.html
{
    /// <summary>
    /// This class is a minimalistic implementation of a DOM like node used by the DomParser class.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce.html.Node", Export=false)]
    public  partial class Node
    {
        /// <summary>
        /// Appends a new node as a child of the current node.
        /// </summary>
        /// <param name="node">Node to append as a child of the current one.</param>
        public SharpKit.TinyMCE.html.Node append(SharpKit.TinyMCE.html.Node node){return null;}
        /// <summary>
        /// Gets/sets or removes an attribute by name.
        /// </summary>
        /// <param name="name">Attribute name to set or get.</param>
        /// <param name="value">Optional value to set.</param>
        public string attr(string name, string value){return null;}
        /// <summary>
        /// Does a shallow clones the node into a new node. It will also exclude id attributes since
        /// there should only be one id per document.
        /// </summary>
        public SharpKit.TinyMCE.html.Node clone(){return null;}
        /// <summary>
        /// Creates a node of a specific type.
        /// </summary>
        /// <param name="name">Name of the node type to create for example "b" or "#text".</param>
        /// <param name="attrs">Name/value collection of attributes that will be applied to elements.</param>
        public static object create(string name, object attrs){return null;}
        /// <summary>
        /// Removes all children of the current node.
        /// </summary>
        public SharpKit.TinyMCE.html.Node empty(){return null;}
        /// <summary>
        /// Get all children by name.
        /// </summary>
        /// <param name="name">Name of the child nodes to collect.</param>
        public Array getAll(string name){return null;}
        /// <summary>
        /// Inserts a node at a specific position as a child of the current node.
        /// </summary>
        /// <param name="node">Node to insert as a child of the current node.</param>
        /// <param name="ref_node">Reference node to set node before/after.</param>
        /// <param name="before">Optional state to insert the node before the reference node.</param>
        public SharpKit.TinyMCE.html.Node insert(SharpKit.TinyMCE.html.Node node, SharpKit.TinyMCE.html.Node ref_node, bool before){return null;}
        /// <summary>
        /// Returns true/false if the node is to be considered empty or not.
        /// </summary>
        /// <param name="elements">Name/value object with elements that are automatically treated as non empty elements.</param>
        public bool isEmpty(object elements){return false;}
        /// <summary>
        /// Constructs a new Node instance.
        /// </summary>
        /// <param name="name">Name of the node type.</param>
        /// <param name="type">Numeric type representing the node.</param>
        public Node(string name, object type){}
        /// <summary>
        /// Removes the node from it's parent.
        /// </summary>
        public SharpKit.TinyMCE.html.Node remove(){return null;}
        /// <summary>
        /// Replaces the current node with the specified one.
        /// </summary>
        /// <param name="node">Node to replace the current node with.</param>
        public SharpKit.TinyMCE.html.Node replace(SharpKit.TinyMCE.html.Node node){return null;}
        /// <summary>
        /// Unwraps the node in other words it removes the node but keeps the children.
        /// </summary>
        public object unwrap(){return null;}
        /// <summary>
        /// Walks to the next or previous node and returns that node or null if it wasn't found.
        /// </summary>
        /// <param name="prev">Optional previous node state defaults to false.</param>
        public SharpKit.TinyMCE.html.Node walk(bool prev){return null;}
        /// <summary>
        /// Wraps the node in in another node.
        /// </summary>
        public object wrap(){return null;}
    }
}
