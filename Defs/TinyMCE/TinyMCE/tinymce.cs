//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace SharpKit.TinyMCE
{
    /// <summary>
    /// Fires when an editor instance is removed from the tinymce collection.
    /// </summary>
    [JsType(JsMode.Prototype, Name="tinymce", Export=false)]
    public static  partial class tinymce
    {
        /// <summary>
        /// Adds an editor instance to the editor collection. This will also set it as the active editor.
        /// </summary>
        /// <param name="editor">Editor instance to add to the collection.</param>
        public static SharpKit.TinyMCE.Editor add(SharpKit.TinyMCE.Editor editor){return null;}
        /// <summary>
        /// Adds a language pack, this gets called by the loaded language files like en.js.
        /// </summary>
        /// <param name="p">Prefix for the language items. For example en.myplugin</param>
        /// <param name="o">Name/Value collection with items to add to the language group.</param>
        public static object addI18n(string p, object o){return null;}
        /// <summary>
        /// Adds an unload handler to the document. This handler will be executed when the document gets unloaded.
        /// This method is useful for dealing with browser memory leaks where it might be vital to remove DOM references etc.
        /// </summary>
        /// <param name="f">Function to execute before the document gets unloaded.</param>
        /// <param name="s">Optional scope to execute the function in.</param>
        public static object addUnload(object f, object s){return null;}
        /// <summary>
        /// Creates a class, subclass or static singleton.
        /// More details on this method can be found in the Wiki.
        /// </summary>
        /// <param name="s">Class name, inheritage and prefix.</param>
        /// <param name="p">Collection of methods to add to the class.</param>
        /// <param name="root">Optional root object defaults to the global window object.</param>
        public static object create(string s, object p, object root){return null;}
        /// <summary>
        /// Creates a namespace on a specific object.
        /// </summary>
        /// <param name="n">Namespace to create for example a.b.c.d.</param>
        /// <param name="o">Optional object to add namespace to, defaults to window.</param>
        public static object createNS(string n, object o){return null;}
        /// <summary>
        /// Performs an iteration of all items in a collection such as an object or array. This method will execure the
        /// callback function for each item in the collection, if the callback returns false the iteration will terminate.
        /// The callback has the following format: cb(value, key_or_index).
        /// </summary>
        /// <param name="o">Collection to iterate.</param>
        /// <param name="cb">Callback function to execute for each item.</param>
        /// <param name="s">Optional scope to execute the callback in.</param>
        public static object each(object o, object cb, object s){return null;}
        /// <summary>
        /// Executes a specific command on the currently active editor.
        /// </summary>
        /// <param name="c">Command to perform for example Bold.</param>
        /// <param name="u">Optional boolean state if a UI should be presented for the command or not.</param>
        /// <param name="v">Optional value parameter like for example an URL to a link.</param>
        public static bool execCommand(string c, bool u, string v){return false;}
        /// <summary>
        /// Executes a command on a specific editor by id. This method was added for compatibility with the 2.x branch.
        /// </summary>
        /// <param name="id">Editor id to perform the command on.</param>
        /// <param name="c">Command to perform for example Bold.</param>
        /// <param name="u">Optional boolean state if a UI should be presented for the command or not.</param>
        /// <param name="v">Optional value parameter like for example an URL to a link.</param>
        public static bool execInstanceCommand(string id, string c, bool u, string v){return false;}
        /// <summary>
        /// Splits a string but removes the whitespace before and after each value.
        /// </summary>
        /// <param name="s">String to split.</param>
        /// <param name="d">Delimiter to split by.</param>
        public static object explode(string s, string d){return null;}
        /// <summary>
        /// Extends an object with the specified other object(s).
        /// </summary>
        /// <param name="obj">Object to extend with new items.</param>
        /// <param name="ext__n">Object(s) to extend the specified object with.</param>
        public static object extend(object obj, object ext__n){return null;}
        /// <summary>
        /// Returns a editor instance by id.
        /// </summary>
        public static SharpKit.TinyMCE.Editor get(){return null;}
        /// <summary>
        /// Returns a editor instance by id. This method was added for compatibility with the 2.x branch.
        /// </summary>
        /// <param name="id">Editor instance id to return.</param>
        public static SharpKit.TinyMCE.Editor getInstanceById(string id){return null;}
        /// <summary>
        /// Filters out items from the input array by calling the specified function for each item.
        /// If the function returns false the item will be excluded if it returns true it will be included.
        /// </summary>
        /// <param name="a">Array of items to loop though.</param>
        /// <param name="f">Function to call for each item. Include/exclude depends on it's return value.</param>
        public static Array grep(Array a, object f){return null;}
        /// <summary>
        /// Returns the index of a value in an array, this method will return -1 if the item wasn't found.
        /// </summary>
        /// <param name="a">Array/Object to search for value in.</param>
        /// <param name="v">Value to check for inside the array.</param>
        public static object inArray(Array a, object v){return null;}
        /// <summary>
        /// Initializes a set of editors. This method will create a bunch of editors based in the input.
        /// </summary>
        /// <param name="s">Settings object to be passed to each editor instance.</param>
        public static object init(object s){return null;}
        /// <summary>
        /// Checks if a object is of a specific type for example an array.
        /// </summary>
        /// <param name="o">Object to check type of.</param>
        /// <param name="t">Optional type to check for.</param>
        public static bool @is(object o, string t){return false;}
        /// <summary>
        /// Makes a name/object map out of an array with names.
        /// </summary>
        /// <param name="delim">Optional delimiter to split string by.</param>
        /// <param name="map">Optional map to add items to.</param>
        public static object makeMap(string delim, object map){return null;}
        /// <summary>
        /// Creates a new array by the return value of each iteration function call. This enables you to convert
        /// one array list into another.
        /// </summary>
        /// <param name="a">Array of items to iterate.</param>
        /// <param name="f">Function to call for each item. It's return value will be the new value.</param>
        public static Array map(Array a, object f){return null;}
        /// <summary>
        /// Removes a editor instance from the collection.
        /// </summary>
        /// <param name="e">Editor instance to remove.</param>
        public static SharpKit.TinyMCE.Editor remove(SharpKit.TinyMCE.Editor e){return null;}
        /// <summary>
        /// Removes the specified function form the unload handler list.
        /// </summary>
        /// <param name="f">Function to remove from unload handler list.</param>
        public static object removeUnload(object f){return null;}
        /// <summary>
        /// Resolves a string and returns the object from a specific structure.
        /// </summary>
        /// <param name="n">Path to resolve for example a.b.c.d.</param>
        /// <param name="o">Optional object to search though, defaults to window.</param>
        public static object resolve(string n, object o){return null;}
        /// <summary>
        /// Calls the save method on all editor instances in the collection. This can be useful when a form is to be submitted.
        /// </summary>
        public static object triggerSave(){return null;}
        /// <summary>
        /// Removes whitespace from the beginning and end of a string.
        /// </summary>
        /// <param name="s">String to remove whitespace from.</param>
        public static string trim(string s){return null;}
        /// <summary>
        /// Executed the specified function for each item in a object tree.
        /// </summary>
        /// <param name="o">Object tree to walk though.</param>
        /// <param name="f">Function to call for each item.</param>
        /// <param name="n">Optional name of collection inside the objects to walk for example childNodes.</param>
        /// <param name="s">Optional scope to execute the function in.</param>
        public static object walk(object o, object f, string n, string s){return null;}
        /// <summary>
        /// Currently active editor instance.
        /// </summary>
        public static SharpKit.TinyMCE.Editor activeEditor{get;set;}
        /// <summary>
        /// Absolute baseURI for the installation path of TinyMCE.
        /// </summary>
        public static SharpKit.TinyMCE.util.URI baseURI{get;set;}
        /// <summary>
        /// Collection of editor instances.
        /// </summary>
        public static object editors{get;set;}
        /// <summary>
        /// Collection of language pack data.
        /// </summary>
        public static object i18n{get;set;}
        /// <summary>
        /// Constant that is true if the runtime is Adobe Air.
        /// </summary>
        public static bool isAir{get;set;}
        /// <summary>
        /// Constant that is true if the browser is Gecko.
        /// </summary>
        public static bool isGecko{get;set;}
        /// <summary>
        /// Constant that tells if the current browser is an iPhone or iPad.
        /// </summary>
        public static bool isIDevice{get;set;}
        /// <summary>
        /// Constant that is true if the browser is IE.
        /// </summary>
        public static bool isIE{get;set;}
        /// <summary>
        /// Constant that is true if the browser is IE 6 or older.
        /// </summary>
        public static bool isIE6{get;set;}
        /// <summary>
        /// Constant that is true if the browser is IE 7.
        /// </summary>
        public static bool isIE7{get;set;}
        /// <summary>
        /// Constant that is true if the browser is IE 8.
        /// </summary>
        public static bool isIE8{get;set;}
        /// <summary>
        /// Constant that is true if the browser is IE 9.
        /// </summary>
        public static bool isIE9{get;set;}
        /// <summary>
        /// Constant that is true if the current browser is running on iOS 5 or greater.
        /// </summary>
        public static bool isIOS5{get;set;}
        /// <summary>
        /// Constant that is true if the os is Mac OS.
        /// </summary>
        public static bool isMac{get;set;}
        /// <summary>
        /// Constant that is true if the browser is Opera.
        /// </summary>
        public static bool isOpera{get;set;}
        /// <summary>
        /// Constant that is true if the browser is WebKit (Safari/Chrome).
        /// </summary>
        public static bool isWebKit{get;set;}
        /// <summary>
        /// Major version of TinyMCE build.
        /// </summary>
        public static string majorVersion{get;set;}
        /// <summary>
        /// Major version of TinyMCE build.
        /// </summary>
        public static string minorVersion{get;set;}
        /// <summary>
        /// Release date of TinyMCE build.
        /// </summary>
        public static string releaseDate{get;set;}
    }
}
