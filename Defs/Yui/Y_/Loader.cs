//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Loader dynamically loads script and css files.  It includes the dependency
    /// info for the version of the library in use, and will automatically pull in
    /// dependencies for the modules requested. It can load the
    /// files from the Yahoo! CDN, and it can utilize the combo service provided on
    /// this network to reduce the number of http connections required to download
    /// YUI files. You can also specify an external, custom combo service to host
    /// your modules as well.
    /// var Y = YUI();
    /// var loader = new Y.Loader({
    /// filter: 'debug',
    /// base: '../../',
    /// root: 'build/',
    /// combine: true,
    /// require: ['node', 'dd', 'console']
    /// });
    /// var out = loader.resolve(true);
    /// </summary>
    public partial class Loader
    {
        /// <summary>
        /// Adds an alias module to the system
        /// </summary>
        public void addAlias(Y_.Array use, object name){}
        /// <summary>
        /// Add a new module group
        /// </summary>
        public void addGroup(object config, object name){}
        /// <summary>
        /// Add a new module to the component metadata.
        /// </summary>
        public object addModule(object config){return null;}
        /// <summary>
        /// Add a new module to the component metadata.
        /// </summary>
        public object addModule(object config, object name){return null;}
        /// <summary>
        /// Calculates the dependency tree, the result is stored in the sorted
        /// property.
        /// </summary>
        public void calculate(object o, object type){}
        /// <summary>
        /// Explodes the required array to remove aliases and replace them with real modules
        /// </summary>
        public Y_.Array filterRequires(Y_.Array r){return null;}
        /// <summary>
        /// Returns the skin module name for the specified skin name.  If a
        /// module name is supplied, the returned skin module name is
        /// specific to the module passed in.
        /// </summary>
        public object formatSkin(object skin, object mod){return null;}
        /// <summary>
        /// Builds a module name for a language pack
        /// </summary>
        public object getLangPackName(object lang, object mname){return null;}
        /// <summary>
        /// Get's the loader meta data for the requested module
        /// </summary>
        public object getModule(object mname){return null;}
        /// <summary>
        /// Returns a hash of module names the supplied module satisfies.
        /// </summary>
        public object getProvides(object name){return null;}
        /// <summary>
        /// Returns an object containing properties for all modules required
        /// in order to load the requested module
        /// </summary>
        public Y_.Array getRequires(object mod){return null;}
        /// <summary>
        /// inserts the requested modules and their dependencies.
        /// <code>type</code> can be "js" or "css".  Both script and
        /// css are inserted if type is not provided.
        /// </summary>
        public void insert(object o, object type){}
        /// <summary>
        /// Check to see if named css module is already loaded on the page
        /// </summary>
        public object isCSSLoaded(object name){return null;}
        /// <summary>
        /// Shortcut to calculate, resolve and load all modules.
        /// var loader = new Y.Loader({
        /// ignoreRegistered: true,
        /// modules: {
        /// mod: {
        /// path: 'mod.js'
        /// }
        /// },
        /// requires: [ 'mod' ]
        /// });
        /// loader.load(function() {
        /// console.log('All modules have loaded..');
        /// });
        /// </summary>
        public void load(object cb){}
        /// <summary>
        /// Executed every time a module is loaded, and if we are in a load
        /// cycle, we attempt to load the next script.  Public so that it
        /// is possible to call this if using a method other than
        /// Y.register to determine when scripts are fully loaded
        /// </summary>
        public void loadNext(object mname){}
        /// <summary>
        /// Callback for the 'CSSComplete' event.  When loading YUI components
        /// with CSS the CSS is loaded first, then the script.  This provides
        /// a moment you can tie into to improve the presentation of the page
        /// while the script is loading.
        /// </summary>
        public void onCSS(){}
        /// <summary>
        /// Callback that will be executed if there is a failure
        /// </summary>
        public void onFailure(){}
        /// <summary>
        /// Callback executed each time a script or css file is loaded
        /// </summary>
        public void onProgress(){}
        /// <summary>
        /// Callback that will be executed when the loader is finished
        /// with an insert
        /// </summary>
        public void onSuccess(){}
        /// <summary>
        /// Callback that will be executed if a timeout occurs
        /// </summary>
        public void onTimeout(){}
        /// <summary>
        /// Add a requirement for one or more module
        /// </summary>
        public void require(object what){}
        /// <summary>
        /// Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.
        /// </summary>
        public object resolve(){return null;}
        /// <summary>
        /// Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.
        /// </summary>
        public object resolve(Y_.Array s){return null;}
        /// <summary>
        /// Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.
        /// </summary>
        public object resolve(object calc){return null;}
        /// <summary>
        /// Returns an Object hash of file arrays built from `loader.sorted` or from an arbitrary list of sorted modules.
        /// </summary>
        public object resolve(object calc, Y_.Array s){return null;}
        /// <summary>
        /// The base directory.
        /// </summary>
        public string @base{get;set;}
        /// <summary>
        /// The charset attribute for inserted nodes
        /// </summary>
        public string charset{get;set;}
        /// <summary>
        /// Base path for the combo service
        /// </summary>
        public string comboBase{get;set;}
        /// <summary>
        /// The execution context for all callbacks
        /// </summary>
        public object context{get;set;}
        /// <summary>
        /// An object literal containing attributes to add to link nodes
        /// </summary>
        public object cssAttributes{get;set;}
        /// <summary>
        /// Data that is passed to all callbacks
        /// </summary>
        public object data{get;set;}
        /// <summary>
        /// Default filters for raw and debug
        /// </summary>
        protected object FILTER_DEFS{get;set;}
        /// <summary>
        /// per-component filter specification.  If specified for a given
        /// component, this overrides the filter config.
        /// </summary>
        public object filters{get;set;}
        /// <summary>
        /// Ignore modules registered on the YUI global
        /// </summary>
        public object ignoreRegistered{get;set;}
        /// <summary>
        /// An object literal containing attributes to add to script nodes
        /// </summary>
        public object jsAttributes{get;set;}
        /// <summary>
        /// Max url length for combo urls.  The default is 2048. This is the URL
        /// limit for the Yahoo! hosted combo servers.  If consuming
        /// a different combo service that has a different URL limit
        /// it is possible to override this default by supplying
        /// the maxURLLength config option.  The config option will
        /// only take effect if lower than the default.
        /// </summary>
        public int maxURLLength{get;set;}
        /// <summary>
        /// The library metadata
        /// </summary>
        public object moduleInfo{get;set;}
        /// <summary>
        /// If a module name is predefined when requested, it is checked againsts
        /// the patterns provided in this property.  If there is a match, the
        /// module is added with the default configuration.
        /// At the moment only supporting module prefixes, but anticipate
        /// supporting at least regular expressions.
        /// </summary>
        public object patterns{get;set;}
        /// <summary>
        /// List of rollup files found in the library metadata
        /// </summary>
        public object rollups{get;set;}
        /// <summary>
        /// Root path to prepend to module path for the combo
        /// service
        /// </summary>
        public string root{get;set;}
        /// <summary>
        /// List of skipped modules during insert() because the module
        /// was not defined
        /// </summary>
        public object skipped{get;set;}
        /// <summary>
        /// Timeout value in milliseconds.  If set, self value will be used by
        /// the get utility.  the timeout event will fire if
        /// a timeout occurs.
        /// </summary>
        public int timeout{get;set;}
    }
}
