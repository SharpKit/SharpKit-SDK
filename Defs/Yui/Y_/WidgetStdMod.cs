//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Widget extension, which can be used to add Standard Module support to the
    /// base Widget class, through the <a href="Base.html#method_build">Base.build</a>
    /// method.
    /// <p>
    /// The extension adds header, body and footer sections to the Widget's content box and
    /// provides the corresponding methods and attributes to modify the contents of these sections.
    /// </p>
    /// </summary>
    public partial class WidgetStdMod
    {
        /// <summary>
        /// Default attribute change listener for the bodyContent attribute, responsible
        /// for updating the UI, in response to attribute changes.
        /// </summary>
        protected void _afterBodyChange(EventFacade e){}
        /// <summary>
        /// Default attribute change listener for the fillHeight attribute, responsible
        /// for updating the UI, in response to attribute changes.
        /// </summary>
        protected void _afterFillHeightChange(EventFacade e){}
        /// <summary>
        /// Default attribute change listener for the footerContent attribute, responsible
        /// for updating the UI, in response to attribute changes.
        /// </summary>
        protected void _afterFooterChange(EventFacade e){}
        /// <summary>
        /// Default attribute change listener for the headerContent attribute, responsible
        /// for updating the UI, in response to attribute changes.
        /// </summary>
        protected void _afterHeaderChange(EventFacade e){}
        /// <summary>
        /// Binds event listeners responsible for updating the UI state in response to
        /// Widget standard module related state changes.
        /// <p>
        /// This method is invoked after bindUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _bindUIStdMod(){}
        /// <summary>
        /// Removes the DOM node for the given section.
        /// </summary>
        protected void _eraseStdMod(object section){}
        /// <summary>
        /// Gets a new Node reference for the given standard module section, by cloning
        /// the stored template node.
        /// </summary>
        protected Node _getStdModTemplate(object section){return null;}
        /// <summary>
        /// Creates the DOM node for the given section, and inserts it into the correct location in the contentBox.
        /// </summary>
        protected Node _renderStdMod(object section){return null;}
        /// <summary>
        /// Creates/Initializes the DOM for standard module support.
        /// <p>
        /// This method is invoked after renderUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _renderUIStdMod(){}
        /// <summary>
        /// Synchronizes the UI to match the Widgets standard module state.
        /// <p>
        /// This method is invoked after syncUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _syncUIStdMod(){}
        /// <summary>
        /// Updates the rendered UI, to resize the provided section so that the standard module fills out
        /// the specified widget height. Note: This method does not check whether or not a height is set
        /// on the Widget.
        /// </summary>
        protected void _uiSetFillHeight(object fillSection){}
        /// <summary>
        /// Updates the rendered UI, adding the provided content (either an HTML string, or node reference),
        /// to the specified section. The content is either added before, after or replaces existing content
        /// in the section, based on the value of the <code>where</code> argument.
        /// </summary>
        protected void _uiSetStdMod(object section, object content, object where){}
        /// <summary>
        /// Default validator for the fillHeight attribute. Verifies that the
        /// value set is a valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER,
        /// or a falsey value if fillHeight is to be disabled.
        /// </summary>
        protected object _validateFillHeight(object val){return null;}
        /// <summary>
        /// Sets the height on the provided header, body or footer element to
        /// fill out the height of the Widget. It determines the height of the
        /// widgets bounding box, based on it's configured height value, and
        /// sets the height of the provided section to fill out any
        /// space remaining after the other standard module section heights
        /// have been accounted for.
        /// <p><strong>NOTE:</strong> This method is not designed to work if an explicit
        /// height has not been set on the Widget, since for an "auto" height Widget,
        /// the heights of the header/body/footer will drive the height of the Widget.</p>
        /// </summary>
        public void fillHeight(Node node){}
        /// <summary>
        /// Returns the node reference for the specified `section`.
        /// **Note:** The DOM is not queried for the node reference. The reference
        /// stored by the widget instance is returned if it was set. Passing a
        /// truthy for `forceCreate` will create the section node if it does not
        /// already exist.
        /// </summary>
        public Node getStdModNode(object section, object forceCreate){return null;}
        /// <summary>
        /// Updates the body section of the standard module with the content provided (either an HTML string, or node reference).
        /// <p>
        /// This method can be used instead of the corresponding section content attribute if you'd like to retain the current content of the section,
        /// and insert content before or after it, by specifying the <code>where</code> argument.
        /// </p>
        /// </summary>
        public void setStdModContent(object section, object content, object where){}
        /// <summary>
        /// Static property used to define the default attribute
        /// configuration introduced by WidgetStdMod.
        /// </summary>
        public object ATTRS{get;set;}
        /// <summary>
        /// The HTML parsing rules for the WidgetStdMod class.
        /// </summary>
        public object HTML_PARSER{get;set;}
        /// <summary>
        /// Static hash of default class names used for the header,
        /// body and footer sections of the standard module, keyed by
        /// the section identifier (WidgetStdMod.STD_HEADER, WidgetStdMod.STD_BODY, WidgetStdMod.STD_FOOTER)
        /// </summary>
        public object SECTION_CLASS_NAMES{get;set;}
        /// <summary>
        /// The template HTML strings for each of the standard module sections. Section entries are keyed by the section constants,
        /// WidgetStdMod.HEADER, WidgetStdMod.BODY, WidgetStdMod.FOOTER, and contain the HTML to be added for each section.
        /// e.g.
        /// <pre>
        /// {
        /// header : '&lt;div class="yui-widget-hd"&gt;&lt;/div&gt;',
        /// body : '&lt;div class="yui-widget-bd"&gt;&lt;/div&gt;',
        /// footer : '&lt;div class="yui-widget-ft"&gt;&lt;/div&gt;'
        /// }
        /// </pre>
        /// </summary>
        public object TEMPLATES{get;set;}
    }
}
