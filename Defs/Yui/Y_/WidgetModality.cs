//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Widget extension, which can be used to add modality support to the base Widget class,
    /// through the Base.create method.
    /// </summary>
    public partial class WidgetModality
    {
        /// <summary>
        /// Default function called when focusOn Attribute is changed. Remove existing listeners and create new listeners.
        /// </summary>
        public void _afterFocusOnChange(){}
        /// <summary>
        /// Default function that is called when visibility is changed on the widget.
        /// </summary>
        public void _afterHostVisibleChangeModal(EventFacade e){}
        /// <summary>
        /// Default function that is called when z-index is changed on the widget.
        /// </summary>
        public void _afterHostZIndexChangeModal(EventFacade e){}
        /// <summary>
        /// Attaches UI Listeners for "clickoutside" and "focusoutside" on the widget. When these events occur, and the widget is modal, focus is shifted back onto the widget.
        /// </summary>
        public void _attachUIHandlesModal(){}
        /// <summary>
        /// Hooks up methods to be executed when the widget's visibility or z-index changes
        /// <p>
        /// This method in invoked after bindUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _bindUIModal(){}
        /// <summary>
        /// Blurs the widget.
        /// </summary>
        public void _blur(){}
        /// <summary>
        /// Detaches all UI Listeners that were set in _attachUIHandlesModal from the widget.
        /// </summary>
        public void _detachUIHandlesModal(){}
        /// <summary>
        /// Provides mouse and tab focus to the widget's bounding box.
        /// </summary>
        public void _focus(){}
        /// <summary>
        /// Returns the mask if it exists on the page - otherwise creates a mask. There's only
        /// one mask on a page at a given time.
        /// <p>
        /// This method in invoked internally by the getter of the maskNode ATTR.
        /// </p>
        /// </summary>
        public void _GET_MASK(){}
        /// <summary>
        /// Returns the Y.Node instance of the maskNode
        /// </summary>
        public Node _getMaskNode(){return null;}
        /// <summary>
        /// Adds modal class to the bounding box of the widget
        /// <p>
        /// This method in invoked after renderUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _renderUIModal(){}
        /// <summary>
        /// Repositions the mask in the DOM for nested modality cases.
        /// </summary>
        public void _repositionMask(Widget nextElem){}
        /// <summary>
        /// Syncs the mask with the widget's current state, namely the visibility and z-index of the widget
        /// <p>
        /// This method in invoked after syncUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _syncUIModal(){}
        /// <summary>
        /// Performs events attaching/detaching, stack shifting and mask repositioning based on the visibility of the widget
        /// </summary>
        public void _uiSetHostVisibleModal(object Whether){}
        /// <summary>
        /// Sets the z-index of the mask node.
        /// </summary>
        public void _uiSetHostZIndexModal(Y_.DataType_.Number Z_Index){}
        /// <summary>
        /// Returns a boolean representing whether the current widget is in a "nested modality" state.
        /// This is done by checking the number of widgets currently on the stack.
        /// </summary>
        public void isNested(){}
        /// <summary>
        /// Static property used to define the default attribute
        /// configuration introduced by WidgetModality.
        /// </summary>
        public object ATTRS{get;set;}
        /// <summary>
        /// A stack of Y.Widget objects representing the current hierarchy of modal widgets presently displayed on the screen
        /// </summary>
        public object STACK{get;set;}
    }
}
