//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides utility methods for escaping strings.
    /// </summary>
    public partial class Escape
    {
        /// <summary>
        /// Regex replacer for HTML escaping.
        /// </summary>
        protected object _htmlReplacer(object match){return null;}
        /// <summary>
        /// Returns a copy of the specified string with special HTML characters
        /// escaped. The following characters will be converted to their
        /// corresponding character entities:
        /// & < > " ' / `
        /// This implementation is based on the [OWASP HTML escaping
        /// recommendations][1]. In addition to the characters in the OWASP
        /// recommendations, we also escape the <code>&#x60;</code> character, since IE
        /// interprets it as an attribute delimiter.
        /// If _string_ is not already a string, it will be coerced to a string.
        /// [1]: http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
        /// </summary>
        public object html(object @string){return null;}
        /// <summary>
        /// Returns a copy of the specified string with special regular expression
        /// characters escaped, allowing the string to be used safely inside a regex.
        /// The following characters, and all whitespace characters, are escaped:
        /// - $ ^ * ( ) + [ ] { } | \ , . ?
        /// If _string_ is not already a string, it will be coerced to a string.
        /// </summary>
        public object regex(object @string){return null;}
    }
}
