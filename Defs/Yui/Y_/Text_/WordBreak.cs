//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.Text_
{
    /// <summary>
    /// <p>
    /// Provides utility methods for splitting strings on word breaks and determining
    /// whether a character index represents a word boundary, using the generic word
    /// breaking algorithm defined in the Unicode Text Segmentation guidelines
    /// (<a href="http://unicode.org/reports/tr29/#Word_Boundaries">Unicode Standard
    /// Annex #29</a>).
    /// </p>
    /// <p>
    /// This algorithm provides a reasonable default for many languages. However, it
    /// does not cover language or context specific requirements, and it does not
    /// provide meaningful results at all for languages that don't use spaces between
    /// words, such as Chinese, Japanese, Thai, Lao, Khmer, and others. Server-based
    /// word breaking services usually provide significantly better results with
    /// better performance.
    /// </p>
    /// </summary>
    public partial class WordBreak
    {
        /// <summary>
        /// Returns a character classification map for the specified string.
        /// </summary>
        protected Y_.Array _classify(object @string){return null;}
        /// <summary>
        /// <p>
        /// Returns <code>true</code> if there is a word boundary between the
        /// specified character index and the next character index (or the end of the
        /// string).
        /// </p>
        /// <p>
        /// Note that there are always word breaks at the beginning and end of a
        /// string, so <code>_isWordBoundary('', 0)</code> and
        /// <code>_isWordBoundary('a', 0)</code> will both return <code>true</code>.
        /// </p>
        /// </summary>
        protected object _isWordBoundary(Y_.Array map, Y_.DataType_.Number index){return null;}
        /// <summary>
        /// Returns an array containing only unique words from the specified string.
        /// For example, the string <code>'foo bar baz foo'</code> would result in
        /// the array <code>['foo', 'bar', 'baz']</code>.
        /// </summary>
        public Y_.Array getUniqueWords(object @string, object options){return null;}
        /// <summary>
        /// Splits the specified string into an array of individual words.
        /// </summary>
        public Y_.Array getWords(object @string, object options){return null;}
        /// <summary>
        /// <p>
        /// Returns <code>true</code> if there is a word boundary between the
        /// specified character index and the next character index (or the end of the
        /// string).
        /// </p>
        /// <p>
        /// Note that there are always word breaks at the beginning and end of a
        /// string, so <code>isWordBoundary('', 0)</code> and
        /// <code>isWordBoundary('a', 0)</code> will both return <code>true</code>.
        /// </p>
        /// </summary>
        public object isWordBoundary(object @string, Y_.DataType_.Number index){return null;}
    }
}
