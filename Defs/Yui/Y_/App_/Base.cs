//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.App_
{
    /// <summary>
    /// Provides a top-level application component which manages navigation and views.
    /// This gives you a foundation and structure on which to build your application; it
    /// combines robust URL navigation with powerful routing and flexible view
    /// management.
    /// </summary>
    public partial class Base : Y_.Base
    {
        /// <summary>
        /// Handles the application's `activeViewChange` event (which is fired when the
        /// `activeView` attribute changes) by detaching the old view, attaching the new
        /// view.
        /// The `activeView` attribute is read-only, so the public API to change its
        /// value is through the `showView()` method.
        /// </summary>
        protected void _afterActiveViewChange(EventFacade e){}
        /// <summary>
        /// Helper method to attach the view instance to the application by making the
        /// app a bubble target of the view, append the view to the `viewContainer`, and
        /// assign it to the `instance` property of the associated view info metadata.
        /// </summary>
        protected void _attachView(View view, object prepend){}
        [JsMethod(JsonInitializers=true)]
        public Base(){}
        /// <summary>
        /// Overrides View's container destruction to deal with the `viewContainer` and
        /// checks to make sure not to remove and purge the `<body>`.
        /// </summary>
        protected void _destroyContainer(){}
        /// <summary>
        /// Helper method to detach the view instance from the application by removing
        /// the application as a bubble target of the view, and either just removing the
        /// view if it is intended to be preserved, or destroying the instance
        /// completely.
        /// </summary>
        protected void _detachView(View view){}
        /// <summary>
        /// Gets the current full URL. When `html5` is false, the URL will first be
        /// upgraded before it's returned.
        /// </summary>
        protected object _getURL(){return null;}
        /// <summary>
        /// Getter for the `viewContainer` attribute.
        /// </summary>
        protected Node _getViewContainer(object value){return null;}
        /// <summary>
        /// Provides the default value for the `html5` attribute.
        /// The value returned is dependent on the value of the `serverRouting`
        /// attribute. When `serverRouting` is explicit set to `false` (not just falsy),
        /// the default value for `html5` will be set to `false` for *all* browsers.
        /// When `serverRouting` is `true` or `undefined` the returned value will be
        /// dependent on the browser's capability of using HTML5 history.
        /// </summary>
        protected object _initHtml5(){return null;}
        /// <summary>
        /// Determines if the specified `view` is configured as a child of the specified
        /// `parent` view. This requires both views to be either named-views, or view
        /// instances created using configuration data that exists in the `views`
        /// object, e.g. created by the `createView()` or `showView()` method.
        /// </summary>
        protected object _isChildView(object view, object parent){return null;}
        /// <summary>
        /// Determines if the specified `view` is configured as the parent of the
        /// specified `child` view. This requires both views to be either named-views,
        /// or view instances created using configuration data that exists in the
        /// `views` object, e.g. created by the `createView()` or `showView()` method.
        /// </summary>
        protected object _isParentView(object view, object parent){return null;}
        /// <summary>
        /// Underlying implementation for `navigate()`.
        /// </summary>
        protected void _navigate(object url){}
        /// <summary>
        /// Underlying implementation for `navigate()`.
        /// </summary>
        protected void _navigate(object url, object options){}
        /// <summary>
        /// Will either save a history entry using `pushState()` or the location hash,
        /// or gracefully-degrade to sending a request to the server causing a full-page
        /// reload.
        /// Overrides Router's `_save()` method to preform graceful-degradation when the
        /// app's `serverRouting` is `true` and `html5` is `false` by updating the full
        /// URL via standard assignment to `window.location` or by calling
        /// `window.location.replace()`; both of which will cause a request to the
        /// server resulting in a full-page reload.
        /// Otherwise this will just delegate off to Router's `_save()` method allowing
        /// the client-side enhanced routing to occur.
        /// </summary>
        protected void _save(){}
        /// <summary>
        /// Will either save a history entry using `pushState()` or the location hash,
        /// or gracefully-degrade to sending a request to the server causing a full-page
        /// reload.
        /// Overrides Router's `_save()` method to preform graceful-degradation when the
        /// app's `serverRouting` is `true` and `html5` is `false` by updating the full
        /// URL via standard assignment to `window.location` or by calling
        /// `window.location.replace()`; both of which will cause a request to the
        /// server resulting in a full-page reload.
        /// Otherwise this will just delegate off to Router's `_save()` method allowing
        /// the client-side enhanced routing to occur.
        /// </summary>
        protected void _save(object replace){}
        /// <summary>
        /// Will either save a history entry using `pushState()` or the location hash,
        /// or gracefully-degrade to sending a request to the server causing a full-page
        /// reload.
        /// Overrides Router's `_save()` method to preform graceful-degradation when the
        /// app's `serverRouting` is `true` and `html5` is `false` by updating the full
        /// URL via standard assignment to `window.location` or by calling
        /// `window.location.replace()`; both of which will cause a request to the
        /// server resulting in a full-page reload.
        /// Otherwise this will just delegate off to Router's `_save()` method allowing
        /// the client-side enhanced routing to occur.
        /// </summary>
        protected void _save(object url, object replace){}
        /// <summary>
        /// Performs the actual change of this app's `activeView` by attaching the
        /// `newView` to this app, and detaching the `oldView` from this app using any
        /// specified `options`.
        /// The `newView` is attached to the app by rendering it to the `viewContainer`,
        /// and making this app a bubble target of its events.
        /// The `oldView` is detached from the app by removing it from the
        /// `viewContainer`, and removing this app as a bubble target for its events.
        /// The `oldView` will either be preserved or properly destroyed.
        /// **Note:** The `activeView` attribute is read-only and can be changed by
        /// calling the `showView()` method.
        /// </summary>
        protected void _uiSetActiveView(View newView){}
        /// <summary>
        /// Performs the actual change of this app's `activeView` by attaching the
        /// `newView` to this app, and detaching the `oldView` from this app using any
        /// specified `options`.
        /// The `newView` is attached to the app by rendering it to the `viewContainer`,
        /// and making this app a bubble target of its events.
        /// The `oldView` is detached from the app by removing it from the
        /// `viewContainer`, and removing this app as a bubble target for its events.
        /// The `oldView` will either be preserved or properly destroyed.
        /// **Note:** The `activeView` attribute is read-only and can be changed by
        /// calling the `showView()` method.
        /// </summary>
        protected void _uiSetActiveView(View newView, object options){}
        /// <summary>
        /// Performs the actual change of this app's `activeView` by attaching the
        /// `newView` to this app, and detaching the `oldView` from this app using any
        /// specified `options`.
        /// The `newView` is attached to the app by rendering it to the `viewContainer`,
        /// and making this app a bubble target of its events.
        /// The `oldView` is detached from the app by removing it from the
        /// `viewContainer`, and removing this app as a bubble target for its events.
        /// The `oldView` will either be preserved or properly destroyed.
        /// **Note:** The `activeView` attribute is read-only and can be changed by
        /// calling the `showView()` method.
        /// </summary>
        protected void _uiSetActiveView(View newView, View oldView){}
        /// <summary>
        /// Performs the actual change of this app's `activeView` by attaching the
        /// `newView` to this app, and detaching the `oldView` from this app using any
        /// specified `options`.
        /// The `newView` is attached to the app by rendering it to the `viewContainer`,
        /// and making this app a bubble target of its events.
        /// The `oldView` is detached from the app by removing it from the
        /// `viewContainer`, and removing this app as a bubble target for its events.
        /// The `oldView` will either be preserved or properly destroyed.
        /// **Note:** The `activeView` attribute is read-only and can be changed by
        /// calling the `showView()` method.
        /// </summary>
        protected void _uiSetActiveView(View newView, View oldView, object options){}
        /// <summary>
        /// Upgrades a hash-based URL to a full-path URL, if necessary.
        /// The specified `url` will be upgraded if its of the same origin as the
        /// current URL and has a path-like hash. URLs that don't need upgrading will be
        /// returned as-is.
        /// </summary>
        protected object _upgradeURL(object url){return null;}
        /// <summary>
        /// Creates and returns a new view instance using the provided `name` to look up
        /// the view info metadata defined in the `views` object. The passed-in `config`
        /// object is passed to the view constructor function.
        /// This function also maps a view instance back to its view info metadata.
        /// </summary>
        public View createView(object name){return null;}
        /// <summary>
        /// Creates and returns a new view instance using the provided `name` to look up
        /// the view info metadata defined in the `views` object. The passed-in `config`
        /// object is passed to the view constructor function.
        /// This function also maps a view instance back to its view info metadata.
        /// </summary>
        public View createView(object name, object config){return null;}
        /// <summary>
        /// Returns the metadata associated with a view instance or view name defined on
        /// the `views` object.
        /// </summary>
        public object getViewInfo(object view){return null;}
        /// <summary>
        /// Navigates to the specified URL if there is a route handler that matches. In
        /// browsers capable of using HTML5 history or when `serverRouting` is falsy,
        /// the navigation will be enhanced by firing the `navigate` event and having
        /// the app handle the "request". When `serverRouting` is `true`, non-HTML5
        /// browsers will navigate to the new URL via a full page reload.
        /// When there is a route handler for the specified URL and it is being
        /// navigated to, this method will return `true`, otherwise it will return
        /// `false`.
        /// **Note:** The specified URL _must_ be of the same origin as the current URL,
        /// otherwise an error will be logged and navigation will not occur. This is
        /// intended as both a security constraint and a purposely imposed limitation as
        /// it does not make sense to tell the app to navigate to a URL on a
        /// different scheme, host, or port.
        /// </summary>
        public void navigate(object url){}
        /// <summary>
        /// Navigates to the specified URL if there is a route handler that matches. In
        /// browsers capable of using HTML5 history or when `serverRouting` is falsy,
        /// the navigation will be enhanced by firing the `navigate` event and having
        /// the app handle the "request". When `serverRouting` is `true`, non-HTML5
        /// browsers will navigate to the new URL via a full page reload.
        /// When there is a route handler for the specified URL and it is being
        /// navigated to, this method will return `true`, otherwise it will return
        /// `false`.
        /// **Note:** The specified URL _must_ be of the same origin as the current URL,
        /// otherwise an error will be logged and navigation will not occur. This is
        /// intended as both a security constraint and a purposely imposed limitation as
        /// it does not make sense to tell the app to navigate to a URL on a
        /// different scheme, host, or port.
        /// </summary>
        public void navigate(object url, object options){}
        /// <summary>
        /// Renders this application by appending the `viewContainer` node to the
        /// `container` node if it isn't already a child of the container, and the
        /// `activeView` will be appended the view container, if it isn't already.
        /// You should call this method at least once, usually after the initialization
        /// of your app instance so the proper DOM structure is setup and optionally
        /// append the container to the DOM if it's not there already.
        /// You may override this method to customize the app's rendering, but you
        /// should expect that the `viewContainer`'s contents will be modified by the
        /// app for the purpose of rendering the `activeView` when it changes.
        /// </summary>
        public void render(){}
        /// <summary>
        /// Sets which view is active/visible for the application. This will set the
        /// app's `activeView` attribute to the specified `view`.
        /// When a string-name is provided for a view which has been registered on this
        /// app's `views` object, the referenced metadata will be used and the
        /// `activeView` will be set to either a preserved view instance, or a new
        /// instance of the registered view will be created using the specified `config`
        /// object passed-into this method.
        /// A callback function can be specified as either the third or fourth argument,
        /// and this function will be called after the new `view` becomes the
        /// `activeView`, is rendered to the `viewContainer`, and is ready to use.
        /// </summary>
        public void showView(object view){}
        /// <summary>
        /// Sets which view is active/visible for the application. This will set the
        /// app's `activeView` attribute to the specified `view`.
        /// When a string-name is provided for a view which has been registered on this
        /// app's `views` object, the referenced metadata will be used and the
        /// `activeView` will be set to either a preserved view instance, or a new
        /// instance of the registered view will be created using the specified `config`
        /// object passed-into this method.
        /// A callback function can be specified as either the third or fourth argument,
        /// and this function will be called after the new `view` becomes the
        /// `activeView`, is rendered to the `viewContainer`, and is ready to use.
        /// </summary>
        public void showView(object view, JsAction callback){}
        /// <summary>
        /// Sets which view is active/visible for the application. This will set the
        /// app's `activeView` attribute to the specified `view`.
        /// When a string-name is provided for a view which has been registered on this
        /// app's `views` object, the referenced metadata will be used and the
        /// `activeView` will be set to either a preserved view instance, or a new
        /// instance of the registered view will be created using the specified `config`
        /// object passed-into this method.
        /// A callback function can be specified as either the third or fourth argument,
        /// and this function will be called after the new `view` becomes the
        /// `activeView`, is rendered to the `viewContainer`, and is ready to use.
        /// </summary>
        public void showView(object view, object options){}
        /// <summary>
        /// Sets which view is active/visible for the application. This will set the
        /// app's `activeView` attribute to the specified `view`.
        /// When a string-name is provided for a view which has been registered on this
        /// app's `views` object, the referenced metadata will be used and the
        /// `activeView` will be set to either a preserved view instance, or a new
        /// instance of the registered view will be created using the specified `config`
        /// object passed-into this method.
        /// A callback function can be specified as either the third or fourth argument,
        /// and this function will be called after the new `view` becomes the
        /// `activeView`, is rendered to the `viewContainer`, and is ready to use.
        /// </summary>
        public void showView(object view, object options, JsAction callback){}
        /// <summary>
        /// Sets which view is active/visible for the application. This will set the
        /// app's `activeView` attribute to the specified `view`.
        /// When a string-name is provided for a view which has been registered on this
        /// app's `views` object, the referenced metadata will be used and the
        /// `activeView` will be set to either a preserved view instance, or a new
        /// instance of the registered view will be created using the specified `config`
        /// object passed-into this method.
        /// A callback function can be specified as either the third or fourth argument,
        /// and this function will be called after the new `view` becomes the
        /// `activeView`, is rendered to the `viewContainer`, and is ready to use.
        /// </summary>
        public void showView(object view, object config, object options){}
        /// <summary>
        /// Sets which view is active/visible for the application. This will set the
        /// app's `activeView` attribute to the specified `view`.
        /// When a string-name is provided for a view which has been registered on this
        /// app's `views` object, the referenced metadata will be used and the
        /// `activeView` will be set to either a preserved view instance, or a new
        /// instance of the registered view will be created using the specified `config`
        /// object passed-into this method.
        /// A callback function can be specified as either the third or fourth argument,
        /// and this function will be called after the new `view` becomes the
        /// `activeView`, is rendered to the `viewContainer`, and is ready to use.
        /// </summary>
        public void showView(object view, object config, object options, JsAction callback){}
        /// <summary>
        /// Properties that shouldn't be turned into ad-hoc attributes when passed to
        /// App's constructor.
        /// </summary>
        protected Y_.Array _NON_ATTRS_CFG{get;set;}
        /// <summary>
        /// Map of view instance id (via `Y.stamp()`) to view-info object in `views`.
        /// This mapping is used to tie a specific view instance back to its metadata by
        /// adding a reference to the the related view info on the `views` object.
        /// </summary>
        protected object _viewInfoMap{get;set;}
        /// <summary>
        /// The application's active/visible view.
        /// This attribute is read-only, to set the `activeView` use the
        /// `showView()` method.
        /// </summary>
        public View activeView{get;private set;}
        /// <summary>
        /// Hash of view-name to metadata used to declaratively describe an
        /// application's views and their relationship with the app and its other views.
        /// The view metadata is composed of Objects keyed to a view-name that can have
        /// any or all of the following properties:
        /// * `type`: Function or a string representing the view constructor to use to
        /// create view instances. If a string is used, the constructor function is
        /// assumed to be on the `Y` object; e.g. `"SomeView"` -> `Y.SomeView`.
        /// * `preserve`: Boolean for whether the view instance should be retained. By
        /// default, the view instance will be destroyed when it is no longer the
        /// `activeView`. If `true` the view instance will simply be `removed()`
        /// from the DOM when it is no longer active. This is useful when the view
        /// is frequently used and may be expensive to re-create.
        /// * `parent`: String to another named view in this hash that represents the
        /// parent view within the application's view hierarchy; e.g. a `"photo"`
        /// view could have `"album"` has its `parent` view. This parent/child
        /// relationship is a useful cue for things like transitions.
        /// * `instance`: Used internally to manage the current instance of this named
        /// view. This can be used if your view instance is created up-front, or if
        /// you would rather manage the View lifecycle, but you probably should just
        /// let this be handled for you.
        /// If `views` are specified at instantiation time, the metadata in the `views`
        /// Object here will be used as defaults when creating the instance's `views`.
        /// Every `Y.App` instance gets its own copy of a `views` object so this Object
        /// on the prototype will not be polluted.
        /// </summary>
        public object views{get;set;}
    }
}
