//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Generic ArrayList class for managing lists of items and iterating operations
    /// over them.  The targeted use for this class is for augmentation onto a
    /// class that is responsible for managing multiple instances of another class
    /// (e.g. NodeList for Nodes).  The recommended use is to augment your class with
    /// ArrayList, then use ArrayList.addMethod to mirror the API of the constituent
    /// items on the list's API.
    /// The default implementation creates immutable lists, but mutability can be
    /// provided via the arraylist-add submodule or by implementing mutation methods
    /// directly on the augmented class's prototype.
    /// </summary>
    public partial class ArrayList
    {
        /// <summary>
        /// Protected method for optimizations that may be appropriate for API
        /// mirroring. Similar in functionality to <code>item</code>, but is used by
        /// methods added with <code>ArrayList.addMethod()</code>.
        /// </summary>
        protected object _item(object i){return null;}
        /// <summary>
        /// Add a single item to the ArrayList.  Does not prevent duplicates.
        /// </summary>
        public ArrayList add(object item, Y_.DataType_.Number index){return null;}
        /// <summary>
        /// <p>Adds a pass through method to dest (typically the prototype of a list
        /// class) that calls the named method on each item in the list with
        /// whatever parameters are passed in.  Allows for API indirection via list
        /// instances.</p>
        /// <p>Accepts a single string name or an array of string names.</p>
        /// <pre><code>list.each( function ( item ) {
        /// item.methodName( 1, 2, 3 );
        /// } );
        /// // becomes
        /// list.methodName( 1, 2, 3 );</code></pre>
        /// <p>Additionally, the pass through methods use the item retrieved by the
        /// <code>_item</code> method in case there is any special behavior that is
        /// appropriate for API mirroring.</p>
        /// <p>If the iterated method returns a value, the return value from the
        /// added method will be an array of values with each value being at the
        /// corresponding index for that item.  If the iterated method does not
        /// return a value, the added method will be chainable.
        /// </summary>
        public void addMethod(object dest, object name){}
        /// <summary>
        /// <p>Execute a function on each item of the list, optionally providing a
        /// custom execution context.  Default context is the item.</p>
        /// <p>The callback signature is <code>callback( item, index )</code>.</p>
        /// </summary>
        public ArrayList each(JsAction fn, object context){return null;}
        /// <summary>
        /// <p>Create a new ArrayList (or augmenting class instance) from a subset
        /// of items as determined by the boolean function passed as the
        /// argument.  The original ArrayList is unchanged.</p>
        /// <p>The validator signature is <code>validator( item )</code>.</p>
        /// </summary>
        public ArrayList filter(JsAction validator){return null;}
        /// <summary>
        /// Finds the first index of the needle in the managed array of items.
        /// </summary>
        public object indexOf(object needle){return null;}
        /// <summary>
        /// Is this instance managing any items?
        /// </summary>
        public object isEmpty(){return null;}
        /// <summary>
        /// Get an item by index from the list.  Override this method if managing a
        /// list of objects that have a different public representation (e.g. Node
        /// instances vs DOM nodes).  The iteration methods that accept a user
        /// function will use this method for access list items for operation.
        /// </summary>
        public object item(object i){return null;}
        /// <summary>
        /// Default comparator for items stored in this list.  Used by remove().
        /// </summary>
        public object itemsAreEqual(object a, object b){return null;}
        /// <summary>
        /// Removes first or all occurrences of an item to the ArrayList.  If a
        /// comparator is not provided, uses itemsAreEqual method to determine
        /// matches.
        /// </summary>
        public ArrayList remove(object needle, object all, JsAction comparator){return null;}
        /// <summary>
        /// How many items are in this list?
        /// </summary>
        public object size(){return null;}
        /// <summary>
        /// <p>Execute a function on each item of the list, optionally providing a
        /// custom execution context.  Default context is the item.</p>
        /// <p>The callback signature is <code>callback( item, index )</code>.</p>
        /// <p>Unlike <code>each</code>, if the callback returns true, the
        /// iteratation will stop.</p>
        /// </summary>
        public object some(JsAction fn, object context){return null;}
        /// <summary>
        /// Provides an array-like representation for JSON.stringify.
        /// </summary>
        public Y_.Array toJSON(){return null;}
    }
}
