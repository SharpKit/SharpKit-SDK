//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.DD_
{
    /// <summary>
    /// Provides the ability to drag a Node.
    /// </summary>
    public partial class Drag : Y_.Base
    {
        [JsMethod(JsonInitializers=true)]
        public Drag(){}
        /// <summary>
        /// Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.
        /// </summary>
        public object addHandle(object str){return null;}
        /// <summary>
        /// Add a selector string to test the handle against. If the test passes the drag operation will not continue.
        /// </summary>
        public object addInvalid(object str){return null;}
        /// <summary>
        /// Add this Drag instance to a group, this should be used for on-the-fly group additions.
        /// </summary>
        public object addToGroup(object g){return null;}
        /// <summary>
        /// Ends the drag operation
        /// </summary>
        public object end(){return null;}
        /// <summary>
        /// Remove this Drag instance from a group, this should be used for on-the-fly group removals.
        /// </summary>
        public object removeFromGroup(object g){return null;}
        /// <summary>
        /// Remove a Selector added by addHandle
        /// </summary>
        public object removeHandle(object str){return null;}
        /// <summary>
        /// Remove an invalid handle added by addInvalid
        /// </summary>
        public object removeInvalid(object str){return null;}
        /// <summary>
        /// Starts the drag operation
        /// </summary>
        public object start(){return null;}
        /// <summary>
        /// Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.
        /// </summary>
        public object stopDrag(){return null;}
        /// <summary>
        /// Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.
        /// </summary>
        public object validClick(EventFacade ev){return null;}
        /// <summary>
        /// This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false.
        /// </summary>
        public Node activeHandle{get;set;}
        /// <summary>
        /// Controls the default bubble parent for this Drag instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config
        /// </summary>
        public object bubbles{get;set;}
        /// <summary>
        /// The number of pixels to move to start a drag operation, default is 3.
        /// </summary>
        public Y_.DataType_.Number clickPixelThresh{get;set;}
        /// <summary>
        /// The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.
        /// </summary>
        public Y_.DataType_.Number clickTimeThresh{get;set;}
        /// <summary>
        /// Y.Node instance to use as the draggable element, defaults to node
        /// </summary>
        public Node dragNode{get;set;}
        /// <summary>
        /// Array of groups to add this drag into.
        /// </summary>
        public Y_.Array groups{get;set;}
        /// <summary>
        /// Array of valid handles to add. Adding something here will set all handles, even if previously added with addHandle
        /// </summary>
        public Y_.Array handles{get;set;}
        /// <summary>
        /// Y.Node instance to use as the element to initiate a drag operation
        /// </summary>
        public Node node{get;set;}
        /// <summary>
        /// A region object associated with this drag, used for checking regions while dragging.
        /// </summary>
        public object region{get;set;}
        /// <summary>
        /// This property defaults to "mousedown", but when drag-gestures is loaded, it is changed to "gesturemovestart"
        /// </summary>
        public object START_EVENT{get;set;}
    }
}
