//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.DD_
{
    /// <summary>
    /// Provides the base Drag Drop Manger required for making a Node draggable.
    /// </summary>
    public partial class DDM : Y_.Base
    {
        [JsMethod(JsonInitializers=true)]
        public DDM(){}
        /// <summary>
        /// Clears the cache data used for this interaction.
        /// </summary>
        public void clearCache(){}
        /// <summary>
        /// This method will gather the area for all potential targets and see which has the hightest covered area and return it.
        /// </summary>
        public object getBestMatch(Y_.Array drops, object all){return null;}
        /// <summary>
        /// Get a delegate instance from a container node
        /// </summary>
        public object getDelegate(){return null;}
        /// <summary>
        /// Get a valid Drag instance back from a Node or a selector string, false otherwise
        /// </summary>
        public object getDrag(object node){return null;}
        /// <summary>
        /// Get a valid Drop instance back from a Node or a selector string, false otherwise
        /// </summary>
        public object getDrop(object node){return null;}
        /// <summary>
        /// Return a node instance from the given node, selector string or Y.Base extended object.
        /// </summary>
        public Node getNode(object n){return null;}
        /// <summary>
        /// Check to see if the Drag element is over the target, method varies on current mode
        /// </summary>
        public object isOverTarget(object drop){return null;}
        /// <summary>
        /// Register a Delegate with the DDM
        /// </summary>
        public void regDelegate(){}
        /// <summary>
        /// Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.
        /// </summary>
        public object stopDrag(){return null;}
        /// <summary>
        /// Swap the position of 2 nodes based on their DOM location.
        /// </summary>
        public Node swapNode(Node n1, Node n2){return null;}
        /// <summary>
        /// Swap the position of 2 nodes based on their CSS positioning.
        /// </summary>
        public Node swapPosition(Node n1, Node n2){return null;}
        /// <summary>
        /// This method will sync the position of the shims on the Drop Targets that are currently active.
        /// </summary>
        public void syncActiveShims(object force){}
        /// <summary>
        /// The number of pixels to move to start a drag operation, default is 3.
        /// </summary>
        public Y_.DataType_.Number clickPixelThresh{get;set;}
        /// <summary>
        /// The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.
        /// </summary>
        public Y_.DataType_.Number clickTimeThresh{get;set;}
        /// <summary>
        /// The number of milliseconds to throttle the mousemove event. Default: 150
        /// </summary>
        public Y_.DataType_.Number throttleTime{get;set;}
    }
}
