//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// The YUI global namespace object.  If YUI is already defined, the
    /// existing YUI object will not be overwritten so that defined
    /// namespaces are preserved.  It is the constructor for the object
    /// the end user interacts with.  As indicated below, each instance
    /// has full custom event support, but only if the event system
    /// is available.  This is a self-instantiable factory function.  You
    /// can invoke it directly like this:
    /// YUI().use('*', function(Y) {
    /// // ready
    /// });
    /// But it also works like this:
    /// var Y = YUI();
    /// Configuring the YUI object:
    /// YUI({
    /// debug: true,
    /// combine: false
    /// }).use('node', function(Y) {
    /// //Node is ready to use
    /// });
    /// See the API docs for the <a href="config.html">Config</a> class
    /// for the complete list of supported configuration properties accepted
    /// by the YUI constuctor.
    /// </summary>
    [JsType(JsMode.Prototype, Name="YUI")]
    public partial class YUI
    {
        /// <summary>
        /// Registers a module with the YUI global.  The easiest way to create a
        /// first-class YUI module is to use the YUI component build tool.
        /// http://yuilibrary.com/projects/builder
        /// The build system will produce the `YUI.add` wrapper for you module, along
        /// with any configuration info required for the module.
        /// </summary>
        public YUI add(object name, JsAction fn, object version, object details){return null;}
        /// <summary>
        /// Like `on()`, this method creates a subscription to a custom event or to the
        /// execution of a method on an object.
        /// For events, `after()` subscribers are executed after the event's
        /// `defaultFn` unless `e.preventDefault()` was called from an `on()` subscriber.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// NOTE: The subscription signature shown is for events, not for function
        /// injection.  See <a href="../classes/Do.html#methods_after">`Y.Do.after`</a>
        /// for that signature.
        /// </summary>
        public EventHandle after(object type, JsAction fn){return null;}
        /// <summary>
        /// Like `on()`, this method creates a subscription to a custom event or to the
        /// execution of a method on an object.
        /// For events, `after()` subscribers are executed after the event's
        /// `defaultFn` unless `e.preventDefault()` was called from an `on()` subscriber.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// NOTE: The subscription signature shown is for events, not for function
        /// injection.  See <a href="../classes/Do.html#methods_after">`Y.Do.after`</a>
        /// for that signature.
        /// </summary>
        public EventHandle after(object type, JsAction fn, object args_){return null;}
        /// <summary>
        /// Like `on()`, this method creates a subscription to a custom event or to the
        /// execution of a method on an object.
        /// For events, `after()` subscribers are executed after the event's
        /// `defaultFn` unless `e.preventDefault()` was called from an `on()` subscriber.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// NOTE: The subscription signature shown is for events, not for function
        /// injection.  See <a href="../classes/Do.html#methods_after">`Y.Do.after`</a>
        /// for that signature.
        /// </summary>
        public EventHandle after(object type, JsAction fn, object context, object args_){return null;}
        /// <summary>
        /// Copies object properties from the supplier to the receiver. If the target has
        /// the property, and the property is an object, the target object will be
        /// augmented with the supplier's value.
        /// </summary>
        public object aggregate(object receiver, object supplier){return null;}
        /// <summary>
        /// Copies object properties from the supplier to the receiver. If the target has
        /// the property, and the property is an object, the target object will be
        /// augmented with the supplier's value.
        /// </summary>
        public object aggregate(object receiver, object supplier, object whitelist){return null;}
        /// <summary>
        /// Copies object properties from the supplier to the receiver. If the target has
        /// the property, and the property is an object, the target object will be
        /// augmented with the supplier's value.
        /// </summary>
        public object aggregate(object receiver, object supplier, object overwrite, object whitelist){return null;}
        /// <summary>
        /// Retrieves a NodeList based on the given CSS selector.
        /// </summary>
        public NodeList all(object selector){return null;}
        /// <summary>
        /// Applies a new configuration object to the YUI instance config.
        /// This will merge new group/module definitions, and will also
        /// update the loader cache if necessary.  Updating Y.config directly
        /// will not update the cache.
        /// </summary>
        public void applyConfig(object o){}
        /// <summary>
        /// Executes a method on a YUI instance with
        /// the specified id if the specified method is whitelisted.
        /// </summary>
        public object applyTo(object id, object method, Y_.Array args){return null;}
        /// <summary>
        /// Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown
        /// and the test fails.
        /// </summary>
        public void assert(object condition, object message){}
        /// <summary>
        /// Augments the _receiver_ with prototype properties from the _supplier_. The
        /// receiver may be a constructor function or an object. The supplier must be a
        /// constructor function.
        /// If the _receiver_ is an object, then the _supplier_ constructor will be called
        /// immediately after _receiver_ is augmented, with _receiver_ as the `this` object.
        /// If the _receiver_ is a constructor function, then all prototype methods of
        /// _supplier_ that are copied to _receiver_ will be sequestered, and the
        /// _supplier_ constructor will not be called immediately. The first time any
        /// sequestered method is called on the _receiver_'s prototype, all sequestered
        /// methods will be immediately copied to the _receiver_'s prototype, the
        /// _supplier_'s constructor will be executed, and finally the newly unsequestered
        /// method that was called will be executed.
        /// This sequestering logic sounds like a bunch of complicated voodoo, but it makes
        /// it cheap to perform frequent augmentation by ensuring that suppliers'
        /// constructors are only called if a supplied method is actually used. If none of
        /// the supplied methods is ever used, then there's no need to take the performance
        /// hit of calling the _supplier_'s constructor.
        /// </summary>
        public JsAction augment(object receiver, JsAction supplier){return null;}
        /// <summary>
        /// Augments the _receiver_ with prototype properties from the _supplier_. The
        /// receiver may be a constructor function or an object. The supplier must be a
        /// constructor function.
        /// If the _receiver_ is an object, then the _supplier_ constructor will be called
        /// immediately after _receiver_ is augmented, with _receiver_ as the `this` object.
        /// If the _receiver_ is a constructor function, then all prototype methods of
        /// _supplier_ that are copied to _receiver_ will be sequestered, and the
        /// _supplier_ constructor will not be called immediately. The first time any
        /// sequestered method is called on the _receiver_'s prototype, all sequestered
        /// methods will be immediately copied to the _receiver_'s prototype, the
        /// _supplier_'s constructor will be executed, and finally the newly unsequestered
        /// method that was called will be executed.
        /// This sequestering logic sounds like a bunch of complicated voodoo, but it makes
        /// it cheap to perform frequent augmentation by ensuring that suppliers'
        /// constructors are only called if a supplied method is actually used. If none of
        /// the supplied methods is ever used, then there's no need to take the performance
        /// hit of calling the _supplier_'s constructor.
        /// </summary>
        public JsAction augment(object receiver, JsAction supplier, object args){return null;}
        /// <summary>
        /// Augments the _receiver_ with prototype properties from the _supplier_. The
        /// receiver may be a constructor function or an object. The supplier must be a
        /// constructor function.
        /// If the _receiver_ is an object, then the _supplier_ constructor will be called
        /// immediately after _receiver_ is augmented, with _receiver_ as the `this` object.
        /// If the _receiver_ is a constructor function, then all prototype methods of
        /// _supplier_ that are copied to _receiver_ will be sequestered, and the
        /// _supplier_ constructor will not be called immediately. The first time any
        /// sequestered method is called on the _receiver_'s prototype, all sequestered
        /// methods will be immediately copied to the _receiver_'s prototype, the
        /// _supplier_'s constructor will be executed, and finally the newly unsequestered
        /// method that was called will be executed.
        /// This sequestering logic sounds like a bunch of complicated voodoo, but it makes
        /// it cheap to perform frequent augmentation by ensuring that suppliers'
        /// constructors are only called if a supplied method is actually used. If none of
        /// the supplied methods is ever used, then there's no need to take the performance
        /// hit of calling the _supplier_'s constructor.
        /// </summary>
        public JsAction augment(object receiver, JsAction supplier, object whitelist, object args){return null;}
        /// <summary>
        /// Augments the _receiver_ with prototype properties from the _supplier_. The
        /// receiver may be a constructor function or an object. The supplier must be a
        /// constructor function.
        /// If the _receiver_ is an object, then the _supplier_ constructor will be called
        /// immediately after _receiver_ is augmented, with _receiver_ as the `this` object.
        /// If the _receiver_ is a constructor function, then all prototype methods of
        /// _supplier_ that are copied to _receiver_ will be sequestered, and the
        /// _supplier_ constructor will not be called immediately. The first time any
        /// sequestered method is called on the _receiver_'s prototype, all sequestered
        /// methods will be immediately copied to the _receiver_'s prototype, the
        /// _supplier_'s constructor will be executed, and finally the newly unsequestered
        /// method that was called will be executed.
        /// This sequestering logic sounds like a bunch of complicated voodoo, but it makes
        /// it cheap to perform frequent augmentation by ensuring that suppliers'
        /// constructors are only called if a supplied method is actually used. If none of
        /// the supplied methods is ever used, then there's no need to take the performance
        /// hit of calling the _supplier_'s constructor.
        /// </summary>
        public JsAction augment(object receiver, JsAction supplier, object overwrite, object whitelist, object args){return null;}
        /// <summary>
        /// Returns a function that will execute the supplied function in the
        /// supplied object's context, optionally adding any additional
        /// supplied parameters to the beginning of the arguments collection the
        /// supplied to the function.
        /// </summary>
        public JsAction bind(object f, object c, object args){return null;}
        /// <summary>
        /// Returns a wrapper for a function which caches the return value of that function,
        /// keyed off of the combined string representation of the argument values provided
        /// when the wrapper is called.
        /// Calling this function again with the same arguments will return the cached value
        /// rather than executing the wrapped function.
        /// Note that since the cache is keyed off of the string representation of arguments
        /// passed to the wrapper function, arguments that aren't strings and don't provide
        /// a meaningful `toString()` method may result in unexpected caching behavior. For
        /// example, the objects `{}` and `{foo: 'bar'}` would both be converted to the
        /// string `[object Object]` when used as a cache key.
        /// </summary>
        public JsAction cached(JsAction source){return null;}
        /// <summary>
        /// Returns a wrapper for a function which caches the return value of that function,
        /// keyed off of the combined string representation of the argument values provided
        /// when the wrapper is called.
        /// Calling this function again with the same arguments will return the cached value
        /// rather than executing the wrapped function.
        /// Note that since the cache is keyed off of the string representation of arguments
        /// passed to the wrapper function, arguments that aren't strings and don't provide
        /// a meaningful `toString()` method may result in unexpected caching behavior. For
        /// example, the objects `{}` and `{foo: 'bar'}` would both be converted to the
        /// string `[object Object]` when used as a cache key.
        /// </summary>
        public JsAction cached(JsAction source, object refetch){return null;}
        /// <summary>
        /// Returns a wrapper for a function which caches the return value of that function,
        /// keyed off of the combined string representation of the argument values provided
        /// when the wrapper is called.
        /// Calling this function again with the same arguments will return the cached value
        /// rather than executing the wrapped function.
        /// Note that since the cache is keyed off of the string representation of arguments
        /// passed to the wrapper function, arguments that aren't strings and don't provide
        /// a meaningful `toString()` method may result in unexpected caching behavior. For
        /// example, the objects `{}` and `{foo: 'bar'}` would both be converted to the
        /// string `[object Object]` when used as a cache key.
        /// </summary>
        public JsAction cached(JsAction source, object cache, object refetch){return null;}
        /// <summary>
        /// Deep object/array copy.  Function clones are actually
        /// wrappers around the original function.
        /// Array-like objects are treated as arrays.
        /// Primitives are returned untouched.  Optionally, a
        /// function can be provided to handle other data types,
        /// filter keys, validate values, etc.
        /// </summary>
        public Y_.Array clone(object o, object safe, JsAction f, object c, object owner, object cloned){return null;}
        /// <summary>
        /// Sets up event delegation on a container element.  The delegated event
        /// will use a supplied filter to test if the callback should be executed.
        /// This filter can be either a selector string or a function that returns
        /// a Node to use as the currentTarget for the event.
        /// The event object for the delegated event is supplied to the callback
        /// function.  It is modified slightly in order to support all properties
        /// that may be needed for event delegation.  'currentTarget' is set to
        /// the element that matched the selector string filter or the Node returned
        /// from the filter function.  'container' is set to the element that the
        /// listener is delegated from (this normally would be the 'currentTarget').
        /// Filter functions will be called with the arguments that would be passed to
        /// the callback function, including the event object as the first parameter.
        /// The function should return false (or a falsey value) if the success criteria
        /// aren't met, and the Node to use as the event's currentTarget and 'this'
        /// object if they are.
        /// </summary>
        public EventHandle @delegate(object type, JsAction fn, object el, object filter, object context, object args){return null;}
        /// <summary>
        /// Destroys the YUI instance
        /// </summary>
        public void destroy(){}
        /// <summary>
        /// Returns a simple string representation of the object or array.
        /// Other types of objects will be returned unprocessed.  Arrays
        /// are expected to be indexed.
        /// </summary>
        public object dump(object o, Y_.DataType_.Number d){return null;}
        /// <summary>
        /// Executes the supplied function for each item in
        /// a collection.  Supports arrays, objects, and
        /// NodeLists
        /// </summary>
        public YUI each(object o, JsAction f, object c, object proto){return null;}
        /// <summary>
        /// Report an error.  The reporting mechanism is controlled by
        /// the `throwFail` configuration attribute.  If throwFail is
        /// not specified, the message is written to the Logger, otherwise
        /// a JS error is thrown. If an `errorFn` is specified in the config
        /// it must return `true` to keep the error from being thrown.
        /// </summary>
        public YUI error(object msg, object e, object src){return null;}
        /// <summary>
        /// Utility to set up the prototype, constructor and superclass properties to
        /// support an inheritance strategy that can chain constructors and methods.
        /// Static members will not be inherited.
        /// </summary>
        public object extend(JsAction r, JsAction s, object px, object sx){return null;}
        /// <summary>
        /// Forces an assertion error to occur. Shortcut for Y.Assert.fail().
        /// </summary>
        public void fail(object message){}
        /// <summary>
        /// Returns a single Node instance bound to the node or the
        /// first element matching the given selector.
        /// </summary>
        public void get(object node, object doc){}
        /// <summary>
        /// Returns the `location` object from the window/frame in which this YUI instance
        /// operates, or `undefined` when executing in a non-browser environment
        /// (e.g. Node.js).
        /// It is _not_ recommended to hold references to the `window.location` object
        /// outside of the scope of a function in which its properties are being accessed or
        /// its methods are being called. This is because of a nasty bug/issue that exists
        /// in both Safari and MobileSafari browsers:
        /// [WebKit Bug 34679](https://bugs.webkit.org/show_bug.cgi?id=34679).
        /// </summary>
        public object getLocation(){return null;}
        /// <summary>
        /// Generate an id that is unique among all YUI instances
        /// </summary>
        public object guid(object pre){return null;}
        /// <summary>
        /// Method for setting and deleting IO HTTP headers to be sent with every
        /// request.
        /// Hosted as a property on the `io` function (e.g. `Y.io.header`).
        /// </summary>
        public void header(object name, object value){}
        /// <summary>
        /// instanceof check for objects that works around
        /// memory leak in IE when the item tested is
        /// window/document
        /// </summary>
        public void instanceOf(object o, object type){}
        /// <summary>
        /// Method for initiating an ajax call.  The first argument is the url end
        /// point for the call.  The second argument is an object to configure the
        /// transaction and attach event subscriptions.  The configuration object
        /// supports the following properties:
        /// <dl>
        /// <dt>method</dt>
        /// <dd>HTTP method verb (e.g., GET or POST). If this property is not
        /// not defined, the default value will be GET.</dd>
        /// <dt>data</dt>
        /// <dd>This is the name-value string that will be sent as the
        /// transaction data. If the request is HTTP GET, the data become
        /// part of querystring. If HTTP POST, the data are sent in the
        /// message body.</dd>
        /// <dt>xdr</dt>
        /// <dd>Defines the transport to be used for cross-domain requests.
        /// By setting this property, the transaction will use the specified
        /// transport instead of XMLHttpRequest. The properties of the
        /// transport object are:
        /// <dl>
        /// <dt>use</dt>
        /// <dd>The transport to be used: 'flash' or 'native'</dd>
        /// <dt>dataType</dt>
        /// <dd>Set the value to 'XML' if that is the expected response
        /// content type.</dd>
        /// </dl></dd>
        /// <dt>form</dt>
        /// <dd>Form serialization configuration object.  Its properties are:
        /// <dl>
        /// <dt>id</dt>
        /// <dd>Node object or id of HTML form</dd>
        /// <dt>useDisabled</dt>
        /// <dd>`true` to also serialize disabled form field values
        /// (defaults to `false`)</dd>
        /// </dl></dd>
        /// <dt>on</dt>
        /// <dd>Assigns transaction event subscriptions. Available events are:
        /// <dl>
        /// <dt>start</dt>
        /// <dd>Fires when a request is sent to a resource.</dd>
        /// <dt>complete</dt>
        /// <dd>Fires when the transaction is complete.</dd>
        /// <dt>success</dt>
        /// <dd>Fires when the HTTP response status is within the 2xx
        /// range.</dd>
        /// <dt>failure</dt>
        /// <dd>Fires when the HTTP response status is outside the 2xx
        /// range, if an exception occurs, if the transation is aborted,
        /// or if the transaction exceeds a configured `timeout`.</dd>
        /// <dt>end</dt>
        /// <dd>Fires at the conclusion of the transaction
        /// lifecycle, after `success` or `failure`.</dd>
        /// </dl>
        /// <p>Callback functions for `start` and `end` receive the id of the
        /// transaction as a first argument. For `complete`, `success`, and
        /// `failure`, callbacks receive the id and the response object
        /// (usually the XMLHttpRequest instance).  If the `arguments`
        /// property was included in the configuration object passed to
        /// `Y.io()`, the configured data will be passed to all callbacks as
        /// the last argument.</p>
        /// </dd>
        /// <dt>sync</dt>
        /// <dd>Pass `true` to make a same-domain transaction synchronous.
        /// <strong>CAVEAT</strong>: This will negatively impact the user
        /// experience. Have a <em>very</em> good reason if you intend to use
        /// this.</dd>
        /// <dt>context</dt>
        /// <dd>The "`this'" object for all configured event handlers. If a
        /// specific context is needed for individual callbacks, bind the
        /// callback to a context using `Y.bind()`.</dd>
        /// <dt>headers</dt>
        /// <dd>Object map of transaction headers to send to the server. The
        /// object keys are the header names and the values are the header
        /// values.</dd>
        /// <dt>timeout</dt>
        /// <dd>Millisecond threshold for the transaction before being
        /// automatically aborted.</dd>
        /// <dt>arguments</dt>
        /// <dd>User-defined data passed to all registered event handlers.
        /// This value is available as the second argument in the "start" and
        /// "end" event handlers. It is the third argument in the "complete",
        /// "success", and "failure" event handlers. <strong>Be sure to quote
        /// this property name in the transaction configuration as
        /// "arguments" is a reserved word in JavaScript</strong> (e.g.
        /// `Y.io({ ..., "arguments": stuff })`).</dd>
        /// </dl>
        /// </summary>
        public object io(object url, object config){return null;}
        public JSONPRequest jsonp(object url, object c, object args){return null;}
        /// <summary>
        /// Executes the supplied function in the context of the supplied
        /// object 'when' milliseconds later.  Executes the function a
        /// single time unless periodic is set to true.
        /// </summary>
        public object later(object when, object o, object fn, object data, object periodic){return null;}
        /// <summary>
        /// If the 'debug' config is true, a 'yui:log' event will be
        /// dispatched, which the Console widget and anything else
        /// can consume.  If the 'useBrowserConsole' config is true, it will
        /// write to the browser console if available.  YUI-specific log
        /// messages will only be present in the -debug versions of the
        /// JS files.  The build system is supposed to remove log statements
        /// from the raw and minified versions of the files.
        /// </summary>
        public YUI log(object msg, object cat, object src, object silent){return null;}
        /// <summary>
        /// Returns a new object containing all of the properties of all the supplied
        /// objects. The properties from later objects will overwrite those in earlier
        /// objects.
        /// Passing in a single object will create a shallow copy of it. For a deep copy,
        /// use `clone()`.
        /// </summary>
        public object merge(object objects){return null;}
        /// <summary>
        /// Write a system message.  This message will be preserved in the
        /// minified and raw versions of the YUI files, unlike log statements.
        /// </summary>
        public YUI message(object msg, object cat, object src, object silent){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, Y_.DataType_.Number mode){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, Y_.DataType_.Number mode, object merge){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, object merge){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, object whitelist, Y_.DataType_.Number mode){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, object whitelist, Y_.DataType_.Number mode, object merge){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, object whitelist, object merge){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, object overwrite, object whitelist, Y_.DataType_.Number mode){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, object overwrite, object whitelist, Y_.DataType_.Number mode, object merge){return null;}
        /// <summary>
        /// Mixes _supplier_'s properties into _receiver_.
        /// Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
        /// shadowed unless the _overwrite_ parameter is `true`, and will not be merged
        /// unless the _merge_ parameter is `true`.
        /// In the default mode (0), only properties the supplier owns are copied (prototype
        /// properties are not copied). The following copying modes are available:
        /// * `0`: _Default_. Object to object.
        /// * `1`: Prototype to prototype.
        /// * `2`: Prototype to prototype and object to object.
        /// * `3`: Prototype to object.
        /// * `4`: Object to prototype.
        /// </summary>
        public JsAction mix(object receiver, object supplier, object overwrite, object whitelist, object merge){return null;}
        /// <summary>
        /// Adds a namespace object onto the YUI global if called statically.
        /// // creates YUI.your.namespace.here as nested objects
        /// YUI.namespace("your.namespace.here");
        /// If called as a method on a YUI <em>instance</em>, it creates the
        /// namespace on the instance.
        /// // creates Y.property.package
        /// Y.namespace("property.package");
        /// Dots in the input string cause `namespace` to create nested objects for
        /// each token. If any part of the requested namespace already exists, the
        /// current object will be left in place.  This allows multiple calls to
        /// `namespace` to preserve existing namespaced properties.
        /// If the first token in the namespace string is "YAHOO", the token is
        /// discarded.
        /// Be careful with namespace tokens. Reserved words may work in some browsers
        /// and not others. For instance, the following will fail in some browsers
        /// because the supported version of JavaScript reserves the word "long":
        /// Y.namespace("really.long.nested.namespace");
        /// <em>Note: If you pass multiple arguments to create multiple namespaces, only
        /// the last one created is returned from this function.</em>
        /// </summary>
        public object @namespace(object @namespace){return null;}
        /// <summary>
        /// `Y.on()` can do many things:
        /// <ul>
        /// <li>Subscribe to custom events `publish`ed and `fire`d from Y</li>
        /// <li>Subscribe to custom events `publish`ed with `broadcast` 1 or 2 and
        /// `fire`d from any object in the YUI instance sandbox</li>
        /// <li>Subscribe to DOM events</li>
        /// <li>Subscribe to the execution of a method on any object, effectively
        /// treating that method as an event</li>
        /// </ul>
        /// For custom event subscriptions, pass the custom event name as the first argument and callback as the second. The `this` object in the callback will be `Y` unless an override is passed as the third argument.
        /// Y.on('io:complete', function () {
        /// Y.MyApp.updateStatus('Transaction complete');
        /// });
        /// To subscribe to DOM events, pass the name of a DOM event as the first argument
        /// and a CSS selector string as the third argument after the callback function.
        /// Alternately, the third argument can be a `Node`, `NodeList`, `HTMLElement`,
        /// array, or simply omitted (the default is the `window` object).
        /// Y.on('click', function (e) {
        /// e.preventDefault();
        /// // proceed with ajax form submission
        /// var url = this.get('action');
        /// ...
        /// }, '#my-form');
        /// The `this` object in DOM event callbacks will be the `Node` targeted by the CSS
        /// selector or other identifier.
        /// `on()` subscribers for DOM events or custom events `publish`ed with a
        /// `defaultFn` can prevent the default behavior with `e.preventDefault()` from the
        /// event object passed as the first parameter to the subscription callback.
        /// To subscribe to the execution of an object method, pass arguments corresponding to the call signature for
        /// <a href="../classes/Do.html#methods_before">`Y.Do.before(...)`</a>.
        /// NOTE: The formal parameter list below is for events, not for function
        /// injection.  See `Y.Do.before` for that signature.
        /// </summary>
        public EventHandle on(object type, JsAction fn){return null;}
        /// <summary>
        /// `Y.on()` can do many things:
        /// <ul>
        /// <li>Subscribe to custom events `publish`ed and `fire`d from Y</li>
        /// <li>Subscribe to custom events `publish`ed with `broadcast` 1 or 2 and
        /// `fire`d from any object in the YUI instance sandbox</li>
        /// <li>Subscribe to DOM events</li>
        /// <li>Subscribe to the execution of a method on any object, effectively
        /// treating that method as an event</li>
        /// </ul>
        /// For custom event subscriptions, pass the custom event name as the first argument and callback as the second. The `this` object in the callback will be `Y` unless an override is passed as the third argument.
        /// Y.on('io:complete', function () {
        /// Y.MyApp.updateStatus('Transaction complete');
        /// });
        /// To subscribe to DOM events, pass the name of a DOM event as the first argument
        /// and a CSS selector string as the third argument after the callback function.
        /// Alternately, the third argument can be a `Node`, `NodeList`, `HTMLElement`,
        /// array, or simply omitted (the default is the `window` object).
        /// Y.on('click', function (e) {
        /// e.preventDefault();
        /// // proceed with ajax form submission
        /// var url = this.get('action');
        /// ...
        /// }, '#my-form');
        /// The `this` object in DOM event callbacks will be the `Node` targeted by the CSS
        /// selector or other identifier.
        /// `on()` subscribers for DOM events or custom events `publish`ed with a
        /// `defaultFn` can prevent the default behavior with `e.preventDefault()` from the
        /// event object passed as the first parameter to the subscription callback.
        /// To subscribe to the execution of an object method, pass arguments corresponding to the call signature for
        /// <a href="../classes/Do.html#methods_before">`Y.Do.before(...)`</a>.
        /// NOTE: The formal parameter list below is for events, not for function
        /// injection.  See `Y.Do.before` for that signature.
        /// </summary>
        public EventHandle on(object type, JsAction fn, object arg_){return null;}
        /// <summary>
        /// `Y.on()` can do many things:
        /// <ul>
        /// <li>Subscribe to custom events `publish`ed and `fire`d from Y</li>
        /// <li>Subscribe to custom events `publish`ed with `broadcast` 1 or 2 and
        /// `fire`d from any object in the YUI instance sandbox</li>
        /// <li>Subscribe to DOM events</li>
        /// <li>Subscribe to the execution of a method on any object, effectively
        /// treating that method as an event</li>
        /// </ul>
        /// For custom event subscriptions, pass the custom event name as the first argument and callback as the second. The `this` object in the callback will be `Y` unless an override is passed as the third argument.
        /// Y.on('io:complete', function () {
        /// Y.MyApp.updateStatus('Transaction complete');
        /// });
        /// To subscribe to DOM events, pass the name of a DOM event as the first argument
        /// and a CSS selector string as the third argument after the callback function.
        /// Alternately, the third argument can be a `Node`, `NodeList`, `HTMLElement`,
        /// array, or simply omitted (the default is the `window` object).
        /// Y.on('click', function (e) {
        /// e.preventDefault();
        /// // proceed with ajax form submission
        /// var url = this.get('action');
        /// ...
        /// }, '#my-form');
        /// The `this` object in DOM event callbacks will be the `Node` targeted by the CSS
        /// selector or other identifier.
        /// `on()` subscribers for DOM events or custom events `publish`ed with a
        /// `defaultFn` can prevent the default behavior with `e.preventDefault()` from the
        /// event object passed as the first parameter to the subscription callback.
        /// To subscribe to the execution of an object method, pass arguments corresponding to the call signature for
        /// <a href="../classes/Do.html#methods_before">`Y.Do.before(...)`</a>.
        /// NOTE: The formal parameter list below is for events, not for function
        /// injection.  See `Y.Do.before` for that signature.
        /// </summary>
        public EventHandle on(object type, JsAction fn, object context, object arg_){return null;}
        /// <summary>
        /// Listen for an event one time.  Equivalent to `on()`, except that
        /// the listener is immediately detached when executed.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// </summary>
        public EventHandle once(object type, JsAction fn){return null;}
        /// <summary>
        /// Listen for an event one time.  Equivalent to `on()`, except that
        /// the listener is immediately detached when executed.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// </summary>
        public EventHandle once(object type, JsAction fn, object arg_){return null;}
        /// <summary>
        /// Listen for an event one time.  Equivalent to `on()`, except that
        /// the listener is immediately detached when executed.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// </summary>
        public EventHandle once(object type, JsAction fn, object context, object arg_){return null;}
        /// <summary>
        /// Listen for an event one time.  Equivalent to `once()`, except, like `after()`,
        /// the subscription callback executes after all `on()` subscribers and the event's
        /// `defaultFn` (if configured) have executed.  Like `after()` if any `on()` phase
        /// subscriber calls `e.preventDefault()`, neither the `defaultFn` nor the `after()`
        /// subscribers will execute.
        /// The listener is immediately detached when executed.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// </summary>
        public EventHandle onceAfter(object type, JsAction fn){return null;}
        /// <summary>
        /// Listen for an event one time.  Equivalent to `once()`, except, like `after()`,
        /// the subscription callback executes after all `on()` subscribers and the event's
        /// `defaultFn` (if configured) have executed.  Like `after()` if any `on()` phase
        /// subscriber calls `e.preventDefault()`, neither the `defaultFn` nor the `after()`
        /// subscribers will execute.
        /// The listener is immediately detached when executed.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// </summary>
        public EventHandle onceAfter(object type, JsAction fn, object arg_){return null;}
        /// <summary>
        /// Listen for an event one time.  Equivalent to `once()`, except, like `after()`,
        /// the subscription callback executes after all `on()` subscribers and the event's
        /// `defaultFn` (if configured) have executed.  Like `after()` if any `on()` phase
        /// subscriber calls `e.preventDefault()`, neither the `defaultFn` nor the `after()`
        /// subscribers will execute.
        /// The listener is immediately detached when executed.
        /// See the <a href="#methods_on">`on()` method</a> for additional subscription
        /// options.
        /// </summary>
        public EventHandle onceAfter(object type, JsAction fn, object context, object arg_){return null;}
        /// <summary>
        /// Returns a single Node instance bound to the node or the
        /// first element matching the given selector. Returns null if no match found.
        /// <strong>Note:</strong> For chaining purposes you may want to
        /// use <code>Y.all</code>, which returns a NodeList when no match is found.
        /// </summary>
        public Node one(object node){return null;}
        /// <summary>
        /// Returns a function that will execute the supplied function in the
        /// supplied object's context, optionally adding any additional
        /// supplied parameters to the end of the arguments the function
        /// is executed with.
        /// </summary>
        public JsAction rbind(object f, object c, object args){return null;}
        /// <summary>
        /// Executes the supplied function for each item in
        /// a collection.  The operation stops if the function
        /// returns true. Supports arrays, objects, and
        /// NodeLists.
        /// </summary>
        public object some(object o, JsAction f, object c, object proto){return null;}
        /// <summary>
        /// Returns a `guid` associated with an object.  If the object
        /// does not have one, a new one is created unless `readOnly`
        /// is specified.
        /// </summary>
        public object stamp(object o, object readOnly){return null;}
        /// <summary>
        /// Throttles a call to a method based on the time between calls.
        /// </summary>
        public JsAction throttle(JsAction fn, object ms){return null;}
        /// <summary>
        /// Attaches one or more modules to the YUI instance.  When this
        /// is executed, the requirements are analyzed, and one of
        /// several things can happen:
        /// * All requirements are available on the page --  The modules
        /// are attached to the instance.  If supplied, the use callback
        /// is executed synchronously.
        /// * Modules are missing, the Get utility is not available OR
        /// the 'bootstrap' config is false -- A warning is issued about
        /// the missing modules and all available modules are attached.
        /// * Modules are missing, the Loader is not available but the Get
        /// utility is and boostrap is not false -- The loader is bootstrapped
        /// before doing the following....
        /// * Modules are missing and the Loader is available -- The loader
        /// expands the dependency tree and fetches missing modules.  When
        /// the loader is finshed the callback supplied to use is executed
        /// asynchronously.
        /// </summary>
        public YUI use(object modules){return null;}
        /// <summary>
        /// Attaches one or more modules to the YUI instance.  When this
        /// is executed, the requirements are analyzed, and one of
        /// several things can happen:
        /// * All requirements are available on the page --  The modules
        /// are attached to the instance.  If supplied, the use callback
        /// is executed synchronously.
        /// * Modules are missing, the Get utility is not available OR
        /// the 'bootstrap' config is false -- A warning is issued about
        /// the missing modules and all available modules are attached.
        /// * Modules are missing, the Loader is not available but the Get
        /// utility is and boostrap is not false -- The loader is bootstrapped
        /// before doing the following....
        /// * Modules are missing and the Loader is available -- The loader
        /// expands the dependency tree and fetches missing modules.  When
        /// the loader is finshed the callback supplied to use is executed
        /// asynchronously.
        /// </summary>
        public YUI use(object modules, JsAction callback){return null;}
        /// <summary>
        /// Hosts YUI page level events.  This is where events bubble to
        /// when the broadcast config is set to 2.  This property is
        /// only available if the custom event module is loaded.
        /// </summary>
        public Y_.EventTarget Global{get;set;}
        /// <summary>
        /// The component metadata is stored in Y.Env.meta.
        /// Part of the loader module.
        /// </summary>
        public object meta{get;set;}
        /// <summary>
        /// The version number of the YUI instance.
        /// </summary>
        public string version{get;set;}
    }
}
