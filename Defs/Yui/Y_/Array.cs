//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides utility methods for working with arrays. Additional array helpers can
    /// be found in the `collection` and `array-extras` modules.
    /// `Y.Array(thing)` returns a native array created from _thing_. Depending on
    /// _thing_'s type, one of the following will happen:
    /// * Arrays are returned unmodified unless a non-zero _startIndex_ is
    /// specified.
    /// * Array-like collections (see `Array.test()`) are converted to arrays.
    /// * For everything else, a new array is created with _thing_ as the sole
    /// item.
    /// Note: elements that are also collections, such as `<form>` and `<select>`
    /// elements, are not automatically converted to arrays. To force a conversion,
    /// pass `true` as the value of the _force_ parameter.
    /// </summary>
    public partial class Array
    {
        /// <summary>
        /// Dedupes an array of strings, returning an array that's guaranteed to contain
        /// only one copy of a given string.
        /// This method differs from `Array.unique()` in that it's optimized for use only
        /// with strings, whereas `unique` may be used with other types (but is slower).
        /// Using `dedupe()` with non-string values may result in unexpected behavior.
        /// </summary>
        public Y_.Array dedupe(object array){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array. This method wraps
        /// the native ES5 `Array.forEach()` method if available.
        /// </summary>
        public YUI each(Y_.Array array, JsAction fn){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array. This method wraps
        /// the native ES5 `Array.forEach()` method if available.
        /// </summary>
        public YUI each(Y_.Array array, JsAction fn, object thisObj){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array. Iteration stops if the
        /// supplied function does not return a truthy value.
        /// </summary>
        public object every(Y_.Array a, JsAction f){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array. Iteration stops if the
        /// supplied function does not return a truthy value.
        /// </summary>
        public object every(Y_.Array a, JsAction f, object o){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array. Returns a new array
        /// containing the items for which the supplied function returned a truthy value.
        /// </summary>
        public Y_.Array filter(Y_.Array a, JsAction f){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array. Returns a new array
        /// containing the items for which the supplied function returned a truthy value.
        /// </summary>
        public Y_.Array filter(Y_.Array a, JsAction f, object o){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array, searching for the
        /// first item that matches the supplied function.
        /// </summary>
        public object find(Y_.Array a, JsAction f){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array, searching for the
        /// first item that matches the supplied function.
        /// </summary>
        public object find(Y_.Array a, JsAction f, object o){return null;}
        /// <summary>
        /// Alias for `each()`.
        /// </summary>
        public void forEach(){}
        /// <summary>
        /// Iterates over an array, returning a new array of all the elements that match the
        /// supplied regular expression.
        /// </summary>
        public Y_.Array grep(Y_.Array a, object pattern){return null;}
        /// <summary>
        /// Returns an object using the first array as keys and the second as values. If
        /// the second array is not provided, or if it doesn't contain the same number of
        /// values as the first array, then `true` will be used in place of the missing
        /// values.
        /// </summary>
        public object hash(object keys){return null;}
        /// <summary>
        /// Returns an object using the first array as keys and the second as values. If
        /// the second array is not provided, or if it doesn't contain the same number of
        /// values as the first array, then `true` will be used in place of the missing
        /// values.
        /// </summary>
        public object hash(object keys, Y_.Array values){return null;}
        /// <summary>
        /// Returns the index of the first item in the array that's equal (using a strict
        /// equality check) to the specified _value_, or `-1` if the value isn't found.
        /// This method wraps the native ES5 `Array.indexOf()` method if available.
        /// </summary>
        public Y_.DataType_.Number indexOf(Y_.Array array, object value){return null;}
        /// <summary>
        /// Returns the index of the first item in the array that's equal (using a strict
        /// equality check) to the specified _value_, or `-1` if the value isn't found.
        /// This method wraps the native ES5 `Array.indexOf()` method if available.
        /// </summary>
        public Y_.DataType_.Number indexOf(Y_.Array array, object value, Y_.DataType_.Number from){return null;}
        /// <summary>
        /// Executes a named method on each item in an array of objects. Items in the array
        /// that do not have a function by that name will be skipped.
        /// </summary>
        public Y_.Array invoke(Y_.Array items, object name){return null;}
        /// <summary>
        /// Executes a named method on each item in an array of objects. Items in the array
        /// that do not have a function by that name will be skipped.
        /// </summary>
        public Y_.Array invoke(Y_.Array items, object name, object args_){return null;}
        /// <summary>
        /// Returns the index of the last item in the array that contains the specified
        /// value, or `-1` if the value isn't found.
        /// </summary>
        public Y_.DataType_.Number lastIndexOf(Y_.Array a, object val){return null;}
        /// <summary>
        /// Returns the index of the last item in the array that contains the specified
        /// value, or `-1` if the value isn't found.
        /// </summary>
        public Y_.DataType_.Number lastIndexOf(Y_.Array a, object val, Y_.DataType_.Number fromIndex){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array and returns a new array
        /// containing all the values returned by the supplied function.
        /// </summary>
        public Y_.Array map(Y_.Array a, JsAction f){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array and returns a new array
        /// containing all the values returned by the supplied function.
        /// </summary>
        public Y_.Array map(Y_.Array a, JsAction f, object o){return null;}
        /// <summary>
        /// Numeric sort convenience function.
        /// The native `Array.prototype.sort()` function converts values to strings and
        /// sorts them in lexicographic order, which is unsuitable for sorting numeric
        /// values. Provide `Array.numericSort` as a custom sort function when you want
        /// to sort values in numeric order.
        /// </summary>
        public Y_.DataType_.Number numericSort(Y_.DataType_.Number a, Y_.DataType_.Number b){return null;}
        /// <summary>
        /// Partitions an array into two new arrays, one with the items for which the
        /// supplied function returns `true`, and one with the items for which the function
        /// returns `false`.
        /// </summary>
        public object partition(Y_.Array a, JsAction f){return null;}
        /// <summary>
        /// Partitions an array into two new arrays, one with the items for which the
        /// supplied function returns `true`, and one with the items for which the function
        /// returns `false`.
        /// </summary>
        public object partition(Y_.Array a, JsAction f, object o){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array, "folding" the array
        /// into a single value.
        /// </summary>
        public object reduce(Y_.Array a, object init, JsAction f){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array, "folding" the array
        /// into a single value.
        /// </summary>
        public object reduce(Y_.Array a, object init, JsAction f, object o){return null;}
        /// <summary>
        /// The inverse of `Array.filter()`. Executes the supplied function on each item.
        /// Returns a new array containing the items for which the supplied function
        /// returned `false`.
        /// </summary>
        public Y_.Array reject(Y_.Array a, JsAction f){return null;}
        /// <summary>
        /// The inverse of `Array.filter()`. Executes the supplied function on each item.
        /// Returns a new array containing the items for which the supplied function
        /// returned `false`.
        /// </summary>
        public Y_.Array reject(Y_.Array a, JsAction f, object o){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array. Returning a truthy
        /// value from the function will stop the processing of remaining items.
        /// </summary>
        public object some(Y_.Array array, JsAction fn){return null;}
        /// <summary>
        /// Executes the supplied function on each item in the array. Returning a truthy
        /// value from the function will stop the processing of remaining items.
        /// </summary>
        public object some(Y_.Array array, JsAction fn, object thisObj){return null;}
        /// <summary>
        /// Evaluates _obj_ to determine if it's an array, an array-like collection, or
        /// something else. This is useful when working with the function `arguments`
        /// collection and `HTMLElement` collections.
        /// Note: This implementation doesn't consider elements that are also
        /// collections, such as `<form>` and `<select>`, to be array-like.
        /// </summary>
        public Y_.DataType_.Number test(object obj){return null;}
        /// <summary>
        /// Returns a copy of the specified array with duplicate items removed.
        /// </summary>
        public Y_.Array unique(Y_.Array a){return null;}
        /// <summary>
        /// Creates an array of arrays by pairing the corresponding elements of two arrays
        /// together into a new array.
        /// </summary>
        public Y_.Array zip(Y_.Array a, Y_.Array a2){return null;}
    }
}
