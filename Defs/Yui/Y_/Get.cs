//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides dynamic loading of remote JavaScript and CSS resources.
    /// </summary>
    public partial class Get
    {
        /// <summary>
        /// Triggers an automatic purge if the purge threshold has been reached.
        /// </summary>
        protected void _autoPurge(Y_.DataType_.Number threshold){}
        /// <summary>
        /// Populates the `_env` property with information about the current
        /// environment.
        /// </summary>
        protected object _getEnv(){return null;}
        /// <summary>
        /// Aborts the specified transaction.
        /// This will cause the transaction's `onFailure` callback to be called and
        /// will prevent any new script and link nodes from being added to the document,
        /// but any resources that have already been requested will continue loading
        /// (there's no safe way to prevent this, unfortunately).
        /// *Note:* This method is deprecated as of 3.5.0, and will be removed in a
        /// future version of YUI. Use the transaction-level `abort()` method instead.
        /// </summary>
        public void abort(Y_.Get_.Transaction transaction){}
        /// <summary>
        /// Loads one or more CSS files.
        /// The _urls_ parameter may be provided as a URL string, a request object,
        /// or an array of URL strings and/or request objects.
        /// A request object is just an object that contains a `url` property and zero
        /// or more options that should apply specifically to that request.
        /// Request-specific options take priority over transaction-level options and
        /// default options.
        /// URLs may be relative or absolute, and do not have to have the same origin
        /// as the current page.
        /// The `options` parameter may be omitted completely and a callback passed in
        /// its place, if desired.
        /// </summary>
        public Y_.Get_.Transaction css(object urls){return null;}
        /// <summary>
        /// Loads one or more CSS files.
        /// The _urls_ parameter may be provided as a URL string, a request object,
        /// or an array of URL strings and/or request objects.
        /// A request object is just an object that contains a `url` property and zero
        /// or more options that should apply specifically to that request.
        /// Request-specific options take priority over transaction-level options and
        /// default options.
        /// URLs may be relative or absolute, and do not have to have the same origin
        /// as the current page.
        /// The `options` parameter may be omitted completely and a callback passed in
        /// its place, if desired.
        /// </summary>
        public Y_.Get_.Transaction css(object urls, JsAction callback){return null;}
        /// <summary>
        /// Loads one or more CSS files.
        /// The _urls_ parameter may be provided as a URL string, a request object,
        /// or an array of URL strings and/or request objects.
        /// A request object is just an object that contains a `url` property and zero
        /// or more options that should apply specifically to that request.
        /// Request-specific options take priority over transaction-level options and
        /// default options.
        /// URLs may be relative or absolute, and do not have to have the same origin
        /// as the current page.
        /// The `options` parameter may be omitted completely and a callback passed in
        /// its place, if desired.
        /// </summary>
        public Y_.Get_.Transaction css(object urls, object options){return null;}
        /// <summary>
        /// Loads one or more CSS files.
        /// The _urls_ parameter may be provided as a URL string, a request object,
        /// or an array of URL strings and/or request objects.
        /// A request object is just an object that contains a `url` property and zero
        /// or more options that should apply specifically to that request.
        /// Request-specific options take priority over transaction-level options and
        /// default options.
        /// URLs may be relative or absolute, and do not have to have the same origin
        /// as the current page.
        /// The `options` parameter may be omitted completely and a callback passed in
        /// its place, if desired.
        /// </summary>
        public Y_.Get_.Transaction css(object urls, object options, JsAction callback){return null;}
        /// <summary>
        /// Loads one or more JavaScript resources.
        /// The _urls_ parameter may be provided as a URL string, a request object,
        /// or an array of URL strings and/or request objects.
        /// A request object is just an object that contains a `url` property and zero
        /// or more options that should apply specifically to that request.
        /// Request-specific options take priority over transaction-level options and
        /// default options.
        /// URLs may be relative or absolute, and do not have to have the same origin
        /// as the current page.
        /// The `options` parameter may be omitted completely and a callback passed in
        /// its place, if desired.
        /// Scripts will be executed in the order they're specified unless the `async`
        /// option is `true`, in which case they'll be loaded in parallel and executed
        /// in whatever order they finish loading.
        /// </summary>
        public Y_.Get_.Transaction js(object urls){return null;}
        /// <summary>
        /// Loads one or more JavaScript resources.
        /// The _urls_ parameter may be provided as a URL string, a request object,
        /// or an array of URL strings and/or request objects.
        /// A request object is just an object that contains a `url` property and zero
        /// or more options that should apply specifically to that request.
        /// Request-specific options take priority over transaction-level options and
        /// default options.
        /// URLs may be relative or absolute, and do not have to have the same origin
        /// as the current page.
        /// The `options` parameter may be omitted completely and a callback passed in
        /// its place, if desired.
        /// Scripts will be executed in the order they're specified unless the `async`
        /// option is `true`, in which case they'll be loaded in parallel and executed
        /// in whatever order they finish loading.
        /// </summary>
        public Y_.Get_.Transaction js(object urls, JsAction callback){return null;}
        /// <summary>
        /// Loads one or more JavaScript resources.
        /// The _urls_ parameter may be provided as a URL string, a request object,
        /// or an array of URL strings and/or request objects.
        /// A request object is just an object that contains a `url` property and zero
        /// or more options that should apply specifically to that request.
        /// Request-specific options take priority over transaction-level options and
        /// default options.
        /// URLs may be relative or absolute, and do not have to have the same origin
        /// as the current page.
        /// The `options` parameter may be omitted completely and a callback passed in
        /// its place, if desired.
        /// Scripts will be executed in the order they're specified unless the `async`
        /// option is `true`, in which case they'll be loaded in parallel and executed
        /// in whatever order they finish loading.
        /// </summary>
        public Y_.Get_.Transaction js(object urls, object options){return null;}
        /// <summary>
        /// Loads one or more JavaScript resources.
        /// The _urls_ parameter may be provided as a URL string, a request object,
        /// or an array of URL strings and/or request objects.
        /// A request object is just an object that contains a `url` property and zero
        /// or more options that should apply specifically to that request.
        /// Request-specific options take priority over transaction-level options and
        /// default options.
        /// URLs may be relative or absolute, and do not have to have the same origin
        /// as the current page.
        /// The `options` parameter may be omitted completely and a callback passed in
        /// its place, if desired.
        /// Scripts will be executed in the order they're specified unless the `async`
        /// option is `true`, in which case they'll be loaded in parallel and executed
        /// in whatever order they finish loading.
        /// </summary>
        public Y_.Get_.Transaction js(object urls, object options, JsAction callback){return null;}
        /// <summary>
        /// Loads one or more CSS and/or JavaScript resources in the same transaction.
        /// Use this method when you want to load both CSS and JavaScript in a single
        /// transaction and be notified when all requested URLs have finished loading,
        /// regardless of type.
        /// Behavior and options are the same as for the `css()` and `js()` methods. If
        /// a resource type isn't specified in per-request options or transaction-level
        /// options, Get will guess the file type based on the URL's extension (`.css`
        /// or `.js`, with or without a following query string). If the file type can't
        /// be guessed from the URL, a warning will be logged and Get will assume the
        /// URL is a JavaScript resource.
        /// </summary>
        public Y_.Get_.Transaction load(object urls, JsAction callback, object err, Y_.Get_.Transaction Transaction){return null;}
        /// <summary>
        /// Loads one or more CSS and/or JavaScript resources in the same transaction.
        /// Use this method when you want to load both CSS and JavaScript in a single
        /// transaction and be notified when all requested URLs have finished loading,
        /// regardless of type.
        /// Behavior and options are the same as for the `css()` and `js()` methods. If
        /// a resource type isn't specified in per-request options or transaction-level
        /// options, Get will guess the file type based on the URL's extension (`.css`
        /// or `.js`, with or without a following query string). If the file type can't
        /// be guessed from the URL, a warning will be logged and Get will assume the
        /// URL is a JavaScript resource.
        /// </summary>
        public Y_.Get_.Transaction load(object urls, object options, JsAction callback, object err, Y_.Get_.Transaction Transaction){return null;}
        /// <summary>
        /// Loads one or more CSS and/or JavaScript resources in the same transaction.
        /// Use this method when you want to load both CSS and JavaScript in a single
        /// transaction and be notified when all requested URLs have finished loading,
        /// regardless of type.
        /// Behavior and options are the same as for the `css()` and `js()` methods. If
        /// a resource type isn't specified in per-request options or transaction-level
        /// options, Get will guess the file type based on the URL's extension (`.css`
        /// or `.js`, with or without a following query string). If the file type can't
        /// be guessed from the URL, a warning will be logged and Get will assume the
        /// URL is a JavaScript resource.
        /// </summary>
        public Y_.Get_.Transaction load(object urls, object options, object err, Y_.Get_.Transaction Transaction){return null;}
        /// <summary>
        /// Loads one or more CSS and/or JavaScript resources in the same transaction.
        /// Use this method when you want to load both CSS and JavaScript in a single
        /// transaction and be notified when all requested URLs have finished loading,
        /// regardless of type.
        /// Behavior and options are the same as for the `css()` and `js()` methods. If
        /// a resource type isn't specified in per-request options or transaction-level
        /// options, Get will guess the file type based on the URL's extension (`.css`
        /// or `.js`, with or without a following query string). If the file type can't
        /// be guessed from the URL, a warning will be logged and Get will assume the
        /// URL is a JavaScript resource.
        /// </summary>
        public Y_.Get_.Transaction load(object urls, object err, Y_.Get_.Transaction Transaction){return null;}
        /// <summary>
        /// Alias for `js()`.
        /// </summary>
        public void script(){}
        /// <summary>
        /// Contains information about the current environment, such as what script and
        /// link injection features it supports.
        /// This object is created and populated the first time the `_getEnv()` method
        /// is called.
        /// </summary>
        protected object _env{get;set;}
        /// <summary>
        /// Mapping of document _yuid strings to <head> or <base> node references so we
        /// don't have to look the node up each time we want to insert a request node.
        /// </summary>
        protected object _insertCache{get;set;}
        /// <summary>
        /// Information about the currently pending transaction, if any.
        /// This is actually an object with two properties: `callback`, containing the
        /// optional callback passed to `css()`, `load()`, or `js()`; and `transaction`,
        /// containing the actual transaction instance.
        /// </summary>
        protected object _pending{get;set;}
        /// <summary>
        /// Default options for CSS requests. Options specified here will override
        /// global defaults for CSS requests.
        /// See the `options` property for all available options.
        /// </summary>
        public object cssOptions{get;set;}
        /// <summary>
        /// Default options for JS requests. Options specified here will override global
        /// defaults for JS requests.
        /// See the `options` property for all available options.
        /// </summary>
        public object jsOptions{get;set;}
        /// <summary>
        /// Default options to use for all requests.
        /// Note that while all available options are documented here for ease of
        /// discovery, some options (like callback functions) only make sense at the
        /// transaction level.
        /// Callback functions specified via the options object or the `options`
        /// parameter of the `css()`, `js()`, or `load()` methods will receive the
        /// transaction object as a parameter. See `Y.Get.Transaction` for details on
        /// the properties and methods available on transactions.
        /// </summary>
        public object options{get;set;}
    }
}
