//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// The NodeList class provides a wrapper for manipulating DOM NodeLists.
    /// NodeList properties can be accessed via the set/get methods.
    /// Use Y.all() to retrieve NodeList instances.
    /// </summary>
    public partial class NodeList
    {
        /// <summary>
        /// Adds a class name to each node.
        /// </summary>
        public void addClass(object className){}
        /// <summary>
        /// Applies an event listener to each Node bound to the NodeList.
        /// The handler is called only after all on() handlers are called
        /// and the event is not prevented.
        /// </summary>
        public EventHandle after(object type, JsAction fn, object context){return null;}
        /// <summary>
        /// Called on each Node instance
        /// </summary>
        public void append(){}
        /// <summary>
        /// Called on each Node instance
        /// </summary>
        public void appendChild(){}
        public NodeList concat(object valueN){return null;}
        /// <summary>
        /// Called on each Node instance. Nulls internal node references,
        /// removes any plugins and event listeners
        /// </summary>
        public void destroy(object recursivePurge){}
        /// <summary>
        /// Called on each Node instance
        /// </summary>
        public void detach(){}
        public void detachAll(){}
        /// <summary>
        /// Applies the given function to each Node in the NodeList.
        /// </summary>
        public void each(JsAction fn, object context){}
        /// <summary>
        /// Called on each Node instance. Removes and destroys all of the nodes
        /// within the node
        /// </summary>
        public void empty(){}
        /// <summary>
        /// Creates a new NodeList containing all nodes at even indices
        /// (zero-based index), including zero.
        /// </summary>
        public NodeList even(){return null;}
        /// <summary>
        /// Filters the NodeList instance down to only nodes matching the given selector.
        /// </summary>
        public NodeList filter(object selector){return null;}
        /// <summary>
        /// Applies a unique ID to each node if none exists
        /// </summary>
        public object generateID(){return null;}
        public void get(){}
        /// <summary>
        /// Allows getting attributes on DOM nodes, normalizing in some cases.
        /// This passes through to the DOM node, allowing for custom attributes.
        /// </summary>
        public object getAttribute(object name){return null;}
        /// <summary>
        /// Returns an array of the computed value for each node.
        /// Use camelCase (e.g. 'backgroundColor') for multi-word properties.
        /// </summary>
        public Y_.Array getComputedStyle(object attr){return null;}
        /// <summary>
        /// Called on each Node instance
        /// </summary>
        public void getContent(){}
        /// <summary>
        /// Returns the DOM node bound to the Node instance
        /// </summary>
        public Y_.Array getDOMNodes(){return null;}
        /// <summary>
        /// Retrieves the DOM nodes bound to a NodeList instance
        /// </summary>
        public Y_.Array getDOMNodes(NodeList nodelist){return null;}
        /// <summary>
        /// Called on each Node instance
        /// </summary>
        public void getHTML(){}
        /// <summary>
        /// Returns an array of values for each node.
        /// Use camelCase (e.g. 'backgroundColor') for multi-word properties.
        /// </summary>
        public Y_.Array getStyle(object attr){return null;}
        /// <summary>
        /// Determines whether each node has the given className.
        /// </summary>
        public Y_.Array hasClass(object className){return null;}
        /// <summary>
        /// Hides each node.
        /// If the "transition" module is loaded, hide optionally
        /// animates the hiding of the node using either the default
        /// transition effect ('fadeOut'), or the given named effect.
        /// </summary>
        public void hide(object name, object config, JsAction callback){}
        /// <summary>
        /// Returns the index of the node in the NodeList instance
        /// or -1 if the node isn't found.
        /// </summary>
        public object indexOf(object node){return null;}
        /// <summary>
        /// Called on each Node instance
        /// </summary>
        public void insert(){}
        /// <summary>
        /// Called on each Node instance
        /// </summary>
        public void insertBefore(){}
        /// <summary>
        /// Determines if the instance is bound to any nodes
        /// </summary>
        public object isEmpty(){return null;}
        /// <summary>
        /// Retrieves the Node instance at the given index.
        /// </summary>
        public Node item(Y_.DataType_.Number index){return null;}
        /// <summary>
        /// Creates a new NodeList containing all nodes at every n indices, where
        /// remainder n % index equals r.
        /// (zero-based index).
        /// </summary>
        public NodeList modulus(object n, object r){return null;}
        /// <summary>
        /// Creates a new NodeList containing all nodes at odd indices
        /// (zero-based index).
        /// </summary>
        public NodeList odd(){return null;}
        /// <summary>
        /// Subscribe a callback function for each `Node` in the collection to execute
        /// in response to a DOM event.
        /// NOTE: Generally, the `on()` method should be avoided on `NodeLists`, in
        /// favor of using event delegation from a parent Node.  See the Event user
        /// guide for details.
        /// Most DOM events are associated with a preventable default behavior, such as
        /// link clicks navigating to a new page.  Callbacks are passed a
        /// `DOMEventFacade` object as their first argument (usually called `e`) that
        /// can be used to prevent this default behavior with `e.preventDefault()`. See
        /// the `DOMEventFacade` API for all available properties and methods on the
        /// object.
        /// By default, the `this` object will be the `NodeList` that the subscription
        /// came from, <em>not the `Node` that received the event</em>.  Use
        /// `e.currentTarget` to refer to the `Node`.
        /// Returning `false` from a callback is supported as an alternative to calling
        /// `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to
        /// use the event methods.
        /// </summary>
        public EventHandle on(object type, JsAction fn){return null;}
        /// <summary>
        /// Subscribe a callback function for each `Node` in the collection to execute
        /// in response to a DOM event.
        /// NOTE: Generally, the `on()` method should be avoided on `NodeLists`, in
        /// favor of using event delegation from a parent Node.  See the Event user
        /// guide for details.
        /// Most DOM events are associated with a preventable default behavior, such as
        /// link clicks navigating to a new page.  Callbacks are passed a
        /// `DOMEventFacade` object as their first argument (usually called `e`) that
        /// can be used to prevent this default behavior with `e.preventDefault()`. See
        /// the `DOMEventFacade` API for all available properties and methods on the
        /// object.
        /// By default, the `this` object will be the `NodeList` that the subscription
        /// came from, <em>not the `Node` that received the event</em>.  Use
        /// `e.currentTarget` to refer to the `Node`.
        /// Returning `false` from a callback is supported as an alternative to calling
        /// `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to
        /// use the event methods.
        /// </summary>
        public EventHandle on(object type, JsAction fn, object arg_){return null;}
        /// <summary>
        /// Subscribe a callback function for each `Node` in the collection to execute
        /// in response to a DOM event.
        /// NOTE: Generally, the `on()` method should be avoided on `NodeLists`, in
        /// favor of using event delegation from a parent Node.  See the Event user
        /// guide for details.
        /// Most DOM events are associated with a preventable default behavior, such as
        /// link clicks navigating to a new page.  Callbacks are passed a
        /// `DOMEventFacade` object as their first argument (usually called `e`) that
        /// can be used to prevent this default behavior with `e.preventDefault()`. See
        /// the `DOMEventFacade` API for all available properties and methods on the
        /// object.
        /// By default, the `this` object will be the `NodeList` that the subscription
        /// came from, <em>not the `Node` that received the event</em>.  Use
        /// `e.currentTarget` to refer to the `Node`.
        /// Returning `false` from a callback is supported as an alternative to calling
        /// `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to
        /// use the event methods.
        /// </summary>
        public EventHandle on(object type, JsAction fn, object context, object arg_){return null;}
        /// <summary>
        /// Applies an one-time event listener to each Node bound to the NodeList.
        /// </summary>
        public EventHandle once(object type, JsAction fn, object context){return null;}
        /// <summary>
        /// Applies an one-time event listener to each Node bound to the NodeList
        /// that will be called only after all on() handlers are called and the
        /// event is not prevented.
        /// </summary>
        public EventHandle onceAfter(object type, JsAction fn, object context){return null;}
        public Node pop(){return null;}
        /// <summary>
        /// Called on each Node instance
        /// </summary>
        public void prepend(){}
        public void push(object nodes){}
        /// <summary>
        /// Reruns the initial query, when created using a selector query
        /// </summary>
        public void refresh(){}
        /// <summary>
        /// Called on each Node instance. Removes the node from its parent.
        /// Shortcut for myNode.get('parentNode').removeChild(myNode);
        /// </summary>
        public void remove(object destroy){}
        /// <summary>
        /// Allows for removing attributes on DOM nodes.
        /// This passes through to the DOM node, allowing for custom attributes.
        /// </summary>
        public void removeAttribute(object name){}
        /// <summary>
        /// Removes a class name from each node.
        /// </summary>
        public void removeClass(object className){}
        /// <summary>
        /// Replace a class with another class for each node.
        /// If no oldClassName is present, the newClassName is simply added.
        /// </summary>
        public void replaceClass(object oldClassName, object newClassName){}
        /// <summary>
        /// Called on each Node instance. Sets an attribute on the Node instance.
        /// Unless pre-configured (via Node.ATTRS), set hands
        /// off to the underlying DOM node.  Only valid
        /// attributes/properties for the node will be set.
        /// To set custom attributes use setAttribute.
        /// </summary>
        public void set(object attr, object val){}
        /// <summary>
        /// Allows setting attributes on DOM nodes, normalizing in some cases.
        /// This passes through to the DOM node, allowing for custom attributes.
        /// </summary>
        public void setAttribute(object name, object value){}
        /// <summary>
        /// Called on each Node instance
        /// Note that this passes to innerHTML and is not escaped.
        /// Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
        /// </summary>
        public void setContent(){}
        /// <summary>
        /// Called on each Node instance
        /// Note that this passes to innerHTML and is not escaped.
        /// Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
        /// </summary>
        public void setHTML(){}
        /// <summary>
        /// Sets a style property on each node.
        /// Use camelCase (e.g. 'backgroundColor') for multi-word properties.
        /// </summary>
        public void setStyle(object attr, object val){}
        /// <summary>
        /// Sets multiple style properties on each node.
        /// Use camelCase (e.g. 'backgroundColor') for multi-word properties.
        /// </summary>
        public void setStyles(object hash){}
        public Node shift(){return null;}
        /// <summary>
        /// Makes each node visible.
        /// If the "transition" module is loaded, show optionally
        /// animates the showing of the node using either the default
        /// transition effect ('fadeIn'), or the given named effect.
        /// </summary>
        public void show(object name, object config, JsAction callback){}
        /// <summary>
        /// Returns the current number of items in the NodeList.
        /// </summary>
        public object size(){return null;}
        public NodeList slice(Y_.DataType_.Number begin, Y_.DataType_.Number end){return null;}
        /// <summary>
        /// Executes the function once for each node until a true value is returned.
        /// </summary>
        public object some(JsAction fn, object context){return null;}
        public NodeList splice(Y_.DataType_.Number index, Y_.DataType_.Number howMany){return null;}
        /// <summary>
        /// Creates a documenFragment from the nodes bound to the NodeList instance
        /// </summary>
        public Node toFrag(){return null;}
        /// <summary>
        /// If the className exists on the node it is removed, if it doesn't exist it is added.
        /// </summary>
        public void toggleClass(object className){}
        /// <summary>
        /// Displays or hides each node.
        /// If the "transition" module is loaded, toggleView optionally
        /// animates the toggling of the nodes using either the default
        /// transition effect ('fadeIn'), or the given named effect.
        /// </summary>
        public void toggleView(){}
        /// <summary>
        /// Displays or hides each node.
        /// If the "transition" module is loaded, toggleView optionally
        /// animates the toggling of the nodes using either the default
        /// transition effect ('fadeIn'), or the given named effect.
        /// </summary>
        public void toggleView(JsAction callback){}
        /// <summary>
        /// Displays or hides each node.
        /// If the "transition" module is loaded, toggleView optionally
        /// animates the toggling of the nodes using either the default
        /// transition effect ('fadeIn'), or the given named effect.
        /// </summary>
        public void toggleView(object on){}
        /// <summary>
        /// Displays or hides each node.
        /// If the "transition" module is loaded, toggleView optionally
        /// animates the toggling of the nodes using either the default
        /// transition effect ('fadeIn'), or the given named effect.
        /// </summary>
        public void toggleView(object on, JsAction callback){}
        /// <summary>
        /// Animate one or more css properties to a given value. Requires the "transition" module.
        /// <pre>example usage:
        /// Y.all('.demo').transition({
        /// duration: 1, // in seconds, default is 0.5
        /// easing: 'ease-out', // default is 'ease'
        /// delay: '1', // delay start for 1 second, default is 0
        /// height: '10px',
        /// width: '10px',
        /// opacity: { // per property
        /// value: 0,
        /// duration: 2,
        /// delay: 2,
        /// easing: 'ease-in'
        /// }
        /// });
        /// </pre>
        /// </summary>
        public void transition(object config, JsAction callback){}
        public void unshift(object nodes){}
        /// <summary>
        /// Removes the parent node from node in the list.
        /// </summary>
        public void unwrap(){}
        /// <summary>
        /// Wraps the given HTML around each node.
        /// </summary>
        public void wrap(object html){}
    }
}
