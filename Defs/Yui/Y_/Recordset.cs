//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// The Recordset utility provides a standard way for dealing with
    /// a collection of similar objects.
    /// Provides the base Recordset implementation, which can be extended to add
    /// additional functionality, such as custom indexing. sorting, and filtering.
    /// </summary>
    public partial class Recordset : Y_.Base
    {
        [JsMethod(JsonInitializers=true)]
        public Recordset(){}
        /// <summary>
        /// Ensures the value being set is an array of Record instances. If array items
        /// are raw object data, they are turned into Records.
        /// </summary>
        public object _setRecords(object items){return null;}
        /// <summary>
        /// Adds one or more Records to the RecordSet at the given index. If index is null, then adds the Records to the end of the RecordSet.
        /// </summary>
        public Recordset add(object oData){return null;}
        /// <summary>
        /// Adds one or more Records to the RecordSet at the given index. If index is null, then adds the Records to the end of the RecordSet.
        /// </summary>
        public Recordset add(object oData, Y_.DataType_.Number index){return null;}
        /// <summary>
        /// Empties the recordset
        /// </summary>
        public Recordset empty(){return null;}
        /// <summary>
        /// Returns the length of the recordset
        /// </summary>
        public Y_.DataType_.Number getLength(){return null;}
        /// <summary>
        /// Returns the record with particular ID or index
        /// </summary>
        public Record getRecord(object i){return null;}
        /// <summary>
        /// Returns the record at a particular index
        /// </summary>
        public Record getRecordByIndex(Y_.DataType_.Number i){return null;}
        /// <summary>
        /// Returns a range of records beginning at particular index
        /// </summary>
        public Y_.Array getRecordsByIndex(Y_.DataType_.Number index, Y_.DataType_.Number range){return null;}
        /// <summary>
        /// Gets an array of values for a data _key_ in the set's records.  If no _key_
        /// is supplied, the returned array will contain the full data object for each
        /// record.
        /// </summary>
        public Y_.Array getValuesByKey(){return null;}
        /// <summary>
        /// Gets an array of values for a data _key_ in the set's records.  If no _key_
        /// is supplied, the returned array will contain the full data object for each
        /// record.
        /// </summary>
        public Y_.Array getValuesByKey(object key){return null;}
        /// <summary>
        /// Publish default functions for events. Create the initial hash table.
        /// </summary>
        protected void initializer(){}
        /// <summary>
        /// Removes one or more Records to the RecordSet at the given index. If index
        /// is null, then removes a single Record from the end of the RecordSet.
        /// </summary>
        public Recordset remove(){return null;}
        /// <summary>
        /// Removes one or more Records to the RecordSet at the given index. If index
        /// is null, then removes a single Record from the end of the RecordSet.
        /// </summary>
        public Recordset remove(Y_.DataType_.Number range){return null;}
        /// <summary>
        /// Removes one or more Records to the RecordSet at the given index. If index
        /// is null, then removes a single Record from the end of the RecordSet.
        /// </summary>
        public Recordset remove(Y_.DataType_.Number index, Y_.DataType_.Number range){return null;}
        /// <summary>
        /// Updates the recordset with the new records passed in. Overwrites existing
        /// records when updating the index with the new records.
        /// </summary>
        public Recordset update(object data){return null;}
        /// <summary>
        /// Updates the recordset with the new records passed in. Overwrites existing
        /// records when updating the index with the new records.
        /// </summary>
        public Recordset update(object data, Y_.DataType_.Number index){return null;}
        /// <summary>
        /// The ID to use as the key in the hash table.
        /// </summary>
        public string key{get;set;}
        /// <summary>
        /// A hash table where the ID of the record is the key, and the record
        /// instance is the value.
        /// </summary>
        public object table{get;set;}
    }
}
