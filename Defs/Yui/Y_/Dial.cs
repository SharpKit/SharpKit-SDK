//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Create a dial to represent an input control capable of representing a
    /// series of intermediate states based on the position of the Dial's handle.
    /// These states are typically aligned to a value algorithm whereby the angle of the handle's
    /// position corresponds to a given value.
    /// </summary>
    public partial class Dial : Widget
    {
        /// <summary>
        /// calls the method to update the UI whenever the Dial value changes
        /// </summary>
        protected void _afterValueChange(Event e){}
        /// <summary>
        /// calculates the XY of the center of the dial relative to the ring node.
        /// This is needed for calculating the angle of the handle
        /// </summary>
        protected void _calculateDialCenter(){}
        /// <summary>
        /// decrements Dial value by a major increment
        /// </summary>
        protected void _decrMajor(){}
        /// <summary>
        /// decrements Dial value by a minor increment
        /// </summary>
        protected void _decrMinor(){}
        /// <summary>
        /// gets the angle of the line from the center of the Dial to the center of the handle
        /// </summary>
        protected Y_.DataType_.Number _getAngleFromHandleCenter(Y_.DataType_.Number handleCenterX, Y_.DataType_.Number handleCenterY){return null;}
        /// <summary>
        /// returns the handle angle associated with the current value of the Dial.
        /// Returns a number between 0 and 360.
        /// </summary>
        protected Y_.DataType_.Number _getAngleFromValue(Y_.DataType_.Number newVal){return null;}
        /// <summary>
        /// returns the value of the Dial calculated from the current handle angle
        /// </summary>
        protected Y_.DataType_.Number _getValueFromAngle(Y_.DataType_.Number angle){return null;}
        /// <summary>
        /// Handles the mouseenter on the centerButton
        /// </summary>
        protected void _handleCenterButtonEnter(){}
        /// <summary>
        /// Handles the mouseleave on the centerButton
        /// </summary>
        protected void _handleCenterButtonLeave(){}
        /// <summary>
        /// Handles the mouseup on the centerButton
        /// </summary>
        protected void _handleCenterButtonMouseup(){}
        /// <summary>
        /// handles the user dragging the handle around the Dial, gets the angle,
        /// checks for wrapping around top center.
        /// Sets the new value of the Dial
        /// </summary>
        protected void _handleDrag(object e){}
        /// <summary>
        /// handles the end of a user dragging the handle, animates the handle returning to
        /// resting position.
        /// </summary>
        protected void _handleDragEnd(){}
        /// <summary>
        /// handles the user starting to drag the handle around the Dial
        /// </summary>
        protected void _handleDragStart(object e){}
        /// <summary>
        /// Handles the mousedown on the handle
        /// </summary>
        protected void _handleHandleMousedown(){}
        /// <summary>
        /// Handles the mouseup on the ring
        /// </summary>
        protected void _handleRingMouseup(){}
        /// <summary>
        /// handles the case where the value is less than min or greater than max
        /// </summary>
        protected void _handleValuesBeyondMinMax(object e, Y_.DataType_.Number newValue){}
        /// <summary>
        /// increments Dial value by a major increment
        /// </summary>
        protected void _incrMajor(){}
        /// <summary>
        /// increments Dial value by a minor increment
        /// </summary>
        protected void _incrMinor(){}
        /// <summary>
        /// sets the Dial's value in response to key events.
        /// Left and right keys are in a separate method
        /// in case an implementation wants to increment values
        /// but needs left and right arrow keys for other purposes.
        /// </summary>
        protected void _onDirectionKey(Event e){}
        /// <summary>
        /// sets the Dial's value in response to left or right key events
        /// </summary>
        protected void _onLeftRightKey(Event e){}
        /// <summary>
        /// sets the Dial's value in response to left or right key events when a meta (mac command/apple) key is also pressed
        /// </summary>
        protected void _onLeftRightKeyMeta(Event e){}
        /// <summary>
        /// renders the DOM object for the Dial's center
        /// </summary>
        protected void _renderCenterButton(){}
        /// <summary>
        /// renders the DOM object for the Dial's user draggable handle
        /// </summary>
        protected void _renderHandle(){}
        /// <summary>
        /// renders the DOM object for the Dial's label
        /// </summary>
        protected void _renderLabel(){}
        /// <summary>
        /// renders the DOM object for the Dial's background marker which
        /// tracks the angle of the user dragging the handle
        /// </summary>
        protected void _renderMarker(){}
        /// <summary>
        /// renders the DOM object for the Dial's background ring
        /// </summary>
        protected void _renderRing(){}
        /// <summary>
        /// resets Dial value to the orignal initial value.
        /// </summary>
        protected void _resetDial(){}
        /// <summary>
        /// sets the visible UI label HTML string
        /// </summary>
        protected void _setLabelString(object str){}
        /// <summary>
        /// returns the XY of the fixed position, handleDistance, from the center of the Dial (resting position).
        /// The XY also represents the angle related to the current value.
        /// If typeArray is true, [X,Y] is returned.
        /// If typeArray is false, the XY of the obj node passed in is set.
        /// </summary>
        protected Y_.Array _setNodeToFixedRadius(Node obj, object typeArray){return null;}
        /// <summary>
        /// sets the visible UI label HTML string
        /// </summary>
        protected void _setResetString(object str){}
        /// <summary>
        /// sets the sizes of ring, center-button, marker, handle, and VML ovals in pixels.
        /// Needed only because some IE versions
        /// ignore CSS percent sizes/offsets.
        /// so these must be set in pixels.
        /// Normally these are set in % of the ring.
        /// </summary>
        protected void _setSizes(){}
        /// <summary>
        /// sets Dial value to dial's max attr
        /// </summary>
        protected void _setToMax(){}
        /// <summary>
        /// sets Dial value to dial's min attr
        /// </summary>
        protected void _setToMin(){}
        /// <summary>
        /// sets the tooltip HTML string in the Dial's handle
        /// </summary>
        protected void _setTooltipString(object str){}
        /// <summary>
        /// Updates the UI display value of the Dial to reflect
        /// the value passed in.
        /// Makes all other needed UI display changes
        /// </summary>
        protected void _uiSetValue(Y_.DataType_.Number val){}
        /// <summary>
        /// value attribute default validator. Verifies that
        /// the value being set lies between the min/max value
        /// </summary>
        protected void _validateValue(Y_.DataType_.Number val){}
        /// <summary>
        /// Changes a value to have the correct decimal places per the attribute decimalPlaces
        /// </summary>
        protected Y_.DataType_.Number _valueToDecimalPlaces(Y_.DataType_.Number val){return null;}
        /// <summary>
        /// Creates the Y.DD.Drag instance used for the handle movement and
        /// binds Dial interaction to the configured value model.
        /// </summary>
        protected void bindUI(){}
        /// <summary>
        /// creates the DOM structure for the Dial.
        /// </summary>
        protected void renderUI(){}
        /// <summary>
        /// Synchronizes the DOM state with the attribute settings.
        /// </summary>
        public void syncUI(){}
    }
}
