//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// The IO class is a utility that brokers HTTP requests through a simplified
    /// interface.  Specifically, it allows JavaScript to make HTTP requests to
    /// a resource without a page reload.  The underlying transport for making
    /// same-domain requests is the XMLHttpRequest object.  IO can also use
    /// Flash, if specified as a transport, for cross-domain requests.
    /// </summary>
    public partial class IO
    {
        /// <summary>
        /// Fires event "io:complete" and creates, fires a
        /// transaction-specific "complete" event, if config.on.complete is
        /// defined.
        /// </summary>
        public void complete(object transaction, object config){}
        /// <summary>
        /// Create a custom transport of type and return it's object
        /// </summary>
        public void customTransport(object id){}
        public object defaultTransport(){return null;}
        public object defaultTransport(object id){return null;}
        /// <summary>
        /// Fires event "io:end" and creates, fires a transaction-specific "end"
        /// event, if config.on.end is defined.
        /// </summary>
        public void end(object transaction, object config){}
        /// <summary>
        /// Fires event "io:failure" and creates, fires a transaction-specific
        /// "failure" event -- for XMLHttpRequest file upload -- if
        /// config.on.failure is defined.
        /// </summary>
        public void error(object transaction, object error, object config){}
        /// <summary>
        /// Fires event "io:failure" and creates, fires a transaction-specific
        /// "failure" event, if config.on.failure is defined.
        /// </summary>
        public void failure(object transaction, object config){}
        /// <summary>
        /// Fires event "io:complete" and creates, fires a transaction-specific
        /// "complete" event -- for XMLHttpRequest file upload -- if
        /// config.on.complete is defined.
        /// </summary>
        public void load(object transaction, object load, object config){}
        /// <summary>
        /// Fired from the notify method of the transport which in turn fires
        /// the event on the IO object.
        /// </summary>
        public void notify(object @event, object transaction, object config){}
        /// <summary>
        /// Fires event "io:progress" and creates, fires a transaction-specific
        /// "progress" event -- for XMLHttpRequest file upload -- if
        /// config.on.progress is defined.
        /// </summary>
        public void progress(object transaction, object progress, object config){}
        /// <summary>
        /// Method for promoting a transaction to the top of the queue.
        /// </summary>
        public void promote(){}
        /// <summary>
        /// Method for queueing a transaction before the request is sent to the
        /// resource, to ensure sequential processing.
        /// </summary>
        public object queue(){return null;}
        /// <summary>
        /// Passthru to the NodeJS <a href="https://github.com/mikeal/request">request</a> module.
        /// This method is return of `require('request')` so you can use it inside NodeJS without
        /// the IO abstraction.
        /// </summary>
        public void request(){}
        /// <summary>
        /// Requests a transaction. `send()` is implemented as `Y.io()`.  Each
        /// transaction may include a configuration object.  Its properties are:
        /// <dl>
        /// <dt>method</dt>
        /// <dd>HTTP method verb (e.g., GET or POST). If this property is not
        /// not defined, the default value will be GET.</dd>
        /// <dt>data</dt>
        /// <dd>This is the name-value string that will be sent as the
        /// transaction data. If the request is HTTP GET, the data become
        /// part of querystring. If HTTP POST, the data are sent in the
        /// message body.</dd>
        /// <dt>xdr</dt>
        /// <dd>Defines the transport to be used for cross-domain requests.
        /// By setting this property, the transaction will use the specified
        /// transport instead of XMLHttpRequest. The properties of the
        /// transport object are:
        /// <dl>
        /// <dt>use</dt>
        /// <dd>The transport to be used: 'flash' or 'native'</dd>
        /// <dt>dataType</dt>
        /// <dd>Set the value to 'XML' if that is the expected response
        /// content type.</dd>
        /// </dl></dd>
        /// <dt>form</dt>
        /// <dd>Form serialization configuration object.  Its properties are:
        /// <dl>
        /// <dt>id</dt>
        /// <dd>Node object or id of HTML form</dd>
        /// <dt>useDisabled</dt>
        /// <dd>`true` to also serialize disabled form field values
        /// (defaults to `false`)</dd>
        /// </dl></dd>
        /// <dt>on</dt>
        /// <dd>Assigns transaction event subscriptions. Available events are:
        /// <dl>
        /// <dt>start</dt>
        /// <dd>Fires when a request is sent to a resource.</dd>
        /// <dt>complete</dt>
        /// <dd>Fires when the transaction is complete.</dd>
        /// <dt>success</dt>
        /// <dd>Fires when the HTTP response status is within the 2xx
        /// range.</dd>
        /// <dt>failure</dt>
        /// <dd>Fires when the HTTP response status is outside the 2xx
        /// range, if an exception occurs, if the transation is aborted,
        /// or if the transaction exceeds a configured `timeout`.</dd>
        /// <dt>end</dt>
        /// <dd>Fires at the conclusion of the transaction
        /// lifecycle, after `success` or `failure`.</dd>
        /// </dl>
        /// <p>Callback functions for `start` and `end` receive the id of the
        /// transaction as a first argument. For `complete`, `success`, and
        /// `failure`, callbacks receive the id and the response object
        /// (usually the XMLHttpRequest instance).  If the `arguments`
        /// property was included in the configuration object passed to
        /// `Y.io()`, the configured data will be passed to all callbacks as
        /// the last argument.</p>
        /// </dd>
        /// <dt>sync</dt>
        /// <dd>Pass `true` to make a same-domain transaction synchronous.
        /// <strong>CAVEAT</strong>: This will negatively impact the user
        /// experience. Have a <em>very</em> good reason if you intend to use
        /// this.</dd>
        /// <dt>context</dt>
        /// <dd>The "`this'" object for all configured event handlers. If a
        /// specific context is needed for individual callbacks, bind the
        /// callback to a context using `Y.bind()`.</dd>
        /// <dt>headers</dt>
        /// <dd>Object map of transaction headers to send to the server. The
        /// object keys are the header names and the values are the header
        /// values.</dd>
        /// <dt>timeout</dt>
        /// <dd>Millisecond threshold for the transaction before being
        /// automatically aborted.</dd>
        /// <dt>arguments</dt>
        /// <dd>User-defined data passed to all registered event handlers.
        /// This value is available as the second argument in the "start" and
        /// "end" event handlers. It is the third argument in the "complete",
        /// "success", and "failure" event handlers. <strong>Be sure to quote
        /// this property name in the transaction configuration as
        /// "arguments" is a reserved word in JavaScript</strong> (e.g.
        /// `Y.io({ ..., "arguments": stuff })`).</dd>
        /// </dl>
        /// </summary>
        public object send(object uri, object config, Y_.DataType_.Number id){return null;}
        /// <summary>
        /// Stores default client headers for all transactions. If a label is
        /// passed with no value argument, the header will be deleted.
        /// </summary>
        public void setHeader(object name, object value){}
        /// <summary>
        /// Fires event "io:start" and creates, fires a transaction-specific
        /// start event, if `config.on.start` is defined.
        /// </summary>
        public void start(object transaction, object config){}
        /// <summary>
        /// Fires event "io:success" and creates, fires a transaction-specific
        /// "success" event, if config.on.success is defined.
        /// </summary>
        public void success(object transaction, object config){}
        /// <summary>
        /// Initializes the desired transport.
        /// </summary>
        public void transport(object o){}
        /// <summary>
        /// NodeJS IO transport, uses the NodeJS <a href="https://github.com/mikeal/request">request</a>
        /// module under the hood to perform all network IO.
        /// </summary>
        public object transports_nodejs(){return null;}
        /// <summary>
        /// Method for accessing the transport's interface for making a
        /// cross-domain transaction.
        /// </summary>
        public void xdr(object uri, object o, object c){}
        /// <summary>
        /// Fires event "io:xdrReady"
        /// </summary>
        protected void xdrReady(Y_.DataType_.Number yid, Y_.DataType_.Number uid){}
        /// <summary>
        /// Response controller for cross-domain requests when using the
        /// Flash transport or IE8's XDomainRequest object.
        /// </summary>
        public object xdrResponse(object e, object o, object c){return null;}
    }
}
