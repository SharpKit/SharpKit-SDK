//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Traditional autocomplete dropdown list widget, just like Mom used to make.
    /// </summary>
    public partial class AutoCompleteList : Widget
    {
        /// <summary>
        /// Activates the next item after the currently active item. If there is no next
        /// item and the `circular` attribute is `true`, focus will wrap back to the
        /// input node.
        /// </summary>
        protected void _activateNextItem(){}
        /// <summary>
        /// Activates the item previous to the currently active item. If there is no
        /// previous item and the `circular` attribute is `true`, focus will wrap back
        /// to the input node.
        /// </summary>
        protected void _activatePrevItem(){}
        /// <summary>
        /// Appends the specified result _items_ to the list inside a new item node.
        /// </summary>
        protected NodeList _add(object items){return null;}
        /// <summary>
        /// Handles `activeItemChange` events.
        /// </summary>
        protected void _afterActiveItemChange(EventFacade e){}
        /// <summary>
        /// Handles `alwaysShowListChange` events.
        /// </summary>
        protected void _afterAlwaysShowListChange(EventFacade e){}
        /// <summary>
        /// Handles click events on the document. If the click is outside both the
        /// input node and the bounding box, the list will be hidden.
        /// </summary>
        protected void _afterDocClick(EventFacade e){}
        /// <summary>
        /// Handles `hoveredItemChange` events.
        /// </summary>
        protected void _afterHoveredItemChange(EventFacade e){}
        /// <summary>
        /// Handles `inputNode` blur events.
        /// </summary>
        protected void _afterListInputBlur(){}
        /// <summary>
        /// Handles `inputNode` focus events.
        /// </summary>
        protected void _afterListInputFocus(){}
        /// <summary>
        /// Handles `mouseout` events.
        /// </summary>
        protected void _afterMouseOut(EventFacade e){}
        /// <summary>
        /// Handles `mouseover` events.
        /// </summary>
        protected void _afterMouseOver(EventFacade e){}
        /// <summary>
        /// Handles `resultsChange` events.
        /// </summary>
        protected void _afterResultsChange(EventFacade e){}
        /// <summary>
        /// Handles `visibleChange` events.
        /// </summary>
        protected void _afterVisibleChange(EventFacade e){}
        /// <summary>
        /// Updates the ARIA live region with the specified message.
        /// </summary>
        protected void _ariaSay(object stringId){}
        /// <summary>
        /// Updates the ARIA live region with the specified message.
        /// </summary>
        protected void _ariaSay(object stringId, object subs){}
        /// <summary>
        /// Binds `inputNode` events and behavior.
        /// </summary>
        protected void _bindInput(){}
        /// <summary>
        /// Binds keyboard events.
        /// </summary>
        protected void _bindKeys(){}
        /// <summary>
        /// Binds list events.
        /// </summary>
        protected void _bindList(){}
        /// <summary>
        /// Clears the contents of the tray.
        /// </summary>
        protected void _clear(){}
        /// <summary>
        /// Creates and returns an ARIA live region node.
        /// </summary>
        protected Node _createAriaNode(){return null;}
        /// <summary>
        /// Creates and returns an item node with the specified _content_.
        /// </summary>
        protected Node _createItemNode(object result){return null;}
        /// <summary>
        /// Creates and returns a list node. If the `listNode` attribute is already set
        /// to an existing node, that node will be used.
        /// </summary>
        protected Node _createListNode(){return null;}
        [JsMethod(JsonInitializers=true)]
        public AutoCompleteList(){}
        /// <summary>
        /// Default `select` event handler.
        /// </summary>
        protected void _defSelectFn(EventFacade e){}
        /// <summary>
        /// Gets the first item node in the list, or `null` if the list is empty.
        /// </summary>
        protected Node _getFirstItemNode(){return null;}
        /// <summary>
        /// Gets the last item node in the list, or `null` if the list is empty.
        /// </summary>
        protected Node _getLastItemNode(){return null;}
        /// <summary>
        /// Initializes keyboard command mappings.
        /// </summary>
        protected void _initKeys(){}
        /// <summary>
        /// Called when the down arrow key is pressed.
        /// </summary>
        protected void _keyDown(){}
        /// <summary>
        /// Called when the enter key is pressed.
        /// </summary>
        protected void _keyEnter(){}
        /// <summary>
        /// Called when the escape key is pressed.
        /// </summary>
        protected void _keyEsc(){}
        /// <summary>
        /// Called when the tab key is pressed.
        /// </summary>
        protected void _keyTab(){}
        /// <summary>
        /// Called when the up arrow key is pressed.
        /// </summary>
        protected void _keyUp(){}
        /// <summary>
        /// Handles `inputNode` key events.
        /// </summary>
        protected void _onInputKey(Y_.EventTarget e){}
        /// <summary>
        /// Delegated event handler for item `click` events.
        /// </summary>
        protected void _onItemClick(EventFacade e){}
        /// <summary>
        /// Synchronizes the result list's position and alignment.
        /// </summary>
        protected void _syncPosition(){}
        /// <summary>
        /// Synchronizes the results displayed in the list with those in the _results_
        /// argument, or with the `results` attribute if an argument is not provided.
        /// </summary>
        protected void _syncResults(){}
        /// <summary>
        /// Synchronizes the results displayed in the list with those in the _results_
        /// argument, or with the `results` attribute if an argument is not provided.
        /// </summary>
        protected void _syncResults(Y_.Array results){}
        /// <summary>
        /// Synchronizes the size of the iframe shim used for IE6 and lower. In other
        /// browsers, this method is a noop.
        /// </summary>
        protected void _syncShim(){}
        /// <summary>
        /// Synchronizes the visibility of the tray with the _visible_ argument, or with
        /// the `visible` attribute if an argument is not provided.
        /// </summary>
        protected void _syncVisibility(){}
        /// <summary>
        /// Synchronizes the visibility of the tray with the _visible_ argument, or with
        /// the `visible` attribute if an argument is not provided.
        /// </summary>
        protected void _syncVisibility(object visible){}
        /// <summary>
        /// Unbinds keyboard events.
        /// </summary>
        protected void _unbindKeys(){}
        /// <summary>
        /// Hides the list, unless the `alwaysShowList` attribute is `true`.
        /// </summary>
        public void hide(){}
        /// <summary>
        /// Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
        /// is not specified.
        /// </summary>
        public void selectItem(){}
        /// <summary>
        /// Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
        /// is not specified.
        /// </summary>
        public void selectItem(EventFacade originEvent){}
        /// <summary>
        /// Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
        /// is not specified.
        /// </summary>
        public void selectItem(Node itemNode){}
        /// <summary>
        /// Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
        /// is not specified.
        /// </summary>
        public void selectItem(Node itemNode, EventFacade originEvent){}
        /// <summary>
        /// Item that's currently active, if any. When the user presses enter, this
        /// is the item that will be selected.
        /// </summary>
        public Node activeItem{get;set;}
        /// <summary>
        /// Translatable strings used by the AutoCompleteList widget.
        /// </summary>
        public object strings{get;set;}
    }
}
