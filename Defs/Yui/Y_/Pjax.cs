//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides seamless, gracefully degrading Pjax (pushState + Ajax) functionality,
    /// which makes it easy to progressively enhance standard links on the page so that
    /// they can be loaded normally in old browsers, or via Ajax (with HTML5 history
    /// support) in newer browsers.
    /// </summary>
    public partial class Pjax : Router
    {
        [JsMethod(JsonInitializers=true)]
        public Pjax(){}
        /// <summary>
        /// Default Pjax route handler. Makes an Ajax request for the requested URL.
        /// </summary>
        protected void _defaultRoute(object req){}
        /// <summary>
        /// Default event handler for both the `error` and `load` events. Attempts to
        /// insert the loaded content into the `container` node and update the page's
        /// title.
        /// </summary>
        protected void _defCompleteFn(EventFacade e){}
        /// <summary>
        /// Handles IO end events.
        /// </summary>
        protected void _onPjaxIOEnd(){}
        /// <summary>
        /// Handles IO failure events and fires our own `error` event.
        /// </summary>
        protected void _onPjaxIOFailure(){}
        /// <summary>
        /// Handles IO success events and fires our own 'load' event.
        /// </summary>
        protected void _onPjaxIOSuccess(){}
        /// <summary>
        /// Extracts and returns the relevant HTML content from an Ajax response. The
        /// content is extracted using the `contentSelector` attribute as a CSS
        /// selector. If `contentSelector` is `null`, the entire response will be
        /// returned.
        /// The return value is an object containing two properties:
        /// - **node**: A `Y.Node` instance for a document fragment containing the
        /// extracted HTML content.
        /// - **title**: The title of the HTML page, if any, extracted using the
        /// `titleSelector` attribute (which defaults to looking for a `<title>`
        /// element). If `titleSelector` is not set or if a title could not be
        /// found, this property will be `undefined`.
        /// </summary>
        public object getContent(object responseText){return null;}
        /// <summary>
        /// Node into which content should be inserted when a page is loaded via
        /// Pjax. This node's existing contents will be removed to make way for the
        /// new content.
        /// If not set, loaded content will not be automatically inserted into the
        /// page.
        /// </summary>
        public Node container{get;set;}
        /// <summary>
        /// Time in milliseconds after which an Ajax request should time out. When a
        /// timeout occurs, the `error` event will be fired.
        /// </summary>
        public Y_.DataType_.Number timeout{get;set;}
    }
}
