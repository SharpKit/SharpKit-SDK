//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// month range of dates, rendered as a grid with date and
    /// weekday labels.
    /// </summary>
    public partial class CalendarBase : Widget
    {
        /// <summary>
        /// A placeholder method, called from bindUI, to bind the Calendar events.
        /// </summary>
        protected void _bindCalendarEvents(){}
        [JsMethod(JsonInitializers=true)]
        public CalendarBase(){}
        /// <summary>
        /// A utility method that converts a date to the node wrapping the calendar cell
        /// the date corresponds to..
        /// </summary>
        protected Node _dateToNode(Y_.DataType_.Date oDate){return null;}
        /// <summary>
        /// A utility method that returns all dates selected in a specific month.
        /// </summary>
        protected Y_.Array _getSelectedDatesInMonth(Y_.DataType_.Date oDate){return null;}
        /// <summary>
        /// An internal utility method that generates a list of selected dates
        /// from the hash storage.
        /// </summary>
        protected Y_.Array _getSelectedDatesList(){return null;}
        /// <summary>
        /// A utility method that converts a node corresponding to the DOM element of
        /// the cell for a particular date to that date.
        /// </summary>
        protected Y_.DataType_.Date _nodeToDate(Node oNode){return null;}
        /// <summary>
        /// A utility method that normalizes a given date by converting it to the 1st
        /// day of the month the date is in, with the time set to noon.
        /// </summary>
        protected Y_.DataType_.Date _normalizeDate(Y_.DataType_.Date oDate){return null;}
        /// <summary>
        /// A render assist method that turns off the view of the next month's dates
        /// in a given calendar pane.
        /// </summary>
        protected void _turnNextMonthOff(Node pane){}
        /// <summary>
        /// A render assist method that turns on the view of the next month's dates
        /// in a given calendar pane.
        /// </summary>
        protected void _turnNextMonthOn(Node pane){}
        /// <summary>
        /// A render assist method that turns off the view of the previous month's dates
        /// in a given calendar pane.
        /// </summary>
        protected void _turnPrevMonthOff(Node pane){}
        /// <summary>
        /// A render assist method that turns on the view of the previous month's dates
        /// in a given calendar pane.
        /// </summary>
        protected void _turnPrevMonthOn(Node pane){}
        /// <summary>
        /// bindUI implementation
        /// Assigns listeners to relevant events that change the state
        /// of the calendar.
        /// </summary>
        public void bindUI(){}
        /// <summary>
        /// Deselects a given date or array of dates, or deselects
        /// all dates if no argument is specified.
        /// </summary>
        public void deselectDates(){}
        /// <summary>
        /// Deselects a given date or array of dates, or deselects
        /// all dates if no argument is specified.
        /// </summary>
        public void deselectDates(object dates){}
        /// <summary>
        /// Designated initializer
        /// Initializes instance-level properties of
        /// calendar.
        /// </summary>
        public void initializer(){}
        /// <summary>
        /// renderUI implementation
        /// Creates a visual representation of the calendar based on existing parameters.
        /// </summary>
        public void renderUI(){}
        /// <summary>
        /// Selects a given date or array of dates.
        /// </summary>
        public void selectDates(object dates){}
        /// <summary>
        /// syncUI implementation
        /// Update the scroll position, based on the current value of scrollY
        /// </summary>
        public void syncUI(){}
        /// <summary>
        /// The CSS classnames for the calendar templates.
        /// </summary>
        protected object CALENDAR_STRINGS{get;private set;}
        /// <summary>
        /// An object of the form {rules:Object, filterFunction:Function},
        /// providing  set of rules and a custom rendering function for
        /// customizing specific calendar cells.
        /// </summary>
        public object customRenderer{get;private set;}
        /// <summary>
        /// The date corresponding to the current calendar view. Always
        /// normalized to the first of the month that contains the date
        /// at assignment time. Used as the first date visible in the
        /// calendar.
        /// </summary>
        public Y_.DataType_.Date date{get;set;}
        /// <summary>
        /// A read-only attribute providing a list of currently selected dates.
        /// </summary>
        public Y_.Array selectedDates{get;private set;}
        /// <summary>
        /// Strings and properties derived from the internationalization packages
        /// for the calendar.
        /// </summary>
        protected object strings{get;set;}
    }
}
