//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// One class of value algorithm that can be built onto SliderBase.  By default,
    /// values range between 0 and 100, but you can configure these on the
    /// built Slider class by setting the <code>min</code> and <code>max</code>
    /// configurations.  Set the initial value (will cause the thumb to move to the
    /// appropriate location on the rail) in configuration as well if appropriate.
    /// </summary>
    public partial class SliderValueRange
    {
        /// <summary>
        /// Update position according to new max value.  If the new max results
        /// in the current value being out of range, the value is set to the
        /// closer of min or max.
        /// </summary>
        protected void _afterMaxChange(EventFacade e){}
        /// <summary>
        /// Update position according to new min value.  If the new min results
        /// in the current value being out of range, the value is set to the
        /// closer of min or max.
        /// </summary>
        protected void _afterMinChange(EventFacade e){}
        /// <summary>
        /// Propagate change to the thumb position unless the change originated
        /// from the thumbMove event.
        /// </summary>
        protected void _afterValueChange(EventFacade e){}
        /// <summary>
        /// Override of stub method in SliderBase that is called at the end of
        /// its bindUI stage of render().  Subscribes to internal events to
        /// trigger UI and related state updates.
        /// </summary>
        protected void _bindValueLogic(){}
        /// <summary>
        /// Calculates and caches
        /// (range between max and min) / (rail length)
        /// for fast runtime calculation of position -&gt; value.
        /// </summary>
        protected void _calculateFactor(){}
        /// <summary>
        /// Dispatch the new position of the thumb into the value setting
        /// operations.
        /// </summary>
        protected void _defThumbMoveFn(EventFacade e){}
        /// <summary>
        /// Stub for construction logic.  Override if extending this class and
        /// you need to set something up during the initializer phase.
        /// </summary>
        protected void _initSliderValueRange(){}
        /// <summary>
        /// Returns the nearest valid value to the value input.  If the provided
        /// value is outside the min - max range, accounting for min > max
        /// scenarios, the nearest of either min or max is returned.  Otherwise,
        /// the provided value is returned.
        /// </summary>
        protected Y_.DataType_.Number _nearestValue(object value){return null;}
        /// <summary>
        /// <p>Converts a pixel position into a value.  Calculates current
        /// thumb offset from the leading edge of the rail multiplied by the
        /// ratio of <code>(max - min) / (constraining dim)</code>.</p>
        /// <p>Override this if you want to use a different value mapping
        /// algorithm.</p>
        /// </summary>
        protected object _offsetToValue(Y_.DataType_.Number offset){return null;}
        /// <summary>
        /// Restricts new values assigned to <code>value</code> attribute to be
        /// between the configured <code>min</code> and <code>max</code>.
        /// Rounds to nearest integer value.
        /// </summary>
        protected Y_.DataType_.Number _setNewValue(Y_.DataType_.Number value){return null;}
        /// <summary>
        /// Positions the thumb in accordance with the translated value.
        /// </summary>
        protected void _setPosition(Y_.DataType_.Number value){}
        /// <summary>
        /// Positions the thumb in accordance with the translated value.
        /// </summary>
        protected void _setPosition(Y_.DataType_.Number value, object options){}
        /// <summary>
        /// Move the thumb to appropriate position if necessary.  Also resets
        /// the cached offsets and recalculates the conversion factor to
        /// translate position to value.
        /// </summary>
        protected void _syncThumbPosition(){}
        /// <summary>
        /// Validates new values assigned to <code>max</code> attribute.  Numbers
        /// are acceptable.  Override this to enforce different rules.
        /// </summary>
        protected object _validateNewMax(object value){return null;}
        /// <summary>
        /// Validates new values assigned to <code>min</code> attribute.  Numbers
        /// are acceptable.  Override this to enforce different rules.
        /// </summary>
        protected object _validateNewMin(object value){return null;}
        /// <summary>
        /// Converts a value into a pixel offset for use in positioning
        /// the thumb according to the reverse of the
        /// <code>_offsetToValue( xy )</code> operation.
        /// </summary>
        protected Y_.DataType_.Number _valueToOffset(Y_.DataType_.Number val){return null;}
        /// <summary>
        /// Verifies that the current value is within the min - max range.  If
        /// not, value is set to either min or max, depending on which is
        /// closer.
        /// </summary>
        protected void _verifyValue(){}
        /// <summary>
        /// Returns the current value.  Override this if you want to introduce
        /// output formatting. Otherwise equivalent to slider.get( "value" );
        /// </summary>
        public Y_.DataType_.Number getValue(){return null;}
        /// <summary>
        /// Updates the current value.  Override this if you want to introduce
        /// input value parsing or preprocessing.  Otherwise equivalent to
        /// slider.set( "value", v );
        /// </summary>
        public Slider setValue(Y_.DataType_.Number val){return null;}
    }
}
