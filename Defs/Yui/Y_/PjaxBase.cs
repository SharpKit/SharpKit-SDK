//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// `Y.Router` extension that provides the core plumbing for enhanced navigation
    /// implemented using the pjax technique (HTML5 `pushState` + Ajax).
    /// This makes it easy to enhance the navigation between the URLs of an application
    /// in HTML5 history capable browsers by delegating to the router to fulfill the
    /// "request" and seamlessly falling-back to using standard full-page reloads in
    /// older, less-capable browsers.
    /// The `PjaxBase` class isn't useful on its own, but can be mixed into a
    /// `Router`-based class to add Pjax functionality to that Router. For a pre-made
    /// standalone Pjax router, see the `Pjax` class.
    /// var MyRouter = Y.Base.create('myRouter', Y.Router, [Y.PjaxBase], {
    /// // ...
    /// });
    /// </summary>
    public partial class PjaxBase
    {
        /// <summary>
        /// Default handler for the `navigate` event.
        /// Adds a new history entry or replaces the current entry for the specified URL
        /// and will scroll the page to the top if configured to do so.
        /// </summary>
        protected void _defNavigateFn(EventFacade e){}
        /// <summary>
        /// Returns the current path root after popping off the last path segment,
        /// making it useful for resolving other URL paths against.
        /// The path root will always begin and end with a '/'.
        /// </summary>
        protected object _getRoot(){return null;}
        /// <summary>
        /// Underlying implementation for `navigate()`.
        /// </summary>
        protected object _navigate(object url){return null;}
        /// <summary>
        /// Underlying implementation for `navigate()`.
        /// </summary>
        protected object _navigate(object url, object options){return null;}
        /// <summary>
        /// Returns a normalized path, ridding it of any '..' segments and properly
        /// handling leading and trailing slashes.
        /// </summary>
        protected object _normalizePath(object path){return null;}
        /// <summary>
        /// Handler for delegated link-click events which match the `linkSelector`.
        /// This will attempt to enhance the navigation to the link element's `href` by
        /// passing the URL to the `_navigate()` method. When the navigation is being
        /// enhanced, the default action is prevented.
        /// If the user clicks a link with the middle/right mouse buttons, or is holding
        /// down the Ctrl or Command keys, this method's behavior is not applied and
        /// allows the native behavior to occur. Similarly, if the router is not capable
        /// or handling the URL because no route-handlers match, the link click will
        /// behave natively.
        /// </summary>
        protected void _onLinkClick(EventFacade e){}
        /// <summary>
        /// Binds the delegation of link-click events that match the `linkSelector` to
        /// the `_onLinkClick()` handler.
        /// By default this method will only be called if the browser is capable of
        /// using HTML5 history.
        /// </summary>
        protected void _pjaxBindUI(){}
        /// <summary>
        /// Returns the normalized result of resolving the `path` against the current
        /// path. Falsy values for `path` will return just the current path.
        /// </summary>
        protected object _resolvePath(object path){return null;}
        /// <summary>
        /// Resolves the specified URL against the current URL.
        /// This method resolves URLs like a browser does and will always return an
        /// absolute URL. When the specified URL is already absolute, it is assumed to
        /// be fully resolved and is simply returned as is. Scheme-relative URLs are
        /// prefixed with the current protocol. Relative URLs are giving the current
        /// URL's origin and are resolved and normalized against the current path root.
        /// </summary>
        protected object _resolveURL(object url){return null;}
        /// <summary>
        /// Navigates to the specified URL if there is a route handler that matches. In
        /// browsers capable of using HTML5 history, the navigation will be enhanced by
        /// firing the `navigate` event and having the router handle the "request".
        /// Non-HTML5 browsers will navigate to the new URL via manipulation of
        /// `window.location`.
        /// When there is a route handler for the specified URL and it is being
        /// navigated to, this method will return `true`, otherwise it will return
        /// `false`.
        /// **Note:** The specified URL _must_ be of the same origin as the current URL,
        /// otherwise an error will be logged and navigation will not occur. This is
        /// intended as both a security constraint and a purposely imposed limitation as
        /// it does not make sense to tell the router to navigate to a URL on a
        /// different scheme, host, or port.
        /// </summary>
        public object navigate(object url){return null;}
        /// <summary>
        /// Navigates to the specified URL if there is a route handler that matches. In
        /// browsers capable of using HTML5 history, the navigation will be enhanced by
        /// firing the `navigate` event and having the router handle the "request".
        /// Non-HTML5 browsers will navigate to the new URL via manipulation of
        /// `window.location`.
        /// When there is a route handler for the specified URL and it is being
        /// navigated to, this method will return `true`, otherwise it will return
        /// `false`.
        /// **Note:** The specified URL _must_ be of the same origin as the current URL,
        /// otherwise an error will be logged and navigation will not occur. This is
        /// intended as both a security constraint and a purposely imposed limitation as
        /// it does not make sense to tell the router to navigate to a URL on a
        /// different scheme, host, or port.
        /// </summary>
        public object navigate(object url, object options){return null;}
        /// <summary>
        /// Holds the delegated pjax-link click handler.
        /// </summary>
        protected EventHandle _pjaxEvents{get;set;}
    }
}
