//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// A widget extension, which can be used to add constrained xy positioning support to the base Widget class,
    /// through the <a href="Base.html#method_build">Base.build</a> method. This extension requires that
    /// the WidgetPosition extension be added to the Widget (before WidgetPositionConstrain, if part of the same
    /// extension list passed to Base.build).
    /// </summary>
    public partial class WidgetPositionConstrain
    {
        /// <summary>
        /// After change listener for the "constrain" attribute, responsible
        /// for updating the UI, in response to attribute changes.
        /// </summary>
        protected void _afterConstrainChange(EventFacade e){}
        /// <summary>
        /// Binds event listeners responsible for updating the UI state in response to
        /// Widget constrained positioning related state changes.
        /// <p>
        /// This method is invoked after bindUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _bindUIPosConstrained(){}
        /// <summary>
        /// The method which performs the actual constrain calculations for a given axis ("x" or "y") based
        /// on the regions provided.
        /// </summary>
        protected Y_.DataType_.Number _constrain(Y_.DataType_.Number val, object axis, object nodeRegion, object constrainingRegion){return null;}
        /// <summary>
        /// The on change listener for the "xy" attribute. Modifies the event facade's
        /// newVal property with the constrained XY value.
        /// </summary>
        protected void _constrainOnXYChange(EventFacade e){}
        /// <summary>
        /// The method which performs the preventOverlap calculations for a given axis ("x" or "y") based
        /// on the value and regions provided.
        /// </summary>
        protected Y_.DataType_.Number _preventOverlap(Y_.DataType_.Number val, object axis, object nodeRegion, object constrainingRegion){return null;}
        /// <summary>
        /// The setter implementation for the "constrain" attribute.
        /// </summary>
        protected void _setConstrain(object val){}
        /// <summary>
        /// Constrains the widget's bounding box to a node (or the viewport). If xy or node are not
        /// passed in, the current position and the value of "constrain" will be used respectively.
        /// The widget's position will be changed to the constrained position.
        /// </summary>
        public void constrain(Y_.Array xy, object node){}
        /// <summary>
        /// Calculates the constrained positions for the XY positions provided, using
        /// the provided node argument is passed in. If no node value is passed in, the value of
        /// the "constrain" attribute is used.
        /// </summary>
        public Y_.Array getConstrainedXY(Y_.Array xy, object node){return null;}
        /// <summary>
        /// The set of positions for which to prevent
        /// overlap.
        /// </summary>
        protected object _PREVENT_OVERLAP{get;set;}
        /// <summary>
        /// Static property used to define the default attribute
        /// configuration introduced by WidgetPositionConstrain.
        /// </summary>
        public object ATTRS{get;set;}
    }
}
