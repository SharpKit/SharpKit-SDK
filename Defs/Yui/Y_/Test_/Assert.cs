//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.Test_
{
    /// <summary>
    /// The Assert object provides functions to test JavaScript values against
    /// known and expected results. Whenever a comparison (assertion) fails,
    /// an error is thrown.
    /// </summary>
    public partial class Assert
    {
        /// <summary>
        /// Formats a message so that it can contain the original assertion message
        /// in addition to the custom message.
        /// </summary>
        protected object _formatMessage(object customMessage, object defaultMessage){return null;}
        /// <summary>
        /// Returns the number of assertions that have been performed.
        /// </summary>
        protected void _getCount(){}
        /// <summary>
        /// Increments the number of assertions that have been performed.
        /// </summary>
        protected void _increment(){}
        /// <summary>
        /// Resets the number of assertions that have been performed to 0.
        /// </summary>
        protected void _reset(){}
        /// <summary>
        /// Asserts that a value is equal to another. This uses the double equals sign
        /// so type cohersion may occur.
        /// </summary>
        public void areEqual(object expected, object actual, object message){}
        /// <summary>
        /// Asserts that a value is not equal to another. This uses the double equals sign
        /// so type cohersion may occur.
        /// </summary>
        public void areNotEqual(object unexpected, object actual, object message){}
        /// <summary>
        /// Asserts that a value is not the same as another. This uses the triple equals sign
        /// so no type cohersion may occur.
        /// </summary>
        public void areNotSame(object unexpected, object actual, object message){}
        /// <summary>
        /// Asserts that a value is the same as another. This uses the triple equals sign
        /// so no type cohersion may occur.
        /// </summary>
        public void areSame(object expected, object actual, object message){}
        /// <summary>
        /// Forces an assertion error to occur.
        /// </summary>
        public void fail(object message){}
        /// <summary>
        /// Asserts that a value is an array.
        /// </summary>
        public void isArray(object actual, object message){}
        /// <summary>
        /// Asserts that a value is a Boolean.
        /// </summary>
        public void isBoolean(object actual, object message){}
        /// <summary>
        /// Asserts that a value is false. This uses the triple equals sign
        /// so no type cohersion may occur.
        /// </summary>
        public void isFalse(object actual, object message){}
        /// <summary>
        /// Asserts that a value is a function.
        /// </summary>
        public void isFunction(object actual, object message){}
        /// <summary>
        /// Asserts that a value is an instance of a particular object. This may return
        /// incorrect results when comparing objects from one frame to constructors in
        /// another frame. For best results, don't use in a cross-frame manner.
        /// </summary>
        public void isInstanceOf(JsAction expected, object actual, object message){}
        /// <summary>
        /// Asserts that a value is not a number.
        /// </summary>
        public void isNaN(object actual, object message){}
        /// <summary>
        /// Asserts that a value is not the special NaN value.
        /// </summary>
        public void isNotNaN(object actual, object message){}
        /// <summary>
        /// Asserts that a value is not null. This uses the triple equals sign
        /// so no type cohersion may occur.
        /// </summary>
        public void isNotNull(object actual, object message){}
        /// <summary>
        /// Asserts that a value is not undefined. This uses the triple equals sign
        /// so no type cohersion may occur.
        /// </summary>
        public void isNotUndefined(object actual, object message){}
        /// <summary>
        /// Asserts that a value is null. This uses the triple equals sign
        /// so no type cohersion may occur.
        /// </summary>
        public void isNull(object actual, object message){}
        /// <summary>
        /// Asserts that a value is a number.
        /// </summary>
        public void isNumber(object actual, object message){}
        /// <summary>
        /// Asserts that a value is an object.
        /// </summary>
        public void isObject(object actual, object message){}
        /// <summary>
        /// Asserts that a value is a string.
        /// </summary>
        public void isString(object actual, object message){}
        /// <summary>
        /// Asserts that a value is true. This uses the triple equals sign
        /// so no type cohersion may occur.
        /// </summary>
        public void isTrue(object actual, object message){}
        /// <summary>
        /// Asserts that a value is of a particular type.
        /// </summary>
        public void isTypeOf(object expectedType, object actualValue, object message){}
        /// <summary>
        /// Asserts that a value is undefined. This uses the triple equals sign
        /// so no type cohersion may occur.
        /// </summary>
        public void isUndefined(object actual, object message){}
        /// <summary>
        /// A marker that the test should pass.
        /// </summary>
        public void pass(){}
        /// <summary>
        /// Asserts that executing a particular method should throw an error of
        /// a specific type. This is a replacement for _should.error.
        /// </summary>
        public object throwsError(object expectedError, JsAction method, object message){return null;}
    }
}
