//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides the implementation for the synthetic `valueChange` event. This class
    /// isn't meant to be used directly, but is public to make monkeypatching possible.
    /// Usage:
    /// YUI().use('event-valuechange', function (Y) {
    /// Y.one('#my-input').on('valueChange', function (e) {
    /// Y.log('previous value: ' + e.prevVal);
    /// Y.log('new value: ' + e.newVal);
    /// });
    /// });
    /// </summary>
    public partial class ValueChange
    {
        /// <summary>
        /// Stops polling when a node's blur event fires.
        /// </summary>
        protected void _onBlur(EventFacade e, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Resets a node's history and starts polling when a focus event occurs.
        /// </summary>
        protected void _onFocus(EventFacade e, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Starts polling when a node receives a keyDown event.
        /// </summary>
        protected void _onKeyDown(EventFacade e, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Starts polling when an IME-related keyUp event occurs on a node.
        /// </summary>
        protected void _onKeyUp(EventFacade e, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Starts polling when a node receives a mouseDown event.
        /// </summary>
        protected void _onMouseDown(EventFacade e, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Called when the `valuechange` event receives a new subscriber.
        /// </summary>
        protected void _onSubscribe(Node node, object sub, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Called when the `valuechange` event receives a new subscriber.
        /// </summary>
        protected void _onSubscribe(Node node, object sub, Y_.SyntheticEvent_.Notifier notifier, object filter){}
        /// <summary>
        /// Called when the `valuechange` event loses a subscriber.
        /// </summary>
        protected void _onUnsubscribe(Node node, object subscription, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Called at an interval to poll for changes to the value of the specified
        /// node.
        /// </summary>
        protected void _poll(Node node, object options){}
        /// <summary>
        /// Restarts the inactivity timeout for the specified node.
        /// </summary>
        protected void _refreshTimeout(Node node, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Begins polling for changes to the `value` property of the specified node. If
        /// polling is already underway for the specified node, it will not be restarted
        /// unless the `force` option is `true`
        /// </summary>
        protected void _startPolling(Node node, Y_.SyntheticEvent_.Notifier notifier, object options){}
        /// <summary>
        /// Stops polling for changes to the specified node's `value` attribute.
        /// </summary>
        protected void _stopPolling(Node node){}
        /// <summary>
        /// Stops polling for changes to the specified node's `value` attribute.
        /// </summary>
        protected void _stopPolling(Node node, Y_.SyntheticEvent_.Notifier notifier){}
        /// <summary>
        /// Clears the inactivity timeout for the specified node, if any.
        /// </summary>
        protected void _stopTimeout(Node node){}
        /// <summary>
        /// Interval (in milliseconds) at which to poll for changes to the value of an
        /// element with one or more `valueChange` subscribers when the user is likely
        /// to be interacting with it.
        /// </summary>
        public Y_.DataType_.Number POLL_INTERVAL{get;set;}
        /// <summary>
        /// Timeout (in milliseconds) after which to stop polling when there hasn't been
        /// any new activity (keypresses, mouse clicks, etc.) on an element.
        /// </summary>
        public Y_.DataType_.Number TIMEOUT{get;set;}
    }
}
