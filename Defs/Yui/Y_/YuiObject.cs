//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Adds utilities to the YUI instance for working with objects.
    /// </summary>
    public partial class YuiObject
    {
        /// <summary>
        /// Returns a new object that uses _obj_ as its prototype. This method wraps the
        /// native ES5 `Object.create()` method if available, but doesn't currently
        /// pass through `Object.create()`'s second argument (properties) in order to
        /// ensure compatibility with older browsers.
        /// </summary>
        public object __(object obj){return null;}
        /// <summary>
        /// Executes a function on each enumerable property in _obj_. The function
        /// receives the value, the key, and the object itself as parameters (in that
        /// order).
        /// By default, only properties owned by _obj_ are enumerated. To include
        /// prototype properties, set the _proto_ parameter to `true`.
        /// </summary>
        public YUI each(object obj, JsAction fn){return null;}
        /// <summary>
        /// Executes a function on each enumerable property in _obj_. The function
        /// receives the value, the key, and the object itself as parameters (in that
        /// order).
        /// By default, only properties owned by _obj_ are enumerated. To include
        /// prototype properties, set the _proto_ parameter to `true`.
        /// </summary>
        public YUI each(object obj, JsAction fn, object proto){return null;}
        /// <summary>
        /// Executes a function on each enumerable property in _obj_. The function
        /// receives the value, the key, and the object itself as parameters (in that
        /// order).
        /// By default, only properties owned by _obj_ are enumerated. To include
        /// prototype properties, set the _proto_ parameter to `true`.
        /// </summary>
        public YUI each(object obj, JsAction fn, object thisObj, object proto){return null;}
        /// <summary>
        /// Retrieves the sub value at the provided path,
        /// from the value object provided.
        /// </summary>
        public object getValue(object o, Y_.Array path){return null;}
        /// <summary>
        /// Alias for `owns()`.
        /// </summary>
        public object hasKey(object obj, object key){return null;}
        /// <summary>
        /// Returns `true` if the object owns an enumerable property with the specified
        /// value.
        /// </summary>
        public object hasValue(object obj, object value){return null;}
        /// <summary>
        /// Returns `true` if the object has no enumerable properties of its own.
        /// </summary>
        public object isEmpty(object obj){return null;}
        /// <summary>
        /// Returns an array containing the object's enumerable keys. Does not include
        /// prototype keys or non-enumerable keys.
        /// Note that keys are returned in enumeration order (that is, in the same order
        /// that they would be enumerated by a `for-in` loop), which may not be the same
        /// as the order in which they were defined.
        /// This method is an alias for the native ES5 `Object.keys()` method if
        /// available.
        /// </summary>
        public object keys(object obj){return null;}
        /// <summary>
        /// Returns `true` if _key_ exists on _obj_, `false` if _key_ doesn't exist or
        /// exists only on _obj_'s prototype. This is essentially a safer version of
        /// `obj.hasOwnProperty()`.
        /// </summary>
        public object owns(object obj, object key){return null;}
        /// <summary>
        /// Sets the sub-attribute value at the provided path on the
        /// value object.  Returns the modified value object, or
        /// undefined if the path is invalid.
        /// </summary>
        public object setValue(object o, Y_.Array path, object val){return null;}
        /// <summary>
        /// Returns the number of enumerable keys owned by an object.
        /// </summary>
        public Y_.DataType_.Number size(object obj){return null;}
        /// <summary>
        /// Executes a function on each enumerable property in _obj_, but halts if the
        /// function returns a truthy value. The function receives the value, the key,
        /// and the object itself as paramters (in that order).
        /// By default, only properties owned by _obj_ are enumerated. To include
        /// prototype properties, set the _proto_ parameter to `true`.
        /// </summary>
        public object some(object obj, JsAction fn){return null;}
        /// <summary>
        /// Executes a function on each enumerable property in _obj_, but halts if the
        /// function returns a truthy value. The function receives the value, the key,
        /// and the object itself as paramters (in that order).
        /// By default, only properties owned by _obj_ are enumerated. To include
        /// prototype properties, set the _proto_ parameter to `true`.
        /// </summary>
        public object some(object obj, JsAction fn, object proto){return null;}
        /// <summary>
        /// Executes a function on each enumerable property in _obj_, but halts if the
        /// function returns a truthy value. The function receives the value, the key,
        /// and the object itself as paramters (in that order).
        /// By default, only properties owned by _obj_ are enumerated. To include
        /// prototype properties, set the _proto_ parameter to `true`.
        /// </summary>
        public object some(object obj, JsAction fn, object thisObj, object proto){return null;}
        /// <summary>
        /// Returns an array containing the values of the object's enumerable keys.
        /// Note that values are returned in enumeration order (that is, in the same
        /// order that they would be enumerated by a `for-in` loop), which may not be the
        /// same as the order in which they were defined.
        /// </summary>
        public Y_.Array values(object obj){return null;}
    }
}
