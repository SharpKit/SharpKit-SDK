//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// The config object contains all of the configuration options for
    /// the `YUI` instance.  This object is supplied by the implementer
    /// when instantiating a `YUI` instance.  Some properties have default
    /// values if they are not supplied by the implementer.  This should
    /// not be updated directly because some values are cached.  Use
    /// `applyConfig()` to update the config object on a YUI instance that
    /// has already been configured.
    /// </summary>
    public partial class config
    {
        /// <summary>
        /// Whether or not YUI should use native ES5 functionality when available for
        /// features like `Y.Array.each()`, `Y.Object()`, etc. When `false`, YUI will
        /// always use its own fallback implementations instead of relying on ES5
        /// functionality, even when it's available.
        /// </summary>
        public void useNativeES5(){}
        /// <summary>
        /// Aliases are dynamic groups of modules that can be used as
        /// shortcuts.
        /// YUI({
        /// aliases: {
        /// davglass: [ 'node', 'yql', 'dd' ],
        /// mine: [ 'davglass', 'autocomplete']
        /// }
        /// }).use('mine', function(Y) {
        /// //Node, YQL, DD &amp; AutoComplete available here..
        /// });
        /// </summary>
        public object aliases{get;set;}
        /// <summary>
        /// Base directory for dynamic loading
        /// </summary>
        public string @base{get;set;}
        /// <summary>
        /// The YUI combo service base dir. Ex: `http://yui.yahooapis.com/combo?`
        /// For dynamic loading.
        /// </summary>
        public string comboBase{get;set;}
        /// <summary>
        /// A list of modules that defines the YUI core (overrides the default list).
        /// </summary>
        public Y_.Array core{get;set;}
        /// <summary>
        /// Object literal containing attributes to add to dynamically loaded link
        /// nodes.
        /// </summary>
        public string cssAttributes{get;set;}
        /// <summary>
        /// The default date format
        /// </summary>
        public string dateFormat{get;set;}
        /// <summary>
        /// A callback to execute when Y.error is called.  It receives the
        /// error message and an javascript error object if Y.error was
        /// executed because a javascript error was caught.  The function
        /// is executed in the YUI instance context. Returning `true` from this
        /// function will stop the Error from being thrown.
        /// </summary>
        public JsAction errorFn{get;set;}
        /// <summary>
        /// Hash of per-component filter specification.  If specified for a given
        /// component, this overrides the filter config.
        /// For dynamic loading.
        /// </summary>
        public object filters{get;set;}
        /// <summary>
        /// The default gallery version to build gallery module urls
        /// </summary>
        public string gallery{get;set;}
        /// <summary>
        /// A hash of module group definitions.  It for each group you
        /// can specify a list of modules and the base path and
        /// combo spec to use when dynamically loading the modules.
        /// groups: {
        /// yui2: {
        /// // specify whether or not this group has a combo service
        /// combine: true,
        /// // The comboSeperator to use with this group's combo handler
        /// comboSep: ';',
        /// // The maxURLLength for this server
        /// maxURLLength: 500,
        /// // the base path for non-combo paths
        /// base: 'http://yui.yahooapis.com/2.8.0r4/build/',
        /// // the path to the combo service
        /// comboBase: 'http://yui.yahooapis.com/combo?',
        /// // a fragment to prepend to the path attribute when
        /// // when building combo urls
        /// root: '2.8.0r4/build/',
        /// // the module definitions
        /// modules:  {
        /// yui2_yde: {
        /// path: "yahoo-dom-event/yahoo-dom-event.js"
        /// },
        /// yui2_anim: {
        /// path: "animation/animation.js",
        /// requires: ['yui2_yde']
        /// }
        /// }
        /// }
        /// }
        /// </summary>
        public object groups{get;set;}
        /// <summary>
        /// Node or id for a node that should be used as the insertion point for new
        /// nodes.  For dynamic loading.
        /// </summary>
        public string insertBefore{get;set;}
        /// <summary>
        /// Object literal containing attributes to add to dynamically loaded script
        /// nodes.
        /// </summary>
        public string jsAttributes{get;set;}
        /// <summary>
        /// The loader 'path' attribute to the loader itself.  This is combined
        /// with the 'base' attribute to dynamically load the loader component
        /// when boostrapping with the get utility alone.
        /// </summary>
        public string loaderPath{get;set;}
        /// <summary>
        /// A callback to execute when the loader fails to load one or
        /// more resource.  This could be because of a script load
        /// failure.  It can also fail if a javascript module fails
        /// to register itself, but only when the 'requireRegistration'
        /// is true.  If this function is defined, the use() callback will
        /// only be called when the loader succeeds, otherwise it always
        /// executes unless there was a javascript error when attaching
        /// a module.
        /// </summary>
        public JsAction loadErrorFn{get;set;}
        /// <summary>
        /// The default locale
        /// </summary>
        public string locale{get;set;}
        /// <summary>
        /// A hash of log sources that should be not be logged.  If specified,
        /// all sources are logged if not on this list.
        /// </summary>
        public object logExclude{get;set;}
        /// <summary>
        /// Alternative console log function for use in environments without
        /// a supported native console.  The function is executed in the
        /// YUI instance context.
        /// </summary>
        public JsAction logFn{get;set;}
        /// <summary>
        /// A hash of log sources that should be logged.  If specified, only
        /// log messages from these sources will be logged.
        /// </summary>
        public object logInclude{get;set;}
        /// <summary>
        /// A hash of module definitions to add to the list of YUI components.
        /// These components can then be dynamically loaded side by side with
        /// YUI via the `use()` method. This is a hash, the key is the module
        /// name, and the value is an object literal specifying the metdata
        /// for the module.  See `Loader.addModule` for the supported module
        /// metadata fields.  Also see groups, which provides a way to
        /// configure the base and combo spec for a set of modules.
        /// modules: {
        /// mymod1: {
        /// requires: ['node'],
        /// fullpath: '/mymod1/mymod1.js'
        /// },
        /// mymod2: {
        /// requires: ['mymod1'],
        /// fullpath: '/mymod2/mymod2.js'
        /// },
        /// mymod3: '/js/mymod3.js',
        /// mycssmod: '/css/mycssmod.css'
        /// }
        /// </summary>
        public object modules{get;set;}
        /// <summary>
        /// The default interval when polling in milliseconds.
        /// </summary>
        public int pollInterval{get;set;}
        /// <summary>
        /// The number of dynamic nodes to insert by default before
        /// automatically removing them.  This applies to script nodes
        /// because removing the node will not make the evaluated script
        /// unavailable.  Dynamic CSS is not auto purged, because removing
        /// a linked style sheet will also remove the style definitions.
        /// </summary>
        public int purgethreshold{get;set;}
        /// <summary>
        /// The root path to prepend to module path for the combo service.
        /// Ex: 3.0.0b1/build/
        /// For dynamic loading.
        /// </summary>
        public string root{get;set;}
        /// <summary>
        /// The `skin` config let's you configure application level skin
        /// customizations.  It contains the following attributes which
        /// can be specified to override the defaults:
        /// // The default skin, which is automatically applied if not
        /// // overriden by a component-specific skin definition.
        /// // Change this in to apply a different skin globally
        /// defaultSkin: 'sam',
        /// // This is combined with the loader base property to get
        /// // the default root directory for a skin.
        /// base: 'assets/skins/',
        /// // Any component-specific overrides can be specified here,
        /// // making it possible to load different skins for different
        /// // components.  It is possible to load more than one skin
        /// // for a given component as well.
        /// overrides: {
        /// slider: ['capsule', 'round']
        /// }
        /// For dynamic loading.
        /// </summary>
        public object skin{get;set;}
        /// <summary>
        /// Number of milliseconds before a timeout occurs when dynamically
        /// loading nodes. If not set, there is no timeout.
        /// </summary>
        public int timeout{get;set;}
        /// <summary>
        /// The default interval when polling in milliseconds.
        /// </summary>
        public int windowResizeDelay{get;set;}
        /// <summary>
        /// The default YUI 2 version to build yui2 module urls.  This is for
        /// intrinsic YUI 2 support via the 2in3 project.  Also see the '2in3'
        /// config for pulling different revisions of the wrapped YUI 2
        /// modules.
        /// </summary>
        public string yui2{get;set;}
    }
}
