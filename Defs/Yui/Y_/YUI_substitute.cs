//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// The following methods are added to the YUI instance
    /// </summary>
    public partial class YUI_substitute
    {
        /// <summary>
        /// Does {placeholder} substitution on a string.  The object passed as the
        /// second parameter provides values to replace the {placeholder}s.
        /// {placeholder} token names must match property names of the object.  For
        /// example
        /// `var greeting = Y.substitute("Hello, {who}!", { who: "World" });`
        /// {placeholder} tokens that are undefined on the object map will be left in
        /// tact (leaving unsightly "{placeholder}"s in the output string).  If your
        /// replacement strings *should* include curly braces, use `{LBRACE}` and
        /// `{RBRACE}` in your object map string value.
        /// If a function is passed as a third argument, it will be called for each
        /// {placeholder} found.  The {placeholder} name is passed as the first value
        /// and the value from the object map is passed as the second.  If the
        /// {placeholder} contains a space, the first token will be used to identify
        /// the object map property and the remainder will be passed as a third
        /// argument to the function.  See below for an example.
        /// If the value in the object map for a given {placeholder} is an object and
        /// the `dump` module is loaded, the replacement value will be the string
        /// result of calling `Y.dump(...)` with the object as input.  Include a
        /// numeric second token in the {placeholder} to configure the depth of the call
        /// to `Y.dump(...)`, e.g. "{someObject 2}".  See the
        /// <a href="../classes/YUI.html#method_dump">`dump`</a> method for details.
        /// </summary>
        public object substitute(object s, object o, JsAction f, object recurse){return null;}
    }
}
