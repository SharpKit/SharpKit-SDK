//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// A Widget for displaying tabular data.  Before feature modules are `use()`d,
    /// this class is functionally equivalent to DataTable.Base.  However, feature
    /// modules can modify this class in non-destructive ways, expanding the API and
    /// functionality.
    /// This is the primary DataTable class.  Out of the box, it provides the ability
    /// to dynamically generate an HTML table from a set of column configurations and
    /// row data.  But feature module inclusion can add table sorting, pagintaion,
    /// highlighting, selection, and more.
    /// <pre><code>
    /// // The functionality of this table would require additional modules be use()d,
    /// // but the feature APIs are aggregated onto Y.DataTable.
    /// // (Snippet is for illustration. Not all features are available today.)
    /// var table = new Y.DataTable({
    /// columns: [
    /// { type: 'checkbox', defaultChecked: true },
    /// { key: 'firstName', sortable: true, resizable: true },
    /// { key: 'lastName', sortable: true },
    /// { key: 'role', formatter: toRoleName }
    /// ],
    /// data: {
    /// source: 'http://myserver.com/service/json',
    /// type: 'json',
    /// schema: {
    /// resultListLocator: 'results.users',
    /// fields: [
    /// 'username',
    /// 'firstName',
    /// 'lastName',
    /// { key: 'role', type: 'number' }
    /// ]
    /// }
    /// },
    /// recordType: UserModel,
    /// pagedData: {
    /// location: 'footer',
    /// pageSizes: [20, 50, 'all'],
    /// rowsPerPage: 20,
    /// pageLinks: 5
    /// },
    /// editable: true
    /// });
    /// </code></pre>
    /// ### Column Configuration
    /// The column configurations are set in the form of an array of objects, where
    /// each object corresponds to a column.  For columns populated directly from the
    /// row data, a 'key' property is required to bind the column to that property or
    /// attribute in the row data.
    /// Not all columns need to relate to row data, nor do all properties or attributes
    /// of the row data need to have a corresponding column.  However, only those
    /// columns included in the `columns` configuration attribute will be rendered.
    /// Other column configuration properties are supported by the configured
    /// `headerView`, `bodyView`, `footerView` classes as well as any features added by
    /// plugins or class extensions.  See the description of DataTable.HeaderView,
    /// DataTable.BodyView, and other DataTable feature classes to see what column
    /// properties they support.
    /// Some examples of column configurations would be:
    /// <pre><code>
    /// // Basic
    /// var columns = [{ key: 'firstName' }, { key: 'lastName' }, { key: 'age' }];
    /// // For columns without any additional configuration, strings can be used
    /// var columns = ['firstName', 'lastName', 'age'];
    /// // Multi-row column headers (see DataTable.HeaderView for details)
    /// var columns = [
    /// {
    /// label: 'Name',
    /// children: [
    /// { key: 'firstName' },
    /// { key: 'lastName' }
    /// ]
    /// },
    /// 'age' // mixing and matching objects and strings is ok
    /// ];
    /// // Including columns that are not related 1:1 to row data fields/attributes
    /// // (See DataTable.BodyView for details)
    /// var columns = [
    /// {
    /// label: 'Name', // Needed for the column header
    /// formatter: function (o) {
    /// // Fill the column cells with data from firstName and lastName
    /// if (o.data.age > 55) {
    /// o.className += ' senior';
    /// }
    /// return o.data.lastName + ', ' + o.data.firstName;
    /// }
    /// },
    /// 'age'
    /// ];
    /// // Columns that include feature configurations (for illustration; not all
    /// // features are available today).
    /// var columns = [
    /// { type: 'checkbox', defaultChecked: true },
    /// { key: 'firstName', sortable: true, resizable: true, min-width: '300px' },
    /// { key: 'lastName', sortable: true, resizable: true, min-width: '300px' },
    /// { key: 'age', emptyCellValue: '<em>unknown</em>' }
    /// ];
    /// </code></pre>
    /// ### Row Data Configuration
    /// The `data` configuration attribute is responsible for housing the data objects that will be rendered as rows.  You can provide this information in two ways by default:
    /// 1. An array of simple objects with key:value pairs
    /// 2. A ModelList of Base-based class instances (presumably Model subclass
    /// instances)
    /// If an array of objects is passed, it will be translated into a ModelList filled
    /// with instances of the class provided to the `recordType` attribute.  This
    /// attribute can also create a custom Model subclass from an array of field names
    /// or an object of attribute configurations.  If no `recordType` is provided, one
    /// will be created for you from available information (see `_initRecordType`).
    /// Providing either your own ModelList instance for `data`, or at least Model
    /// class for `recordType`, is the best way to control client-server
    /// synchronization when modifying data on the client side.
    /// The ModelList instance that manages the table's data is available in the `data`
    /// property on the DataTable instance.
    /// ### Rendering
    /// Table rendering is a collaborative process between the DataTable and its
    /// configured `headerView`, `bodyView`, and `footerView`.  The DataTable renders
    /// the `<table>` and `<caption>`, but the contents of the table are delegated to
    /// instances of the classes provided to the `headerView`, `bodyView`, and
    /// `footerView` attributes. If any of these attributes is unset, that portion of
    /// the table won't be rendered.
    /// DataTable.Base assigns the default `headerView` to `Y.DataTable.HeaderView` and
    /// the default `bodyView` to `Y.DataTable.BodyView`, though either can be
    /// overridden for custom rendering.  No default `footerView` is assigned. See
    /// those classes for more details about how they operate.
    /// </summary>
    public partial class DataTable : Y_.DataTable_.Base
    {
        /// <summary>
        /// Adds padding to the last cells in the fixed header for vertically scrolling
        /// tables.  This padding is equal in width to the scrollbar, so can't be
        /// relegated to a stylesheet.
        /// </summary>
        protected void _addScrollbarPadding(){}
        /// <summary>
        /// Updates the `_columnMap` property in response to changes in the `columns`
        /// attribute.
        /// </summary>
        protected void _afterColumnsChange(EventFacade e){}
        /// <summary>
        /// Updates the `modelList` attributes of the rendered views in response to the
        /// `data` attribute being assigned a new ModelList.
        /// </summary>
        protected void _afterDataChange(EventFacade e){}
        /// <summary>
        /// Updates the colspan of the `<td>` used to display the messages.
        /// </summary>
        protected void _afterMessageColumnsChange(EventFacade e){}
        /// <summary>
        /// Relays to `_uiSetMessage` to hide or show the message node.
        /// </summary>
        protected void _afterMessageDataChange(EventFacade e){}
        /// <summary>
        /// Reacts to changes in the `scrollable` attribute by updating the `_xScroll`
        /// and `_yScroll` properties and syncing the scrolling structure accordingly.
        /// </summary>
        protected void _afterScrollableChange(EventFacade e){}
        /// <summary>
        /// Reacts to changes in the `caption` attribute by adding, removing, or
        /// syncing the caption table when the table is set to scroll.
        /// </summary>
        protected void _afterScrollCaptionChange(EventFacade e){}
        /// <summary>
        /// Reacts to changes in the `columns` attribute of vertically scrolling tables
        /// by refreshing the fixed headers, scroll container, and virtual scrollbar
        /// position.
        /// </summary>
        protected void _afterScrollColumnsChange(EventFacade e){}
        /// <summary>
        /// Reacts to changes in vertically scrolling table's `data` ModelList by
        /// synchronizing the fixed column header widths and virtual scrollbar height.
        /// </summary>
        protected void _afterScrollDataChange(EventFacade e){}
        /// <summary>
        /// Reacts to changes in the `height` attribute of vertically scrolling tables
        /// by updating the height of the `<div>` wrapping the data table and the
        /// virtual scrollbar.  If `scrollable` was set to "y" or "xy" but lacking a
        /// declared `height` until the received change, `_syncScrollUI` is called to
        /// create the fixed headers etc.
        /// </summary>
        protected void _afterScrollHeightChange(EventFacade e){}
        /// <summary>
        /// Reacts to changes in the width of scrolling tables by expanding the width of
        /// the `<div>` wrapping the data table for horizontally scrolling tables or
        /// upding the position of the virtual scrollbar for vertically scrolling
        /// tables.
        /// </summary>
        protected void _afterScrollWidthChange(EventFacade e){}
        /// <summary>
        /// Removes the message node if `showMessages` is `false`, or relays to
        /// `_uiSetMessage` if `true`.
        /// </summary>
        protected void _afterShowMessagesChange(EventFacade e){}
        /// <summary>
        /// Sorts the `data` ModelList based on the new `sortBy` configuration.
        /// </summary>
        protected void _afterSortByChange(EventFacade e){}
        /// <summary>
        /// Applies the sorting logic to the new ModelList if the `newVal` is a new
        /// ModelList.
        /// </summary>
        protected void _afterSortDataChange(EventFacade e){}
        /// <summary>
        /// Checks if any of the fields in the modified record are fields that are
        /// currently being sorted by, and if so, resorts the `data` ModelList.
        /// </summary>
        protected void _afterSortRecordChange(EventFacade e){}
        /// <summary>
        /// Binds the events necessary to keep the message node in sync with the current
        /// table and configuration state.
        /// </summary>
        protected void _bindMessageUI(){}
        /// <summary>
        /// Binds virtual scrollbar interaction to the `_yScrollNode`'s `scrollTop` and
        /// vice versa.
        /// </summary>
        protected void _bindScrollbar(){}
        /// <summary>
        /// Binds to the window resize event to update the vertical scrolling table
        /// headers and wrapper `<div>` dimensions.
        /// </summary>
        protected void _bindScrollResize(){}
        /// <summary>
        /// Attaches internal subscriptions to keep the scrolling structure up to date
        /// with changes in the table's `data`, `columns`, `caption`, or `height`.  The
        /// `width` is taken care of already.
        /// This executes after the table's native `bindUI` method.
        /// </summary>
        protected void _bindScrollUI(){}
        /// <summary>
        /// Subscribes to state changes that warrant updating the UI, and adds the
        /// click handler for triggering the sort operation from the UI.
        /// </summary>
        protected void _bindSortUI(){}
        /// <summary>
        /// Clears the lock and timer used to manage synchronizing the scroll position
        /// between the vertical scroll container and the virtual scrollbar.
        /// </summary>
        protected void _clearScrollLock(){}
        /// <summary>
        /// Renders the table's `<colgroup>` and populates the `_colgroupNode` property.
        /// </summary>
        protected void _createColumnGroup(){}
        /// <summary>
        /// Creates a Model subclass from an array of attribute names or an object of
        /// attribute definitions.  This is used to generate a class suitable to
        /// represent the data passed to the `data` attribute if no `recordType` is
        /// set.
        /// </summary>
        protected Model _createRecordClass(object attrs){return null;}
        /// <summary>
        /// Creates a virtual scrollbar from the `_SCROLLBAR_TEMPLATE`, assigning it to
        /// the `_scrollbarNode` property.
        /// </summary>
        protected Node _createScrollbar(){return null;}
        /// <summary>
        /// Creates a separate table to contain the caption when the table is
        /// configured to scroll vertically or horizontally.
        /// </summary>
        protected Node _createScrollCaptionTable(){return null;}
        /// <summary>
        /// Creates the `<table>`.
        /// </summary>
        protected Node _createTable(){return null;}
        /// <summary>
        /// Creates a `<tbody>` node from the `TBODY_TEMPLATE`.
        /// </summary>
        protected void _createTBody(){}
        /// <summary>
        /// Creates a `<tfoot>` node from the `TFOOT_TEMPLATE`.
        /// </summary>
        protected void _createTFoot(){}
        /// <summary>
        /// Creates a `<thead>` node from the `THEAD_TEMPLATE`.
        /// </summary>
        protected void _createTHead(){}
        /// <summary>
        /// Populates the `_xScrollNode` property by creating the `<div>` Node described
        /// by the `_X_SCROLLER_TEMPLATE`.
        /// </summary>
        protected Node _createXScrollNode(){return null;}
        /// <summary>
        /// Populates the `_yScrollHeader` property by creating the `<table>` Node
        /// described by the `_Y_SCROLL_HEADER_TEMPLATE`.
        /// </summary>
        protected Node _createYScrollHeader(){return null;}
        /// <summary>
        /// Populates the `_yScrollNode` property by creating the `<div>` Node described
        /// by the `_Y_SCROLLER_TEMPLATE`.
        /// </summary>
        protected Node _createYScrollNode(){return null;}
        /// <summary>
        /// Default function for the `addColumn` event.
        /// Inserts the specified column at the provided index.
        /// </summary>
        protected void _defAddColumnFn(EventFacade e){}
        /// <summary>
        /// Default function for the `modifyColumn` event.
        /// Mixes the new column properties into the specified column definition.
        /// </summary>
        protected void _defModifyColumnFn(EventFacade e){}
        /// <summary>
        /// Default function for the `moveColumn` event.
        /// Removes the specified column from its current location and inserts it at the
        /// specified array index (may be an array of indexes for nested headers).
        /// </summary>
        protected void _defMoveColumnFn(EventFacade e){}
        /// <summary>
        /// Default function for the `removeColumn` event.
        /// Splices the specified column from its containing columns array.
        /// </summary>
        protected void _defRemoveColumnFn(EventFacade e){}
        /// <summary>
        /// Calls `render()` on the `bodyView` class instance.
        /// </summary>
        protected void _defRenderBodyFn(EventFacade e){}
        /// <summary>
        /// Calls `render()` on the `footerView` class instance.
        /// </summary>
        protected void _defRenderFooterFn(EventFacade e){}
        /// <summary>
        /// Calls `render()` on the `headerView` class instance.
        /// </summary>
        protected void _defRenderHeaderFn(EventFacade e){}
        /// <summary>
        /// Renders the `<table>` and, if there are associated Views, the `<thead>`,
        /// `<tfoot>`, and `<tbody>` (empty until `syncUI`).
        /// Assigns the generated table nodes to the `_tableNode`, `_theadNode`,
        /// `_tfootNode`, and `_tbodyNode` properties.  Assigns the instantiated Views
        /// to the `head`, `foot`, and `body` properties.
        /// </summary>
        protected void _defRenderTableFn(EventFacade e){}
        /// <summary>
        /// Sets the `sortBy` attribute from the `sort` event's `e.sortBy` value.
        /// </summary>
        protected void _defSortFn(EventFacade e){}
        /// <summary>
        /// Removes the nodes used to create horizontal and vertical scrolling and
        /// rejoins the caption to the main table if needed.
        /// </summary>
        protected void _disableScrolling(){}
        /// <summary>
        /// Removes the nodes used to allow horizontal scrolling.
        /// </summary>
        protected void _disableXScrolling(){}
        /// <summary>
        /// Removes the nodes used to allow vertical scrolling.
        /// </summary>
        protected void _disableYScrolling(){}
        /// <summary>
        /// The getter for the `columns` attribute.  Returns the array of column
        /// configuration objects if `instance.get('columns')` is called, or the
        /// specific column object if `instance.get('columns.columnKey')` is called.
        /// </summary>
        protected void _getColumns(object columns, object name){}
        /// <summary>
        /// Relays the `get()` request for the deprecated `columnset` attribute to the
        /// `columns` attribute.
        /// THIS BREAKS BACKWARD COMPATIBILITY.  3.4.1 and prior implementations will
        /// expect a Columnset instance returned from `get('columnset')`.
        /// </summary>
        protected void _getColumnset(object ignored, object name){}
        /// <summary>
        /// The getter for the `data` attribute.  Returns the ModelList stored in the
        /// `data` property.  If the ModelList is not yet set, it returns the current
        /// raw data (presumably an empty array or `undefined`).
        /// </summary>
        protected void _getData(object val){}
        /// <summary>
        /// Getter for the `sortBy` attribute.
        /// Supports the special subattribute "sortBy.state" to get a normalized JSON
        /// version of the current sort state.  Otherwise, returns the last assigned
        /// value.
        /// For example:
        /// <pre><code>var table = new Y.DataTable({
        /// columns: [ ... ],
        /// data: [ ... ],
        /// sortBy: 'username'
        /// });
        /// table.get('sortBy'); // 'username'
        /// table.get('sortBy.state'); // { key: 'username', dir: 1 }
        /// table.sort(['lastName', { firstName: "desc" }]);
        /// table.get('sortBy'); // ['lastName', { firstName: "desc" }]
        /// table.get('sortBy.state'); // [{ key: "lastName", dir: 1 }, { key: "firstName", dir: -1 }]
        /// </code></pre>
        /// </summary>
        protected void _getSortBy(object val, object detail){}
        /// <summary>
        /// Initializes the `_columnMap` property from the configured `columns`
        /// attribute.  If `columns` is not set, but `recordType` is, it uses the
        /// `ATTRS` of that class.  If neither are set, it temporarily falls back to an
        /// empty array. `_initRecordType` will call back into this method if it finds
        /// the `columnMap` empty.
        /// </summary>
        protected void _initColumns(){}
        /// <summary>
        /// Initializes the instance's `data` property from the value of the `data`
        /// attribute.  If the attribute value is a ModelList, it is assigned directly
        /// to `this.data`.  If it is an array, a ModelList is created, its `model`
        /// property is set to the configured `recordType` class, and it is seeded with
        /// the array data.  This ModelList is then assigned to `this.data`.
        /// </summary>
        protected void _initData(){}
        /// <summary>
        /// Publishes core events.
        /// </summary>
        protected void _initEvents(){}
        /// <summary>
        /// Creates the `_messageNode` property from the configured `MESSAGE_TEMPLATE`
        /// and inserts it before the `<table>`'s `<tbody>` node.
        /// </summary>
        protected void _initMessageNode(){}
        /// <summary>
        /// Add the messaging related strings to the `strings` map.
        /// </summary>
        protected void _initMessageStrings(){}
        /// <summary>
        /// If the `recordType` attribute is not set, this method attempts to set a
        /// default value.
        /// It tries the following methods to determine a default:
        /// 1. If the `data` attribute is set with a ModelList with a `model` property,
        /// that class is used.
        /// 2. If the `data` attribute is set with a non-empty ModelList, the
        /// `constructor` of the first item is used.
        /// 3. If the `data` attribute is set with a non-empty array and the first item
        /// is a Base subclass, its constructor is used.
        /// 4. If the `data` attribute is set with a non-empty array a custom Model
        /// subclass is generated using the keys of the first item as its `ATTRS`.
        /// 5. If the `_columnMap` property has keys, a custom Model subclass is
        /// generated using those keys as its `ATTRS`.
        /// Of none of those are successful, it subscribes to the change events for
        /// `columns`, `recordType`, and `data` to try again.
        /// If defaulting the `recordType` and the current `_columnMap` property is
        /// empty, it will call `_initColumns`.
        /// </summary>
        protected void _initRecordType(){}
        /// <summary>
        /// Creates a `_compare` function for the `data` ModelList to allow custom
        /// sorting by multiple fields.
        /// </summary>
        protected void _initSortFn(){}
        /// <summary>
        /// Add the sort related strings to the `strings` map.
        /// </summary>
        protected void _initSortStrings(){}
        /// <summary>
        /// Initializes the `_viewConfig`, `_headerConfig`, `_bodyConfig`, and
        /// `_footerConfig` properties with the configuration objects that will be
        /// passed to the constructors of the `headerView`, `bodyView`, and
        /// `footerView`.
        /// Extensions can add to the config objects to deliver custom parameters at
        /// view instantiation.  `_viewConfig` is used as the prototype of the other
        /// three config objects, so properties added here will be inherited by all
        /// configs.
        /// </summary>
        protected void _initViewConfig(){}
        /// <summary>
        /// Fires the `sort` event in response to user clicks on sortable column
        /// headers.
        /// </summary>
        protected void _onUITriggerSort(DOMEventFacade e){}
        /// <summary>
        /// Iterates the array of column configurations to capture all columns with a
        /// `key` property.  Columns that are represented as strings will be replaced
        /// with objects with the string assigned as the `key` property.  If a column
        /// has a `children` property, it will be iterated, adding any nested column
        /// keys to the returned map. There is no limit to the levels of nesting.
        /// All columns are assigned a `_yuid` stamp and `_id` property corresponding
        /// to the column's configured `name` or `key` property with any spaces
        /// replaced with dashes.  If the same `name` or `key` appears in multiple
        /// columns, subsequent appearances will have their `_id` appended with an
        /// incrementing number (e.g. if column "foo" is included in the `columns`
        /// attribute twice, the first will get `_id` of "foo", and the second an `_id`
        /// of "foo1").  Columns that are children of other columns will have the
        /// `_parent` property added, assigned the column object to which they belong.
        /// The result is an object map with column keys as the property name and the
        /// corresponding column object as the associated value.
        /// </summary>
        protected void _parseColumns(object columns){}
        /// <summary>
        /// Normalizes the possible input values for the `sortable` attribute, storing
        /// the results in the `_sortable` property.
        /// </summary>
        protected void _parseSortable(){}
        /// <summary>
        /// Removes the virtual scrollbar used by scrolling tables.
        /// </summary>
        protected void _removeScrollbar(){}
        /// <summary>
        /// Removes the table used to house the caption when the table is scrolling.
        /// </summary>
        protected void _removeScrollCaptionTable(){}
        /// <summary>
        /// Removes the `<div>` wrapper used to contain the data table when the table
        /// is horizontally scrolling.
        /// </summary>
        protected void _removeXScrollNode(){}
        /// <summary>
        /// Removes the `<div>` wrapper used to contain the data table and fixed header
        /// when the table is vertically scrolling.
        /// </summary>
        protected void _removeYScrollContainer(){}
        /// <summary>
        /// Removes the `<table>` used to contain the fixed column headers when the
        /// table is vertically scrolling.
        /// </summary>
        protected void _removeYScrollHeader(){}
        /// <summary>
        /// Removes the `<div>` wrapper used to contain the data table when the table
        /// is vertically scrolling.
        /// </summary>
        protected void _removeYScrollNode(){}
        /// <summary>
        /// Initial application of the sortable UI.
        /// </summary>
        protected void _renderSortable(){}
        /// <summary>
        /// Assigns the `_columnMap` property with the parsed results of the array of
        /// column definitions passed.
        /// </summary>
        protected void _setColumnMap(object columns){}
        /// <summary>
        /// Relays attribute assignments of the deprecated `columnset` attribute to the
        /// `columns` attribute.  If a Columnset is object is passed, its basic object
        /// structure is mined.
        /// </summary>
        protected void _setColumnset(object val){}
        /// <summary>
        /// Sets a columns's `<col>` element width style. This is needed to get around
        /// browser rendering differences.
        /// The colIndex corresponds to the item index of the `<col>` in the table's
        /// `<colgroup>`.
        /// To unset the width, pass a falsy value for the `width`.
        /// </summary>
        protected void _setColumnWidth(Y_.DataType_.Number colIndex, object width){}
        /// <summary>
        /// Accepts an object with `each` and `getAttrs` (preferably a ModelList or
        /// subclass) or an array of data objects.  If an array is passes, it will
        /// create a ModelList to wrap the data.  In doing so, it will set the created
        /// ModelList's `model` property to the class in the `recordType` attribute,
        /// which will be defaulted if not yet set.
        /// If the `data` property is already set with a ModelList, passing an array as
        /// the value will call the ModelList's `reset()` method with that array rather
        /// than replacing the stored ModelList wholesale.
        /// Any non-ModelList-ish and non-array value is invalid.
        /// </summary>
        protected void _setData(){}
        /// <summary>
        /// Stores an array of columns intended for display in the `_displayColumns`
        /// property.  This method assumes that if a column configuration object does
        /// not have children, it is a display column.
        /// </summary>
        protected void _setDisplayColumns(object columns){}
        /// <summary>
        /// Relays the value assigned to the deprecated `recordset` attribute to the
        /// `data` attribute.  If a Recordset instance is passed, the raw object data
        /// will be culled from it.
        /// </summary>
        protected void _setRecordset(object val){}
        /// <summary>
        /// Accepts a Base subclass (preferably a Model subclass). Alternately, it will
        /// generate a custom Model subclass from an array of attribute names or an
        /// object defining attributes and their respective configurations (it is
        /// assigned as the `ATTRS` of the new class).
        /// Any other value is invalid.
        /// </summary>
        protected JsAction _setRecordType(object val){return null;}
        /// <summary>
        /// Accepts (case insensitive) values "x", "y", "xy", `true`, and `false`.
        /// `true` is translated to "xy" and upper case values are converted to lower
        /// case.  All other values are invalid.
        /// </summary>
        protected object _setScrollable(object val){return null;}
        /// <summary>
        /// Assigns the `_xScroll` and `_yScroll` properties to true if an
        /// appropriate value is set in the `scrollable` attribute and the `height`
        /// and/or `width` is set.
        /// </summary>
        protected void _setScrollProperties(){}
        /// <summary>
        /// Parses the current `sortBy` attribute into a normalized structure for the
        /// `data` ModelList's `_compare` method.  Also updates the column
        /// configurations' `sortDir` properties.
        /// </summary>
        protected void _setSortBy(){}
        /// <summary>
        /// Replacement `comparator` for the `data` ModelList that defers sorting logic
        /// to the `_compare` method.  The deferral is accomplished by returning `this`.
        /// </summary>
        protected Model _sortComparator(Model item){return null;}
        /// <summary>
        /// Synchronizes the message UI with the table state.
        /// </summary>
        protected void _syncMessageUI(){}
        /// <summary>
        /// Splits the caption from the data `<table>` if the table is configured to
        /// scroll.  If not, rejoins the caption to the data `<table>` if it needs to
        /// be.
        /// </summary>
        protected void _syncScrollCaptionUI(){}
        /// <summary>
        /// Assigns widths to the fixed header columns to match the columns in the data
        /// table.
        /// </summary>
        protected void _syncScrollColumnWidths(){}
        /// <summary>
        /// Creates matching headers in the fixed header table for vertically scrolling
        /// tables and synchronizes the column widths.
        /// </summary>
        protected void _syncScrollHeaders(){}
        /// <summary>
        /// Keeps the virtual scrollbar and the scrolling `<div>` wrapper around the
        /// data table in vertically scrolling tables in sync.
        /// </summary>
        protected void _syncScrollPosition(DOMEventFacade e){}
        /// <summary>
        /// Keeps the virtual scrollbar and the scrolling `<div>` wrapper around the
        /// data table in vertically scrolling tables in sync.
        /// </summary>
        protected void _syncScrollPosition(DOMEventFacade e, object source){}
        /// <summary>
        /// Wraps the table for X and Y scrolling, if necessary, if the `scrollable`
        /// attribute is set.  Synchronizes dimensions and DOM placement of all
        /// scrolling related nodes.
        /// </summary>
        protected void _syncScrollUI(){}
        /// <summary>
        /// Wraps the table in a scrolling `<div>` of the configured width for "x"
        /// scrolling.
        /// </summary>
        protected void _syncXScrollUI(object xy){}
        /// <summary>
        /// Wraps the table in a scrolling `<div>` of the configured height (accounting
        /// for the caption if there is one) if "y" scrolling is enabled.  Otherwise,
        /// unwraps the table if necessary.
        /// </summary>
        protected void _syncYScrollUI(object xy){}
        /// <summary>
        /// Creates, removes, or updates the table's `<caption>` element per the input
        /// value.  Empty values result in the caption being removed.
        /// </summary>
        protected void _uiSetCaption(object htmlContent){}
        /// <summary>
        /// Populates the table's `<colgroup>` with a `<col>` per item in the `columns`
        /// attribute without children.  It is assumed that these are the columns that
        /// have data cells renderered for them.
        /// </summary>
        protected void _uiSetColumns(){}
        /// <summary>
        /// Calls `hideMessage` or `showMessage` as appropriate based on the presence of
        /// records in the `data` ModelList.
        /// This is called when `data` is reset or records are added or removed.  Also,
        /// if the `showMessages` attribute is updated.  In either case, if the
        /// triggering event has a `message` property on the EventFacade, it will be
        /// passed to `showMessage` (if appropriate).  If no such property is on the
        /// facade, the `emptyMessage` will be used (see the strings).
        /// </summary>
        protected void _uiSetMessage(EventFacade e){}
        /// <summary>
        /// Assigns the appropriate class to the `boundingBox` to identify the DataTable
        /// as horizontally scrolling, vertically scrolling, or both (adds both classes).
        /// Classes added are "yui3-datatable-scrollable-x" or "...-y"
        /// </summary>
        protected void _uiSetScrollable(){}
        /// <summary>
        /// Updates the virtual scrollbar's height to avoid overlapping with the fixed
        /// headers.
        /// </summary>
        protected void _uiSetScrollbarHeight(){}
        /// <summary>
        /// Updates the virtual scrollbar's placement to avoid overlapping the fixed
        /// headers or the data table.
        /// </summary>
        protected void _uiSetScrollbarPosition(Node scroller){}
        /// <summary>
        /// Applies the appropriate classes to the `boundingBox` and column headers to
        /// indicate sort state and sortability.
        /// Also currently wraps the header content of sortable columns in a `<div>`
        /// liner to give a CSS anchor for sort indicators.
        /// </summary>
        protected void _uiSetSortable(){}
        /// <summary>
        /// Updates the table's `summary` attribute with the input value.
        /// </summary>
        protected void _uiSetSummary(){}
        /// <summary>
        /// Sets the `boundingBox` and table width per the input value.
        /// </summary>
        protected void _uiSetWidth(object width){}
        /// <summary>
        /// Assigns the width of the `<div>` wrapping the data table in vertically
        /// scrolling tables.
        /// If the table can't compress to the specified width, the container is
        /// expanded accordingly.
        /// </summary>
        protected void _uiSetYScrollWidth(object width){}
        /// <summary>
        /// Detaches the scroll event subscriptions used to maintain scroll position
        /// parity between the scrollable `<div>` wrapper around the data table and the
        /// virtual scrollbar for vertically scrolling tables.
        /// </summary>
        protected void _unbindScrollbar(){}
        /// <summary>
        /// Detaches the resize event subscription used to maintain column parity for
        /// vertically scrolling tables with percentage widths.
        /// </summary>
        protected void _unbindScrollResize(){}
        /// <summary>
        /// Allows values `true`, `false`, "auto", or arrays of column names through.
        /// </summary>
        protected object _validateSortable(object val){return null;}
        /// <summary>
        /// Allows strings, arrays of strings, objects, or arrays of objects.
        /// </summary>
        protected object _validateSortBy(object val){return null;}
        /// <summary>
        /// Verifies the input value is a function with a `render` method on its
        /// prototype.  `null` is also accepted to remove the default View.
        /// </summary>
        protected void _validateView(){}
        /// <summary>
        /// Adds the column configuration to the DataTable's `columns` configuration.
        /// If the `index` parameter is supplied, it is injected at that index.  If the
        /// table has nested headers, inject a subcolumn by passing an array of indexes
        /// to identify the new column's final location.
        /// The `index` parameter is required if adding a nested column.
        /// This method is a convienience method for fetching the DataTable's `columns`
        /// attribute, updating it, and calling
        /// `table.set('columns', _updatedColumnsDefs_)`
        /// For example:
        /// <pre><code>// Becomes last column
        /// table.addColumn('name');
        /// // Inserted after the current second column, moving the current third column
        /// // to index 4
        /// table.addColumn({ key: 'price', formatter: currencyFormatter }, 2 );
        /// // Insert a new column in a set of headers three rows deep.  The index array
        /// // translates to
        /// // [ 2, --  in the third column's children
        /// //   1, --  in the second child's children
        /// //   3 ] -- as the fourth child column
        /// table.addColumn({ key: 'age', sortable: true }, [ 2, 1, 3 ]);
        /// </code></pre>
        /// </summary>
        public DataTable addColumn(object config){return null;}
        /// <summary>
        /// Adds the column configuration to the DataTable's `columns` configuration.
        /// If the `index` parameter is supplied, it is injected at that index.  If the
        /// table has nested headers, inject a subcolumn by passing an array of indexes
        /// to identify the new column's final location.
        /// The `index` parameter is required if adding a nested column.
        /// This method is a convienience method for fetching the DataTable's `columns`
        /// attribute, updating it, and calling
        /// `table.set('columns', _updatedColumnsDefs_)`
        /// For example:
        /// <pre><code>// Becomes last column
        /// table.addColumn('name');
        /// // Inserted after the current second column, moving the current third column
        /// // to index 4
        /// table.addColumn({ key: 'price', formatter: currencyFormatter }, 2 );
        /// // Insert a new column in a set of headers three rows deep.  The index array
        /// // translates to
        /// // [ 2, --  in the third column's children
        /// //   1, --  in the second child's children
        /// //   3 ] -- as the fourth child column
        /// table.addColumn({ key: 'age', sortable: true }, [ 2, 1, 3 ]);
        /// </code></pre>
        /// </summary>
        public DataTable addColumn(object config, object index){return null;}
        /// <summary>
        /// Adds a new record to the DataTable's `data` ModelList.  Record data can be
        /// an object of field values or an instance of the DataTable's configured
        /// `recordType` class.
        /// This relays all parameters to the `data` ModelList's `add` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `save()` method.
        /// </summary>
        public DataTable addRow(object data){return null;}
        /// <summary>
        /// Adds a new record to the DataTable's `data` ModelList.  Record data can be
        /// an object of field values or an instance of the DataTable's configured
        /// `recordType` class.
        /// This relays all parameters to the `data` ModelList's `add` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `save()` method.
        /// </summary>
        public DataTable addRow(object data, JsAction callback){return null;}
        /// <summary>
        /// Adds a new record to the DataTable's `data` ModelList.  Record data can be
        /// an object of field values or an instance of the DataTable's configured
        /// `recordType` class.
        /// This relays all parameters to the `data` ModelList's `add` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `save()` method.
        /// </summary>
        public DataTable addRow(object data, object config){return null;}
        /// <summary>
        /// Adds a new record to the DataTable's `data` ModelList.  Record data can be
        /// an object of field values or an instance of the DataTable's configured
        /// `recordType` class.
        /// This relays all parameters to the `data` ModelList's `add` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `save()` method.
        /// </summary>
        public DataTable addRow(object data, object config, JsAction callback){return null;}
        /// <summary>
        /// Adds an array of new records to the DataTable's `data` ModelList.  Record data
        /// can be an array of objects containing field values or an array of instance of
        /// the DataTable's configured `recordType` class.
        /// This relays all parameters to the `data` ModelList's `add` method.
        /// Technically, this is an alias to `addRow`, but please use the appropriately
        /// named method for readability.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Models will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to each Model's `save()` method.
        /// </summary>
        public DataTable addRows(object data){return null;}
        /// <summary>
        /// Adds an array of new records to the DataTable's `data` ModelList.  Record data
        /// can be an array of objects containing field values or an array of instance of
        /// the DataTable's configured `recordType` class.
        /// This relays all parameters to the `data` ModelList's `add` method.
        /// Technically, this is an alias to `addRow`, but please use the appropriately
        /// named method for readability.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Models will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to each Model's `save()` method.
        /// </summary>
        public DataTable addRows(object data, JsAction callback){return null;}
        /// <summary>
        /// Adds an array of new records to the DataTable's `data` ModelList.  Record data
        /// can be an array of objects containing field values or an array of instance of
        /// the DataTable's configured `recordType` class.
        /// This relays all parameters to the `data` ModelList's `add` method.
        /// Technically, this is an alias to `addRow`, but please use the appropriately
        /// named method for readability.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Models will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to each Model's `save()` method.
        /// </summary>
        public DataTable addRows(object data, object config){return null;}
        /// <summary>
        /// Adds an array of new records to the DataTable's `data` ModelList.  Record data
        /// can be an array of objects containing field values or an array of instance of
        /// the DataTable's configured `recordType` class.
        /// This relays all parameters to the `data` ModelList's `add` method.
        /// Technically, this is an alias to `addRow`, but please use the appropriately
        /// named method for readability.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Models will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to each Model's `save()` method.
        /// </summary>
        public DataTable addRows(object data, object config, JsAction callback){return null;}
        /// <summary>
        /// Subscribes to attribute change events to update the UI.
        /// </summary>
        protected void bindUI(){}
        /// <summary>
        /// Pass through to `delegate()` called from the `contentBox`.
        /// </summary>
        public EventHandle @delegate(object type, JsAction fn, object spec, object context, object args){return null;}
        /// <summary>
        /// Cleans up external event subscriptions.
        /// </summary>
        protected void destructor(){}
        /// <summary>
        /// Returns the `<td>` Node from the given row and column index.  Alternately,
        /// the `seed` can be a Node.  If so, the nearest ancestor cell is returned.
        /// If the `seed` is a cell, it is returned.  If there is no cell at the given
        /// coordinates, `null` is returned.
        /// Optionally, include an offset array or string to return a cell near the
        /// cell identified by the `seed`.  The offset can be an array containing the
        /// number of rows to shift followed by the number of columns to shift, or one
        /// of "above", "below", "next", or "previous".
        /// <pre><code>// Previous cell in the previous row
        /// var cell = table.getCell(e.target, [-1, -1]);
        /// // Next cell
        /// var cell = table.getCell(e.target, 'next');
        /// var cell = table.getCell(e.taregt, [0, 1];</pre></code>
        /// This is actually just a pass through to the `bodyView` instance's method
        /// by the same name.
        /// </summary>
        public Node getCell(object seed){return null;}
        /// <summary>
        /// Returns the `<td>` Node from the given row and column index.  Alternately,
        /// the `seed` can be a Node.  If so, the nearest ancestor cell is returned.
        /// If the `seed` is a cell, it is returned.  If there is no cell at the given
        /// coordinates, `null` is returned.
        /// Optionally, include an offset array or string to return a cell near the
        /// cell identified by the `seed`.  The offset can be an array containing the
        /// number of rows to shift followed by the number of columns to shift, or one
        /// of "above", "below", "next", or "previous".
        /// <pre><code>// Previous cell in the previous row
        /// var cell = table.getCell(e.target, [-1, -1]);
        /// // Next cell
        /// var cell = table.getCell(e.target, 'next');
        /// var cell = table.getCell(e.taregt, [0, 1];</pre></code>
        /// This is actually just a pass through to the `bodyView` instance's method
        /// by the same name.
        /// </summary>
        public Node getCell(object seed, object shift){return null;}
        /// <summary>
        /// Gets the column configuration object for the given key, name, or index.  For
        /// nested columns, `name` can be an array of indexes, each identifying the index
        /// of that column in the respective parent's "children" array.
        /// If you pass a column object, it will be returned.
        /// For columns with keys, you can also fetch the column with
        /// `instance.get('columns.foo')`.
        /// </summary>
        public object getColumn(object name){return null;}
        /// <summary>
        /// Returns the Model associated to the record `id`, `clientId`, or index (not
        /// row index).  If none of those yield a Model from the `data` ModelList, the
        /// arguments will be passed to the `bodyView` instance's `getRecord` method
        /// if it has one.
        /// If no Model can be found, `null` is returned.
        /// </summary>
        public Model getRecord(object seed){return null;}
        /// <summary>
        /// Returns the `<tr>` Node from the given row index, Model, or Model's
        /// `clientId`.  If the rows haven't been rendered yet, or if the row can't be
        /// found by the input, `null` is returned.
        /// This is actually just a pass through to the `bodyView` instance's method
        /// by the same name.
        /// </summary>
        public Node getRow(object id){return null;}
        /// <summary>
        /// Hides the message node.
        /// </summary>
        public DataTable hideMessage(){return null;}
        /// <summary>
        /// Publishes the events used by the mutation methods:
        /// * addColumn
        /// * removeColumn
        /// * modifyColumn
        /// * moveColumn
        /// </summary>
        protected void initializer(){}
        /// <summary>
        /// Sets up event handlers and AOP advice methods to bind the DataTable's natural
        /// behaviors with the scrolling APIs and state.
        /// </summary>
        protected void initializer(object config){}
        /// <summary>
        /// Updates an existing column definition. Fires the `modifyColumn` event.
        /// For example:
        /// <pre><code>// Add a formatter to the existing 'price' column definition
        /// table.modifyColumn('price', { formatter: currencyFormatter });
        /// // Change the label on a header cell in a set of nested headers three rows
        /// // deep.  The index array translates to
        /// // [ 2,  -- in the third column's children
        /// //   1,  -- the second child
        /// //   3 ] -- the fourth child column
        /// table.modifyColumn([2, 1, 3], { label: 'Experience' });
        /// </code></pre>
        /// </summary>
        public DataTable modifyColumn(object name, object config){return null;}
        /// <summary>
        /// Updates an existing record in the DataTable's `data` ModelList.  The record
        /// can be provided explicitly or targeted by it's `id` (see ModelList's
        /// `getById` method), `clientId`, or index in the ModelList.
        /// After locating the target Model, this relays the all other passed
        /// arguments to the Model's `setAttrs` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `save()` method.
        /// </summary>
        public DataTable modifyRow(object id, object data){return null;}
        /// <summary>
        /// Updates an existing record in the DataTable's `data` ModelList.  The record
        /// can be provided explicitly or targeted by it's `id` (see ModelList's
        /// `getById` method), `clientId`, or index in the ModelList.
        /// After locating the target Model, this relays the all other passed
        /// arguments to the Model's `setAttrs` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `save()` method.
        /// </summary>
        public DataTable modifyRow(object id, object data, JsAction callback){return null;}
        /// <summary>
        /// Updates an existing record in the DataTable's `data` ModelList.  The record
        /// can be provided explicitly or targeted by it's `id` (see ModelList's
        /// `getById` method), `clientId`, or index in the ModelList.
        /// After locating the target Model, this relays the all other passed
        /// arguments to the Model's `setAttrs` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `save()` method.
        /// </summary>
        public DataTable modifyRow(object id, object data, object config){return null;}
        /// <summary>
        /// Updates an existing record in the DataTable's `data` ModelList.  The record
        /// can be provided explicitly or targeted by it's `id` (see ModelList's
        /// `getById` method), `clientId`, or index in the ModelList.
        /// After locating the target Model, this relays the all other passed
        /// arguments to the Model's `setAttrs` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be `save()`d.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `save()` method.
        /// </summary>
        public DataTable modifyRow(object id, object data, object config, JsAction callback){return null;}
        /// <summary>
        /// Moves an existing column to a new location. Fires the `moveColumn` event.
        /// The destination index can be a number or array of numbers to place a column
        /// header in a nested header row.
        /// </summary>
        public DataTable moveColumn(object name, object index){return null;}
        /// <summary>
        /// Removes an existing column. Fires the `removeColumn` event.
        /// </summary>
        public DataTable removeColumn(object name){return null;}
        /// <summary>
        /// Removes a record from the DataTable's `data` ModelList.  The record can be
        /// provided explicitly or targeted by it's `id` (see ModelList's `getById`
        /// method), `clientId`, or index in the ModelList.
        /// After locating the target Model, this relays the Model and all other passed
        /// arguments to the `data` ModelList's `remove` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be destroyed, passing
        /// `{ delete: true }` to trigger calling the Model's sync layer.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `destroy()` method.
        /// </summary>
        public DataTable removeRow(object id){return null;}
        /// <summary>
        /// Removes a record from the DataTable's `data` ModelList.  The record can be
        /// provided explicitly or targeted by it's `id` (see ModelList's `getById`
        /// method), `clientId`, or index in the ModelList.
        /// After locating the target Model, this relays the Model and all other passed
        /// arguments to the `data` ModelList's `remove` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be destroyed, passing
        /// `{ delete: true }` to trigger calling the Model's sync layer.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `destroy()` method.
        /// </summary>
        public DataTable removeRow(object id, JsAction callback){return null;}
        /// <summary>
        /// Removes a record from the DataTable's `data` ModelList.  The record can be
        /// provided explicitly or targeted by it's `id` (see ModelList's `getById`
        /// method), `clientId`, or index in the ModelList.
        /// After locating the target Model, this relays the Model and all other passed
        /// arguments to the `data` ModelList's `remove` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be destroyed, passing
        /// `{ delete: true }` to trigger calling the Model's sync layer.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `destroy()` method.
        /// </summary>
        public DataTable removeRow(object id, object config){return null;}
        /// <summary>
        /// Removes a record from the DataTable's `data` ModelList.  The record can be
        /// provided explicitly or targeted by it's `id` (see ModelList's `getById`
        /// method), `clientId`, or index in the ModelList.
        /// After locating the target Model, this relays the Model and all other passed
        /// arguments to the `data` ModelList's `remove` method.
        /// If a configuration object is passed as a second argument, and that object
        /// has `sync: true` set, the underlying Model will be destroyed, passing
        /// `{ delete: true }` to trigger calling the Model's sync layer.
        /// If the DataTable's `autoSync` attribute is set to `true`, the additional
        /// argument is not needed.
        /// If syncing and the last argument is a function, that function will be used
        /// as a callback to the Model's `destroy()` method.
        /// </summary>
        public DataTable removeRow(object id, object config, JsAction callback){return null;}
        /// <summary>
        /// Builds the table and attaches it to the DOM.  This requires the host class
        /// to provide a `contentBox` attribute.  This is typically provided by Widget.
        /// </summary>
        protected void renderUI(){}
        /// <summary>
        /// Scrolls a given row or cell into view if the table is scrolling.  Pass the
        /// `clientId` of a Model from the DataTable's `data` ModelList or its row
        /// index to scroll to a row or a [row index, column index] array to scroll to
        /// a cell.  Alternately, to scroll to any element contained within the table's
        /// scrolling areas, pass its ID, or the Node itself (though you could just as
        /// well call `node.scrollIntoView()` yourself, but hey, whatever).
        /// </summary>
        public DataTable scrollTo(object id){return null;}
        /// <summary>
        /// Assigns the style width of the `<col>` representing the column identifed by
        /// `id` and updates the column configuration.
        /// Pass the empty string for `width` to return a column to auto sizing.
        /// This does not trigger a `columnsChange` event today, but I can be convinced
        /// that it should.
        /// </summary>
        public DataTable setColumnWidth(object id, object width){return null;}
        /// <summary>
        /// Display the message node and set its content to `message`.  If there is a
        /// localized `strings` entry for the value of `message`, that string will be
        /// used.
        /// </summary>
        public DataTable showMessage(object message){return null;}
        /// <summary>
        /// Sort the data in the `data` ModelList and refresh the table with the new
        /// order.
        /// Acceptable values for `fields` are `key` strings or objects with a single
        /// property, the column `key`, with a value of 1, -1, "asc", or "desc".  E.g.
        /// `{ username: 'asc' }`.  String values are assumed to be ascending.
        /// Example values would be:
        /// * `"username"` - sort by the data's `username` field or the `key`
        /// associated to a column with that `name`.
        /// * `{ username: "desc" }` - sort by `username` in descending order.
        /// Alternately, use values "asc", 1 (same as "asc"), or -1 (same as "desc").
        /// * `["lastName", "firstName"]` - ascending sort by `lastName`, but for
        /// records with the same `lastName`, ascending subsort by `firstName`.
        /// Array can have as many items as you want.
        /// * `[{ lastName: -1 }, "firstName"]` - descending sort by `lastName`,
        /// ascending subsort by `firstName`. Mixed types are ok.
        /// </summary>
        public DataTable sort(object fields){return null;}
        /// <summary>
        /// Sort the data in the `data` ModelList and refresh the table with the new
        /// order.
        /// Acceptable values for `fields` are `key` strings or objects with a single
        /// property, the column `key`, with a value of 1, -1, "asc", or "desc".  E.g.
        /// `{ username: 'asc' }`.  String values are assumed to be ascending.
        /// Example values would be:
        /// * `"username"` - sort by the data's `username` field or the `key`
        /// associated to a column with that `name`.
        /// * `{ username: "desc" }` - sort by `username` in descending order.
        /// Alternately, use values "asc", 1 (same as "asc"), or -1 (same as "desc").
        /// * `["lastName", "firstName"]` - ascending sort by `lastName`, but for
        /// records with the same `lastName`, ascending subsort by `firstName`.
        /// Array can have as many items as you want.
        /// * `[{ lastName: -1 }, "firstName"]` - descending sort by `lastName`,
        /// ascending subsort by `firstName`. Mixed types are ok.
        /// </summary>
        public DataTable sort(object fields, object payload){return null;}
        /// <summary>
        /// Updates the UI with the current attribute state.  Fires the `renderHeader`,
        /// `renderBody`, and `renderFooter` events;
        /// </summary>
        public void syncUI(){}
        /// <summary>
        /// Reverse the current sort direction of one or more fields currently being
        /// sorted by.
        /// Pass the `key` of the column or columns you want the sort order reversed
        /// for.
        /// </summary>
        public DataTable toggleSort(object fields){return null;}
        /// <summary>
        /// Reverse the current sort direction of one or more fields currently being
        /// sorted by.
        /// Pass the `key` of the column or columns you want the sort order reversed
        /// for.
        /// </summary>
        public DataTable toggleSort(object fields, object payload){return null;}
    }
}
