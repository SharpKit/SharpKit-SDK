//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// `Graphic` acts a factory and container for shapes. You need at least one `Graphic` instance to create shapes for your application.
    /// <p>The code block below creates a `Graphic` instance and appends it to an HTMLElement with the id 'mygraphiccontainer'.</p>
    /// var myGraphic = new Y.Graphic({render:"#mygraphiccontainer"});
    /// <p>Alternatively, you can add a `Graphic` instance to the DOM using the <a href="#method_render">`render`</a> method.</p>
    /// var myGraphic = new Y.Graphic();
    /// myGraphic.render("#mygraphiccontainer");
    /// `Graphic` has the following implementations based on browser capability.
    /// <ul>
    /// <li><a href="SVGGraphic.html">`SVGGraphic`</a></li>
    /// <li><a href="VMLGraphic.html">`VMLGraphic`</a></li>
    /// <li><a href="CanvasGraphic.html">`CanvasGraphic`</a></li>
    /// </ul>
    /// It is not necessary to interact with these classes directly. `Graphic` will point to the appropriate implemention.</p>
    /// </summary>
    public partial class Graphic
    {
        /// <summary>
        /// <p>Generates a shape instance by type. The method accepts an object that contain's the shape's
        /// type and attributes to be customized. For example, the code below would create a rectangle:</p>
        /// var myRect = myGraphic.addShape({
        /// type: "rect",
        /// width: 40,
        /// height: 30,
        /// fill: {
        /// color: "#9aa"
        /// },
        /// stroke: {
        /// weight: 1,
        /// color: "#000"
        /// }
        /// });
        /// <p>The `Graphics` module includes a few basic shapes. More information on their creation
        /// can be found in each shape's documentation:
        /// <ul>
        /// <li><a href="Circle.html">`Circle`</a></li>
        /// <li><a href="Ellipse.html">`Ellipse`</a></li>
        /// <li><a href="Rect.html">`Rect`</a></li>
        /// <li><a href="Path.html">`Path`</a></li>
        /// </ul>
        /// The `Graphics` module also allows for the creation of custom shapes. If a custom shape
        /// has been created, it can be instantiated with the `addShape` method as well. The attributes,
        /// required and optional, would need to be defined in the custom shape.
        /// var myCustomShape = myGraphic.addShape({
        /// type: Y.MyCustomShape,
        /// width: 50,
        /// height: 50,
        /// fill: {
        /// color: "#9aa"
        /// },
        /// stroke: {
        /// weight: 1,
        /// color: "#000"
        /// }
        /// });
        /// </summary>
        public Shape addShape(object cfg){return null;}
        /// <summary>
        /// Allows for creating multiple shapes in order to batch appending and redraw operations.
        /// </summary>
        public void batch(JsAction method){}
        /// <summary>
        /// Removes all nodes.
        /// </summary>
        public void destroy(){}
        /// <summary>
        /// Returns a shape based on the id of its dom node.
        /// </summary>
        public Shape getShapeById(object id){return null;}
        /// <summary>
        /// Gets the current position of the graphic instance in page coordinates.
        /// </summary>
        public object getXY(){return null;}
        /// <summary>
        /// Removes all shape instances from the dom.
        /// </summary>
        public void removeAllShapes(){}
        /// <summary>
        /// Removes a shape instance from from the graphic instance.
        /// </summary>
        public void removeShape(object shape){}
        /// <summary>
        /// Adds the graphics node to the dom.
        /// </summary>
        public void render(object parentNode){}
    }
}
