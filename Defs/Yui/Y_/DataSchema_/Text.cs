//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.DataSchema_
{
    /// <summary>
    /// Provides a DataSchema implementation which can be used to work with
    /// delimited text data.
    /// See the `apply` method for usage.
    /// </summary>
    public partial class Text : Y_.DataSchema_.Base
    {
        /// <summary>
        /// Schema-parsed list of results from full data
        /// </summary>
        protected object _parseResults(Y_.Array schema, object text_in, object data_out){return null;}
        /// <summary>
        /// Applies a schema to a string of delimited data, returning a normalized
        /// object with results in the `results` property. The `meta` property of
        /// the response object is present for consistency, but is assigned an
        /// empty object.  If the input data is absent or not a string, an `error`
        /// property will be added.
        /// Use _schema.resultDelimiter_ and _schema.fieldDelimiter_ to instruct
        /// `apply` how to split up the string into an array of data arrays for
        /// processing.
        /// Use _schema.resultFields_ to specify the keys in the generated result
        /// objects in `response.results`. The key:value pairs will be assigned
        /// in the order of the _schema.resultFields_ array, assuming the values
        /// in the data records are defined in the same order.
        /// _schema.resultFields_ field identifiers are objects with the following
        /// properties:
        /// * `key`   : <strong>(required)</strong> The property name you want
        /// the data value assigned to in the result object (String)
        /// * `parser`: A function or the name of a function on `Y.Parsers` used
        /// to convert the input value into a normalized type.  Parser
        /// functions are passed the value as input and are expected to
        /// return a value.
        /// If no value parsing is needed, you can use just the desired property
        /// name string as the field identifier instead of an object (see example
        /// below).
        /// </summary>
        public object apply(object schema, object data){return null;}
    }
}
