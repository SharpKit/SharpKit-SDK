//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Handlebars is a simple template language inspired by Mustache.
    /// This is a YUI port of the original Handlebars project, which can be found at
    /// <https://github.com/wycats/handlebars.js>.
    /// </summary>
    public partial class Handlebars
    {
        /// <summary>
        /// Compiles a Handlebars template string into a function. To render the template,
        /// call the function and pass in a context object.
        /// </summary>
        public JsAction compile(object @string){return null;}
        /// <summary>
        /// Compiles a Handlebars template string into a function. To render the template,
        /// call the function and pass in a context object.
        /// </summary>
        public JsAction compile(object @string, object options){return null;}
        /// <summary>
        /// Logs a debugging message. Note that messages will only be logged when the
        /// handlebars module is loaded in "debug" mode.
        /// </summary>
        public void log(object level, object message){}
        /// <summary>
        /// Precompiles a Handlebars template string into a string of JavaScript code. This
        /// can be used to precompile a template at build time or on the server, and the
        /// resulting template can then be rendered at runtime or on the client without
        /// needing to go through a compile step.
        /// To render a precompiled template, evaluate the code and then pass the resulting
        /// function to `Y.Handlebars.template()` to get back an executable template
        /// function.
        /// </summary>
        public object precompile(object @string){return null;}
        /// <summary>
        /// Precompiles a Handlebars template string into a string of JavaScript code. This
        /// can be used to precompile a template at build time or on the server, and the
        /// resulting template can then be rendered at runtime or on the client without
        /// needing to go through a compile step.
        /// To render a precompiled template, evaluate the code and then pass the resulting
        /// function to `Y.Handlebars.template()` to get back an executable template
        /// function.
        /// </summary>
        public object precompile(object @string, object options){return null;}
        /// <summary>
        /// Registers a helper function that will be made available to all templates.
        /// Helper functions receive the current template context as the `this` object, and
        /// can also receive arguments passed by the template.
        /// </summary>
        public void registerHelper(object name, JsAction fn){}
        /// <summary>
        /// Registers a helper function that will be made available to all templates.
        /// Helper functions receive the current template context as the `this` object, and
        /// can also receive arguments passed by the template.
        /// </summary>
        public void registerHelper(object name, JsAction fn, object inverse){}
        /// <summary>
        /// Registers a partial that will be made available to all templates.
        /// A partial is another template that can be used to render part of a larger
        /// template. For example, a website with a common header and footer across all its
        /// pages might use a template for each page, which would call shared partials to
        /// render the headers and footers.
        /// Partials may be specified as uncompiled template strings or as compiled template
        /// functions.
        /// </summary>
        public void registerPartial(object name, object partial){}
        /// <summary>
        /// Compiles and renders a Handlebars template string in a single step.
        /// If you'll be using a template more than once, it's more efficient to compile it
        /// into a function once using `compile()`, and then render it whenever you need to
        /// by simply executing the compiled function. However, if you only need to compile
        /// and render a template once, `render()` is a handy shortcut for doing both in a
        /// single step.
        /// </summary>
        public object render(object @string, object context){return null;}
        /// <summary>
        /// Compiles and renders a Handlebars template string in a single step.
        /// If you'll be using a template more than once, it's more efficient to compile it
        /// into a function once using `compile()`, and then render it whenever you need to
        /// by simply executing the compiled function. However, if you only need to compile
        /// and render a template once, `render()` is a handy shortcut for doing both in a
        /// single step.
        /// </summary>
        public object render(object @string, object context, object options){return null;}
        /// <summary>
        /// Converts a precompiled template into a renderable template function.
        /// </summary>
        public JsAction template(JsAction template){return null;}
    }
}
