//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Base class for the YUI Cache utility.
    /// </summary>
    public partial class Cache : Y_.Base
    {
        [JsMethod(JsonInitializers=true)]
        public Cache(){}
        /// <summary>
        /// Adds entry to cache.
        /// </summary>
        protected void _defAddFn(object e){}
        /// <summary>
        /// Flushes cache.
        /// </summary>
        protected void _defFlushFn(object e){}
        /// <summary>
        /// Gets all entries.
        /// </summary>
        protected void _getEntries(){}
        /// <summary>
        /// Gets size.
        /// </summary>
        protected void _getSize(){}
        /// <summary>
        /// Default overridable method compares current request with given cache entry.
        /// Returns true if current request matches the cached request, otherwise
        /// false. Implementers should override this method to customize the
        /// cache-matching algorithm.
        /// </summary>
        protected object _isMatch(object request, object entry){return null;}
        /// <summary>
        /// Returns position of a request in the entries array, otherwise null.
        /// </summary>
        protected Y_.DataType_.Number _position(object request){return null;}
        /// <summary>
        /// Sets max.
        /// </summary>
        protected void _setMax(){}
        /// <summary>
        /// Adds a new entry to the cache of the format
        /// {request:request, response:response, cached:cached, expires:expires}.
        /// If cache is full, evicts the stalest entry before adding the new one.
        /// </summary>
        public void add(object request, object response){}
        /// <summary>
        /// Flushes cache.
        /// </summary>
        public void flush(){}
        /// <summary>
        /// Retrieves cached object for given request, if available, and refreshes
        /// entry in the cache. Returns null if there is no cache match.
        /// </summary>
        public object retrieve(object request){return null;}
        /// <summary>
        /// Cached entries.
        /// </summary>
        public Y_.Array entries{get;set;}
        /// <summary>
        /// Maximum number of entries the Cache can hold.
        /// Set to 0 to turn off caching.
        /// </summary>
        public Y_.DataType_.Number max{get;set;}
        /// <summary>
        /// Number of entries currently cached.
        /// </summary>
        public Y_.DataType_.Number size{get;set;}
    }
}
