//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides methods for highlighting strings within other strings by wrapping
    /// them in HTML.
    /// The highlight methods first escape any special HTML characters in the input
    /// strings and then highlight the appropriate substrings by wrapping them in a
    /// `<b class="yui3-highlight"></b>` element. The `<b>` element is used rather than
    /// `<strong>` in accordance with HTML5's definition of `<b>` as being purely
    /// presentational, which is exactly what highlighting is.
    /// </summary>
    public partial class Highlight
    {
        /// <summary>
        /// Highlights all occurrences in the _haystack_ string of the items in the
        /// _needles_ array, regardless of where they occur. The returned string will
        /// have all HTML characters escaped except for the highlighting markup.
        /// </summary>
        public object all(object haystack, object needles){return null;}
        /// <summary>
        /// Highlights all occurrences in the _haystack_ string of the items in the
        /// _needles_ array, regardless of where they occur. The returned string will
        /// have all HTML characters escaped except for the highlighting markup.
        /// </summary>
        public object all(object haystack, object needles, object options){return null;}
        /// <summary>
        /// Same as `all()`, but case-sensitive by default.
        /// </summary>
        public object allCase(object haystack, object needles){return null;}
        /// <summary>
        /// Same as `all()`, but case-sensitive by default.
        /// </summary>
        public object allCase(object haystack, object needles, object options){return null;}
        /// <summary>
        /// Accent-folding version of `all()`.
        /// </summary>
        public object allFold(object haystack, object needles){return null;}
        /// <summary>
        /// Accent-folding version of `all()`.
        /// </summary>
        public object allFold(object haystack, object needles, object options){return null;}
        /// <summary>
        /// Highlights _needles_ that occur at the start of _haystack_. The returned
        /// string will have all HTML characters escaped except for the highlighting
        /// markup.
        /// </summary>
        public object start(object haystack, object needles){return null;}
        /// <summary>
        /// Highlights _needles_ that occur at the start of _haystack_. The returned
        /// string will have all HTML characters escaped except for the highlighting
        /// markup.
        /// </summary>
        public object start(object haystack, object needles, object options){return null;}
        /// <summary>
        /// Same as `start()`, but case-sensitive by default.
        /// </summary>
        public object startCase(object haystack, object needles){return null;}
        /// <summary>
        /// Accent-folding version of `start()`.
        /// </summary>
        public object startFold(object haystack, object needles){return null;}
        /// <summary>
        /// Highlights complete words in the _haystack_ string that are also in the
        /// _needles_ array. The returned string will have all HTML characters escaped
        /// except for the highlighting markup.
        /// </summary>
        public object words(object haystack, object needles){return null;}
        /// <summary>
        /// Highlights complete words in the _haystack_ string that are also in the
        /// _needles_ array. The returned string will have all HTML characters escaped
        /// except for the highlighting markup.
        /// </summary>
        public object words(object haystack, object needles, object options){return null;}
        /// <summary>
        /// Same as `words()`, but case-sensitive by default.
        /// </summary>
        public object wordsCase(object haystack, object needles){return null;}
        /// <summary>
        /// Accent-folding version of `words()`.
        /// </summary>
        public object wordsFold(object haystack, object needles){return null;}
    }
}
