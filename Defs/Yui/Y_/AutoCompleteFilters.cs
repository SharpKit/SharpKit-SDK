//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides pre-built result matching filters for AutoComplete.
    /// </summary>
    public partial class AutoCompleteFilters
    {
        /// <summary>
        /// Returns an array of results that contain all of the characters in the query,
        /// in any order (not necessarily consecutive). Case-insensitive.
        /// </summary>
        public Y_.Array charMatch(object query, Y_.Array results){return null;}
        /// <summary>
        /// Case-sensitive version of `charMatch()`.
        /// </summary>
        public Y_.Array charMatchCase(object query, Y_.Array results){return null;}
        /// <summary>
        /// Accent folding version of `charMatch()`.
        /// </summary>
        public Y_.Array charMatchFold(object query, Y_.Array results){return null;}
        /// <summary>
        /// Returns an array of results that contain the complete query as a phrase.
        /// Case-insensitive.
        /// </summary>
        public Y_.Array phraseMatch(object query, Y_.Array results){return null;}
        /// <summary>
        /// Case-sensitive version of `phraseMatch()`.
        /// </summary>
        public Y_.Array phraseMatchCase(object query, Y_.Array results){return null;}
        /// <summary>
        /// Accent folding version of `phraseMatch()`.
        /// </summary>
        public Y_.Array phraseMatchFold(object query, Y_.Array results){return null;}
        /// <summary>
        /// Returns an array of results that start with the complete query as a phrase.
        /// Case-insensitive.
        /// </summary>
        public Y_.Array startsWith(object query, Y_.Array results){return null;}
        /// <summary>
        /// Case-sensitive version of `startsWith()`.
        /// </summary>
        public Y_.Array startsWithCase(object query, Y_.Array results){return null;}
        /// <summary>
        /// Accent folding version of `startsWith()`.
        /// </summary>
        public Y_.Array startsWithFold(object query, Y_.Array results){return null;}
        /// <summary>
        /// Returns an array of results in which all the words of the query match either
        /// whole words or parts of words in the result. Non-word characters like
        /// whitespace and certain punctuation are ignored. Case-insensitive.
        /// This is basically a combination of `wordMatch()` (by ignoring whitespace and
        /// word order) and `phraseMatch()` (by allowing partial matching instead of
        /// requiring the entire word to match).
        /// Example use case: Trying to find personal names independently of name order
        /// (Western or Eastern order) and supporting immediate feedback by allowing
        /// partial occurences. So queries like "J. Doe", "Doe, John", and "J. D." would
        /// all match "John Doe".
        /// </summary>
        public Y_.Array subWordMatch(object query, Y_.Array results){return null;}
        /// <summary>
        /// Case-sensitive version of `subWordMatch()`.
        /// </summary>
        public Y_.Array subWordMatchCase(object query, Y_.Array results){return null;}
        /// <summary>
        /// Accent folding version of `subWordMatch()`.
        /// </summary>
        public Y_.Array subWordMatchFold(object query, Y_.Array results){return null;}
        /// <summary>
        /// Returns an array of results that contain all of the words in the query, in
        /// any order. Non-word characters like whitespace and certain punctuation are
        /// ignored. Case-insensitive.
        /// </summary>
        public Y_.Array wordMatch(object query, Y_.Array results){return null;}
        /// <summary>
        /// Case-sensitive version of `wordMatch()`.
        /// </summary>
        public Y_.Array wordMatchCase(object query, Y_.Array results){return null;}
        /// <summary>
        /// Accent folding version of `wordMatch()`.
        /// </summary>
        public Y_.Array wordMatchFold(object query, Y_.Array results){return null;}
    }
}
