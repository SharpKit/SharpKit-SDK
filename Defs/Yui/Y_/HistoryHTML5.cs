//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// <p>
    /// Provides browser history management using the HTML5 history API.
    /// </p>
    /// <p>
    /// When calling the <code>add()</code>, <code>addValue()</code>,
    /// <code>replace()</code>, or <code>replaceValue()</code> methods on
    /// <code>HistoryHTML5</code>, the following additional options are supported:
    /// </p>
    /// <dl>
    /// <dt><strong>title (String)</strong></dt>
    /// <dd>
    /// Title to use for the new history entry. Browsers will typically display
    /// this title to the user in the detailed history window or in a dropdown
    /// menu attached to the back/forward buttons. If not specified, the title
    /// of the current document will be used.
    /// </dd>
    /// <dt><strong>url (String)</strong></dt>
    /// <dd>
    /// URL to display to the user for the new history entry. This URL will be
    /// visible in the browser's address bar and will be the bookmarked URL if
    /// the user bookmarks the page. It may be a relative path ("foo/bar"), an
    /// absolute path ("/foo/bar"), or a full URL ("http://example.com/foo/bar").
    /// If you specify a full URL, the origin <i>must</i> be the same as the
    /// origin of the current page, or an error will occur. If no URL is
    /// specified, the current URL will not be changed.
    /// </dd>
    /// </dl>
    /// </summary>
    public partial class HistoryHTML5 : HistoryBase
    {
        /// <summary>
        /// Handler for popstate events.
        /// </summary>
        protected void _onPopState(Event e){}
        /// <summary>
        /// Overrides HistoryBase's <code>_storeState()</code> and pushes or replaces
        /// a history entry using the HTML5 history API when necessary.
        /// </summary>
        protected void _storeState(object src, object newState, object options){}
    }
}
