//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// <p>
    /// A base class which objects requiring attributes and custom event support can
    /// extend. Base also handles the chaining of initializer and destructor methods across
    /// the hierarchy as part of object construction and destruction. Additionally, attributes configured
    /// through the static <a href="#property_Base.ATTRS">ATTRS</a> property for each class
    /// in the hierarchy will be initialized by Base.
    /// </p>
    /// <p>
    /// The static <a href="#property_Base.NAME">NAME</a> property of each class extending
    /// from Base will be used as the identifier for the class, and is used by Base to prefix
    /// all events fired by instances of that class.
    /// </p>
    /// </summary>
    public partial class Base
    {
        /// <summary>
        /// Default destroy event handler
        /// </summary>
        protected void _defDestroyFn(EventFacade e){}
        /// <summary>
        /// Default init event handler
        /// </summary>
        protected void _defInitFn(EventFacade e){}
        /// <summary>
        /// <p>
        /// Builds a custom constructor function (class) from the
        /// main function, and array of extension functions (classes)
        /// provided. The NAME field for the constructor function is
        /// defined by the first argument passed in.
        /// </p>
        /// <p>
        /// The cfg object supports the following properties
        /// </p>
        /// <dl>
        /// <dt>dynamic &#60;boolean&#62;</dt>
        /// <dd>
        /// <p>If true (default), a completely new class
        /// is created which extends the main class, and acts as the
        /// host on which the extension classes are augmented.</p>
        /// <p>If false, the extensions classes are augmented directly to
        /// the main class, modifying the main class' prototype.</p>
        /// </dd>
        /// <dt>aggregates &#60;String[]&#62;</dt>
        /// <dd>An array of static property names, which will get aggregated
        /// on to the built class, in addition to the default properties build
        /// will always aggregate as defined by the main class' static _buildCfg
        /// property.
        /// </dd>
        /// </dl>
        /// </summary>
        public JsAction build(JsAction name, JsAction main, object extensions, object cfg){return null;}
        /// <summary>
        /// Creates a new class (constructor function) which extends the base class passed in as the second argument,
        /// and mixes in the array of extensions provided.
        /// Prototype properties or methods can be added to the new class, using the px argument (similar to Y.extend).
        /// Static properties or methods can be added to the new class, using the sx argument (similar to Y.extend).
        /// **NOTE FOR COMPONENT DEVELOPERS**: Both the `base` class, and `extensions` can define static a `_buildCfg`
        /// property, which acts as class creation meta-data, and drives how special static properties from the base
        /// class, or extensions should be copied, aggregated or (custom) mixed into the newly created class.
        /// The `_buildCfg` property is a hash with 3 supported properties: `statics`, `aggregates` and `custom`, e.g:
        /// // If the Base/Main class is the thing introducing the property:
        /// MyBaseClass._buildCfg = {
        /// // Static properties/methods to copy (Alias) to the built class.
        /// statics: ["CopyThisMethod", "CopyThisProperty"],
        /// // Static props to aggregate onto the built class.
        /// aggregates: ["AggregateThisProperty"],
        /// // Static properties which need custom handling (e.g. deep merge etc.)
        /// custom: {
        /// "CustomProperty" : function(property, Receiver, Supplier) {
        /// ...
        /// var triggers = Receiver.CustomProperty.triggers;
        /// Receiver.CustomProperty.triggers = triggers.concat(Supplier.CustomProperty.triggers);
        /// ...
        /// }
        /// }
        /// };
        /// MyBaseClass.CopyThisMethod = function() {...};
        /// MyBaseClass.CopyThisProperty = "foo";
        /// MyBaseClass.AggregateThisProperty = {...};
        /// MyBaseClass.CustomProperty = {
        /// triggers: [...]
        /// }
        /// // Or, if the Extension is the thing introducing the property:
        /// MyExtension._buildCfg = {
        /// statics : ...
        /// aggregates : ...
        /// custom : ...
        /// }
        /// This way, when users pass your base or extension class to `Y.Base.create` or `Y.Base.mix`, they don't need to
        /// know which properties need special handling. `Y.Base` has a buildCfg which defines `ATTRS` for custom mix handling
        /// (to protect the static config objects), and `Y.Widget` has a buildCfg which specifies `HTML_PARSER` for
        /// straight up aggregation.
        /// </summary>
        public JsAction create(JsAction name, JsAction main, object extensions, object px, object sx){return null;}
        /// <summary>
        /// <p>
        /// Destroy lifecycle method. Fires the destroy
        /// event, prior to invoking destructors for the
        /// class hierarchy.
        /// </p>
        /// <p>
        /// Subscribers to the destroy
        /// event can invoke preventDefault on the event object, to prevent destruction
        /// from proceeding.
        /// </p>
        /// </summary>
        public Y_.Base destroy(){return null;}
        /// <summary>
        /// Init lifecycle method, invoked during construction.
        /// Fires the init event prior to setting up attributes and
        /// invoking initializers for the class hierarchy.
        /// </summary>
        public Y_.Base init(object config){return null;}
        /// <summary>
        /// <p>Mixes in a list of extensions to an existing class.</p>
        /// </summary>
        public JsAction mix(JsAction main, object extensions){return null;}
        /// <summary>
        /// Alias for <a href="Plugin.Host.html#method_Plugin.Host.plug">Plugin.Host.plug</a>. See aliased
        /// method for argument and return value details.
        /// </summary>
        public void plug(){}
        /// <summary>
        /// Alias for <a href="Plugin.Host.html#method_Plugin.Host.unplug">Plugin.Host.unplug</a>. See the
        /// aliased method for argument and return value details.
        /// </summary>
        public void unplug(){}
        /// <summary>
        /// The default set of attributes which will be available for instances of this class, and
        /// their configuration. In addition to the configuration properties listed by
        /// Attribute's <a href="Attribute.html#method_addAttr">addAttr</a> method, the attribute
        /// can also be configured with a "cloneDefaultValue" property, which defines how the statically
        /// defined value field should be protected ("shallow", "deep" and false are supported values).
        /// By default if the value is an object literal or an array it will be "shallow" cloned, to
        /// protect the default value.
        /// </summary>
        public object ATTRS{get;set;}
    }
}
