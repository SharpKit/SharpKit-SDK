//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Represents a logical piece of an application's user interface, and provides a
    /// lightweight, overridable API for rendering content and handling delegated DOM
    /// events on a container element.
    /// The View class imposes little structure and provides only minimal functionality
    /// of its own: it's basically just an overridable API interface that helps you
    /// implement custom views.
    /// As of YUI 3.5.0, View allows ad-hoc attributes to be specified at instantiation
    /// time, so you don't need to subclass `Y.View` to add custom attributes. Just pass
    /// them to the constructor:
    /// var view = new Y.View({foo: 'bar'});
    /// view.get('foo'); // => "bar"
    /// </summary>
    public partial class View : Y_.Base
    {
        /// <summary>
        /// Handles `containerChange` events. Detaches event handlers from the old
        /// container (if any) and attaches them to the new container.
        /// Right now the `container` attr is initOnly so this event should only ever
        /// fire the first time the container is created, but in the future (once Y.App
        /// can handle it) we may allow runtime container changes.
        /// </summary>
        protected void _afterContainerChange(){}
        /// <summary>
        /// Removes the `container` from the DOM and purges all its event listeners.
        /// </summary>
        protected void _destroyContainer(){}
        /// <summary>
        /// Getter for the `container` attribute.
        /// </summary>
        protected Node _getContainer(object value){return null;}
        /// <summary>
        /// Attaches delegated event handlers to this view's container element. This
        /// method is called internally to subscribe to events configured in the
        /// `events` attribute when the view is initialized.
        /// You may override this method to customize the event attaching logic.
        /// </summary>
        public void attachEvents(){}
        /// <summary>
        /// Attaches delegated event handlers to this view's container element. This
        /// method is called internally to subscribe to events configured in the
        /// `events` attribute when the view is initialized.
        /// You may override this method to customize the event attaching logic.
        /// </summary>
        public void attachEvents(object events){}
        /// <summary>
        /// Creates and returns a container node for this view.
        /// By default, the container is created from the HTML template specified in the
        /// `containerTemplate` property, and is _not_ added to the DOM automatically.
        /// You may override this method to customize how the container node is created
        /// (such as by rendering it from a custom template format). Your method must
        /// return a `Y.Node` instance.
        /// </summary>
        public Node create(){return null;}
        /// <summary>
        /// Creates and returns a container node for this view.
        /// By default, the container is created from the HTML template specified in the
        /// `containerTemplate` property, and is _not_ added to the DOM automatically.
        /// You may override this method to customize how the container node is created
        /// (such as by rendering it from a custom template format). Your method must
        /// return a `Y.Node` instance.
        /// </summary>
        public Node create(object container){return null;}
        /// <summary>
        /// Destroys this View, detaching any DOM events and optionally also destroying
        /// its container node.
        /// By default, the container node will not be destroyed. Pass an _options_
        /// object with a truthy `remove` property to destroy the container as well.
        /// </summary>
        public void destroy(){}
        /// <summary>
        /// Destroys this View, detaching any DOM events and optionally also destroying
        /// its container node.
        /// By default, the container node will not be destroyed. Pass an _options_
        /// object with a truthy `remove` property to destroy the container as well.
        /// </summary>
        public void destroy(object options){}
        /// <summary>
        /// Detaches DOM events that have previously been attached to the container by
        /// `attachEvents()`.
        /// </summary>
        public void detachEvents(){}
        /// <summary>
        /// Removes this view's container element from the DOM (if it's in the DOM),
        /// but doesn't destroy it or any event listeners attached to it.
        /// </summary>
        public void remove(){}
        /// <summary>
        /// Renders this view.
        /// This method is a noop by default. Override it to provide a custom
        /// implementation that renders this view's content and appends it to the
        /// container element. Ideally your `render` method should also return `this` as
        /// the end to allow chaining, but that's up to you.
        /// Since there's no default renderer, you're free to render your view however
        /// you see fit, whether that means manipulating the DOM directly, dumping
        /// strings into `innerHTML`, or using a template language of some kind.
        /// For basic templating needs, `Y.Node.create()` and `Y.Lang.sub()` may
        /// suffice, but there are no restrictions on what tools or techniques you can
        /// use to render your view. All you need to do is append something to the
        /// container element at some point, and optionally append the container
        /// to the DOM if it's not there already.
        /// </summary>
        public void render(){}
        /// <summary>
        /// Properties that shouldn't be turned into ad-hoc attributes when passed to
        /// View's constructor.
        /// </summary>
        protected Y_.Array _NON_ATTRS_CFG{get;set;}
        /// <summary>
        /// Hash of CSS selectors mapped to events to delegate to elements matching
        /// those selectors.
        /// CSS selectors are relative to the `container` element. Events are attached
        /// to the container, and delegation is used so that subscribers are only
        /// notified of events that occur on elements inside the container that match
        /// the specified selectors. This allows the container's contents to be re-
        /// rendered as needed without losing event subscriptions.
        /// Event handlers can be specified either as functions or as strings that map
        /// to function names on this view instance or its prototype.
        /// The `this` object in event handlers will refer to this view instance. If
        /// you'd prefer `this` to be something else, use `Y.bind()` to bind a custom
        /// `this` object.
        /// </summary>
        public object events{get;set;}
    }
}
