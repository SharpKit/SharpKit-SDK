//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Create an instance of StyleSheet to encapsulate a css stylesheet.
    /// The constructor can be called using function or constructor syntax.
    /// <pre><code>var sheet = Y.StyleSheet(..);</pre></code>
    /// or
    /// <pre><code>var sheet = new Y.StyleSheet(..);</pre></code>
    /// The first parameter passed can be any of the following things:
    /// <ul>
    /// <li>The desired string name to register a new empty sheet</li>
    /// <li>The string name of an existing StyleSheet instance</li>
    /// <li>The unique guid generated for an existing StyleSheet instance</li>
    /// <li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>
    /// <li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>
    /// <li>The Y.Node instance wrapping an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>
    /// <li>A chunk of css text to create a new stylesheet from</li>
    /// </ul>
    /// <p>If a string is passed, StyleSheet will first look in its static name
    /// registry for an existing sheet, then in the DOM for an element with that id.
    /// If neither are found and the string contains the { character, it will be
    /// used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty
    /// StyleSheet is created, assigned the string value as a name, and registered
    /// statically by that name.</p>
    /// <p>The optional second parameter is a string name to register the sheet as.
    /// This param is largely useful when providing a node id/ref or chunk of css
    /// text to create a populated instance.</p>
    /// </summary>
    public partial class StyleSheet
    {
        /// <summary>
        /// Disable all the rules in the sheet.  Rules may be changed while the
        /// StyleSheet is disabled.
        /// </summary>
        public StyleSheet disable(){return null;}
        /// <summary>
        /// Enable all the rules in the sheet
        /// </summary>
        public StyleSheet enable(){return null;}
        /// <summary>
        /// Get the current cssText for a rule or the entire sheet.  If the
        /// selector param is supplied, only the cssText for that rule will be
        /// returned, if found.  If the selector string targets multiple
        /// selectors separated by commas, the cssText of the first rule only
        /// will be returned.  If no selector string, the stylesheet's full
        /// cssText will be returned.
        /// </summary>
        public object getCssText(object sel){return null;}
        /// <summary>
        /// Get the unique stamp for this StyleSheet instance
        /// </summary>
        public Y_.DataType_.Number getId(){return null;}
        /// <summary>
        /// Returns false if the StyleSheet is disabled.  Otherwise true.
        /// </summary>
        public object isEnabled(){return null;}
        /// <summary>
        /// <p>Determines if a selector string is safe to use.  Used internally
        /// in set to prevent IE from locking up when attempting to add a rule for a
        /// &quot;bad selector&quot;.</p>
        /// <p>Bad selectors are considered to be any string containing unescaped
        /// `~!@$%^&()+=|{}[];'"?< or space. Also forbidden are . or # followed by
        /// anything other than an alphanumeric.  Additionally -abc or .-abc or
        /// #_abc or '# ' all fail.  There are likely more failure cases, so
        /// please file a bug if you encounter one.</p>
        /// </summary>
        public object isValidSelector(object sel){return null;}
        /// <summary>
        /// Registers a StyleSheet instance in the static registry by the given name
        /// </summary>
        public object register(object name, StyleSheet sheet){return null;}
        /// <summary>
        /// <p>Set style properties for a provided selector string.
        /// If the selector includes commas, it will be split into individual
        /// selectors and applied accordingly.  If the selector string does not
        /// have a corresponding rule in the sheet, it will be added.</p>
        /// <p>The object properties in the second parameter must be the JavaScript
        /// names of style properties.  E.g. fontSize rather than font-size.</p>
        /// <p>The float style property will be set by any of &quot;float&quot;,
        /// &quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>
        /// </summary>
        public StyleSheet set(object sel, object css){return null;}
        /// <summary>
        /// <p>Converts an object literal of style properties and values into a string
        /// of css text.  This can then be assigned to el.style.cssText.</p>
        /// <p>The optional second parameter is a cssText string representing the
        /// starting state of the style prior to alterations.  This is most often
        /// extracted from the eventual target's current el.style.cssText.</p>
        /// </summary>
        public object toCssText(object css, object cssText){return null;}
        /// <summary>
        /// <p>Unset style properties for a provided selector string, removing
        /// their effect from the style cascade.</p>
        /// <p>If the selector includes commas, it will be split into individual
        /// selectors and applied accordingly.  If there are no properties
        /// remaining in the rule after unsetting, the rule is removed.</p>
        /// <p>The style property or properties in the second parameter must be the
        /// JavaScript style property names. E.g. fontSize rather than font-size.</p>
        /// <p>The float style property will be unset by any of &quot;float&quot;,
        /// &quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>
        /// </summary>
        public StyleSheet unset(object sel, object css){return null;}
    }
}
