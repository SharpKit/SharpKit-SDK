//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// A base class for Resize, providing:
    /// * Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)
    /// * Applies drag handles to an element to make it resizable
    /// * Here is the list of valid resize handles:
    /// `[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]`. You can
    /// read this list as top, top-right, right, bottom-right, bottom,
    /// bottom-left, left, top-left.
    /// * The drag handles are inserted into the element and positioned
    /// absolute. Some elements, such as a textarea or image, don't support
    /// children. To overcome that, set wrap:true in your config and the
    /// element willbe wrapped for you automatically.
    /// Quick Example:
    /// var instance = new Y.Resize({
    /// node: '#resize1',
    /// preserveRatio: true,
    /// wrap: true,
    /// maxHeight: 170,
    /// maxWidth: 400,
    /// handles: 't, tr, r, br, b, bl, l, tl'
    /// });
    /// Check the list of <a href="Resize.html#configattributes">Configuration Attributes</a> available for
    /// Resize.
    /// </summary>
    public partial class Resize : Y_.Base
    {
        /// <summary>
        /// Creates the handle element based on the handle name and initialize the
        /// DragDrop on it.
        /// </summary>
        protected void _buildHandle(object handle){}
        /// <summary>
        /// Basic resize calculations.
        /// </summary>
        protected void _calcResize(){}
        /// <summary>
        /// Helper method to update the current size value on
        /// <a href="Resize.html#property_info">info</a> to respect the
        /// min/max values and fix the top/left calculations.
        /// </summary>
        protected void _checkSize(object offset, Y_.DataType_.Number size){}
        /// <summary>
        /// Copy relevant styles of the <a href="Resize.html#attr_node">node</a>
        /// to the <a href="Resize.html#attr_wrapper">wrapper</a>.
        /// </summary>
        protected void _copyStyles(Node node, Node wrapper){}
        [JsMethod(JsonInitializers=true)]
        public Resize(){}
        /// <summary>
        /// Default resize:mouseUp handler
        /// </summary>
        protected void _defMouseUpFn(EventFacade @event){}
        /// <summary>
        /// Default resize:align handler
        /// </summary>
        protected void _defResizeAlignFn(EventFacade @event){}
        /// <summary>
        /// Default resize:end handler
        /// </summary>
        protected void _defResizeEndFn(EventFacade @event){}
        /// <summary>
        /// Default resize:resize handler
        /// </summary>
        protected void _defResizeFn(EventFacade @event){}
        /// <summary>
        /// Default resize:start handler
        /// </summary>
        protected void _defResizeStartFn(EventFacade @event){}
        /// <summary>
        /// Fires the resize:mouseUp event.
        /// </summary>
        protected void _handleMouseUpEvent(EventFacade @event){}
        /// <summary>
        /// Fires the resize:align event.
        /// </summary>
        protected void _handleResizeAlignEvent(EventFacade @event){}
        /// <summary>
        /// Fires the resize:end event.
        /// </summary>
        protected void _handleResizeEndEvent(EventFacade @event){}
        /// <summary>
        /// Fires the resize:resize event.
        /// </summary>
        protected void _handleResizeEvent(EventFacade @event){}
        /// <summary>
        /// Fires the resize:start event.
        /// </summary>
        protected void _handleResizeStartEvent(EventFacade @event){}
        /// <summary>
        /// Mouseenter event handler for the handles.
        /// </summary>
        protected void _onHandleMouseEnter(EventFacade @event){}
        /// <summary>
        /// Mouseout event handler for the handles.
        /// </summary>
        protected void _onHandleMouseLeave(EventFacade @event){}
        /// <summary>
        /// Mouseenter event handler for the <a href="Resize.html#attr_wrapper">wrapper</a>.
        /// </summary>
        protected void _onWrapperMouseEnter(EventFacade @event){}
        /// <summary>
        /// Mouseleave event handler for the <a href="Resize.html#attr_wrapper">wrapper</a>.
        /// </summary>
        protected void _onWrapperMouseLeave(EventFacade @event){}
        /// <summary>
        /// Responsible for loop each handle element and append to the wrapper.
        /// </summary>
        protected void _renderHandles(){}
        /// <summary>
        /// Logic method for _defResizeFn. Allow AOP.
        /// </summary>
        protected void _resize(EventFacade @event){}
        /// <summary>
        /// Logic method for _defResizeAlignFn. Allow AOP.
        /// </summary>
        protected void _resizeAlign(EventFacade @event){}
        /// <summary>
        /// Logic method for _defResizeEndFn. Allow AOP.
        /// </summary>
        protected void _resizeEnd(EventFacade @event){}
        /// <summary>
        /// Logic method for _defResizeStartFn. Allow AOP.
        /// </summary>
        protected void _resizeStart(EventFacade @event){}
        /// <summary>
        /// Set the active state of the handles.
        /// </summary>
        protected void _setActiveHandlesUI(object val){}
        /// <summary>
        /// Handles setting the activeHandle from a node, used from startDrag (for touch) and mouseenter (for mouse).
        /// </summary>
        protected void _setHandleFromNode(Node node){}
        /// <summary>
        /// Setter for the handles attribute
        /// </summary>
        protected void _setHandles(object val){}
        /// <summary>
        /// Set the visibility of the handles.
        /// </summary>
        protected void _setHideHandlesUI(object val){}
        /// <summary>
        /// Setter for the wrap attribute
        /// </summary>
        protected void _setWrap(object val){}
        /// <summary>
        /// Sync the Resize UI with internal values from
        /// <a href="Resize.html#property_info">info</a>.
        /// </summary>
        protected void _syncUI(){}
        /// <summary>
        /// Default value for the wrapper handles node attribute
        /// </summary>
        protected void _valueHandlesWrapper(){}
        /// <summary>
        /// Default value for the wrapper attribute
        /// </summary>
        protected void _valueWrapper(){}
        /// <summary>
        /// Bind the events on the Resize UI. Lifecycle.
        /// </summary>
        protected void bindUI(){}
        /// <summary>
        /// Descructor lifecycle implementation for the Resize class. Purges events attached
        /// to the node (and all child nodes) and removes the Resize handles.
        /// </summary>
        protected void destructor(){}
        /// <summary>
        /// <p>Loop through each handle which is being used and executes a callback.</p>
        /// <p>Example:</p>
        /// <pre><code>instance.eachHandle(
        /// function(handleName, index) { ... }
        /// );</code></pre>
        /// </summary>
        public void eachHandle(JsAction fn){}
        /// <summary>
        /// Construction logic executed during Resize instantiation. Lifecycle.
        /// </summary>
        protected void initializer(){}
        /// <summary>
        /// Creates DOM (or manipulates DOM for progressive enhancement)
        /// This method is invoked by initializer(). It's chained automatically for
        /// subclasses if required.
        /// </summary>
        protected void renderer(){}
        /// <summary>
        /// Create the DOM structure for the Resize. Lifecycle.
        /// </summary>
        protected void renderUI(){}
        /// <summary>
        /// Sync the Resize UI.
        /// </summary>
        protected void syncUI(){}
        /// <summary>
        /// Static property used to define the default attribute
        /// configuration for the Resize.
        /// </summary>
        public object ATTRS{get;set;}
        /// <summary>
        /// The default minimum height of the element. Only used when
        /// ResizeConstrained is not plugged.
        /// </summary>
        public Y_.DataType_.Number defMinHeight{get;set;}
        /// <summary>
        /// The default minimum width of the element. Only used when
        /// ResizeConstrained is not plugged.
        /// </summary>
        public Y_.DataType_.Number defMinWidth{get;set;}
        /// <summary>
        /// Store DD.Delegate reference for the respective Resize instance.
        /// </summary>
        public object @delegate{get;set;}
        /// <summary>
        /// Node to wrap the resize handles.
        /// </summary>
        public Node handlesWrapper{get;set;}
        /// <summary>
        /// Stores the current values for the height, width, top and left. You are
        /// able to manipulate these values on resize in order to change the resize
        /// behavior.
        /// </summary>
        protected object info{get;set;}
        /// <summary>
        /// Stores the last values for the height, width, top and left.
        /// </summary>
        protected object lastInfo{get;set;}
        /// <summary>
        /// The selector or element to resize. Required.
        /// </summary>
        public Node node{get;set;}
        /// <summary>
        /// Stores the <a href="Resize.html#attr_node">node</a>
        /// surrounding information retrieved from
        /// <a href="Resize.html#method__getBoxSurroundingInfo">_getBoxSurroundingInfo</a>.
        /// </summary>
        public object nodeSurrounding{get;set;}
        /// <summary>
        /// Stores the original values for the height, width, top and left, stored
        /// on resize start.
        /// </summary>
        protected object originalInfo{get;set;}
        /// <summary>
        /// Stores the <a href="Resize.html#attr_wrapper">wrapper</a>
        /// surrounding information retrieved from
        /// <a href="Resize.html#method__getBoxSurroundingInfo">_getBoxSurroundingInfo</a>.
        /// </summary>
        public object wrapperSurrounding{get;set;}
    }
}
