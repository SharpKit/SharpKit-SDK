//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// <p>
    /// Attribute provides configurable attribute support along with attribute change events. It is designed to be
    /// augmented on to a host class, and provides the host with the ability to configure attributes to store and retrieve state,
    /// along with attribute change events.
    /// </p>
    /// <p>For example, attributes added to the host can be configured:</p>
    /// <ul>
    /// <li>As read only.</li>
    /// <li>As write once.</li>
    /// <li>With a setter function, which can be used to manipulate
    /// values passed to Attribute's <a href="#method_set">set</a> method, before they are stored.</li>
    /// <li>With a getter function, which can be used to manipulate stored values,
    /// before they are returned by Attribute's <a href="#method_get">get</a> method.</li>
    /// <li>With a validator function, to validate values before they are stored.</li>
    /// </ul>
    /// <p>See the <a href="#method_addAttr">addAttr</a> method, for the complete set of configuration
    /// options available for attributes.</p>
    /// <p><strong>NOTE:</strong> Most implementations will be better off extending the <a href="Base.html">Base</a> class,
    /// instead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration
    /// of attributes for derived classes, accounting for values passed into the constructor.</p>
    /// </summary>
    public partial class Attribute
    {
        /// <summary>
        /// The list of properties which can be configured for
        /// each attribute (e.g. setter, getter, writeOnce etc.).
        /// This property is used internally as a whitelist for faster
        /// Y.mix operations.
        /// </summary>
        protected Y_.Array _ATTR_CFG{get;set;}
        /// <summary>
        /// <p>The value to return from an attribute setter in order to prevent the set from going through.</p>
        /// <p>You can return this value from your setter if you wish to combine validator and setter
        /// functionality into a single setter function, which either returns the massaged value to be stored or
        /// AttributeCore.INVALID_VALUE to prevent invalid values from being stored.</p>
        /// </summary>
        public object INVALID_VALUE{get;set;}
    }
}
