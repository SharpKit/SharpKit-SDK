//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.Uploader_
{
    /// <summary>
    /// This class manages a queue of files to be uploaded to the server.
    /// </summary>
    public partial class Queue : Y_.Base
    {
        /// <summary>
        /// Add a new file to the bottom of the queue (the upload will be
        /// launched after all the other queued files are uploaded.)
        /// </summary>
        public void addToQueueBottom(object file){}
        /// <summary>
        /// Add a new file to the top of the queue (the upload will be
        /// launched as soon as the current number of uploading files
        /// drops below the maximum permissible value).
        /// </summary>
        public void addToQueueTop(object file){}
        /// <summary>
        /// Cancels a specific file's upload. If no argument is passed,
        /// all ongoing uploads are cancelled and the upload process is
        /// stopped.
        /// </summary>
        public void cancelUpload(object file){}
        /// <summary>
        /// If a particular file is stuck in an ongoing upload without
        /// any progress events, this method allows to force its reupload
        /// by cancelling its upload and immediately relaunching it.
        /// </summary>
        public void forceReupload(object file){}
        /// <summary>
        /// Construction logic executed during UploaderQueue instantiation.
        /// </summary>
        protected void initializer(){}
        /// <summary>
        /// Pauses the upload process. The ongoing file uploads
        /// will complete after this method is called, but no
        /// new ones will be launched.
        /// </summary>
        public void pauseUpload(){}
        /// <summary>
        /// Restarts a paused upload process.
        /// </summary>
        public void restartUpload(){}
        /// <summary>
        /// Starts uploading the queued up file list.
        /// </summary>
        public void startUpload(){}
        /// <summary>
        /// The total number of bytes in the queue.
        /// </summary>
        public Y_.DataType_.Number bytesTotal{get;set;}
        /// <summary>
        /// The total number of bytes that has been uploaded.
        /// </summary>
        public Y_.DataType_.Number bytesUploaded{get;set;}
        /// <summary>
        /// The queue file list. This file list should only be modified
        /// before the upload has been started; modifying it after starting
        /// the upload has no effect, and `addToQueueTop` or `addToQueueBottom` methods
        /// should be used instead.
        /// </summary>
        public Y_.DataType_.Number fileList{get;set;}
        /// <summary>
        /// Maximum number of simultaneous uploads; must be in the
        /// range between 1 and 5. The value of `2` is default. It
        /// is recommended that this value does not exceed 3.
        /// </summary>
        public Y_.DataType_.Number simUploads{get;set;}
    }
}
