//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// AxisType is an abstract class that manages the data for an axis.
    /// </summary>
    public partial class AxisType
    {
        [JsMethod(JsonInitializers=true)]
        public AxisType(){}
        /// <summary>
        /// Checks to see if data extends beyond the range of the axis. If so,
        /// that data will need to be hidden. This method is internal, temporary and subject
        /// to removal in the future.
        /// </summary>
        protected object _hasDataOverflow(){return null;}
        /// <summary>
        /// Adds an array to the key hash.
        /// </summary>
        public void addKey(object value){}
        /// <summary>
        /// Returns an array of values based on an identifier key.
        /// </summary>
        public object getDataByKey(object value){return null;}
        /// <summary>
        /// Gets the distance that the first and last ticks are offset from there respective
        /// edges.
        /// </summary>
        public Y_.DataType_.Number getEdgeOffset(Y_.DataType_.Number ct, Y_.DataType_.Number l){return null;}
        /// <summary>
        /// Returns a value based of a key value and an index.
        /// </summary>
        public Y_.DataType_.Number getKeyValueAt(object key, Y_.DataType_.Number index){return null;}
        /// <summary>
        /// Calculates and returns a value based on the number of labels and the index of
        /// the current label.
        /// </summary>
        public object getLabelByIndex(Y_.DataType_.Number i, Y_.DataType_.Number l){return null;}
        /// <summary>
        /// Returns the distance between major units on an axis.
        /// </summary>
        public Y_.DataType_.Number getMajorUnitDistance(Y_.DataType_.Number len, Y_.DataType_.Number uiLen, object majorUnit){return null;}
        /// <summary>
        /// Returns a string corresponding to the last label on an
        /// axis.
        /// </summary>
        public object getMaximumValue(){return null;}
        /// <summary>
        /// Returns a string corresponding to the first label on an
        /// axis.
        /// </summary>
        public object getMinimumValue(){return null;}
        /// <summary>
        /// Returns the total number of majorUnits that will appear on an axis.
        /// </summary>
        public Y_.DataType_.Number getTotalMajorUnits(){return null;}
        /// <summary>
        /// Removes an array from the key hash.
        /// </summary>
        public void removeKey(object value){}
        /// <summary>
        /// Array of axis data
        /// </summary>
        public Y_.Array data{get;set;}
        /// <summary>
        /// The maximum value contained in the `data` array. Used for
        /// `maximum` when `autoMax` is true.
        /// </summary>
        public Y_.DataType_.Number dataMaximum{get;set;}
        /// <summary>
        /// The minimum value contained in the `data` array. Used for
        /// `minimum` when `autoMin` is true.
        /// </summary>
        public Y_.DataType_.Number dataMinimum{get;set;}
        /// <summary>
        /// Instance of `ChartDataProvider` that the class uses
        /// to build its own data.
        /// </summary>
        public Y_.Array dataProvider{get;set;}
        /// <summary>
        /// Array containing all the keys in the axis.
        /// </summary>
        public Y_.Array keyCollection{get;set;}
        /// <summary>
        /// Hash of array identifed by a string value.
        /// </summary>
        public object keys{get;set;}
        /// <summary>
        /// The maximum value that will appear on an axis.
        /// </summary>
        public Y_.DataType_.Number maximum{get;set;}
        /// <summary>
        /// The minimum value that will appear on an axis.
        /// </summary>
        public Y_.DataType_.Number minimum{get;set;}
    }
}
