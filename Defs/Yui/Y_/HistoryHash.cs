//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides browser history management backed by
    /// <code>window.location.hash</code>, as well as convenience methods for working
    /// with the location hash and a synthetic <code>hashchange</code> event that
    /// normalizes differences across browsers.
    /// </summary>
    public partial class HistoryHash
    {
        /// <summary>
        /// Handler for hashchange events.
        /// </summary>
        protected void _afterHashChange(Event e){}
        /// <summary>
        /// Updates the history iframe with the specified hash.
        /// </summary>
        protected void _updateIframe(object hash, object replace){}
        /// <summary>
        /// Creates a location hash string from the specified object of key/value
        /// pairs.
        /// </summary>
        public object createHash(object @params){return null;}
        /// <summary>
        /// Wrapper around <code>decodeURIComponent()</code> that also converts +
        /// chars into spaces.
        /// </summary>
        public object decode(object @string){return null;}
        /// <summary>
        /// Wrapper around <code>encodeURIComponent()</code> that converts spaces to
        /// + chars.
        /// </summary>
        public object encode(object @string){return null;}
        /// <summary>
        /// Gets the raw (not decoded) current location hash, minus the preceding '#'
        /// character and the hashPrefix (if one is set).
        /// </summary>
        public object getHash(){return null;}
        /// <summary>
        /// Gets the raw (not decoded) current location hash from the IE iframe,
        /// minus the preceding '#' character and the hashPrefix (if one is set).
        /// </summary>
        public object getIframeHash(){return null;}
        /// <summary>
        /// Gets the current bookmarkable URL.
        /// </summary>
        public object getUrl(){return null;}
        /// <summary>
        /// Parses a location hash string into an object of key/value parameter
        /// pairs. If <i>hash</i> is not specified, the current location hash will
        /// be used.
        /// </summary>
        public object parseHash(object hash){return null;}
        /// <summary>
        /// Replaces the browser's current location hash with the specified hash
        /// and removes all forward navigation states, without creating a new browser
        /// history entry. Automatically prepends the <code>hashPrefix</code> if one
        /// is set.
        /// </summary>
        public void replaceHash(object hash){}
        /// <summary>
        /// Sets the browser's location hash to the specified string. Automatically
        /// prepends the <code>hashPrefix</code> if one is set.
        /// </summary>
        public void setHash(object hash){}
    }
}
