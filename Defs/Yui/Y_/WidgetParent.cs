//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Widget extension providing functionality enabling a Widget to be a
    /// parent of another Widget.
    /// <p>In addition to the set of attributes supported by WidgetParent, the constructor
    /// configuration object can also contain a <code>children</code> which can be used
    /// to add child widgets to the parent during construction. The <code>children</code>
    /// property is an array of either child widget instances or child widget configuration
    /// objects, and is sugar for the <a href="#method_add">add</a> method. See the
    /// <a href="#method_add">add</a> for details on the structure of the child widget
    /// configuration object.
    /// </summary>
    public partial class WidgetParent
    {
        /// <summary>
        /// Adds a Widget as a child.  If the specified Widget already
        /// has a parent it will be removed from its current parent before
        /// being added as a child.
        /// </summary>
        protected Widget _add(object child, Y_.Array child_, Y_.DataType_.Number index){return null;}
        /// <summary>
        /// Attribute change listener for the <code>activeDescendant</code>
        /// attribute, responsible for setting the value of the
        /// parent's <code>activeDescendant</code> attribute.
        /// </summary>
        protected void _afterActiveDescendantChange(EventFacade @event){}
        /// <summary>
        /// Destroy event listener for each child Widget, responsible for removing
        /// the destroyed child Widget from the parent's internal array of children
        /// (_items property).
        /// </summary>
        protected void _afterDestroyChild(EventFacade @event){}
        /// <summary>
        /// Attribute change listener for the <code>selected</code>
        /// attribute, responsible for syncing the selected state of all children to
        /// match that of their parent Widget.
        /// </summary>
        protected void _afterParentSelectedChange(EventFacade @event){}
        /// <summary>
        /// Attribute change listener for the <code>selection</code>
        /// attribute, responsible for setting the value of the
        /// parent's <code>selected</code> attribute.
        /// </summary>
        protected void _afterSelectionChange(EventFacade @event){}
        /// <summary>
        /// Sets up DOM and CustomEvent listeners for the parent widget.
        /// <p>
        /// This method in invoked after bindUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _bindUIParent(){}
        /// <summary>
        /// Creates an instance of a child Widget using the specified configuration.
        /// By default Widget instances will be created of the type specified
        /// by the <code>defaultChildType</code> attribute.  Types can be explicitly
        /// defined via the <code>childType</code> property of the configuration object
        /// literal. The use of the <code>type</code> property has been deprecated, but
        /// will still be used as a fallback, if <code>childType</code> is not defined,
        /// for backwards compatibility.
        /// </summary>
        protected void _createChild(object config){}
        [JsMethod(JsonInitializers=true)]
        public WidgetParent(){}
        /// <summary>
        /// Default addChild handler
        /// </summary>
        protected void _defAddChildFn(EventFacade @event, Widget child, Y_.DataType_.Number index){}
        /// <summary>
        /// Default removeChild handler
        /// </summary>
        protected void _defRemoveChildFn(EventFacade @event, Widget child, Y_.DataType_.Number index){}
        /// <summary>
        /// Destroys all child Widgets for the parent.
        /// <p>
        /// This method is invoked before the destructor is invoked for the Widget
        /// class using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _destroyChildren(){}
        /// <summary>
        /// Renders all child Widgets for the parent.
        /// <p>
        /// This method in invoked after renderUI is invoked for the Widget class
        /// using YUI's aop infrastructure.
        /// </p>
        /// </summary>
        protected void _renderChildren(){}
        /// <summary>
        /// Default setter for <code>selection</code> attribute changes.
        /// </summary>
        protected Widget _setSelection(object child){return null;}
        /// <summary>
        /// Updates the UI in response to a child being added.
        /// </summary>
        protected void _uiAddChild(Widget child, object parentNode){}
        /// <summary>
        /// Updates the UI in response to a child being removed.
        /// </summary>
        protected void _uiRemoveChild(Widget child){}
        /// <summary>
        /// Attribute change listener for the <code>focused</code>
        /// attribute of child Widgets, responsible for setting the value of the
        /// parent's <code>activeDescendant</code> attribute.
        /// </summary>
        protected void _updateActiveDescendant(EventFacade @event){}
        /// <summary>
        /// Attribute change listener for the <code>selected</code>
        /// attribute of child Widgets, responsible for setting the value of the
        /// parent's <code>selection</code> attribute.
        /// </summary>
        protected void _updateSelection(EventFacade @event){}
        /// <summary>
        /// Adds a Widget as a child.  If the specified Widget already
        /// has a parent it will be removed from its current parent before
        /// being added as a child.
        /// </summary>
        public ArrayList add(object child, Y_.Array child_, Y_.DataType_.Number index){return null;}
        /// <summary>
        /// Deselects all children.
        /// </summary>
        public void deselectAll(){}
        /// <summary>
        /// The destructor implementation for Parent widgets. Destroys all children.
        /// </summary>
        public void destructor(){}
        /// <summary>
        /// Removes the Widget from its parent.  Optionally, can remove
        /// a child by specifying its index.
        /// </summary>
        public Widget remove(Y_.DataType_.Number index){return null;}
        /// <summary>
        /// Removes all of the children from the Widget.
        /// </summary>
        public ArrayList removeAll(){return null;}
        /// <summary>
        /// Selects all children.
        /// </summary>
        public void selectAll(){}
        /// <summary>
        /// Selects the child at the given index (zero-based).
        /// </summary>
        public void selectChild(Y_.DataType_.Number i){}
        /// <summary>
        /// <p>By default WidgetParent will render it's children to the parent's content box.</p>
        /// <p>If the children need to be rendered somewhere else, the _childrenContainer property
        /// can be set to the Node which the children should be rendered to. This property should be
        /// set before the _renderChildren method is invoked, ideally in your renderUI method,
        /// as soon as you create the element to be rendered to.</p>
        /// </summary>
        protected Node _childrenContainer{get;set;}
        /// <summary>
        /// Returns the Widget's currently focused descendant Widget.
        /// </summary>
        public Widget activeDescendant{get;private set;}
    }
}
