//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Profiles functions in JavaScript.
    /// </summary>
    public partial class Profiler
    {
        /// <summary>
        /// Removes all report data from the profiler.
        /// </summary>
        public object clear(object name){return null;}
        /// <summary>
        /// Returns the average amount of time (in milliseconds) that the function
        /// with the given name takes to execute.
        /// </summary>
        public object getAverage(object name){return null;}
        /// <summary>
        /// Returns the number of times that the given function has been called.
        /// </summary>
        public object getCallCount(object name){return null;}
        /// <summary>
        /// Returns an object containing profiling data for all of the functions
        /// that were profiled. The object has an entry for each function and
        /// returns all information (min, max, average, calls, etc.) for each
        /// function.
        /// </summary>
        public object getFullReport(){return null;}
        /// <summary>
        /// Returns an object containing profiling data for a single function.
        /// The object has an entry for min, max, avg, calls, and points).
        /// </summary>
        public object getFunctionReport(){return null;}
        /// <summary>
        /// Returns the maximum amount of time (in milliseconds) that the function
        /// with the given name takes to execute.
        /// </summary>
        public object getMax(object name){return null;}
        /// <summary>
        /// Returns the minimum amount of time (in milliseconds) that the function
        /// with the given name takes to execute.
        /// </summary>
        public object getMin(object name){return null;}
        /// <summary>
        /// Returns the uninstrumented version of a function/object.
        /// </summary>
        public JsAction getOriginal(object name){return null;}
        /// <summary>
        /// Returns an object containing profiling data for a single function.
        /// The object has an entry for min, max, avg, calls, and points).
        /// </summary>
        public object getReport(){return null;}
        /// <summary>
        /// Instruments a method to have profiling calls.
        /// </summary>
        public JsAction instrument(object name, JsAction method){return null;}
        /// <summary>
        /// Pauses profiling information for a given name.
        /// </summary>
        public object pause(object name){return null;}
        /// <summary>
        /// Sets up a constructor for profiling, including all properties and methods on the prototype.
        /// </summary>
        public object registerConstructor(object name, object owner){return null;}
        /// <summary>
        /// Sets up a function for profiling. It essentially overwrites the function with one
        /// that has instrumentation data. This method also creates an entry for the function
        /// in the profile report. The original function is stored on the container object.
        /// </summary>
        public object registerFunction(object name, object owner, object registerPrototype){return null;}
        /// <summary>
        /// Sets up an object for profiling. It takes the object and looks for functions.
        /// When a function is found, registerMethod() is called on it. If set to recrusive
        /// mode, it will also setup objects found inside of this object for profiling,
        /// using the same methodology.
        /// </summary>
        public object registerObject(object name, object owner, object recurse){return null;}
        /// <summary>
        /// Start profiling information for a given name. The name cannot be the name
        /// of a registered function or object. This is used to start timing for a
        /// particular block of code rather than instrumenting the entire function.
        /// </summary>
        public object start(object name){return null;}
        /// <summary>
        /// Stops profiling information for a given name.
        /// </summary>
        public object stop(object name){return null;}
        /// <summary>
        /// Removes a constructor function from profiling. Reverses the registerConstructor() method.
        /// </summary>
        public object unregisterFunction(object name){return null;}
        /// <summary>
        /// Unregisters an object for profiling. It takes the object and looks for functions.
        /// When a function is found, unregisterMethod() is called on it. If set to recrusive
        /// mode, it will also unregister objects found inside of this object,
        /// using the same methodology.
        /// </summary>
        public object unregisterObject(object name, object recurse){return null;}
    }
}
