//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// Provides DOM helper methods.
    /// </summary>
    public partial class DOM
    {
        /// <summary>
        /// Adds a class name to a given DOM element.
        /// </summary>
        public void addClass(object element, object className){}
        /// <summary>
        /// Inserts content in a node at the given location
        /// </summary>
        public void addHTML(object node, object content, object where){}
        /// <summary>
        /// Returns the HTMLElement with the given ID (Wrapper for document.getElementById).
        /// </summary>
        public object byId(object id, object doc){return null;}
        /// <summary>
        /// Determines whether or not one HTMLElement is or contains another HTMLElement.
        /// </summary>
        public object contains(object element, object needle){return null;}
        /// <summary>
        /// Creates a new dom node using the provided markup string.
        /// </summary>
        public object create(object html, object doc){return null;}
        /// <summary>
        /// Document height
        /// </summary>
        public Y_.DataType_.Number docHeight(){return null;}
        /// <summary>
        /// Amount page has been scroll horizontally
        /// </summary>
        public Y_.DataType_.Number docScrollX(){return null;}
        /// <summary>
        /// Amount page has been scroll vertically
        /// </summary>
        public Y_.DataType_.Number docScrollY(){return null;}
        /// <summary>
        /// Document width
        /// </summary>
        public Y_.DataType_.Number docWidth(){return null;}
        /// <summary>
        /// Searches the element by the given axis for the first matching element.
        /// </summary>
        public object elementByAxis(object element, object axis, JsAction fn, object all){return null;}
        /// <summary>
        /// Provides a normalized attribute interface.
        /// </summary>
        public object getAttribute(object el, object attr){return null;}
        /// <summary>
        /// Returns the computed style for the given node.
        /// </summary>
        public object getComputedStyle(object An, object att){return null;}
        /// <summary>
        /// Gets the width of vertical scrollbars on overflowed containers in the body
        /// content.
        /// </summary>
        public Y_.DataType_.Number getScrollbarWidth(){return null;}
        /// <summary>
        /// Returns the current style value for the given property.
        /// </summary>
        public void getStyle(object An, object att){}
        /// <summary>
        /// Returns the text content of the HTMLElement.
        /// </summary>
        public object getText(object element){return null;}
        /// <summary>
        /// Gets the current X position of an element based on page coordinates.
        /// Element must be part of the DOM tree to have page coordinates
        /// (display:none or elements not appended return false).
        /// </summary>
        public Y_.DataType_.Number getX(object element){return null;}
        /// <summary>
        /// Gets the current position of an element based on page coordinates.
        /// Element must be part of the DOM tree to have page coordinates
        /// (display:none or elements not appended return false).
        /// </summary>
        public Y_.Array getXY(object element){return null;}
        /// <summary>
        /// Gets the current Y position of an element based on page coordinates.
        /// Element must be part of the DOM tree to have page coordinates
        /// (display:none or elements not appended return false).
        /// </summary>
        public Y_.DataType_.Number getY(object element){return null;}
        /// <summary>
        /// Determines whether a DOM element has the given className.
        /// </summary>
        public object hasClass(object element, object className){return null;}
        /// <summary>
        /// Determines whether or not the HTMLElement is part of the document.
        /// </summary>
        public object inDoc(object element, object doc){return null;}
        /// <summary>
        /// Check if any part of this node is in the passed region
        /// </summary>
        public object inRegion(object node, object node2, object all, object altRegion){return null;}
        /// <summary>
        /// Find the intersect information for the passed nodes.
        /// </summary>
        public object intersect(object element, object element2, object altRegion){return null;}
        /// <summary>
        /// Check if any part of this element is in the viewport
        /// </summary>
        public object inViewportRegion(object element, object all, object altRegion){return null;}
        /// <summary>
        /// Returns an Object literal containing the following about this element: (top, right, bottom, left)
        /// </summary>
        public object region(object element){return null;}
        /// <summary>
        /// Removes a class name from a given element.
        /// </summary>
        public void removeClass(object element, object className){}
        /// <summary>
        /// Replace a class with another class for a given element.
        /// If no oldClassName is present, the newClassName is simply added.
        /// </summary>
        public void replaceClass(object element, object oldClassName, object newClassName){}
        /// <summary>
        /// Provides a normalized attribute interface.
        /// </summary>
        public void setAttribute(object el, object attr, object val){}
        /// <summary>
        /// Sets a style property for a given element.
        /// </summary>
        public void setStyle(object An, object att, object val){}
        /// <summary>
        /// Sets multiple style properties.
        /// </summary>
        public void setStyles(object node, object hash){}
        /// <summary>
        /// Sets the text content of the HTMLElement.
        /// </summary>
        public void setText(object element, object content){}
        /// <summary>
        /// Set the X position of an html element in page coordinates, regardless of how the element is positioned.
        /// The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        public void setX(object element, Y_.DataType_.Number x){}
        /// <summary>
        /// Set the position of an html element in page coordinates.
        /// The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        public void setXY(object element, Y_.Array xy, object noRetry){}
        /// <summary>
        /// Set the Y position of an html element in page coordinates, regardless of how the element is positioned.
        /// The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        public void setY(object element, Y_.DataType_.Number y){}
        /// <summary>
        /// Swap the xy position with another node
        /// </summary>
        public Node swapXY(Node node, Node otherNode){return null;}
        /// <summary>
        /// If the className exists on the node it is removed, if it doesn't exist it is added.
        /// </summary>
        public void toggleClass(object element, object className, object addClass){}
        /// <summary>
        /// Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)
        /// </summary>
        public object viewportRegion(){return null;}
        /// <summary>
        /// Returns the inner height of the viewport (exludes scrollbar).
        /// </summary>
        public Y_.DataType_.Number winHeight(){return null;}
        /// <summary>
        /// Returns the inner width of the viewport (exludes scrollbar).
        /// </summary>
        public Y_.DataType_.Number winWidth(){return null;}
    }
}
