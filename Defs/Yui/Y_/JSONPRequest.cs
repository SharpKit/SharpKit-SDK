//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_
{
    /// <summary>
    /// <p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience
    /// method Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>
    /// <p>Both the constructor as well as the convenience function take two
    /// parameters: a url string and a callback.</p>
    /// <p>The url provided must include the placeholder string
    /// &quot;{callback}&quot; which will be replaced by a dynamically
    /// generated routing function to pass the data to your callback function.
    /// An example url might look like
    /// &quot;http://example.com/service?callback={callback}&quot;.</p>
    /// <p>The second parameter can be a callback function that accepts the JSON
    /// payload as its argument, or a configuration object supporting the keys:</p>
    /// <ul>
    /// <li>on - map of callback subscribers
    /// <ul>
    /// <li>success - function handler for successful transmission</li>
    /// <li>failure - function handler for failed transmission</li>
    /// <li>timeout - function handler for transactions that timeout</li>
    /// </ul>
    /// </li>
    /// <li>format  - override function for inserting the proxy name in the url</li>
    /// <li>timeout - the number of milliseconds to wait before giving up</li>
    /// <li>context - becomes <code>this</code> in the callbacks</li>
    /// <li>args    - array of subsequent parameters to pass to the callbacks</li>
    /// <li>allowCache - use the same proxy name for all requests? (boolean)</li>
    /// </ul>
    /// </summary>
    public partial class JSONPRequest
    {
        /// <summary>
        /// <p>Parses the url for a callback named explicitly in the string.
        /// Override this if the target JSONP service uses a different query
        /// parameter or url format.</p>
        /// <p>If the callback is declared inline, the corresponding function will
        /// be returned.  Otherwise null.</p>
        /// </summary>
        protected JsAction _defaultCallback(object url){return null;}
        /// <summary>
        /// Override this method to provide logic to default the success callback if
        /// it is not provided at construction.  This is overridden by jsonp-url to
        /// parse the callback from the url string.
        /// </summary>
        public JsAction _defaultCallback(object url, object config){return null;}
        /// <summary>
        /// URL formatter that looks for callback= in the url and appends it
        /// if not present.  The supplied proxy name will be assigned to the query
        /// param.  Override this method by passing a function as the
        /// &quot;format&quot; property in the config object to the constructor.
        /// </summary>
        protected object _format(object url, object proxy){return null;}
        /// <summary>
        /// Default url formatter.  Looks for callback= in the url and appends it
        /// if not present.  The supplied proxy name will be assigned to the query
        /// param.  Override this method by passing a function as the
        /// &quot;format&quot; property in the config object to the constructor.
        /// </summary>
        protected object _format(object url, object proxy, object args){return null;}
        /// <summary>
        /// Set up the success and failure handlers and the regex pattern used
        /// to insert the temporary callback name in the url.
        /// </summary>
        protected void _init(object url, object callback){}
        /// <summary>
        /// Issues the JSONP request.
        /// </summary>
        public void send(object args){}
    }
}
