//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.plugin_
{
    /// <summary>
    /// The NodeFocusManager class is a plugin for a Node instance.  The class is used
    /// via the <a href="Node.html#method_plug"><code>plug</code></a> method of Node
    /// and should not be instantiated directly.
    /// </summary>
    public partial class NodeFocusManager
    {
        /// <summary>
        /// afterChange event handler for the
        /// "activeDescendant" attribute.
        /// </summary>
        protected void _afterActiveDescendantChange(object @event){}
        /// <summary>
        /// Attaches the "key" event handlers used to support the "keys"
        /// attribute.
        /// </summary>
        protected void _attachKeyHandler(){}
        [JsMethod(JsonInitializers=true)]
        public NodeFocusManager(){}
        /// <summary>
        /// Detaches all event handlers used by the Focus Manager.
        /// </summary>
        protected void _detachEventHandlers(){}
        /// <summary>
        /// Detaches the "key" event handlers used to support the "keys"
        /// attribute.
        /// </summary>
        protected void _detachKeyHandler(){}
        /// <summary>
        /// Fires the click event if the enter key is pressed while
        /// focused on an HTML element that is not natively clickable.
        /// </summary>
        protected void _fireClick(){}
        /// <summary>
        /// Keydown event handler that moves focus to the next
        /// enabled descendant.
        /// </summary>
        protected void _focusNext(object @event, Y_.DataType_.Number activeDescendant){}
        /// <summary>
        /// Keydown event handler that moves focus to the previous
        /// enabled descendant.
        /// </summary>
        protected void _focusPrevious(object @event, Y_.DataType_.Number activeDescendant){}
        /// <summary>
        /// Sets the <code>tabIndex</code> attribute of all of the
        /// descendants to -1, except the active descendant, whose
        /// <code>tabIndex</code> attribute is set to 0.
        /// </summary>
        protected void _initDescendants(){}
        /// <summary>
        /// Determines if the specified Node instance is a descendant
        /// managed by the Focus Manager.
        /// </summary>
        protected object _isDescendant(Node node){return null;}
        /// <summary>
        /// "focus" event handler for the owner document of the
        /// Focus Manager's Node.
        /// </summary>
        protected void _onDocFocus(object @event){}
        /// <summary>
        /// "mousedown" event handler for the owner document of the
        /// Focus Manager's Node.
        /// </summary>
        protected void _onDocMouseDown(object @event){}
        /// <summary>
        /// Prevents the viewport from scolling when the user presses
        /// the up, down, left, or right key.
        /// </summary>
        protected void _preventScroll(){}
        /// <summary>
        /// Removes the class name representing focus (as specified by
        /// the "focusClass" attribute) from the Node instance to which it is
        /// currently applied.
        /// </summary>
        protected void _removeFocusClass(){}
        /// <summary>
        /// Blurs the current active descendant and sets the
        /// <code>focused</code> attribute to false.
        /// </summary>
        public void blur(){}
        /// <summary>
        /// Focuses the active descendant and sets the
        /// <code>focused</code> attribute to true.
        /// </summary>
        public void focus(Y_.DataType_.Number index, Node index_){}
        /// <summary>
        /// Refreshes the Focus Manager's descendants by re-executing the
        /// CSS selector query specified by the <code>descendants</code> attribute.
        /// </summary>
        public void refresh(){}
        /// <summary>
        /// Enables the Focus Manager.
        /// </summary>
        public void start(){}
        /// <summary>
        /// Disables the Focus Manager by detaching all event handlers.
        /// </summary>
        public void stop(){}
        /// <summary>
        /// <p>Node, or index of the Node, representing the descendant that is either
        /// focused or is focusable (<code>tabIndex</code> attribute is set to 0).
        /// The value cannot represent a disabled descendant Node.  Use a value of -1
        /// to remove all descendant Nodes from the default tab flow.
        /// If no value is specified, the active descendant will be inferred using
        /// the following criteria:</p>
        /// <ol>
        /// <li>Examining the <code>tabIndex</code> attribute of each descendant and
        /// using the first descendant whose <code>tabIndex</code> attribute is set
        /// to 0</li>
        /// <li>If no default can be inferred then the value is set to either 0 or
        /// the index of the first enabled descendant.</li>
        /// </ol>
        /// </summary>
        public Y_.DataType_.Number activeDescendant{get;set;}
        /// <summary>
        /// Object literal representing the keys to be used to navigate between the
        /// next/previous descendant.  The format for the attribute's value is
        /// <code>{ next: "down:40", previous: "down:38" }</code>.  The value for the
        /// "next" and "previous" properties are used to attach
        /// <a href="event/#keylistener"><code>key</code></a> event listeners. See
        /// the <a href="event/#keylistener">Using the key Event</a> section of
        /// the Event documentation for more information on "key" event listeners.
        /// </summary>
        public object keys{get;set;}
    }
}
