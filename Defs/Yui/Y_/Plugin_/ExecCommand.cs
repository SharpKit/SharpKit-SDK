//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.Plugin_
{
    /// <summary>
    /// Plugin for the frame module to handle execCommands for Editor
    /// </summary>
    public partial class ExecCommand : Y_.Base
    {
        /// <summary>
        /// Execute a command on the frame's document.
        /// </summary>
        public object command(object action, object value){return null;}
        /// <summary>
        /// Add a class to all of the elements in the selection
        /// </summary>
        public NodeList COMMANDS_addclass(object cmd, object cls){return null;}
        /// <summary>
        /// Adds a background color to the current selection, or creates a new element and applies it
        /// </summary>
        public NodeList COMMANDS_backcolor(object cmd, object val){return null;}
        /// <summary>
        /// Adds a font name to the current selection, or creates a new element and applies it
        /// </summary>
        public NodeList COMMANDS_fontname2(object cmd, object val){return null;}
        /// <summary>
        /// Adds a fontsize to the current selection, or creates a new element and applies it
        /// </summary>
        public NodeList COMMANDS_fontsize2(object cmd, object val){return null;}
        /// <summary>
        /// Adds a forecolor to the current selection, or creates a new element and applies it
        /// </summary>
        public NodeList COMMANDS_forecolor(object cmd, object val){return null;}
        /// <summary>
        /// Sugar method, calles backcolor
        /// </summary>
        public NodeList COMMANDS_hilitecolor(object cmd, object val){return null;}
        /// <summary>
        /// Inserts the provided HTML at the cursor, and focuses the cursor afterwards.
        /// </summary>
        public Node COMMANDS_insertandfocus(object cmd, object html){return null;}
        /// <summary>
        /// Inserts a BR at the current cursor position
        /// </summary>
        public void COMMANDS_insertbr(object cmd){}
        /// <summary>
        /// Inserts the provided HTML at the cursor, should be a single element.
        /// </summary>
        public Node COMMANDS_inserthtml(object cmd, object html){return null;}
        /// <summary>
        /// Inserts an image at the cursor position
        /// </summary>
        public Node COMMANDS_insertimage(object cmd, object img){return null;}
        /// <summary>
        /// Overload for COMMANDS.list
        /// </summary>
        public void COMMANDS_insertorderedlist(object cmd){}
        /// <summary>
        /// Overload for COMMANDS.list
        /// </summary>
        public void COMMANDS_insertunorderedlist(object cmd){}
        /// <summary>
        /// Noramlizes alignment for Webkit Browsers
        /// </summary>
        public void COMMANDS_justify(object cmd, object val){}
        /// <summary>
        /// Override method for COMMANDS.justify
        /// </summary>
        public void COMMANDS_justifycenter(){}
        /// <summary>
        /// Override method for COMMANDS.justify
        /// </summary>
        public void COMMANDS_justifyfull(){}
        /// <summary>
        /// Override method for COMMANDS.justify
        /// </summary>
        public void COMMANDS_justifyleft(){}
        /// <summary>
        /// Override method for COMMANDS.justify
        /// </summary>
        public void COMMANDS_justifyright(){}
        /// <summary>
        /// Noramlizes lists creation/destruction for IE. All others pass through to native calls
        /// </summary>
        public void COMMANDS_list(object cmd, object tag){}
        /// <summary>
        /// Remove a class from all of the elements in the selection
        /// </summary>
        public NodeList COMMANDS_removeclass(object cmd, object cls){return null;}
        /// <summary>
        /// Wraps the content with a new element of type (tag)
        /// </summary>
        public NodeList COMMANDS_wrap(object cmd, object tag){return null;}
        /// <summary>
        /// This method is meant to normalize IE's in ability to exec the proper command on elements with CSS styling.
        /// </summary>
        protected void fixIETags(object cmd, object tag, object rule){}
        /// <summary>
        /// Get's the instance of YUI bound to the parent frame
        /// </summary>
        public YUI getInstance(){return null;}
        /// <summary>
        /// bidi execCommand override for setting the text direction of a node.
        /// This property is added to the `Y.Plugin.ExecCommands.COMMANDS`
        /// collection.
        /// </summary>
        public object bidi{get;set;}
        /// <summary>
        /// Static object literal of execCommand overrides
        /// </summary>
        public object COMMANDS{get;set;}
        /// <summary>
        /// execCommand
        /// </summary>
        public object NAME{get;set;}
        /// <summary>
        /// exec
        /// </summary>
        public object NS{get;set;}
    }
}
