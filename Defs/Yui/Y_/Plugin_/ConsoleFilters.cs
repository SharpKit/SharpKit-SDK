//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.Plugin_
{
    /// <summary>
    /// <p>Provides Plugin.ConsoleFilters plugin class.</p>
    /// <p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.</p>
    /// </summary>
    public partial class ConsoleFilters
    {
        /// <summary>
        /// Trims the cache of entries to the appropriate new length.
        /// </summary>
        protected void _afterCacheLimitChange(Event e){}
        /// <summary>
        /// Triggers the Console to update if a known category filter
        /// changes value (e.g. visible => hidden).  Updates the appropriate
        /// checkbox's checked state if necessary.
        /// </summary>
        protected void _afterCategoryChange(Event e){}
        /// <summary>
        /// Flushes the cached entries after a call to the Console's clearConsole().
        /// </summary>
        protected void _afterClearConsole(){}
        /// <summary>
        /// Triggers the Console to update if a known source filter
        /// changes value (e.g. visible => hidden).  Updates the appropriate
        /// checkbox's checked state if necessary.
        /// </summary>
        protected void _afterSourceChange(Event e){}
        /// <summary>
        /// Creates a checkbox and label from the ConsoleFilters.FILTER_TEMPLATE for
        /// the provided type and name.  The checkbox and label are appended to the
        /// container node passes as the first arg.
        /// </summary>
        protected void _createCheckbox(Node container, object name){}
        [JsMethod(JsonInitializers=true)]
        public ConsoleFilters(){}
        /// <summary>
        /// Flushes the Console's print buffer of any entries that have a category
        /// or source that is currently being excluded.
        /// </summary>
        protected void _filterBuffer(){}
        /// <summary>
        /// Passes checkbox clicks on to the category attribute.
        /// </summary>
        protected void _onCategoryCheckboxClick(Event e){}
        /// <summary>
        /// Ensures a filter is set up for any new categories or sources and
        /// collects the messages in _entries.  If the message is stamped with a
        /// category or source that is currently being filtered out, the message
        /// will not pass to the Console's print buffer.
        /// </summary>
        protected void _onEntry(Event e){}
        /// <summary>
        /// Passes checkbox clicks on to the source attribute.
        /// </summary>
        protected void _onSourceCheckboxClick(Event e){}
        /// <summary>
        /// Setter method for cacheLimit attribute.  Basically a validator to ensure
        /// numeric input.
        /// </summary>
        protected Y_.DataType_.Number _setCacheLimit(Y_.DataType_.Number v){return null;}
        /// <summary>
        /// Updates the checked property of a filter checkbox of the specified type.
        /// If no checkbox is found for the input params, one is created.
        /// </summary>
        protected void _uiSetCheckbox(object type, object item, object @checked){}
        /// <summary>
        /// Validates category updates are objects and the subattribute is not too
        /// deep.
        /// </summary>
        protected object _validateCategory(object cat, object v){return null;}
        /// <summary>
        /// Validates source updates are objects and the subattribute is not too
        /// deep.
        /// </summary>
        protected object _validateSource(object cat, object v){return null;}
        /// <summary>
        /// Binds to checkbox click events and internal attribute change events to
        /// maintain the UI state.
        /// </summary>
        protected void bindUI(){}
        /// <summary>
        /// Removes the plugin UI and unwires events.
        /// </summary>
        protected void destructor(){}
        /// <summary>
        /// Hides any number of categories from the UI.  Convenience method for
        /// myConsole.filter.set('category.foo', false); set('category.bar', false);
        /// and so on.
        /// </summary>
        public void hideCategory(object cat){}
        /// <summary>
        /// Hides any number of sources from the UI.  Convenience method for
        /// myConsole.filter.set('source.foo', false); set('source.bar', false);
        /// and so on.
        /// </summary>
        public void hideSource(object src){}
        /// <summary>
        /// Initialize entries collection and attach listeners to host events and
        /// methods.
        /// </summary>
        protected void initializer(){}
        /// <summary>
        /// Repopulates the Console with entries appropriate to the current filter
        /// settings.
        /// </summary>
        public void refreshConsole(){}
        /// <summary>
        /// Adds the category and source filter sections to the Console footer.
        /// </summary>
        protected void renderUI(){}
        /// <summary>
        /// Shows any number of categories in the UI.  Convenience method for
        /// myConsole.filter.set('category.foo', true); set('category.bar', true);
        /// and so on.
        /// </summary>
        public void showCategory(object cat){}
        /// <summary>
        /// Shows any number of sources in the UI.  Convenience method for
        /// myConsole.filter.set('source.foo', true); set('source.bar', true);
        /// and so on.
        /// </summary>
        public void showSource(object src){}
        /// <summary>
        /// Updates the UI to be in accordance with the current state of the plugin.
        /// </summary>
        public void syncUI(){}
        /// <summary>
        /// The container node created to house the category filters.
        /// </summary>
        protected Node _categories{get;set;}
        /// <summary>
        /// Collection of all log messages passed through since the plugin's
        /// instantiation.  This holds all messages regardless of filter status.
        /// Used as a single source of truth for repopulating the Console body when
        /// filters are changed.
        /// </summary>
        protected Y_.Array _entries{get;set;}
        /// <summary>
        /// The container node created to house the source filters.
        /// </summary>
        protected Node _sources{get;set;}
        /// <summary>
        /// <p>Map of entry categories to their visibility status.  Update a
        /// particular category's visibility by setting the subattribute to true
        /// (visible) or false (hidden).</p>
        /// <p>For example, yconsole.filter.set('category.info', false) to hide
        /// log entries with the category/logLevel of 'info'.</p>
        /// <p>Similarly, yconsole.filter.get('category.warn') will return a
        /// boolean indicating whether that category is currently being included
        /// in the UI.</p>
        /// <p>Unlike the YUI instance configuration's logInclude and logExclude
        /// properties, filtered entries are only hidden from the UI, but
        /// can be made visible again.</p>
        /// </summary>
        public object category{get;set;}
        /// <summary>
        /// Classnames used by the templates when creating nodes.
        /// </summary>
        protected object CHROME_CLASSES{get;set;}
        /// <summary>
        /// <p>Map of entry sources to their visibility status.  Update a
        /// particular sources's visibility by setting the subattribute to true
        /// (visible) or false (hidden).</p>
        /// <p>For example, yconsole.filter.set('sources.slider', false) to hide
        /// log entries originating from Y.Slider.</p>
        /// </summary>
        public object source{get;set;}
    }
}
