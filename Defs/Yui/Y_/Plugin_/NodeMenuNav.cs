//***************************************************
//* This file was generated by tool
//* SharpKit
//***************************************************
using System;
using System.Collections.Generic;
using SharpKit.JavaScript;
namespace Y_.plugin_
{
    /// <summary>
    /// The NodeMenuNav class is a plugin for a Node instance.  The class is used via
    /// the <a href="Node.html#method_plug"><code>plug</code></a> method of Node and
    /// should not be instantiated directly.
    /// </summary>
    public partial class NodeMenuNav
    {
        /// <summary>
        /// "activeDescendantChange" event handler for menu's
        /// Focus Manager.
        /// </summary>
        protected void _afterActiveDescendantChange(object @event, NodeMenuNav menuNav){}
        /// <summary>
        /// Cancels the timer used to hide a submenu.
        /// </summary>
        protected void _cancelHideSubmenuTimer(){}
        /// <summary>
        /// Cancels the timer used to show a submenu.
        /// </summary>
        protected void _cancelShowSubmenuTimer(){}
        /// <summary>
        /// Clears the menu's active descendent.
        /// </summary>
        protected void _clearActiveItem(){}
        [JsMethod(JsonInitializers=true)]
        public NodeMenuNav(){}
        /// <summary>
        /// Focuses the specified menuitem or menu label.
        /// </summary>
        protected void _focusItem(Node item){}
        /// <summary>
        /// Returns the topmost submenu of a submenu hierarchy.
        /// </summary>
        protected Node _getTopmostSubmenu(Node menu){return null;}
        /// <summary>
        /// Hides all submenus of the specified menu.
        /// </summary>
        protected void _hideAllSubmenus(Node menu){}
        /// <summary>
        /// Hides all of the submenus of the root menu and focuses the
        /// label of the topmost submenu
        /// </summary>
        protected void _hideAndFocusLabel(){}
        /// <summary>
        /// Hides the specified menu.
        /// </summary>
        protected void _hideMenu(Node menu, object activateAndFocusLabel){}
        /// <summary>
        /// Initializes and updates the Focus Manager so that is is
        /// always managing descendants of the active menu.
        /// </summary>
        protected void _initFocusManager(){}
        /// <summary>
        /// Returns a boolean indicating if the specified menu is the
        /// root menu in the menu.
        /// </summary>
        protected object _isRoot(Node menu){return null;}
        /// <summary>
        /// "activeDescendantChange" event handler for menu's
        /// Focus Manager.
        /// </summary>
        protected void _onActiveDescendantChange(object @event, NodeMenuNav menuNav){}
        /// <summary>
        /// "focus" event handler for the owner document of the MenuNav.
        /// </summary>
        protected void _onDocFocus(object @event){}
        /// <summary>
        /// "mousedown" event handler for the owner document of
        /// the menu.
        /// </summary>
        protected void _onDocMouseDown(object @event){}
        /// <summary>
        /// "keydown" event handler for horizontal menus.
        /// </summary>
        protected void _onHorizontalMenuKeyDown(object @event){}
        /// <summary>
        /// "keydown" event handler for the menu.
        /// </summary>
        protected void _onKeyDown(object @event){}
        /// <summary>
        /// "keypress" event handler for the menu.
        /// </summary>
        protected void _onKeyPress(object @event){}
        /// <summary>
        /// "mouseout" event handler for a menuitem.
        /// </summary>
        protected void _onMenuItemMouseOut(Node menuItem, object @event){}
        /// <summary>
        /// "mouseover" event handler for a menuitem.
        /// </summary>
        protected void _onMenuItemMouseOver(Node menuItem, object @event){}
        /// <summary>
        /// "mouseout" event handler for a menu label.
        /// </summary>
        protected void _onMenuLabelMouseOut(Node menuLabel, object @event){}
        /// <summary>
        /// "mouseover" event handler for a menu label.
        /// </summary>
        protected void _onMenuLabelMouseOver(Node menuLabel, object @event){}
        /// <summary>
        /// "mouseout" event handler for a menu.
        /// </summary>
        protected void _onMenuMouseOut(Node menu, object @event){}
        /// <summary>
        /// "mouseover" event handler for a menu.
        /// </summary>
        protected void _onMenuMouseOver(Node menu, object @event){}
        /// <summary>
        /// "mousemove" event handler for the menu.
        /// </summary>
        protected void _onMouseMove(object @event){}
        /// <summary>
        /// "mouseout" event handler for the menu.
        /// </summary>
        protected void _onMouseOut(object @event){}
        /// <summary>
        /// "mouseover" event handler for the menu.
        /// </summary>
        protected void _onMouseOver(object @event){}
        /// <summary>
        /// "keydown" event handler for vertical menus.
        /// </summary>
        protected void _onVerticalMenuKeyDown(object @event){}
        /// <summary>
        /// Sets the specified menuitem or menu label as the menu's
        /// active descendent.
        /// </summary>
        protected void _setActiveItem(Node item){}
        /// <summary>
        /// Shows the specified menu.
        /// </summary>
        protected void _showMenu(Node menu){}
        /// <summary>
        /// "mousedown," "keydown," and "click" event handler for the
        /// menu used to toggle the display of a submenu.
        /// </summary>
        protected void _toggleSubmenuDisplay(object @event){}
        /// <summary>
        /// Node instance representing the menu's active descendent:
        /// the menuitem or menu label the user is currently interacting with.
        /// </summary>
        protected Node _activeItem{get;set;}
        /// <summary>
        /// Node instance representing the menu that is the parent of
        /// the menu's active descendent.
        /// </summary>
        protected Node _activeMenu{get;set;}
        /// <summary>
        /// Number representing the current x coordinate of the mouse
        /// inside the menu.
        /// </summary>
        protected Y_.DataType_.Number _currentMouseX{get;set;}
        /// <summary>
        /// Node instance representing the first item (menuitem or menu
        /// label) in the root menu of a menu.
        /// </summary>
        protected Node _firstItem{get;set;}
        /// <summary>
        /// Timer used to hide a all submenus.
        /// </summary>
        protected object _hideAllSubmenusTimer{get;set;}
        /// <summary>
        /// Timer used to hide a submenu.
        /// </summary>
        protected object _hideSubmenuTimer{get;set;}
        /// <summary>
        /// Node instance representing the root menu in the menu.
        /// </summary>
        protected Node _rootMenu{get;set;}
        /// <summary>
        /// Timer used to show a submenu.
        /// </summary>
        protected object _showSubmenuTimer{get;set;}
        /// <summary>
        /// Number indicating the time (in milliseconds) that should expire before a
        /// submenu is hidden when the user mouses out of it.
        /// </summary>
        public Y_.DataType_.Number mouseOutHideDelay{get;private set;}
        /// <summary>
        /// Number indicating the time (in milliseconds) that should expire before a
        /// submenu is hidden when the user mouses out of a menu label heading in the
        /// direction of a submenu.
        /// </summary>
        public Y_.DataType_.Number submenuHideDelay{get;private set;}
        /// <summary>
        /// Number indicating the time (in milliseconds) that should expire before a
        /// submenu is made visible when the user mouses over the menu's label.
        /// </summary>
        public Y_.DataType_.Number submenuShowDelay{get;private set;}
    }
}
