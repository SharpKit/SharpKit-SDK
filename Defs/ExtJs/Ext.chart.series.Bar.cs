//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.chart.series
{
    #region Bar
    /// <inheritdocs />
    /// <summary>
    /// <p>Creates a Bar Chart. A Bar Chart is a useful visualization technique to display quantitative information for
    /// different categories that can show some progression (or regression) in the dataset. As with all other series, the Bar
    /// Series must be appended in the <em>series</em> Chart array configuration. See the Chart documentation for more information.
    /// A typical configuration object for the bar series could be:</p>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.JsonStore">Ext.data.JsonStore</see>', {
    /// fields: ['name', 'data'],
    /// data: [
    /// { 'name': 'metric one',   'data':10 },
    /// { 'name': 'metric two',   'data': 7 },
    /// { 'name': 'metric three', 'data': 5 },
    /// { 'name': 'metric four',  'data': 2 },
    /// { 'name': 'metric five',  'data':27 }
    /// ]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// width: 500,
    /// height: 300,
    /// animate: true,
    /// store: store,
    /// axes: [{
    /// type: 'Numeric',
    /// position: 'bottom',
    /// fields: ['data'],
    /// label: {
    /// renderer: <see cref="Ext.util.Format.numberRenderer">Ext.util.Format.numberRenderer</see>('0,0')
    /// },
    /// title: 'Sample Values',
    /// grid: true,
    /// minimum: 0
    /// }, {
    /// type: 'Category',
    /// position: 'left',
    /// fields: ['name'],
    /// title: 'Sample Metrics'
    /// }],
    /// series: [{
    /// type: 'bar',
    /// axis: 'bottom',
    /// highlight: true,
    /// tips: {
    /// trackMouse: true,
    /// width: 140,
    /// height: 28,
    /// renderer: function(storeItem, item) {
    /// this.setTitle(storeItem.get('name') + ': ' + storeItem.get('data') + ' views');
    /// }
    /// },
    /// label: {
    /// display: 'insideEnd',
    /// field: 'data',
    /// renderer: <see cref="Ext.util.Format.numberRenderer">Ext.util.Format.numberRenderer</see>('0'),
    /// orientation: 'horizontal',
    /// color: '#333',
    /// 'text-anchor': 'middle'
    /// },
    /// xField: 'name',
    /// yField: 'data'
    /// }]
    /// });
    /// </code></pre>
    /// <p>In this configuration we set <c>bar</c> as the series type, bind the values of the bar to the bottom axis and set the
    /// xField or category field to the <c>name</c> parameter of the store. We also set <c>highlight</c> to true which enables smooth
    /// animations when bars are hovered. We also set some configuration for the bar labels to be displayed inside the bar,
    /// to display the information found in the <c>data1</c> property of each element store, to render a formated text with the
    /// <c><see cref="Ext.util.Format">Ext.util.Format</see></c> we pass in, to have an <c>horizontal</c> orientation (as opposed to a vertical one) and we also set
    /// other styles like <c>color</c>, <c>text-anchor</c>, etc.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Bar : Cartesian
    {
        /// <summary>
        /// Whether to set the visualization as column chart or horizontal bar chart.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool column;
        /// <summary>
        /// The gutter space between groups of bars, as a percentage of the bar width
        /// Defaults to: <c>38.2</c>
        /// </summary>
        public JsNumber groupGutter;
        /// <summary>
        /// The gutter space between single bars, as a percentage of the bar width
        /// Defaults to: <c>38.2</c>
        /// </summary>
        public JsNumber gutter;
        /// <summary>
        /// Style properties that will override the theming series styles.
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject style;
        /// <summary>
        /// Padding between the left/right axes and the bars
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber xPadding;
        /// <summary>
        /// Padding between the top/bottom axes and the bars
        /// Defaults to: <c>10</c>
        /// </summary>
        public JsNumber yPadding;
        /// <summary>
        /// Draws the series for the current chart.
        /// </summary>
        public void drawSeries(){}
        public Bar(Ext.chart.series.BarConfig config){}
        public Bar(){}
        public Bar(params object[] args){}
    }
    #endregion
    #region BarConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BarConfig : CartesianConfig
    {
        /// <summary>
        /// Whether to set the visualization as column chart or horizontal bar chart.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool column;
        /// <summary>
        /// The gutter space between groups of bars, as a percentage of the bar width
        /// Defaults to: <c>38.2</c>
        /// </summary>
        public JsNumber groupGutter;
        /// <summary>
        /// The gutter space between single bars, as a percentage of the bar width
        /// Defaults to: <c>38.2</c>
        /// </summary>
        public JsNumber gutter;
        /// <summary>
        /// Style properties that will override the theming series styles.
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject style;
        /// <summary>
        /// Padding between the left/right axes and the bars
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber xPadding;
        /// <summary>
        /// Padding between the top/bottom axes and the bars
        /// Defaults to: <c>10</c>
        /// </summary>
        public JsNumber yPadding;
        public BarConfig(params object[] args){}
    }
    #endregion
    #region BarEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BarEvents : CartesianEvents
    {
        public BarEvents(params object[] args){}
    }
    #endregion
}
