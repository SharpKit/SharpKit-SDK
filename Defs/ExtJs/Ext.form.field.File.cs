//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region File
    /// <inheritdocs />
    /// <summary>
    /// <p>A file upload field which has custom styling and allows control over the button text and other
    /// features of <see cref="Ext.form.field.Text">text fields</see> like <see cref="Ext.form.field.TextConfig.emptyText">empty text</see>.
    /// It uses a hidden file input element behind the scenes to allow user selection of a file and to
    /// perform the actual upload during <see cref="Ext.form.Basic.submit">form submit</see>.</p>
    /// <p>Because there is no secure cross-browser way to programmatically set the value of a file input,
    /// the standard Field <c>setValue</c> method is not implemented. The <c><see cref="Ext.form.field.File.getValue">getValue</see></c> method will return
    /// a value that is browser-dependent; some have just the file name, some have a full path, some use
    /// a fake path.</p>
    /// <p><strong>IMPORTANT:</strong> File uploads are not performed using normal 'Ajax' techniques; see the description for
    /// <see cref="Ext.form.Basic.hasUpload">Ext.form.Basic.hasUpload</see> for details.</p>
    /// <h1>Example Usage</h1>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'Upload a Photo',
    /// width: 400,
    /// bodyPadding: 10,
    /// frame: true,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// items: [{
    /// xtype: 'filefield',
    /// name: 'photo',
    /// fieldLabel: 'Photo',
    /// labelWidth: 50,
    /// msgTarget: 'side',
    /// allowBlank: false,
    /// anchor: '100%',
    /// buttonText: 'Select Photo...'
    /// }],
    /// buttons: [{
    /// text: 'Upload',
    /// handler: function() {
    /// var form = this.up('form').getForm();
    /// if(form.isValid()){
    /// form.submit({
    /// url: 'photo-upload.php',
    /// waitMsg: 'Uploading your photo...',
    /// success: function(fp, o) {
    /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Success', 'Your photo "' + o.result.file + '" has been uploaded.');
    /// }
    /// });
    /// }
    /// }
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class File : Ext.form.field.Trigger
    {
        /// <summary>
        /// A standard Ext.button.Button config object.
        /// </summary>
        public JsObject buttonConfig;
        /// <summary>
        /// The number of pixels of space reserved between the button and the text field. Note that this only
        /// applies if buttonOnly = false.
        /// Defaults to: <c>3</c>
        /// </summary>
        public JsNumber buttonMargin;
        /// <summary>
        /// True to display the file upload field as a button with no visible text field. If true, all
        /// inherited Text members will still be available.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool buttonOnly;
        /// <summary>
        /// The button text to display on the upload button. Note that if you supply a value for
        /// buttonConfig, the buttonConfig.text value will be used instead if available.
        /// Defaults to: <c>&quot;Browse...&quot;</c>
        /// </summary>
        public JsString buttonText;
        /// <summary>
        /// A reference to the trigger Button component created for this upload field. Only populated after this component is
        /// rendered.
        /// </summary>
        public Ext.button.Button button{get;set;}
        /// <summary>
        /// A reference to the invisible file input element created for this upload field. Only populated after this
        /// component is rendered.
        /// </summary>
        public Ext.dom.Element fileInputEl{get;set;}
        /// <summary>
        /// Creates the file input element. It is inserted into the trigger button component, made
        /// invisible, and floated on top of the button's other content so that it will receive the
        /// button's clicks.
        /// </summary>
        private void createFileInput(){}
        /// <summary>
        /// Gets the markup to be inserted into the subTplMarkup.
        /// </summary>
        public void getTriggerMarkup(){}
        /// <summary>
        /// Event handler fired when the user selects a file.
        /// </summary>
        private void onFileChange(){}
        /// <summary>
        /// Overridden to do nothing
        /// Overrides: <see cref="Ext.form.field.Text.setValue">Ext.form.field.Text.setValue</see>
        /// </summary>
        public void setValue(){}
        public File(FileConfig config){}
        public File(){}
        public File(params object[] args){}
    }
    #endregion
    #region FileConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FileConfig : Ext.form.field.TriggerConfig
    {
        /// <summary>
        /// A standard Ext.button.Button config object.
        /// </summary>
        public JsObject buttonConfig;
        /// <summary>
        /// The number of pixels of space reserved between the button and the text field. Note that this only
        /// applies if buttonOnly = false.
        /// Defaults to: <c>3</c>
        /// </summary>
        public JsNumber buttonMargin;
        /// <summary>
        /// True to display the file upload field as a button with no visible text field. If true, all
        /// inherited Text members will still be available.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool buttonOnly;
        /// <summary>
        /// The button text to display on the upload button. Note that if you supply a value for
        /// buttonConfig, the buttonConfig.text value will be used instead if available.
        /// Defaults to: <c>&quot;Browse...&quot;</c>
        /// </summary>
        public JsString buttonText;
        public FileConfig(params object[] args){}
    }
    #endregion
    #region FileEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FileEvents : Ext.form.field.TriggerEvents
    {
        /// <summary>
        /// Fires when the underlying file input field's value has changed from the user selecting a new file from the system
        /// file selection dialog.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The file value returned by the underlying file input field</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void change(File @this, JsString value, object eOpts){}
        public FileEvents(params object[] args){}
    }
    #endregion
}
