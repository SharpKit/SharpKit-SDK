//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.dd
{
    #region StatusProxy
    /// <inheritdocs />
    /// <summary>
    /// <p>A specialized floating Component that supports a drop status icon, <see cref="Ext.Layer">Ext.Layer</see> styles
    /// and auto-repair.  This is the default drag proxy used by all Ext.dd components.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class StatusProxy : Ext.Component
    {
        /// <summary>
        /// The CSS class to apply to the status element when drop is allowed.
        /// Defaults to: <c>&quot;x-dd-drop-ok&quot;</c>
        /// </summary>
        public JsString dropAllowed;
        /// <summary>
        /// The CSS class to apply to the status element when drop is not allowed.
        /// Defaults to: <c>&quot;x-dd-drop-nodrop&quot;</c>
        /// </summary>
        public JsString dropNotAllowed;
        /// <summary>
        /// Returns the ghost element
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>el</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element getGhost(){return null;}
        /// <summary>
        /// Hides the proxy
        /// </summary>
        /// <param name="clear"><p>True to reset the status and clear the ghost contents,
        /// false to preserve them</p>
        /// </param>
        public void hide(bool clear){}
        /// <summary>
        /// Causes the proxy to return to its position of origin via an animation.
        /// Should be called after an invalid drop operation by the item being dragged.
        /// </summary>
        /// <param name="xy"><p>The XY position of the element ([x, y])</p>
        /// </param>
        /// <param name="callback"><p>The function to call after the repair is complete.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the callback function is executed.
        /// Defaults to the browser window.</p>
        /// </param>
        public void repair(JsArray<Number> xy, System.Delegate callback, object scope){}
        /// <summary>
        /// Resets the status indicator to the default dropNotAllowed value
        /// </summary>
        /// <param name="clearGhost"><p>True to also remove all content from the ghost, false to preserve it</p>
        /// </param>
        public void reset(bool clearGhost){}
        /// <summary>
        /// Updates the proxy's visual element to indicate the status of whether or not drop is allowed
        /// over the current target element.
        /// </summary>
        /// <param name="cssClass"><p>The css class for the new drop status indicator image</p>
        /// </param>
        public void setStatus(JsString cssClass){}
        /// <summary>
        /// Stops the repair animation if it's currently running
        /// </summary>
        public void stop(){}
        /// <summary>
        /// Force the Layer to sync its shadow and shim positions to the element
        /// </summary>
        public void sync(){}
        /// <summary>
        /// Updates the contents of the ghost element
        /// </summary>
        /// <param name="html"><p>The html that will replace the current innerHTML of the ghost element, or a
        /// DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first).</p>
        /// </param>
        public void update(object html){}
        public StatusProxy(StatusProxyConfig config){}
        public StatusProxy(params object[] args){}
    }
    #endregion
    #region StatusProxyConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class StatusProxyConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// The CSS class to apply to the status element when drop is allowed.
        /// Defaults to: <c>&quot;x-dd-drop-ok&quot;</c>
        /// </summary>
        public JsString dropAllowed;
        /// <summary>
        /// The CSS class to apply to the status element when drop is not allowed.
        /// Defaults to: <c>&quot;x-dd-drop-nodrop&quot;</c>
        /// </summary>
        public JsString dropNotAllowed;
        public StatusProxyConfig(params object[] args){}
    }
    #endregion
    #region StatusProxyEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class StatusProxyEvents : Ext.ComponentEvents
    {
        public StatusProxyEvents(params object[] args){}
    }
    #endregion
}
