//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region JSON
    /// <summary>
    /// <p>Modified version of <i>Douglas Crockford's JSON.js</i> that doesn't
    /// mess with the Object prototype.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class JSON
    {
        /// <summary>
        /// Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws
        /// a SyntaxError unless the safe option is set.
        /// </summary>
        /// <param name="json"><p>The JSON string</p>
        /// </param>
        /// <param name="safe"><p>True to return null, false to throw an exception if the JSON is invalid.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The resulting object</p>
        /// </div>
        /// </returns>
        public static object decode(JsString json, object safe=null){return null;}
        /// <summary>
        /// Encodes an Object, Array or other value.
        /// If the environment's native JSON encoding is not being used (<see cref="Ext.USE_NATIVE_JSON">Ext.USE_NATIVE_JSON</see> is not set,
        /// or the environment does not support it), then ExtJS's encoding will be used. This allows the developer
        /// to add a <c>toJSON</c> method to their classes which need serializing to return a valid JSON representation
        /// of the object.
        /// </summary>
        /// <param name="o"><p>The variable to encode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The JSON string</p>
        /// </div>
        /// </returns>
        public static JsString encode(object o){return null;}
        /// <summary>
        /// Encodes a Date. This returns the actual string which is inserted into the JSON string as the literal
        /// expression. The returned value includes enclosing double quotation marks.
        /// The default return format is <c>"yyyy-mm-ddThh:mm:ss"</c>.
        /// To override this:
        /// <code><see cref="Ext.JSON.encodeDate">Ext.JSON.encodeDate</see> = function(d) {
        /// return <see cref="Ext.Date.format">Ext.Date.format</see>(d, '"Y-m-d"');
        /// };
        /// </code>
        /// </summary>
        /// <param name="d"><p>The Date to encode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The string literal to use in a JSON string.</p>
        /// </div>
        /// </returns>
        public static JsString encodeDate(JsDate d){return null;}
        /// <summary>
        /// Encodes a String. This returns the actual string which is inserted into the JSON string as the literal
        /// expression. The returned value includes enclosing double quotation marks.
        /// To override this:
        /// <code><see cref="Ext.JSON.encodeString">Ext.JSON.encodeString</see> = function(s) {
        /// return 'Foo' + s;
        /// };
        /// </code>
        /// </summary>
        /// <param name="s"><p>The String to encode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The string literal to use in a JSON string.</p>
        /// </div>
        /// </returns>
        public static JsString encodeString(JsString s){return null;}
        /// <summary>
        /// The function which encode uses to encode all javascript values to their JSON representations
        /// when Ext.USE_NATIVE_JSON is false.
        /// This is made public so that it can be replaced with a custom implementation.
        /// </summary>
        /// <param name="o"><p>Any javascript value to be converted to its JSON representation</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The JSON representation of the passed value.</p>
        /// </div>
        /// </returns>
        public static JsString encodeValue(object o){return null;}
        public JSON(JSONConfig config){}
        public JSON(){}
        public JSON(params object[] args){}
    }
    #endregion
    #region JSONConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class JSONConfig
    {
        public JSONConfig(params object[] args){}
    }
    #endregion
    #region JSONEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class JSONEvents
    {
        public JSONEvents(params object[] args){}
    }
    #endregion
}
