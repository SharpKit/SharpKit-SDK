//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.proxy
{
    #region Server
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>ServerProxy is a superclass of <see cref="Ext.data.proxy.JsonP">JsonPProxy</see> and <see cref="Ext.data.proxy.Ajax">AjaxProxy</see>, and
    /// would not usually be used directly.</p>
    /// <p>ServerProxy should ideally be named HttpProxy as it is a superclass for all HTTP proxies - for Ext JS 4.x it has been
    /// called ServerProxy to enable any 3.x applications that reference the HttpProxy to continue to work (HttpProxy is now
    /// an alias of AjaxProxy).</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Server : Ext.data.proxy.Proxy
    {
        /// <summary>
        /// Specific urls to call on CRUD action methods "create", "read", "update" and "destroy". Defaults to:
        /// <code>api: {
        /// create  : undefined,
        /// read    : undefined,
        /// update  : undefined,
        /// destroy : undefined
        /// }
        /// </code>
        /// The url is built based upon the action being executed [create|read|update|destroy] using the commensurate
        /// <see cref="Ext.data.proxy.ServerConfig.api">api</see> property, or if undefined default to the configured
        /// <see cref="Ext.data.Store">Ext.data.Store</see>.<see cref="Ext.data.proxy.ServerConfig.url">url</see>.
        /// For example:
        /// <code>api: {
        /// create  : '/controller/new',
        /// read    : '/controller/load',
        /// update  : '/controller/update',
        /// destroy : '/controller/destroy_action'
        /// }
        /// </code>
        /// If the specific URL for a given CRUD action is undefined, the CRUD action request will be directed to the
        /// configured <see cref="Ext.data.proxy.ServerConfig.url">url</see>.
        /// </summary>
        public JsObject api;
        /// <summary>
        /// The name of the cache param added to the url when using noCache. Defaults to "_dc".
        /// Defaults to: <c>&quot;_dc&quot;</c>
        /// </summary>
        public JsString cacheString;
        /// <summary>
        /// The name of the direction parameter to send in a request. This is only used when simpleSortMode is set to
        /// true. Defaults to 'dir'.
        /// Defaults to: <c>&quot;dir&quot;</c>
        /// </summary>
        public JsString directionParam;
        /// <summary>
        /// Extra parameters that will be included on every request. Individual requests with params of the same name
        /// will override these params when they are in conflict.
        /// </summary>
        public JsObject extraParams;
        /// <summary>
        /// The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set this to undefined if you don't
        /// want to send a filter parameter.
        /// Defaults to: <c>&quot;filter&quot;</c>
        /// </summary>
        public JsString filterParam;
        /// <summary>
        /// The name of the direction parameter to send in a request. This is only used when simpleGroupMode is set to
        /// true. Defaults to 'groupDir'.
        /// Defaults to: <c>&quot;groupDir&quot;</c>
        /// </summary>
        public JsString groupDirectionParam;
        /// <summary>
        /// The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this to undefined if you don't
        /// want to send a group parameter.
        /// Defaults to: <c>&quot;group&quot;</c>
        /// </summary>
        public JsString groupParam;
        /// <summary>
        /// The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this to undefined if you don't
        /// want to send a limit parameter.
        /// Defaults to: <c>&quot;limit&quot;</c>
        /// </summary>
        public JsString limitParam;
        /// <summary>
        /// Disable caching by adding a unique parameter name to the request. Set to false to allow caching. Defaults to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool noCache;
        /// <summary>
        /// The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to undefined if you don't
        /// want to send a page parameter.
        /// Defaults to: <c>&quot;page&quot;</c>
        /// </summary>
        public JsString pageParam;
        /// <summary>
        /// Enabling simpleGroupMode in conjunction with remoteGroup will only send one group property and a direction when a
        /// remote group is requested. The groupDirectionParam and groupParam will be sent with the property name and either 'ASC'
        /// or 'DESC'.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool simpleGroupMode;
        /// <summary>
        /// Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a
        /// remote sort is requested. The directionParam and sortParam will be sent with the property name
        /// and either 'ASC' or 'DESC'.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool simpleSortMode;
        /// <summary>
        /// The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this to undefined if you don't
        /// want to send a sort parameter.
        /// Defaults to: <c>&quot;sort&quot;</c>
        /// </summary>
        public JsString sortParam;
        /// <summary>
        /// The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this to undefined if you don't
        /// want to send a start parameter.
        /// Defaults to: <c>&quot;start&quot;</c>
        /// </summary>
        public JsString startParam;
        /// <summary>
        /// The number of milliseconds to wait for a response. Defaults to 30000 milliseconds (30 seconds).
        /// Defaults to: <c>30000</c>
        /// </summary>
        public JsNumber timeout;
        /// <summary>
        /// The URL from which to request the data object.
        /// </summary>
        public JsString url;
        /// <summary>
        /// Optional callback function which can be used to clean up after a request has been completed.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="request"><p>The Request object</p>
        /// </param>
        /// <param name="success"><p>True if the request was successful</p>
        /// </param>
        protected virtual void afterRequest(Request request, bool success){}
        /// <summary>
        /// Encode any values being sent to the server. Can be overridden in subclasses.
        /// </summary>
        /// <param name="An"><p>array of sorters/filters.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The encoded value</p>
        /// </div>
        /// </returns>
        private object applyEncoding(object An){return null;}
        /// <summary>
        /// Creates an Request object from Operation.
        /// This gets called from doRequest methods in subclasses of Server proxy.
        /// </summary>
        /// <param name="operation"><p>The operation to execute</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Request">Ext.data.Request</see></span><div><p>The request object</p>
        /// </div>
        /// </returns>
        public Request buildRequest(Operation operation){return null;}
        /// <summary>
        /// Generates a url based on a given Ext.data.Request object. By default, ServerProxy's buildUrl will add the
        /// cache-buster param to the end of the url. Subclasses may need to perform additional modifications to the url.
        /// </summary>
        /// <param name="request"><p>The request object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The url</p>
        /// </div>
        /// </returns>
        public JsString buildUrl(Request request){return null;}
        /// <summary>
        /// In ServerProxy subclasses, the create, read, update and destroy methods all
        /// pass through to doRequest. Each ServerProxy subclass must implement the doRequest method - see Ext.data.proxy.JsonP and Ext.data.proxy.Ajax for examples. This method carries the same signature as
        /// each of the methods that delegate to it.
        /// </summary>
        /// <param name="operation"><p>The <see cref="Ext.data.Operation">Ext.data.Operation</see> object</p>
        /// </param>
        /// <param name="callback"><p>The callback function to call when the Operation has completed</p>
        /// </param>
        /// <param name="scope"><p>The scope in which to execute the callback</p>
        /// </param>
        public void doRequest(Operation operation, System.Delegate callback, object scope){}
        /// <summary>
        /// Encodes the array of Ext.util.Filter objects into a string to be sent in the request url. By default,
        /// this simply JSON-encodes the filter data
        /// </summary>
        /// <param name="filters"><p>The array of <see cref="Ext.util.Filter">Filter</see> objects</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The encoded filters</p>
        /// </div>
        /// </returns>
        public JsString encodeFilters(JsArray<Ext.util.Filter> filters){return null;}
        /// <summary>
        /// Encodes the array of Ext.util.Sorter objects into a string to be sent in the request url. By default,
        /// this simply JSON-encodes the sorter data
        /// </summary>
        /// <param name="sorters"><p>The array of <see cref="Ext.util.Sorter">Sorter</see> objects</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The encoded sorters</p>
        /// </div>
        /// </returns>
        public JsString encodeSorters(JsArray<Ext.util.Sorter> sorters){return null;}
        /// <summary>
        /// Template method to allow subclasses to specify how to get the response for the reader.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="response"><p>The server response</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The response data to be used by the reader</p>
        /// </div>
        /// </returns>
        protected virtual object extractResponseData(object response){return null;}
        /// <summary>
        /// Copy any sorters, filters etc into the params so they can be sent over the wire
        /// </summary>
        /// <param name="operation">
        /// </param>
        private void getParams(object operation){}
        /// <summary>
        /// Get the url for the request taking into account the order of priority,
        /// - The request
        /// - The api
        /// - The url
        /// </summary>
        /// <param name="request"><p>The request</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The url</p>
        /// </div>
        /// </returns>
        private JsString getUrl(Request request){return null;}
        /// <summary>
        /// Sets up an exception on the operation
        /// </summary>
        /// <param name="operation"><p>The operation</p>
        /// </param>
        /// <param name="response"><p>The response</p>
        /// </param>
        private void setException(Operation operation, object response){}
        /// <summary>
        /// Sets a value in the underlying extraParams.
        /// </summary>
        /// <param name="name"><p>The key for the new value</p>
        /// </param>
        /// <param name="value"><p>The value</p>
        /// </param>
        public void setExtraParam(JsString name, object value){}
        public Server(ServerConfig config){}
        public Server(){}
        public Server(params object[] args){}
    }
    #endregion
    #region ServerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ServerConfig : Ext.data.proxy.ProxyConfig
    {
        /// <summary>
        /// Specific urls to call on CRUD action methods "create", "read", "update" and "destroy". Defaults to:
        /// <code>api: {
        /// create  : undefined,
        /// read    : undefined,
        /// update  : undefined,
        /// destroy : undefined
        /// }
        /// </code>
        /// The url is built based upon the action being executed [create|read|update|destroy] using the commensurate
        /// <see cref="Ext.data.proxy.ServerConfig.api">api</see> property, or if undefined default to the configured
        /// <see cref="Ext.data.Store">Ext.data.Store</see>.<see cref="Ext.data.proxy.ServerConfig.url">url</see>.
        /// For example:
        /// <code>api: {
        /// create  : '/controller/new',
        /// read    : '/controller/load',
        /// update  : '/controller/update',
        /// destroy : '/controller/destroy_action'
        /// }
        /// </code>
        /// If the specific URL for a given CRUD action is undefined, the CRUD action request will be directed to the
        /// configured <see cref="Ext.data.proxy.ServerConfig.url">url</see>.
        /// </summary>
        public JsObject api;
        /// <summary>
        /// The name of the cache param added to the url when using noCache. Defaults to "_dc".
        /// Defaults to: <c>&quot;_dc&quot;</c>
        /// </summary>
        public JsString cacheString;
        /// <summary>
        /// The name of the direction parameter to send in a request. This is only used when simpleSortMode is set to
        /// true. Defaults to 'dir'.
        /// Defaults to: <c>&quot;dir&quot;</c>
        /// </summary>
        public JsString directionParam;
        /// <summary>
        /// Extra parameters that will be included on every request. Individual requests with params of the same name
        /// will override these params when they are in conflict.
        /// </summary>
        public JsObject extraParams;
        /// <summary>
        /// The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set this to undefined if you don't
        /// want to send a filter parameter.
        /// Defaults to: <c>&quot;filter&quot;</c>
        /// </summary>
        public JsString filterParam;
        /// <summary>
        /// The name of the direction parameter to send in a request. This is only used when simpleGroupMode is set to
        /// true. Defaults to 'groupDir'.
        /// Defaults to: <c>&quot;groupDir&quot;</c>
        /// </summary>
        public JsString groupDirectionParam;
        /// <summary>
        /// The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this to undefined if you don't
        /// want to send a group parameter.
        /// Defaults to: <c>&quot;group&quot;</c>
        /// </summary>
        public JsString groupParam;
        /// <summary>
        /// The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this to undefined if you don't
        /// want to send a limit parameter.
        /// Defaults to: <c>&quot;limit&quot;</c>
        /// </summary>
        public JsString limitParam;
        /// <summary>
        /// Disable caching by adding a unique parameter name to the request. Set to false to allow caching. Defaults to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool noCache;
        /// <summary>
        /// The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to undefined if you don't
        /// want to send a page parameter.
        /// Defaults to: <c>&quot;page&quot;</c>
        /// </summary>
        public JsString pageParam;
        /// <summary>
        /// Enabling simpleGroupMode in conjunction with remoteGroup will only send one group property and a direction when a
        /// remote group is requested. The groupDirectionParam and groupParam will be sent with the property name and either 'ASC'
        /// or 'DESC'.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool simpleGroupMode;
        /// <summary>
        /// Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a
        /// remote sort is requested. The directionParam and sortParam will be sent with the property name
        /// and either 'ASC' or 'DESC'.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool simpleSortMode;
        /// <summary>
        /// The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this to undefined if you don't
        /// want to send a sort parameter.
        /// Defaults to: <c>&quot;sort&quot;</c>
        /// </summary>
        public JsString sortParam;
        /// <summary>
        /// The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this to undefined if you don't
        /// want to send a start parameter.
        /// Defaults to: <c>&quot;start&quot;</c>
        /// </summary>
        public JsString startParam;
        /// <summary>
        /// The number of milliseconds to wait for a response. Defaults to 30000 milliseconds (30 seconds).
        /// Defaults to: <c>30000</c>
        /// </summary>
        public JsNumber timeout;
        /// <summary>
        /// The URL from which to request the data object.
        /// </summary>
        public JsString url;
        public ServerConfig(params object[] args){}
    }
    #endregion
    #region ServerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ServerEvents : Ext.data.proxy.ProxyEvents
    {
        /// <summary>
        /// Fires when the server returns an exception
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="response"><p>The response from the AJAX request</p>
        /// </param>
        /// <param name="operation"><p>The operation that triggered request</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void exception(Ext.data.proxy.Proxy @this, object response, Operation operation, object eOpts){}
        public ServerEvents(params object[] args){}
    }
    #endregion
}
