//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.chart.series
{
    #region Line
    /// <inheritdocs />
    /// <summary>
    /// <p>Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different
    /// categories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.
    /// As with all other series, the Line Series must be appended in the <em>series</em> Chart array configuration. See the Chart
    /// documentation for more information. A typical configuration object for the line series could be:</p>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.JsonStore">Ext.data.JsonStore</see>', {
    /// fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],
    /// data: [
    /// { 'name': 'metric one',   'data1': 10, 'data2': 12, 'data3': 14, 'data4': 8,  'data5': 13 },
    /// { 'name': 'metric two',   'data1': 7,  'data2': 8,  'data3': 16, 'data4': 10, 'data5': 3  },
    /// { 'name': 'metric three', 'data1': 5,  'data2': 2,  'data3': 14, 'data4': 12, 'data5': 7  },
    /// { 'name': 'metric four',  'data1': 2,  'data2': 14, 'data3': 6,  'data4': 1,  'data5': 23 },
    /// { 'name': 'metric five',  'data1': 4,  'data2': 4,  'data3': 36, 'data4': 13, 'data5': 33 }
    /// ]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// width: 500,
    /// height: 300,
    /// animate: true,
    /// store: store,
    /// axes: [
    /// {
    /// type: 'Numeric',
    /// position: 'left',
    /// fields: ['data1', 'data2'],
    /// label: {
    /// renderer: <see cref="Ext.util.Format.numberRenderer">Ext.util.Format.numberRenderer</see>('0,0')
    /// },
    /// title: 'Sample Values',
    /// grid: true,
    /// minimum: 0
    /// },
    /// {
    /// type: 'Category',
    /// position: 'bottom',
    /// fields: ['name'],
    /// title: 'Sample Metrics'
    /// }
    /// ],
    /// series: [
    /// {
    /// type: 'line',
    /// highlight: {
    /// size: 7,
    /// radius: 7
    /// },
    /// axis: 'left',
    /// xField: 'name',
    /// yField: 'data1',
    /// markerConfig: {
    /// type: 'cross',
    /// size: 4,
    /// radius: 4,
    /// 'stroke-width': 0
    /// }
    /// },
    /// {
    /// type: 'line',
    /// highlight: {
    /// size: 7,
    /// radius: 7
    /// },
    /// axis: 'left',
    /// fill: true,
    /// xField: 'name',
    /// yField: 'data2',
    /// markerConfig: {
    /// type: 'circle',
    /// size: 4,
    /// radius: 4,
    /// 'stroke-width': 0
    /// }
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>In this configuration we're adding two series (or lines), one bound to the <c>data1</c>
    /// property of the store and the other to <c>data3</c>. The type for both configurations is
    /// <c>line</c>. The <c>xField</c> for both series is the same, the name propert of the store.
    /// Both line series share the same axis, the left axis. You can set particular marker
    /// configuration by adding properties onto the markerConfig object. Both series have
    /// an object as highlight so that markers animate smoothly to the properties in highlight
    /// when hovered. The second series has <c>fill=true</c> which means that the line will also
    /// have an area below it of the same color.</p>
    /// <p><strong>Note:</strong> In the series definition remember to explicitly set the axis to bind the
    /// values of the line series to. This can be done by using the <c>axis</c> configuration property.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Line : Cartesian
    {
        /// <summary>
        /// If true, the area below the line will be filled in using the eefill and
        /// opacity config properties. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool fill;
        /// <summary>
        /// The display style for the markers. Only used if showMarkers is true.
        /// The markerConfig is a configuration object containing the same set of properties defined in
        /// the Sprite class. For example, if we were to set red circles as markers to the line series we could
        /// pass the object:
        /// <code>        markerConfig: {
        /// type: 'circle',
        /// radius: 4,
        /// 'fill': '#f00'
        /// }
        /// </code>
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject markerConfig;
        /// <summary>
        /// The offset distance from the cursor position to the line series to trigger events (then used for highlighting series, etc).
        /// Defaults to: <c>20</c>
        /// </summary>
        public JsNumber selectionTolerance;
        /// <summary>
        /// Whether markers should be displayed at the data points along the line. If true,
        /// then the markerConfig config item will determine the markers' styling.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showMarkers;
        /// <summary>
        /// If set to true or a non-zero number, the line will be smoothed/rounded around its points; otherwise
        /// straight line segments will be drawn.
        /// A numeric value is interpreted as a divisor of the horizontal distance between consecutive points in
        /// the line; larger numbers result in sharper curves while smaller numbers result in smoother curves.
        /// If set to <c>true</c> then a default numeric value of 3 will be used. Defaults to <c>false</c>.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object smooth;
        /// <summary>
        /// An object containing style properties for the visualization lines and fill.
        /// These styles will override the theme styles.  The following are valid style properties:
        /// <li><c>stroke</c> - an rgb or hex color string for the background color of the line</li>
        /// <li><c>stroke-width</c> - the width of the stroke (integer)</li>
        /// <li><c>fill</c> - the background fill color string (hex or rgb), only works if <see cref="Ext.chart.series.LineConfig.fill">fill</see> is <c>true</c></li>
        /// <li><c>opacity</c> - the opacity of the line and the fill color (decimal)</li>
        /// Example usage:
        /// <code>style: {
        /// stroke: '#00ff00',
        /// 'stroke-width': 10,
        /// fill: '#80A080',
        /// opacity: 0.2
        /// }
        /// </code>
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject style;
        /// <summary>
        /// Default numeric smoothing value to be used when smooth = true.
        /// Defaults to: <c>3</c>
        /// </summary>
        private JsNumber defaultSmoothness{get;set;}
        /// <summary>
        /// Draws the series for the current chart.
        /// </summary>
        public void drawSeries(){}
        public Line(LineConfig config){}
        public Line(){}
        public Line(params object[] args){}
    }
    #endregion
    #region LineConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LineConfig : CartesianConfig
    {
        /// <summary>
        /// If true, the area below the line will be filled in using the eefill and
        /// opacity config properties. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool fill;
        /// <summary>
        /// The display style for the markers. Only used if showMarkers is true.
        /// The markerConfig is a configuration object containing the same set of properties defined in
        /// the Sprite class. For example, if we were to set red circles as markers to the line series we could
        /// pass the object:
        /// <code>        markerConfig: {
        /// type: 'circle',
        /// radius: 4,
        /// 'fill': '#f00'
        /// }
        /// </code>
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject markerConfig;
        /// <summary>
        /// The offset distance from the cursor position to the line series to trigger events (then used for highlighting series, etc).
        /// Defaults to: <c>20</c>
        /// </summary>
        public JsNumber selectionTolerance;
        /// <summary>
        /// Whether markers should be displayed at the data points along the line. If true,
        /// then the markerConfig config item will determine the markers' styling.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showMarkers;
        /// <summary>
        /// If set to true or a non-zero number, the line will be smoothed/rounded around its points; otherwise
        /// straight line segments will be drawn.
        /// A numeric value is interpreted as a divisor of the horizontal distance between consecutive points in
        /// the line; larger numbers result in sharper curves while smaller numbers result in smoother curves.
        /// If set to <c>true</c> then a default numeric value of 3 will be used. Defaults to <c>false</c>.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object smooth;
        /// <summary>
        /// An object containing style properties for the visualization lines and fill.
        /// These styles will override the theme styles.  The following are valid style properties:
        /// <li><c>stroke</c> - an rgb or hex color string for the background color of the line</li>
        /// <li><c>stroke-width</c> - the width of the stroke (integer)</li>
        /// <li><c>fill</c> - the background fill color string (hex or rgb), only works if <see cref="Ext.chart.series.LineConfig.fill">fill</see> is <c>true</c></li>
        /// <li><c>opacity</c> - the opacity of the line and the fill color (decimal)</li>
        /// Example usage:
        /// <code>style: {
        /// stroke: '#00ff00',
        /// 'stroke-width': 10,
        /// fill: '#80A080',
        /// opacity: 0.2
        /// }
        /// </code>
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject style;
        public LineConfig(params object[] args){}
    }
    #endregion
    #region LineEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LineEvents : CartesianEvents
    {
        public LineEvents(params object[] args){}
    }
    #endregion
}
