//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.selection
{
    #region CellModel
    /// <inheritdocs />
    /// <summary>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class CellModel : Ext.selection.Model
    {
        /// <summary>
        /// Turns on/off keyboard navigation within the grid.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableKeyNav;
        /// <summary>
        /// Set this configuration to true to prevent wrapping around of selection as
        /// a user navigates to the first or last column.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool preventWrap;
        /// <summary>
        /// Returns the current position in the format {row: row, column: column}
        /// </summary>
        public Ext.selection.CellModel.Position getCurrentPosition(){return null;}
        /// <summary>
        /// When grid uses optimizedColumnMove (the default), this is added as a
        /// columnmove handler to correctly maintain the
        /// selected column using the same column header.
        /// If optimizedColumnMove === false, (which some grid Features set) then the view is refreshed,
        /// so this is not added as a handler because the selected column.
        /// </summary>
        /// <param name="headerCt">
        /// </param>
        /// <param name="header">
        /// </param>
        /// <param name="fromIdx">
        /// </param>
        /// <param name="toIdx">
        /// </param>
        private void onColumnMove(object headerCt, object header, object fromIdx, object toIdx){}
        /// <summary>
        /// Set the current position based on where the user clicks.
        /// </summary>
        /// <param name="view">
        /// </param>
        /// <param name="cell">
        /// </param>
        /// <param name="cellIndex">
        /// </param>
        /// <param name="record">
        /// </param>
        /// <param name="row">
        /// </param>
        /// <param name="rowIndex">
        /// </param>
        /// <param name="e">
        /// </param>
        private void onMouseDown(object view, object cell, object cellIndex, object record, object row, object rowIndex, object e){}
        /// <summary>
        /// Sets the current position
        /// </summary>
        /// <param name="position"><p>The position to set.</p>
        /// </param>
        public void setCurrentPosition(object position){}
        public CellModel(CellModelConfig config){}
        public CellModel(){}
        public CellModel(params object[] args){}
        [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
        public partial class Position
        {
            public JsNumber row{get;set;}
            public JsNumber column{get;set;}
            public Position(params object[] args){}
        }
    }
    #endregion
    #region CellModelConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CellModelConfig : Ext.selection.ModelConfig
    {
        /// <summary>
        /// Turns on/off keyboard navigation within the grid.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableKeyNav;
        /// <summary>
        /// Set this configuration to true to prevent wrapping around of selection as
        /// a user navigates to the first or last column.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool preventWrap;
        public CellModelConfig(params object[] args){}
    }
    #endregion
    #region CellModelEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CellModelEvents : Ext.selection.ModelEvents
    {
        /// <summary>
        /// Fired after a cell is deselected
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record of the deselected cell</p>
        /// </param>
        /// <param name="row"><p>The row index deselected</p>
        /// </param>
        /// <param name="column"><p>The column index deselected</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void deselect(CellModel @this, Ext.data.Model record, JsNumber row, JsNumber column, object eOpts){}
        /// <summary>
        /// Fired after a cell is selected
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record of the selected cell</p>
        /// </param>
        /// <param name="row"><p>The row index selected</p>
        /// </param>
        /// <param name="column"><p>The column index selected</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void select(CellModel @this, Ext.data.Model record, JsNumber row, JsNumber column, object eOpts){}
        public CellModelEvents(params object[] args){}
    }
    #endregion
}
