//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.proxy
{
    #region WebStorage
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>WebStorageProxy is simply a superclass for the <see cref="Ext.data.proxy.LocalStorage">LocalStorage</see> and <see cref="Ext.data.proxy.SessionStorage">SessionStorage</see> proxies. It uses the new HTML5 key/value client-side storage objects to
    /// save <see cref="Ext.data.Model">model instances</see> for offline use.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class WebStorage : Client
    {
        /// <summary>
        /// The unique ID used as the key in which all record data are stored in the local storage object.
        /// </summary>
        public JsString id;
        /// <summary>
        /// Cached map of records already retrieved by this Proxy. Ensures that the same instance is always retrieved.
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject cache{get;set;}
        /// <summary>
        /// Returns the array of record IDs stored in this Proxy
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The record IDs. Each is cast as a Number</p>
        /// </div>
        /// </returns>
        private JsNumber[] getIds(){return null;}
        /// <summary>
        /// Returns the next numerical ID that can be used when realizing a model instance (see getRecordCounterKey).
        /// Increments the counter.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The id</p>
        /// </div>
        /// </returns>
        private JsNumber getNextId(){return null;}
        /// <summary>
        /// Fetches record data from the Proxy by ID.
        /// </summary>
        /// <param name="id"><p>The record's unique ID</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The record data</p>
        /// </div>
        /// </returns>
        private object getRecord(JsString id){return null;}
        /// <summary>
        /// Returns the unique key used to store the current record counter for this proxy. This is used internally when
        /// realizing models (creating them when they used to be phantoms), in order to give each model instance a unique id.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The counter key</p>
        /// </div>
        /// </returns>
        private JsString getRecordCounterKey(){return null;}
        /// <summary>
        /// Given the id of a record, returns a unique string based on that id and the id of this proxy. This is used when
        /// storing data in the local storage object and should prevent naming collisions.
        /// </summary>
        /// <param name="id"><p>The record id, or a Model instance</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The unique key for this record</p>
        /// </div>
        /// </returns>
        private JsString getRecordKey(object id){return null;}
        /// <summary>
        /// Abstract function which should return the storage object that data will be saved to. This must be implemented
        /// in each subclass.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The storage object</p>
        /// </div>
        /// </returns>
        private object getStorageObject(){return null;}
        /// <summary>
        /// Gets tree data and transforms it from key value pairs into a hierarchical structure.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see>[]</span><div>
        /// </div>
        /// </returns>
        private NodeInterface[] getTreeData(){return null;}
        /// <summary>
        /// Returns the unique key used to store the tree indicator. This is used internally to determine if the stored data is hierarchical
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The counter key</p>
        /// </div>
        /// </returns>
        private JsString getTreeKey(){return null;}
        /// <summary>
        /// Sets up the Proxy by claiming the key in the storage object that corresponds to the unique id of this Proxy. Called
        /// automatically by the constructor, this should not need to be called again unless clear has been called.
        /// </summary>
        private void initialize(){}
        /// <summary>
        /// Physically removes a given record from the local storage and recursively removes children if the record is a tree node. Used internally by destroy.
        /// </summary>
        /// <param name="record"><p>The record to remove</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>a hash with the ids of the records that were removed as keys and the records that were removed as values</p>
        /// </div>
        /// </returns>
        private object removeRecord(Ext.data.Model record){return null;}
        /// <summary>
        /// Saves the array of ids representing the set of all records in the Proxy
        /// </summary>
        /// <param name="ids"><p>The ids to set</p>
        /// </param>
        private void setIds(JsArray<Number> ids){}
        /// <summary>
        /// Saves the given record in the Proxy.
        /// </summary>
        /// <param name="record"><p>The model instance</p>
        /// </param>
        /// <param name="id"><p>The id to save the record under (defaults to the value of the record's getId() function)</p>
        /// </param>
        public void setRecord(Ext.data.Model record, object id=null){}
        /// <summary>
        /// Sorter function for sorting records by parentId
        /// </summary>
        /// <param name="node1">
        /// </param>
        /// <param name="node2">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        private JsNumber sortByParentId(object node1, object node2){return null;}
        public WebStorage(WebStorageConfig config){}
        public WebStorage(params object[] args){}
    }
    #endregion
    #region WebStorageConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class WebStorageConfig : ClientConfig
    {
        /// <summary>
        /// The unique ID used as the key in which all record data are stored in the local storage object.
        /// </summary>
        public JsString id;
        public WebStorageConfig(params object[] args){}
    }
    #endregion
    #region WebStorageEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class WebStorageEvents : ClientEvents
    {
        public WebStorageEvents(params object[] args){}
    }
    #endregion
}
