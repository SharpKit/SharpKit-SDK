//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data
{
    #region Field
    /// <inheritdocs />
    /// <summary>
    /// <p>Fields are used to define what a Model is. They aren't instantiated directly - instead, when we create a class that
    /// extends <see cref="Ext.data.Model">Ext.data.Model</see>, it will automatically create a Field instance for each field configured in a <see cref="Ext.data.Model">Model</see>. For example, we might set up a model like this:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: [
    /// 'name', 'email',
    /// {name: 'age', type: 'int'},
    /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>Four fields will have been created for the User Model - name, email, age and gender. Note that we specified a couple
    /// of different formats here; if we only pass in the string name of the field (as with name and email), the field is set
    /// up with the 'auto' type. It's as if we'd done this instead:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: [
    /// {name: 'name', type: 'auto'},
    /// {name: 'email', type: 'auto'},
    /// {name: 'age', type: 'int'},
    /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
    /// ]
    /// });
    /// </code></pre>
    /// <h1>Types and conversion</h1>
    /// <p>The <see cref="Ext.data.FieldConfig.type">type</see> is important - it's used to automatically convert data passed to the field into the correct format.
    /// In our example above, the name and email fields used the 'auto' type and will just accept anything that is passed
    /// into them. The 'age' field had an 'int' type however, so if we passed 25.4 this would be rounded to 25.</p>
    /// <p>Sometimes a simple type isn't enough, or we want to perform some processing when we load a Field's data. We can do
    /// this using a <see cref="Ext.data.FieldConfig.convert">convert</see> function. Here, we're going to create a new field based on another:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: [
    /// {
    /// name: 'firstName',
    /// convert: function(value, record) {
    /// var fullName  = record.get('name'),
    /// splits    = fullName.split(" "),
    /// firstName = splits[0];
    /// return firstName;
    /// }
    /// },
    /// 'name', 'email',
    /// {name: 'age', type: 'int'},
    /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>Now when we create a new User, the firstName is populated automatically based on the name:</p>
    /// <pre><code>var ed = <see cref="Ext.ExtContext.create">Ext.create</see>('User', {name: 'Ed Spencer'});
    /// console.log(ed.get('firstName')); //logs 'Ed', based on our convert function
    /// </code></pre>
    /// <p>Fields which are configured with a custom <c>convert</c> function are read <em>after</em> all other fields
    /// when constructing and reading records, so that if convert functions rely on other, non-converted fields
    /// (as in this example), they can be sure of those fields being present.</p>
    /// <p>In fact, if we log out all of the data inside ed, we'll see this:</p>
    /// <pre><code>console.log(ed.data);
    /// //outputs this:
    /// {
    /// age: 0,
    /// email: "",
    /// firstName: "Ed",
    /// gender: "Unknown",
    /// name: "Ed Spencer"
    /// }
    /// </code></pre>
    /// <p>The age field has been given a default of zero because we made it an int type. As an auto field, email has defaulted
    /// to an empty string. When we registered the User model we set gender's <see cref="Ext.data.FieldConfig.defaultValue">defaultValue</see> to 'Unknown' so we see
    /// that now. Let's correct that and satisfy ourselves that the types work as we expect:</p>
    /// <pre><code>ed.set('gender', 'Male');
    /// ed.get('gender'); //returns 'Male'
    /// ed.set('age', 25.4);
    /// ed.get('age'); //returns 25 - we wanted an int, not a float, so no decimal places allowed
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Field : Ext.Base
    {
        /// <summary>
        /// Used for validating a model. Defaults to true. An empty value here will cause
        /// Ext.data.Model.isValid to evaluate to false.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowBlank;
        /// <summary>
        /// A function which converts the value provided by the Reader into an object that will be stored in the Model.
        /// If configured as <c>null</c>, then no conversion will be applied to the raw data property when this Field
        /// is read. This will increase performance. but you must ensure that the data is of the correct type and does
        /// not <em>need</em> converting.
        /// It is passed the following parameters:
        /// <li><p><strong>v</strong> : Mixed</p>
        /// <p>The data value as read by the Reader, if undefined will use the configured <c><see cref="Ext.data.FieldConfig.defaultValue">defaultValue</see></c>.</p></li>
        /// <li><p><strong>rec</strong> : <see cref="Ext.data.Model">Ext.data.Model</see></p>
        /// <p>The data object containing the Model as read so far by the Reader. Note that the Model may not be fully populated
        /// at this point as the fields are read in the order that they are defined in your
        /// <see cref="Ext.data.ModelConfig.fields">fields</see> array.</p></li>
        /// Example of convert functions:
        /// <code>function fullName(v, record){
        /// return record.data.last + ', ' + record.data.first;
        /// }
        /// function location(v, record){
        /// return !record.data.city ? '' : (record.data.city + ', ' + record.data.state);
        /// }
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('Dude', {
        /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
        /// fields: [
        /// {name: 'fullname',  convert: fullName},
        /// {name: 'firstname', mapping: 'name.first'},
        /// {name: 'lastname',  mapping: 'name.last'},
        /// {name: 'city', defaultValue: 'homeless'},
        /// 'state',
        /// {name: 'location',  convert: location}
        /// ]
        /// });
        /// // create the data store
        /// var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
        /// reader: {
        /// type: 'json',
        /// model: 'Dude',
        /// idProperty: 'key',
        /// root: 'daRoot',
        /// totalProperty: 'total'
        /// }
        /// });
        /// var myData = [
        /// { key: 1,
        /// name: { first: 'Fat',    last:  'Albert' }
        /// // notice no city, state provided in data object
        /// },
        /// { key: 2,
        /// name: { first: 'Barney', last:  'Rubble' },
        /// city: 'Bedrock', state: 'Stoneridge'
        /// },
        /// { key: 3,
        /// name: { first: 'Cliff',  last:  'Claven' },
        /// city: 'Boston',  state: 'MA'
        /// }
        /// ];
        /// </code>
        /// </summary>
        public System.Delegate convert;
        /// <summary>
        /// Used when converting received data into a Date when the type is specified as "date".
        /// The format dtring is also used when serializing Date fields for use by <see cref="Ext.data.writer.Writer">Writers</see>.
        /// A format string for the <see cref="Ext.Date.parse">Ext.Date.parse</see> function, or "timestamp" if the value provided by
        /// the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a javascript millisecond
        /// timestamp. See <see cref="Ext.Date">Ext.Date</see>.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString dateFormat;
        /// <summary>
        /// The default value used when the creating an instance from a raw data object, and the property referenced by the
        /// mapping does not exist in that data object.
        /// May be specified as <c>undefined</c> to prevent defaulting in a value.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsObject defaultValue;
        /// <summary>
        /// (Optional) A path expression for use by the Ext.data.reader.Reader implementation that is creating the
        /// Model to extract the Field value from the data object. If the path expression is the same
        /// as the field name, the mapping may be omitted.
        /// The form of the mapping expression depends on the Reader being used.
        /// <li><p><see cref="Ext.data.reader.Json">Ext.data.reader.Json</see></p>
        /// <p>The mapping is a string containing the javascript expression to reference the data from an element of the data
        /// item's <see cref="Ext.data.reader.JsonConfig.root">root</see> Array. Defaults to the field name.</p></li>
        /// <li><p><see cref="Ext.data.reader.Xml">Ext.data.reader.Xml</see></p>
        /// <p>The mapping is an <see cref="Ext.dom.Query">Ext.DomQuery</see> path to the data item relative to the DOM element that represents the
        /// <see cref="Ext.data.reader.XmlConfig.record">record</see>. Defaults to the field name.</p></li>
        /// <li><p><see cref="Ext.data.reader.Array">Ext.data.reader.Array</see></p>
        /// <p>The mapping is a number indicating the Array index of the field's value. Defaults to the field specification's
        /// Array position.</p></li>
        /// If a more complex value extraction strategy is required, then configure the Field with a <see cref="Ext.data.FieldConfig.convert">convert</see>
        /// function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
        /// return the desired data.
        /// Defaults to: <c>null</c>
        /// </summary>
        public object mapping;
        /// <summary>
        /// The name by which the field is referenced within the Model. This is referenced by, for example, the dataIndex
        /// property in column definition objects passed to Ext.grid.property.HeaderContainer.
        /// Note: In the simplest case, if no properties other than <c>name</c> are required, a field definition may consist of
        /// just a String for the field name.
        /// </summary>
        public JsString name;
        /// <summary>
        /// False to exclude this field from the Ext.data.Model.modified fields in a model. This will also exclude
        /// the field from being written using a Ext.data.writer.Writer. This option is useful when model fields are
        /// used to keep state on the client but do not need to be persisted to the server. Defaults to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool persist;
        /// <summary>
        /// A function which converts the Model's value for this Field into a form which can be used by whatever Writer
        /// is being used to sync data with the server.
        /// The function should return a string which represents the Field's value.
        /// It is passed the following parameters:
        /// <li><p><strong>v</strong> : Mixed</p>
        /// <p>The Field's value - the value to be serialized.</p></li>
        /// <li><p><strong>rec</strong> : <see cref="Ext.data.Model">Ext.data.Model</see></p>
        /// <p>The record being serialized.</p></li>
        /// </summary>
        public System.Delegate serialize;
        /// <summary>
        /// Initial direction to sort ("ASC" or "DESC"). Defaults to "ASC".
        /// Defaults to: <c>&quot;ASC&quot;</c>
        /// </summary>
        public JsString sortDir;
        /// <summary>
        /// A function which converts a Field's value to a comparable value in order to ensure correct sort ordering.
        /// Predefined functions are provided in Ext.data.SortTypes. A custom sort example:
        /// <code>// current sort     after sort we want
        /// // +-+------+          +-+------+
        /// // |1|First |          |1|First |
        /// // |2|Last  |          |3|Second|
        /// // |3|Second|          |2|Last  |
        /// // +-+------+          +-+------+
        /// sortType: function(value) {
        /// switch (value.toLowerCase()) // native toLowerCase():
        /// {
        /// case 'first': return 1;
        /// case 'second': return 2;
        /// default: return 3;
        /// }
        /// }
        /// </code>
        /// Defaults to: <c>null</c>
        /// </summary>
        public System.Delegate sortType;
        /// <summary>
        /// The data type for automatic conversion from received data to the stored value if
        /// convert has not been specified. This may be specified as a string value.
        /// Possible values are
        /// <li>auto (Default, implies no conversion)</li>
        /// <li>string</li>
        /// <li>int</li>
        /// <li>float</li>
        /// <li>boolean</li>
        /// <li>date</li>
        /// This may also be specified by referencing a member of the <see cref="Ext.data.Types">Ext.data.Types</see> class.
        /// Developers may create their own application-specific data types by defining new members of the <see cref="Ext.data.Types">Ext.data.Types</see> class.
        /// </summary>
        public object type;
        /// <summary>
        /// Use when converting received data into a INT, FLOAT, BOOL or STRING type. If the value cannot be
        /// parsed, null will be used if useNull is true, otherwise a default value for that type will be used:
        /// <li>for INT and FLOAT - <c>0</c>.</li>
        /// <li>for STRING - <c>""</c>.</li>
        /// <li>for BOOL - <c>false</c>.</li>
        /// Note that when parsing of DATE type fails, the value will be <c>null</c> regardless of this setting.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool useNull;
        public Field(Ext.data.FieldConfig config){}
        public Field(){}
        public Field(params object[] args){}
    }
    #endregion
    #region FieldConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FieldConfig : Ext.BaseConfig
    {
        /// <summary>
        /// Used for validating a model. Defaults to true. An empty value here will cause
        /// Ext.data.Model.isValid to evaluate to false.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowBlank;
        /// <summary>
        /// A function which converts the value provided by the Reader into an object that will be stored in the Model.
        /// If configured as <c>null</c>, then no conversion will be applied to the raw data property when this Field
        /// is read. This will increase performance. but you must ensure that the data is of the correct type and does
        /// not <em>need</em> converting.
        /// It is passed the following parameters:
        /// <li><p><strong>v</strong> : Mixed</p>
        /// <p>The data value as read by the Reader, if undefined will use the configured <c><see cref="Ext.data.FieldConfig.defaultValue">defaultValue</see></c>.</p></li>
        /// <li><p><strong>rec</strong> : <see cref="Ext.data.Model">Ext.data.Model</see></p>
        /// <p>The data object containing the Model as read so far by the Reader. Note that the Model may not be fully populated
        /// at this point as the fields are read in the order that they are defined in your
        /// <see cref="Ext.data.ModelConfig.fields">fields</see> array.</p></li>
        /// Example of convert functions:
        /// <code>function fullName(v, record){
        /// return record.data.last + ', ' + record.data.first;
        /// }
        /// function location(v, record){
        /// return !record.data.city ? '' : (record.data.city + ', ' + record.data.state);
        /// }
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('Dude', {
        /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
        /// fields: [
        /// {name: 'fullname',  convert: fullName},
        /// {name: 'firstname', mapping: 'name.first'},
        /// {name: 'lastname',  mapping: 'name.last'},
        /// {name: 'city', defaultValue: 'homeless'},
        /// 'state',
        /// {name: 'location',  convert: location}
        /// ]
        /// });
        /// // create the data store
        /// var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
        /// reader: {
        /// type: 'json',
        /// model: 'Dude',
        /// idProperty: 'key',
        /// root: 'daRoot',
        /// totalProperty: 'total'
        /// }
        /// });
        /// var myData = [
        /// { key: 1,
        /// name: { first: 'Fat',    last:  'Albert' }
        /// // notice no city, state provided in data object
        /// },
        /// { key: 2,
        /// name: { first: 'Barney', last:  'Rubble' },
        /// city: 'Bedrock', state: 'Stoneridge'
        /// },
        /// { key: 3,
        /// name: { first: 'Cliff',  last:  'Claven' },
        /// city: 'Boston',  state: 'MA'
        /// }
        /// ];
        /// </code>
        /// </summary>
        public System.Delegate convert;
        /// <summary>
        /// Used when converting received data into a Date when the type is specified as "date".
        /// The format dtring is also used when serializing Date fields for use by <see cref="Ext.data.writer.Writer">Writers</see>.
        /// A format string for the <see cref="Ext.Date.parse">Ext.Date.parse</see> function, or "timestamp" if the value provided by
        /// the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a javascript millisecond
        /// timestamp. See <see cref="Ext.Date">Ext.Date</see>.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString dateFormat;
        /// <summary>
        /// The default value used when the creating an instance from a raw data object, and the property referenced by the
        /// mapping does not exist in that data object.
        /// May be specified as <c>undefined</c> to prevent defaulting in a value.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsObject defaultValue;
        /// <summary>
        /// (Optional) A path expression for use by the Ext.data.reader.Reader implementation that is creating the
        /// Model to extract the Field value from the data object. If the path expression is the same
        /// as the field name, the mapping may be omitted.
        /// The form of the mapping expression depends on the Reader being used.
        /// <li><p><see cref="Ext.data.reader.Json">Ext.data.reader.Json</see></p>
        /// <p>The mapping is a string containing the javascript expression to reference the data from an element of the data
        /// item's <see cref="Ext.data.reader.JsonConfig.root">root</see> Array. Defaults to the field name.</p></li>
        /// <li><p><see cref="Ext.data.reader.Xml">Ext.data.reader.Xml</see></p>
        /// <p>The mapping is an <see cref="Ext.dom.Query">Ext.DomQuery</see> path to the data item relative to the DOM element that represents the
        /// <see cref="Ext.data.reader.XmlConfig.record">record</see>. Defaults to the field name.</p></li>
        /// <li><p><see cref="Ext.data.reader.Array">Ext.data.reader.Array</see></p>
        /// <p>The mapping is a number indicating the Array index of the field's value. Defaults to the field specification's
        /// Array position.</p></li>
        /// If a more complex value extraction strategy is required, then configure the Field with a <see cref="Ext.data.FieldConfig.convert">convert</see>
        /// function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
        /// return the desired data.
        /// Defaults to: <c>null</c>
        /// </summary>
        public object mapping;
        /// <summary>
        /// The name by which the field is referenced within the Model. This is referenced by, for example, the dataIndex
        /// property in column definition objects passed to Ext.grid.property.HeaderContainer.
        /// Note: In the simplest case, if no properties other than <c>name</c> are required, a field definition may consist of
        /// just a String for the field name.
        /// </summary>
        public JsString name;
        /// <summary>
        /// False to exclude this field from the Ext.data.Model.modified fields in a model. This will also exclude
        /// the field from being written using a Ext.data.writer.Writer. This option is useful when model fields are
        /// used to keep state on the client but do not need to be persisted to the server. Defaults to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool persist;
        /// <summary>
        /// A function which converts the Model's value for this Field into a form which can be used by whatever Writer
        /// is being used to sync data with the server.
        /// The function should return a string which represents the Field's value.
        /// It is passed the following parameters:
        /// <li><p><strong>v</strong> : Mixed</p>
        /// <p>The Field's value - the value to be serialized.</p></li>
        /// <li><p><strong>rec</strong> : <see cref="Ext.data.Model">Ext.data.Model</see></p>
        /// <p>The record being serialized.</p></li>
        /// </summary>
        public System.Delegate serialize;
        /// <summary>
        /// Initial direction to sort ("ASC" or "DESC"). Defaults to "ASC".
        /// Defaults to: <c>&quot;ASC&quot;</c>
        /// </summary>
        public JsString sortDir;
        /// <summary>
        /// A function which converts a Field's value to a comparable value in order to ensure correct sort ordering.
        /// Predefined functions are provided in Ext.data.SortTypes. A custom sort example:
        /// <code>// current sort     after sort we want
        /// // +-+------+          +-+------+
        /// // |1|First |          |1|First |
        /// // |2|Last  |          |3|Second|
        /// // |3|Second|          |2|Last  |
        /// // +-+------+          +-+------+
        /// sortType: function(value) {
        /// switch (value.toLowerCase()) // native toLowerCase():
        /// {
        /// case 'first': return 1;
        /// case 'second': return 2;
        /// default: return 3;
        /// }
        /// }
        /// </code>
        /// Defaults to: <c>null</c>
        /// </summary>
        public System.Delegate sortType;
        /// <summary>
        /// The data type for automatic conversion from received data to the stored value if
        /// convert has not been specified. This may be specified as a string value.
        /// Possible values are
        /// <li>auto (Default, implies no conversion)</li>
        /// <li>string</li>
        /// <li>int</li>
        /// <li>float</li>
        /// <li>boolean</li>
        /// <li>date</li>
        /// This may also be specified by referencing a member of the <see cref="Ext.data.Types">Ext.data.Types</see> class.
        /// Developers may create their own application-specific data types by defining new members of the <see cref="Ext.data.Types">Ext.data.Types</see> class.
        /// </summary>
        public object type;
        /// <summary>
        /// Use when converting received data into a INT, FLOAT, BOOL or STRING type. If the value cannot be
        /// parsed, null will be used if useNull is true, otherwise a default value for that type will be used:
        /// <li>for INT and FLOAT - <c>0</c>.</li>
        /// <li>for STRING - <c>""</c>.</li>
        /// <li>for BOOL - <c>false</c>.</li>
        /// Note that when parsing of DATE type fails, the value will be <c>null</c> regardless of this setting.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool useNull;
        public FieldConfig(params object[] args){}
    }
    #endregion
    #region FieldEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FieldEvents : Ext.BaseEvents
    {
        public FieldEvents(params object[] args){}
    }
    #endregion
}
