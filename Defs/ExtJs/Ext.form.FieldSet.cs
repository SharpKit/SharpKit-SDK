//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form
{
    #region FieldSet
    /// <inheritdocs />
    /// <summary>
    /// <p>A container for grouping sets of fields, rendered as a HTML <c>fieldset</c> element. The <see cref="Ext.form.FieldSetConfig.title">title</see>
    /// config will be rendered as the fieldset's <c>legend</c>.</p>
    /// <p>While FieldSets commonly contain simple groups of fields, they are general <see cref="Ext.container.Container">Containers</see>
    /// and may therefore contain any type of components in their <see cref="Ext.form.FieldSetConfig.items">items</see>, including other nested containers.
    /// The default <see cref="Ext.form.FieldSetConfig.layout">layout</see> for the FieldSet's items is <c>'anchor'</c>, but it can be configured to use any other
    /// layout type.</p>
    /// <p>FieldSets may also be collapsed if configured to do so; this can be done in two ways:</p>
    /// <ol>
    /// <li>Set the <see cref="Ext.form.FieldSetConfig.collapsible">collapsible</see> config to true; this will result in a collapse button being rendered next to
    /// the <see cref="Ext.form.FieldSetConfig.title">legend title</see>, or:</li>
    /// <li>Set the <see cref="Ext.form.FieldSetConfig.checkboxToggle">checkboxToggle</see> config to true; this is similar to using <see cref="Ext.form.FieldSetConfig.collapsible">collapsible</see> but renders
    /// a <see cref="Ext.form.field.Checkbox">checkbox</see> in place of the toggle button. The fieldset will be expanded when the
    /// checkbox is checked and collapsed when it is unchecked. The checkbox will also be included in the
    /// <see cref="Ext.form.Basic.submit">form submit parameters</see> using the <see cref="Ext.form.FieldSetConfig.checkboxName">checkboxName</see> as its parameter name.</li>
    /// </ol>
    /// <h1>Example usage</h1>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'Simple Form with FieldSets',
    /// labelWidth: 75, // label settings here cascade unless overridden
    /// url: 'save-form.php',
    /// frame: true,
    /// bodyStyle: 'padding:5px 5px 0',
    /// width: 550,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// layout: 'column', // arrange fieldsets side by side
    /// defaults: {
    /// bodyPadding: 4
    /// },
    /// items: [{
    /// // Fieldset in Column 1 - collapsible via toggle button
    /// xtype:'fieldset',
    /// columnWidth: 0.5,
    /// title: 'Fieldset 1',
    /// collapsible: true,
    /// defaultType: 'textfield',
    /// defaults: {anchor: '100%'},
    /// layout: 'anchor',
    /// items :[{
    /// fieldLabel: 'Field 1',
    /// name: 'field1'
    /// }, {
    /// fieldLabel: 'Field 2',
    /// name: 'field2'
    /// }]
    /// }, {
    /// // Fieldset in Column 2 - collapsible via checkbox, collapsed by default, contains a panel
    /// xtype:'fieldset',
    /// title: 'Show Panel', // title or checkboxToggle creates fieldset header
    /// columnWidth: 0.5,
    /// checkboxToggle: true,
    /// collapsed: true, // fieldset initially collapsed
    /// layout:'anchor',
    /// items :[{
    /// xtype: 'panel',
    /// anchor: '100%',
    /// title: 'Panel inside a fieldset',
    /// frame: true,
    /// height: 52
    /// }]
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class FieldSet : Ext.container.Container
    {
        /// <summary>
        /// The name to assign to the fieldset's checkbox if checkboxToggle = true
        /// (defaults to '[fieldset id]-checkbox').
        /// </summary>
        public JsString checkboxName;
        /// <summary>
        /// Set to true to render a checkbox into the fieldset frame just in front of the legend to expand/collapse the
        /// fieldset when the checkbox is toggled.. This checkbox will be included in form submits using
        /// the checkboxName.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool checkboxToggle;
        /// <summary>
        /// Set to true to render the fieldset as collapsed by default. If checkboxToggle is specified, the checkbox
        /// will also be unchecked by default.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool collapsed;
        /// <summary>
        /// Set to true to make the fieldset collapsible and have the expand/collapse toggle button automatically rendered
        /// into the legend element, false to keep the fieldset statically sized with no collapse button.
        /// Another option is to configure checkboxToggle. Use the collapsed config to collapse the
        /// fieldset by default.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool collapsible;
        /// <summary>
        /// A title to be displayed in the fieldset's legend. May contain HTML markup.
        /// </summary>
        public JsString title;
        /// <summary>
        /// Set to true will add a listener to the titleCmp property for the click event which will execute the
        /// toggle method. This option is only used when the collapsible property is set to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool toggleOnTitleClick;
        /// <summary>
        /// Refers to the Ext.form.field.Checkbox component that is added next to the title in the legend. Only
        /// populated if the fieldset is configured with checkboxToggle:true.
        /// </summary>
        public Ext.form.field.Checkbox checkboxCmp{get;set;}
        /// <summary>
        /// The component for the fieldset's legend. Will only be defined if the configuration requires a legend to be
        /// created, by setting the title or checkboxToggle options.
        /// </summary>
        public Ext.Component legend{get;set;}
        /// <summary>
        /// Refers to the Ext.panel.Tool component that is added as the collapse/expand button next to the title in
        /// the legend. Only populated if the fieldset is configured with collapsible:true.
        /// </summary>
        public Ext.panel.Tool toggleCmp{get;set;}
        /// <summary>
        /// Collapses the fieldset.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.form.FieldSet">Ext.form.FieldSet</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.form.FieldSet collapse(){return null;}
        /// <summary>
        /// Creates the checkbox component. This is only called internally, but could be overridden in subclasses to
        /// customize the checkbox's configuration or even return an entirely different component type.
        /// </summary>
        protected void createCheckboxCmp(){}
        /// <summary>
        /// Creates the legend title component. This is only called internally, but could be overridden in subclasses to
        /// customize the title component. If toggleOnTitleClick is set to true, a listener for the click event
        /// will toggle the collapsed state of the FieldSet.
        /// </summary>
        protected void createTitleCmp(){}
        /// <summary>
        /// Creates the toggle button component. This is only called internally, but could be overridden in subclasses to
        /// customize the toggle component.
        /// </summary>
        protected void createToggleCmp(){}
        /// <summary>
        /// Expands the fieldset.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.form.FieldSet">Ext.form.FieldSet</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.form.FieldSet expand(){return null;}
        /// <summary>
        /// Handle changes in the checkbox checked state
        /// </summary>
        /// <param name="cmp">
        /// </param>
        /// <param name="checked">
        /// </param>
        private void onCheckChange(object cmp, object @checked){}
        /// <summary>
        /// Collapse or expand the fieldset
        /// </summary>
        /// <param name="expanded">
        /// </param>
        private void setExpanded(object expanded){}
        /// <summary>
        /// Sets the title of this fieldset
        /// </summary>
        /// <param name="title"><p>The new title</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.FieldSet">Ext.form.FieldSet</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.form.FieldSet setTitle(JsString title){return null;}
        /// <summary>
        /// Toggle the fieldset's collapsed state to the opposite of what it is currently
        /// </summary>
        public void toggle(){}
        public FieldSet(Ext.form.FieldSetConfig config){}
        public FieldSet(){}
        public FieldSet(params object[] args){}
    }
    #endregion
    #region FieldSetConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FieldSetConfig : Ext.container.ContainerConfig
    {
        /// <summary>
        /// The name to assign to the fieldset's checkbox if checkboxToggle = true
        /// (defaults to '[fieldset id]-checkbox').
        /// </summary>
        public JsString checkboxName;
        /// <summary>
        /// Set to true to render a checkbox into the fieldset frame just in front of the legend to expand/collapse the
        /// fieldset when the checkbox is toggled.. This checkbox will be included in form submits using
        /// the checkboxName.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool checkboxToggle;
        /// <summary>
        /// Set to true to render the fieldset as collapsed by default. If checkboxToggle is specified, the checkbox
        /// will also be unchecked by default.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool collapsed;
        /// <summary>
        /// Set to true to make the fieldset collapsible and have the expand/collapse toggle button automatically rendered
        /// into the legend element, false to keep the fieldset statically sized with no collapse button.
        /// Another option is to configure checkboxToggle. Use the collapsed config to collapse the
        /// fieldset by default.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool collapsible;
        /// <summary>
        /// A title to be displayed in the fieldset's legend. May contain HTML markup.
        /// </summary>
        public JsString title;
        /// <summary>
        /// Set to true will add a listener to the titleCmp property for the click event which will execute the
        /// toggle method. This option is only used when the collapsible property is set to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool toggleOnTitleClick;
        public FieldSetConfig(params object[] args){}
    }
    #endregion
    #region FieldSetEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FieldSetEvents : Ext.container.ContainerEvents
    {
        /// <summary>
        /// Fires before this FieldSet is collapsed. Return false to prevent the collapse.
        /// </summary>
        /// <param name="f"><p>The FieldSet being collapsed.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecollapse(Ext.form.FieldSet f, object eOpts){}
        /// <summary>
        /// Fires before this FieldSet is expanded. Return false to prevent the expand.
        /// </summary>
        /// <param name="f"><p>The FieldSet being expanded.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeexpand(Ext.form.FieldSet f, object eOpts){}
        /// <summary>
        /// Fires after this FieldSet has collapsed.
        /// </summary>
        /// <param name="f"><p>The FieldSet that has been collapsed.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void collapse(Ext.form.FieldSet f, object eOpts){}
        /// <summary>
        /// Fires after this FieldSet has expanded.
        /// </summary>
        /// <param name="f"><p>The FieldSet that has been expanded.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void expand(Ext.form.FieldSet f, object eOpts){}
        public FieldSetEvents(params object[] args){}
    }
    #endregion
}
