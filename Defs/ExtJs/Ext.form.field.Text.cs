//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region Text
    /// <inheritdocs />
    /// <summary>
    /// <p>A basic text field.  Can be used as a direct replacement for traditional text inputs,
    /// or as the base class for more sophisticated input controls (like <see cref="Ext.form.field.TextArea">Ext.form.field.TextArea</see>
    /// and <see cref="Ext.form.field.ComboBox">Ext.form.field.ComboBox</see>). Has support for empty-field placeholder values (see <see cref="Ext.form.field.TextConfig.emptyText">emptyText</see>).</p>
    /// <h1>Validation</h1>
    /// <p>The Text field has a useful set of validations built in:</p>
    /// <ul>
    /// <li><see cref="Ext.form.field.TextConfig.allowBlank">allowBlank</see> for making the field required</li>
    /// <li><see cref="Ext.form.field.TextConfig.minLength">minLength</see> for requiring a minimum value length</li>
    /// <li><see cref="Ext.form.field.TextConfig.maxLength">maxLength</see> for setting a maximum value length (with <see cref="Ext.form.field.TextConfig.enforceMaxLength">enforceMaxLength</see> to add it
    /// as the <c>maxlength</c> attribute on the input element)</li>
    /// <li><see cref="Ext.form.field.TextConfig.regex">regex</see> to specify a custom regular expression for validation</li>
    /// </ul>
    /// <p>In addition, custom validations may be added:</p>
    /// <ul>
    /// <li><see cref="Ext.form.field.TextConfig.vtype">vtype</see> specifies a virtual type implementation from <see cref="Ext.form.field.VTypes">Ext.form.field.VTypes</see> which can contain
    /// custom validation logic</li>
    /// <li><see cref="Ext.form.field.TextConfig.validator">validator</see> allows a custom arbitrary function to be called during validation</li>
    /// </ul>
    /// <p>The details around how and when each of these validation options get used are described in the
    /// documentation for <see cref="Ext.form.field.Text.getErrors">getErrors</see>.</p>
    /// <p>By default, the field value is checked for validity immediately while the user is typing in the
    /// field. This can be controlled with the <see cref="Ext.form.field.TextConfig.validateOnChange">validateOnChange</see>, <see cref="Ext.form.field.TextConfig.checkChangeEvents">checkChangeEvents</see>, and
    /// <see cref="Ext.form.field.TextConfig.checkChangeBuffer">checkChangeBuffer</see> configurations. Also see the details on Form Validation in the
    /// <see cref="Ext.form.Panel">Ext.form.Panel</see> class documentation.</p>
    /// <h1>Masking and Character Stripping</h1>
    /// <p>Text fields can be configured with custom regular expressions to be applied to entered values before
    /// validation: see <see cref="Ext.form.field.TextConfig.maskRe">maskRe</see> and <see cref="Ext.form.field.TextConfig.stripCharsRe">stripCharsRe</see> for details.</p>
    /// <h1>Example usage</h1>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'Contact Info',
    /// width: 300,
    /// bodyPadding: 10,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// items: [{
    /// xtype: 'textfield',
    /// name: 'name',
    /// fieldLabel: 'Name',
    /// allowBlank: false  // requires a non-empty value
    /// }, {
    /// xtype: 'textfield',
    /// name: 'email',
    /// fieldLabel: 'Email Address',
    /// vtype: 'email'  // requires value to be a valid email address format
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Text : Ext.form.field.Base
    {
        /// <summary>
        /// Specify false to validate that the value's length is > 0
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowBlank;
        /// <summary>
        /// The error text to display if the allowBlank validation fails
        /// Defaults to: <c>&quot;This field is required&quot;</c>
        /// </summary>
        public JsString blankText;
        /// <summary>
        /// Specify true to disable input keystroke filtering
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool disableKeyFilter;
        /// <summary>
        /// The CSS class to apply to an empty field to style the emptyText.
        /// This class is automatically added and removed as needed depending on the current field value.
        /// Defaults to: <c>&quot;x-form-empty-field&quot;</c>
        /// </summary>
        public JsString emptyCls;
        /// <summary>
        /// The default text to place into an empty field.
        /// Note that normally this value will be submitted to the server if this field is enabled; to prevent this you can
        /// set the <see cref="Ext.form.action.ActionConfig.submitEmptyText">submitEmptyText</see> option of <see cref="Ext.form.Basic.submit">Ext.form.Basic.submit</see> to
        /// false.
        /// Also note that if you use <see cref="Ext.form.field.TextConfig.inputType">inputType</see>:'file', <see cref="Ext.form.field.TextConfig.emptyText">emptyText</see> is not supported and should be
        /// avoided.
        /// Note that for browsers that support it, setting this property will use the HTML 5 placeholder attribute, and for
        /// older browsers that don't support the HTML 5 placeholder attribute the value will be placed directly into the input
        /// element itself as the raw value. This means that older browsers will obfuscate the <see cref="Ext.form.field.TextConfig.emptyText">emptyText</see> value for
        /// password input fields.
        /// </summary>
        public JsString emptyText;
        /// <summary>
        /// true to enable the proxying of key events for the HTML input field
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool enableKeyEvents;
        /// <summary>
        /// True to set the maxLength property on the underlying input field. Defaults to false
        /// </summary>
        public bool enforceMaxLength;
        /// <summary>
        /// true if this field should automatically grow and shrink to its content
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool grow;
        /// <summary>
        /// A string that will be appended to the field's current value for the purposes of calculating the target field
        /// size. Only used when the grow config is true. Defaults to a single capital "W" (the widest character in
        /// common fonts) to leave enough space for the next typed character and avoid the field value shifting before the
        /// width is adjusted.
        /// Defaults to: <c>&quot;W&quot;</c>
        /// </summary>
        public JsString growAppend;
        /// <summary>
        /// The maximum width to allow when grow = true
        /// Defaults to: <c>800</c>
        /// </summary>
        public JsNumber growMax;
        /// <summary>
        /// The minimum width to allow when grow = true
        /// Defaults to: <c>30</c>
        /// </summary>
        public JsNumber growMin;
        /// <summary>
        /// An input mask regular expression that will be used to filter keystrokes (character being
        /// typed) that do not match.
        /// Note: It does not filter characters already in the input.
        /// </summary>
        public JsRegExp maskRe;
        /// <summary>
        /// Maximum input field length allowed by validation. This behavior is intended to
        /// provide instant feedback to the user by improving usability to allow pasting and editing or overtyping and back
        /// tracking. To restrict the maximum number of characters that can be entered into the field use the
        /// enforceMaxLength option.
        /// Defaults to Number.MAX_VALUE.
        /// </summary>
        public JsNumber maxLength;
        /// <summary>
        /// Error text to display if the maximum length validation fails
        /// Defaults to: <c>&quot;The maximum length for this field is {0}&quot;</c>
        /// </summary>
        public JsString maxLengthText;
        /// <summary>
        /// Minimum input field length required
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber minLength;
        /// <summary>
        /// Error text to display if the minimum length validation fails.
        /// Defaults to: <c>&quot;The minimum length for this field is {0}&quot;</c>
        /// </summary>
        public JsString minLengthText;
        /// <summary>
        /// A JavaScript RegExp object to be tested against the field value during validation.
        /// If the test fails, the field will be marked invalid using
        /// either regexText or invalidText.
        /// </summary>
        public JsRegExp regex;
        /// <summary>
        /// The error text to display if regex is used and the test fails during validation
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString regexText;
        /// <summary>
        /// The CSS class to apply to a required field, i.e. a field where allowBlank is false.
        /// Defaults to: <c>&quot;x-form-required-field&quot;</c>
        /// </summary>
        public JsString requiredCls;
        /// <summary>
        /// true to automatically select any existing field text when the field receives input focus
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool selectOnFocus;
        /// <summary>
        /// An initial value for the 'size' attribute on the text input element. This is only used if the field has no
        /// configured width and is not given a width by its container's layout. Defaults to 20.
        /// Defaults to: <c>20</c>
        /// </summary>
        public JsNumber size;
        /// <summary>
        /// A JavaScript RegExp object used to strip unwanted content from the value
        /// during input. If stripCharsRe is specified,
        /// every character sequence matching stripCharsRe will be removed.
        /// </summary>
        public JsRegExp stripCharsRe;
        /// <summary>
        /// A custom validation function to be called during field validation (getErrors).
        /// If specified, this function will be called first, allowing the developer to override the default validation
        /// process.
        /// This function will be passed the following parameters:
        /// </summary>
        public System.Delegate validator;
        /// <summary>
        /// A validation type name as defined in Ext.form.field.VTypes
        /// </summary>
        public JsString vtype;
        /// <summary>
        /// A custom error message to display in place of the default message provided for the vtype currently
        /// set for this field. Note: only applies if vtype is set, else ignored.
        /// </summary>
        public JsString vtypeText;
        /// <summary>
        /// Automatically grows the field to accomodate the width of the text up to the maximum field width allowed. This
        /// only takes effect if grow = true, and fires the autosize event if the width changes.
        /// </summary>
        public void autoSize(){}
        /// <summary>
        /// If grow=true, invoke the autoSize method when the field's value is changed.
        /// Overrides: <see cref="Ext.form.field.Field.onChange">Ext.form.field.Field.onChange</see>
        /// </summary>
        private void onChange(){}
        /// <summary>
        /// Selects text in this field
        /// </summary>
        /// <param name="start"><p>The index where the selection should start</p>
        /// <p>Defaults to: <c>0</c></p></param>
        /// <param name="end"><p>The index where the selection should end (defaults to the text length)</p>
        /// </param>
        public void selectText(object start=null, object end=null){}
        public Text(Ext.form.field.TextConfig config){}
        public Text(){}
        public Text(params object[] args){}
    }
    #endregion
    #region TextConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TextConfig : Ext.form.field.BaseConfig
    {
        /// <summary>
        /// Specify false to validate that the value's length is > 0
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowBlank;
        /// <summary>
        /// The error text to display if the allowBlank validation fails
        /// Defaults to: <c>&quot;This field is required&quot;</c>
        /// </summary>
        public JsString blankText;
        /// <summary>
        /// Specify true to disable input keystroke filtering
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool disableKeyFilter;
        /// <summary>
        /// The CSS class to apply to an empty field to style the emptyText.
        /// This class is automatically added and removed as needed depending on the current field value.
        /// Defaults to: <c>&quot;x-form-empty-field&quot;</c>
        /// </summary>
        public JsString emptyCls;
        /// <summary>
        /// The default text to place into an empty field.
        /// Note that normally this value will be submitted to the server if this field is enabled; to prevent this you can
        /// set the <see cref="Ext.form.action.ActionConfig.submitEmptyText">submitEmptyText</see> option of <see cref="Ext.form.Basic.submit">Ext.form.Basic.submit</see> to
        /// false.
        /// Also note that if you use <see cref="Ext.form.field.TextConfig.inputType">inputType</see>:'file', <see cref="Ext.form.field.TextConfig.emptyText">emptyText</see> is not supported and should be
        /// avoided.
        /// Note that for browsers that support it, setting this property will use the HTML 5 placeholder attribute, and for
        /// older browsers that don't support the HTML 5 placeholder attribute the value will be placed directly into the input
        /// element itself as the raw value. This means that older browsers will obfuscate the <see cref="Ext.form.field.TextConfig.emptyText">emptyText</see> value for
        /// password input fields.
        /// </summary>
        public JsString emptyText;
        /// <summary>
        /// true to enable the proxying of key events for the HTML input field
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool enableKeyEvents;
        /// <summary>
        /// True to set the maxLength property on the underlying input field. Defaults to false
        /// </summary>
        public bool enforceMaxLength;
        /// <summary>
        /// true if this field should automatically grow and shrink to its content
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool grow;
        /// <summary>
        /// A string that will be appended to the field's current value for the purposes of calculating the target field
        /// size. Only used when the grow config is true. Defaults to a single capital "W" (the widest character in
        /// common fonts) to leave enough space for the next typed character and avoid the field value shifting before the
        /// width is adjusted.
        /// Defaults to: <c>&quot;W&quot;</c>
        /// </summary>
        public JsString growAppend;
        /// <summary>
        /// The maximum width to allow when grow = true
        /// Defaults to: <c>800</c>
        /// </summary>
        public JsNumber growMax;
        /// <summary>
        /// The minimum width to allow when grow = true
        /// Defaults to: <c>30</c>
        /// </summary>
        public JsNumber growMin;
        /// <summary>
        /// An input mask regular expression that will be used to filter keystrokes (character being
        /// typed) that do not match.
        /// Note: It does not filter characters already in the input.
        /// </summary>
        public JsRegExp maskRe;
        /// <summary>
        /// Maximum input field length allowed by validation. This behavior is intended to
        /// provide instant feedback to the user by improving usability to allow pasting and editing or overtyping and back
        /// tracking. To restrict the maximum number of characters that can be entered into the field use the
        /// enforceMaxLength option.
        /// Defaults to Number.MAX_VALUE.
        /// </summary>
        public JsNumber maxLength;
        /// <summary>
        /// Error text to display if the maximum length validation fails
        /// Defaults to: <c>&quot;The maximum length for this field is {0}&quot;</c>
        /// </summary>
        public JsString maxLengthText;
        /// <summary>
        /// Minimum input field length required
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber minLength;
        /// <summary>
        /// Error text to display if the minimum length validation fails.
        /// Defaults to: <c>&quot;The minimum length for this field is {0}&quot;</c>
        /// </summary>
        public JsString minLengthText;
        /// <summary>
        /// A JavaScript RegExp object to be tested against the field value during validation.
        /// If the test fails, the field will be marked invalid using
        /// either regexText or invalidText.
        /// </summary>
        public JsRegExp regex;
        /// <summary>
        /// The error text to display if regex is used and the test fails during validation
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString regexText;
        /// <summary>
        /// The CSS class to apply to a required field, i.e. a field where allowBlank is false.
        /// Defaults to: <c>&quot;x-form-required-field&quot;</c>
        /// </summary>
        public JsString requiredCls;
        /// <summary>
        /// true to automatically select any existing field text when the field receives input focus
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool selectOnFocus;
        /// <summary>
        /// An initial value for the 'size' attribute on the text input element. This is only used if the field has no
        /// configured width and is not given a width by its container's layout. Defaults to 20.
        /// Defaults to: <c>20</c>
        /// </summary>
        public JsNumber size;
        /// <summary>
        /// A JavaScript RegExp object used to strip unwanted content from the value
        /// during input. If stripCharsRe is specified,
        /// every character sequence matching stripCharsRe will be removed.
        /// </summary>
        public JsRegExp stripCharsRe;
        /// <summary>
        /// A custom validation function to be called during field validation (getErrors).
        /// If specified, this function will be called first, allowing the developer to override the default validation
        /// process.
        /// This function will be passed the following parameters:
        /// </summary>
        public System.Delegate validator;
        /// <summary>
        /// A validation type name as defined in Ext.form.field.VTypes
        /// </summary>
        public JsString vtype;
        /// <summary>
        /// A custom error message to display in place of the default message provided for the vtype currently
        /// set for this field. Note: only applies if vtype is set, else ignored.
        /// </summary>
        public JsString vtypeText;
        public TextConfig(params object[] args){}
    }
    #endregion
    #region TextEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TextEvents : Ext.form.field.BaseEvents
    {
        /// <summary>
        /// Fires when the autoSize function is triggered and the field is resized according to the
        /// grow/growMin/growMax configs as a result. This event provides a hook for the
        /// developer to apply additional logic at runtime to resize the field if needed.
        /// </summary>
        /// <param name="this"><p>This text field</p>
        /// </param>
        /// <param name="width"><p>The new field width</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void autosize(Ext.form.field.Text @this, JsNumber width, object eOpts){}
        /// <summary>
        /// Keydown input field event. This event only fires if enableKeyEvents is set to true.
        /// </summary>
        /// <param name="this"><p>This text field</p>
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void keydown(Ext.form.field.Text @this, EventObject e, object eOpts){}
        /// <summary>
        /// Keypress input field event. This event only fires if enableKeyEvents is set to true.
        /// </summary>
        /// <param name="this"><p>This text field</p>
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void keypress(Ext.form.field.Text @this, EventObject e, object eOpts){}
        /// <summary>
        /// Keyup input field event. This event only fires if enableKeyEvents is set to true.
        /// </summary>
        /// <param name="this"><p>This text field</p>
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void keyup(Ext.form.field.Text @this, EventObject e, object eOpts){}
        public TextEvents(params object[] args){}
    }
    #endregion
}
