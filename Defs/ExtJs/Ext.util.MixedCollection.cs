//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region MixedCollection
    /// <inheritdocs />
    /// <summary>
    /// <p>
    /// Represents a collection of a set of key and value pairs. Each key in the MixedCollection
    /// must be unique, the same key cannot exist twice. This collection is ordered, items in the
    /// collection can be accessed by index  or via the key. Newly added items are added to
    /// the end of the collection. This class is similar to <see cref="Ext.util.HashMap">Ext.util.HashMap</see> however it
    /// is heavier and provides more functionality. Sample usage:
    /// <pre><code>var coll = new <see cref="Ext.util.MixedCollection">Ext.util.MixedCollection</see>();
    /// coll.add('key1', 'val1');
    /// coll.add('key2', 'val2');
    /// coll.add('key3', 'val3');
    /// console.log(coll.get('key1')); // prints 'val1'
    /// console.log(coll.indexOfKey('key3')); // prints 2
    /// </code></pre>
    /// <p>
    /// The MixedCollection also has support for sorting and filtering of the values in the collection.
    /// <pre><code>var coll = new <see cref="Ext.util.MixedCollection">Ext.util.MixedCollection</see>();
    /// coll.add('key1', 100);
    /// coll.add('key2', -100);
    /// coll.add('key3', 17);
    /// coll.add('key4', 0);
    /// var biggerThanZero = coll.filterBy(function(value){
    /// return value > 0;
    /// });
    /// console.log(biggerThanZero.getCount()); // prints 2
    /// </code></pre>
    /// </p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class MixedCollection : AbstractMixedCollection, Sortable
    {
        /// <summary>
        /// The default sort direction to use if one is not specified.
        /// Defaults to: <c>&quot;ASC&quot;</c>
        /// </summary>
        public JsString defaultSortDirection{get;set;}
        /// <summary>
        /// true in this class to identify an object as an instantiated Sortable, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isSortable{get;set;}
        /// <summary>
        /// The property in each item that contains the data to sort.
        /// </summary>
        public JsString sortRoot{get;set;}
        /// <summary>
        /// The collection of Sorters currently applied to this Store
        /// </summary>
        public MixedCollection sorters{get;set;}
        /// <summary>
        /// Creates new MixedCollection.
        /// </summary>
        /// <param name="allowFunctions"><p>Specify <tt>true</tt> if the <see cref="Ext.util.MixedCollection.addAll">addAll</see>
        /// function should add function references to the collection. Defaults to
        /// <tt>false</tt>.</p>
        /// </param>
        /// <param name="keyFn"><p>A function that can accept an item of the type(s) stored in this MixedCollection
        /// and return the key value for that item.  This is used when available to look up the key on items that
        /// were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
        /// equivalent to providing an implementation for the <see cref="Ext.util.MixedCollection.getKey">getKey</see> method.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public MixedCollection(bool allowFunctions, System.Delegate keyFn){}
        /// <summary>
        /// Performs the actual sorting based on a direction and a sorting function. Internally,
        /// this creates a temporary array of all items in the MixedCollection, sorts it and then writes
        /// the sorted array data back into this.items and this.keys
        /// </summary>
        /// <param name="property"><p>Property to sort by ('key', 'value', or 'index')</p>
        /// </param>
        /// <param name="dir"><p>Direction to sort 'ASC' or 'DESC'. Defaults to 'ASC'.</p>
        /// </param>
        /// <param name="fn"><p>Comparison function that defines the sort order.
        /// Defaults to sorting by numeric value.</p>
        /// </param>
        private void _sort(JsString property, object dir=null, System.Delegate fn=null){}
        /// <summary>
        /// Normalizes an array of sorter objects, ensuring that they are all Ext.util.Sorter instances
        /// </summary>
        /// <param name="sorters"><p>The sorters array</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Sorter">Ext.util.Sorter</see>[]</span><div><p>Array of <see cref="Ext.util.Sorter">Ext.util.Sorter</see> objects</p>
        /// </div>
        /// </returns>
        public virtual Sorter[] decodeSorters(JsArray<Object> sorters){return null;}
        /// <summary>
        /// Calculates the insertion index of the new item based upon the comparison function passed, or the current sort order.
        /// </summary>
        /// <param name="newItem"><p>The new object to find the insertion position of.</p>
        /// </param>
        /// <param name="sorterFn"><p>The function to sort by. This is the same as the sorting function
        /// passed to <see cref="Ext.util.MixedCollection.sortBy">sortBy</see>. It accepts 2 items from this MixedCollection, and returns -1 0, or 1
        /// depending on the relative sort positions of the 2 compared items.</p>
        /// <p>If omitted, a function <see cref="Ext.util.MixedCollection.generateComparator">generated</see> from the currently defined set of
        /// <see cref="Ext.util.MixedCollection.sorters">sorters</see> will be used.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The insertion point to add the new item into this MixedCollection at using <see cref="Ext.util.MixedCollection.insert">insert</see></p>
        /// </div>
        /// </returns>
        public JsNumber findInsertionIndex(object newItem, object sorterFn=null){return null;}
        /// <summary>
        /// Returns a comparator function which compares two items and returns -1, 0, or 1 depending
        /// on the currently defined set of sorters.
        /// If there are no <see cref="Ext.util.Sortable.sorters">sorters</see> defined, it returns a function which returns <c>0</c> meaning that no sorting will occur.
        /// </summary>
        public virtual void generateComparator(){}
        /// <summary>
        /// Gets the first sorter from the sorters collection, excluding
        /// any groupers that may be in place
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.Sorter">Ext.util.Sorter</see></span><div><p>The sorter, null if none exist</p>
        /// </div>
        /// </returns>
        public virtual Sorter getFirstSorter(){return null;}
        /// <summary>
        /// Performs initialization of this mixin. Component classes using this mixin should call this method during their
        /// own initialization.
        /// </summary>
        public virtual void initSortable(){}
        /// <summary>
        /// Reorders each of the items based on a mapping from old index to new index. Internally this
        /// just translates into a sort. The 'sort' event is fired whenever reordering has occured.
        /// </summary>
        /// <param name="mapping"><p>Mapping from old item index to new item index</p>
        /// </param>
        public void reorder(object mapping){}
        /// <summary>
        /// Sorts the data in the Store by one or more of its properties. Example usage:
        /// <code>//sort by a single field
        /// myStore.sort('myField', 'DESC');
        /// //sorting by multiple fields
        /// myStore.sort([
        /// {
        /// property : 'age',
        /// direction: 'ASC'
        /// },
        /// {
        /// property : 'name',
        /// direction: 'DESC'
        /// }
        /// ]);
        /// </code>
        /// Internally, Store converts the passed arguments into an array of <see cref="Ext.util.Sorter">Ext.util.Sorter</see> instances, and delegates
        /// the actual sorting to its internal <see cref="Ext.util.MixedCollection">Ext.util.MixedCollection</see>.
        /// When passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:
        /// <code>store.sort('myField');
        /// store.sort('myField');
        /// </code>
        /// Is equivalent to this code, because Store handles the toggling automatically:
        /// <code>store.sort('myField', 'ASC');
        /// store.sort('myField', 'DESC');
        /// </code>
        /// </summary>
        /// <param name="sorters"><p>Either a string name of one of the fields in this Store's configured
        /// <see cref="Ext.data.Model">Model</see>, or an array of sorter configurations.</p>
        /// </param>
        /// <param name="direction"><p>The overall direction to sort the data by.</p>
        /// <p>Defaults to: <c>&quot;ASC&quot;</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.util.Sorter">Ext.util.Sorter</see>[]</span><div>
        /// </div>
        /// </returns>
        public virtual Sorter[] sort(object sorters=null, object direction=null){return null;}
        /// <summary>
        /// Sorts the collection by a single sorter function
        /// </summary>
        /// <param name="sorterFn"><p>The function to sort by</p>
        /// </param>
        public void sortBy(System.Delegate sorterFn){}
        /// <summary>
        /// Sorts this collection by keys.
        /// </summary>
        /// <param name="direction"><p>'ASC' or 'DESC'. Defaults to 'ASC'.</p>
        /// </param>
        /// <param name="fn"><p>Comparison function that defines the sort order.
        /// Defaults to sorting by case insensitive string.</p>
        /// </param>
        public void sortByKey(object direction=null, System.Delegate fn=null){}
        public MixedCollection(MixedCollectionConfig config){}
        public MixedCollection(){}
        public MixedCollection(params object[] args){}
    }
    #endregion
    #region MixedCollectionConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MixedCollectionConfig : AbstractMixedCollectionConfig
    {
        public MixedCollectionConfig(params object[] args){}
    }
    #endregion
    #region MixedCollectionEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MixedCollectionEvents : AbstractMixedCollectionEvents
    {
        public MixedCollectionEvents(params object[] args){}
    }
    #endregion
}
