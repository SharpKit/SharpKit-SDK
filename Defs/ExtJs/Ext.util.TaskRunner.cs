//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region TaskRunner
    /// <inheritdocs />
    /// <summary>
    /// <p>Provides the ability to execute one or more arbitrary tasks in a asynchronous manner.
    /// Generally, you can use the singleton <see cref="Ext.TaskManager">Ext.TaskManager</see> instead, but if needed,
    /// you can create separate instances of TaskRunner. Any number of separate tasks can be
    /// started at any time and will run independently of each other.</p>
    /// <p>Example usage:</p>
    /// <pre><code> // Start a simple clock task that updates a div once per second
    /// var updateClock = function () {
    /// <see cref="Ext.ExtContext.fly">Ext.fly</see>('clock').update(new Date().format('g:i:s A'));
    /// }
    /// var runner = new <see cref="Ext.util.TaskRunner">Ext.util.TaskRunner</see>();
    /// var task = runner.start({
    /// run: updateClock,
    /// interval: 1000
    /// }
    /// </code></pre>
    /// <p>The equivalent using TaskManager:</p>
    /// <pre><code> var task = <see cref="Ext.TaskManager.start">Ext.TaskManager.start</see>({
    /// run: updateClock,
    /// interval: 1000
    /// });
    /// </code></pre>
    /// <p>To end a running task:</p>
    /// <pre><code> <see cref="Ext.TaskManager.stop">Ext.TaskManager.stop</see>(task);
    /// </code></pre>
    /// <p>If a task needs to be started and stopped repeated over time, you can create a
    /// <see cref="Ext.util.TaskRunner.Task">Task</see> instance.</p>
    /// <pre><code> var task = runner.newTask({
    /// run: function () {
    /// // useful code
    /// },
    /// interval: 1000
    /// });
    /// task.start();
    /// // ...
    /// task.stop();
    /// // ...
    /// task.start();
    /// </code></pre>
    /// <p>A re-usable, one-shot task can be managed similar to the above:</p>
    /// <pre><code> var task = runner.newTask({
    /// run: function () {
    /// // useful code to run once
    /// },
    /// repeat: 1
    /// });
    /// task.start();
    /// // ...
    /// task.start();
    /// </code></pre>
    /// <p>See the <see cref="Ext.util.TaskRunner.start">start</see> method for details about how to configure a task object.</p>
    /// <p>Also see <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see>.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class TaskRunner : Ext.Base
    {
        /// <summary>
        /// The timer resolution.
        /// Defaults to: <c>10</c>
        /// </summary>
        public JsNumber interval;
        /// <summary>
        /// The id of the current timer.
        /// Defaults to: <c>null</c>
        /// </summary>
        private JsObject timerId{get;set;}
        /// <summary>
        /// Parameters<li><span>interval</span> : <see cref="Number">Number</see>/<see cref="Object">Object</see> (optional)<div><p>The minimum precision in milliseconds supported by this
        /// TaskRunner instance. Alternatively, a config object to apply to the new instance.</p>
        /// <p>Defaults to: <c>10</c></p></div></li>
        /// </summary>
        /// <param name="interval"><p>The minimum precision in milliseconds supported by this
        /// TaskRunner instance. Alternatively, a config object to apply to the new instance.</p>
        /// <p>Defaults to: <c>10</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public TaskRunner(object interval=null){}
        /// <summary>
        /// Creates a new Task instance. These instances can
        /// be easily started and stopped.
        /// </summary>
        /// <param name="config"><p>The config object. For details on the supported properties,
        /// see <see cref="Ext.util.TaskRunner.start">start</see>.</p>
        /// </param>
        public void newTask(object config){}
        /// <summary>
        /// Starts a new task.
        /// Before each invocation, Ext injects the property <c>taskRunCount</c> into the task object
        /// so that calculations based on the repeat count can be performed.
        /// The returned task will contain a <c>destroy</c> method that can be used to destroy the
        /// task and cancel further calls. This is equivalent to the <see cref="Ext.util.TaskRunner.stop">stop</see> method.
        /// </summary>
        /// <param name="task"><p>A config object that supports the following properties:</p>
        /// <ul><li><span>run</span> : <see cref="Function">Function</see><div><p>The function to execute each time the task is invoked. The
        /// function will be called at each interval and passed the <c>args</c> argument if specified,
        /// and the current invocation count if not.</p>
        /// <p>If a particular scope (<c>this</c> reference) is required, be sure to specify it using
        /// the <c>scope</c> argument.</p>
        /// <h3>Parameters</h3><ul></ul><h3>Returns</h3><ul><li><span><see cref="bool">Boolean</see></span><div><p><c>false</c> from this function to terminate the task.</p>
        /// </div></li></ul></div></li><li><span>onError</span> : <see cref="Function">Function</see><div><p>The function to execute in case of unhandled
        /// error on task.run.</p>
        /// </div></li><li><span>interval</span> : <see cref="Number">Number</see><div><p>The frequency in milliseconds with which the task
        /// should be invoked.</p>
        /// </div></li><li><span>args</span> : <see cref="Object">Object</see>[]<div><p>An array of arguments to be passed to the function
        /// specified by <c>run</c>. If not specified, the current invocation count is passed.</p>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which to execute the
        /// <c>run</c> function. Defaults to the task config object.</p>
        /// </div></li><li><span>duration</span> : <see cref="Number">Number</see><div><p>The length of time in milliseconds to invoke the task
        /// before stopping automatically (defaults to indefinite).</p>
        /// </div></li><li><span>repeat</span> : <see cref="Number">Number</see><div><p>The number of times to invoke the task before stopping
        /// automatically (defaults to indefinite).</p>
        /// </div></li></ul></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The task</p>
        /// </div>
        /// </returns>
        public object start(object task=null){return null;}
        /// <summary>
        /// Stops an existing running task.
        /// </summary>
        /// <param name="task"><p>The task to stop</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The task</p>
        /// </div>
        /// </returns>
        public object stop(object task){return null;}
        /// <summary>
        /// Stops all tasks that are currently running.
        /// </summary>
        public void stopAll(){}
        public TaskRunner(TaskRunnerConfig config){}
        public TaskRunner(params object[] args){}
        /// <summary>
        /// <p>Instances of this class are created by <see cref="Ext.util.TaskRunner.newTask">Ext.util.TaskRunner.newTask</see> method.</p>
        /// <p>For details on config properties, see <see cref="Ext.util.TaskRunner.start">Ext.util.TaskRunner.start</see>.</p>
        /// </summary>
        [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
        public partial class Task
        {
            /// <summary>
            /// Override default behavior
            /// Defaults to: <c>false</c>
            /// </summary>
            public bool fireOnStart{get;set;}
            /// <summary>
            /// This flag is set to true by stop.
            /// Defaults to: <c>true</c>
            /// </summary>
            private bool stopped{get;set;}
            /// <summary>
            /// Destroys this instance, stopping this task's execution.
            /// </summary>
            public void destroy(){}
            /// <summary>
            /// Restarts this task, clearing it duration, expiration and run count.
            /// </summary>
            /// <param name="interval"><p>Optionally reset this task's interval.</p>
            /// </param>
            public void restart(object interval=null){}
            /// <summary>
            /// Starts this task if it is not already started.
            /// </summary>
            /// <param name="interval"><p>Optionally reset this task's interval.</p>
            /// </param>
            public void start(object interval=null){}
            /// <summary>
            /// Stops this task.
            /// </summary>
            public void stop(){}
            public Task(TaskConfig config){}
            public Task(){}
            public Task(params object[] args){}
        }
        [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
        public partial class TaskConfig
        {
            public TaskConfig(params object[] args){}
        }
        [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
        public partial class TaskEvents
        {
            public TaskEvents(params object[] args){}
        }
    }
    #endregion
    #region TaskRunnerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TaskRunnerConfig : Ext.BaseConfig
    {
        /// <summary>
        /// The timer resolution.
        /// Defaults to: <c>10</c>
        /// </summary>
        public JsNumber interval;
        public TaskRunnerConfig(params object[] args){}
    }
    #endregion
    #region TaskRunnerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TaskRunnerEvents : Ext.BaseEvents
    {
        public TaskRunnerEvents(params object[] args){}
    }
    #endregion
}
