//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region MessageBox
    /// <inheritdocs />
    /// <summary>
    /// <p>Singleton instance of <see cref="Ext.window.MessageBox">Ext.window.MessageBox</see>.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class MessageBox : Ext.window.MessageBox
    {
        /// <summary>
        /// A string component id or the numeric index of the component that should be
        /// initially activated within the container's layout on render.  For example,
        /// activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the
        /// container's collection).  activeItem only applies to layout styles that can
        /// display items one at a time (like Ext.layout.container.Card and
        /// Ext.layout.container.Fit).
        /// </summary>
        public static object activeItem;
        /// <summary>
        /// Defines the anchoring size of container.
        /// Either a number to define the width of the container or an object with width and height fields.
        /// </summary>
        public static object anchorSize;
        /// <summary>
        /// true to animate the transition when the panel is collapsed, false to skip the animation (defaults to true
        /// if the Ext.fx.Anim class is available, otherwise false). May also be specified as the animation
        /// duration in milliseconds.
        /// </summary>
        public static bool animCollapse;
        /// <summary>
        /// Id or element from which the window should animate while opening.
        /// Defaults to: <c>null</c>
        /// </summary>
        public static object animateTarget;
        /// <summary>
        /// If true the container will automatically destroy any contained component that is removed
        /// from it, else destruction must be handled manually.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool autoDestroy;
        /// <summary>
        /// A tag name or DomHelper spec used to create the Element which will
        /// encapsulate this Component.
        /// You do not normally need to specify this. For the base classes <see cref="Ext.Component">Ext.Component</see> and
        /// <see cref="Ext.container.Container">Ext.container.Container</see>, this defaults to <strong>'div'</strong>. The more complex Sencha classes use a more
        /// complex DOM structure specified by their own <see cref="Ext.AbstractComponentConfig.renderTpl">renderTpl</see>s.
        /// This is intended to allow the developer to create application-specific utility Components encapsulated by
        /// different DOM elements. Example usage:
        /// <code>{
        /// xtype: 'component',
        /// autoEl: {
        /// tag: 'img',
        /// src: 'http://www.example.com/example.jpg'
        /// }
        /// }, {
        /// xtype: 'component',
        /// autoEl: {
        /// tag: 'blockquote',
        /// html: 'autoEl is cool!'
        /// }
        /// }, {
        /// xtype: 'container',
        /// autoEl: 'ul',
        /// cls: 'ux-unordered-list',
        /// items: {
        /// xtype: 'component',
        /// autoEl: 'li',
        /// html: 'First list item'
        /// }
        /// }
        /// </code>
        /// </summary>
        public static object autoEl;
        /// <summary>
        /// An alias for loader config which also allows to specify just a string which will be
        /// used as the url that's automatically loaded:
        /// <code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.Component">Ext.Component</see>', {
        /// autoLoad: 'content.html',
        /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
        /// });
        /// </code>
        /// The above is the same as:
        /// <code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.Component">Ext.Component</see>', {
        /// loader: {
        /// url: 'content.html',
        /// autoLoad: true
        /// },
        /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
        /// });
        /// </code>
        /// Don't use it together with <see cref="Ext.AbstractComponentConfig.loader">loader</see> config.
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.AbstractComponentConfig.loader">loader</see> config instead.</p>
        /// </summary>
        public static object autoLoad;
        /// <summary>
        /// Windows render to the body on first show.
        /// This config is intended mainly for non-<see cref="Ext.window.Window">floating</see> Components which may or may not be shown. Instead of using
        /// <see cref="Ext.window.WindowConfig.renderTo">renderTo</see> in the configuration, and rendering upon construction, this allows a Component to render itself
        /// upon first <em><see cref="Ext.Component.show">show</see></em>. If <see cref="Ext.window.Window">floating</see> is true, the value of this config is omited as if it is <c>true</c>.
        /// Specify as <c>true</c> to have this Component render to the document body upon first show.
        /// Specify as an element, or the ID of an element to have this Component render to a specific element upon first
        /// show.
        /// Defaults to: <c>true</c>Overrides: <see cref="Ext.AbstractComponentConfig.autoRender">Ext.AbstractComponent.autoRender</see>
        /// </summary>
        public static bool autoRender;
        /// <summary>
        /// true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary,
        /// false to clip any overflowing content.
        /// This should not be combined with overflowX or  overflowY.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool autoScroll;
        /// <summary>
        /// True to automatically show the component upon creation. This config option may only be used for
        /// floating components or components that use autoRender. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool autoShow;
        /// <summary>
        /// The base CSS class to apply to this panel's element.
        /// Defaults to: <c>&quot;x-window&quot;</c>Overrides: <see cref="Ext.panel.AbstractPanelConfig.baseCls">Ext.panel.AbstractPanel.baseCls</see>
        /// </summary>
        public static JsString baseCls;
        /// <summary>
        /// Convenience config. Short for 'Bottom Bar'.
        /// <code>bbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public static object bbar;
        /// <summary>
        /// A shortcut to add or remove the border on the body of a panel. This only applies to a panel which has the frame configuration set to true.
        /// Defaults to undefined.
        /// </summary>
        public static bool bodyBorder;
        /// <summary>
        /// A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element.
        /// The following examples are all valid:
        /// <code>bodyCls: 'foo'
        /// bodyCls: 'foo bar'
        /// bodyCls: ['foo', 'bar']
        /// </code>
        /// </summary>
        public static object bodyCls;
        /// <summary>
        /// A shortcut for setting a padding style on the body element. The value can either be
        /// a number to be applied to all sides, or a normal css string describing padding.
        /// Defaults to undefined.
        /// </summary>
        public static object bodyPadding;
        /// <summary>
        /// Custom CSS styles to be applied to the panel's body element, which can be supplied as a valid CSS style string,
        /// an object containing style property name/value pairs or a function that returns such a string or object.
        /// For example, these two formats are interpreted to be equivalent:
        /// <code>bodyStyle: 'background:#ffc; padding:10px;'
        /// bodyStyle: {
        /// background: '#ffc',
        /// padding: '10px'
        /// }
        /// </code>
        /// </summary>
        public static object bodyStyle;
        /// <summary>
        /// Specifies the border size for this component. The border can be a single numeric value to apply to all sides or it can
        /// be a CSS style specification for each style, for example: '10 5 3 10'.
        /// For components that have no border by default, setting this won't make the border appear by itself.
        /// You also need to specify border color and style:
        /// <code>border: 5,
        /// style: {
        /// borderColor: 'red',
        /// borderStyle: 'solid'
        /// }
        /// </code>
        /// To turn off the border, use <c>border: false</c>.
        /// </summary>
        public static object border;
        /// <summary>
        /// An array of events that, when fired, should be bubbled to any parent container.
        /// See Ext.util.Observable.enableBubble.
        /// Defaults to: <c>[&quot;add&quot;, &quot;remove&quot;]</c>
        /// </summary>
        public static JsString bubbleEvents;
        /// <summary>
        /// The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
        /// 'right' for buttons/fbar, 'left' for other toolbar types).
        /// <strong>NOTE:</strong> The prefered way to specify toolbars is to use the dockedItems config. Instead of buttonAlign you
        /// would add the layout: { pack: 'start' | 'center' | 'end' } option to the dockedItem config.
        /// </summary>
        public static JsString buttonAlign;
        /// <summary>
        /// Convenience config used for adding buttons docked to the bottom of the panel. This is a
        /// synonym for the fbar config.
        /// <code>buttons: [
        /// { text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// ui: 'footer',
        /// defaults: {minWidth: <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see>},
        /// items: [
        /// { xtype: 'component', flex: 1 },
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// The <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see> is used as the default <see cref="Ext.button.ButtonConfig.minWidth">minWidth</see> for
        /// each of the buttons in the buttons toolbar.
        /// </summary>
        public static object buttons;
        /// <summary>
        /// An array describing the child elements of the Component. Each member of the array
        /// is an object with these properties:
        /// <li><c>name</c> - The property name on the Component for the child element.</li>
        /// <li><c>itemId</c> - The id to combine with the Component's id that is the id of the child element.</li>
        /// <li><c>id</c> - The id of the child element.</li>
        /// If the array member is a string, it is equivalent to <c>{ name: m, itemId: m }</c>.
        /// For example, a Component which renders a title and body text:
        /// <code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.Component">Ext.Component</see>', {
        /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
        /// renderTpl: [
        /// '&lt;h1 id="{id}-title"&gt;{title}&lt;/h1&gt;',
        /// '&lt;p&gt;{msg}&lt;/p&gt;',
        /// ],
        /// renderData: {
        /// title: "Error",
        /// msg: "Something went wrong"
        /// },
        /// childEls: ["title"],
        /// listeners: {
        /// afterrender: function(cmp){
        /// // After rendering the component will have a title property
        /// cmp.title.setStyle({color: "red"});
        /// }
        /// }
        /// });
        /// </code>
        /// A more flexible, but somewhat slower, approach is <see cref="Ext.AbstractComponentConfig.renderSelectors">renderSelectors</see>.
        /// </summary>
        public static JsObject childEls;
        /// <summary>
        /// True to display the 'close' tool button and allow the user to close the window, false to hide the button and
        /// disallow closing the window.
        /// By default, when close is requested by either clicking the close button in the header or pressing ESC when the
        /// Window has focus, the <see cref="Ext.window.Window.close">close</see> method will be called. This will <em><see cref="Ext.Component">destroy</see></em> the
        /// Window and its content meaning that it may not be reused.
        /// To make closing a Window <em>hide</em> the Window so that it may be reused, set <see cref="Ext.window.WindowConfig.closeAction">closeAction</see> to 'hide'.
        /// Defaults to: <c>true</c>Overrides: <see cref="Ext.panel.PanelConfig.closable">Ext.panel.Panel.closable</see>
        /// </summary>
        public static bool closable;
        /// <summary>
        /// The action to take when the close header tool is clicked:
        /// <li><p><strong><c>'<see cref="Ext.panel.Panel">destroy</see>'</c></strong> :</p>
        /// <p><see cref="Ext.panel.Panel.remove">remove</see> the window from the DOM and <see cref="Ext.Component">destroy</see> it and all descendant
        /// Components. The window will <strong>not</strong> be available to be redisplayed via the <see cref="Ext.panel.Panel.show">show</see> method.</p></li>
        /// <li><p><strong><c>'<see cref="Ext.panel.Panel.hide">hide</see>'</c></strong> :</p>
        /// <p><see cref="Ext.panel.Panel.hide">hide</see> the window by setting visibility to hidden and applying negative offsets. The window will be
        /// available to be redisplayed via the <see cref="Ext.panel.Panel.show">show</see> method.</p></li>
        /// <strong>Note:</strong> This behavior has changed! setting <em>does</em> affect the <see cref="Ext.panel.Panel.close">close</see> method which will invoke the
        /// approriate closeAction.
        /// Defaults to: <c>&quot;destroy&quot;</c>
        /// </summary>
        public static JsString closeAction;
        /// <summary>
        /// An optional extra CSS class that will be added to this component's Element. This can be useful
        /// for adding customized styles to the component or any of its children using standard CSS rules.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public static JsString cls;
        /// <summary>
        /// The direction to collapse the Panel when the toggle button is clicked.
        /// Defaults to the <see cref="Ext.panel.PanelConfig.headerPosition">headerPosition</see>
        /// <strong>Important: This config is <em>ignored</em> for <see cref="Ext.panel.PanelConfig.collapsible">collapsible</see> Panels which are direct child items of a <see cref="Ext.layout.container.Border">border layout</see>.</strong>
        /// Specify as <c>'top'</c>, <c>'bottom'</c>, <c>'left'</c> or <c>'right'</c>.
        /// </summary>
        public static JsString collapseDirection;
        /// <summary>
        /// true to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in
        /// the panel's title bar, false to render it last.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool collapseFirst;
        /// <summary>
        /// Important: this config is only effective for collapsible Panels which are direct child items of a
        /// border layout.
        /// When <em>not</em> a direct child item of a <see cref="Ext.layout.container.Border">border layout</see>, then the Panel's header
        /// remains visible, and the body is collapsed to zero dimensions. If the Panel has no header, then a new header
        /// (orientated correctly depending on the <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>) will be inserted to show a the title and a re-
        /// expand tool.
        /// When a child item of a <see cref="Ext.layout.container.Border">border layout</see>, this config has three possible values:
        /// <li><p><c>undefined</c> - When collapsed, a placeholder <see cref="Ext.panel.Header">Header</see> is injected into the layout to
        /// represent the Panel and to provide a UI with a Tool to allow the user to re-expand the Panel.</p></li>
        /// <li><p><c>"header"</c> - The Panel collapses to leave its header visible as when not inside a
        /// <see cref="Ext.layout.container.Border">border layout</see>.</p></li>
        /// <li><p><c>"mini"</c> - The Panel collapses without a visible header.</p></li>
        /// </summary>
        public static JsString collapseMode;
        /// <summary>
        /// True to render the window collapsed, false to render it expanded. Note that if expandOnShow
        /// is true (the default) it will override the collapsed config and the window will always be
        /// expanded when shown.
        /// Defaults to: <c>false</c>Overrides: <see cref="Ext.panel.PanelConfig.collapsed">Ext.panel.Panel.collapsed</see>
        /// </summary>
        public static bool collapsed;
        /// <summary>
        /// A CSS class to add to the panel's element after it has been collapsed.
        /// Defaults to: <c>&quot;collapsed&quot;</c>
        /// </summary>
        public static JsString collapsedCls;
        /// <summary>
        /// True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
        /// area. False to keep the panel sized either statically, or by an owning layout manager, with no toggle Tool.
        /// See <see cref="Ext.panel.PanelConfig.collapseMode">collapseMode</see> and <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool collapsible;
        /// <summary>
        /// Defines the column width inside column layout.
        /// Can be specified as a number or as a percentage.
        /// </summary>
        public static object columnWidth;
        /// <summary>
        /// CSS Class to be added to a components root level element to give distinction to it via styling.
        /// </summary>
        public static JsString componentCls;
        /// <summary>
        /// The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout
        /// manager which sizes a Component's internal structure in response to the Component being sized.
        /// Generally, developers will not use this configuration as all provided Components which need their internal
        /// elements sizing (Such as <see cref="Ext.form.field.Base">input fields</see>) come with their own componentLayout managers.
        /// The <see cref="Ext.layout.container.Auto">default layout manager</see> will be used on instances of the base <see cref="Ext.Component">Ext.Component</see>
        /// class which simply sizes the Component's encapsulating element to the height and width specified in the
        /// <see cref="Ext.AbstractComponent.setSize">setSize</see> method.
        /// </summary>
        public static object componentLayout;
        /// <summary>
        /// True to constrain the window within its containing element, false to allow it to fall outside of its containing
        /// element. By default the window will be rendered to document.body. To render and constrain the window within
        /// another element specify renderTo. Optionally the header only can be constrained
        /// using constrainHeader.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool constrain;
        /// <summary>
        /// True to constrain the window header within its containing element (allowing the window body to fall outside of
        /// its containing element) or false to allow the header to fall outside its containing element.
        /// Optionally the entire window can be constrained using constrain.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool constrainHeader;
        /// <summary>
        /// A Region (or an element from which a Region measurement will be read) which is used
        /// to constrain the window.
        /// </summary>
        public static object constrainTo;
        /// <summary>
        /// Specify an existing HTML element, or the id of an existing HTML element to use as the content for this component.
        /// This config option is used to take an existing HTML element and place it in the layout element of a new component
        /// (it simply moves the specified DOM element <em>after the Component is rendered</em> to use as the content.
        /// <strong>Notes:</strong>
        /// The specified HTML element is appended to the layout element of the component <em>after any configured
        /// <see cref="Ext.AbstractComponentConfig.html">HTML</see> has been inserted</em>, and so the document will not contain this element at the time
        /// the <see cref="Ext.AbstractComponentEvents.render">render</see> event is fired.
        /// The specified HTML element used will not participate in any <strong><c><see cref="Ext.container.ContainerConfig.layout">layout</see></c></strong>
        /// scheme that the Component may use. It is just HTML. Layouts operate on child
        /// <strong><c><see cref="Ext.container.ContainerConfig.items">items</see></c></strong>.
        /// Add either the <c>x-hidden</c> or the <c>x-hide-display</c> CSS class to prevent a brief flicker of the content before it
        /// is rendered to the panel.
        /// </summary>
        public static JsString contentEl;
        /// <summary>
        /// The initial set of data to apply to the tpl to update the content area of the Component.
        /// </summary>
        public static JsObject data;
        /// <summary>
        /// This object holds the default weights applied to dockedItems that have no weight. These start with a
        /// weight of 1, to allow negative weights to insert before top items and are odd numbers
        /// so that even weights can be used to get between different dock orders.
        /// To make default docking order match border layout, do this:
        /// <code> Ext.panel.AbstractPanel.prototype.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };
        /// </code>
        /// Changing these defaults as above or individually on this object will effect all Panels.
        /// To change the defaults on a single panel, you should replace the entire object:
        /// <code> initComponent: function () {
        /// // NOTE: Don't change members of defaultDockWeights since the object is shared.
        /// this.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };
        /// this.callParent();
        /// }
        /// </code>
        /// To change only one of the default values, you do this:
        /// <code> initComponent: function () {
        /// // NOTE: Don't change members of defaultDockWeights since the object is shared.
        /// this.defaultDockWeights = <see cref="Ext.ExtContext.applyIf">Ext.applyIf</see>({ top: 10 }, this.defaultDockWeights);
        /// this.callParent();
        /// }
        /// </code>
        /// Defaults to: <c>{top: {render: 1, visual: 1}, left: {render: 3, visual: 5}, right: {render: 5, visual: 7}, bottom: {render: 7, visual: 3}}</c>
        /// </summary>
        public static JsObject defaultDockWeights;
        /// <summary>
        /// Specifies a Component to receive focus when this Window is focused.
        /// This may be one of:
        /// <li>The index of a footer Button.</li>
        /// <li>The id or <see cref="Ext.AbstractComponentConfig.itemId">Ext.AbstractComponent.itemId</see> of a descendant Component.</li>
        /// <li>A Component.</li>
        /// </summary>
        public static object defaultFocus;
        /// <summary>
        /// The default xtype of child Components to create in this Container when
        /// a child item is specified as a raw configuration object, rather than as an instantiated Component.
        /// Defaults to: <c>&quot;panel&quot;</c>
        /// </summary>
        public static JsString defaultType;
        /// <summary>
        /// This option is a means of applying default settings to all added items whether added
        /// through the items config or via the add or insert methods.
        /// Defaults are applied to both config objects and instantiated components conditionally
        /// so as not to override existing properties in the item (see <see cref="Ext.ExtContext.applyIf">Ext.applyIf</see>).
        /// If the defaults option is specified as a function, then the function will be called
        /// using this Container as the scope (<c>this</c> reference) and passing the added item as
        /// the first parameter. Any resulting object from that call is then applied to the item
        /// as default properties.
        /// For example, to automatically apply padding to the body of each of a set of
        /// contained <see cref="Ext.panel.Panel">Ext.panel.Panel</see> items, you could pass:
        /// <c>defaults: {bodyStyle:'padding:15px'}</c>.
        /// Usage:
        /// <code>defaults: { // defaults are applied to items, not the container
        /// autoScroll: true
        /// },
        /// items: [
        /// // default will not be applied here, panel1 will be autoScroll: false
        /// {
        /// xtype: 'panel',
        /// id: 'panel1',
        /// autoScroll: false
        /// },
        /// // this component will have autoScroll: true
        /// new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// id: 'panel2'
        /// })
        /// ]
        /// </code>
        /// </summary>
        public static object defaults;
        /// <summary>
        /// True to move any component to the detachedBody when the component is
        /// removed from this container. This option is only applicable when the component is not destroyed while
        /// being removed, see autoDestroy and remove. If this option is set to false, the DOM
        /// of the component will remain in the current place until it is explicitly moved.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool detachOnRemove;
        /// <summary>
        /// True to disable the component.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool disabled;
        /// <summary>
        /// CSS class to add when the Component is disabled. Defaults to 'x-item-disabled'.
        /// Defaults to: <c>&quot;x-item-disabled&quot;</c>
        /// </summary>
        public static JsString disabledCls;
        /// <summary>
        /// A component or series of components to be added as docked items to this panel. The docked items can be docked to
        /// either the top, right, left or bottom of a panel. This is typically used for things like toolbars or tab bars:
        /// <code>var panel = new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'top',
        /// items: [{
        /// text: 'Docked to the top'
        /// }]
        /// }]
        /// });
        /// </code>
        /// Overrides: <see cref="Ext.panel.AbstractPanelConfig.dockedItems">Ext.panel.AbstractPanel.dockedItems</see>
        /// </summary>
        public static object dockedItems;
        /// <summary>
        /// True to always expand the window when it is displayed, false to keep it in its current state (which may be
        /// collapsed) when displayed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool expandOnShow;
        /// <summary>
        /// Convenience config used for adding items to the bottom of the panel. Short for Footer Bar.
        /// <code>fbar: [
        /// { type: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// ui: 'footer',
        /// defaults: {minWidth: <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see>},
        /// items: [
        /// { xtype: 'component', flex: 1 },
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// The <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see> is used as the default <see cref="Ext.button.ButtonConfig.minWidth">minWidth</see> for
        /// each of the buttons in the fbar.
        /// </summary>
        public static object fbar;
        /// <summary>
        /// Important: This config is only effective for collapsible Panels which are direct child items of a
        /// border layout.
        /// true to allow clicking a collapsed Panel's <see cref="Ext.panel.PanelConfig.placeholder">placeholder</see> to display the Panel floated above the layout,
        /// false to force the user to fully expand a collapsed region by clicking the expand button to see it again.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool floatable;
        /// <summary>
        /// Defaults to: <c>true</c>Overrides: <see cref="Ext.ComponentConfig.floating">Ext.Component.floating</see>
        /// </summary>
        public static bool floating;
        /// <summary>
        /// Specifies whether the floated component should be automatically focused when
        /// it is brought to the front.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool focusOnToFront;
        /// <summary>
        /// When inside FormPanel, any component configured with formBind: true will
        /// be enabled/disabled depending on the validity state of the form.
        /// See Ext.form.Panel for more information and example.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool formBind;
        /// <summary>
        /// True to apply a frame to the panel.
        /// Defaults to: <c>false</c>Overrides: <see cref="Ext.AbstractComponentConfig.frame">Ext.AbstractComponent.frame</see>
        /// </summary>
        public static bool frame;
        /// <summary>
        /// True to apply a frame to the panel panels header (if 'frame' is true).
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool frameHeader;
        /// <summary>
        /// Pass as false to prevent a Header from being created and shown.
        /// Pass as a config object (optionally containing an <c>xtype</c>) to custom-configure this Panel's header.
        /// </summary>
        public static object header;
        /// <summary>
        /// Specify as 'top', 'bottom', 'left' or 'right'.
        /// Defaults to: <c>&quot;top&quot;</c>
        /// </summary>
        public static JsString headerPosition;
        /// <summary>
        /// The height of this component in pixels.
        /// </summary>
        public static JsNumber height;
        /// <summary>
        /// Render this Window hidden. If true, the hide method will be called internally.
        /// Defaults to: <c>true</c>Overrides: <see cref="Ext.AbstractComponentConfig.hidden">Ext.AbstractComponent.hidden</see>
        /// </summary>
        public static bool hidden;
        /// <summary>
        /// true to hide the expand/collapse toggle button when collapsible == true, false to display it.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool hideCollapseTool;
        /// <summary>
        /// Windows hide using offsets in order to preserve the scroll positions of their descendants.
        /// A String which specifies how this Component's encapsulating DOM element will be hidden. Values may be:
        /// <li><c>'display'</c> : The Component will be hidden using the <c>display: none</c> style.</li>
        /// <li><c>'visibility'</c> : The Component will be hidden using the <c>visibility: hidden</c> style.</li>
        /// <li><c>'offsets'</c> : The Component will be hidden by absolutely positioning it out of the visible area of the document.
        /// This is useful when a hidden Component must maintain measurable dimensions. Hiding using <c>display</c> results in a
        /// Component having zero dimensions.</li>
        /// Defaults to: <c>&quot;offsets&quot;</c>Overrides: <see cref="Ext.AbstractComponentConfig.hideMode">Ext.AbstractComponent.hideMode</see>
        /// </summary>
        public static JsString hideMode;
        /// <summary>
        /// An HTML fragment, or a DomHelper specification to use as the layout element content.
        /// The HTML content is added after the component is rendered, so the document will not contain this HTML at the time
        /// the render event is fired. This content is inserted into the body before any configured contentEl
        /// is appended.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public static object html;
        /// <summary>
        /// Path to image for an icon in the header. Used for displaying an icon to the left of a title.
        /// </summary>
        public static JsString icon;
        /// <summary>
        /// CSS class for an icon in the header. Used for displaying an icon to the left of a title.
        /// </summary>
        public static JsString iconCls;
        /// <summary>
        /// The unique id of this component instance.
        /// It should not be necessary to use this configuration except for singleton objects in your application. Components
        /// created with an id may be accessed globally using <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>.
        /// Instead of using assigned ids, use the <see cref="Ext.AbstractComponentConfig.itemId">itemId</see> config, and <see cref="Ext.ComponentQuery">ComponentQuery</see>
        /// which provides selector-based searching for Sencha Components analogous to DOM querying. The <see cref="Ext.container.Container">Container</see> class contains <see cref="Ext.container.Container.down">shortcut methods</see> to query
        /// its descendant Components by selector.
        /// Note that this id will also be used as the element id for the containing HTML element that is rendered to the
        /// page for this component. This allows you to write id-based CSS rules to style the specific instance of this
        /// component uniquely, and also to select sub-elements using this component's id as the parent.
        /// <strong>Note</strong>: to avoid complications imposed by a unique id also see <c><see cref="Ext.AbstractComponentConfig.itemId">itemId</see></c>.
        /// <strong>Note</strong>: to access the container of a Component see <c><see cref="Ext.AbstractComponent.ownerCt">ownerCt</see></c>.
        /// Defaults to an <see cref="Ext.AbstractComponent.getId">auto-assigned id</see>.
        /// </summary>
        public static JsString id;
        /// <summary>
        /// An itemId can be used as an alternative way to get a reference to a component when no object reference is
        /// available. Instead of using an id with Ext.getCmp, use itemId with
        /// Ext.container.Container.getComponent which will retrieve
        /// itemId's or id's. Since itemId's are an index to the container's internal MixedCollection, the
        /// itemId is scoped locally to the container -- avoiding potential conflicts with Ext.ComponentManager
        /// which requires a unique id.
        /// <code>var c = new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({ //
        /// <see cref="Ext.ComponentConfig.height">height</see>: 300,
        /// <see cref="Ext.AbstractComponentConfig.renderTo">renderTo</see>: document.body,
        /// <see cref="Ext.container.ContainerConfig.layout">layout</see>: 'auto',
        /// <see cref="Ext.container.ContainerConfig.items">items</see>: [
        /// {
        /// itemId: 'p1',
        /// <see cref="Ext.panel.PanelConfig.title">title</see>: 'Panel 1',
        /// <see cref="Ext.ComponentConfig.height">height</see>: 150
        /// },
        /// {
        /// itemId: 'p2',
        /// <see cref="Ext.panel.PanelConfig.title">title</see>: 'Panel 2',
        /// <see cref="Ext.ComponentConfig.height">height</see>: 150
        /// }
        /// ]
        /// })
        /// p1 = c.<see cref="Ext.container.Container.getComponent">getComponent</see>('p1'); // not the same as <see cref="Ext.ExtContext.getCmp">Ext.getCmp()</see>
        /// p2 = p1.<see cref="Ext.AbstractComponent.ownerCt">ownerCt</see>.<see cref="Ext.container.Container.getComponent">getComponent</see>('p2'); // reference via a sibling
        /// </code>
        /// Also see <see cref="Ext.AbstractComponentConfig.id">id</see>, <c><see cref="Ext.container.Container.query">Ext.container.Container.query</see></c>, <c><see cref="Ext.container.Container.down">Ext.container.Container.down</see></c> and
        /// <c><see cref="Ext.container.Container.child">Ext.container.Container.child</see></c>.
        /// <strong>Note</strong>: to access the container of an item see <see cref="Ext.AbstractComponent.ownerCt">ownerCt</see>.
        /// </summary>
        public static JsString itemId;
        /// <summary>
        /// Important: In order for child items to be correctly sized and
        /// positioned, typically a layout manager must be specified through
        /// the layout configuration option.
        /// The sizing and positioning of child <see cref="Ext.container.AbstractContainerConfig.items">items</see> is the responsibility of
        /// the Container's layout manager which creates and manages the type of layout
        /// you have in mind.  For example:
        /// If the <see cref="Ext.container.AbstractContainerConfig.layout">layout</see> configuration is not explicitly specified for
        /// a general purpose container (e.g. Container or Panel) the
        /// <see cref="Ext.layout.container.Auto">default layout manager</see> will be used
        /// which does nothing but render child components sequentially into the
        /// Container (no sizing or positioning will be performed in this situation).
        /// <strong>layout</strong> may be specified as either as an Object or as a String:
        /// Specify as an Object
        /// Example usage:
        /// <code>layout: {
        /// type: 'vbox',
        /// align: 'left'
        /// }
        /// </code>
        /// <li><p><strong>type</strong></p>
        /// <p>The layout type to be used for this container.  If not specified,
        /// a default <see cref="Ext.layout.container.Auto">Ext.layout.container.Auto</see> will be created and used.</p>
        /// <p>Valid layout <c>type</c> values are:</p>
        /// <ul>
        /// <li><see cref="Ext.layout.container.Auto">Auto</see> - <strong>Default</strong></li>
        /// <li><see cref="Ext.layout.container.Card">card</see></li>
        /// <li><see cref="Ext.layout.container.Fit">fit</see></li>
        /// <li><see cref="Ext.layout.container.HBox">hbox</see></li>
        /// <li><see cref="Ext.layout.container.VBox">vbox</see></li>
        /// <li><see cref="Ext.layout.container.Anchor">anchor</see></li>
        /// <li><see cref="Ext.layout.container.Table">table</see></li>
        /// </ul>
        /// </li>
        /// <li><p>Layout specific configuration properties</p>
        /// <p>Additional layout specific configuration properties may also be
        /// specified. For complete details regarding the valid config options for
        /// each layout type, see the layout class corresponding to the <c>type</c>
        /// specified.</p></li>
        /// Specify as a String
        /// Example usage:
        /// <code>layout: 'vbox'
        /// </code>
        /// <li><p><strong>layout</strong></p>
        /// <p>The layout <c>type</c> to be used for this container (see list
        /// of valid layout type values above).</p>
        /// <p>Additional layout specific configuration properties. For complete
        /// details regarding the valid config options for each layout type, see the
        /// layout class corresponding to the <c>layout</c> specified.</p></li>
        /// Configuring the default layout type
        /// <code>If a certain Container class has a default layout (For example a <see cref="Ext.toolbar.Toolbar">Toolbar</see>
        /// with a default `Box` layout), then to simply configure the default layout,
        /// use an object, but without the `type` property:
        /// xtype: 'toolbar',
        /// layout: {
        /// pack: 'center'
        /// }
        /// </code>
        /// </summary>
        public static object layout;
        /// <summary>
        /// Convenience config. Short for 'Left Bar' (left-docked, vertical toolbar).
        /// <code>lbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'left',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public static object lbar;
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. This
        /// should be a valid listeners config object as specified in the addListener example for attaching multiple
        /// handlers at once.
        /// <strong>DOM events from Ext JS <see cref="Ext.Component">Components</see></strong>
        /// While <em>some</em> Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
        /// only done when extra value can be added. For example the <see cref="Ext.view.View">DataView</see>'s <strong><c><see cref="Ext.view.ViewEvents.itemclick">itemclick</see></c></strong> event passing the node clicked on. To access DOM events directly from a
        /// child element of a Component, we need to specify the <c>element</c> option to identify the Component property to add a
        /// DOM listener to:
        /// <code>new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// width: 400,
        /// height: 200,
        /// dockedItems: [{
        /// xtype: 'toolbar'
        /// }],
        /// listeners: {
        /// click: {
        /// element: 'el', //bind to the underlying el property on the panel
        /// fn: function(){ console.log('click el'); }
        /// },
        /// dblclick: {
        /// element: 'body', //bind to the underlying body property on the panel
        /// fn: function(){ console.log('dblclick body'); }
        /// }
        /// }
        /// });
        /// </code>
        /// </summary>
        public static JsObject listeners;
        /// <summary>
        /// A configuration object or an instance of a Ext.ComponentLoader to load remote content
        /// for this Component.
        /// <code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.Component">Ext.Component</see>', {
        /// loader: {
        /// url: 'content.html',
        /// autoLoad: true
        /// },
        /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
        /// });
        /// </code>
        /// </summary>
        public static object loader;
        /// <summary>
        /// : When true, the dock component layout writes
        /// height information to the panel's DOM elements based on its shrink wrap height
        /// calculation. This ensures that the browser respects the calculated height.
        /// When false, the dock component layout will not write heights on the panel or its
        /// body element. In some simple layout cases, not writing the heights to the DOM may
        /// be desired because this allows the browser to respond to direct DOM manipulations
        /// (like animations).
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool manageHeight;
        /// <summary>
        /// Specifies the margin for this component. The margin can be a single numeric value to apply to all sides or it can
        /// be a CSS style specification for each style, for example: '10 5 3 10'.
        /// </summary>
        public static object margin;
        /// <summary>
        /// The maximum value in pixels which this Component will set its height to.
        /// <strong>Warning:</strong> This will override any size management applied by layout managers.
        /// </summary>
        public static JsNumber maxHeight;
        /// <summary>
        /// The maximum value in pixels which this Component will set its width to.
        /// <strong>Warning:</strong> This will override any size management applied by layout managers.
        /// </summary>
        public static JsNumber maxWidth;
        /// <summary>
        /// True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button
        /// and disallow maximizing the window. Note that when a window is maximized, the tool button
        /// will automatically change to a 'restore' button with the appropriate behavior already built-in that will restore
        /// the window to its previous size.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool maximizable;
        /// <summary>
        /// True to initially display the window in a maximized state.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool maximized;
        /// <summary>
        /// Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
        /// value for the Ext.button.Button.minWidth config of each Button added to the footer toolbar via the
        /// fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
        /// some other way, e.g. in their own config object or via the defaults of
        /// their parent container.
        /// Defaults to: <c>75</c>
        /// </summary>
        public static JsNumber minButtonWidth;
        /// <summary>
        /// The minimum value in pixels which this Component will set its height to.
        /// <strong>Warning:</strong> This will override any size management applied by layout managers.
        /// </summary>
        public static JsNumber minHeight;
        /// <summary>
        /// The minimum value in pixels which this Component will set its width to.
        /// <strong>Warning:</strong> This will override any size management applied by layout managers.
        /// </summary>
        public static JsNumber minWidth;
        /// <summary>
        /// True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button
        /// and disallow minimizing the window. Note that this button provides no implementation -- the
        /// behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom
        /// minimize behavior implemented for this option to be useful.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool minimizable;
        /// <summary>
        /// True to make the window modal and mask everything behind it when displayed, false to display it without
        /// restricting access to other UI elements.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool modal;
        /// <summary>
        /// Allows override of the built-in processing for the escape key. Default action is to close the Window (performing
        /// whatever action is specified in closeAction. To prevent the Window closing when the escape key is
        /// pressed, specify this as Ext.emptyFn.
        /// </summary>
        public static System.Delegate onEsc;
        /// <summary>
        /// An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element,
        /// and removed when the mouse moves out. This can be useful for adding customized 'active' or 'hover' styles to the
        /// component or any of its children using standard CSS rules.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public static JsString overCls;
        /// <summary>
        /// Possible values are:
        /// * 'auto' to enable automatic horizontal scrollbar (overflow-x: 'auto').
        /// * 'scroll' to always enable horizontal scrollbar (overflow-x: 'scroll').
        /// The default is overflow-x: 'hidden'. This should not be combined with autoScroll.
        /// </summary>
        public static JsString overflowX;
        /// <summary>
        /// Possible values are:
        /// * 'auto' to enable automatic vertical scrollbar (overflow-y: 'auto').
        /// * 'scroll' to always enable vertical scrollbar (overflow-y: 'scroll').
        /// The default is overflow-y: 'hidden'. This should not be combined with autoScroll.
        /// </summary>
        public static JsString overflowY;
        /// <summary>
        /// True to overlap the header in a panel over the framing of the panel itself. This is needed when frame:true (and
        /// is done automatically for you). Otherwise it is undefined. If you manually add rounded corners to a panel header
        /// which does not have frame:true, this will need to be set to true.
        /// </summary>
        public static bool overlapHeader;
        /// <summary>
        /// Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or it
        /// can be a CSS style specification for each style, for example: '10 5 3 10'.
        /// </summary>
        public static object padding;
        /// <summary>
        /// Important: This config is only effective for collapsible Panels which are direct child items of a
        /// border layout when not using the 'header' collapseMode.
        /// <strong>Optional.</strong> A Component (or config object for a Component) to show in place of this Panel when this Panel is
        /// collapsed by a <see cref="Ext.layout.container.Border">border layout</see>. Defaults to a generated <see cref="Ext.panel.Header">Header</see> containing a <see cref="Ext.panel.Tool">Tool</see> to re-expand the Panel.
        /// </summary>
        public static object placeholder;
        /// <summary>
        /// The mode for hiding collapsed panels when
        /// using collapseMode "placeholder".
        /// </summary>
        public static JsNumber placeholderCollapseHideMode;
        /// <summary>
        /// True to render the window body with a transparent background so that it will blend into the framing elements,
        /// false to add a lighter background color to visually highlight the body element and separate it more distinctly
        /// from the surrounding frame.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool plain;
        /// <summary>
        /// An object or array of objects that will provide custom functionality for this component. The only requirement for
        /// a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component
        /// is created, if any plugins are available, the component will call the init method on each plugin, passing a
        /// reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide
        /// its functionality.
        /// </summary>
        public static object plugins;
        /// <summary>
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> </p>
        /// <p>4.1.0 Use <see cref="Ext.panel.PanelConfig.header">header</see> instead.
        /// Prevent a Header from being created and shown.</p>
        /// </summary>
        public static bool preventHeader;
        /// <summary>
        /// Convenience config. Short for 'Right Bar' (right-docked, vertical toolbar).
        /// <code>rbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'right',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public static object rbar;
        /// <summary>
        /// Defines the region inside border layout.
        /// Possible values:
        /// <li>center</li>
        /// <li>north</li>
        /// <li>south</li>
        /// <li>east</li>
        /// <li>west</li>
        /// </summary>
        public static JsString region;
        /// <summary>
        /// The data used by renderTpl in addition to the following property values of the component:
        /// <li>id</li>
        /// <li>ui</li>
        /// <li>uiCls</li>
        /// <li>baseCls</li>
        /// <li>componentCls</li>
        /// <li>frame</li>
        /// See <see cref="Ext.AbstractComponentConfig.renderSelectors">renderSelectors</see> and <see cref="Ext.AbstractComponentConfig.childEls">childEls</see> for usage examples.
        /// </summary>
        public static JsObject renderData;
        /// <summary>
        /// An object containing properties specifying DomQuery selectors which identify child elements
        /// created by the render process.
        /// After the Component's internal structure is rendered according to the <see cref="Ext.AbstractComponentConfig.renderTpl">renderTpl</see>, this object is iterated through,
        /// and the found Elements are added as properties to the Component using the <c>renderSelector</c> property name.
        /// For example, a Component which renderes a title and description into its element:
        /// <code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.Component">Ext.Component</see>', {
        /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
        /// renderTpl: [
        /// '&lt;h1 class="title"&gt;{title}&lt;/h1&gt;',
        /// '&lt;p&gt;{desc}&lt;/p&gt;'
        /// ],
        /// renderData: {
        /// title: "Error",
        /// desc: "Something went wrong"
        /// },
        /// renderSelectors: {
        /// titleEl: 'h1.title',
        /// descEl: 'p'
        /// },
        /// listeners: {
        /// afterrender: function(cmp){
        /// // After rendering the component will have a titleEl and descEl properties
        /// cmp.titleEl.setStyle({color: "red"});
        /// }
        /// }
        /// });
        /// </code>
        /// For a faster, but less flexible, alternative that achieves the same end result (properties for child elements on the
        /// Component after render), see <see cref="Ext.AbstractComponentConfig.childEls">childEls</see> and <see cref="Ext.AbstractComponent.addChildEls">addChildEls</see>.
        /// </summary>
        public static JsObject renderSelectors;
        /// <summary>
        /// Specify the id of the element, a DOM element or an existing Element that this component will be rendered into.
        /// <strong>Notes:</strong>
        /// Do <em>not</em> use this option if the Component is to be a child item of a <see cref="Ext.container.Container">Container</see>.
        /// It is the responsibility of the <see cref="Ext.container.Container">Container</see>'s
        /// <see cref="Ext.container.ContainerConfig.layout">layout manager</see> to render and manage its child items.
        /// When using this config, a call to render() is not required.
        /// See also: <see cref="Ext.AbstractComponent.render">render</see>.
        /// </summary>
        public static object renderTo;
        /// <summary>
        /// An XTemplate used to create the internal structure inside this Component's encapsulating
        /// Element.
        /// You do not normally need to specify this. For the base classes <see cref="Ext.Component">Ext.Component</see> and
        /// <see cref="Ext.container.Container">Ext.container.Container</see>, this defaults to <strong><c>null</c></strong> which means that they will be initially rendered
        /// with no internal structure; they render their <see cref="Ext.AbstractComponent.getEl">Element</see> empty. The more specialized ExtJS and Touch
        /// classes which use a more complex DOM structure, provide their own template definitions.
        /// This is intended to allow the developer to create application-specific utility Components with customized
        /// internal structure.
        /// Upon rendering, any created child elements may be automatically imported into object properties using the
        /// <see cref="Ext.AbstractComponentConfig.renderSelectors">renderSelectors</see> and <see cref="Ext.AbstractComponentConfig.childEls">childEls</see> options.
        /// Defaults to: <c>&quot;{%this.renderContent(out,values)%}&quot;</c>
        /// </summary>
        public static object renderTpl;
        /// <summary>
        /// Specify as true to allow user resizing at each edge and corner of the window, false to disable resizing.
        /// This may also be specified as a config object to <see cref="Ext.resizer.Resizer">Ext.resizer.Resizer</see>
        /// Defaults to: <c>true</c>Overrides: <see cref="Ext.ComponentConfig.resizable">Ext.Component.resizable</see>
        /// </summary>
        public static object resizable;
        /// <summary>
        /// A valid Ext.resizer.Resizer handles config string. Only applies when resizable = true.
        /// Defaults to: <c>&quot;all&quot;</c>
        /// </summary>
        public static JsString resizeHandles;
        /// <summary>
        /// A buffer to be applied if many state events are fired within a short period.
        /// Defaults to: <c>100</c>
        /// </summary>
        public static JsNumber saveDelay;
        /// <summary>
        /// Specifies whether the floating component should be given a shadow. Set to true to automatically create an
        /// Ext.Shadow, or a string indicating the shadow's display Ext.Shadow.mode. Set to false to
        /// disable the shadow.
        /// Defaults to: <c>&quot;sides&quot;</c>
        /// </summary>
        public static object shadow;
        /// <summary>
        /// Number of pixels to offset the shadow.
        /// </summary>
        public static object shadowOffset;
        /// <summary>
        /// If this property is a number, it is interpreted as follows:
        /// <li>0: Neither width nor height depend on content. This is equivalent to <c>false</c>.</li>
        /// <li>1: Width depends on content (shrink wraps), but height does not.</li>
        /// <li>2: Height depends on content (shrink wraps), but width does not. The default.</li>
        /// <li>3: Both width and height depend on content (shrink wrap). This is equivalent to <c>true</c>.</li>
        /// In CSS terms, shrink-wrap width is analogous to an inline-block element as opposed
        /// to a block-level element. Some container layouts always shrink-wrap their children,
        /// effectively ignoring this property (e.g., <see cref="Ext.layout.container.HBox">Ext.layout.container.HBox</see>,
        /// <see cref="Ext.layout.container.VBox">Ext.layout.container.VBox</see>, <see cref="Ext.layout.component.Dock">Ext.layout.component.Dock</see>).
        /// Defaults to: <c>2</c>
        /// </summary>
        public static object shrinkWrap;
        /// <summary>
        /// An array of events that, when fired, should trigger this object to
        /// save its state. Defaults to none. stateEvents may be any type
        /// of event supported by this object, including browser or custom events
        /// (e.g., ['click', 'customerchange']).
        /// See <c><see cref="Ext.state.StatefulConfig.stateful">stateful</see></c> for an explanation of saving and
        /// restoring object state.
        /// </summary>
        public static JsString stateEvents;
        /// <summary>
        /// The unique id for this object to use for state management purposes.
        /// See <see cref="Ext.state.StatefulConfig.stateful">stateful</see> for an explanation of saving and restoring state.
        /// </summary>
        public static JsString stateId;
        /// <summary>
        /// A flag which causes the object to attempt to restore the state of
        /// internal properties from a saved state on startup. The object must have
        /// a stateId for state to be managed.
        /// Auto-generated ids are not guaranteed to be stable across page loads and
        /// cannot be relied upon to save and restore the same state for a object.
        /// For state saving to work, the state manager's provider must have been
        /// set to an implementation of <see cref="Ext.state.Provider">Ext.state.Provider</see> which overrides the
        /// <see cref="Ext.state.Provider.set">set</see> and <see cref="Ext.state.Provider.get">get</see>
        /// methods to save and recall name/value pairs. A built-in implementation,
        /// <see cref="Ext.state.CookieProvider">Ext.state.CookieProvider</see> is available.
        /// To set the state provider for the current page:
        /// <see cref="Ext.state.Manager.setProvider">Ext.state.Manager.setProvider</see>(new <see cref="Ext.state.CookieProvider">Ext.state.CookieProvider</see>({
        /// <code>   expires: new Date(new Date().getTime()+(1000*60*60*24*7)), //7 days from now
        /// </code>
        /// }));
        /// A stateful object attempts to save state when one of the events
        /// listed in the <see cref="Ext.state.StatefulConfig.stateEvents">stateEvents</see> configuration fires.
        /// To save state, a stateful object first serializes its state by
        /// calling <em><see cref="Ext.state.Stateful.getState">getState</see></em>.
        /// The Component base class implements <see cref="Ext.state.Stateful.getState">getState</see> to save its width and height within the state
        /// only if they were initially configured, and have changed from the configured value.
        /// The Panel class saves its collapsed state in addition to that.
        /// The Grid class saves its column state in addition to its superclass state.
        /// If there is more application state to be save, the developer must provide an implementation which
        /// first calls the superclass method to inherit the above behaviour, and then injects new properties
        /// into the returned object.
        /// The value yielded by getState is passed to <see cref="Ext.state.Manager.set">Ext.state.Manager.set</see>
        /// which uses the configured <see cref="Ext.state.Provider">Ext.state.Provider</see> to save the object
        /// keyed by the <see cref="Ext.state.StatefulConfig.stateId">stateId</see>.
        /// During construction, a stateful object attempts to <em>restore</em> its state by calling
        /// <see cref="Ext.state.Manager.get">Ext.state.Manager.get</see> passing the <see cref="Ext.state.StatefulConfig.stateId">stateId</see>
        /// The resulting object is passed to <see cref="Ext.state.Stateful.applyState">applyState</see>*. The default implementation of
        /// <see cref="Ext.state.Stateful.applyState">applyState</see> simply copies properties into the object, but a developer may
        /// override this to support restoration of more complex application state.
        /// You can perform extra processing on state save and restore by attaching
        /// handlers to the <see cref="Ext.state.StatefulEvents.beforestaterestore">beforestaterestore</see>, <see cref="Ext.state.StatefulEvents.staterestore">staterestore</see>,
        /// <see cref="Ext.state.StatefulEvents.beforestatesave">beforestatesave</see> and <see cref="Ext.state.StatefulEvents.statesave">statesave</see> events.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool stateful;
        /// <summary>
        /// A custom style specification to be applied to this component's Element. Should be a valid argument to
        /// Ext.Element.applyStyles.
        /// <code>new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// title: 'Some Title',
        /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
        /// width: 400, height: 300,
        /// layout: 'form',
        /// items: [{
        /// xtype: 'textarea',
        /// style: {
        /// width: '95%',
        /// marginBottom: '10px'
        /// }
        /// },
        /// new <see cref="Ext.button.Button">Ext.button.Button</see>({
        /// text: 'Send',
        /// minWidth: '100',
        /// style: {
        /// marginBottom: '10px'
        /// }
        /// })
        /// ]
        /// });
        /// </code>
        /// </summary>
        public static object style;
        /// <summary>
        /// The class that is added to the content target when you set styleHtmlContent to true.
        /// Defaults to: <c>&quot;x-html&quot;</c>
        /// </summary>
        public static JsString styleHtmlCls;
        /// <summary>
        /// True to automatically style the html inside the content target of this component (body for panels).
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool styleHtmlContent;
        /// <summary>
        /// If true, suspend calls to doLayout. Useful when batching multiple adds to a container
        /// and not passing them as multiple arguments or an array.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool suspendLayout;
        /// <summary>
        /// Convenience config. Short for 'Top Bar'.
        /// <code>tbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'top',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public static object tbar;
        /// <summary>
        /// The title text to be used to display in the panel header. When a
        /// title is specified the Ext.panel.Header will automatically be created and displayed unless
        /// header is set to false.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public static JsString title;
        /// <summary>
        /// May be "left", "right" or "center".
        /// The alignment of the title text within the available space between the icon and the tools.
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public static JsString titleAlign;
        /// <summary>
        /// true to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in
        /// the header bar, false) to allow it only by clicking to tool button).
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool titleCollapse;
        /// <summary>
        /// True to automatically call toFront when the show method is called on an already visible,
        /// floating component.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool toFrontOnShow;
        /// <summary>
        /// An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
        /// child components of the header container. They can be accessed using down and {query}, as well as the
        /// other component methods. The toggle tool is automatically created if collapsible is set to true.
        /// Note that, apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the
        /// visual button. Any required functionality must be provided by adding handlers that implement the necessary
        /// behavior.
        /// Example usage:
        /// <code>tools:[{
        /// type:'refresh',
        /// tooltip: 'Refresh form Data',
        /// // hidden:true,
        /// handler: function(event, toolEl, panel){
        /// // refresh logic
        /// }
        /// },
        /// {
        /// type:'help',
        /// tooltip: 'Get Help',
        /// handler: function(event, toolEl, panel){
        /// // show help here
        /// }
        /// }]
        /// </code>
        /// </summary>
        public static object tools;
        /// <summary>
        /// An Ext.Template, Ext.XTemplate or an array of strings to form an Ext.XTemplate. Used in
        /// conjunction with the data and tplWriteMode configurations.
        /// </summary>
        public static object tpl;
        /// <summary>
        /// The Ext.(X)Template method to use when updating the content area of the Component.
        /// See Ext.XTemplate.overwrite for information on default mode.
        /// Defaults to: <c>&quot;overwrite&quot;</c>
        /// </summary>
        public static JsString tplWriteMode;
        /// <summary>
        /// A UI style for a component.
        /// Defaults to: <c>&quot;default&quot;</c>
        /// </summary>
        public static JsString ui;
        /// <summary>
        /// An array of of classNames which are currently applied to this component
        /// Defaults to: <c>[]</c>
        /// </summary>
        public static JsString uiCls;
        /// <summary>
        /// The width of this component in pixels.
        /// </summary>
        public static JsNumber width;
        /// <summary>
        /// The X position of the left edge of the window on initial showing. Defaults to centering the Window within the
        /// width of the Window's container Element (The Element that the Window is rendered to).
        /// </summary>
        public static JsNumber x;
        /// <summary>
        /// This property provides a shorter alternative to creating objects than using a full
        /// class name. Using xtype is the most common way to define component instances,
        /// especially in a container. For example, the items in a form containing text fields
        /// could be created explicitly like so:
        /// <code> items: [
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.Text">Ext.form.field.Text</see>', {
        /// fieldLabel: 'Foo'
        /// }),
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.Text">Ext.form.field.Text</see>', {
        /// fieldLabel: 'Bar'
        /// }),
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.Number">Ext.form.field.Number</see>', {
        /// fieldLabel: 'Num'
        /// })
        /// ]
        /// </code>
        /// But by using <c>xtype</c>, the above becomes:
        /// <code> items: [
        /// {
        /// xtype: 'textfield',
        /// fieldLabel: 'Foo'
        /// },
        /// {
        /// xtype: 'textfield',
        /// fieldLabel: 'Bar'
        /// },
        /// {
        /// xtype: 'numberfield',
        /// fieldLabel: 'Num'
        /// }
        /// ]
        /// </code>
        /// When the <c>xtype</c> is common to many items, <see cref="Ext.container.AbstractContainerConfig.defaultType">Ext.container.AbstractContainer.defaultType</see>
        /// is another way to specify the <c>xtype</c> for all items that don't have an explicit <c>xtype</c>:
        /// <code> defaultType: 'textfield',
        /// items: [
        /// { fieldLabel: 'Foo' },
        /// { fieldLabel: 'Bar' },
        /// { fieldLabel: 'Num', xtype: 'numberfield' }
        /// ]
        /// </code>
        /// Each member of the <c>items</c> array is now just a "configuration object". These objects
        /// are used to create and configure component instances. A configuration object can be
        /// manually used to instantiate a component using <see cref="Ext.ExtContext.widget">Ext.widget</see>:
        /// <code> var text1 = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.Text">Ext.form.field.Text</see>', {
        /// fieldLabel: 'Foo'
        /// });
        /// // or alternatively:
        /// var text1 = <see cref="Ext.ExtContext.widget">Ext.widget</see>({
        /// xtype: 'textfield',
        /// fieldLabel: 'Foo'
        /// });
        /// </code>
        /// This conversion of configuration objects into instantiated components is done when
        /// a container is created as part of its {<see cref="Ext.container.AbstractContainer.initComponent">Ext.container.AbstractContainer.initComponent</see>}
        /// process. As part of the same process, the <c>items</c> array is converted from its raw
        /// array form into a <see cref="Ext.util.MixedCollection">Ext.util.MixedCollection</see> instance.
        /// You can define your own <c>xtype</c> on a custom <see cref="Ext.Component">component</see> by specifying
        /// the <c>xtype</c> property in <see cref="Ext.ExtContext.define">Ext.define</see>. For example:
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.PressMeButton', {
        /// extend: '<see cref="Ext.button.Button">Ext.button.Button</see>',
        /// xtype: 'pressmebutton',
        /// text: 'Press Me'
        /// });
        /// </code>
        /// Care should be taken when naming an <c>xtype</c> in a custom component because there is
        /// a single, shared scope for all xtypes. Third part components should consider using
        /// a prefix to avoid collisions.
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('Foo.form.CoolButton', {
        /// extend: '<see cref="Ext.button.Button">Ext.button.Button</see>',
        /// xtype: 'ux-coolbutton',
        /// text: 'Cool!'
        /// });
        /// </code>
        /// </summary>
        public static JsString xtype;
        /// <summary>
        /// The Y position of the top edge of the window on initial showing. Defaults to centering the Window within the
        /// height of the Window's container Element (The Element that the Window is rendered to).
        /// </summary>
        public static JsNumber y;
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        private static JsString @className{get;set;}
        /// <summary>
        /// Button config that displays a single Cancel button
        /// Defaults to: <c>8</c>
        /// </summary>
        public static JsNumber CANCEL{get;set;}
        /// <summary>
        /// The CSS class that provides the ERROR icon image
        /// Defaults to: <c>&quot;x-message-box-error&quot;</c>
        /// </summary>
        public static JsString ERROR{get;set;}
        /// <summary>
        /// The CSS class that provides the INFO icon image
        /// Defaults to: <c>&quot;x-message-box-info&quot;</c>
        /// </summary>
        public static JsString INFO{get;set;}
        /// <summary>
        /// Button config that displays a single No button
        /// Defaults to: <c>4</c>
        /// </summary>
        public static JsNumber NO{get;set;}
        /// <summary>
        /// Button config that displays a single OK button
        /// Defaults to: <c>1</c>
        /// </summary>
        public static JsNumber OK{get;set;}
        /// <summary>
        /// Button config that displays OK and Cancel buttons
        /// Defaults to: <c>9</c>
        /// </summary>
        public static JsNumber OKCANCEL{get;set;}
        /// <summary>
        /// The CSS class that provides the QUESTION icon image
        /// Defaults to: <c>&quot;x-message-box-question&quot;</c>
        /// </summary>
        public static JsString QUESTION{get;set;}
        /// <summary>
        /// The CSS class that provides the WARNING icon image
        /// Defaults to: <c>&quot;x-message-box-warning&quot;</c>
        /// </summary>
        public static JsString WARNING{get;set;}
        /// <summary>
        /// Button config that displays a single Yes button
        /// Defaults to: <c>2</c>
        /// </summary>
        public static JsNumber YES{get;set;}
        /// <summary>
        /// Button config that displays Yes and No buttons
        /// Defaults to: <c>6</c>
        /// </summary>
        public static JsNumber YESNO{get;set;}
        /// <summary>
        /// Button config that displays Yes, No and Cancel buttons
        /// Defaults to: <c>14</c>
        /// </summary>
        public static JsNumber YESNOCANCEL{get;set;}
        /// <summary>
        /// Setting this property to true causes the isLayoutRoot method to return
        /// true and stop the search for the top-most component for a layout.
        /// Defaults to: <c>false</c>
        /// </summary>
        protected static bool _isLayoutRoot{get;set;}
        /// <summary>
        /// true indicates an id was auto-generated rather than provided by configuration.
        /// Defaults to: <c>false</c>
        /// </summary>
        private static bool autoGenId{get;set;}
        /// <summary>
        /// An object containing the default button text strings that can be overriden for localized language support.
        /// Supported properties are: ok, cancel, yes and no.  Generally you should include a locale-specific
        /// resource file for handling language support across the framework.
        /// Customize the default text like so:
        /// <code>Ext.window.MessageBox.buttonText.yes = "oui"; //french
        /// </code>
        /// Defaults to: <c>{ok: &quot;OK&quot;, yes: &quot;Yes&quot;, no: &quot;No&quot;, cancel: &quot;Cancel&quot;}</c>
        /// </summary>
        public static JsObject buttonText{get;set;}
        /// <summary>
        /// The number of component layout calls made on this object.
        /// Defaults to: <c>0</c>
        /// </summary>
        private static JsNumber componentLayoutCounter{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject configMap{get;set;}
        /// <summary>
        /// If this Window is configured draggable, this property will contain an instance of
        /// Ext.util.ComponentDragger (A subclass of DragTracker) which handles dragging
        /// the Window's DOM Element, and constraining according to the constrain and constrainHeader .
        /// This has implementations of <c>onBeforeStart</c>, <c>onDrag</c> and <c>onEnd</c> which perform the dragging action. If
        /// extra logic is needed at these points, use <see cref="Ext.Function.createInterceptor">createInterceptor</see> or
        /// <see cref="Ext.Function.createSequence">createSequence</see> to augment the existing implementations.
        /// Overrides: <see cref="Ext.panel.Panel.dd">Ext.panel.Panel.dd</see>
        /// </summary>
        public static Ext.util.ComponentDragger dd{get;set;}
        /// <summary>
        /// The default height in pixels of the message box's multiline textarea if displayed.
        /// Defaults to: <c>75</c>
        /// </summary>
        public static JsNumber defaultTextHeight{get;set;}
        /// <summary>
        /// Indicates whether or not the component can be dragged.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool draggable{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray emptyArray{get;set;}
        /// <summary>
        /// Initial suspended call count. Incremented when suspendEvents is called, decremented when resumeEvents is called.
        /// Defaults to: <c>0</c>
        /// </summary>
        private static JsNumber eventsSuspended{get;set;}
        /// <summary>
        /// Only present for floating Components which were inserted as child items of Containers.
        /// Floating Components that are programatically <see cref="Ext.Component.render">rendered</see> will not have a <c>floatParent</c>
        /// property.
        /// For <see cref="Ext.ComponentConfig.floating">floating</see> Components which are child items of a Container, the floatParent will be the owning Container.
        /// For example, the dropdown <see cref="Ext.view.BoundList">BoundList</see> of a ComboBox which is in a Window will have the
        /// Window as its <c>floatParent</c>
        /// See <see cref="Ext.ComponentConfig.floating">floating</see> and <see cref="Ext.Component.zIndexManager">zIndexManager</see>
        /// </summary>
        public static Ext.container.Container floatParent{get;set;}
        /// <summary>
        /// Indicates the width of any framing elements which were added within the encapsulating element
        /// to provide graphical, rounded borders. See the frame config.
        /// This is an object containing the frame width in pixels for all four sides of the Component containing the
        /// following properties:
        /// Defaults to: <c>{left: 0, top: 0, right: 0, bottom: 0, width: 0, height: 0}</c><li><span>top</span> : <see cref="Number">Number</see> (optional)<div><p>The width of the top framing element in pixels.</p>
        /// <p>Defaults to: <c>0</c></p></div></li><li><span>right</span> : <see cref="Number">Number</see> (optional)<div><p>The width of the right framing element in pixels.</p>
        /// <p>Defaults to: <c>0</c></p></div></li><li><span>bottom</span> : <see cref="Number">Number</see> (optional)<div><p>The width of the bottom framing element in pixels.</p>
        /// <p>Defaults to: <c>0</c></p></div></li><li><span>left</span> : <see cref="Number">Number</see> (optional)<div><p>The width of the left framing element in pixels.</p>
        /// <p>Defaults to: <c>0</c></p></div></li><li><span>width</span> : <see cref="Number">Number</see> (optional)<div><p>The total width of the left and right framing elements in pixels.</p>
        /// <p>Defaults to: <c>0</c></p></div></li><li><span>height</span> : <see cref="Number">Number</see> (optional)<div><p>The total height of the top and right bottom elements in pixels.</p>
        /// <p>Defaults to: <c>0</c></p></div></li>
        /// </summary>
        public static JsObject frameSize{get;set;}
        /// <summary>
        /// This object holds a key for any event that has a listener. The listener may be set
        /// directly on the instance, or on its class or a super class (via observe) or
        /// on the MVC EventBus. The values of this object are truthy
        /// (a non-zero number) and falsy (0 or undefined). They do not represent an exact count
        /// of listeners. The value for an event is truthy if the event must be fired and is
        /// falsy if there is no need to fire the event.
        /// The intended use of this property is to avoid the expense of fireEvent calls when
        /// there are no listeners. This can be particularly helpful when one would otherwise
        /// have to call fireEvent hundreds or thousands of times. It is used like this:
        /// <code> if (this.hasListeners.foo) {
        /// this.fireEvent('foo', this, arg1);
        /// }
        /// </code>
        /// </summary>
        public static JsObject hasListeners{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject initConfigMap{get;set;}
        /// <summary>
        /// true in this class to identify an object as an instantiated Component, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool isComponent{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        private static bool isInstance{get;set;}
        /// <summary>
        /// true in this class to identify an object as an instantiated Observable, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool isObservable{get;set;}
        /// <summary>
        /// true in this class to identify an object as an instantiated Panel, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool isPanel{get;set;}
        /// <summary>
        /// true in this class to identify an object as an instantiated Window, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool isWindow{get;set;}
        /// <summary>
        /// The MixedCollection containing all the child items of this container.
        /// </summary>
        public static Ext.util.AbstractMixedCollection items{get;set;}
        /// <summary>
        /// The number of container layout calls made on this object.
        /// Defaults to: <c>0</c>
        /// </summary>
        private static JsNumber layoutCounter{get;set;}
        /// <summary>
        /// This is an internal flag that you use when creating custom components. By default this is set to true which means
        /// that every component gets a mask when it's disabled. Components like FieldContainer, FieldSet, Field, Button, Tab
        /// override this property to false since they want to implement custom disable logic.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool maskOnDisable{get;set;}
        /// <summary>
        /// The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful
        /// for setting a different minimum width than text-only dialogs may need.
        /// Defaults to: <c>250</c>
        /// </summary>
        public static JsNumber minProgressWidth{get;set;}
        /// <summary>
        /// The minimum width in pixels of the message box if it is a prompt dialog.  This is useful
        /// for setting a different minimum width than text-only dialogs may need.
        /// Defaults to: <c>250</c>
        /// </summary>
        public static JsNumber minPromptWidth{get;set;}
        /// <summary>
        /// This Component's owner Container (is set automatically
        /// when this Component is added to a Container).
        /// <strong>Note</strong>: to access items within the Container see <see cref="Ext.AbstractComponentConfig.itemId">itemId</see>.
        /// </summary>
        public static Ext.container.Container ownerCt{get;set;}
        /// <summary>
        /// Indicates whether or not the component has been rendered.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool rendered{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        protected static Class self{get;set;}
        /// <summary>
        /// Only present for floating Components after they have been rendered.
        /// A reference to the ZIndexManager which is managing this Component's z-index.
        /// The <see cref="Ext.ZIndexManager">ZIndexManager</see> maintains a stack of floating Component z-indices, and also provides
        /// a single modal mask which is insert just beneath the topmost visible modal floating Component.
        /// Floating Components may be <see cref="Ext.Component.toFront">brought to the front</see> or <see cref="Ext.Component.toBack">sent to the back</see> of the
        /// z-index stack.
        /// This defaults to the global <see cref="Ext.WindowManager">ZIndexManager</see> for floating Components that are
        /// programatically <see cref="Ext.Component.render">rendered</see>.
        /// For <see cref="Ext.ComponentConfig.floating">floating</see> Components which are added to a Container, the ZIndexManager is acquired from the first
        /// ancestor Container found which is floating. If no floating ancestor is found, the global <see cref="Ext.WindowManager">ZIndexManager</see> is
        /// used.
        /// See <see cref="Ext.ComponentConfig.floating">floating</see> and <see cref="Ext.Component.zIndexParent">zIndexParent</see>
        /// </summary>
        public static ZIndexManager zIndexManager{get;set;}
        /// <summary>
        /// Only present for floating Components which were inserted as child items of Containers, and which have a floating
        /// Container in their containment ancestry.
        /// For <see cref="Ext.ComponentConfig.floating">floating</see> Components which are child items of a Container, the zIndexParent will be a floating
        /// ancestor Container which is responsible for the base z-index value of all its floating descendants. It provides
        /// a <see cref="Ext.ZIndexManager">ZIndexManager</see> which provides z-indexing services for all its descendant floating
        /// Components.
        /// Floating Components that are programatically <see cref="Ext.Component.render">rendered</see> will not have a <c>zIndexParent</c>
        /// property.
        /// For example, the dropdown <see cref="Ext.view.BoundList">BoundList</see> of a ComboBox which is in a Window will have the
        /// Window as its <c>zIndexParent</c>, and will always show above that Window, wherever the Window is placed in the z-index stack.
        /// See <see cref="Ext.ComponentConfig.floating">floating</see> and <see cref="Ext.Component.zIndexManager">zIndexManager</see>
        /// </summary>
        public static Ext.container.Container zIndexParent{get;set;}
        /// <summary>
        /// Creates new Component.
        /// </summary>
        /// <param name="config"><p>The configuration options may be specified as either:</p>
        /// <ul>
        /// <li><strong>an element</strong> : it is set as the internal element and its id used as the component id</li>
        /// <li><strong>a string</strong> : it is assumed to be the id of an existing element and is used as the component id</li>
        /// <li><strong>anything else</strong> : it is assumed to be a standard config object and is applied to the component</li>
        /// </ul>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public MessageBox(object config){}
        /// <summary>
        /// Adds Component(s) to this Container.
        /// Description:
        /// <li>Fires the <see cref="Ext.container.AbstractContainerEvents.beforeadd">beforeadd</see> event before adding.</li>
        /// <li>The Container's <see cref="Ext.container.AbstractContainerConfig.defaults">default config values</see> will be applied
        /// accordingly (see <c><see cref="Ext.container.AbstractContainerConfig.defaults">defaults</see></c> for details).</li>
        /// <li>Fires the <c><see cref="Ext.container.AbstractContainerEvents.add">add</see></c> event after the component has been added.</li>
        /// Notes:
        /// If the Container is <strong>already rendered</strong> when <c>add</c>
        /// is called, it will render the newly added Component into its content area.
        /// <strong>If</strong> the Container was configured with a size-managing <see cref="Ext.container.AbstractContainerConfig.layout">layout</see> manager,
        /// the Container will recalculate its internal layout at this time too.
        /// Note that the default layout manager simply renders child Components sequentially
        /// into the content area and thereafter performs no sizing.
        /// If adding multiple new child Components, pass them as an array to the <c>add</c> method,
        /// so that only one layout recalculation is performed.
        /// <code>tb = new <see cref="Ext.toolbar.Toolbar">Ext.toolbar.Toolbar</see>({
        /// renderTo: document.body
        /// });  // toolbar is rendered
        /// // add multiple items.
        /// // (<see cref="Ext.container.AbstractContainerConfig.defaultType">defaultType</see> for <see cref="Ext.toolbar.Toolbar">Toolbar</see> is 'button')
        /// tb.add([{text:'Button 1'}, {text:'Button 2'}]);
        /// </code>
        /// To inject components between existing ones, use the <see cref="Ext.container.AbstractContainer.insert">insert</see> method.
        /// Warning:
        /// Components directly managed by the BorderLayout layout manager may not be removed
        /// or added.  See the Notes for <see cref="Ext.layout.container.Border">BorderLayout</see> for
        /// more details.
        /// </summary>
        /// <param name="component"><p>Either one or more Components to add or an Array of Components to add.
        /// See <c><see cref="Ext.container.AbstractContainerConfig.items">items</see></c> for additional information.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]/<see cref="Ext.Component">Ext.Component</see></span><div><p>The Components that were added.</p>
        /// </div>
        /// </returns>
        public static object[] add(object component){return null;}
        /// <summary>
        /// Adds a CSS class to the body element. If not rendered, the class will
        /// be added when the panel is rendered.
        /// </summary>
        /// <param name="cls"><p>The class to add</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.panel.Panel addBodyCls(JsString cls){return null;}
        /// <summary>
        /// Adds each argument passed to this method to the childEls array.
        /// </summary>
        public static void addChildEls(){}
        /// <summary>
        /// Adds a CSS class to the top level element representing this component.
        /// <p>This method has been <strong>deprecated</strong> since 4.1</p>
        /// <p>Use <see cref="Ext.AbstractComponent.addCls">addCls</see> instead.</p>
        /// </summary>
        /// <param name="cls"><p>The CSS class name to add</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>Returns the Component to allow method chaining.</p>
        /// </div>
        /// </returns>
        public static Ext.Component addClass(object cls){return null;}
        /// <summary>
        /// Adds a CSS class to the top level element representing this component.
        /// </summary>
        /// <param name="cls"><p>The CSS class name to add</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>Returns the Component to allow method chaining.</p>
        /// </div>
        /// </returns>
        public static Ext.Component addCls(object cls){return null;}
        /// <summary>
        /// Adds a cls to the uiCls array, which will also call addUIClsToElement and adds to all elements of this
        /// component.
        /// </summary>
        /// <param name="classes"><p>A string or an array of strings to add to the uiCls</p>
        /// </param>
        /// <param name="skip"><p>(Boolean) skip True to skip adding it to the class and do it later (via the return)</p>
        /// </param>
        public static void addClsWithUI(object classes, object skip){}
        /// <summary>
        /// Adds docked item(s) to the container.
        /// </summary>
        /// <param name="component"><p>The Component or array of components to add. The components
        /// must include a 'dock' parameter on each component to indicate where it should be docked
        /// ('top', 'right', 'bottom', 'left').</p>
        /// </param>
        /// <param name="pos"><p>The index at which the Component will be added</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>The added components.</p>
        /// </div>
        /// </returns>
        public static Ext.Component[] addDocked(object component, object pos=null){return null;}
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire.
        /// </summary>
        /// <param name="eventNames"><p>Either an object with event names as properties with
        /// a value of <c>true</c>. For example:</p>
        /// <pre><code>this.addEvents({
        /// storeloaded: true,
        /// storecleared: true
        /// });
        /// </code></pre>
        /// <p>Or any number of event names as separate parameters. For example:</p>
        /// <pre><code>this.addEvents('storeloaded', 'storecleared');
        /// </code></pre>
        /// </param>
        public static void addEvents(object eventNames){}
        /// <summary>
        /// Sets up the focus listener on this Component's focusEl if it has one.
        /// Form Components which must implicitly participate in tabbing order usually have a naturally focusable
        /// element as their <see cref="Ext.AbstractComponent">focusEl</see>, and it is the DOM event of that recieving focus which drives
        /// the Component's onFocus handling, and the DOM event of it being blurred which drives the onBlur handling.
        /// If the <see cref="Ext.AbstractComponent">focusEl</see> is <b>not</b> naturally focusable, then the listeners are only added
        /// if the <see cref="Ext.FocusManager">FocusManager</see> is enabled.
        /// </summary>
        private static void addFocusListener(){}
        /// <summary>
        /// Appends an event handler to this object.  For example:
        /// <code>myGridPanel.on("mouseover", this.onMouseOver, this);
        /// </code>
        /// The method also allows for a single argument to be passed which is a config object
        /// containing properties which specify multiple events. For example:
        /// <code>myGridPanel.on({
        /// cellClick: this.onCellClick,
        /// mouseover: this.onMouseOver,
        /// mouseout: this.onMouseOut,
        /// scope: this // Important. Ensure "this" is correct during handler execution
        /// });
        /// </code>
        /// One can also specify options for each event handler separately:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: this.onCellClick, scope: this, single: true},
        /// mouseover: {fn: panel.onMouseOver, scope: panel}
        /// });
        /// </code>
        /// <em>Names</em> of methods in a specified scope may also be used. Note that
        /// <c>scope</c> MUST be specified to use this option:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: 'onCellClick', scope: this, single: true},
        /// mouseover: {fn: 'onMouseOver', scope: panel}
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventName"><p>The name of the event to listen for.
        /// May also be an object who's property names are event names.</p>
        /// </param>
        /// <param name="fn"><p>The method the event invokes, or <em>if <c>scope</c> is specified, the </em>name* of the method within
        /// the specified <c>scope</c>.  Will be called with arguments
        /// given to <see cref="Ext.util.Observable.fireEvent">fireEvent</see> plus the <c>options</c> parameter described below.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function is
        /// executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration.</p>
        /// <p><strong>Note:</strong> Unlike in ExtJS 3.x, the options object will also be passed as the last
        /// argument to every event handler.</p>
        /// <p>This object may contain any of the following properties:</p>
        /// <ul><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which the handler function is executed. <strong>If omitted,
        /// defaults to the object which fired the event.</strong></p>
        /// </div></li><li><span>delay</span> : <see cref="Number">Number</see><div><p>The number of milliseconds to delay the invocation of the handler after the event fires.</p>
        /// </div></li><li><span>single</span> : <see cref="bool">Boolean</see><div><p>True to add a handler to handle just the next firing of the event, and then remove itself.</p>
        /// </div></li><li><span>buffer</span> : <see cref="Number">Number</see><div><p>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed
        /// by the specified number of milliseconds. If the event fires again within that time,
        /// the original handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p>
        /// </div></li><li><span>target</span> : <see cref="Ext.util.Observable">Ext.util.Observable</see><div><p>Only call the handler if the event was fired on the target Observable, <em>not</em> if the event
        /// was bubbled up from a child Observable.</p>
        /// </div></li><li><span>element</span> : <see cref="String">String</see><div><p><strong>This option is only valid for listeners bound to <see cref="Ext.Component">Components</see>.</strong>
        /// The name of a Component property which references an element to add a listener to.</p>
        /// <p>  This option is useful during Component construction to add DOM event listeners to elements of
        /// <see cref="Ext.Component">Components</see> which will exist only after the Component is rendered.
        /// For example, to add a click listener to a Panel's body:</p>
        /// <pre><code>  new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// title: 'The title',
        /// listeners: {
        /// click: this.handlePanelClick,
        /// element: 'body'
        /// }
        /// });
        /// </code></pre>
        /// <p><strong>Combining Options</strong></p>
        /// <p>Using the options argument, it is possible to combine different types of listeners:</p>
        /// <p>A delayed, one-time listener.</p>
        /// <pre><code>myPanel.on('hide', this.handleClick, this, {
        /// single: true,
        /// delay: 100
        /// });
        /// </code></pre>
        /// </div></li></ul></param>
        public static void addListener(object eventName, System.Delegate fn=null, object scope=null, object options=null){}
        /// <summary>
        /// Adds listeners to any Observable object (or Ext.Element) which are automatically removed when this Component is
        /// destroyed.
        /// </summary>
        /// <param name="item"><p>The item to which to add a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        /// <param name="opt"><p>If the <c>ename</c> parameter was an event name, this is the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> options.</p>
        /// </param>
        public static void addManagedListener(object item, object ename, System.Delegate fn=null, object scope=null, object opt=null){}
        /// <summary>
        /// Save a property to the given state object if it is not its default or configured
        /// value.
        /// </summary>
        /// <param name="state"><p>The state object</p>
        /// </param>
        /// <param name="propName"><p>The name of the property on this object to save.</p>
        /// </param>
        /// <param name="value"><p>The value of the state property (defaults to <c>this[propName]</c>).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>The state object or a new object if state was null and the property
        /// was saved.</p>
        /// </div>
        /// </returns>
        protected static bool addPropertyToState(object state, JsString propName, object value=null){return false;}
        /// <summary>
        /// Add events that will trigger the state to be saved. If the first argument is an
        /// array, each element of that array is the name of a state event. Otherwise, each
        /// argument passed to this method is the name of a state event.
        /// </summary>
        /// <param name="events"><p>The event name or an array of event names.</p>
        /// </param>
        public static void addStateEvents(object events){}
        /// <summary>
        /// Contribute class-specific tools to the header.
        /// Called by Panel's initTools.
        /// Overrides: <see cref="Ext.panel.Panel.addTools">Ext.panel.Panel.addTools</see>
        /// </summary>
        private static void addTools(){}
        /// <summary>
        /// Method which adds a specified UI + uiCls to the components element. Can be overridden to remove the UI from more
        /// than just the components element.
        /// </summary>
        /// <param name="ui"><p>The UI to remove from the element</p>
        /// </param>
        public static void addUIClsToElement(JsString ui){}
        /// <summary>
        /// Method which adds a specified UI to the components element.
        /// </summary>
        private static void addUIToElement(){}
        /// <summary>
        /// Invoked after the Panel is Collapsed.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animated">
        /// </param>
        protected static void afterCollapse(bool animated){}
        /// <summary>
        /// Called by the layout system after the Component has been layed out.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="width"><p>The width that was set</p>
        /// </param>
        /// <param name="height"><p>The height that was set</p>
        /// </param>
        /// <param name="oldWidth"><p>The old width. <c>undefined</c> if this was the initial layout.</p>
        /// </param>
        /// <param name="oldHeight"><p>The old height. <c>undefined</c> if this was the initial layout.</p>
        /// </param>
        protected static void afterComponentLayout(JsNumber width, JsNumber height, JsNumber oldWidth, JsNumber oldHeight){}
        /// <summary>
        /// Invoked after the Panel is Expanded.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animated">
        /// </param>
        protected static void afterExpand(bool animated){}
        /// <summary>
        /// Invoked after the Component has been hidden.
        /// Gets passed the same <c>callback</c> and <c>scope</c> parameters that <see cref="Ext.Component.onHide">onHide</see> received.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected static void afterHide(object callback=null, object scope=null){}
        /// <summary>
        /// Invoked after the Container has laid out (and rendered if necessary)
        /// its child Components.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="layout">
        /// </param>
        protected static void afterLayout(Ext.layout.container.Container layout){}
        /// <summary>
        /// Allows addition of behavior after rendering is complete. At this stage the Component’s Element
        /// will have been styled according to the configuration, will have had any configured CSS class
        /// names added, and will be in the configured visibility and the configured enable state.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void afterRender(){}
        /// <summary>
        /// Template method called after a Component has been positioned.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        protected static void afterSetPosition(JsNumber x, JsNumber y){}
        /// <summary>
        /// Invoked after the Component is shown (after onShow is called).
        /// Gets passed the same parameters as <see cref="Ext.ComponentEvents.show">show</see>.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animateTarget">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected static void afterShow(object animateTarget=null, object callback=null, object scope=null){}
        /// <summary>
        /// Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).
        /// If a callback function is passed it will be called after the user clicks the button, and the
        /// id of the button that was clicked will be passed as the only parameter to the callback
        /// (could also be the top-right close button, which will always report as "cancel").
        /// </summary>
        /// <param name="title"><p>The title bar text</p>
        /// </param>
        /// <param name="msg"><p>The message box body text</p>
        /// </param>
        /// <param name="fn"><p>The callback function invoked after the message box is closed.
        /// See <see cref="Ext.window.MessageBox.show">show</see> method for details.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the callback is executed.</p>
        /// <p>Defaults to: <c>window</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.window.MessageBox">Ext.window.MessageBox</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.MessageBox alert(JsString title, JsString msg, System.Delegate fn=null, object scope=null){return null;}
        /// <summary>
        /// Aligns this floating Component to the specified element
        /// </summary>
        /// <param name="element"><p>The element or <see cref="Ext.Component">Ext.Component</see> to align to. If passing a component, it must be a
        /// component instance. If a string id is passed, it will be used as an element id.</p>
        /// </param>
        /// <param name="position"><p>The position to align to
        /// (see <see cref="Ext.dom.Element.alignTo">Ext.Element.alignTo</see> for more details).</p>
        /// <p>Defaults to: <c>&quot;tl-bl?&quot;</c></p></param>
        /// <param name="offsets"><p>Offset the positioning by [x, y]</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component alignTo(object element, object position=null, object offsets=null){return null;}
        /// <summary>
        /// Performs custom animation on this object.
        /// This method is applicable to both the <see cref="Ext.Component">Component</see> class and the <see cref="Ext.draw.Sprite">Sprite</see>
        /// class. It performs animated transitions of certain properties of this object over a specified timeline.
        /// </summary>
        /// <param name="config"><p>Configuration for <see cref="Ext.fx.Anim">Ext.fx.Anim</see>.
        /// Note that the <see cref="Ext.fx.AnimConfig.to">to</see> config is required.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static object animate(object config){return null;}
        /// <summary>
        /// Sets references to elements inside the component.
        /// </summary>
        /// <param name="el">
        /// </param>
        /// <param name="id">
        /// </param>
        private static void applyChildEls(object el, object id){}
        /// <summary>
        /// Sets references to elements inside the component. This applies renderSelectors
        /// as well as childEls.
        /// </summary>
        private static void applyRenderSelectors(){}
        /// <summary>
        /// Applies the state to the object. This should be overridden in subclasses to do
        /// more complex state operations. By default it applies the state properties onto
        /// the current object.
        /// </summary>
        /// <param name="state"><p>The state</p>
        /// </param>
        public static void applyState(object state){}
        /// <summary>
        /// Occurs before componentLayout is run. Returning false from this method will prevent the componentLayout from
        /// being executed.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="adjWidth"><p>The box-adjusted width that was set</p>
        /// </param>
        /// <param name="adjHeight"><p>The box-adjusted height that was set</p>
        /// </param>
        protected static void beforeComponentLayout(JsNumber adjWidth, JsNumber adjHeight){}
        /// <summary>
        /// Invoked before the Component is destroyed.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void beforeDestroy(){}
        /// <summary>
        /// Occurs before componentLayout is run. Returning false from this method
        /// will prevent the containerLayout from being executed.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void beforeLayout(){}
        /// <summary>
        /// Template method called before a Component is positioned.
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="animate">
        /// </param>
        private static void beforeSetPosition(object x, object y, object animate){}
        /// <summary>
        /// Invoked before the Component is shown.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void beforeShow(){}
        /// <summary>
        /// Called before the change from default, configured state into the collapsed state.
        /// This method may be called at render time to enable rendering in an initially collapsed state,
        /// or at runtime when an existing, fully layed out Panel may be collapsed.
        /// It basically saves configs which need to be clobbered for the duration of the collapsed state.
        /// </summary>
        private static void beginCollapse(){}
        /// <summary>
        /// Bubbles up the component/container heirarchy, calling the specified function with each component. The scope
        /// (this) of function call will be the scope provided or the current component. The arguments to the function will
        /// be the args provided or the current component. If the function returns false at any point, the bubble is stopped.
        /// </summary>
        /// <param name="fn"><p>The function to call</p>
        /// </param>
        /// <param name="scope"><p>The scope of the function. Defaults to current node.</p>
        /// </param>
        /// <param name="args"><p>The args to call the function with. Defaults to passing the current component.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component bubble(System.Delegate fn, object scope=null, object args=null){return null;}
        /// <summary>
        /// Call the original method that was previously overridden with override
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// constructor: function() {
        /// alert("I'm a cat!");
        /// }
        /// });
        /// My.Cat.override({
        /// constructor: function() {
        /// alert("I'm going to be a cat!");
        /// this.callOverridden();
        /// alert("Meeeeoooowwww");
        /// }
        /// });
        /// var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
        /// // alerts "I'm a cat!"
        /// // alerts "Meeeeoooowwww"
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// <p>as of 4.1. Use <see cref="Ext.Base.callParent">callParent</see> instead.</p>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callOverridden(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the overridden method</p>
        /// </div>
        /// </returns>
        protected static object callOverridden(object args=null){return null;}
        /// <summary>
        /// Call the "parent" method of the current method. That is the method previously
        /// overridden by derivation or by an override (see Ext.define).
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Base', {
        /// constructor: function (x) {
        /// this.x = x;
        /// },
        /// statics: {
        /// method: function (x) {
        /// return x;
        /// }
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived', {
        /// extend: 'My.Base',
        /// constructor: function () {
        /// this.callParent([21]);
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // alerts 21
        /// </code>
        /// This can be used with an override as follows:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.DerivedOverride', {
        /// override: 'My.Derived',
        /// constructor: function (x) {
        /// this.callParent([x*2]); // calls original My.Derived constructor
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // now alerts 42
        /// </code>
        /// This also works with static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2', {
        /// extend: 'My.Base',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Base.method
        /// }
        /// }
        /// });
        /// alert(My.Base.method(10);     // alerts 10
        /// alert(My.Derived2.method(10); // alerts 20
        /// </code>
        /// Lastly, it also works with overridden static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2Override', {
        /// override: 'My.Derived2',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Derived2.method
        /// }
        /// }
        /// });
        /// alert(My.Derived2.method(10); // now alerts 40
        /// </code>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callParent(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the parent method</p>
        /// </div>
        /// </returns>
        protected static object callParent(object args=null){return null;}
        /// <summary>
        /// Cancel any deferred focus on this component
        /// </summary>
        protected static void cancelFocus(){}
        /// <summary>
        /// Cancels layout of a component.
        /// </summary>
        /// <param name="comp">
        /// </param>
        public static void cancelLayout(Ext.Component comp){}
        /// <summary>
        /// Cascades down the component/container heirarchy from this component (passed in
        /// the first call), calling the specified function with each component. The scope
        /// (this reference) of the function call will be the scope provided or the current
        /// component. The arguments to the function will be the args provided or the current
        /// component. If the function returns false at any point, the cascade is stopped on
        /// that branch.
        /// </summary>
        /// <param name="fn"><p>The function to call</p>
        /// </param>
        /// <param name="scope"><p>The scope of the function (defaults to current component)</p>
        /// </param>
        /// <param name="args"><p>The args to call the function with. The current component
        /// always passed as the last argument.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.Container</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.container.Container cascade(System.Delegate fn, object scope=null, object args=null){return null;}
        /// <summary>
        /// Center this Component in its container.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component center(){return null;}
        /// <summary>
        /// Retrieves the first direct child of this container which matches the passed selector.
        /// The passed in selector must comply with an Ext.ComponentQuery selector.
        /// </summary>
        /// <param name="selector"><p>An <see cref="Ext.ComponentQuery">Ext.ComponentQuery</see> selector. If no selector is
        /// specified, the first child will be returned.</p>
        /// </param>
        public static Ext.container.AbstractContainer child(object selector=null){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners
        /// </summary>
        public static void clearListeners(){}
        /// <summary>
        /// Removes all managed listeners for this object.
        /// </summary>
        public static void clearManagedListeners(){}
        /// <summary>
        /// Clone the current component using the original config values passed into this instance by default.
        /// </summary>
        /// <param name="overrides"><p>A new config containing any properties to override in the cloned version.
        /// An id property can be passed on this object, otherwise one will be generated to avoid duplicates.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>clone The cloned copy of this component</p>
        /// </div>
        /// </returns>
        public static Ext.Component cloneConfig(object overrides){return null;}
        /// <summary>
        /// Closes the Panel. By default, this method, removes it from the DOM, destroys the
        /// Panel object and all its descendant Components. The beforeclose event is fired before the
        /// close happens and will cancel the close action if it returns false.
        /// <strong>Note:</strong> This method is also affected by the <see cref="Ext.panel.PanelConfig.closeAction">closeAction</see> setting. For more explicit control use
        /// <see cref="Ext.panel.Panel">destroy</see> and <see cref="Ext.panel.Panel.hide">hide</see> methods.
        /// </summary>
        public static void close(){}
        /// <summary>
        /// Collapses the panel body so that the body becomes hidden. Docked Components parallel to the border towards which
        /// the collapse takes place will remain visible. Fires the beforecollapse event which will cancel the
        /// collapse action if it returns false.
        /// </summary>
        /// <param name="direction"><p>The direction to collapse towards. Must be one of</p>
        /// <ul>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_TOP</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_RIGHT</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_BOTTOM</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_LEFT</li>
        /// </ul>
        /// <p>Defaults to <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>.</p>
        /// </param>
        /// <param name="animate"><p>True to animate the transition, else false (defaults to the value of the
        /// <see cref="Ext.panel.PanelConfig.animCollapse">animCollapse</see> panel config)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.panel.Panel collapse(object direction=null, object animate=null){return null;}
        /// <summary>
        /// </summary>
        private static void configClass(){}
        /// <summary>
        /// Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).
        /// If a callback function is passed it will be called after the user clicks either button,
        /// and the id of the button that was clicked will be passed as the only parameter to the callback
        /// (could also be the top-right close button, which will always report as "cancel").
        /// </summary>
        /// <param name="title"><p>The title bar text</p>
        /// </param>
        /// <param name="msg"><p>The message box body text</p>
        /// </param>
        /// <param name="fn"><p>The callback function invoked after the message box is closed.
        /// See <see cref="Ext.window.MessageBox.show">show</see> method for details.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the callback is executed.</p>
        /// <p>Defaults to: <c>window</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.window.MessageBox">Ext.window.MessageBox</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.MessageBox confirm(JsString title, JsString msg, System.Delegate fn=null, object scope=null){return null;}
        /// <summary>
        /// Returns an array of fully constructed plugin instances. This converts any configs into their
        /// appropriate instances.
        /// It does not mutate the plugins array. It creates a new array.
        /// This is borrowed by <see cref="Ext.grid.Lockable">Lockable</see> which clones and distributes Plugins
        /// to both child grids of a locking grid, so must keep to that contract.
        /// </summary>
        private static void constructPlugins(){}
        /// <summary>
        /// Continue to fire event.
        /// </summary>
        /// <param name="eventName">
        /// </param>
        /// <param name="args">
        /// </param>
        /// <param name="bubbles">
        /// </param>
        private static void continueFireEvent(JsString eventName, object args=null, object bubbles=null){}
        /// <summary>
        /// This method converts an "{x: x, y: y}" object to a "{left: x+'px', top: y+'px'}" object.
        /// The returned object contains the styles to set to effect the position. This is
        /// overridden in RTL mode to be "{right: x, top: y}".
        /// </summary>
        /// <param name="pos">
        /// </param>
        /// <param name="withUnits">
        /// </param>
        private static void convertPosition(object pos, object withUnits){}
        /// <summary>
        /// Creates an event handling function which refires the event from this object as the passed event name.
        /// </summary>
        /// <param name="newName">
        /// </param>
        /// <param name="beginEnd"><p>The caller can specify on which indices to slice</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div>
        /// </div>
        /// </returns>
        private static System.Delegate createRelayer(object newName, object beginEnd=null){return null;}
        /// <summary>
        /// Overrides: <see cref="Ext.AbstractComponent.destroy">Ext.AbstractComponent.destroy</see>, <see cref="Ext.AbstractPlugin.destroy">Ext.AbstractPlugin.destroy</see>, <see cref="Ext.layout.Layout.destroy">Ext.layout.Layout.destroy</see>
        /// </summary>
        private static void destroy(){}
        /// <summary>
        /// Disable the component.
        /// </summary>
        /// <param name="silent"><p>Passing true will supress the 'disable' event from being fired.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public static void disable(object silent=null){}
        /// <summary>
        /// Called from the selected frame generation template to insert this Component's inner structure inside the framing structure.
        /// When framing is used, a selected frame generation template is used as the primary template of the #getElConfig instead
        /// of the configured <see cref="Ext.AbstractComponentConfig.renderTpl">renderTpl</see>. The renderTpl is invoked by this method which is injected into the framing template.
        /// </summary>
        /// <param name="out">
        /// </param>
        /// <param name="values">
        /// </param>
        private static void doApplyRenderTpl(object @out, object values){}
        /// <summary>
        /// Handles autoRender.
        /// Floating Components may have an ownerCt. If they are asking to be constrained, constrain them within that
        /// ownerCt, and have their z-index managed locally. Floating Components are always rendered to document.body
        /// </summary>
        public static void doAutoRender(){}
        /// <summary>
        /// This method needs to be called whenever you change something on this component that requires the Component's
        /// layout to be recalculated.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.container.Container</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.container.Container doComponentLayout(){return null;}
        /// <summary>
        /// Moves this floating Component into a constrain region.
        /// By default, this Component is constrained to be within the container it was added to, or the element it was
        /// rendered to.
        /// An alternative constraint may be passed.
        /// </summary>
        /// <param name="constrainTo"><p>The Element or <see cref="Ext.util.Region">Region</see>
        /// into which this Component is to be constrained. Defaults to the element into which this floating Component
        /// was rendered.</p>
        /// </param>
        public static void doConstrain(object constrainTo=null){}
        /// <summary>
        /// Manually force this container's layout to be recalculated. The framework uses this internally to refresh layouts
        /// form most cases.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.container.Container</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.container.Container doLayout(){return null;}
        /// <summary>
        /// Retrieves the first descendant of this container which matches the passed selector.
        /// The passed in selector must comply with an Ext.ComponentQuery selector.
        /// </summary>
        /// <param name="selector"><p>An <see cref="Ext.ComponentQuery">Ext.ComponentQuery</see> selector. If no selector is
        /// specified, the first child will be returned.</p>
        /// </param>
        public static Ext.container.AbstractContainer down(object selector=null){return null;}
        /// <summary>
        /// Enable the component
        /// </summary>
        /// <param name="silent"><p>Passing true will supress the 'enable' event from being fired.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public static void enable(object silent=null){}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. There is no implementation in the Observable base class.
        /// This is commonly used by Ext.Components to bubble events to owner Containers.
        /// See <see cref="Ext.Component.getBubbleTarget">Ext.Component.getBubbleTarget</see>. The default implementation in <see cref="Ext.Component">Ext.Component</see> returns the
        /// Component's immediate owner. But if a known target is required, this can be overridden to access the
        /// required target more quickly.
        /// Example:
        /// <code><see cref="Ext.ExtContext.override">Ext.override</see>(<see cref="Ext.form.field.Base">Ext.form.field.Base</see>, {
        /// //  Add functionality to Field's initComponent to enable the change event to bubble
        /// initComponent : <see cref="Ext.Function.createSequence">Ext.Function.createSequence</see>(Ext.form.field.Base.prototype.initComponent, function() {
        /// this.enableBubble('change');
        /// }),
        /// //  We know that we want Field's events to bubble directly to the FormPanel.
        /// getBubbleTarget : function() {
        /// if (!this.formPanel) {
        /// this.formPanel = this.findParentByType('form');
        /// }
        /// return this.formPanel;
        /// }
        /// });
        /// var myForm = new Ext.formPanel({
        /// title: 'User Details',
        /// items: [{
        /// ...
        /// }],
        /// listeners: {
        /// change: function() {
        /// // Title goes red if form has been modified.
        /// myForm.header.setStyle('color', 'red');
        /// }
        /// }
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventNames"><p>The event name to bubble, or an Array of event names.</p>
        /// </param>
        public static void enableBubble(object eventNames){}
        /// <summary>
        /// Ensures that this component is attached to document.body. If the component was
        /// rendered to Ext.getDetachedBody, then it will be appended to document.body.
        /// Any configured position is also restored.
        /// </summary>
        /// <param name="runLayout"><p>True to run the component's layout.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public static void ensureAttachedToBody(object runLayout=null){}
        /// <summary>
        /// Expands the panel body so that it becomes visible.  Fires the beforeexpand event which will
        /// cancel the expand action if it returns false.
        /// </summary>
        /// <param name="animate"><p>True to animate the transition, else false (defaults to the value of the
        /// <see cref="Ext.panel.PanelConfig.animCollapse">animCollapse</see> panel config)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.panel.Panel expand(object animate=null){return null;}
        /// <summary>
        /// Find a container above this component at any level by a custom function. If the passed function returns true, the
        /// container will be returned.
        /// See also the <see cref="Ext.Component.up">up</see> method.
        /// </summary>
        /// <param name="fn"><p>The custom function to call with the arguments (container, this component).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.container.Container</see></span><div><p>The first Container for which the custom function returns true</p>
        /// </div>
        /// </returns>
        public static Ext.container.Container findParentBy(System.Delegate fn){return null;}
        /// <summary>
        /// Find a container above this component at any level by xtype or class
        /// See also the <see cref="Ext.Component.up">up</see> method.
        /// </summary>
        /// <param name="xtype"><p>The xtype string for a component, or the class of the component directly</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.container.Container</see></span><div><p>The first Container which matches the given xtype or class</p>
        /// </div>
        /// </returns>
        public static Ext.container.Container findParentByType(object xtype){return null;}
        /// <summary>
        /// This method visits the rendered component tree in a "top-down" order. That is, this
        /// code runs on a parent component before running on a child. This method calls the
        /// onRender method of each component.
        /// </summary>
        /// <param name="containerIdx"><p>The index into the Container items of this Component.</p>
        /// </param>
        private static void finishRender(JsNumber containerIdx){}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addListener).
        /// An event may be set to bubble up an Observable parent hierarchy (See <see cref="Ext.Component.getBubbleTarget">Ext.Component.getBubbleTarget</see>) by
        /// calling <see cref="Ext.util.Observable.enableBubble">enableBubble</see>.
        /// </summary>
        /// <param name="eventName"><p>The name of the event to fire.</p>
        /// </param>
        /// <param name="args"><p>Variable number of parameters are passed to handlers.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>returns false if any of the handlers return false otherwise it returns true.</p>
        /// </div>
        /// </returns>
        public static bool fireEvent(JsString eventName, params object[] args){return false;}
        /// <summary>
        /// Try to focus this component.
        /// </summary>
        /// <param name="selectText"><p>If applicable, true to also select the text in this component</p>
        /// </param>
        /// <param name="delay"><p>Delay the focus this number of milliseconds (true for 10 milliseconds).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The focused Component. Usually <c>this</c> Component. Some Containers may
        /// delegate focus to a descendant Component (<see cref="Ext.window.Window">Window</see>s can do this through their
        /// <see cref="Ext.window.WindowConfig.defaultFocus">defaultFocus</see> config option.</p>
        /// </div>
        /// </returns>
        public static Ext.Component focus(object selectText=null, object delay=null){return null;}
        /// <summary>
        /// Forces this component to redo its componentLayout.
        /// <p>This method has been <strong>deprecated</strong> since 4.1.0</p>
        /// <p>Use <see cref="Ext.AbstractComponent.updateLayout">updateLayout</see> instead.</p>
        /// </summary>
        public static void forceComponentLayout(){}
        /// <summary>
        /// Returns the current animation if this object has any effects actively running or queued, else returns false.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.fx.Anim">Ext.fx.Anim</see>/<see cref="bool">Boolean</see></span><div><p>Anim if element has active effects, else false</p>
        /// </div>
        /// </returns>
        public static object getActiveAnimation(){return null;}
        /// <summary>
        /// </summary>
        private static void getAutoId(){}
        /// <summary>
        /// Gets the current box measurements of the component's underlying element.
        /// </summary>
        /// <param name="local"><p>If true the element's left and top are returned instead of page XY.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>box An object in the format {x, y, width, height}</p>
        /// </div>
        /// </returns>
        public static object getBox(object local=null){return null;}
        /// <summary>
        /// Gets the bubbling parent for an Observable
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.Observable">Ext.util.Observable</see></span><div><p>The bubble parent. null is returned if no bubble target exists</p>
        /// </div>
        /// </returns>
        private static Ext.util.Observable getBubbleParent(){return null;}
        /// <summary>
        /// Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.container.Container</see></span><div><p>the Container which owns this Component.</p>
        /// </div>
        /// </returns>
        public static Ext.container.Container getBubbleTarget(){return null;}
        /// <summary>
        /// Return the immediate child Component in which the passed element is located.
        /// </summary>
        /// <param name="el"><p>The element to test (or ID of element).</p>
        /// </param>
        /// <param name="deep"><p>If <c>true</c>, returns the deepest descendant Component which contains the passed element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The child item which contains the passed element.</p>
        /// </div>
        /// </returns>
        public static Ext.Component getChildByElement(object el, bool deep){return null;}
        /// <summary>
        /// Gets a list of child components to enable/disable when the container is
        /// enabled/disabled
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>Items to be enabled/disabled</p>
        /// </div>
        /// </returns>
        private static Ext.Component[] getChildItemsToDisable(){return null;}
        /// <summary>
        /// Returns the current collapsed state of the panel.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see>/<see cref="String">String</see></span><div><p>False when not collapsed, otherwise the value of <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>.</p>
        /// </div>
        /// </returns>
        public static object getCollapsed(){return null;}
        /// <summary>
        /// Attempts a default component lookup (see Ext.container.Container.getComponent). If the component is not found in the normal
        /// items, the dockedItems are searched and the matched component (if any) returned (see getDockedComponent). Note that docked
        /// items will only be matched by component id or itemId -- if you pass a numeric index only non-docked child components will be searched.
        /// </summary>
        /// <param name="comp"><p>The component id, itemId or position to find</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The component (if found)</p>
        /// </div>
        /// </returns>
        public static Ext.Component getComponent(object comp){return null;}
        /// <summary>
        /// Parameters<li><span>name</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="name">
        /// </param>
        private static void getConfig(object name){}
        /// <summary>
        /// Gets the x/y offsets to constrain this float
        /// </summary>
        /// <param name="constrainTo"><p>The Element or <see cref="Ext.util.Region">Region</see>
        /// into which this Component is to be constrained.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The x/y constraints</p>
        /// </div>
        /// </returns>
        private static JsNumber[] getConstrainVector(object constrainTo=null){return null;}
        /// <summary>
        /// Gets the configured default focus item.  If a defaultFocus is set, it will
        /// receive focus when the Window's focus method is called, otherwise the
        /// Window itself will receive focus.
        /// </summary>
        public static void getDefaultFocus(){}
        /// <summary>
        /// Finds a docked component by id, itemId or position. Also see getDockedItems
        /// </summary>
        /// <param name="comp"><p>The id, itemId or position of the docked component (see <see cref="Ext.panel.AbstractPanel.getComponent">getComponent</see> for details)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The docked component (if found)</p>
        /// </div>
        /// </returns>
        public static Ext.Component getDockedComponent(object comp){return null;}
        /// <summary>
        /// Retrieves an array of all currently docked Components.
        /// For example to find a toolbar that has been docked at top:
        /// <code>panel.getDockedItems('toolbar[dock="top"]');
        /// </code>
        /// </summary>
        /// <param name="selector"><p>A <see cref="Ext.ComponentQuery">ComponentQuery</see> selector string to filter the returned items.</p>
        /// </param>
        /// <param name="beforeBody"><p>An optional flag to limit the set of items to only those
        /// before the body (true) or after the body (false). All components are returned by
        /// default.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>The array of docked components meeting the specified criteria.</p>
        /// </div>
        /// </returns>
        public static Ext.Component[] getDockedItems(JsString selector, object beforeBody=null){return null;}
        /// <summary>
        /// Retrieves the top level element representing this component.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div>
        /// </div>
        /// </returns>
        public static Ext.dom.Element getEl(){return null;}
        /// <summary>
        /// Returns the focus holder element associated with this Window. By default, this is the Window's element.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see>/<see cref="Ext.Component">Ext.Component</see></span><div><p>the focus holding element or Component.</p>
        /// </div>
        /// </returns>
        private static object getFocusEl(){return null;}
        /// <summary>
        /// On render, reads an encoded style attribute, "background-position" from the style of this Component's element.
        /// This information is memoized based upon the CSS class name of this Component's element.
        /// Because child Components are rendered as textual HTML as part of the topmost Container, a dummy div is inserted
        /// into the document to receive the document element's CSS class name, and therefore style attributes.
        /// </summary>
        private static void getFrameInfo(){}
        /// <summary>
        /// Parameters<li><span>table</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="table">
        /// </param>
        private static void getFrameTpl(object table){}
        /// <summary>
        /// Gets the Header for this panel.
        /// </summary>
        public static void getHeader(){}
        /// <summary>
        /// Gets the current height of the component's underlying element.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public static JsNumber getHeight(){return null;}
        /// <summary>
        /// Retrieves the id of this component. Will autogenerate an id if one has not already been set.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString getId(){return null;}
        /// <summary>
        /// Returns the initial configuration passed to constructor when instantiating
        /// this class.
        /// </summary>
        /// <param name="name"><p>Name of the config option to return.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see>/Mixed</span><div><p>The full config object or a single config value
        /// when <c>name</c> parameter specified.</p>
        /// </div>
        /// </returns>
        public static object getInitialConfig(object name=null){return null;}
        /// <summary>
        /// This function takes the position argument passed to onRender and returns a
        /// DOM element that you can use in the insertBefore.
        /// </summary>
        /// <param name="position"><p>Index, element id or element you want
        /// to put this component before.</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>DOM element that you can use in the insertBefore</p>
        /// </div>
        /// </returns>
        public static JsObject getInsertPosition(object position){return null;}
        /// <summary>
        /// Returns the value of itemId assigned to this component, or when that
        /// is not set, returns the value of id.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString getItemId(){return null;}
        /// <summary>
        /// Returns the layout instance currently associated with this Container.
        /// If a layout has not been instantiated yet, that is done first
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.layout.container.Container">Ext.layout.container.Container</see></span><div><p>The layout</p>
        /// </div>
        /// </returns>
        public static Ext.layout.container.Container getLayout(){return null;}
        /// <summary>
        /// Gets the Ext.ComponentLoader for this Component.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.ComponentLoader">Ext.ComponentLoader</see></span><div><p>The loader instance, null if it doesn't exist.</p>
        /// </div>
        /// </returns>
        public static ComponentLoader getLoader(){return null;}
        /// <summary>
        /// Returns the CSS style object which will set the Component's scroll styles. This must be applied
        /// to the target element.
        /// </summary>
        private static void getOverflowStyle(){}
        /// <summary>
        /// Retrieves a plugin by its pluginId which has been bound to this component.
        /// </summary>
        /// <param name="pluginId">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.AbstractPlugin">Ext.AbstractPlugin</see></span><div><p>plugin instance.</p>
        /// </div>
        /// </returns>
        public static AbstractPlugin getPlugin(JsString pluginId){return null;}
        /// <summary>
        /// Gets the current XY position of the component's underlying element.
        /// </summary>
        /// <param name="local"><p>If true the element's left and top are returned instead of page XY.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The XY position of the element (e.g., [100, 200])</p>
        /// </div>
        /// </returns>
        public static JsNumber[] getPosition(object local=null){return null;}
        /// <summary>
        /// Gets the current size of the component's underlying element.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>An object containing the element's size {width: (element width), height: (element height)}</p>
        /// </div>
        /// </returns>
        public static object getSize(){return null;}
        /// <summary>
        /// Returns an object that describes how this component's width and height are managed.
        /// All of these objects are shared and should not be modified.
        /// </summary>
        /// <param name="ownerCtSizeModel">
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The size model for this component.</p>
        /// <ul><li><span>width</span> : <see cref="Ext.layout.SizeModel">Ext.layout.SizeModel</see><div><p>The <see cref="Ext.layout.SizeModel">size model</see>
        /// for the width.</p>
        /// </div></li><li><span>height</span> : <see cref="Ext.layout.SizeModel">Ext.layout.SizeModel</see><div><p>The <see cref="Ext.layout.SizeModel">size model</see>
        /// for the height.</p>
        /// </div></li></ul></div>
        /// </returns>
        public static object getSizeModel(object ownerCtSizeModel){return null;}
        /// <summary>
        /// The supplied default state gathering method for the AbstractComponent class.
        /// This method returns dimension settings such as <c>flex</c>, <c>anchor</c>, <c>width</c> and <c>height</c> along with <c>collapsed</c>
        /// state.
        /// Subclasses which implement more complex state should call the superclass's implementation, and apply their state
        /// to the result if this basic state is to be saved.
        /// Note that Component state will only be saved if the Component has a <see cref="Ext.AbstractComponentConfig.stateId">stateId</see> and there as a StateProvider
        /// configured for the document.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public static object getState(){return null;}
        /// <summary>
        /// Gets the state id for this object.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The 'stateId' or the implicit 'id' specified by component configuration.</p>
        /// </div>
        /// </returns>
        private static JsString getStateId(){return null;}
        /// <summary>
        /// Returns an offscreen div with the same class name as the element this is being rendered.
        /// This is because child item rendering takes place in a detached div which, being not part of the document, has no styling.
        /// </summary>
        /// <param name="cls">
        /// </param>
        private static void getStyleProxy(object cls){}
        /// <summary>
        /// This is used to determine where to insert the 'html', 'contentEl' and 'items' in this component.
        /// </summary>
        private static void getTargetEl(){}
        /// <summary>
        /// Parameters<li><span>name</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="name">
        /// </param>
        private static void getTpl(object name){}
        /// <summary>
        /// Gets the current width of the component's underlying element.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public static JsNumber getWidth(){return null;}
        /// <summary>
        /// Gets the xtype for this component as registered with Ext.ComponentManager. For a list of all available
        /// xtypes, see the Ext.Component header. Example usage:
        /// <code>var t = new <see cref="Ext.form.field.Text">Ext.form.field.Text</see>();
        /// alert(t.getXType());  // alerts 'textfield'
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The xtype</p>
        /// </div>
        /// </returns>
        public static JsString getXType(){return null;}
        /// <summary>
        /// Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all available xtypes, see the
        /// Ext.Component header.
        /// <strong>If using your own subclasses, be aware that a Component must register its own xtype to participate in
        /// determination of inherited xtypes.</strong>
        /// Example usage:
        /// <code>var t = new <see cref="Ext.form.field.Text">Ext.form.field.Text</see>();
        /// alert(t.getXTypes());  // alerts 'component/field/textfield'
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The xtype hierarchy string</p>
        /// </div>
        /// </returns>
        public static JsString getXTypes(){return null;}
        /// <summary>
        /// Returns the current animation if this object has any effects actively running or queued, else returns false.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Replaced by <see cref="Ext.util.Animate.getActiveAnimation">getActiveAnimation</see></p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.fx.Anim">Ext.fx.Anim</see>/<see cref="bool">Boolean</see></span><div><p>Anim if element has active effects, else false</p>
        /// </div>
        /// </returns>
        public static object hasActiveFx(){return null;}
        /// <summary>
        /// Checks if the specified CSS class exists on this element's DOM node.
        /// </summary>
        /// <param name="className"><p>The CSS class to check for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the class exists, else false</p>
        /// </div>
        /// </returns>
        public static bool hasCls(JsString className){return false;}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        private static void hasConfig(object config){}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer
        /// indicates whether the event needs firing or not.
        /// </summary>
        /// <param name="eventName"><p>The name of the event to check for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p><c>true</c> if the event is being listened for or bubbles, else <c>false</c></p>
        /// </div>
        /// </returns>
        public static bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Checks if there is currently a specified uiCls
        /// </summary>
        /// <param name="cls"><p>The cls to check</p>
        /// </param>
        public static void hasUICls(JsString cls){}
        /// <summary>
        /// Hides this Component, setting it to invisible using the configured hideMode.
        /// </summary>
        /// <param name="animateTarget"><p><strong>only valid for <see cref="Ext.ComponentConfig.floating">floating</see> Components
        /// such as <see cref="Ext.window.Window">Window</see>s or <see cref="Ext.tip.ToolTip">ToolTip</see>s, or regular Components which have
        /// been configured with <c>floating: true</c>.</strong>. The target to which the Component should animate while hiding.</p>
        /// <p>Defaults to: <c>null</c></p></param>
        /// <param name="callback"><p>A callback function to call after the Component is hidden.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the callback is executed.
        /// Defaults to this Component.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component hide(object animateTarget=null, object callback=null, object scope=null){return null;}
        /// <summary>
        /// Parses the bodyStyle config if available to create a style string that will be applied to the body element.
        /// This also includes bodyPadding and bodyBorder if available.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>A CSS style string with body styles, padding and border.</p>
        /// </div>
        /// </returns>
        private static JsString initBodyStyles(){return null;}
        /// <summary>
        /// The initComponent template method is an important initialization step for a Component. It is intended to be
        /// implemented by each subclass of Ext.Component to provide any needed constructor logic. The
        /// initComponent method of the class being created is called first, with each initComponent method
        /// up the hierarchy to Ext.Component being called thereafter. This makes it easy to implement and,
        /// if needed, override the constructor logic of the Component at any step in the hierarchy.
        /// The initComponent method <strong>must</strong> contain a call to <see cref="Ext.Base.callParent">callParent</see> in order
        /// to ensure that the parent class' initComponent method is also called.
        /// All config options passed to the constructor are applied to <c>this</c> before initComponent is called,
        /// so you can simply access them with <c>this.someOption</c>.
        /// The following example demonstrates using a dynamic string for the text of a button at the time of
        /// instantiation of the class.
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('DynamicButtonText', {
        /// extend: '<see cref="Ext.button.Button">Ext.button.Button</see>',
        /// initComponent: function() {
        /// this.text = new Date();
        /// this.renderTo = <see cref="Ext.ExtContext.getBody">Ext.getBody</see>();
        /// this.callParent();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.onReady">Ext.onReady</see>(function() {
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('DynamicButtonText');
        /// });
        /// </code>
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void initComponent(){}
        /// <summary>
        /// Initialize configuration for this class. a typical example:
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.awesome.Class', {
        /// // The default config
        /// config: {
        /// name: 'Awesome',
        /// isAwesome: true
        /// },
        /// constructor: function(config) {
        /// this.initConfig(config);
        /// }
        /// });
        /// var awesome = new My.awesome.Class({
        /// name: 'Super Awesome'
        /// });
        /// alert(awesome.getName()); // 'Super Awesome'
        /// </code>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Base">Ext.Base</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        protected static Ext.Base initConfig(object config){return null;}
        /// <summary>
        /// Override Component.initDraggable.
        /// Window uses the header element as the delegate.
        /// </summary>
        private static void initDraggable(){}
        /// <summary>
        /// </summary>
        private static void initFrame(){}
        /// <summary>
        /// Initialized the renderData to be used when rendering the renderTpl.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Object with keys and values that are going to be applied to the renderTpl</p>
        /// </div>
        /// </returns>
        private static object initRenderData(){return null;}
        /// <summary>
        /// Initializes the renderTpl.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.XTemplate">Ext.XTemplate</see></span><div><p>The renderTpl XTemplate instance.</p>
        /// </div>
        /// </returns>
        private static XTemplate initRenderTpl(){return null;}
        /// <summary>
        /// Initializes the state of the object upon construction.
        /// </summary>
        private static void initState(){}
        /// <summary>
        /// Converts style definitions to String.
        /// </summary>
        /// <param name="targetEl">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>A CSS style string with style, padding, margin and border.</p>
        /// </div>
        /// </returns>
        private static JsString initStyles(object targetEl){return null;}
        /// <summary>
        /// Tools are a Panel-specific capabilty.
        /// Panel uses initTools. Subclasses may contribute tools by implementing addTools.
        /// </summary>
        private static void initTools(){}
        /// <summary>
        /// Inserts a Component into this Container at a specified index. Fires the
        /// beforeadd event before inserting, then fires the add
        /// event after the Component has been inserted.
        /// </summary>
        /// <param name="index"><p>The index at which the Component will be inserted
        /// into the Container's items collection</p>
        /// </param>
        /// <param name="component"><p>The child Component to insert.</p>
        /// <p>Ext uses lazy rendering, and will only render the inserted Component should
        /// it become necessary.</p>
        /// <p>A Component config object may be passed in order to avoid the overhead of
        /// constructing a real Component object if lazy rendering might mean that the
        /// inserted Component will not be rendered immediately. To take advantage of
        /// this 'lazy instantiation', set the <see cref="Ext.ComponentConfig.xtype">Ext.Component.xtype</see> config
        /// property to the registered type of the Component wanted.</p>
        /// <p>For a list of all available xtypes, see <see cref="Ext.Component">Ext.Component</see>.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>component The Component (or config object) that was
        /// inserted with the Container's default config values applied.</p>
        /// </div>
        /// </returns>
        public static Ext.Component insert(JsNumber index, Ext.Component component){return null;}
        /// <summary>
        /// Inserts docked item(s) to the panel at the indicated position.
        /// </summary>
        /// <param name="pos"><p>The index at which the Component will be inserted</p>
        /// </param>
        /// <param name="component"><p>. The Component or array of components to add. The components
        /// must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right',
        /// 'bottom', 'left').</p>
        /// </param>
        public static void insertDocked(JsNumber pos, object component){}
        /// <summary>
        /// Tests whether this Component matches the selector string.
        /// </summary>
        /// <param name="selector"><p>The selector string to test against.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if this Component matches the selector.</p>
        /// </div>
        /// </returns>
        public static bool @is(JsString selector){return false;}
        /// <summary>
        /// Determines whether this Container is an ancestor of the passed Component.
        /// This will return true if the passed Component is anywhere within the subtree
        /// beneath this Container.
        /// </summary>
        /// <param name="possibleDescendant"><p>The Component to test for presence
        /// within this Container's subtree.</p>
        /// </param>
        public static void isAncestor(Ext.Component possibleDescendant){}
        /// <summary>
        /// Determines whether this component is the descendant of a particular container.
        /// </summary>
        /// <param name="container">
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if it is.</p>
        /// </div>
        /// </returns>
        public static bool isDescendantOf(Ext.container.Container container){return false;}
        /// <summary>
        /// Method to determine whether this Component is currently disabled.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>the disabled state of this Component.</p>
        /// </div>
        /// </returns>
        public static bool isDisabled(){return false;}
        /// <summary>
        /// Method to determine whether this Component is draggable.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>the draggable state of this component.</p>
        /// </div>
        /// </returns>
        public static bool isDraggable(){return false;}
        /// <summary>
        /// Method to determine whether this Component is droppable.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>the droppable state of this component.</p>
        /// </div>
        /// </returns>
        public static bool isDroppable(){return false;}
        /// <summary>
        /// Method to determine whether this Component is floating.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>the floating state of this component.</p>
        /// </div>
        /// </returns>
        public static bool isFloating(){return false;}
        /// <summary>
        /// Method to determine whether this Component is currently set to hidden.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>the hidden state of this Component.</p>
        /// </div>
        /// </returns>
        public static bool isHidden(){return false;}
        /// <summary>
        /// Determines whether this Component is the root of a layout. This returns true if
        /// this component can run its layout without assistance from or impact on its owner.
        /// If this component cannot run its layout given these restrictions, false is returned
        /// and its owner will be considered as the next candidate for the layout root.
        /// Setting the <see cref="Ext.AbstractComponent._isLayoutRoot">_isLayoutRoot</see> property to <c>true</c> causes this method to always
        /// return <c>true</c>. This may be useful when updating a layout of a Container which shrink
        /// wraps content, and you know that it will not change size, and so can safely be the
        /// topmost participant in the layout run.
        /// </summary>
        protected static void isLayoutRoot(){}
        /// <summary>
        /// Returns true if layout is suspended for this component. This can come from direct
        /// suspension of this component's layout activity (Ext.Container.suspendLayout) or if one
        /// of this component's containers is suspended.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True layout of this component is suspended.</p>
        /// </div>
        /// </returns>
        public static bool isLayoutSuspended(){return false;}
        /// <summary>
        /// Returns true if this component is visible.
        /// </summary>
        /// <param name="deep"><p>Pass <c>true</c> to interrogate the visibility status of all parent Containers to
        /// determine whether this Component is truly visible to the user.</p>
        /// <p>Generally, to determine whether a Component is hidden, the no argument form is needed. For example when creating
        /// dynamically laid out UIs in a hidden Container before showing them.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if this component is visible, false otherwise.</p>
        /// </div>
        /// </returns>
        public static bool isVisible(object deep=null){return false;}
        /// <summary>
        /// Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
        /// from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
        /// <strong>If using your own subclasses, be aware that a Component must register its own xtype to participate in
        /// determination of inherited xtypes.</strong>
        /// For a list of all available xtypes, see the <see cref="Ext.Component">Ext.Component</see> header.
        /// Example usage:
        /// <code>var t = new <see cref="Ext.form.field.Text">Ext.form.field.Text</see>();
        /// var isText = t.isXType('textfield');        // true
        /// var isBoxSubclass = t.isXType('field');       // true, descended from <see cref="Ext.form.field.Base">Ext.form.field.Base</see>
        /// var isBoxInstance = t.isXType('field', true); // false, not a direct <see cref="Ext.form.field.Base">Ext.form.field.Base</see> instance
        /// </code>
        /// </summary>
        /// <param name="xtype"><p>The xtype to check for this Component</p>
        /// </param>
        /// <param name="shallow"><p>True to check whether this Component is directly of the specified xtype, false to
        /// check whether this Component is descended from the xtype.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if this component descends from the specified xtype, false otherwise.</p>
        /// </div>
        /// </returns>
        public static bool isXType(JsString xtype, object shallow=null){return false;}
        /// <summary>
        /// Fits the window within its current container and automatically replaces the 'maximize' tool
        /// button with the 'restore' tool button. Also see toggleMaximize.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.window.Window">Ext.window.Window</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.Window maximize(){return null;}
        /// <summary>
        /// Placeholder method for minimizing the window. By default, this method simply fires the minimize event
        /// since the behavior of minimizing a window is application-specific. To implement custom minimize behavior, either
        /// the minimize event can be handled or this method can be overridden.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.window.Window">Ext.window.Window</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.Window minimize(){return null;}
        /// <summary>
        /// Shorthand for addManagedListener.
        /// Adds listeners to any Observable object (or <see cref="Ext.dom.Element">Ext.Element</see>) which are automatically removed when this Component is
        /// destroyed.
        /// </summary>
        /// <param name="item"><p>The item to which to add a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        /// <param name="opt"><p>If the <c>ename</c> parameter was an event name, this is the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> options.</p>
        /// </param>
        public static void mon(object item, object ename, System.Delegate fn=null, object scope=null, object opt=null){}
        /// <summary>
        /// Moves a Component within the Container
        /// </summary>
        /// <param name="fromIdx"><p>The index the Component you wish to move is currently at.</p>
        /// </param>
        /// <param name="toIdx"><p>The new index for the Component.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>component The Component (or config object) that was moved.</p>
        /// </div>
        /// </returns>
        public static Ext.Component move(JsNumber fromIdx, JsNumber toIdx){return null;}
        /// <summary>
        /// Shorthand for removeManagedListener.
        /// Removes listeners that were added by the <see cref="Ext.util.Observable.mon">mon</see> method.
        /// </summary>
        /// <param name="item"><p>The item from which to remove a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        public static void mun(object item, object ename, System.Delegate fn=null, object scope=null){}
        /// <summary>
        /// Returns the next node in the Component tree in tree traversal order.
        /// Note that this is not limited to siblings, and if invoked upon a node with no matching siblings, will walk the
        /// tree to attempt to find a match. Contrast with <see cref="Ext.AbstractComponent.nextSibling">nextSibling</see>.
        /// </summary>
        /// <param name="selector"><p>A <see cref="Ext.ComponentQuery">ComponentQuery</see> selector to filter the following nodes.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The next node (or the next node which matches the selector).
        /// Returns null if there is no matching node.</p>
        /// </div>
        /// </returns>
        public static Ext.Component nextNode(object selector=null){return null;}
        /// <summary>
        /// Returns the next sibling of this Component.
        /// Optionally selects the next sibling which matches the passed <see cref="Ext.ComponentQuery">ComponentQuery</see> selector.
        /// May also be refered to as <strong><c>next()</c></strong>
        /// Note that this is limited to siblings, and if no siblings of the item match, <c>null</c> is returned. Contrast with
        /// <see cref="Ext.AbstractComponent.nextNode">nextNode</see>
        /// </summary>
        /// <param name="selector"><p>A <see cref="Ext.ComponentQuery">ComponentQuery</see> selector to filter the following items.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The next sibling (or the next sibling which matches the selector).
        /// Returns null if there is no matching sibling.</p>
        /// </div>
        /// </returns>
        public static Ext.Component nextSibling(object selector=null){return null;}
        /// <summary>
        /// Shorthand for addListener.
        /// Appends an event handler to this object.  For example:
        /// <code>myGridPanel.on("mouseover", this.onMouseOver, this);
        /// </code>
        /// The method also allows for a single argument to be passed which is a config object
        /// containing properties which specify multiple events. For example:
        /// <code>myGridPanel.on({
        /// cellClick: this.onCellClick,
        /// mouseover: this.onMouseOver,
        /// mouseout: this.onMouseOut,
        /// scope: this // Important. Ensure "this" is correct during handler execution
        /// });
        /// </code>
        /// One can also specify options for each event handler separately:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: this.onCellClick, scope: this, single: true},
        /// mouseover: {fn: panel.onMouseOver, scope: panel}
        /// });
        /// </code>
        /// <em>Names</em> of methods in a specified scope may also be used. Note that
        /// <c>scope</c> MUST be specified to use this option:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: 'onCellClick', scope: this, single: true},
        /// mouseover: {fn: 'onMouseOver', scope: panel}
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventName"><p>The name of the event to listen for.
        /// May also be an object who's property names are event names.</p>
        /// </param>
        /// <param name="fn"><p>The method the event invokes, or <em>if <c>scope</c> is specified, the </em>name* of the method within
        /// the specified <c>scope</c>.  Will be called with arguments
        /// given to <see cref="Ext.util.Observable.fireEvent">fireEvent</see> plus the <c>options</c> parameter described below.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function is
        /// executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration.</p>
        /// <p><strong>Note:</strong> Unlike in ExtJS 3.x, the options object will also be passed as the last
        /// argument to every event handler.</p>
        /// <p>This object may contain any of the following properties:</p>
        /// <ul><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which the handler function is executed. <strong>If omitted,
        /// defaults to the object which fired the event.</strong></p>
        /// </div></li><li><span>delay</span> : <see cref="Number">Number</see><div><p>The number of milliseconds to delay the invocation of the handler after the event fires.</p>
        /// </div></li><li><span>single</span> : <see cref="bool">Boolean</see><div><p>True to add a handler to handle just the next firing of the event, and then remove itself.</p>
        /// </div></li><li><span>buffer</span> : <see cref="Number">Number</see><div><p>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed
        /// by the specified number of milliseconds. If the event fires again within that time,
        /// the original handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p>
        /// </div></li><li><span>target</span> : <see cref="Ext.util.Observable">Ext.util.Observable</see><div><p>Only call the handler if the event was fired on the target Observable, <em>not</em> if the event
        /// was bubbled up from a child Observable.</p>
        /// </div></li><li><span>element</span> : <see cref="String">String</see><div><p><strong>This option is only valid for listeners bound to <see cref="Ext.Component">Components</see>.</strong>
        /// The name of a Component property which references an element to add a listener to.</p>
        /// <p>  This option is useful during Component construction to add DOM event listeners to elements of
        /// <see cref="Ext.Component">Components</see> which will exist only after the Component is rendered.
        /// For example, to add a click listener to a Panel's body:</p>
        /// <pre><code>  new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// title: 'The title',
        /// listeners: {
        /// click: this.handlePanelClick,
        /// element: 'body'
        /// }
        /// });
        /// </code></pre>
        /// <p><strong>Combining Options</strong></p>
        /// <p>Using the options argument, it is possible to combine different types of listeners:</p>
        /// <p>A delayed, one-time listener.</p>
        /// <pre><code>myPanel.on('hide', this.handleClick, this, {
        /// single: true,
        /// delay: 100
        /// });
        /// </code></pre>
        /// </div></li></ul></param>
        public static void on(object eventName, System.Delegate fn=null, object scope=null, object options=null){}
        /// <summary>
        /// This method is invoked after a new Component has been added. It
        /// is passed the Component which has been added. This method may
        /// be used to update any internal structure which may depend upon
        /// the state of the child items.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="component">
        /// </param>
        /// <param name="position">
        /// </param>
        protected static void onAdd(Ext.Component component, JsNumber position){}
        /// <summary>
        /// Method to manage awareness of when components are added to their
        /// respective Container, firing an added event. References are
        /// established at add time rather than at render time.
        /// Allows addition of behavior when a Component is added to a
        /// Container. At this stage, the Component is in the parent
        /// Container's collection of child items. After calling the
        /// superclass's onAdded, the ownerCt reference will be present,
        /// and if configured with a ref, the refOwner will be set.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="container"><p>Container which holds the component</p>
        /// </param>
        /// <param name="pos"><p>Position at which the component was added</p>
        /// </param>
        protected static void onAdded(Ext.container.Container container, JsNumber pos){}
        /// <summary>
        /// This method is invoked before adding a new child Component. It
        /// is passed the new Component, and may be used to modify the
        /// Component, or prepare the Container in some way. Returning
        /// false aborts the add operation.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="item">
        /// </param>
        protected static void onBeforeAdd(Ext.Component item){}
        /// <summary>
        /// Parameters<li><span>names</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>callback</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="names">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        private static void onConfigUpdate(object names, object callback, object scope){}
        /// <summary>
        /// Allows addition of behavior to the destroy operation.
        /// After calling the superclass’s onDestroy, the Component will be destroyed.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void onDestroy(){}
        /// <summary>
        /// Allows addition of behavior to the disable operation.
        /// After calling the superclass’s onDisable, the Component will be disabled.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void onDisable(){}
        /// <summary>
        /// Invoked after a docked item is added to the Panel.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="component">
        /// </param>
        protected static void onDockedAdd(Ext.Component component){}
        /// <summary>
        /// Invoked after a docked item is removed from the Panel.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="component">
        /// </param>
        protected static void onDockedRemove(Ext.Component component){}
        /// <summary>
        /// Allows addition of behavior to the enable operation.
        /// After calling the superclass’s onEnable, the Component will be enabled.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void onEnable(){}
        /// <summary>
        /// Called when a Component's focusEl receives focus.
        /// If there is a valid default focus Component to jump to, focus that,
        /// otherwise continue as usual, focus this Component.
        /// </summary>
        private static void onFocus(){}
        /// <summary>
        /// Possibly animates down to a target element.
        /// Allows addition of behavior to the hide operation. After
        /// calling the superclass’s onHide, the Component will be hidden.
        /// Gets passed the same parameters as <see cref="Ext.ComponentEvents.hide">hide</see>.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animateTarget">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected static void onHide(object animateTarget=null, object callback=null, object scope=null){}
        /// <summary>
        /// Called after the component is moved, this method is empty by default but can be implemented by any
        /// subclass that needs to perform custom logic after a move occurs.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="x"><p>The new x position</p>
        /// </param>
        /// <param name="y"><p>The new y position</p>
        /// </param>
        protected static void onPosition(JsNumber x, JsNumber y){}
        /// <summary>
        /// This method is invoked after a new Component has been
        /// removed. It is passed the Component which has been
        /// removed. This method may be used to update any internal
        /// structure which may depend upon the state of the child items.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="component">
        /// </param>
        /// <param name="autoDestroy">
        /// </param>
        protected static void onRemove(Ext.Component component, bool autoDestroy){}
        /// <summary>
        /// Method to manage awareness of when components are removed from their
        /// respective Container, firing a removed event. References are properly
        /// cleaned up after removing a component from its owning container.
        /// Allows addition of behavior when a Component is removed from
        /// its parent Container. At this stage, the Component has been
        /// removed from its parent Container's collection of child items,
        /// but has not been destroyed (It will be destroyed if the parent
        /// Container's autoDestroy is true, or if the remove call was
        /// passed a truthy second parameter). After calling the
        /// superclass's onRemoved, the ownerCt and the refOwner will not
        /// be present.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="destroying"><p>Will be passed as true if the Container performing the remove operation will delete this
        /// Component upon remove.</p>
        /// </param>
        protected static void onRemoved(bool destroying){}
        /// <summary>
        /// Template method called when this Component's DOM structure is created.
        /// At this point, this Component's (and all descendants') DOM structure <em>exists</em> but it has not
        /// been layed out (positioned and sized).
        /// Subclasses which override this to gain access to the structure at render time should
        /// call the parent class's method before attempting to access any child elements of the Component.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="parentNode"><p>The parent Element in which this Component's encapsulating element is contained.</p>
        /// </param>
        /// <param name="containerIdx"><p>The index within the parent Container's child collection of this Component.</p>
        /// </param>
        protected static void onRender(Ext.dom.Element parentNode, JsNumber containerIdx){}
        /// <summary>
        /// Allows addition of behavior to the resize operation.
        /// Called when Ext.resizer.Resizer#drag event is fired.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected static void onResize(){}
        /// <summary>
        /// Allows addition of behavior to the show operation. After
        /// calling the superclass's onShow, the Component will be visible.
        /// Override in subclasses where more complex behaviour is needed.
        /// Gets passed the same parameters as <see cref="Ext.ComponentEvents.show">show</see>.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animateTarget">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected static void onShow(object animateTarget=null, object callback=null, object scope=null){}
        /// <summary>
        /// Invoked after the afterShow method is complete.
        /// Gets passed the same <c>callback</c> and <c>scope</c> parameters that <see cref="Ext.Component.afterShow">afterShow</see> received.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected static void onShowComplete(object callback=null, object scope=null){}
        /// <summary>
        /// This method is called when any of the stateEvents are fired.
        /// </summary>
        private static void onStateChange(){}
        /// <summary>
        /// Prepares a given class for observable instances. This method is called when a
        /// class derives from this class or uses this class as a mixin.
        /// </summary>
        /// <param name="T"><p>The class constructor to prepare.</p>
        /// </param>
        private static void prepareClass(System.Delegate T){}
        /// <summary>
        /// Returns the previous node in the Component tree in tree traversal order.
        /// Note that this is not limited to siblings, and if invoked upon a node with no matching siblings, will walk the
        /// tree in reverse order to attempt to find a match. Contrast with <see cref="Ext.AbstractComponent.previousSibling">previousSibling</see>.
        /// </summary>
        /// <param name="selector"><p>A <see cref="Ext.ComponentQuery">ComponentQuery</see> selector to filter the preceding nodes.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The previous node (or the previous node which matches the selector).
        /// Returns null if there is no matching node.</p>
        /// </div>
        /// </returns>
        public static Ext.Component previousNode(object selector=null){return null;}
        /// <summary>
        /// Returns the previous sibling of this Component.
        /// Optionally selects the previous sibling which matches the passed <see cref="Ext.ComponentQuery">ComponentQuery</see>
        /// selector.
        /// May also be refered to as <strong><c>prev()</c></strong>
        /// Note that this is limited to siblings, and if no siblings of the item match, <c>null</c> is returned. Contrast with
        /// <see cref="Ext.AbstractComponent.previousNode">previousNode</see>
        /// </summary>
        /// <param name="selector"><p>A <see cref="Ext.ComponentQuery">ComponentQuery</see> selector to filter the preceding items.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The previous sibling (or the previous sibling which matches the selector).
        /// Returns null if there is no matching sibling.</p>
        /// </div>
        /// </returns>
        public static Ext.Component previousSibling(object selector=null){return null;}
        /// <summary>
        /// Displays a message box with a progress bar.
        /// You are responsible for updating the progress bar as needed via <see cref="Ext.window.MessageBox.updateProgress">updateProgress</see>
        /// and closing the message box when the process is complete.
        /// </summary>
        /// <param name="title"><p>The title bar text</p>
        /// </param>
        /// <param name="msg"><p>The message box body text</p>
        /// </param>
        /// <param name="progressText"><p>The text to display inside the progress bar</p>
        /// <p>Defaults to: <c>&quot;&quot;</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.window.MessageBox">Ext.window.MessageBox</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.MessageBox progress(JsString title, JsString msg, object progressText=null){return null;}
        /// <summary>
        /// Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).
        /// The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user
        /// clicks either button, and the id of the button that was clicked (could also be the top-right
        /// close button, which will always report as "cancel") and the text that was entered will be passed as the two parameters to the callback.
        /// </summary>
        /// <param name="title"><p>The title bar text</p>
        /// </param>
        /// <param name="msg"><p>The message box body text</p>
        /// </param>
        /// <param name="fn"><p>The callback function invoked after the message box is closed.
        /// See <see cref="Ext.window.MessageBox.show">show</see> method for details.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the callback is executed.</p>
        /// <p>Defaults to: <c>window</c></p></param>
        /// <param name="multiline"><p>True to create a multiline textbox using the defaultTextHeight
        /// property, or the height in pixels to create the textbox/</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="value"><p>Default value of the text input element</p>
        /// <p>Defaults to: <c>&quot;&quot;</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.window.MessageBox">Ext.window.MessageBox</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.MessageBox prompt(JsString title, JsString msg, System.Delegate fn=null, object scope=null, object multiline=null, object value=null){return null;}
        /// <summary>
        /// Retrieves all descendant components which match the passed selector.
        /// Executes an Ext.ComponentQuery.query using this container as its root.
        /// </summary>
        /// <param name="selector"><p>Selector complying to an <see cref="Ext.ComponentQuery">Ext.ComponentQuery</see> selector.
        /// If no selector is specified all items will be returned.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>Components which matched the selector</p>
        /// </div>
        /// </returns>
        public static Ext.Component[] query(object selector=null){return null;}
        /// <summary>
        /// Retrieves all descendant components which match the passed function.
        /// The function should return false for components that are to be
        /// excluded from the selection.
        /// </summary>
        /// <param name="fn"><p>The matcher function. It will be called with a single argument,
        /// the component being tested.</p>
        /// </param>
        /// <param name="scope"><p>The scope in which to run the function. If not specified,
        /// it will default to the active component.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>Components matched by the passed function</p>
        /// </div>
        /// </returns>
        public static Ext.Component[] queryBy(System.Delegate fn, object scope=null){return null;}
        /// <summary>
        /// Finds a component at any level under this container matching the id/itemId.
        /// This is a shorthand for calling ct.down('#' + id);
        /// </summary>
        /// <param name="id"><p>The id to find</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The matching id, null if not found</p>
        /// </div>
        /// </returns>
        public static Ext.Component queryById(JsString id){return null;}
        /// <summary>
        /// Called by Component#doAutoRender
        /// Register a Container configured <c>floating: true</c> with this Component's <see cref="Ext.ZIndexManager">ZIndexManager</see>.
        /// Components added in ths way will not participate in any layout, but will be rendered
        /// upon first show in the way that <see cref="Ext.window.Window">Window</see>s are.
        /// </summary>
        /// <param name="cmp">
        /// </param>
        public static void registerFloatingItem(object cmp){}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this.
        /// For example if you are extending Grid, you might decide to forward some events from store.
        /// So you can do this inside your initComponent:
        /// <code>this.relayEvents(this.getStore(), ['load']);
        /// </code>
        /// The grid instance will then have an observable 'load' event which will be passed the
        /// parameters of the store's load event and any function fired with the grid's load event
        /// would have access to the grid using the <c>this</c> keyword.
        /// </summary>
        /// <param name="origin"><p>The Observable whose events this object is to relay.</p>
        /// </param>
        /// <param name="events"><p>Array of event names to relay.</p>
        /// </param>
        /// <param name="prefix"><p>A common prefix to prepend to the event names. For example:</p>
        /// <pre><code>this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
        /// </code></pre>
        /// <p>Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.</p>
        /// </param>
        public static void relayEvents(object origin, JsArray<String> events, object prefix=null){}
        /// <summary>
        /// Removes a component from this container.  Fires the beforeremove event
        /// before removing, then fires the remove event after the component has
        /// been removed.
        /// </summary>
        /// <param name="component"><p>The component reference or id to remove.</p>
        /// </param>
        /// <param name="autoDestroy"><p>True to automatically invoke the removed Component's
        /// <see cref="Ext.Component">Ext.Component.destroy</see> function.</p>
        /// <p>Defaults to the value of this Container's <see cref="Ext.container.AbstractContainerConfig.autoDestroy">autoDestroy</see> config.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>component The Component that was removed.</p>
        /// </div>
        /// </returns>
        public static Ext.Component remove(object component, object autoDestroy=null){return null;}
        /// <summary>
        /// Removes all components from this container.
        /// </summary>
        /// <param name="autoDestroy"><p>True to automatically invoke the removed
        /// Component's <see cref="Ext.Component">Ext.Component.destroy</see> function.
        /// Defaults to the value of this Container's <see cref="Ext.container.AbstractContainerConfig.autoDestroy">autoDestroy</see> config.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>Array of the removed components</p>
        /// </div>
        /// </returns>
        public static Ext.Component[] removeAll(object autoDestroy=null){return null;}
        /// <summary>
        /// Removes a CSS class from the body element.
        /// </summary>
        /// <param name="cls"><p>The class to remove</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.panel.Panel removeBodyCls(JsString cls){return null;}
        /// <summary>
        /// Removes items in the childEls array based on the return value of a supplied test
        /// function. The function is called with a entry in childEls and if the test function
        /// return true, that entry is removed. If false, that entry is kept.
        /// </summary>
        /// <param name="testFn"><p>The test function.</p>
        /// </param>
        public static void removeChildEls(System.Delegate testFn){}
        /// <summary>
        /// Removes a CSS class from the top level element representing this component.
        /// </summary>
        /// <param name="cls"><p>The CSS class name to remove</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>Returns the Component to allow method chaining.</p>
        /// </div>
        /// </returns>
        public static Ext.Component removeCls(object cls){return null;}
        /// <summary>
        /// Removes a cls to the uiCls array, which will also call removeUIClsFromElement and removes it from all
        /// elements of this component.
        /// </summary>
        /// <param name="cls"><p>A string or an array of strings to remove to the uiCls</p>
        /// </param>
        public static void removeClsWithUI(object cls){}
        /// <summary>
        /// Removes the docked item from the panel.
        /// </summary>
        /// <param name="item"><p>. The Component to remove.</p>
        /// </param>
        /// <param name="autoDestroy"><p>Destroy the component after removal.</p>
        /// </param>
        public static void removeDocked(Ext.Component item, object autoDestroy=null){}
        /// <summary>
        /// Removes an event handler.
        /// </summary>
        /// <param name="eventName"><p>The type of event the handler was associated with.</p>
        /// </param>
        /// <param name="fn"><p>The handler to remove. <strong>This must be a reference to the function passed into the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> call.</strong></p>
        /// </param>
        /// <param name="scope"><p>The scope originally specified for the handler. It must be the same as the
        /// scope argument specified in the original call to <see cref="Ext.util.Observable.addListener">addListener</see> or the listener will not be removed.</p>
        /// </param>
        public static void removeListener(JsString eventName, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Removes listeners that were added by the mon method.
        /// </summary>
        /// <param name="item"><p>The item from which to remove a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        public static void removeManagedListener(object item, object ename, System.Delegate fn=null, object scope=null){}
        /// <summary>
        /// Remove a single managed listener item
        /// </summary>
        /// <param name="isClear"><p>True if this is being called during a clear</p>
        /// </param>
        /// <param name="managedListener"><p>The managed listener item
        /// See removeManagedListener for other args</p>
        /// </param>
        private static void removeManagedListenerItem(bool isClear, object managedListener){}
        /// <summary>
        /// Method which removes a specified UI + uiCls from the components element. The cls which is added to the element
        /// will be: this.baseCls + '-' + ui
        /// </summary>
        /// <param name="ui"><p>The UI to add to the element</p>
        /// </param>
        public static void removeUIClsFromElement(JsString ui){}
        /// <summary>
        /// Method which removes a specified UI from the components element.
        /// </summary>
        private static void removeUIFromElement(){}
        /// <summary>
        /// Renders the Component into the passed HTML element.
        /// <strong>If you are using a <see cref="Ext.container.Container">Container</see> object to house this
        /// Component, then do not use the render method.</strong>
        /// A Container's child Components are rendered by that Container's
        /// <see cref="Ext.container.ContainerConfig.layout">layout</see> manager when the Container is first rendered.
        /// If the Container is already rendered when a new child Component is added, you may need to call
        /// the Container's <see cref="Ext.container.Container.doLayout">doLayout</see> to refresh the view which
        /// causes any unrendered child Components to be rendered. This is required so that you can add
        /// multiple child components if needed while only refreshing the layout once.
        /// When creating complex UIs, it is important to remember that sizing and positioning
        /// of child items is the responsibility of the Container's <see cref="Ext.container.ContainerConfig.layout">layout</see>
        /// manager.  If you expect child items to be sized in response to user interactions, you must
        /// configure the Container with a layout manager which creates and manages the type of layout you
        /// have in mind.
        /// <strong>Omitting the Container's <see cref="Ext.container.ContainerConfig.layout">layout</see> config means that a basic
        /// layout manager is used which does nothing but render child components sequentially into the
        /// Container. No sizing or positioning will be performed in this situation.</strong>
        /// </summary>
        /// <param name="container"><p>The element this Component should be
        /// rendered into. If it is being created from existing markup, this should be omitted.</p>
        /// </param>
        /// <param name="position"><p>The element ID or DOM node index within the container <strong>before</strong>
        /// which this component will be inserted (defaults to appending to the end of the container)</p>
        /// </param>
        public static void render(object container=null, object position=null){}
        /// <summary>
        /// Restores a maximized window back to its original size and position prior to being maximized
        /// and also replaces the 'restore' tool button with the 'maximize' tool button. Also see toggleMaximize.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.window.Window">Ext.window.Window</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.Window restore(){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents).
        /// If events were suspended using the <c>queueSuspended</c> parameter, then all events fired
        /// during event suspension will be sent to any listeners now.
        /// </summary>
        public static void resumeEvents(){}
        /// <summary>
        /// Conditionally saves a single property from this object to the given state object.
        /// The idea is to only save state which has changed from the initial state so that
        /// current software settings do not override future software settings. Only those
        /// values that are user-changed state should be saved.
        /// </summary>
        /// <param name="propName"><p>The name of the property to save.</p>
        /// </param>
        /// <param name="state"><p>The state object in to which to save the property.</p>
        /// </param>
        /// <param name="stateName"><p>The name to use for the property in state.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the property was saved, false if not.</p>
        /// </div>
        /// </returns>
        public static bool savePropToState(JsString propName, object state, object stateName=null){return false;}
        /// <summary>
        /// Gathers additional named properties of the instance and adds their current values
        /// to the passed state object.
        /// </summary>
        /// <param name="propNames"><p>The name (or array of names) of the property to save.</p>
        /// </param>
        /// <param name="state"><p>The state object in to which to save the property values.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>state</p>
        /// </div>
        /// </returns>
        public static object savePropsToState(object propNames, object state){return null;}
        /// <summary>
        /// Saves the state of the object to the persistence store.
        /// </summary>
        public static void saveState(){}
        /// <summary>
        /// Scrolls this Component's target element by the passed delta values, optionally animating.
        /// All of the following are equivalent:
        /// <code> comp.scrollBy(10, 10, true);
        /// comp.scrollBy([10, 10], true);
        /// comp.scrollBy({ x: 10, y: 10 }, true);
        /// </code>
        /// </summary>
        /// <param name="deltaX"><p>Either the x delta, an Array specifying x and y deltas or
        /// an object with "x" and "y" properties.</p>
        /// </param>
        /// <param name="deltaY"><p>Either the y delta, or an animate flag or config object.</p>
        /// </param>
        /// <param name="animate"><p>Animate flag/config object if the delta values were passed separately.</p>
        /// </param>
        public static void scrollBy(object deltaX, object deltaY, object animate){}
        /// <summary>
        /// Ensures that all effects queued after sequenceFx is called on this object are run in sequence. This is the
        /// opposite of syncFx.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static object sequenceFx(){return null;}
        /// <summary>
        /// This method is called internally by Ext.ZIndexManager to signal that a floating Component has either been
        /// moved to the top of its zIndex stack, or pushed from the top of its zIndex stack.
        /// If a <em>Window</em> is superceded by another Window, deactivating it hides its shadow.
        /// This method also fires the <see cref="Ext.ComponentEvents.activate">activate</see> or
        /// <see cref="Ext.ComponentEvents.deactivate">deactivate</see> event depending on which action occurred.
        /// </summary>
        /// <param name="active"><p>True to activate the Component, false to deactivate it.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="newActive"><p>The newly active Component which is taking over topmost zIndex position.</p>
        /// </param>
        public static void setActive(object active=null, object newActive=null){}
        /// <summary>
        /// Sets the overflow on the content element of the component.
        /// </summary>
        /// <param name="scroll"><p>True to allow the Component to auto scroll.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setAutoScroll(bool scroll){return null;}
        /// <summary>
        /// Sets the body style according to the passed parameters.
        /// </summary>
        /// <param name="style"><p>A full style specification string, or object, or the name of a style property to set.</p>
        /// </param>
        /// <param name="value"><p>If the first param was a style property name, the style property value.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.panel.Panel setBodyStyle(object style, JsString value){return null;}
        /// <summary>
        /// Parameters<li><span>border</span> : <see cref="String">String</see>/<see cref="Number">Number</see><div><p>The border, see <see>border</see>. If a falsey value is passed
        /// the border will be removed.</p>
        /// </div></li>
        /// </summary>
        /// <param name="border"><p>The border, see <see cref="Ext.AbstractComponentConfig.border">border</see>. If a falsey value is passed
        /// the border will be removed.</p>
        /// </param>
        public static void setBorder(object border){}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>applyIfNotSet</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <param name="applyIfNotSet">
        /// </param>
        private static void setConfig(object config, object applyIfNotSet){}
        /// <summary>
        /// Enable or disable the component.
        /// </summary>
        /// <param name="disabled"><p>True to disable.</p>
        /// </param>
        public static void setDisabled(bool disabled){}
        /// <summary>
        /// Sets the dock position of this component in its parent panel. Note that this only has effect if this item is part
        /// of the dockedItems collection of a parent that has a DockLayout (note that any Panel has a DockLayout by default)
        /// </summary>
        /// <param name="dock"><p>The dock position.</p>
        /// </param>
        /// <param name="layoutParent"><p>True to re-layout parent.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setDocked(object dock, object layoutParent=null){return null;}
        /// <summary>
        /// Sets the height of the component. This method fires the resize event.
        /// </summary>
        /// <param name="height"><p>The new height to set. This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new height in the <see cref="Ext.AbstractComponent.getEl">Element</see>'s <see cref="Ext.dom.Element.defaultUnit">Ext.Element.defaultUnit</see>s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style.</li>
        /// <li><em>undefined</em> to leave the height unchanged.</li>
        /// </ul>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setHeight(JsNumber height){return null;}
        /// <summary>
        /// Adds the specified icon to the dialog.  By default, the class 'x-messagebox-icon' is applied for default
        /// styling, and the class passed in is expected to supply the background image url. Pass in empty string ('')
        /// to clear any existing icon. This method must be called before the MessageBox is shown.
        /// The following built-in icon classes are supported, but you can also pass in a custom class name:
        /// <code><see cref="Ext.window.MessageBox.INFO">Ext.window.MessageBox.INFO</see>
        /// <see cref="Ext.window.MessageBox.WARNING">Ext.window.MessageBox.WARNING</see>
        /// <see cref="Ext.window.MessageBox.QUESTION">Ext.window.MessageBox.QUESTION</see>
        /// <see cref="Ext.window.MessageBox.ERROR">Ext.window.MessageBox.ERROR</see>
        /// </code>
        /// </summary>
        /// <param name="icon"><p>A CSS classname specifying the icon's background image url, or empty string to clear the icon</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.window.MessageBox">Ext.window.MessageBox</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.MessageBox setIcon(JsString icon){return null;}
        /// <summary>
        /// Set the iconCls for the panel's header. See Ext.panel.Header.iconCls. It will fire the
        /// iconclschange event after completion.
        /// </summary>
        /// <param name="newIconCls"><p>The new CSS class name</p>
        /// </param>
        public static void setIconCls(JsString newIconCls){}
        /// <summary>
        /// This method allows you to show or hide a LoadMask on top of this component.
        /// </summary>
        /// <param name="load"><p>True to show the default LoadMask, a config object that will be passed to the
        /// LoadMask constructor, or a message String to show. False to hide the current LoadMask.</p>
        /// </param>
        /// <param name="targetEl"><p>True to mask the targetEl of this Component instead of the <c>this.el</c>. For example,
        /// setting this to true on a Panel will cause only the body to be masked.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.LoadMask">Ext.LoadMask</see></span><div><p>The LoadMask instance that has just been shown.</p>
        /// </div>
        /// </returns>
        public static LoadMask setLoading(object load, object targetEl=null){return null;}
        /// <summary>
        /// Sets the overflow x/y on the content element of the component. The x/y overflow
        /// values can be any valid CSS overflow (e.g., 'auto' or 'scroll'). By default, the
        /// value is 'hidden'. Passing null for one of the values will erase the inline style.
        /// Passing undefined will preserve the current value.
        /// </summary>
        /// <param name="overflowX"><p>The overflow-x value.</p>
        /// </param>
        /// <param name="overflowY"><p>The overflow-y value.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setOverflowXY(JsString overflowX, JsString overflowY){return null;}
        /// <summary>
        /// Sets the page XY position of the component. To set the left and top instead, use setPosition.
        /// This method fires the move event.
        /// </summary>
        /// <param name="x"><p>The new x position</p>
        /// </param>
        /// <param name="y"><p>The new y position</p>
        /// </param>
        /// <param name="animate"><p>True to animate the Component into its new position. You may also pass an
        /// animation configuration.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setPagePosition(JsNumber x, JsNumber y, object animate=null){return null;}
        /// <summary>
        /// Sets the left and top of the component. To set the page XY position instead, use setPagePosition. This
        /// method fires the move event.
        /// </summary>
        /// <param name="left"><p>The new left</p>
        /// </param>
        /// <param name="top"><p>The new top</p>
        /// </param>
        /// <param name="animate"><p>If true, the Component is <em>animated</em> into its new position. You may also pass an
        /// animation configuration.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setPosition(JsNumber left, JsNumber top, object animate=null){return null;}
        /// <summary>
        /// Sets the width and height of this Component. This method fires the resize event. This method can accept
        /// either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.
        /// </summary>
        /// <param name="width"><p>The new width to set. This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new width in the <see cref="Ext.AbstractComponent.getEl">Element</see>'s <see cref="Ext.dom.Element.defaultUnit">Ext.Element.defaultUnit</see>s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style.</li>
        /// <li>A size object in the format <c>{width: widthValue, height: heightValue}</c>.</li>
        /// <li><c>undefined</c> to leave the width unchanged.</li>
        /// </ul>
        /// </param>
        /// <param name="height"><p>The new height to set (not required if a size object is passed as the first arg).
        /// This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new height in the <see cref="Ext.AbstractComponent.getEl">Element</see>'s <see cref="Ext.dom.Element.defaultUnit">Ext.Element.defaultUnit</see>s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style. Animation may <strong>not</strong> be used.</li>
        /// <li><c>undefined</c> to leave the height unchanged.</li>
        /// </ul>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setSize(object width, object height){return null;}
        /// <summary>
        /// Set a title for the panel's header. See Ext.panel.Header.title.
        /// </summary>
        /// <param name="newTitle">
        /// </param>
        public static void setTitle(JsString newTitle){}
        /// <summary>
        /// Sets the UI for the component. This will remove any existing UIs on the component. It will also loop through any
        /// uiCls set on the component and rename them so they include the new UI
        /// </summary>
        /// <param name="ui"><p>The new UI for the component</p>
        /// </param>
        public static void setUI(JsString ui){}
        /// <summary>
        /// Convenience function to hide or show this component by boolean.
        /// </summary>
        /// <param name="visible"><p>True to show, false to hide</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setVisible(bool visible){return null;}
        /// <summary>
        /// Sets the width of the component. This method fires the resize event.
        /// </summary>
        /// <param name="width"><p>The new width to setThis may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new width in the <see cref="Ext.AbstractComponent.getEl">Element</see>'s <see cref="Ext.dom.Element.defaultUnit">Ext.Element.defaultUnit</see>s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style.</li>
        /// </ul>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component setWidth(JsNumber width){return null;}
        /// <summary>
        /// Inject a reference to the function which applies the render template into the framing template. The framing template
        /// wraps the content.
        /// </summary>
        /// <param name="frameTpl">
        /// </param>
        private static void setupFramingTpl(object frameTpl){}
        /// <summary>
        /// Displays a new message box, or reinitializes an existing message box, based on the config options passed in. All
        /// display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally, although those calls
        /// are basic shortcuts and do not support all of the config options allowed here.
        /// Example usage:
        /// <code><see cref="Ext.MessageBoxEvents.show">Ext.Msg.show</see>({
        /// title: 'Address',
        /// msg: 'Please enter your address:',
        /// width: 300,
        /// buttons: <see cref="Ext.MessageBox.OKCANCEL">Ext.Msg.OKCANCEL</see>,
        /// multiline: true,
        /// fn: saveAddress,
        /// animateTarget: 'addAddressBtn',
        /// icon: <see cref="Ext.window.MessageBox.INFO">Ext.window.MessageBox.INFO</see>
        /// });
        /// </code>
        /// </summary>
        /// <param name="config"><p>The following config options are supported:</p>
        /// <ul><li><span>animateTarget</span> : <see cref="String">String</see>/<see cref="Ext.dom.Element">Ext.dom.Element</see><div><p>An id or Element from which the message box should animate as it opens and closes.</p>
        /// </div></li><li><span>buttons</span> : <see cref="Number">Number</see> (optional)<div><p>A bitwise button specifier consisting of the sum of any of the following constants:</p>
        /// <ul>
        /// <li><see cref="Ext.MessageBox.OK">Ext.MessageBox.OK</see></li>
        /// <li><see cref="Ext.MessageBox.YES">Ext.MessageBox.YES</see></li>
        /// <li><see cref="Ext.MessageBox.NO">Ext.MessageBox.NO</see></li>
        /// <li><see cref="Ext.MessageBox.CANCEL">Ext.MessageBox.CANCEL</see></li>
        /// </ul>
        /// <p>Some common combinations have already been predefined:</p>
        /// <ul>
        /// <li><see cref="Ext.MessageBox.OKCANCEL">Ext.MessageBox.OKCANCEL</see></li>
        /// <li><see cref="Ext.MessageBox.YESNO">Ext.MessageBox.YESNO</see></li>
        /// <li><see cref="Ext.MessageBox.YESNOCANCEL">Ext.MessageBox.YESNOCANCEL</see></li>
        /// </ul>
        /// <p>Or false to not show any buttons.</p>
        /// <p>This may also be specified as an object hash containing custom button text in the same format as the
        /// <see cref="Ext.window.MessageBox.buttonText">buttonText</see> config. Button IDs present as property names will be made visible.</p>
        /// <p>Defaults to: <c>false</c></p></div></li><li><span>closable</span> : <see cref="bool">Boolean</see><div><p>False to hide the top-right close button (defaults to true). Note that progress and wait dialogs will ignore this
        /// property and always hide the close button as they can only be closed programmatically.</p>
        /// </div></li><li><span>cls</span> : <see cref="String">String</see><div><p>A custom CSS class to apply to the message box's container element</p>
        /// </div></li><li><span>defaultTextHeight</span> : <see cref="Number">Number</see> (optional)<div><p>The default height in pixels of the message box's multiline textarea if displayed.</p>
        /// <p>Defaults to: <c>75</c></p></div></li><li><span>fn</span> : <see cref="Function">Function</see><div><p>A callback function which is called when the dialog is dismissed either by clicking on the configured buttons, or
        /// on the dialog close button, or by pressing the return button to enter input.</p>
        /// <p>Progress and wait dialogs will ignore this option since they do not respond to user actions and can only be
        /// closed programmatically, so any required function should be called by the same code after it closes the dialog.
        /// Parameters passed:</p>
        /// <h3>Parameters</h3><ul><li><span>buttonId</span> : <see cref="String">String</see><div><p>The ID of the button pressed, one of:</p>
        /// <ul>
        /// <li>ok</li>
        /// <li>yes</li>
        /// <li>no</li>
        /// <li>cancel</li>
        /// </ul>
        /// </div></li><li><span>text</span> : <see cref="String">String</see><div><p>Value of the input field if either <c>prompt</c> or <c>multiline</c> is true</p>
        /// </div></li><li><span>opt</span> : <see cref="Object">Object</see><div><p>The config object passed to show.</p>
        /// </div></li></ul></div></li><li><span>buttonText</span> : <see cref="Object">Object</see><div><p>An object containing string properties which override the system-supplied button text values just for this
        /// invocation. The property names are:</p>
        /// <ul>
        /// <li>ok</li>
        /// <li>yes</li>
        /// <li>no</li>
        /// <li>cancel</li>
        /// </ul>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which the function will be executed.</p>
        /// </div></li><li><span>icon</span> : <see cref="String">String</see><div><p>A CSS class that provides a background image to be used as the body icon for the dialog.
        /// One can use a predefined icon class:</p>
        /// <ul>
        /// <li><see cref="Ext.MessageBox.INFO">Ext.MessageBox.INFO</see></li>
        /// <li><see cref="Ext.MessageBox.WARNING">Ext.MessageBox.WARNING</see></li>
        /// <li><see cref="Ext.MessageBox.QUESTION">Ext.MessageBox.QUESTION</see></li>
        /// <li><see cref="Ext.MessageBox.ERROR">Ext.MessageBox.ERROR</see></li>
        /// </ul>
        /// <p>or use just any <c>'custom-class'</c>. Defaults to empty string.</p>
        /// </div></li><li><span>iconCls</span> : <see cref="String">String</see><div><p>The standard <see cref="Ext.window.WindowConfig.iconCls">Ext.window.Window.iconCls</see> to add an optional header icon (defaults to '')</p>
        /// </div></li><li><span>maxWidth</span> : <see cref="Number">Number</see><div><p>The maximum width in pixels of the message box (defaults to 600)</p>
        /// </div></li><li><span>minWidth</span> : <see cref="Number">Number</see><div><p>The minimum width in pixels of the message box (defaults to 100)</p>
        /// </div></li><li><span>modal</span> : <see cref="bool">Boolean</see><div><p>False to allow user interaction with the page while the message box is displayed (defaults to true)</p>
        /// </div></li><li><span>msg</span> : <see cref="String">String</see><div><p>A string that will replace the existing message box body text (defaults to the XHTML-compliant non-breaking space
        /// character '&#160;')</p>
        /// </div></li><li><span>multiline</span> : <see cref="bool">Boolean</see><div><p>True to prompt the user to enter multi-line text (defaults to false)</p>
        /// </div></li><li><span>progress</span> : <see cref="bool">Boolean</see><div><p>True to display a progress bar (defaults to false)</p>
        /// </div></li><li><span>progressText</span> : <see cref="String">String</see><div><p>The text to display inside the progress bar if progress = true (defaults to '')</p>
        /// </div></li><li><span>prompt</span> : <see cref="bool">Boolean</see><div><p>True to prompt the user to enter single-line text (defaults to false)</p>
        /// </div></li><li><span>proxyDrag</span> : <see cref="bool">Boolean</see><div><p>True to display a lightweight proxy while dragging (defaults to false)</p>
        /// </div></li><li><span>title</span> : <see cref="String">String</see><div><p>The title text</p>
        /// </div></li><li><span>value</span> : <see cref="String">String</see><div><p>The string value to set into the active textbox element if displayed</p>
        /// </div></li><li><span>wait</span> : <see cref="bool">Boolean</see><div><p>True to display a progress bar (defaults to false)</p>
        /// </div></li><li><span>waitConfig</span> : <see cref="Object">Object</see><div><p>A <see cref="Ext.ProgressBar.wait">Ext.ProgressBar.wait</see> config object (applies only if wait = true)</p>
        /// </div></li><li><span>width</span> : <see cref="Number">Number</see><div><p>The width of the dialog in pixels</p>
        /// </div></li></ul></param>
        /// <returns>
        /// <span><see cref="Ext.window.MessageBox">Ext.window.MessageBox</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.MessageBox show(object config=null){return null;}
        /// <summary>
        /// Displays component at specific xy position.
        /// A floating component (like a menu) is positioned relative to its ownerCt if any.
        /// Useful for popping up a context menu:
        /// <code>listeners: {
        /// itemcontextmenu: function(view, record, item, index, event, options) {
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.menu.Menu">Ext.menu.Menu</see>', {
        /// width: 100,
        /// height: 100,
        /// margin: '0 0 10 0',
        /// items: [{
        /// text: 'regular item 1'
        /// },{
        /// text: 'regular item 2'
        /// },{
        /// text: 'regular item 3'
        /// }]
        /// }).showAt(event.getXY());
        /// }
        /// }
        /// </code>
        /// </summary>
        /// <param name="x"><p>The new x position</p>
        /// </param>
        /// <param name="y"><p>The new y position</p>
        /// </param>
        /// <param name="animate"><p>True to animate the Component into its new position. You may also pass an
        /// animation configuration.</p>
        /// </param>
        public static void showAt(JsNumber x, JsNumber y, object animate=null){}
        /// <summary>
        /// This method begins the slide out of the floated panel.
        /// </summary>
        private static void slideOutFloatedPanelBegin(){}
        /// <summary>
        /// This method cleans up after the slide out of the floated panel.
        /// </summary>
        private static void slideOutFloatedPanelEnd(){}
        /// <summary>
        /// Get the reference to the class from which this object was instantiated. Note that unlike self,
        /// this.statics() is scope-independent and it always returns the class from which it was called, regardless of what
        /// this points to during run-time
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// totalCreated: 0,
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// var statics = this.statics();
        /// alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
        /// // equivalent to: My.Cat.speciesName
        /// alert(this.self.speciesName);   // dependent on 'this'
        /// statics.totalCreated++;
        /// },
        /// clone: function() {
        /// var cloned = new this.self;                      // dependent on 'this'
        /// cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
        /// return cloned;
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// },
        /// constructor: function() {
        /// this.callParent();
        /// }
        /// });
        /// var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));         // alerts 'My.SnowLeopard'
        /// alert(clone.groupName);                 // alerts 'Cat'
        /// alert(My.Cat.totalCreated);             // alerts 3
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Class">Ext.Class</see></span><div>
        /// </div>
        /// </returns>
        protected static Class statics(){return null;}
        /// <summary>
        /// Stops any running effects and clears this object's internal effects queue if it contains any additional effects
        /// that haven't started yet.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public static Ext.dom.Element stopAnimation(){return null;}
        /// <summary>
        /// Stops any running effects and clears this object's internal effects queue if it contains any additional effects
        /// that haven't started yet.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Replaced by <see cref="Ext.util.Animate.stopAnimation">stopAnimation</see></p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public static Ext.dom.Element stopFx(){return null;}
        /// <summary>
        /// Suspends the firing of all events. (see resumeEvents)
        /// </summary>
        /// <param name="queueSuspended"><p>Pass as true to queue up suspended events to be fired
        /// after the <see cref="Ext.util.Observable.resumeEvents">resumeEvents</see> call instead of discarding all suspended events.</p>
        /// </param>
        public static void suspendEvents(bool queueSuspended){}
        /// <summary>
        /// Ensures that all effects queued after syncFx is called on this object are run concurrently. This is the opposite
        /// of sequenceFx.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static object syncFx(){return null;}
        /// <summary>
        /// Synchronizes the presence of our listener for window resize events. This method
        /// should be called whenever this status might change.
        /// </summary>
        private static void syncMonitorWindowResize(){}
        /// <summary>
        /// Sends this Component to the back of (lower z-index than) any other visible windows
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component toBack(){return null;}
        /// <summary>
        /// Brings this floating Component to the front of any other visible, floating Components managed by the same
        /// ZIndexManager
        /// If this Component is modal, inserts the modal mask just below this Component in the z-index stack.
        /// </summary>
        /// <param name="preventFocus"><p>Specify <c>true</c> to prevent the Component from being focused.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component toFront(object preventFocus=null){return null;}
        /// <summary>
        /// Shortcut for performing an expand or collapse based on the current state of the panel.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.panel.Panel toggleCollapse(){return null;}
        /// <summary>
        /// A shortcut method for toggling between maximize and restore based on the current maximized
        /// state of the window.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.window.Window">Ext.window.Window</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.Window toggleMaximize(){return null;}
        /// <summary>
        /// Shorthand for removeListener.
        /// Removes an event handler.
        /// </summary>
        /// <param name="eventName"><p>The type of event the handler was associated with.</p>
        /// </param>
        /// <param name="fn"><p>The handler to remove. <strong>This must be a reference to the function passed into the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> call.</strong></p>
        /// </param>
        /// <param name="scope"><p>The scope originally specified for the handler. It must be the same as the
        /// scope argument specified in the original call to <see cref="Ext.util.Observable.addListener">addListener</see> or the listener will not be removed.</p>
        /// </param>
        public static void un(JsString eventName, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Walks up the ownerCt axis looking for an ancestor Container which matches the passed simple selector.
        /// Example:
        /// <code>var owningTabPanel = grid.up('tabpanel');
        /// </code>
        /// </summary>
        /// <param name="selector"><p>The simple selector to test.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.container.Container</see></span><div><p>The matching ancestor Container (or <c>undefined</c> if no match was found).</p>
        /// </div>
        /// </returns>
        public static Ext.container.Container up(object selector=null){return null;}
        /// <summary>
        /// Update the content area of a component.
        /// </summary>
        /// <param name="htmlOrData"><p>If this component has been configured with a template via the tpl config then
        /// it will use this argument as data to populate the template. If this component was not configured with a template,
        /// the components content area will be updated via <see cref="Ext.dom.Element">Ext.Element</see> update</p>
        /// </param>
        /// <param name="loadScripts"><p>Only legitimate when using the html configuration.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="callback"><p>Only legitimate when using the html configuration. Callback to execute when
        /// scripts have finished loading</p>
        /// </param>
        public static void update(object htmlOrData, object loadScripts=null, object callback=null){}
        /// <summary>
        /// Injected as an override by Ext.Aria.initialize
        /// </summary>
        private static void updateAria(){}
        /// <summary>
        /// Sets the current box measurements of the component's underlying element.
        /// </summary>
        /// <param name="box"><p>An object in the format {x, y, width, height}</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.Component updateBox(object box){return null;}
        /// <summary>
        /// Set button text according to current buttonText property object
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The buttons bitwise flag based upon the button IDs specified in the buttonText property.</p>
        /// </div>
        /// </returns>
        private static JsNumber updateButtonText(){return null;}
        /// <summary>
        /// Create, hide, or show the header component as appropriate based on the current config.
        /// </summary>
        /// <param name="force"><p>True to force the header to be created</p>
        /// </param>
        private static void updateHeader(bool force){}
        /// <summary>
        /// Updates this component's layout. If this update effects this components ownerCt,
        /// that component's updateLayout method will be called to perform the layout instead.
        /// Otherwise, just this component (and its child items) will layout.
        /// </summary>
        /// <param name="options"><p>An object with layout options.</p>
        /// <ul><li><span>defer</span> : <see cref="bool">Boolean</see><div><p>True if this layout should be deferred.</p>
        /// </div></li><li><span>isRoot</span> : <see cref="bool">Boolean</see><div><p>True if this layout should be the root of the layout.</p>
        /// </div></li></ul></param>
        public static void updateLayout(object options){}
        /// <summary>
        /// Updates a progress-style message box's text and progress bar. Only relevant on message boxes
        /// initiated via progress or wait,
        /// or by calling show with progress: true.
        /// </summary>
        /// <param name="value"><p>Any number between 0 and 1 (e.g., .5)</p>
        /// <p>Defaults to: <c>0</c></p></param>
        /// <param name="progressText"><p>The progress text to display inside the progress bar.</p>
        /// <p>Defaults to: <c>&quot;&quot;</c></p></param>
        /// <param name="msg"><p>The message box's body text is replaced with the specified string (defaults to undefined
        /// so that any existing body text will not get overwritten by default unless a new value is passed in)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.window.MessageBox">Ext.window.MessageBox</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.MessageBox updateProgress(object value=null, object progressText=null, object msg=null){return null;}
        /// <summary>
        /// Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user
        /// interaction while waiting for a long-running process to complete that does not have defined intervals.
        /// You are responsible for closing the message box when the process is complete.
        /// </summary>
        /// <param name="msg"><p>The message box body text</p>
        /// </param>
        /// <param name="title"><p>The title bar text</p>
        /// </param>
        /// <param name="config"><p>A <see cref="Ext.ProgressBar.wait">Ext.ProgressBar.wait</see> config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.window.MessageBox">Ext.window.MessageBox</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static Ext.window.MessageBox wait(JsString msg, object title=null, object config=null){return null;}
        public MessageBox(Ext.MessageBoxConfig config){}
        public MessageBox(){}
        public MessageBox(params object[] args){}
    }
    #endregion
    #region MessageBoxConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MessageBoxConfig : Ext.window.MessageBoxConfig
    {
        public MessageBoxConfig(params object[] args){}
    }
    #endregion
    #region MessageBoxEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MessageBoxEvents : Ext.window.MessageBoxEvents
    {
        public MessageBoxEvents(params object[] args){}
    }
    #endregion
}
