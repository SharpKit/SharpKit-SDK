//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.toolbar
{
    #region Toolbar
    /// <inheritdocs />
    /// <summary>
    /// <p>Basic Toolbar class. Although the <see cref="Ext.container.ContainerConfig.defaultType">defaultType</see> for
    /// Toolbar is <see cref="Ext.button.Button">button</see>, Toolbar elements (child items for the Toolbar container)
    /// may be virtually any type of Component. Toolbar elements can be created explicitly via their
    /// constructors, or implicitly via their xtypes, and can be <see cref="Ext.toolbar.Toolbar.add">add</see>ed dynamically.</p>
    /// <h2>Some items have shortcut strings for creation:</h2>
    /// <table>
    /// <thead>
    /// <tr>
    /// <th></th>
    /// <th> Shortcut </th>
    /// <th> xtype         </th>
    /// <th> Class                         </th>
    /// <th> Description</th>
    /// </tr>
    /// </thead>
    /// <tbody>
    /// <tr>
    /// <td></td>
    /// <td> <c>-&gt;</c>     </td>
    /// <td> <c>tbfill</c>      </td>
    /// <td> <see cref="Ext.toolbar.Fill">Ext.toolbar.Fill</see>      </td>
    /// <td> begin using the right-justified button container</td>
    /// </tr>
    /// <tr>
    /// <td></td>
    /// <td> <c>-</c>      </td>
    /// <td> <c>tbseparator</c> </td>
    /// <td> <see cref="Ext.toolbar.Separator">Ext.toolbar.Separator</see> </td>
    /// <td> add a vertical separator bar between toolbar items</td>
    /// </tr>
    /// <tr>
    /// <td></td>
    /// <td> <c></c>      </td>
    /// <td> <c>tbspacer</c>    </td>
    /// <td> <see cref="Ext.toolbar.Spacer">Ext.toolbar.Spacer</see>    </td>
    /// <td> add horiztonal space between elements</td>
    /// </tr>
    /// </tbody>
    /// </table>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.toolbar.Toolbar">Ext.toolbar.Toolbar</see>', {
    /// renderTo: document.body,
    /// width   : 500,
    /// items: [
    /// {
    /// // xtype: 'button', // default for Toolbars
    /// text: 'Button'
    /// },
    /// {
    /// xtype: 'splitbutton',
    /// text : 'Split Button'
    /// },
    /// // begin using the right-justified button container
    /// '-&gt;', // same as { xtype: 'tbfill' }
    /// {
    /// xtype    : 'textfield',
    /// name     : 'field1',
    /// emptyText: 'enter search term'
    /// },
    /// // add a vertical separator bar between toolbar items
    /// '-', // same as {xtype: 'tbseparator'} to create <see cref="Ext.toolbar.Separator">Ext.toolbar.Separator</see>
    /// 'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create <see cref="Ext.toolbar.TextItem">Ext.toolbar.TextItem</see>
    /// { xtype: 'tbspacer' },// same as ' ' to create <see cref="Ext.toolbar.Spacer">Ext.toolbar.Spacer</see>
    /// 'text 2',
    /// { xtype: 'tbspacer', width: 50 }, // add a 50px space
    /// 'text 3'
    /// ]
    /// });
    /// </code></pre>
    /// <p>Toolbars have <see cref="Ext.toolbar.Toolbar.enable">enable</see> and <see cref="Ext.toolbar.Toolbar.disable">disable</see> methods which when called, will
    /// enable/disable all items within your toolbar.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.toolbar.Toolbar">Ext.toolbar.Toolbar</see>', {
    /// renderTo: document.body,
    /// width   : 400,
    /// items: [
    /// {
    /// text: 'Button'
    /// },
    /// {
    /// xtype: 'splitbutton',
    /// text : 'Split Button'
    /// },
    /// '-&gt;',
    /// {
    /// xtype    : 'textfield',
    /// name     : 'field1',
    /// emptyText: 'enter search term'
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>Example</p>
    /// <pre><code>var enableBtn = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.button.Button</see>', {
    /// text    : 'Enable All Items',
    /// disabled: true,
    /// scope   : this,
    /// handler : function() {
    /// //disable the enable button and enable the disable button
    /// enableBtn.disable();
    /// disableBtn.enable();
    /// //enable the toolbar
    /// toolbar.enable();
    /// }
    /// });
    /// var disableBtn = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.button.Button</see>', {
    /// text    : 'Disable All Items',
    /// scope   : this,
    /// handler : function() {
    /// //enable the enable button and disable button
    /// disableBtn.disable();
    /// enableBtn.enable();
    /// //disable the toolbar
    /// toolbar.disable();
    /// }
    /// });
    /// var toolbar = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.toolbar.Toolbar">Ext.toolbar.Toolbar</see>', {
    /// renderTo: document.body,
    /// width   : 400,
    /// margin  : '5 0 0 0',
    /// items   : [enableBtn, disableBtn]
    /// });
    /// </code></pre>
    /// <p>Adding items to and removing items from a toolbar is as simple as calling the <see cref="Ext.toolbar.Toolbar.add">add</see>
    /// and <see cref="Ext.toolbar.Toolbar.remove">remove</see> methods. There is also a <see cref="Ext.toolbar.Toolbar.removeAll">removeAll</see> method
    /// which remove all items within the toolbar.</p>
    /// <pre><code>var toolbar = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.toolbar.Toolbar">Ext.toolbar.Toolbar</see>', {
    /// renderTo: document.body,
    /// width   : 700,
    /// items: [
    /// {
    /// text: 'Example Button'
    /// }
    /// ]
    /// });
    /// var addedItems = [];
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.toolbar.Toolbar">Ext.toolbar.Toolbar</see>', {
    /// renderTo: document.body,
    /// width   : 700,
    /// margin  : '5 0 0 0',
    /// items   : [
    /// {
    /// text   : 'Add a button',
    /// scope  : this,
    /// handler: function() {
    /// var text = prompt('Please enter the text for your button:');
    /// addedItems.push(toolbar.add({
    /// text: text
    /// }));
    /// }
    /// },
    /// {
    /// text   : 'Add a text item',
    /// scope  : this,
    /// handler: function() {
    /// var text = prompt('Please enter the text for your item:');
    /// addedItems.push(toolbar.add(text));
    /// }
    /// },
    /// {
    /// text   : 'Add a toolbar separator',
    /// scope  : this,
    /// handler: function() {
    /// addedItems.push(toolbar.add('-'));
    /// }
    /// },
    /// {
    /// text   : 'Add a toolbar spacer',
    /// scope  : this,
    /// handler: function() {
    /// addedItems.push(toolbar.add('-&gt;'));
    /// }
    /// },
    /// '-&gt;',
    /// {
    /// text   : 'Remove last inserted item',
    /// scope  : this,
    /// handler: function() {
    /// if (addedItems.length) {
    /// toolbar.remove(addedItems.pop());
    /// } else if (toolbar.items.length) {
    /// toolbar.remove(toolbar.items.last());
    /// } else {
    /// alert('No items in the toolbar');
    /// }
    /// }
    /// },
    /// {
    /// text   : 'Remove all items',
    /// scope  : this,
    /// handler: function() {
    /// toolbar.removeAll();
    /// }
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Toolbar : Ext.container.Container
    {
        /// <summary>
        /// Configure true to make the toolbar provide a button which activates a dropdown Menu to show
        /// items which overflow the Toolbar's width.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool enableOverflow;
        /// <summary>
        /// Configure the icon class of the overflow button.
        /// Defaults to: <c>&quot;x-toolbar-more-icon&quot;</c>
        /// </summary>
        public JsString menuTriggerCls;
        /// <summary>
        /// Set to true to make the toolbar vertical. The layout will become a vbox.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool vertical;
        /// <summary>
        /// true in this class to identify an object as an instantiated Toolbar, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isToolbar{get;set;}
        public Toolbar(ToolbarConfig config){}
        public Toolbar(){}
        public Toolbar(params object[] args){}
    }
    #endregion
    #region ToolbarConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ToolbarConfig : Ext.container.ContainerConfig
    {
        /// <summary>
        /// Configure true to make the toolbar provide a button which activates a dropdown Menu to show
        /// items which overflow the Toolbar's width.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool enableOverflow;
        /// <summary>
        /// Configure the icon class of the overflow button.
        /// Defaults to: <c>&quot;x-toolbar-more-icon&quot;</c>
        /// </summary>
        public JsString menuTriggerCls;
        /// <summary>
        /// Set to true to make the toolbar vertical. The layout will become a vbox.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool vertical;
        public ToolbarConfig(params object[] args){}
    }
    #endregion
    #region ToolbarEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ToolbarEvents : Ext.container.ContainerEvents
    {
        /// <summary>
        /// Fires after the overflow state has changed.
        /// </summary>
        /// <param name="c"><p>The Container</p>
        /// </param>
        /// <param name="lastOverflow"><p>overflow state</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void overflowchange(object c, bool lastOverflow, object eOpts){}
        public ToolbarEvents(params object[] args){}
    }
    #endregion
}
