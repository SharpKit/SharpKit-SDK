//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.chart
{
    #region Chart
    /// <inheritdocs />
    /// <summary>
    /// <p>Charts provide a flexible way to achieve a wide range of data visualization capablitities.
    /// Each Chart gets its data directly from a <see cref="Ext.data.Store">Store</see>, and automatically
    /// updates its display whenever data in the Store changes. In addition, the look and feel
    /// of a Chart can be customized using <see cref="Ext.chart.theme.Theme">Theme</see>s.</p>
    /// <h2>Creating a Simple Chart</h2>
    /// <p>Every Chart has three key parts - a <see cref="Ext.data.Store">Store</see> that contains the data,
    /// an array of <see cref="Ext.chart.axis.Axis">Axes</see> which define the boundaries of the Chart,
    /// and one or more <see cref="Ext.chart.series.Series">Series</see> to handle the visual rendering of the data points.</p>
    /// <h3>1. Creating a Store</h3>
    /// <p>The first step is to create a <see cref="Ext.data.Model">Model</see> that represents the type of
    /// data that will be displayed in the Chart. For example the data for a chart that displays
    /// a weather forecast could be represented as a series of "WeatherPoint" data points with
    /// two fields - "temperature", and "date":</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('WeatherPoint', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['temperature', 'date']
    /// });
    /// </code></pre>
    /// <p>Next a <see cref="Ext.data.Store">Store</see> must be created.  The store contains a collection of "WeatherPoint" Model instances.
    /// The data could be loaded dynamically, but for sake of ease this example uses inline data:</p>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// model: 'WeatherPoint',
    /// data: [
    /// { temperature: 58, date: new Date(2011, 1, 1, 8) },
    /// { temperature: 63, date: new Date(2011, 1, 1, 9) },
    /// { temperature: 73, date: new Date(2011, 1, 1, 10) },
    /// { temperature: 78, date: new Date(2011, 1, 1, 11) },
    /// { temperature: 81, date: new Date(2011, 1, 1, 12) }
    /// ]
    /// });
    /// </code></pre>
    /// <p>For additional information on Models and Stores please refer to the <i>Data Guide</i>.</p>
    /// <h3>2. Creating the Chart object</h3>
    /// <p>Now that a Store has been created it can be used in a Chart:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// width: 400,
    /// height: 300,
    /// store: store
    /// });
    /// </code></pre>
    /// <p>That's all it takes to create a Chart instance that is backed by a Store.
    /// However, if the above code is run in a browser, a blank screen will be displayed.
    /// This is because the two pieces that are responsible for the visual display,
    /// the Chart's <see cref="Ext.chart.ChartConfig.axes">axes</see> and <see cref="Ext.chart.ChartConfig.series">series</see>, have not yet been defined.</p>
    /// <h3>3. Configuring the Axes</h3>
    /// <p><see cref="Ext.chart.axis.Axis">Axes</see> are the lines that define the boundaries of the data points that a Chart can display.
    /// This example uses one of the most common Axes configurations - a horizontal "x" axis, and a vertical "y" axis:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// ...
    /// axes: [
    /// {
    /// title: 'Temperature',
    /// type: 'Numeric',
    /// position: 'left',
    /// fields: ['temperature'],
    /// minimum: 0,
    /// maximum: 100
    /// },
    /// {
    /// title: 'Time',
    /// type: 'Time',
    /// position: 'bottom',
    /// fields: ['date'],
    /// dateFormat: 'ga'
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>The "Temperature" axis is a vertical <see cref="Ext.chart.axis.Numeric">Numeric Axis</see> and is positioned on the left edge of the Chart.
    /// It represents the bounds of the data contained in the "WeatherPoint" Model's "temperature" field that was
    /// defined above. The minimum value for this axis is "0", and the maximum is "100".</p>
    /// <p>The horizontal axis is a <see cref="Ext.chart.axis.Time">Time Axis</see> and is positioned on the bottom edge of the Chart.
    /// It represents the bounds of the data contained in the "WeatherPoint" Model's "date" field.
    /// The <see cref="Ext.chart.axis.TimeConfig.dateFormat">dateFormat</see>
    /// configuration tells the Time Axis how to format it's labels.</p>
    /// <p>Here's what the Chart looks like now that it has its Axes configured:</p>
    /// <p><p><i></i></p></p>
    /// <h3>4. Configuring the Series</h3>
    /// <p>The final step in creating a simple Chart is to configure one or more <see cref="Ext.chart.series.Series">Series</see>.
    /// Series are responsible for the visual representation of the data points contained in the Store.
    /// This example only has one Series:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// ...
    /// axes: [
    /// ...
    /// ],
    /// series: [
    /// {
    /// type: 'line',
    /// xField: 'date',
    /// yField: 'temperature'
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>This Series is a <see cref="Ext.chart.series.Line">Line Series</see>, and it uses the "date" and "temperature" fields
    /// from the "WeatherPoint" Models in the Store to plot its data points:</p>
    /// <p><p><i></i></p></p>
    /// <p>See the <i>Line Charts Example</i> for a live demo.</p>
    /// <h2>Themes</h2>
    /// <p>The color scheme for a Chart can be easily changed using the <see cref="Ext.chart.ChartConfig.theme">theme</see> configuration option:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// ...
    /// theme: 'Green',
    /// ...
    /// });
    /// </code></pre>
    /// <p><p><i></i></p></p>
    /// <p>For more information on Charts please refer to the <i>Drawing and Charting Guide</i>.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Chart : Ext.draw.Component, Ext.chart.theme.Theme, Mask, Navigation, Ext.util.Bindable, Ext.util.Observable
    {
        /// <summary>
        /// Array of Axis instances or config objects.  For example:
        /// <code>axes: [{
        /// type: 'Numeric',
        /// position: 'left',
        /// fields: ['data1'],
        /// title: 'Number of Hits',
        /// minimum: 0,
        /// //one minor tick between two major ticks
        /// minorTickSteps: 1
        /// }, {
        /// type: 'Category',
        /// position: 'bottom',
        /// fields: ['name'],
        /// title: 'Month of the Year'
        /// }]
        /// </code>
        /// </summary>
        public Ext.chart.axis.Axis axes;
        /// <summary>
        /// The chart background. This can be a gradient object, image, or color. Defaults to false for no
        /// background. For example, if background were to be a color we could set the object as
        /// <code>background: {
        /// //color string
        /// fill: '#ccc'
        /// }
        /// </code>
        /// You can specify an image by using:
        /// <code>background: {
        /// image: 'http://path.to.image/'
        /// }
        /// </code>
        /// Also you can specify a gradient by using the gradient object syntax:
        /// <code>background: {
        /// gradient: {
        /// id: 'gradientId',
        /// angle: 45,
        /// stops: {
        /// 0: {
        /// color: '#555'
        /// }
        /// 100: {
        /// color: '#ddd'
        /// }
        /// }
        /// }
        /// }
        /// </code>
        /// Defaults to: <c>false</c>
        /// </summary>
        public object background;
        /// <summary>
        /// The amount of inset padding in pixels for the chart. Defaults to 10.
        /// Defaults to: <c>10</c>
        /// </summary>
        public JsNumber insetPadding;
        /// <summary>
        /// True for the default legend display or a legend config object. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object legend;
        /// <summary>
        /// Enables selecting a region on chart. True to enable any selection,
        /// 'horizontal' or 'vertical' to restrict the selection to X or Y axis.
        /// The mask in itself will do nothing but fire 'select' event.
        /// See <see cref="Ext.chart.Mask">Ext.chart.Mask</see> for example.
        /// </summary>
        public object mask;
        /// <summary>
        /// Array of Series instances or config objects.  For example:
        /// <code>series: [{
        /// type: 'column',
        /// axis: 'left',
        /// listeners: {
        /// 'afterrender': function() {
        /// console('afterrender');
        /// }
        /// },
        /// xField: 'category',
        /// yField: 'data1'
        /// }]
        /// </code>
        /// </summary>
        public Ext.chart.series.Series series;
        /// <summary>
        /// The store that supplies data to this chart.
        /// </summary>
        public Ext.data.Store store;
        /// <summary>
        /// The name of the theme to be used. A theme defines the colors and other visual displays of tick marks
        /// on axis, text, title text, line colors, marker colors and styles, etc. Possible theme values are 'Base', 'Green',
        /// 'Sky', 'Red', 'Purple', 'Blue', 'Yellow' and also six category themes 'Category1' to 'Category6'. Default value
        /// is 'Base'.
        /// </summary>
        public JsString theme;
        /// <summary>
        /// Adjust the dimensions and positions of each axis and the chart body area after accounting
        /// for the space taken up on each side by the axes and legend.
        /// </summary>
        private void alignAxes(){}
        /// <summary>
        /// Binds a store to this instance.
        /// </summary>
        /// <param name="store"><p>The store to bind or ID of the store.
        /// When no store given (or when <c>null</c> or <c>undefined</c> passed), unbinds the existing store.</p>
        /// </param>
        /// <param name="initial"><p>True to not remove listeners from existing store.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public virtual void bindStore(object store=null, object initial=null){}
        /// <summary>
        /// Binds listeners for this component to the store. By default it will add
        /// anything bound by the getStoreListeners method, however it can be overridden
        /// in a subclass to provide any more complicated handling.
        /// </summary>
        /// <param name="store"><p>The store to bind to</p>
        /// </param>
        public virtual void bindStoreListeners(Ext.data.AbstractStore store){}
        /// <summary>
        /// Gets the current store instance.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.AbstractStore">Ext.data.AbstractStore</see></span><div><p>The store, null if one does not exist.</p>
        /// </div>
        /// </returns>
        public virtual Ext.data.Store getStore(){return null;}
        /// <summary>
        /// Gets the listeners to bind to a new store.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The listeners to be bound to the store in object literal form. The scope
        /// may be omitted, it is assumed to be the current instance.</p>
        /// </div>
        /// </returns>
        public virtual object getStoreListeners(){return null;}
        /// <summary>
        /// Template method, it is called when a new store is bound
        /// to the current instance.
        /// </summary>
        /// <param name="store"><p>The store being bound</p>
        /// </param>
        /// <param name="initial"><p>True if this store is being bound as initialization of the instance.</p>
        /// </param>
        public virtual void onBindStore(Ext.data.AbstractStore store, bool initial){}
        /// <summary>
        /// Template method, it is called when an existing store is unbound
        /// from the current instance.
        /// </summary>
        /// <param name="store"><p>The store being unbound</p>
        /// </param>
        /// <param name="initial"><p>True if this store is being bound as initialization of the instance.</p>
        /// </param>
        public virtual void onUnbindStore(Ext.data.AbstractStore store, bool initial){}
        /// <summary>
        /// Redraws the chart. If animations are set this will animate the chart too.
        /// </summary>
        /// <param name="resize"><p>flag which changes the default origin points of the chart for animations.</p>
        /// </param>
        public void redraw(object resize=null){}
        /// <summary>
        /// Restores the zoom to the original value. This can be used to reset
        /// the previous zoom state set by setZoom. For example:
        /// <code>myChart.restoreZoom();
        /// </code>
        /// </summary>
        public virtual void restoreZoom(){}
        /// <summary>
        /// Saves the chart by either triggering a download or returning a string containing the chart data
        /// as SVG.  The action depends on the export type specified in the passed configuration. The chart
        /// will be exported using either the Ext.draw.engine.SvgExporter or the Ext.draw.engine.ImageExporter
        /// classes.
        /// Possible export types:
        /// <li>'image/png'</li>
        /// <li>'image/jpeg',</li>
        /// <li>'image/svg+xml'</li>
        /// If 'image/svg+xml' is specified, the SvgExporter will be used.
        /// If 'image/png' or 'image/jpeg' are specified, the ImageExporter will be used. This exporter
        /// must post the SVG data to a remote server to have the data processed, see the <see cref="Ext.draw.engine.ImageExporter">Ext.draw.engine.ImageExporter</see>
        /// for more details.
        /// Example usage:
        /// <code>chart.save({
        /// type: 'image/png'
        /// });
        /// </code>
        /// </summary>
        /// <param name="config"><p>The configuration to be passed to the exporter.
        /// See the export method for the appropriate exporter for the relevant
        /// configuration options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>See the return types for the appropriate exporter</p>
        /// </div>
        /// </returns>
        public object save(object config=null){return null;}
        /// <summary>
        /// Zooms the chart to the specified selection range.
        /// Can be used with a selection mask. For example:
        /// <code>items: {
        /// xtype: 'chart',
        /// animate: true,
        /// store: store1,
        /// mask: 'horizontal',
        /// listeners: {
        /// select: {
        /// fn: function(me, selection) {
        /// me.setZoom(selection);
        /// me.mask.hide();
        /// }
        /// }
        /// }
        /// }
        /// </code>
        /// </summary>
        /// <param name="zoomConfig">
        /// </param>
        public virtual void setZoom(object zoomConfig){}
        /// <summary>
        /// Unbinds listeners from this component to the store. By default it will remove
        /// anything bound by the bindStoreListeners method, however it can be overridden
        /// in a subclass to provide any more complicated handling.
        /// </summary>
        /// <param name="store"><p>The store to unbind from</p>
        /// </param>
        public virtual void unbindStoreListeners(Ext.data.AbstractStore store){}
        public Chart(ChartConfig config){}
        public Chart(params object[] args){}
    }
    #endregion
    #region ChartConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ChartConfig : Ext.draw.ComponentConfig
    {
        /// <summary>
        /// True for the default animation (easing: 'ease' and duration: 500) or a standard animation config
        /// object to be used for default chart animations. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object animate;
        /// <summary>
        /// Array of Axis instances or config objects.  For example:
        /// <code>axes: [{
        /// type: 'Numeric',
        /// position: 'left',
        /// fields: ['data1'],
        /// title: 'Number of Hits',
        /// minimum: 0,
        /// //one minor tick between two major ticks
        /// minorTickSteps: 1
        /// }, {
        /// type: 'Category',
        /// position: 'bottom',
        /// fields: ['name'],
        /// title: 'Month of the Year'
        /// }]
        /// </code>
        /// </summary>
        public Ext.chart.axis.Axis axes;
        /// <summary>
        /// The chart background. This can be a gradient object, image, or color. Defaults to false for no
        /// background. For example, if background were to be a color we could set the object as
        /// <code>background: {
        /// //color string
        /// fill: '#ccc'
        /// }
        /// </code>
        /// You can specify an image by using:
        /// <code>background: {
        /// image: 'http://path.to.image/'
        /// }
        /// </code>
        /// Also you can specify a gradient by using the gradient object syntax:
        /// <code>background: {
        /// gradient: {
        /// id: 'gradientId',
        /// angle: 45,
        /// stops: {
        /// 0: {
        /// color: '#555'
        /// }
        /// 100: {
        /// color: '#ddd'
        /// }
        /// }
        /// }
        /// }
        /// </code>
        /// Defaults to: <c>false</c>
        /// </summary>
        public object background;
        /// <summary>
        /// The amount of inset padding in pixels for the chart. Defaults to 10.
        /// Defaults to: <c>10</c>
        /// </summary>
        public JsNumber insetPadding;
        /// <summary>
        /// True for the default legend display or a legend config object. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object legend;
        /// <summary>
        /// Enables selecting a region on chart. True to enable any selection,
        /// 'horizontal' or 'vertical' to restrict the selection to X or Y axis.
        /// The mask in itself will do nothing but fire 'select' event.
        /// See <see cref="Ext.chart.Mask">Ext.chart.Mask</see> for example.
        /// </summary>
        public object mask;
        /// <summary>
        /// Array of Series instances or config objects.  For example:
        /// <code>series: [{
        /// type: 'column',
        /// axis: 'left',
        /// listeners: {
        /// 'afterrender': function() {
        /// console('afterrender');
        /// }
        /// },
        /// xField: 'category',
        /// yField: 'data1'
        /// }]
        /// </code>
        /// </summary>
        public Ext.chart.series.Series series;
        /// <summary>
        /// The store that supplies data to this chart.
        /// </summary>
        public Ext.data.Store store;
        /// <summary>
        /// The name of the theme to be used. A theme defines the colors and other visual displays of tick marks
        /// on axis, text, title text, line colors, marker colors and styles, etc. Possible theme values are 'Base', 'Green',
        /// 'Sky', 'Red', 'Purple', 'Blue', 'Yellow' and also six category themes 'Category1' to 'Category6'. Default value
        /// is 'Base'.
        /// </summary>
        public JsString theme;
        public ChartConfig(params object[] args){}
    }
    #endregion
    #region ChartEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ChartEvents : Ext.draw.ComponentEvents
    {
        /// <summary>
        /// Fires before a refresh to the chart data is called. If the beforerefresh handler returns false the
        /// refresh action will be cancelled.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforerefresh(Chart @this, object eOpts){}
        /// <summary>
        /// Fires after the chart data has been refreshed.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void refresh(Chart @this, object eOpts){}
        public ChartEvents(params object[] args){}
    }
    #endregion
}
