//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.ux
{
    #region Spotlight
    /// <summary>
    /// <p>UX used to provide a spotlight around a specified component/element.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Spotlight
    {
        /// <summary>
        /// {Boolean} True to animate the spotlight change
        /// (defaults to true)
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool animate;
        /// <summary>
        /// {Integer} The duration of the animation, in milliseconds
        /// (defaults to 250)
        /// Defaults to: <c>250</c>
        /// </summary>
        public JsNumber duration;
        /// <summary>
        /// {String} The type of easing for the spotlight animatation
        /// (defaults to null)
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsObject easing;
        /// <summary>
        /// True if the spotlight is active on the element
        /// Defaults to: <c>false</c>
        /// </summary>
        private bool active{get;set;}
        /// <summary>
        /// The baseCls for the spotlight elements
        /// Defaults to: <c>&quot;x-spotlight&quot;</c>
        /// </summary>
        private JsString baseCls{get;set;}
        /// <summary>
        /// Resizes the spotlight depending on the arguments
        /// </summary>
        /// <param name="animate"><p>True to animate the changing of the bounds</p>
        /// </param>
        /// <param name="reverse"><p>True to reverse the animation</p>
        /// </param>
        public void applyBounds(bool animate, bool reverse){}
        /// <summary>
        /// Create all the elements for the spotlight
        /// </summary>
        public void createElements(){}
        /// <summary>
        /// Removes all the elements for the spotlight
        /// </summary>
        public void destroy(){}
        /// <summary>
        /// Hide the spotlight
        /// </summary>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        public void hide(object callback, object scope){}
        /// <summary>
        /// Show the spotlight
        /// </summary>
        /// <param name="el">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        public void show(object el, object callback, object scope){}
        /// <summary>
        /// Resizes the spotlight with the window size.
        /// </summary>
        public void syncSize(){}
        public Spotlight(SpotlightConfig config){}
        public Spotlight(){}
        public Spotlight(params object[] args){}
    }
    #endregion
    #region SpotlightConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class SpotlightConfig
    {
        /// <summary>
        /// {Boolean} True to animate the spotlight change
        /// (defaults to true)
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool animate;
        /// <summary>
        /// {Integer} The duration of the animation, in milliseconds
        /// (defaults to 250)
        /// Defaults to: <c>250</c>
        /// </summary>
        public JsNumber duration;
        /// <summary>
        /// {String} The type of easing for the spotlight animatation
        /// (defaults to null)
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsObject easing;
        public SpotlightConfig(params object[] args){}
    }
    #endregion
    #region SpotlightEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class SpotlightEvents
    {
        public SpotlightEvents(params object[] args){}
    }
    #endregion
}
