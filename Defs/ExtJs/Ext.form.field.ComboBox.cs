//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region ComboBox
    /// <inheritdocs />
    /// <summary>
    /// <p>A combobox control with support for autocomplete, remote loading, and many other features.</p>
    /// <p>A ComboBox is like a combination of a traditional HTML text <c>&lt;input&gt;</c> field and a <c>&lt;select&gt;</c>
    /// field; the user is able to type freely into the field, and/or pick values from a dropdown selection
    /// list. The user can input any value by default, even if it does not appear in the selection list;
    /// to prevent free-form values and restrict them to items in the list, set <see cref="Ext.form.field.ComboBoxConfig.forceSelection">forceSelection</see> to <c>true</c>.</p>
    /// <p>The selection list's options are populated from any <see cref="Ext.data.Store">Ext.data.Store</see>, including remote
    /// stores. The data items in the store are mapped to each option's displayed text and backing value via
    /// the <see cref="Ext.form.field.ComboBoxConfig.valueField">valueField</see> and <see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see> configurations, respectively.</p>
    /// <p>If your store is not remote, i.e. it depends only on local data and is loaded up front, you should be
    /// sure to set the <see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> to <c>'local'</c>, as this will improve responsiveness for the user.</p>
    /// <h1>Example usage:</h1>
    /// <pre><code>// The data store containing the list of states
    /// var states = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// fields: ['abbr', 'name'],
    /// data : [
    /// {"abbr":"AL", "name":"Alabama"},
    /// {"abbr":"AK", "name":"Alaska"},
    /// {"abbr":"AZ", "name":"Arizona"}
    /// //...
    /// ]
    /// });
    /// // Create the combo box, attached to the states data store
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.ComboBox">Ext.form.ComboBox</see>', {
    /// fieldLabel: 'Choose State',
    /// store: states,
    /// queryMode: 'local',
    /// displayField: 'name',
    /// valueField: 'abbr',
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <h1>Events</h1>
    /// <p>To do something when something in ComboBox is selected, configure the select event:</p>
    /// <pre><code>var cb = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.ComboBox">Ext.form.ComboBox</see>', {
    /// // all of your config options
    /// listeners:{
    /// scope: yourScope,
    /// 'select': yourFunction
    /// }
    /// });
    /// // Alternatively, you can assign events after the object is created:
    /// var cb = new <see cref="Ext.form.field.ComboBox">Ext.form.field.ComboBox</see>(yourOptions);
    /// cb.on('select', yourFunction, yourScope);
    /// </code></pre>
    /// <h1>Multiple Selection</h1>
    /// <p>ComboBox also allows selection of multiple items from the list; to enable multi-selection set the
    /// <see cref="Ext.form.field.ComboBoxConfig.multiSelect">multiSelect</see> config to <c>true</c>.</p>
    /// <h1>Filtered Stores</h1>
    /// <p>If you have a local store that is already filtered, you can use the <see cref="Ext.form.field.ComboBox.lastQuery">lastQuery</see> config option
    /// to prevent the store from having the filter being cleared on first expand.</p>
    /// <h2>Customized combobox</h2>
    /// <p>Both the text shown in dropdown menu and text field can be easily customized:</p>
    /// <pre><code>var states = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// fields: ['abbr', 'name'],
    /// data : [
    /// {"abbr":"AL", "name":"Alabama"},
    /// {"abbr":"AK", "name":"Alaska"},
    /// {"abbr":"AZ", "name":"Arizona"}
    /// ]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.ComboBox">Ext.form.ComboBox</see>', {
    /// fieldLabel: 'Choose State',
    /// store: states,
    /// queryMode: 'local',
    /// valueField: 'abbr',
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// // Template for the dropdown menu.
    /// // Note the use of "x-boundlist-item" class,
    /// // this is required to make the items selectable.
    /// tpl: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.XTemplate">Ext.XTemplate</see>',
    /// '&lt;tpl for="."&gt;',
    /// '&lt;div class="x-boundlist-item"&gt;{abbr} - {name}&lt;/div&gt;',
    /// '&lt;/tpl&gt;'
    /// ),
    /// // template for the content inside text field
    /// displayTpl: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.XTemplate">Ext.XTemplate</see>',
    /// '&lt;tpl for="."&gt;',
    /// '{abbr} - {name}',
    /// '&lt;/tpl&gt;'
    /// )
    /// });
    /// </code></pre>
    /// <p>See also the <see cref="Ext.form.field.ComboBoxConfig.listConfig">listConfig</see> option for additional configuration of the dropdown.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class ComboBox : Picker, Ext.util.Bindable
    {
        /// <summary>
        /// The text query to send to the server to return all records for the list with no filtering
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString allQuery;
        /// <summary>
        /// true to automatically highlight the first result gathered by the data store in the dropdown list when it is
        /// opened. A false value would cause nothing in the list to be highlighted automatically, so
        /// the user would have to manually highlight an item before pressing the enter or tab key to
        /// select it (unless the value of (typeAhead) were true), or use the mouse to select a value.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoSelect;
        /// <summary>
        /// Set of options that will be used as defaults for the user-configured listConfig object.
        /// Defaults to: <c>{loadingHeight: 70, minWidth: 70, maxHeight: 300, shadow: &quot;sides&quot;}</c>
        /// </summary>
        public JsObject defaultListConfig;
        /// <summary>
        /// The character(s) used to separate the display values of multiple selected items when
        /// multiSelect = true.
        /// Defaults to: <c>&quot;, &quot;</c>
        /// </summary>
        public JsString delimiter;
        /// <summary>
        /// The underlying data field name to bind to this ComboBox.
        /// See also <c><see cref="Ext.form.field.ComboBoxConfig.valueField">valueField</see></c>.
        /// Defaults to: <c>&quot;text&quot;</c>
        /// </summary>
        public JsString displayField;
        /// <summary>
        /// true to restrict the selected value to one of the values in the list, false to allow the user to set
        /// arbitrary text into the field.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool forceSelection;
        /// <summary>
        /// false to not allow the component to resize itself when its data changes
        /// (and its grow property is true)
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool growToLongestValue;
        /// <summary>
        /// CSS class used to find the hiddenDataEl
        /// Defaults to: <c>&quot;x-hide-display &quot;</c>
        /// </summary>
        public JsString hiddenDataCls;
        /// <summary>
        /// The name of an underlying hidden field which will be synchronized with the underlying value of the combo.
        /// This option is useful if the combo is part of a form element doing a regular form post. The hidden field
        /// will not be created unless a hiddenName is specified.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString hiddenName;
        /// <summary>
        /// An optional set of configuration properties that will be passed to the Ext.view.BoundList's constructor.
        /// Any configuration that is valid for BoundList can be included. Some of the more useful ones are:
        /// <li><see cref="Ext.view.BoundListConfig.cls">cls</see> - defaults to empty</li>
        /// <li><see cref="Ext.view.BoundListConfig.emptyText">emptyText</see> - defaults to empty string</li>
        /// <li><see cref="Ext.view.BoundListConfig.itemSelector">itemSelector</see> - defaults to the value defined in BoundList</li>
        /// <li><see cref="Ext.view.BoundListConfig.loadingText">loadingText</see> - defaults to <c>'Loading...'</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.minWidth">minWidth</see> - defaults to <c>70</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.maxWidth">maxWidth</see> - defaults to <c>undefined</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.maxHeight">maxHeight</see> - defaults to <c>300</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.resizable">resizable</see> - defaults to <c>false</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.shadow">shadow</see> - defaults to <c>'sides'</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.width">width</see> - defaults to <c>undefined</c> (automatically set to the width of the ComboBox
        /// field if <see cref="Ext.form.field.ComboBoxConfig.matchFieldWidth">matchFieldWidth</see> is true)</li>
        /// </summary>
        public JsObject listConfig;
        /// <summary>
        /// The minimum number of characters the user must type before autocomplete and typeAhead activate.
        /// Defaults to <c>4</c> if <c><see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> = 'remote'</c> or <c>0</c> if <c><see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> = 'local'</c>,
        /// does not apply if <c><see cref="Ext.form.field.TriggerConfig.editable">editable</see> = false</c>.
        /// </summary>
        public JsNumber minChars;
        /// <summary>
        /// If set to true, allows the combo field to hold more than one value at a time, and allows selecting multiple
        /// items from the dropdown list. The combo's text field will show all selected values separated by the
        /// delimiter.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool multiSelect;
        /// <summary>
        /// If greater than 0, a Ext.toolbar.Paging is displayed in the footer of the dropdown list and the
        /// filter queries will execute with page start and limit
        /// parameters. Only applies when queryMode = 'remote'.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber pageSize;
        /// <summary>
        /// When true, this prevents the combo from re-querying (either locally or remotely) when the current query
        /// is the same as the previous query.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool queryCaching;
        /// <summary>
        /// The length of time in milliseconds to delay between the start of typing and sending the query to filter the
        /// dropdown list.
        /// Defaults to <c>500</c> if <c><see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> = 'remote'</c> or <c>10</c> if <c><see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> = 'local'</c>
        /// </summary>
        public JsNumber queryDelay;
        /// <summary>
        /// The mode in which the ComboBox uses the configured Store. Acceptable values are:
        /// <li><p><strong><c>'remote'</c></strong> :</p>
        /// <p>In <c>queryMode: 'remote'</c>, the ComboBox loads its Store dynamically based upon user interaction.</p>
        /// <p>This is typically used for "autocomplete" type inputs, and after the user finishes typing, the Store is <see cref="Ext.data.Store.load">load</see>ed.</p>
        /// <p>A parameter containing the typed string is sent in the load request. The default parameter name for the input
        /// string is <c>query</c>, but this can be configured using the <see cref="Ext.form.field.ComboBoxConfig.queryParam">queryParam</see> config.</p>
        /// <p>In <c>queryMode: 'remote'</c>, the Store may be configured with <code><see cref="Ext.data.StoreConfig.remoteFilter">remoteFilter</see>:
        /// true</code>, and further filters may be <em>programatically</em> added to the Store which are then passed with every load
        /// request which allows the server to further refine the returned dataset.</p>
        /// <p>Typically, in an autocomplete situation, <see cref="Ext.form.field.ComboBoxConfig.hideTrigger">hideTrigger</see> is configured <c>true</c> because it has no meaning for
        /// autocomplete.</p></li>
        /// <li><p><strong><c>'local'</c></strong> :</p>
        /// <p>ComboBox loads local data</p>
        /// <pre><code>var combo = new <see cref="Ext.form.field.ComboBox">Ext.form.field.ComboBox</see>({
        /// renderTo: document.body,
        /// queryMode: 'local',
        /// store: new <see cref="Ext.data.ArrayStore">Ext.data.ArrayStore</see>({
        /// id: 0,
        /// fields: [
        /// 'myId',  // numeric value is the key
        /// 'displayText'
        /// ],
        /// data: [[1, 'item1'], [2, 'item2']]  // data is local
        /// }),
        /// valueField: 'myId',
        /// displayField: 'displayText',
        /// triggerAction: 'all'
        /// });
        /// </code></pre></li>
        /// Defaults to: <c>&quot;remote&quot;</c>
        /// </summary>
        public JsString queryMode;
        /// <summary>
        /// Name of the parameter used by the Store to pass the typed string when the ComboBox is configured with
        /// queryMode: 'remote'. If explicitly set to a falsy value it will not be sent.
        /// Defaults to: <c>&quot;query&quot;</c>
        /// </summary>
        public JsString queryParam;
        /// <summary>
        /// Whether the Tab key should select the currently highlighted item.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool selectOnTab;
        /// <summary>
        /// The data source to which this combo is bound. Acceptable values for this property are:
        /// <li><strong>any <see cref="Ext.data.Store">Store</see> subclass</strong></li>
        /// <li><p><strong>an Array</strong> : Arrays will be converted to a <see cref="Ext.data.Store">Ext.data.Store</see> internally, automatically generating
        /// <see cref="Ext.data.FieldConfig.name">field names</see> to work with all data components.</p>
        /// <ul>
        /// <li><p><strong>1-dimensional array</strong> : (e.g., <c>['Foo','Bar']</c>)</p>
        /// <p>A 1-dimensional array will automatically be expanded (each array item will be used for both the combo
        /// <see cref="Ext.form.field.ComboBoxConfig.valueField">valueField</see> and <see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see>)</p></li>
        /// <li><p><strong>2-dimensional array</strong> : (e.g., <c>[['f','Foo'],['b','Bar']]</c>)</p>
        /// <p>For a multi-dimensional array, the value in index 0 of each item will be assumed to be the combo
        /// <see cref="Ext.form.field.ComboBoxConfig.valueField">valueField</see>, while the value at index 1 is assumed to be the combo <see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see>.</p></li>
        /// </ul>
        /// </li>
        /// See also <see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see>.
        /// </summary>
        public object store;
        /// <summary>
        /// The id, DOM node or Ext.Element of an existing HTML &lt;select&gt; element to convert into a ComboBox. The
        /// target select's options will be used to build the options in the ComboBox dropdown; a configured store
        /// will take precedence over this.
        /// </summary>
        public object transform;
        /// <summary>
        /// The action to execute when the trigger is clicked.
        /// <li><p><strong><c>'all'</c></strong> :</p>
        /// <p><see cref="Ext.form.field.ComboBox.doQuery">run the query</see> specified by the <c><see cref="Ext.form.field.ComboBoxConfig.allQuery">allQuery</see></c> config option</p></li>
        /// <li><p><strong><c>'query'</c></strong> :</p>
        /// <p><see cref="Ext.form.field.ComboBox.doQuery">run the query</see> using the <see cref="Ext.form.field.Base.getRawValue">raw value</see>.</p></li>
        /// See also <c><see cref="Ext.form.field.ComboBoxConfig.queryParam">queryParam</see></c>.
        /// Defaults to: <c>&quot;all&quot;</c>
        /// </summary>
        public JsString triggerAction;
        /// <summary>
        /// true to populate and autoselect the remainder of the text being typed after a configurable delay
        /// (typeAheadDelay) if it matches a known value.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool typeAhead;
        /// <summary>
        /// The length of time in milliseconds to wait until the typeahead text is displayed if typeAhead = true
        /// Defaults to: <c>250</c>
        /// </summary>
        public JsNumber typeAheadDelay;
        /// <summary>
        /// The underlying data value name to bind to this ComboBox.
        /// <strong>Note</strong>: use of a <c>valueField</c> requires the user to make a selection in order for a value to be mapped. See also
        /// <c><see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see></c>.
        /// Defaults to match the value of the <see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see> config.
        /// </summary>
        public JsString valueField;
        /// <summary>
        /// When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will
        /// be displayed as the field text if defined. If this default text is used, it means there
        /// is no value set and no validation will occur on this field.
        /// </summary>
        public JsString valueNotFoundText;
        /// <summary>
        /// </summary>
        private Ext.dom.Element hiddenDataEl{get;set;}
        /// <summary>
        /// The value of the match string used to filter the store. Delete this property to force a requery. Example use:
        /// <code>var combo = new <see cref="Ext.form.field.ComboBox">Ext.form.field.ComboBox</see>({
        /// ...
        /// queryMode: 'remote',
        /// listeners: {
        /// // delete the previous query in the beforequery event or set
        /// // combo.lastQuery = null (this will reload the store the next time it expands)
        /// beforequery: function(qe){
        /// delete qe.combo.lastQuery;
        /// }
        /// }
        /// });
        /// </code>
        /// To make sure the filter in the store is not cleared the first time the ComboBox trigger is used configure the
        /// combo with <c>lastQuery=''</c>. Example use:
        /// <code>var combo = new <see cref="Ext.form.field.ComboBox">Ext.form.field.ComboBox</see>({
        /// ...
        /// queryMode: 'local',
        /// triggerAction: 'all',
        /// lastQuery: ''
        /// });
        /// </code>
        /// </summary>
        public JsString lastQuery{get;set;}
        /// <summary>
        /// Binds a store to this instance.
        /// </summary>
        /// <param name="store"><p>The store to bind or ID of the store.
        /// When no store given (or when <c>null</c> or <c>undefined</c> passed), unbinds the existing store.</p>
        /// </param>
        /// <param name="initial"><p>True to not remove listeners from existing store.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public virtual void bindStore(object store=null, object initial=null){}
        /// <summary>
        /// Binds listeners for this component to the store. By default it will add
        /// anything bound by the getStoreListeners method, however it can be overridden
        /// in a subclass to provide any more complicated handling.
        /// </summary>
        /// <param name="store"><p>The store to bind to</p>
        /// </param>
        public virtual void bindStoreListeners(Ext.data.AbstractStore store){}
        /// <summary>
        /// Clears any previous filters applied by the combo to the store
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if a filter was removed</p>
        /// </div>
        /// </returns>
        private bool clearFilter(){return false;}
        /// <summary>
        /// Clears any value currently set in the ComboBox.
        /// </summary>
        public void clearValue(){}
        /// <summary>
        /// If the autoSelect config is true, and the picker is open, highlights the first item.
        /// </summary>
        private void doAutoSelect(){}
        /// <summary>
        /// Executes a query to filter the dropdown list. Fires the beforequery event prior to performing the query
        /// allowing the query action to be canceled if needed.
        /// </summary>
        /// <param name="queryString"><p>The SQL query to execute</p>
        /// </param>
        /// <param name="forceAll"><p><c>true</c> to force the query to execute even if there are currently fewer characters in
        /// the field than the minimum specified by the <c><see cref="Ext.form.field.ComboBoxConfig.minChars">minChars</see></c> config option. It also clears any filter
        /// previously saved in the current store.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="rawQuery"><p>Pass as true if the raw typed value is being used as the query string. This causes the
        /// resulting store load to leave the raw value undisturbed.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if the query was permitted to run, false if it was cancelled by a <see cref="Ext.form.field.ComboBoxEvents.beforequery">beforequery</see>
        /// handler.</p>
        /// </div>
        /// </returns>
        public bool doQuery(JsString queryString, object forceAll=null, object rawQuery=null){return false;}
        /// <summary>
        /// Execute the query with the raw contents within the textfield.
        /// </summary>
        private void doRawQuery(){}
        /// <summary>
        /// Finds the record by searching for a specific field/value combination.
        /// </summary>
        /// <param name="field"><p>The name of the field to test.</p>
        /// </param>
        /// <param name="value"><p>The value to match the field against.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see></span><div><p>The matched record or false.</p>
        /// </div>
        /// </returns>
        public Ext.data.Model findRecord(JsString field, object value){return null;}
        /// <summary>
        /// Finds the record by searching values in the displayField.
        /// </summary>
        /// <param name="value"><p>The value to match the field against.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see></span><div><p>The matched record or false.</p>
        /// </div>
        /// </returns>
        public Ext.data.Model findRecordByDisplay(object value){return null;}
        /// <summary>
        /// Finds the record by searching values in the valueField.
        /// </summary>
        /// <param name="value"><p>The value to match the field against.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see></span><div><p>The matched record or false.</p>
        /// </div>
        /// </returns>
        public Ext.data.Model findRecordByValue(object value){return null;}
        /// <summary>
        /// Generates the string value to be displayed in the text field for the currently stored value
        /// </summary>
        private void getDisplayValue(){}
        /// <summary>
        /// Returns the store associated with this ComboBox.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.Store">Ext.data.Store</see></span><div><p>The store</p>
        /// </div>
        /// </returns>
        public virtual Ext.data.Store getStore(){return null;}
        /// <summary>
        /// Gets the listeners to bind to a new store.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The listeners to be bound to the store in object literal form. The scope
        /// may be omitted, it is assumed to be the current instance.</p>
        /// </div>
        /// </returns>
        public virtual object getStoreListeners(){return null;}
        /// <summary>
        /// Template method, it is called when a new store is bound
        /// to the current instance.
        /// </summary>
        /// <param name="store"><p>The store being bound</p>
        /// </param>
        /// <param name="initial"><p>True if this store is being bound as initialization of the instance.</p>
        /// </param>
        public virtual void onBindStore(Ext.data.AbstractStore store, bool initial){}
        /// <summary>
        /// Disables the key nav for the BoundList when it is collapsed.
        /// </summary>
        private void onCollapse(){}
        /// <summary>
        /// Enables the key nav for the BoundList when it is expanded.
        /// </summary>
        private void onExpand(){}
        /// <summary>
        /// Template method, it is called when an existing store is unbound
        /// from the current instance.
        /// </summary>
        /// <param name="store"><p>The store being unbound</p>
        /// </param>
        /// <param name="initial"><p>True if this store is being bound as initialization of the instance.</p>
        /// </param>
        public virtual void onUnbindStore(Ext.data.AbstractStore store, bool initial){}
        /// <summary>
        /// Selects an item by a Model, or by a key value.
        /// </summary>
        /// <param name="r">
        /// </param>
        public void select(object r){}
        /// <summary>
        /// Set the value of hiddenDataEl
        /// Dynamically adds and removes input[type=hidden] elements
        /// </summary>
        /// <param name="values">
        /// </param>
        private void setHiddenValue(object values){}
        /// <summary>
        /// Synchronizes the selection in the picker to match the current value of the combobox.
        /// </summary>
        private void syncSelection(){}
        /// <summary>
        /// Unbinds listeners from this component to the store. By default it will remove
        /// anything bound by the bindStoreListeners method, however it can be overridden
        /// in a subclass to provide any more complicated handling.
        /// </summary>
        /// <param name="store"><p>The store to unbind from</p>
        /// </param>
        public virtual void unbindStoreListeners(Ext.data.AbstractStore store){}
        public ComboBox(Ext.form.field.ComboBoxConfig config){}
        public ComboBox(){}
        public ComboBox(params object[] args){}
    }
    #endregion
    #region ComboBoxConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ComboBoxConfig : PickerConfig
    {
        /// <summary>
        /// The text query to send to the server to return all records for the list with no filtering
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString allQuery;
        /// <summary>
        /// true to automatically highlight the first result gathered by the data store in the dropdown list when it is
        /// opened. A false value would cause nothing in the list to be highlighted automatically, so
        /// the user would have to manually highlight an item before pressing the enter or tab key to
        /// select it (unless the value of (typeAhead) were true), or use the mouse to select a value.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoSelect;
        /// <summary>
        /// Set of options that will be used as defaults for the user-configured listConfig object.
        /// Defaults to: <c>{loadingHeight: 70, minWidth: 70, maxHeight: 300, shadow: &quot;sides&quot;}</c>
        /// </summary>
        public JsObject defaultListConfig;
        /// <summary>
        /// The character(s) used to separate the display values of multiple selected items when
        /// multiSelect = true.
        /// Defaults to: <c>&quot;, &quot;</c>
        /// </summary>
        public JsString delimiter;
        /// <summary>
        /// The underlying data field name to bind to this ComboBox.
        /// See also <c><see cref="Ext.form.field.ComboBoxConfig.valueField">valueField</see></c>.
        /// Defaults to: <c>&quot;text&quot;</c>
        /// </summary>
        public JsString displayField;
        /// <summary>
        /// true to restrict the selected value to one of the values in the list, false to allow the user to set
        /// arbitrary text into the field.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool forceSelection;
        /// <summary>
        /// false to not allow the component to resize itself when its data changes
        /// (and its grow property is true)
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool growToLongestValue;
        /// <summary>
        /// CSS class used to find the hiddenDataEl
        /// Defaults to: <c>&quot;x-hide-display &quot;</c>
        /// </summary>
        public JsString hiddenDataCls;
        /// <summary>
        /// The name of an underlying hidden field which will be synchronized with the underlying value of the combo.
        /// This option is useful if the combo is part of a form element doing a regular form post. The hidden field
        /// will not be created unless a hiddenName is specified.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString hiddenName;
        /// <summary>
        /// An optional set of configuration properties that will be passed to the Ext.view.BoundList's constructor.
        /// Any configuration that is valid for BoundList can be included. Some of the more useful ones are:
        /// <li><see cref="Ext.view.BoundListConfig.cls">cls</see> - defaults to empty</li>
        /// <li><see cref="Ext.view.BoundListConfig.emptyText">emptyText</see> - defaults to empty string</li>
        /// <li><see cref="Ext.view.BoundListConfig.itemSelector">itemSelector</see> - defaults to the value defined in BoundList</li>
        /// <li><see cref="Ext.view.BoundListConfig.loadingText">loadingText</see> - defaults to <c>'Loading...'</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.minWidth">minWidth</see> - defaults to <c>70</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.maxWidth">maxWidth</see> - defaults to <c>undefined</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.maxHeight">maxHeight</see> - defaults to <c>300</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.resizable">resizable</see> - defaults to <c>false</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.shadow">shadow</see> - defaults to <c>'sides'</c></li>
        /// <li><see cref="Ext.view.BoundListConfig.width">width</see> - defaults to <c>undefined</c> (automatically set to the width of the ComboBox
        /// field if <see cref="Ext.form.field.ComboBoxConfig.matchFieldWidth">matchFieldWidth</see> is true)</li>
        /// </summary>
        public JsObject listConfig;
        /// <summary>
        /// The minimum number of characters the user must type before autocomplete and typeAhead activate.
        /// Defaults to <c>4</c> if <c><see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> = 'remote'</c> or <c>0</c> if <c><see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> = 'local'</c>,
        /// does not apply if <c><see cref="Ext.form.field.TriggerConfig.editable">editable</see> = false</c>.
        /// </summary>
        public JsNumber minChars;
        /// <summary>
        /// If set to true, allows the combo field to hold more than one value at a time, and allows selecting multiple
        /// items from the dropdown list. The combo's text field will show all selected values separated by the
        /// delimiter.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool multiSelect;
        /// <summary>
        /// If greater than 0, a Ext.toolbar.Paging is displayed in the footer of the dropdown list and the
        /// filter queries will execute with page start and limit
        /// parameters. Only applies when queryMode = 'remote'.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber pageSize;
        /// <summary>
        /// When true, this prevents the combo from re-querying (either locally or remotely) when the current query
        /// is the same as the previous query.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool queryCaching;
        /// <summary>
        /// The length of time in milliseconds to delay between the start of typing and sending the query to filter the
        /// dropdown list.
        /// Defaults to <c>500</c> if <c><see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> = 'remote'</c> or <c>10</c> if <c><see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see> = 'local'</c>
        /// </summary>
        public JsNumber queryDelay;
        /// <summary>
        /// The mode in which the ComboBox uses the configured Store. Acceptable values are:
        /// <li><p><strong><c>'remote'</c></strong> :</p>
        /// <p>In <c>queryMode: 'remote'</c>, the ComboBox loads its Store dynamically based upon user interaction.</p>
        /// <p>This is typically used for "autocomplete" type inputs, and after the user finishes typing, the Store is <see cref="Ext.data.Store.load">load</see>ed.</p>
        /// <p>A parameter containing the typed string is sent in the load request. The default parameter name for the input
        /// string is <c>query</c>, but this can be configured using the <see cref="Ext.form.field.ComboBoxConfig.queryParam">queryParam</see> config.</p>
        /// <p>In <c>queryMode: 'remote'</c>, the Store may be configured with <code><see cref="Ext.data.StoreConfig.remoteFilter">remoteFilter</see>:
        /// true</code>, and further filters may be <em>programatically</em> added to the Store which are then passed with every load
        /// request which allows the server to further refine the returned dataset.</p>
        /// <p>Typically, in an autocomplete situation, <see cref="Ext.form.field.ComboBoxConfig.hideTrigger">hideTrigger</see> is configured <c>true</c> because it has no meaning for
        /// autocomplete.</p></li>
        /// <li><p><strong><c>'local'</c></strong> :</p>
        /// <p>ComboBox loads local data</p>
        /// <pre><code>var combo = new <see cref="Ext.form.field.ComboBox">Ext.form.field.ComboBox</see>({
        /// renderTo: document.body,
        /// queryMode: 'local',
        /// store: new <see cref="Ext.data.ArrayStore">Ext.data.ArrayStore</see>({
        /// id: 0,
        /// fields: [
        /// 'myId',  // numeric value is the key
        /// 'displayText'
        /// ],
        /// data: [[1, 'item1'], [2, 'item2']]  // data is local
        /// }),
        /// valueField: 'myId',
        /// displayField: 'displayText',
        /// triggerAction: 'all'
        /// });
        /// </code></pre></li>
        /// Defaults to: <c>&quot;remote&quot;</c>
        /// </summary>
        public JsString queryMode;
        /// <summary>
        /// Name of the parameter used by the Store to pass the typed string when the ComboBox is configured with
        /// queryMode: 'remote'. If explicitly set to a falsy value it will not be sent.
        /// Defaults to: <c>&quot;query&quot;</c>
        /// </summary>
        public JsString queryParam;
        /// <summary>
        /// Whether the Tab key should select the currently highlighted item.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool selectOnTab;
        /// <summary>
        /// The data source to which this combo is bound. Acceptable values for this property are:
        /// <li><strong>any <see cref="Ext.data.Store">Store</see> subclass</strong></li>
        /// <li><p><strong>an Array</strong> : Arrays will be converted to a <see cref="Ext.data.Store">Ext.data.Store</see> internally, automatically generating
        /// <see cref="Ext.data.FieldConfig.name">field names</see> to work with all data components.</p>
        /// <ul>
        /// <li><p><strong>1-dimensional array</strong> : (e.g., <c>['Foo','Bar']</c>)</p>
        /// <p>A 1-dimensional array will automatically be expanded (each array item will be used for both the combo
        /// <see cref="Ext.form.field.ComboBoxConfig.valueField">valueField</see> and <see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see>)</p></li>
        /// <li><p><strong>2-dimensional array</strong> : (e.g., <c>[['f','Foo'],['b','Bar']]</c>)</p>
        /// <p>For a multi-dimensional array, the value in index 0 of each item will be assumed to be the combo
        /// <see cref="Ext.form.field.ComboBoxConfig.valueField">valueField</see>, while the value at index 1 is assumed to be the combo <see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see>.</p></li>
        /// </ul>
        /// </li>
        /// See also <see cref="Ext.form.field.ComboBoxConfig.queryMode">queryMode</see>.
        /// </summary>
        public object store;
        /// <summary>
        /// The id, DOM node or Ext.Element of an existing HTML &lt;select&gt; element to convert into a ComboBox. The
        /// target select's options will be used to build the options in the ComboBox dropdown; a configured store
        /// will take precedence over this.
        /// </summary>
        public object transform;
        /// <summary>
        /// The action to execute when the trigger is clicked.
        /// <li><p><strong><c>'all'</c></strong> :</p>
        /// <p><see cref="Ext.form.field.ComboBox.doQuery">run the query</see> specified by the <c><see cref="Ext.form.field.ComboBoxConfig.allQuery">allQuery</see></c> config option</p></li>
        /// <li><p><strong><c>'query'</c></strong> :</p>
        /// <p><see cref="Ext.form.field.ComboBox.doQuery">run the query</see> using the <see cref="Ext.form.field.Base.getRawValue">raw value</see>.</p></li>
        /// See also <c><see cref="Ext.form.field.ComboBoxConfig.queryParam">queryParam</see></c>.
        /// Defaults to: <c>&quot;all&quot;</c>
        /// </summary>
        public JsString triggerAction;
        /// <summary>
        /// true to populate and autoselect the remainder of the text being typed after a configurable delay
        /// (typeAheadDelay) if it matches a known value.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool typeAhead;
        /// <summary>
        /// The length of time in milliseconds to wait until the typeahead text is displayed if typeAhead = true
        /// Defaults to: <c>250</c>
        /// </summary>
        public JsNumber typeAheadDelay;
        /// <summary>
        /// The underlying data value name to bind to this ComboBox.
        /// <strong>Note</strong>: use of a <c>valueField</c> requires the user to make a selection in order for a value to be mapped. See also
        /// <c><see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see></c>.
        /// Defaults to match the value of the <see cref="Ext.form.field.ComboBoxConfig.displayField">displayField</see> config.
        /// </summary>
        public JsString valueField;
        /// <summary>
        /// When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will
        /// be displayed as the field text if defined. If this default text is used, it means there
        /// is no value set and no validation will occur on this field.
        /// </summary>
        public JsString valueNotFoundText;
        public ComboBoxConfig(params object[] args){}
    }
    #endregion
    #region ComboBoxEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ComboBoxEvents : PickerEvents
    {
        /// <summary>
        /// Fires before the deselected item is removed from the collection
        /// </summary>
        /// <param name="combo"><p>This combo box</p>
        /// </param>
        /// <param name="record"><p>The deselected record</p>
        /// </param>
        /// <param name="index"><p>The index of the deselected record</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforedeselect(Ext.form.field.ComboBox combo, object record, JsNumber index, object eOpts){}
        /// <summary>
        /// Fires before all queries are processed. Return false to cancel the query or set the queryEvent's cancel
        /// property to true.
        /// </summary>
        /// <param name="queryEvent"><p>An object that has these properties:</p>
        /// <ul>
        /// <li><p><c>combo</c> : <see cref="Ext.form.field.ComboBox">Ext.form.field.ComboBox</see></p>
        /// <p>This combo box</p></li>
        /// <li><p><c>query</c> : String</p>
        /// <p>The query string</p></li>
        /// <li><p><c>forceAll</c> : Boolean</p>
        /// <p>True to force "all" query</p></li>
        /// <li><p><c>cancel</c> : Boolean</p>
        /// <p>Set to true to cancel the query</p></li>
        /// </ul>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforequery(object queryEvent, object eOpts){}
        /// <summary>
        /// Fires before the selected item is added to the collection
        /// </summary>
        /// <param name="combo"><p>This combo box</p>
        /// </param>
        /// <param name="record"><p>The selected record</p>
        /// </param>
        /// <param name="index"><p>The index of the selected record</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeselect(Ext.form.field.ComboBox combo, object record, JsNumber index, object eOpts){}
        public ComboBoxEvents(params object[] args){}
    }
    #endregion
}
