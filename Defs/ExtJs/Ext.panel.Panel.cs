//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.panel
{
    #region Panel
    /// <inheritdocs />
    /// <summary>
    /// <p>Panel is a container that has specific functionality and structural components that make it the perfect building
    /// block for application-oriented user interfaces.</p>
    /// <p>Panels are, by virtue of their inheritance from <see cref="Ext.container.Container">Ext.container.Container</see>, capable of being configured with a
    /// <see cref="Ext.container.ContainerConfig.layout">layout</see>, and containing child Components.</p>
    /// <p>When either specifying child <see cref="Ext.panel.PanelConfig.items">items</see> of a Panel, or dynamically <see cref="Ext.container.Container.add">adding</see>
    /// Components to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether those
    /// child elements need to be sized using one of Ext's built-in <c><see cref="Ext.container.ContainerConfig.layout">layout</see></c>
    /// schemes. By default, Panels use the <see cref="Ext.layout.container.Auto">Auto</see> scheme. This simply renders child
    /// components, appending them one after the other inside the Container, and <strong>does not apply any sizing</strong> at all.</p>
    /// <p><p><i></i></p></p>
    /// <p>A Panel may also contain <see cref="Ext.panel.PanelConfig.bbar">bottom</see> and <see cref="Ext.panel.PanelConfig.tbar">top</see> toolbars, along with separate <see cref="Ext.panel.Header">header</see>, <see cref="Ext.panel.PanelConfig.fbar">footer</see> and body sections.</p>
    /// <p>Panel also provides built-in <see cref="Ext.panel.PanelConfig.collapsible">collapsible, expandable</see> and <see cref="Ext.panel.PanelConfig.closable">closable</see> behavior. Panels can
    /// be easily dropped into any <see cref="Ext.container.Container">Container</see> or layout, and the layout and rendering pipeline
    /// is <see cref="Ext.container.Container.add">completely managed by the framework</see>.</p>
    /// <p><strong>Note:</strong> By default, the <c><see cref="Ext.panel.PanelConfig.closable">close</see></c> header tool <em>destroys</em> the Panel resulting in removal of the
    /// Panel and the destruction of any descendant Components. This makes the Panel object, and all its descendants
    /// <strong>unusable</strong>. To enable the close tool to simply <em>hide</em> a Panel for later re-use, configure the Panel with
    /// <c><see cref="Ext.panel.PanelConfig.closeAction">closeAction</see>: 'hide'</c>.</p>
    /// <p>Usually, Panels are used as constituents within an application, in which case, they would be used as child items of
    /// Containers, and would themselves use Ext.Components as child <see cref="Ext.panel.PanelConfig.items">items</see>. However to illustrate simply rendering a
    /// Panel into the document, here's how to do it:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// title: 'Hello',
    /// width: 200,
    /// html: '&lt;p&gt;World!&lt;/p&gt;',
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>A more realistic scenario is a Panel created to house input fields which will not be rendered, but used as a
    /// constituent part of a Container:</p>
    /// <pre><code>var filterPanel = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// bodyPadding: 5,  // Don't want content to crunch against the borders
    /// width: 300,
    /// title: 'Filters',
    /// items: [{
    /// xtype: 'datefield',
    /// fieldLabel: 'Start date'
    /// }, {
    /// xtype: 'datefield',
    /// fieldLabel: 'End date'
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>Note that the Panel above is configured to render into the document and assigned a size. In a real world scenario,
    /// the Panel will often be added inside a Container which will use a <see cref="Ext.panel.PanelConfig.layout">layout</see> to render, size and position its
    /// child Components.</p>
    /// <p>Panels will often use specific <see cref="Ext.panel.PanelConfig.layout">layout</see>s to provide an application with shape and structure by containing and
    /// arranging child Components:</p>
    /// <pre><code>var resultsPanel = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// title: 'Results',
    /// width: 600,
    /// height: 400,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// layout: {
    /// type: 'vbox',       // Arrange child items vertically
    /// align: 'stretch',    // Each takes up full width
    /// padding: 5
    /// },
    /// items: [{               // Results grid specified as a config object with an xtype of 'grid'
    /// xtype: 'grid',
    /// columns: [{header: 'Column One'}],            // One header just for show. There's no data,
    /// store: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.ArrayStore">Ext.data.ArrayStore</see>', {}), // A dummy empty data store
    /// flex: 1                                       // Use 1/3 of Container's height (hint to Box layout)
    /// }, {
    /// xtype: 'splitter'   // A splitter between the two child items
    /// }, {                    // Details Panel specified as a config object (no xtype defaults to 'panel').
    /// title: 'Details',
    /// bodyPadding: 5,
    /// items: [{
    /// fieldLabel: 'Data item',
    /// xtype: 'textfield'
    /// }], // An array of form fields
    /// flex: 2             // Use 2/3 of Container's height (hint to Box layout)
    /// }]
    /// });
    /// </code></pre>
    /// <p>The example illustrates one possible method of displaying search results. The Panel contains a grid with the
    /// resulting data arranged in rows. Each selected row may be displayed in detail in the Panel below. The <see cref="Ext.layout.container.VBox">vbox</see> layout is used to arrange the two vertically. It is configured to stretch child items
    /// horizontally to full width. Child items may either be configured with a numeric height, or with a <c>flex</c> value to
    /// distribute available space proportionately.</p>
    /// <p>This Panel itself may be a child item of, for exaple, a <see cref="Ext.tab.Panel">Ext.tab.Panel</see> which will size its child items to fit
    /// within its content area.</p>
    /// <p>Using these techniques, as long as the <strong>layout</strong> is chosen and configured correctly, an application may have any
    /// level of nested containment, all dynamically sized according to configuration, the user's preference and available
    /// browser size.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Panel : AbstractPanel
    {
        /// <summary>
        /// true to animate the transition when the panel is collapsed, false to skip the animation (defaults to true
        /// if the Ext.fx.Anim class is available, otherwise false). May also be specified as the animation
        /// duration in milliseconds.
        /// </summary>
        public bool animCollapse;
        /// <summary>
        /// Convenience config. Short for 'Bottom Bar'.
        /// <code>bbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public object bbar;
        /// <summary>
        /// The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
        /// 'right' for buttons/fbar, 'left' for other toolbar types).
        /// <strong>NOTE:</strong> The prefered way to specify toolbars is to use the dockedItems config. Instead of buttonAlign you
        /// would add the layout: { pack: 'start' | 'center' | 'end' } option to the dockedItem config.
        /// </summary>
        public JsString buttonAlign;
        /// <summary>
        /// Convenience config used for adding buttons docked to the bottom of the panel. This is a
        /// synonym for the fbar config.
        /// <code>buttons: [
        /// { text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// ui: 'footer',
        /// defaults: {minWidth: <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see>},
        /// items: [
        /// { xtype: 'component', flex: 1 },
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// The <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see> is used as the default <see cref="Ext.button.ButtonConfig.minWidth">minWidth</see> for
        /// each of the buttons in the buttons toolbar.
        /// </summary>
        public object buttons;
        /// <summary>
        /// True to display the 'close' tool button and allow the user to close the window, false to hide the button and
        /// disallow closing the window.
        /// By default, when close is requested by clicking the close button in the header, the <see cref="Ext.panel.Panel.close">close</see> method will be
        /// called. This will <em><see cref="Ext.Component">destroy</see></em> the Panel and its content meaning that it may not be
        /// reused.
        /// To make closing a Panel <em>hide</em> the Panel so that it may be reused, set <see cref="Ext.panel.PanelConfig.closeAction">closeAction</see> to 'hide'.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool closable;
        /// <summary>
        /// The action to take when the close header tool is clicked:
        /// <li><p><strong><c>'<see cref="Ext.panel.Panel">destroy</see>'</c></strong> :</p>
        /// <p><see cref="Ext.panel.Panel.remove">remove</see> the window from the DOM and <see cref="Ext.Component">destroy</see> it and all descendant
        /// Components. The window will <strong>not</strong> be available to be redisplayed via the <see cref="Ext.panel.Panel.show">show</see> method.</p></li>
        /// <li><p><strong><c>'<see cref="Ext.panel.Panel.hide">hide</see>'</c></strong> :</p>
        /// <p><see cref="Ext.panel.Panel.hide">hide</see> the window by setting visibility to hidden and applying negative offsets. The window will be
        /// available to be redisplayed via the <see cref="Ext.panel.Panel.show">show</see> method.</p></li>
        /// <strong>Note:</strong> This behavior has changed! setting <em>does</em> affect the <see cref="Ext.panel.Panel.close">close</see> method which will invoke the
        /// approriate closeAction.
        /// Defaults to: <c>&quot;destroy&quot;</c>
        /// </summary>
        public JsString closeAction;
        /// <summary>
        /// The direction to collapse the Panel when the toggle button is clicked.
        /// Defaults to the <see cref="Ext.panel.PanelConfig.headerPosition">headerPosition</see>
        /// <strong>Important: This config is <em>ignored</em> for <see cref="Ext.panel.PanelConfig.collapsible">collapsible</see> Panels which are direct child items of a <see cref="Ext.layout.container.Border">border layout</see>.</strong>
        /// Specify as <c>'top'</c>, <c>'bottom'</c>, <c>'left'</c> or <c>'right'</c>.
        /// </summary>
        public JsString collapseDirection;
        /// <summary>
        /// true to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in
        /// the panel's title bar, false to render it last.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool collapseFirst;
        /// <summary>
        /// Important: this config is only effective for collapsible Panels which are direct child items of a
        /// border layout.
        /// When <em>not</em> a direct child item of a <see cref="Ext.layout.container.Border">border layout</see>, then the Panel's header
        /// remains visible, and the body is collapsed to zero dimensions. If the Panel has no header, then a new header
        /// (orientated correctly depending on the <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>) will be inserted to show a the title and a re-
        /// expand tool.
        /// When a child item of a <see cref="Ext.layout.container.Border">border layout</see>, this config has three possible values:
        /// <li><p><c>undefined</c> - When collapsed, a placeholder <see cref="Ext.panel.Header">Header</see> is injected into the layout to
        /// represent the Panel and to provide a UI with a Tool to allow the user to re-expand the Panel.</p></li>
        /// <li><p><c>"header"</c> - The Panel collapses to leave its header visible as when not inside a
        /// <see cref="Ext.layout.container.Border">border layout</see>.</p></li>
        /// <li><p><c>"mini"</c> - The Panel collapses without a visible header.</p></li>
        /// </summary>
        public JsString collapseMode;
        /// <summary>
        /// true to render the panel collapsed, false to render it expanded.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool collapsed;
        /// <summary>
        /// A CSS class to add to the panel's element after it has been collapsed.
        /// Defaults to: <c>&quot;collapsed&quot;</c>
        /// </summary>
        public JsString collapsedCls;
        /// <summary>
        /// True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
        /// area. False to keep the panel sized either statically, or by an owning layout manager, with no toggle Tool.
        /// See <see cref="Ext.panel.PanelConfig.collapseMode">collapseMode</see> and <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool collapsible;
        /// <summary>
        /// Convenience config used for adding items to the bottom of the panel. Short for Footer Bar.
        /// <code>fbar: [
        /// { type: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// ui: 'footer',
        /// defaults: {minWidth: <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see>},
        /// items: [
        /// { xtype: 'component', flex: 1 },
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// The <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see> is used as the default <see cref="Ext.button.ButtonConfig.minWidth">minWidth</see> for
        /// each of the buttons in the fbar.
        /// </summary>
        public object fbar;
        /// <summary>
        /// Important: This config is only effective for collapsible Panels which are direct child items of a
        /// border layout.
        /// true to allow clicking a collapsed Panel's <see cref="Ext.panel.PanelConfig.placeholder">placeholder</see> to display the Panel floated above the layout,
        /// false to force the user to fully expand a collapsed region by clicking the expand button to see it again.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool floatable;
        /// <summary>
        /// True to apply a frame to the panel panels header (if 'frame' is true).
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool frameHeader;
        /// <summary>
        /// Pass as false to prevent a Header from being created and shown.
        /// Pass as a config object (optionally containing an <c>xtype</c>) to custom-configure this Panel's header.
        /// </summary>
        public object header;
        /// <summary>
        /// Specify as 'top', 'bottom', 'left' or 'right'.
        /// Defaults to: <c>&quot;top&quot;</c>
        /// </summary>
        public JsString headerPosition;
        /// <summary>
        /// true to hide the expand/collapse toggle button when collapsible == true, false to display it.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideCollapseTool;
        /// <summary>
        /// Path to image for an icon in the header. Used for displaying an icon to the left of a title.
        /// </summary>
        public JsString icon;
        /// <summary>
        /// CSS class for an icon in the header. Used for displaying an icon to the left of a title.
        /// </summary>
        public JsString iconCls;
        /// <summary>
        /// Convenience config. Short for 'Left Bar' (left-docked, vertical toolbar).
        /// <code>lbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'left',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public object lbar;
        /// <summary>
        /// : When true, the dock component layout writes
        /// height information to the panel's DOM elements based on its shrink wrap height
        /// calculation. This ensures that the browser respects the calculated height.
        /// When false, the dock component layout will not write heights on the panel or its
        /// body element. In some simple layout cases, not writing the heights to the DOM may
        /// be desired because this allows the browser to respond to direct DOM manipulations
        /// (like animations).
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool manageHeight;
        /// <summary>
        /// Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
        /// value for the Ext.button.Button.minWidth config of each Button added to the footer toolbar via the
        /// fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
        /// some other way, e.g. in their own config object or via the defaults of
        /// their parent container.
        /// Defaults to: <c>75</c>
        /// </summary>
        public JsNumber minButtonWidth;
        /// <summary>
        /// True to overlap the header in a panel over the framing of the panel itself. This is needed when frame:true (and
        /// is done automatically for you). Otherwise it is undefined. If you manually add rounded corners to a panel header
        /// which does not have frame:true, this will need to be set to true.
        /// </summary>
        public bool overlapHeader;
        /// <summary>
        /// Important: This config is only effective for collapsible Panels which are direct child items of a
        /// border layout when not using the 'header' collapseMode.
        /// <strong>Optional.</strong> A Component (or config object for a Component) to show in place of this Panel when this Panel is
        /// collapsed by a <see cref="Ext.layout.container.Border">border layout</see>. Defaults to a generated <see cref="Ext.panel.Header">Header</see> containing a <see cref="Ext.panel.Tool">Tool</see> to re-expand the Panel.
        /// </summary>
        public object placeholder;
        /// <summary>
        /// The mode for hiding collapsed panels when
        /// using collapseMode "placeholder".
        /// </summary>
        public JsNumber placeholderCollapseHideMode;
        /// <summary>
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> </p>
        /// <p>4.1.0 Use <see cref="Ext.panel.PanelConfig.header">header</see> instead.
        /// Prevent a Header from being created and shown.</p>
        /// </summary>
        public bool preventHeader;
        /// <summary>
        /// Convenience config. Short for 'Right Bar' (right-docked, vertical toolbar).
        /// <code>rbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'right',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public object rbar;
        /// <summary>
        /// Convenience config. Short for 'Top Bar'.
        /// <code>tbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'top',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public object tbar;
        /// <summary>
        /// The title text to be used to display in the panel header. When a
        /// title is specified the Ext.panel.Header will automatically be created and displayed unless
        /// header is set to false.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString title;
        /// <summary>
        /// May be "left", "right" or "center".
        /// The alignment of the title text within the available space between the icon and the tools.
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString titleAlign;
        /// <summary>
        /// true to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in
        /// the header bar, false) to allow it only by clicking to tool button).
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool titleCollapse;
        /// <summary>
        /// An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
        /// child components of the header container. They can be accessed using down and {query}, as well as the
        /// other component methods. The toggle tool is automatically created if collapsible is set to true.
        /// Note that, apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the
        /// visual button. Any required functionality must be provided by adding handlers that implement the necessary
        /// behavior.
        /// Example usage:
        /// <code>tools:[{
        /// type:'refresh',
        /// tooltip: 'Refresh form Data',
        /// // hidden:true,
        /// handler: function(event, toolEl, panel){
        /// // refresh logic
        /// }
        /// },
        /// {
        /// type:'help',
        /// tooltip: 'Get Help',
        /// handler: function(event, toolEl, panel){
        /// // show help here
        /// }
        /// }]
        /// </code>
        /// </summary>
        public object tools;
        /// <summary>
        /// If this Panel is configured draggable, this property will contain an instance of Ext.dd.DragSource which handles dragging the Panel.
        /// The developer must provide implementations of the abstract methods of <see cref="Ext.dd.DragSource">Ext.dd.DragSource</see> in order to
        /// supply behaviour for each stage of the drag/drop process. See <see cref="Ext.panel.PanelConfig.draggable">draggable</see>.
        /// </summary>
        public Ext.dd.DragSource dd{get;set;}
        /// <summary>
        /// Template method to be implemented in subclasses to add their tools after the collapsible tool.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected virtual void addTools(){}
        /// <summary>
        /// Invoked after the Panel is Collapsed.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animated">
        /// </param>
        protected virtual void afterCollapse(bool animated){}
        /// <summary>
        /// Invoked after the Panel is Expanded.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animated">
        /// </param>
        protected virtual void afterExpand(bool animated){}
        /// <summary>
        /// Called before the change from default, configured state into the collapsed state.
        /// This method may be called at render time to enable rendering in an initially collapsed state,
        /// or at runtime when an existing, fully layed out Panel may be collapsed.
        /// It basically saves configs which need to be clobbered for the duration of the collapsed state.
        /// </summary>
        private void beginCollapse(){}
        /// <summary>
        /// Closes the Panel. By default, this method, removes it from the DOM, destroys the
        /// Panel object and all its descendant Components. The beforeclose event is fired before the
        /// close happens and will cancel the close action if it returns false.
        /// <strong>Note:</strong> This method is also affected by the <see cref="Ext.panel.PanelConfig.closeAction">closeAction</see> setting. For more explicit control use
        /// <see cref="Ext.panel.Panel">destroy</see> and <see cref="Ext.panel.Panel.hide">hide</see> methods.
        /// </summary>
        public void close(){}
        /// <summary>
        /// Collapses the panel body so that the body becomes hidden. Docked Components parallel to the border towards which
        /// the collapse takes place will remain visible. Fires the beforecollapse event which will cancel the
        /// collapse action if it returns false.
        /// </summary>
        /// <param name="direction"><p>The direction to collapse towards. Must be one of</p>
        /// <ul>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_TOP</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_RIGHT</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_BOTTOM</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_LEFT</li>
        /// </ul>
        /// <p>Defaults to <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>.</p>
        /// </param>
        /// <param name="animate"><p>True to animate the transition, else false (defaults to the value of the
        /// <see cref="Ext.panel.PanelConfig.animCollapse">animCollapse</see> panel config)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.panel.Panel collapse(object direction=null, object animate=null){return null;}
        /// <summary>
        /// Expands the panel body so that it becomes visible.  Fires the beforeexpand event which will
        /// cancel the expand action if it returns false.
        /// </summary>
        /// <param name="animate"><p>True to animate the transition, else false (defaults to the value of the
        /// <see cref="Ext.panel.PanelConfig.animCollapse">animCollapse</see> panel config)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.panel.Panel expand(object animate=null){return null;}
        /// <summary>
        /// Returns the current collapsed state of the panel.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see>/<see cref="String">String</see></span><div><p>False when not collapsed, otherwise the value of <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>.</p>
        /// </div>
        /// </returns>
        public object getCollapsed(){return null;}
        /// <summary>
        /// Gets the Header for this panel.
        /// </summary>
        public void getHeader(){}
        /// <summary>
        /// Tools are a Panel-specific capabilty.
        /// Panel uses initTools. Subclasses may contribute tools by implementing addTools.
        /// </summary>
        private void initTools(){}
        /// <summary>
        /// Set the icon for the panel's header. See Ext.panel.Header.icon. It will fire the
        /// iconchange event after completion.
        /// </summary>
        /// <param name="newIcon"><p>The new icon path</p>
        /// </param>
        public void setIcon(JsString newIcon){}
        /// <summary>
        /// Set the iconCls for the panel's header. See Ext.panel.Header.iconCls. It will fire the
        /// iconclschange event after completion.
        /// </summary>
        /// <param name="newIconCls"><p>The new CSS class name</p>
        /// </param>
        public void setIconCls(JsString newIconCls){}
        /// <summary>
        /// Set a title for the panel's header. See Ext.panel.Header.title.
        /// </summary>
        /// <param name="newTitle">
        /// </param>
        public void setTitle(JsString newTitle){}
        /// <summary>
        /// This method begins the slide out of the floated panel.
        /// </summary>
        private void slideOutFloatedPanelBegin(){}
        /// <summary>
        /// This method cleans up after the slide out of the floated panel.
        /// </summary>
        private void slideOutFloatedPanelEnd(){}
        /// <summary>
        /// Shortcut for performing an expand or collapse based on the current state of the panel.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.panel.Panel toggleCollapse(){return null;}
        /// <summary>
        /// Create, hide, or show the header component as appropriate based on the current config.
        /// </summary>
        /// <param name="force"><p>True to force the header to be created</p>
        /// </param>
        private void updateHeader(bool force){}
        public Panel(Ext.panel.PanelConfig config){}
        public Panel(){}
        public Panel(params object[] args){}
    }
    #endregion
    #region PanelConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PanelConfig : AbstractPanelConfig
    {
        /// <summary>
        /// true to animate the transition when the panel is collapsed, false to skip the animation (defaults to true
        /// if the Ext.fx.Anim class is available, otherwise false). May also be specified as the animation
        /// duration in milliseconds.
        /// </summary>
        public bool animCollapse;
        /// <summary>
        /// Convenience config. Short for 'Bottom Bar'.
        /// <code>bbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public object bbar;
        /// <summary>
        /// The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
        /// 'right' for buttons/fbar, 'left' for other toolbar types).
        /// <strong>NOTE:</strong> The prefered way to specify toolbars is to use the dockedItems config. Instead of buttonAlign you
        /// would add the layout: { pack: 'start' | 'center' | 'end' } option to the dockedItem config.
        /// </summary>
        public JsString buttonAlign;
        /// <summary>
        /// Convenience config used for adding buttons docked to the bottom of the panel. This is a
        /// synonym for the fbar config.
        /// <code>buttons: [
        /// { text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// ui: 'footer',
        /// defaults: {minWidth: <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see>},
        /// items: [
        /// { xtype: 'component', flex: 1 },
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// The <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see> is used as the default <see cref="Ext.button.ButtonConfig.minWidth">minWidth</see> for
        /// each of the buttons in the buttons toolbar.
        /// </summary>
        public object buttons;
        /// <summary>
        /// True to display the 'close' tool button and allow the user to close the window, false to hide the button and
        /// disallow closing the window.
        /// By default, when close is requested by clicking the close button in the header, the <see cref="Ext.panel.Panel.close">close</see> method will be
        /// called. This will <em><see cref="Ext.Component">destroy</see></em> the Panel and its content meaning that it may not be
        /// reused.
        /// To make closing a Panel <em>hide</em> the Panel so that it may be reused, set <see cref="Ext.panel.PanelConfig.closeAction">closeAction</see> to 'hide'.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool closable;
        /// <summary>
        /// The action to take when the close header tool is clicked:
        /// <li><p><strong><c>'<see cref="Ext.panel.Panel">destroy</see>'</c></strong> :</p>
        /// <p><see cref="Ext.panel.Panel.remove">remove</see> the window from the DOM and <see cref="Ext.Component">destroy</see> it and all descendant
        /// Components. The window will <strong>not</strong> be available to be redisplayed via the <see cref="Ext.panel.Panel.show">show</see> method.</p></li>
        /// <li><p><strong><c>'<see cref="Ext.panel.Panel.hide">hide</see>'</c></strong> :</p>
        /// <p><see cref="Ext.panel.Panel.hide">hide</see> the window by setting visibility to hidden and applying negative offsets. The window will be
        /// available to be redisplayed via the <see cref="Ext.panel.Panel.show">show</see> method.</p></li>
        /// <strong>Note:</strong> This behavior has changed! setting <em>does</em> affect the <see cref="Ext.panel.Panel.close">close</see> method which will invoke the
        /// approriate closeAction.
        /// Defaults to: <c>&quot;destroy&quot;</c>
        /// </summary>
        public JsString closeAction;
        /// <summary>
        /// The direction to collapse the Panel when the toggle button is clicked.
        /// Defaults to the <see cref="Ext.panel.PanelConfig.headerPosition">headerPosition</see>
        /// <strong>Important: This config is <em>ignored</em> for <see cref="Ext.panel.PanelConfig.collapsible">collapsible</see> Panels which are direct child items of a <see cref="Ext.layout.container.Border">border layout</see>.</strong>
        /// Specify as <c>'top'</c>, <c>'bottom'</c>, <c>'left'</c> or <c>'right'</c>.
        /// </summary>
        public JsString collapseDirection;
        /// <summary>
        /// true to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in
        /// the panel's title bar, false to render it last.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool collapseFirst;
        /// <summary>
        /// Important: this config is only effective for collapsible Panels which are direct child items of a
        /// border layout.
        /// When <em>not</em> a direct child item of a <see cref="Ext.layout.container.Border">border layout</see>, then the Panel's header
        /// remains visible, and the body is collapsed to zero dimensions. If the Panel has no header, then a new header
        /// (orientated correctly depending on the <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>) will be inserted to show a the title and a re-
        /// expand tool.
        /// When a child item of a <see cref="Ext.layout.container.Border">border layout</see>, this config has three possible values:
        /// <li><p><c>undefined</c> - When collapsed, a placeholder <see cref="Ext.panel.Header">Header</see> is injected into the layout to
        /// represent the Panel and to provide a UI with a Tool to allow the user to re-expand the Panel.</p></li>
        /// <li><p><c>"header"</c> - The Panel collapses to leave its header visible as when not inside a
        /// <see cref="Ext.layout.container.Border">border layout</see>.</p></li>
        /// <li><p><c>"mini"</c> - The Panel collapses without a visible header.</p></li>
        /// </summary>
        public JsString collapseMode;
        /// <summary>
        /// true to render the panel collapsed, false to render it expanded.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool collapsed;
        /// <summary>
        /// A CSS class to add to the panel's element after it has been collapsed.
        /// Defaults to: <c>&quot;collapsed&quot;</c>
        /// </summary>
        public JsString collapsedCls;
        /// <summary>
        /// True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
        /// area. False to keep the panel sized either statically, or by an owning layout manager, with no toggle Tool.
        /// See <see cref="Ext.panel.PanelConfig.collapseMode">collapseMode</see> and <see cref="Ext.panel.PanelConfig.collapseDirection">collapseDirection</see>
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool collapsible;
        /// <summary>
        /// Convenience config used for adding items to the bottom of the panel. Short for Footer Bar.
        /// <code>fbar: [
        /// { type: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'bottom',
        /// ui: 'footer',
        /// defaults: {minWidth: <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see>},
        /// items: [
        /// { xtype: 'component', flex: 1 },
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// The <see cref="Ext.panel.PanelConfig.minButtonWidth">minButtonWidth</see> is used as the default <see cref="Ext.button.ButtonConfig.minWidth">minWidth</see> for
        /// each of the buttons in the fbar.
        /// </summary>
        public object fbar;
        /// <summary>
        /// Important: This config is only effective for collapsible Panels which are direct child items of a
        /// border layout.
        /// true to allow clicking a collapsed Panel's <see cref="Ext.panel.PanelConfig.placeholder">placeholder</see> to display the Panel floated above the layout,
        /// false to force the user to fully expand a collapsed region by clicking the expand button to see it again.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool floatable;
        /// <summary>
        /// True to apply a frame to the panel panels header (if 'frame' is true).
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool frameHeader;
        /// <summary>
        /// Pass as false to prevent a Header from being created and shown.
        /// Pass as a config object (optionally containing an <c>xtype</c>) to custom-configure this Panel's header.
        /// </summary>
        public object header;
        /// <summary>
        /// Specify as 'top', 'bottom', 'left' or 'right'.
        /// Defaults to: <c>&quot;top&quot;</c>
        /// </summary>
        public JsString headerPosition;
        /// <summary>
        /// true to hide the expand/collapse toggle button when collapsible == true, false to display it.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideCollapseTool;
        /// <summary>
        /// Path to image for an icon in the header. Used for displaying an icon to the left of a title.
        /// </summary>
        public JsString icon;
        /// <summary>
        /// CSS class for an icon in the header. Used for displaying an icon to the left of a title.
        /// </summary>
        public JsString iconCls;
        /// <summary>
        /// Convenience config. Short for 'Left Bar' (left-docked, vertical toolbar).
        /// <code>lbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'left',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public object lbar;
        /// <summary>
        /// : When true, the dock component layout writes
        /// height information to the panel's DOM elements based on its shrink wrap height
        /// calculation. This ensures that the browser respects the calculated height.
        /// When false, the dock component layout will not write heights on the panel or its
        /// body element. In some simple layout cases, not writing the heights to the DOM may
        /// be desired because this allows the browser to respond to direct DOM manipulations
        /// (like animations).
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool manageHeight;
        /// <summary>
        /// Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
        /// value for the Ext.button.Button.minWidth config of each Button added to the footer toolbar via the
        /// fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
        /// some other way, e.g. in their own config object or via the defaults of
        /// their parent container.
        /// Defaults to: <c>75</c>
        /// </summary>
        public JsNumber minButtonWidth;
        /// <summary>
        /// True to overlap the header in a panel over the framing of the panel itself. This is needed when frame:true (and
        /// is done automatically for you). Otherwise it is undefined. If you manually add rounded corners to a panel header
        /// which does not have frame:true, this will need to be set to true.
        /// </summary>
        public bool overlapHeader;
        /// <summary>
        /// Important: This config is only effective for collapsible Panels which are direct child items of a
        /// border layout when not using the 'header' collapseMode.
        /// <strong>Optional.</strong> A Component (or config object for a Component) to show in place of this Panel when this Panel is
        /// collapsed by a <see cref="Ext.layout.container.Border">border layout</see>. Defaults to a generated <see cref="Ext.panel.Header">Header</see> containing a <see cref="Ext.panel.Tool">Tool</see> to re-expand the Panel.
        /// </summary>
        public object placeholder;
        /// <summary>
        /// The mode for hiding collapsed panels when
        /// using collapseMode "placeholder".
        /// </summary>
        public JsNumber placeholderCollapseHideMode;
        /// <summary>
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> </p>
        /// <p>4.1.0 Use <see cref="Ext.panel.PanelConfig.header">header</see> instead.
        /// Prevent a Header from being created and shown.</p>
        /// </summary>
        public bool preventHeader;
        /// <summary>
        /// Convenience config. Short for 'Right Bar' (right-docked, vertical toolbar).
        /// <code>rbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'right',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public object rbar;
        /// <summary>
        /// Convenience config. Short for 'Top Bar'.
        /// <code>tbar: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// </code>
        /// is equivalent to
        /// <code>dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'top',
        /// items: [
        /// { xtype: 'button', text: 'Button 1' }
        /// ]
        /// }]
        /// </code>
        /// </summary>
        public object tbar;
        /// <summary>
        /// The title text to be used to display in the panel header. When a
        /// title is specified the Ext.panel.Header will automatically be created and displayed unless
        /// header is set to false.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString title;
        /// <summary>
        /// May be "left", "right" or "center".
        /// The alignment of the title text within the available space between the icon and the tools.
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString titleAlign;
        /// <summary>
        /// true to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in
        /// the header bar, false) to allow it only by clicking to tool button).
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool titleCollapse;
        /// <summary>
        /// An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
        /// child components of the header container. They can be accessed using down and {query}, as well as the
        /// other component methods. The toggle tool is automatically created if collapsible is set to true.
        /// Note that, apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the
        /// visual button. Any required functionality must be provided by adding handlers that implement the necessary
        /// behavior.
        /// Example usage:
        /// <code>tools:[{
        /// type:'refresh',
        /// tooltip: 'Refresh form Data',
        /// // hidden:true,
        /// handler: function(event, toolEl, panel){
        /// // refresh logic
        /// }
        /// },
        /// {
        /// type:'help',
        /// tooltip: 'Get Help',
        /// handler: function(event, toolEl, panel){
        /// // show help here
        /// }
        /// }]
        /// </code>
        /// </summary>
        public object tools;
        public PanelConfig(params object[] args){}
    }
    #endregion
    #region PanelEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PanelEvents : AbstractPanelEvents
    {
        /// <summary>
        /// Fires before the user closes the panel. Return false from any listener to stop the close event being
        /// fired
        /// </summary>
        /// <param name="panel"><p>The Panel object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeclose(Ext.panel.Panel panel, object eOpts){}
        /// <summary>
        /// Fires before this panel is collapsed. Return false to prevent the collapse.
        /// </summary>
        /// <param name="p"><p>The Panel being collapsed.</p>
        /// </param>
        /// <param name="direction"><p>. The direction of the collapse. One of</p>
        /// <ul>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_TOP</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_RIGHT</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_BOTTOM</li>
        /// <li><see cref="Ext.Component">Ext.Component</see>.DIRECTION_LEFT</li>
        /// </ul>
        /// </param>
        /// <param name="animate"><p>True if the collapse is animated, else false.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecollapse(Ext.panel.Panel p, JsString direction, bool animate, object eOpts){}
        /// <summary>
        /// Fires before this panel is expanded. Return false to prevent the expand.
        /// </summary>
        /// <param name="p"><p>The Panel being expanded.</p>
        /// </param>
        /// <param name="animate"><p>True if the expand is animated, else false.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeexpand(Ext.panel.Panel p, bool animate, object eOpts){}
        /// <summary>
        /// Fires when the user closes the panel.
        /// </summary>
        /// <param name="panel"><p>The Panel object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void close(Ext.panel.Panel panel, object eOpts){}
        /// <summary>
        /// Fires after this Panel hass collapsed.
        /// </summary>
        /// <param name="p"><p>The Panel that has been collapsed.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void collapse(Ext.panel.Panel p, object eOpts){}
        /// <summary>
        /// Fires after this Panel has expanded.
        /// </summary>
        /// <param name="p"><p>The Panel that has been expanded.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void expand(Ext.panel.Panel p, object eOpts){}
        /// <summary>
        /// Fires after the Panel icon has been set or changed.
        /// </summary>
        /// <param name="p"><p>The Panel which has the icon changed.</p>
        /// </param>
        /// <param name="newIcon"><p>The path to the new icon image.</p>
        /// </param>
        /// <param name="oldIcon"><p>The path to the previous panel icon image.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void iconchange(Ext.panel.Panel p, JsString newIcon, JsString oldIcon, object eOpts){}
        /// <summary>
        /// Fires after the Panel iconCls has been set or changed.
        /// </summary>
        /// <param name="p"><p>The Panel which has the iconCls changed.</p>
        /// </param>
        /// <param name="newIconCls"><p>The new iconCls.</p>
        /// </param>
        /// <param name="oldIconCls"><p>The previous panel iconCls.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void iconclschange(Ext.panel.Panel p, JsString newIconCls, JsString oldIconCls, object eOpts){}
        /// <summary>
        /// Fires after the Panel title has been set or changed.
        /// </summary>
        /// <param name="p"><p>the Panel which has been resized.</p>
        /// </param>
        /// <param name="newTitle"><p>The new title.</p>
        /// </param>
        /// <param name="oldTitle"><p>The previous panel title.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void titlechange(Ext.panel.Panel p, JsString newTitle, JsString oldTitle, object eOpts){}
        public PanelEvents(params object[] args){}
    }
    #endregion
}
