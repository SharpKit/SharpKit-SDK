//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.view
{
    #region Table
    /// <inheritdocs />
    /// <summary>
    /// <p>This class encapsulates the user interface for a tabular data set.
    /// It acts as a centralized manager for controlling the various interface
    /// elements of the view. This includes handling events, such as row and cell
    /// level based DOM events. It also reacts to events from the underlying <see cref="Ext.selection.Model">Ext.selection.Model</see>
    /// to provide visual feedback to the user.</p>
    /// <p>This class does not provide ways to manipulate the underlying data of the configured
    /// <see cref="Ext.data.Store">Ext.data.Store</see>.</p>
    /// <p>This is the base class for both <see cref="Ext.grid.View">Ext.grid.View</see> and <see cref="Ext.tree.View">Ext.tree.View</see> and is not
    /// to be used directly.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Table : Ext.view.View
    {
        /// <summary>
        /// True to enable text selections.
        /// </summary>
        public bool enableTextSelection;
        /// <summary>
        /// A CSS class to add to the first cell in every row to enable special styling for the first column.
        /// If no styling is needed on the first column, this may be configured as null.
        /// Defaults to: <c>&quot;x-grid-cell-first&quot;</c>
        /// </summary>
        public JsString firstCls;
        /// <summary>
        /// A CSS class to add to the last cell in every row to enable special styling for the last column.
        /// If no styling is needed on the last column, this may be configured as null.
        /// Defaults to: <c>&quot;x-grid-cell-last&quot;</c>
        /// </summary>
        public JsString lastCls;
        /// <summary>
        /// True to show the dirty cell indicator when a cell has been modified.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool markDirty;
        /// <summary>
        /// True to stripe the rows.
        /// This causes the CSS class <strong><c>x-grid-row-alt</c></strong> to be added to alternate rows of
        /// the grid. A default CSS rule is provided which sets a background color, but you can override this
        /// with a rule which either overrides the <strong>background-color</strong> style using the <c>!important</c>
        /// modifier, or which uses a CSS selector of higher specificity.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool stripeRows;
        /// <summary>
        /// Simple initial tpl for TableView just to satisfy the validation within AbstractView.initComponent.
        /// Defaults to: <c>&quot;&lt;div&gt;&lt;/div&gt;&quot;</c>
        /// </summary>
        private JsString initialTpl{get;set;}
        /// <summary>
        /// A flyweight Ext.Element which encapsulates a reference to the transient &lt;table&gt; element within this View.
        /// Note that the dom reference will not be present until the first data refresh
        /// </summary>
        private Ext.dom.AbstractElement.Fly table{get;set;}
        /// <summary>
        /// Add a listener to the main view element. It will be destroyed with the view.
        /// </summary>
        /// <param name="eventName">
        /// </param>
        /// <param name="fn">
        /// </param>
        /// <param name="scope">
        /// </param>
        private void addElListener(object eventName, System.Delegate fn, object scope){}
        /// <summary>
        /// Adds a CSS Class to a specific row.
        /// </summary>
        /// <param name="rowInfo"><p>An HTMLElement, index or instance of a model
        /// representing this row</p>
        /// </param>
        /// <param name="cls">
        /// </param>
        public void addRowCls(object rowInfo, JsString cls){}
        /// <summary>
        /// Gives features an injection point to attach events to the markup that
        /// has been created for this view.
        /// </summary>
        private void attachEventsForFeatures(){}
        /// <summary>
        /// Converts the features array as configured, into an array of instantiated Feature objects.
        /// This is borrowed by Lockable which clones and distributes Features to both child grids of a locking grid.
        /// Must have no side effects other than Feature instantiation.
        /// MUST NOT update the this.features property, and MUST NOT update the instantiated Features.
        /// </summary>
        private void constructFeatures(){}
        /// <summary>
        /// Stripes rows from a particular row index.
        /// </summary>
        /// <param name="startRow">
        /// </param>
        /// <param name="endRow"><p>argument specifying the last row to process.
        /// By default process up to the last row.</p>
        /// </param>
        private void doStripeRows(JsNumber startRow, object endRow=null){}
        /// <summary>
        /// Expands a particular header to fit the max content width.
        /// This will ONLY expand, not contract.
        /// </summary>
        /// <param name="header">
        /// </param>
        private void expandToFit(object header){}
        /// <summary>
        /// Focuses a particular row and brings it into view. Will fire the rowfocus event.
        /// </summary>
        /// <param name="rowIdx"><p>An HTMLElement template node, index of a template node, the id of a template node or the
        /// record associated with the node.</p>
        /// </param>
        public void focusRow(object rowIdx){}
        /// <summary>
        /// Get the cell (td) for a particular record and column.
        /// </summary>
        /// <param name="record">
        /// </param>
        /// <param name="column">
        /// </param>
        private void getCell(Ext.data.Model record, Ext.grid.column.Column column){}
        /// <summary>
        /// Get a reference to a feature
        /// </summary>
        /// <param name="id"><p>The id of the feature</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.grid.feature.Feature">Ext.grid.feature.Feature</see></span><div><p>The feature. Undefined if not found</p>
        /// </div>
        /// </returns>
        public Ext.grid.feature.Feature getFeature(JsString id){return null;}
        /// <summary>
        /// Get the columns used for generating a template via TableChunker.
        /// See Ext.grid.header.Container.getGridColumns.
        /// </summary>
        private void getGridColumns(){}
        /// <summary>
        /// Get a leaf level header by index regardless of what the nesting
        /// structure is.
        /// </summary>
        /// <param name="index"><p>The index</p>
        /// </param>
        private void getHeaderAtIndex(JsNumber index){}
        /// <summary>
        /// Determines the 'gap' between the closest adjacent header to the left
        /// that is not hidden.
        /// </summary>
        /// <param name="activeHeader">
        /// </param>
        private void getLeftGap(object activeHeader){}
        /// <summary>
        /// Returns the max contentWidth of the header's text and all cells
        /// in the grid under this header.
        /// </summary>
        /// <param name="header">
        /// </param>
        private void getMaxContentWidth(object header){}
        /// <summary>
        /// Determines the 'gap' between the closest adjacent header to the right
        /// that is not hidden.
        /// </summary>
        /// <param name="activeHeader">
        /// </param>
        private void getRightGap(object activeHeader){}
        /// <summary>
        /// Override this function to apply custom CSS classes to rows during rendering. This function should return the
        /// CSS class name (or empty string '' for none) that will be added to the row's wrapping div. To apply multiple
        /// class names, simply return them space-delimited within the string (e.g. 'my-class another-class').
        /// Example usage:
        /// <code>viewConfig: {
        /// getRowClass: function(record, rowIndex, rowParams, store){
        /// return record.get("valid") ? "row-valid" : "row-error";
        /// }
        /// }
        /// </code>
        /// </summary>
        /// <param name="record"><p>The record corresponding to the current row.</p>
        /// </param>
        /// <param name="index"><p>The row index.</p>
        /// </param>
        /// <param name="rowParams"><p><strong>DEPRECATED.</strong> For row body use the
        /// <see cref="Ext.grid.feature.RowBody.getAdditionalData">getAdditionalData</see> method of the rowbody feature.</p>
        /// </param>
        /// <param name="store"><p>The store this grid is bound to</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>a CSS class name to add to the row.</p>
        /// </div>
        /// </returns>
        public JsString getRowClass(Ext.data.Model record, JsNumber index, object rowParams, Ext.data.Store store){return null;}
        /// <summary>
        /// Returns the configured chunker or default of Ext.view.TableChunker
        /// </summary>
        public void getTableChunker(){}
        /// <summary>
        /// Initializes each feature and bind it to this view.
        /// </summary>
        /// <param name="grid">
        /// </param>
        private void initFeatures(object grid){}
        /// <summary>
        /// Move a grid column from one position to another
        /// </summary>
        /// <param name="fromIdx"><p>The index from which to move columns</p>
        /// </param>
        /// <param name="toIdx"><p>The index at which to insert columns.</p>
        /// </param>
        /// <param name="colsToMove"><p>The number of columns to move beginning at the <c>fromIdx</c></p>
        /// <p>Defaults to: <c>1</c></p></param>
        private void moveColumn(JsNumber fromIdx, JsNumber toIdx, object colsToMove=null){}
        /// <summary>
        /// Removes a CSS Class from a specific row.
        /// </summary>
        /// <param name="rowInfo"><p>An HTMLElement, index or instance of a model
        /// representing this row</p>
        /// </param>
        /// <param name="cls">
        /// </param>
        public void removeRowCls(object rowInfo, JsString cls){}
        /// <summary>
        /// Scrolls by delta. This affects this individual view ONLY and does not
        /// synchronize across views or scrollers.
        /// </summary>
        /// <param name="delta">
        /// </param>
        /// <param name="dir"><p>Valid values are scrollTop and scrollLeft. Defaults to scrollTop.</p>
        /// </param>
        private void scrollByDelta(JsNumber delta, object dir=null){}
        /// <summary>
        /// Set a new template based on the current columns displayed in the grid.
        /// </summary>
        private void setNewTemplate(){}
        /// <summary>
        /// Parameters<li><span>position</span> : <see cref="Object">Object</see><div><p>The current row and column: an object containing the following properties:</p>
        /// <ul>
        /// <li>row - The row index</li>
        /// <li>column - The column index</li>
        /// </ul>
        /// </div></li><li><span>direction</span> : <see cref="String">String</see><div><p>'up', 'down', 'right' and 'left'</p>
        /// </div></li><li><span>e</span> : <see cref="Ext.EventObject">Ext.EventObject</see><div><p>event</p>
        /// </div></li><li><span>preventWrap</span> : <see cref="bool">Boolean</see><div><p>Set to true to prevent wrap around to the next or previous row.</p>
        /// </div></li><li><span>verifierFn</span> : <see cref="Function">Function</see><div><p>A function to verify the validity of the calculated position.
        /// When using this function, you must return true to allow the newPosition to be returned.</p>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div><p>Scope to run the verifierFn in</p>
        /// </div></li>
        /// </summary>
        /// <param name="position"><p>The current row and column: an object containing the following properties:</p>
        /// <ul>
        /// <li>row - The row index</li>
        /// <li>column - The column index</li>
        /// </ul>
        /// </param>
        /// <param name="direction"><p>'up', 'down', 'right' and 'left'</p>
        /// </param>
        /// <param name="e"><p>event</p>
        /// </param>
        /// <param name="preventWrap"><p>Set to true to prevent wrap around to the next or previous row.</p>
        /// </param>
        /// <param name="verifierFn"><p>A function to verify the validity of the calculated position.
        /// When using this function, you must return true to allow the newPosition to be returned.</p>
        /// </param>
        /// <param name="scope"><p>Scope to run the verifierFn in</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>newPosition An object containing the following properties:</p>
        /// <ul>
        /// <li>row - The row index</li>
        /// <li>column - The column index</li>
        /// </ul>
        /// </div>
        /// </returns>
        private object walkCells(object position, JsString direction, EventObject e, bool preventWrap, System.Delegate verifierFn, object scope){return null;}
        public Table(Ext.view.TableConfig config){}
        public Table(){}
        public Table(params object[] args){}
    }
    #endregion
    #region TableConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TableConfig : Ext.view.ViewConfig
    {
        /// <summary>
        /// True to enable text selections.
        /// </summary>
        public bool enableTextSelection;
        /// <summary>
        /// A CSS class to add to the first cell in every row to enable special styling for the first column.
        /// If no styling is needed on the first column, this may be configured as null.
        /// Defaults to: <c>&quot;x-grid-cell-first&quot;</c>
        /// </summary>
        public JsString firstCls;
        /// <summary>
        /// A CSS class to add to the last cell in every row to enable special styling for the last column.
        /// If no styling is needed on the last column, this may be configured as null.
        /// Defaults to: <c>&quot;x-grid-cell-last&quot;</c>
        /// </summary>
        public JsString lastCls;
        /// <summary>
        /// True to show the dirty cell indicator when a cell has been modified.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool markDirty;
        /// <summary>
        /// True to stripe the rows.
        /// This causes the CSS class <strong><c>x-grid-row-alt</c></strong> to be added to alternate rows of
        /// the grid. A default CSS rule is provided which sets a background color, but you can override this
        /// with a rule which either overrides the <strong>background-color</strong> style using the <c>!important</c>
        /// modifier, or which uses a CSS selector of higher specificity.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool stripeRows;
        public TableConfig(params object[] args){}
    }
    #endregion
    #region TableEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TableEvents : Ext.view.ViewEvents
    {
        public TableEvents(params object[] args){}
    }
    #endregion
}
