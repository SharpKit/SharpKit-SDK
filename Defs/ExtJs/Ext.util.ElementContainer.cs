//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region ElementContainer
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>This mixin enables classes to declare relationships to child elements and provides the
    /// mechanics for acquiring the <see cref="Ext.dom.Element">elements</see> and storing them on an object
    /// instance as properties.</p>
    /// <p>This class is used by <see cref="Ext.Component">components</see> and <see cref="Ext.layout.container.Container">container layouts</see> to
    /// manage their child elements.</p>
    /// <p>A typical component that uses these features might look something like this:</p>
    /// <pre><code> <see cref="Ext.ExtContext.define">Ext.define</see>('Ext.ux.SomeComponent', {
    /// extend: '<see cref="Ext.Component">Ext.Component</see>',
    /// childEls: [
    /// 'bodyEl'
    /// ],
    /// renderTpl: [
    /// '&lt;div id="{id}-bodyEl"&gt;&lt;/div&gt;'
    /// ],
    /// // ...
    /// });
    /// </code></pre>
    /// <p>The <c>childEls</c> array lists one or more relationships to child elements managed by the
    /// component. The items in this array can be either of the following types:</p>
    /// <ul>
    /// <li>String: the id suffix and property name in one. For example, "bodyEl" in the above
    /// example means a "bodyEl" property will be added to the instance with the result of
    /// <see cref="Ext.ExtContext.get">Ext.get</see> given "componentId-bodyEl" where "componentId" is the component instance's
    /// id.</li>
    /// <li>Object: with a <c>name</c> property that names the instance property for the element, and
    /// one of the following additional properties:
    /// <ul>
    /// <li> <c>id</c>: The full id of the child element.</li>
    /// <li> <c>itemId</c>: The suffix part of the id to which "componentId-" is prepended.</li>
    /// <li> <c>select</c>: A selector that will be passed to <see cref="Ext.ExtContext.select">Ext.select</see>.</li>
    /// <li> <c>selectNode</c>: A selector that will be passed to <see cref="Ext.dom.Query.selectNode">Ext.DomQuery.selectNode</see>.</li>
    /// </ul>
    /// </li>
    /// </ul>
    /// <p>The example above could have used this instead to achieve the same result:</p>
    /// <pre><code> childEls: [
    /// { name: 'bodyEl', itemId: 'bodyEl' }
    /// ]
    /// </code></pre>
    /// <p>When using <c>select</c>, the property will be an instance of <see cref="Ext.dom.CompositeElement">Ext.CompositeElement</see>. In
    /// all other cases, the property will be an <see cref="Ext.dom.Element">Ext.Element</see> or <c>null</c> if not found.</p>
    /// <p>Care should be taken when using <c>select</c> or <c>selectNode</c> to find child elements. The
    /// following issues should be considered:</p>
    /// <ul>
    /// <li>Performance: using selectors can be slower than id lookup by a factor 10x or more.</li>
    /// <li>Over-selecting: selectors are applied after the DOM elements for all children have
    /// been rendered, so selectors can match elements from child components (including nested
    /// versions of the same component) accidentally.</li>
    /// </ul>
    /// <p>This above issues are most important when using <c>select</c> since it returns multiple
    /// elements.</p>
    /// <p><strong>IMPORTANT</strong>
    /// Unlike a <c>renderTpl</c> where there is a single value for an instance, <c>childEls</c> are aggregated
    /// up the class hierarchy so that they are effectively inherited. In other words, if a
    /// class where to derive from <c>Ext.ux.SomeComponent</c> in the example above, it could also
    /// have a <c>childEls</c> property in the same way as <c>Ext.ux.SomeComponent</c>.</p>
    /// <pre><code> <see cref="Ext.ExtContext.define">Ext.define</see>('Ext.ux.AnotherComponent', {
    /// extend: 'Ext.ux.SomeComponent',
    /// childEls: [
    /// // 'bodyEl' is inherited
    /// 'innerEl'
    /// ],
    /// renderTpl: [
    /// '&lt;div id="{id}-bodyEl"&gt;'
    /// '&lt;div id="{id}-innerEl"&gt;&lt;/div&gt;'
    /// '&lt;/div&gt;'
    /// ],
    /// // ...
    /// });
    /// </code></pre>
    /// <p>The <c>renderTpl</c> contains both child elements and unites them in the desired markup, but
    /// the <c>childEls</c> only contains the new child element. The <see cref="Ext.util.ElementContainer">applyChildEls</see> method
    /// takes care of looking up all <c>childEls</c> for an instance and considers <c>childEls</c>
    /// properties on all the super classes and mixins.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial interface ElementContainer
    {
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        JsString @className{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject configMap{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        bool isInstance{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        Class self{get;set;}
        /// <summary>
        /// Adds each argument passed to this method to the childEls array.
        /// </summary>
        void addChildEls();
        /// <summary>
        /// Sets references to elements inside the component.
        /// </summary>
        /// <param name="el">
        /// </param>
        /// <param name="id">
        /// </param>
        void applyChildEls(object el, object id);
        /// <summary>
        /// Removes items in the childEls array based on the return value of a supplied test
        /// function. The function is called with a entry in childEls and if the test function
        /// return true, that entry is removed. If false, that entry is kept.
        /// </summary>
        /// <param name="testFn"><p>The test function.</p>
        /// </param>
        void removeChildEls(System.Delegate testFn);
    }
    #endregion
    #region ElementContainerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ElementContainerConfig : Ext.BaseConfig
    {
        public ElementContainerConfig(params object[] args){}
    }
    #endregion
    #region ElementContainerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ElementContainerEvents : Ext.BaseEvents
    {
        public ElementContainerEvents(params object[] args){}
    }
    #endregion
}
