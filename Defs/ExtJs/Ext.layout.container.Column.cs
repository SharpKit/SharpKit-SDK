//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.layout.container
{
    #region Column
    /// <inheritdocs />
    /// <summary>
    /// <p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of each
    /// column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content. This
    /// class is intended to be extended or created via the layout:'column' <see cref="Ext.container.ContainerConfig.layout">Ext.container.Container.layout</see> config,
    /// and should generally not need to be created directly via the new keyword.</p>
    /// <p>ColumnLayout does not have any direct config options (other than inherited ones), but it does support a specific
    /// config property of <c>columnWidth</c> that can be included in the config of any panel added to it. The layout will use
    /// the columnWidth (if present) or width of each panel during layout to determine how to size each panel. If width or
    /// columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).</p>
    /// <p>The width property is always evaluated as pixels, and must be a number greater than or equal to 1. The columnWidth
    /// property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than 1 (e.g., .25).</p>
    /// <p>The basic rules for specifying column widths are pretty simple. The logic makes two passes through the set of
    /// contained panels. During the first layout pass, all panels that either have a fixed width or none specified (auto)
    /// are skipped, but their widths are subtracted from the overall container width.</p>
    /// <p>During the second pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages
    /// based on the total <strong>remaining</strong> container width. In other words, percentage width panels are designed to fill
    /// the space left over by all the fixed-width and/or auto-width panels. Because of this, while you can specify any
    /// number of columns with different percentages, the columnWidths must always add up to 1 (or 100%) when added
    /// together, otherwise your layout may not render as expected.</p>
    /// <pre><code>// All columns are percentages -- they must add up to 1
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// title: 'Column Layout - Percentage Only',
    /// width: 350,
    /// height: 250,
    /// layout:'column',
    /// items: [{
    /// title: 'Column 1',
    /// columnWidth: 0.25
    /// },{
    /// title: 'Column 2',
    /// columnWidth: 0.55
    /// },{
    /// title: 'Column 3',
    /// columnWidth: 0.20
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// // Mix of width and columnWidth -- all columnWidth values must add up
    /// // to 1. The first column will take up exactly 120px, and the last two
    /// // columns will fill the remaining container width.
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.Panel</see>', {
    /// title: 'Column Layout - Mixed',
    /// width: 350,
    /// height: 250,
    /// layout:'column',
    /// items: [{
    /// title: 'Column 1',
    /// width: 120
    /// },{
    /// title: 'Column 2',
    /// columnWidth: 0.7
    /// },{
    /// title: 'Column 3',
    /// columnWidth: 0.3
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Column : Ext.layout.container.Container
    {
        public Column(Ext.layout.container.ColumnConfig config){}
        public Column(){}
        public Column(params object[] args){}
    }
    #endregion
    #region ColumnConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ColumnConfig : Ext.layout.container.ContainerConfig
    {
        public ColumnConfig(params object[] args){}
    }
    #endregion
    #region ColumnEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ColumnEvents : Ext.layout.container.ContainerEvents
    {
        public ColumnEvents(params object[] args){}
    }
    #endregion
}
