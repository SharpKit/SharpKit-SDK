//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region ModelManager
    /// <inheritdocs />
    /// <summary>
    /// <p>The ModelManager keeps track of all <see cref="Ext.data.Model">Ext.data.Model</see> types defined in your application.</p>
    /// <p><strong>Creating Model Instances</strong></p>
    /// <p>Model instances can be created by using the <see cref="Ext.ExtContext.create">Ext.create</see> method. <see cref="Ext.ExtContext.create">Ext.create</see> replaces
    /// the deprecated <see cref="Ext.ModelManager.create">Ext.ModelManager.create</see> method. It is also possible to create a model instance
    /// this by using the Model type directly. The following 3 snippets are equivalent:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['first', 'last']
    /// });
    /// // method 1, create using <see cref="Ext.ExtContext.create">Ext.create</see> (recommended)
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('User', {
    /// first: 'Ed',
    /// last: 'Spencer'
    /// });
    /// // method 2, create through the manager (deprecated)
    /// <see cref="Ext.ModelManager.create">Ext.ModelManager.create</see>({
    /// first: 'Ed',
    /// last: 'Spencer'
    /// }, 'User');
    /// // method 3, create on the type directly
    /// new User({
    /// first: 'Ed',
    /// last: 'Spencer'
    /// });
    /// </code></pre>
    /// <p><strong>Accessing Model Types</strong></p>
    /// <p>A reference to a Model type can be obtained by using the <see cref="Ext.ModelManager.getModel">getModel</see> function. Since models types
    /// are normal classes, you can access the type directly. The following snippets are equivalent:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['first', 'last']
    /// });
    /// // method 1, access model type through the manager
    /// var UserType = <see cref="Ext.ModelManager.getModel">Ext.ModelManager.getModel</see>('User');
    /// // method 2, reference the type directly
    /// var UserType = User;
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class ModelManager : AbstractManager
    {
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        private static JsString @className{get;set;}
        /// <summary>
        /// Contains all of the items currently managed
        /// </summary>
        public static Ext.util.HashMap all{get;set;}
        /// <summary>
        /// Private stack of associations that must be created once their associated model has been defined
        /// Defaults to: <c>[]</c>
        /// </summary>
        public static Ext.data.association.Association associationStack{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject configMap{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        private static bool isInstance{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        protected static Class self{get;set;}
        /// <summary>
        /// Call the original method that was previously overridden with override
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// constructor: function() {
        /// alert("I'm a cat!");
        /// }
        /// });
        /// My.Cat.override({
        /// constructor: function() {
        /// alert("I'm going to be a cat!");
        /// this.callOverridden();
        /// alert("Meeeeoooowwww");
        /// }
        /// });
        /// var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
        /// // alerts "I'm a cat!"
        /// // alerts "Meeeeoooowwww"
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// <p>as of 4.1. Use <see cref="Ext.Base.callParent">callParent</see> instead.</p>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callOverridden(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the overridden method</p>
        /// </div>
        /// </returns>
        protected static object callOverridden(object args=null){return null;}
        /// <summary>
        /// Call the "parent" method of the current method. That is the method previously
        /// overridden by derivation or by an override (see Ext.define).
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Base', {
        /// constructor: function (x) {
        /// this.x = x;
        /// },
        /// statics: {
        /// method: function (x) {
        /// return x;
        /// }
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived', {
        /// extend: 'My.Base',
        /// constructor: function () {
        /// this.callParent([21]);
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // alerts 21
        /// </code>
        /// This can be used with an override as follows:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.DerivedOverride', {
        /// override: 'My.Derived',
        /// constructor: function (x) {
        /// this.callParent([x*2]); // calls original My.Derived constructor
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // now alerts 42
        /// </code>
        /// This also works with static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2', {
        /// extend: 'My.Base',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Base.method
        /// }
        /// }
        /// });
        /// alert(My.Base.method(10);     // alerts 10
        /// alert(My.Derived2.method(10); // alerts 20
        /// </code>
        /// Lastly, it also works with overridden static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2Override', {
        /// override: 'My.Derived2',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Derived2.method
        /// }
        /// }
        /// });
        /// alert(My.Derived2.method(10); // now alerts 40
        /// </code>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callParent(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the parent method</p>
        /// </div>
        /// </returns>
        protected static object callParent(object args=null){return null;}
        /// <summary>
        /// </summary>
        private static void configClass(){}
        /// <summary>
        /// Creates a new instance of a Model using the given data. Deprecated, instead use Ext.create:
        /// <code><see cref="Ext.ExtContext.create">Ext.create</see>('User', {
        /// first: 'Ed',
        /// last: 'Spencer'
        /// });
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.1</p>
        /// <p>Use <see cref="Ext.ExtContext.create">Ext.create</see> instead.</p>
        /// </summary>
        /// <param name="data"><p>Data to initialize the Model's fields with</p>
        /// </param>
        /// <param name="name"><p>The name of the model to create</p>
        /// </param>
        /// <param name="id"><p>unique id of the Model instance (see <see cref="Ext.data.Model">Ext.data.Model</see>)</p>
        /// </param>
        public static void create(object data, JsString name, object id=null){}
        /// <summary>
        /// Overrides: <see cref="Ext.AbstractComponent.destroy">Ext.AbstractComponent.destroy</see>, <see cref="Ext.AbstractPlugin.destroy">Ext.AbstractPlugin.destroy</see>, <see cref="Ext.layout.Layout.destroy">Ext.layout.Layout.destroy</see>
        /// </summary>
        private static void destroy(){}
        /// <summary>
        /// Executes the specified function once for each item in the collection.
        /// </summary>
        /// <param name="fn"><p>The function to execute.</p>
        /// <h3>Parameters</h3><ul><li><span>key</span> : <see cref="String">String</see><div><p>The key of the item</p>
        /// </div></li><li><span>value</span> : <see cref="Number">Number</see><div><p>The value of the item</p>
        /// </div></li><li><span>length</span> : <see cref="Number">Number</see><div><p>The total number of items in the collection</p>
        /// </div></li></ul><h3>Returns</h3><ul><li><span><see cref="bool">Boolean</see></span><div><p>False to cease iteration.</p>
        /// </div></li></ul></param>
        /// <param name="scope"><p>The scope to execute in. Defaults to <c>this</c>.</p>
        /// </param>
        public static void each(System.Delegate fn, object scope){}
        /// <summary>
        /// Returns an item by id.
        /// For additional details see Ext.util.HashMap.get.
        /// </summary>
        /// <param name="id"><p>The id of the item</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The item, undefined if not found.</p>
        /// </div>
        /// </returns>
        public static object get(JsString id){return null;}
        /// <summary>
        /// Parameters<li><span>name</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="name">
        /// </param>
        private static void getConfig(object name){}
        /// <summary>
        /// Gets the number of items in the collection.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The number of items in the collection.</p>
        /// </div>
        /// </returns>
        public static JsNumber getCount(){return null;}
        /// <summary>
        /// Returns the initial configuration passed to constructor when instantiating
        /// this class.
        /// </summary>
        /// <param name="name"><p>Name of the config option to return.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see>/Mixed</span><div><p>The full config object or a single config value
        /// when <c>name</c> parameter specified.</p>
        /// </div>
        /// </returns>
        public static object getInitialConfig(object name=null){return null;}
        /// <summary>
        /// Returns the Ext.data.Model for a given model name
        /// </summary>
        /// <param name="id"><p>The id of the model or the model instance.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see></span><div><p>a model class.</p>
        /// </div>
        /// </returns>
        public static Ext.data.Model getModel(object id){return null;}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        private static void hasConfig(object config){}
        /// <summary>
        /// Initialize configuration for this class. a typical example:
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.awesome.Class', {
        /// // The default config
        /// config: {
        /// name: 'Awesome',
        /// isAwesome: true
        /// },
        /// constructor: function(config) {
        /// this.initConfig(config);
        /// }
        /// });
        /// var awesome = new My.awesome.Class({
        /// name: 'Super Awesome'
        /// });
        /// alert(awesome.getName()); // 'Super Awesome'
        /// </code>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Base">Ext.Base</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        protected static Ext.Base initConfig(object config){return null;}
        /// <summary>
        /// Checks if an item type is registered.
        /// </summary>
        /// <param name="type"><p>The mnemonic string by which the class may be looked up</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>Whether the type is registered.</p>
        /// </div>
        /// </returns>
        public static bool isRegistered(JsString type){return false;}
        /// <summary>
        /// Registers a function that will be called when an item with the specified id is added to the manager.
        /// This will happen on instantiation.
        /// </summary>
        /// <param name="id"><p>The item id</p>
        /// </param>
        /// <param name="fn"><p>The callback function. Called with a single parameter, the item.</p>
        /// </param>
        /// <param name="scope"><p>The scope (this reference) in which the callback is executed.
        /// Defaults to the item.</p>
        /// </param>
        public static void onAvailable(JsString id, System.Delegate fn, object scope){}
        /// <summary>
        /// Parameters<li><span>names</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>callback</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="names">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        private static void onConfigUpdate(object names, object callback, object scope){}
        /// <summary>
        /// Private callback called whenever a model has just been defined. This sets up any associations
        /// that were waiting for the given model to be defined
        /// </summary>
        /// <param name="model"><p>The model that was just created</p>
        /// </param>
        private static void onModelDefined(System.Delegate model){}
        /// <summary>
        /// Registers an item to be managed
        /// </summary>
        /// <param name="item"><p>The item to register</p>
        /// </param>
        public static void register(object item){}
        /// <summary>
        /// Registers an association where one of the models defined doesn't exist yet.
        /// The ModelManager will check when new models are registered if it can link them
        /// together
        /// </summary>
        /// <param name="association"><p>The association</p>
        /// </param>
        private static void registerDeferredAssociation(Ext.data.association.Association association){}
        /// <summary>
        /// Registers a model definition. All model plugins marked with isDefault: true are bootstrapped
        /// immediately, as are any addition plugins defined in the model config.
        /// </summary>
        /// <param name="name">
        /// </param>
        /// <param name="config">
        /// </param>
        private static void registerType(object name, object config){}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>applyIfNotSet</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <param name="applyIfNotSet">
        /// </param>
        private static void setConfig(object config, object applyIfNotSet){}
        /// <summary>
        /// Get the reference to the class from which this object was instantiated. Note that unlike self,
        /// this.statics() is scope-independent and it always returns the class from which it was called, regardless of what
        /// this points to during run-time
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// totalCreated: 0,
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// var statics = this.statics();
        /// alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
        /// // equivalent to: My.Cat.speciesName
        /// alert(this.self.speciesName);   // dependent on 'this'
        /// statics.totalCreated++;
        /// },
        /// clone: function() {
        /// var cloned = new this.self;                      // dependent on 'this'
        /// cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
        /// return cloned;
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// },
        /// constructor: function() {
        /// this.callParent();
        /// }
        /// });
        /// var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));         // alerts 'My.SnowLeopard'
        /// alert(clone.groupName);                 // alerts 'Cat'
        /// alert(My.Cat.totalCreated);             // alerts 3
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Class">Ext.Class</see></span><div>
        /// </div>
        /// </returns>
        protected static Class statics(){return null;}
        /// <summary>
        /// Unregisters an item by removing it from this manager
        /// </summary>
        /// <param name="item"><p>The item to unregister</p>
        /// </param>
        public static void unregister(object item){}
        public ModelManager(ModelManagerConfig config){}
        public ModelManager(){}
        public ModelManager(params object[] args){}
    }
    #endregion
    #region ModelManagerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ModelManagerConfig : AbstractManagerConfig
    {
        public ModelManagerConfig(params object[] args){}
    }
    #endregion
    #region ModelManagerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ModelManagerEvents : AbstractManagerEvents
    {
        public ModelManagerEvents(params object[] args){}
    }
    #endregion
}
