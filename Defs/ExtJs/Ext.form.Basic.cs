//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form
{
    #region Basic
    /// <summary>
    /// <p>Provides input field management, validation, submission, and form loading services for the collection
    /// of <see cref="Ext.form.field.Field">Field</see> instances within a <see cref="Ext.container.Container">Ext.container.Container</see>. It is recommended
    /// that you use a <see cref="Ext.form.Panel">Ext.form.Panel</see> as the form container, as that has logic to automatically
    /// hook up an instance of <see cref="Ext.form.Basic">Ext.form.Basic</see> (plus other conveniences related to field configuration.)</p>
    /// <h2>Form Actions</h2>
    /// <p>The Basic class delegates the handling of form loads and submits to instances of <see cref="Ext.form.action.Action">Ext.form.action.Action</see>.
    /// See the various Action implementations for specific details of each one's functionality, as well as the
    /// documentation for <see cref="Ext.form.Basic.doAction">doAction</see> which details the configuration options that can be specified in
    /// each action call.</p>
    /// <p>The default submit Action is <see cref="Ext.form.action.Submit">Ext.form.action.Submit</see>, which uses an Ajax request to submit the
    /// form's values to a configured URL. To enable normal browser submission of an Ext form, use the
    /// <see cref="Ext.form.BasicConfig.standardSubmit">standardSubmit</see> config option.</p>
    /// <h2>File uploads</h2>
    /// <p>File uploads are not performed using normal 'Ajax' techniques; see the description for
    /// <see cref="Ext.form.Basic.hasUpload">hasUpload</see> for details. If you're using file uploads you should read the method description.</p>
    /// <h2>Example usage:</h2>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'Basic Form',
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// bodyPadding: 5,
    /// width: 350,
    /// // Any configuration items here will be automatically passed along to
    /// // the <see cref="Ext.form.Basic">Ext.form.Basic</see> instance when it gets created.
    /// // The form will submit an AJAX request to this URL when submitted
    /// url: 'save-form.php',
    /// items: [{
    /// xtype: 'textfield',
    /// fieldLabel: 'Field',
    /// name: 'theField'
    /// }],
    /// buttons: [{
    /// text: 'Submit',
    /// handler: function() {
    /// // The getForm() method returns the <see cref="Ext.form.Basic">Ext.form.Basic</see> instance:
    /// var form = this.up('form').getForm();
    /// if (form.isValid()) {
    /// // Submit the Ajax request and handle the response
    /// form.submit({
    /// success: function(form, action) {
    /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Success', action.result.message);
    /// },
    /// failure: function(form, action) {
    /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Failed', action.result ? action.result.message : 'No response');
    /// }
    /// });
    /// }
    /// }
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Basic : Ext.util.Observable
    {
        /// <summary>
        /// If specified, load and submit actions will be handled with DirectLoad
        /// and DirectSubmit.  Methods which have been imported by
        /// Ext.direct.Manager can be specified here to load and submit forms. API methods may also be
        /// specified as strings. See Ext.data.proxy.Direct.directFn.  Such as the following:
        /// <code>api: {
        /// load: App.ss.MyProfile.load,
        /// submit: App.ss.MyProfile.submit
        /// }
        /// </code>
        /// Load actions can use <see cref="Ext.form.BasicConfig.paramOrder">paramOrder</see> or <see cref="Ext.form.BasicConfig.paramsAsHash">paramsAsHash</see> to customize how the load method
        /// is invoked.  Submit actions will always use a standard form submit. The <c>formHandler</c> configuration
        /// (see Ext.direct.RemotingProvider#action) must be set on the associated server-side method which has
        /// been imported by <see cref="Ext.direct.Manager">Ext.direct.Manager</see>.
        /// </summary>
        public JsObject api;
        /// <summary>
        /// Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.
        /// Parameters are encoded as standard HTTP parameters using <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>.
        /// </summary>
        public JsObject baseParams;
        /// <summary>
        /// An Ext.data.DataReader (e.g. Ext.data.reader.Xml) to be used to
        /// read field error messages returned from 'submit' actions. This is optional
        /// as there is built-in support for processing JSON responses.
        /// The Records which provide messages for the invalid Fields must use the
        /// Field name (or id) as the Record ID, and must contain a field called 'msg'
        /// which contains the error message.
        /// The errorReader does not have to be a full-blown implementation of a
        /// Reader. It simply needs to implement a <c>read(xhr)</c> function
        /// which returns an Array of Records in an object with the following
        /// structure:
        /// <code>{
        /// records: recordArray
        /// }
        /// </code>
        /// </summary>
        public Ext.data.reader.Reader errorReader;
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. This
        /// should be a valid listeners config object as specified in the addListener example for attaching multiple
        /// handlers at once.
        /// <strong>DOM events from Ext JS <see cref="Ext.Component">Components</see></strong>
        /// While <em>some</em> Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
        /// only done when extra value can be added. For example the <see cref="Ext.view.View">DataView</see>'s <strong><c><see cref="Ext.view.ViewEvents.itemclick">itemclick</see></c></strong> event passing the node clicked on. To access DOM events directly from a
        /// child element of a Component, we need to specify the <c>element</c> option to identify the Component property to add a
        /// DOM listener to:
        /// <code>new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// width: 400,
        /// height: 200,
        /// dockedItems: [{
        /// xtype: 'toolbar'
        /// }],
        /// listeners: {
        /// click: {
        /// element: 'el', //bind to the underlying el property on the panel
        /// fn: function(){ console.log('click el'); }
        /// },
        /// dblclick: {
        /// element: 'body', //bind to the underlying body property on the panel
        /// fn: function(){ console.log('dblclick body'); }
        /// }
        /// }
        /// });
        /// </code>
        /// </summary>
        public JsObject listeners;
        /// <summary>
        /// The request method to use (GET or POST) for form actions if one isn't supplied in the action options.
        /// </summary>
        public JsString method;
        /// <summary>
        /// A list of params to be executed server side. Only used for the api load
        /// configuration.
        /// Specify the params in the order in which they must be executed on the
        /// server-side as either (1) an Array of String values, or (2) a String of params
        /// delimited by either whitespace, comma, or pipe. For example,
        /// any of the following would be acceptable:
        /// <code>paramOrder: ['param1','param2','param3']
        /// paramOrder: 'param1 param2 param3'
        /// paramOrder: 'param1,param2,param3'
        /// paramOrder: 'param1|param2|param'
        /// </code>
        /// </summary>
        public object paramOrder;
        /// <summary>
        /// Only used for the api load configuration. If true, parameters will be sent as a
        /// single hash collection of named arguments. Providing a paramOrder nullifies this
        /// configuration.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool paramsAsHash;
        /// <summary>
        /// An Ext.data.DataReader (e.g. Ext.data.reader.Xml) to be used to read
        /// data when executing 'load' actions. This is optional as there is built-in
        /// support for processing JSON responses.
        /// </summary>
        public Ext.data.reader.Reader reader;
        /// <summary>
        /// If set to true, a standard HTML form submit is used instead of a XHR (Ajax) style form submission.
        /// All of the field values, plus any additional params configured via baseParams
        /// and/or the options to submit, will be included in the values submitted in the form.
        /// </summary>
        public bool standardSubmit;
        /// <summary>
        /// Timeout for form actions in seconds.
        /// Defaults to: <c>30</c>
        /// </summary>
        public JsNumber timeout;
        /// <summary>
        /// If set to true, reset() resets to the last loaded or setValues() data instead of
        /// when the form was first created.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool trackResetOnLoad;
        /// <summary>
        /// The URL to use for form actions if one isn't supplied in the
        /// doAction options.
        /// </summary>
        public JsString url;
        /// <summary>
        /// By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific
        /// element by passing it or its id or mask the form itself by passing in true.
        /// </summary>
        public object waitMsgTarget;
        /// <summary>
        /// The default title to show for the waiting message box
        /// Defaults to: <c>&quot;Please Wait...&quot;</c>
        /// </summary>
        public JsString waitTitle;
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        public JsString @className{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject configMap{get;set;}
        /// <summary>
        /// Initial suspended call count. Incremented when suspendEvents is called, decremented when resumeEvents is called.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber eventsSuspended{get;set;}
        /// <summary>
        /// This object holds a key for any event that has a listener. The listener may be set
        /// directly on the instance, or on its class or a super class (via observe) or
        /// on the MVC EventBus. The values of this object are truthy
        /// (a non-zero number) and falsy (0 or undefined). They do not represent an exact count
        /// of listeners. The value for an event is truthy if the event must be fired and is
        /// falsy if there is no need to fire the event.
        /// The intended use of this property is to avoid the expense of fireEvent calls when
        /// there are no listeners. This can be particularly helpful when one would otherwise
        /// have to call fireEvent hundreds or thousands of times. It is used like this:
        /// <code> if (this.hasListeners.foo) {
        /// this.fireEvent('foo', this, arg1);
        /// }
        /// </code>
        /// </summary>
        public JsObject hasListeners{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        public JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isInstance{get;set;}
        /// <summary>
        /// true in this class to identify an object as an instantiated Observable, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isObservable{get;set;}
        /// <summary>
        /// The container component to which this BasicForm is attached.
        /// </summary>
        public Ext.container.Container owner{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        public Class self{get;set;}
        /// <summary>
        /// Creates new form.
        /// </summary>
        /// <param name="owner"><p>The component that is the container for the form, usually a <see cref="Ext.form.Panel">Ext.form.Panel</see></p>
        /// </param>
        /// <param name="config"><p>Configuration options. These are normally specified in the config to the
        /// <see cref="Ext.form.Panel">Ext.form.Panel</see> constructor, which passes them along to the BasicForm automatically.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public Basic(Ext.container.Container owner, object config){}
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire.
        /// </summary>
        /// <param name="eventNames"><p>Either an object with event names as properties with
        /// a value of <c>true</c>. For example:</p>
        /// <pre><code>this.addEvents({
        /// storeloaded: true,
        /// storecleared: true
        /// });
        /// </code></pre>
        /// <p>Or any number of event names as separate parameters. For example:</p>
        /// <pre><code>this.addEvents('storeloaded', 'storecleared');
        /// </code></pre>
        /// </param>
        public virtual void addEvents(object eventNames){}
        /// <summary>
        /// Appends an event handler to this object.  For example:
        /// <code>myGridPanel.on("mouseover", this.onMouseOver, this);
        /// </code>
        /// The method also allows for a single argument to be passed which is a config object
        /// containing properties which specify multiple events. For example:
        /// <code>myGridPanel.on({
        /// cellClick: this.onCellClick,
        /// mouseover: this.onMouseOver,
        /// mouseout: this.onMouseOut,
        /// scope: this // Important. Ensure "this" is correct during handler execution
        /// });
        /// </code>
        /// One can also specify options for each event handler separately:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: this.onCellClick, scope: this, single: true},
        /// mouseover: {fn: panel.onMouseOver, scope: panel}
        /// });
        /// </code>
        /// <em>Names</em> of methods in a specified scope may also be used. Note that
        /// <c>scope</c> MUST be specified to use this option:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: 'onCellClick', scope: this, single: true},
        /// mouseover: {fn: 'onMouseOver', scope: panel}
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventName"><p>The name of the event to listen for.
        /// May also be an object who's property names are event names.</p>
        /// </param>
        /// <param name="fn"><p>The method the event invokes, or <em>if <c>scope</c> is specified, the </em>name* of the method within
        /// the specified <c>scope</c>.  Will be called with arguments
        /// given to <see cref="Ext.util.Observable.fireEvent">fireEvent</see> plus the <c>options</c> parameter described below.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function is
        /// executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration.</p>
        /// <p><strong>Note:</strong> Unlike in ExtJS 3.x, the options object will also be passed as the last
        /// argument to every event handler.</p>
        /// <p>This object may contain any of the following properties:</p>
        /// <ul><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which the handler function is executed. <strong>If omitted,
        /// defaults to the object which fired the event.</strong></p>
        /// </div></li><li><span>delay</span> : <see cref="Number">Number</see><div><p>The number of milliseconds to delay the invocation of the handler after the event fires.</p>
        /// </div></li><li><span>single</span> : <see cref="bool">Boolean</see><div><p>True to add a handler to handle just the next firing of the event, and then remove itself.</p>
        /// </div></li><li><span>buffer</span> : <see cref="Number">Number</see><div><p>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed
        /// by the specified number of milliseconds. If the event fires again within that time,
        /// the original handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p>
        /// </div></li><li><span>target</span> : <see cref="Ext.util.Observable">Ext.util.Observable</see><div><p>Only call the handler if the event was fired on the target Observable, <em>not</em> if the event
        /// was bubbled up from a child Observable.</p>
        /// </div></li><li><span>element</span> : <see cref="String">String</see><div><p><strong>This option is only valid for listeners bound to <see cref="Ext.Component">Components</see>.</strong>
        /// The name of a Component property which references an element to add a listener to.</p>
        /// <p>  This option is useful during Component construction to add DOM event listeners to elements of
        /// <see cref="Ext.Component">Components</see> which will exist only after the Component is rendered.
        /// For example, to add a click listener to a Panel's body:</p>
        /// <pre><code>  new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// title: 'The title',
        /// listeners: {
        /// click: this.handlePanelClick,
        /// element: 'body'
        /// }
        /// });
        /// </code></pre>
        /// <p><strong>Combining Options</strong></p>
        /// <p>Using the options argument, it is possible to combine different types of listeners:</p>
        /// <p>A delayed, one-time listener.</p>
        /// <pre><code>myPanel.on('hide', this.handleClick, this, {
        /// single: true,
        /// delay: 100
        /// });
        /// </code></pre>
        /// </div></li></ul></param>
        public virtual void addListener(object eventName, System.Delegate fn=null, object scope=null, object options=null){}
        /// <summary>
        /// Adds listeners to any Observable object (or Ext.Element) which are automatically removed when this Component is
        /// destroyed.
        /// </summary>
        /// <param name="item"><p>The item to which to add a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        /// <param name="opt"><p>If the <c>ename</c> parameter was an event name, this is the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> options.</p>
        /// </param>
        public virtual void addManagedListener(object item, object ename, System.Delegate fn=null, object scope=null, object opt=null){}
        /// <summary>
        /// Called after an action is performed via doAction.
        /// </summary>
        /// <param name="action"><p>The Action instance that was invoked</p>
        /// </param>
        /// <param name="success"><p>True if the action completed successfully, false, otherwise.</p>
        /// </param>
        private void afterAction(Ext.form.action.Action action, bool success){}
        /// <summary>
        /// Calls Ext.applyIf for all field in this form with the passed object.
        /// </summary>
        /// <param name="obj"><p>The object to be applied</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic applyIfToFields(object obj){return null;}
        /// <summary>
        /// Calls Ext.apply for all fields in this form with the passed object.
        /// </summary>
        /// <param name="obj"><p>The object to be applied</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic applyToFields(object obj){return null;}
        /// <summary>
        /// Called before an action is performed via doAction.
        /// </summary>
        /// <param name="action"><p>The Action instance that was invoked</p>
        /// </param>
        private void beforeAction(Ext.form.action.Action action){}
        /// <summary>
        /// Check whether the dirty state of the entire form has changed since it was last checked, and
        /// if so fire the dirtychange event. This is automatically invoked
        /// when an individual field's dirty state changes.
        /// </summary>
        public void checkDirty(){}
        /// <summary>
        /// Check whether the validity of the entire form has changed since it was last checked, and
        /// if so fire the validitychange event. This is automatically invoked
        /// when an individual field's validity changes.
        /// </summary>
        public void checkValidity(){}
        /// <summary>
        /// Clears all invalid field messages in this form.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic clearInvalid(){return null;}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners
        /// </summary>
        public virtual void clearListeners(){}
        /// <summary>
        /// Removes all managed listeners for this object.
        /// </summary>
        public virtual void clearManagedListeners(){}
        /// <summary>
        /// Continue to fire event.
        /// </summary>
        /// <param name="eventName">
        /// </param>
        /// <param name="args">
        /// </param>
        /// <param name="bubbles">
        /// </param>
        public virtual void continueFireEvent(JsString eventName, object args=null, object bubbles=null){}
        /// <summary>
        /// Creates an event handling function which refires the event from this object as the passed event name.
        /// </summary>
        /// <param name="newName">
        /// </param>
        /// <param name="beginEnd"><p>The caller can specify on which indices to slice</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div>
        /// </div>
        /// </returns>
        public virtual System.Delegate createRelayer(object newName, object beginEnd=null){return null;}
        /// <summary>
        /// Destroys this object.
        /// Overrides: <see cref="Ext.Base.destroy">Ext.Base.destroy</see>
        /// </summary>
        public void destroy(){}
        /// <summary>
        /// Performs a predefined action (an implementation of Ext.form.action.Action) to perform application-
        /// specific processing.
        /// </summary>
        /// <param name="action"><p>The name of the predefined action type, or instance of <see cref="Ext.form.action.Action">Ext.form.action.Action</see> to perform.</p>
        /// </param>
        /// <param name="options"><p>The options to pass to the <see cref="Ext.form.action.Action">Ext.form.action.Action</see> that will get created,
        /// if the action argument is a String.</p>
        /// <p>All of the config options listed below are supported by both the <see cref="Ext.form.action.Submit">submit</see> and
        /// <see cref="Ext.form.action.Load">load</see> actions unless otherwise noted (custom actions could also accept other
        /// config options):</p>
        /// <ul><li><span>url</span> : <see cref="String">String</see><div><p>The url for the action (defaults to the form's <see cref="Ext.form.BasicConfig.url">url</see>.)</p>
        /// </div></li><li><span>method</span> : <see cref="String">String</see><div><p>The form method to use (defaults to the form's method, or POST if not defined)</p>
        /// </div></li><li><span>params</span> : <see cref="String">String</see>/<see cref="Object">Object</see><div><p>The params to pass (defaults to the form's baseParams, or none if not defined)</p>
        /// <p>Parameters are encoded as standard HTTP parameters using <see cref="Ext.ExtContext.urlEncode">Ext.Object.toQueryString</see>.</p>
        /// </div></li><li><span>headers</span> : <see cref="Object">Object</see><div><p>Request headers to set for the action.</p>
        /// </div></li><li><span>success</span> : <see cref="Function">Function</see><div><p>The callback that will be invoked after a successful response (see top of <see cref="Ext.form.action.Submit">submit</see>
        /// and <see cref="Ext.form.action.Load">load</see> for a description of what constitutes a successful response).</p>
        /// <h3>Parameters</h3><ul><li><span>form</span> : <see cref="Ext.form.Basic">Ext.form.Basic</see><div><p>The form that requested the action.</p>
        /// </div></li><li><span>action</span> : <see cref="Ext.form.action.Action">Ext.form.action.Action</see><div><p>The Action object which performed the operation.
        /// The action object contains these properties of interest:</p>
        /// <ul>
        /// <li><see cref="Ext.form.action.Action.response">response</see></li>
        /// <li><see cref="Ext.form.action.Action.result">result</see> - interrogate for custom postprocessing</li>
        /// <li><see cref="Ext.form.action.Action.type">type</see></li>
        /// </ul>
        /// </div></li></ul></div></li><li><span>failure</span> : <see cref="Function">Function</see><div><p>The callback that will be invoked after a failed transaction attempt.</p>
        /// <h3>Parameters</h3><ul><li><span>form</span> : <see cref="Ext.form.Basic">Ext.form.Basic</see><div><p>The form that requested the action.</p>
        /// </div></li><li><span>action</span> : <see cref="Ext.form.action.Action">Ext.form.action.Action</see><div><p>The Action object which performed the operation.
        /// The action object contains these properties of interest:</p>
        /// <ul>
        /// <li><see cref="Ext.form.action.Action.failureType">failureType</see></li>
        /// <li><see cref="Ext.form.action.Action.response">response</see></li>
        /// <li><see cref="Ext.form.action.Action.result">result</see> - interrogate for custom postprocessing</li>
        /// <li><see cref="Ext.form.action.Action.type">type</see></li>
        /// </ul>
        /// </div></li></ul></div></li><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope in which to call the callback functions (The this reference for the callback functions).</p>
        /// </div></li><li><span>clientValidation</span> : <see cref="bool">Boolean</see><div><p>Submit Action only. Determines whether a Form's fields are validated in a final call to <see cref="Ext.form.Basic.isValid">isValid</see> prior to submission. Set to false to prevent this. If undefined, pre-submission
        /// field validation is performed.</p>
        /// </div></li></ul></param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic doAction(object action, object options=null){return null;}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. There is no implementation in the Observable base class.
        /// This is commonly used by Ext.Components to bubble events to owner Containers.
        /// See <see cref="Ext.Component.getBubbleTarget">Ext.Component.getBubbleTarget</see>. The default implementation in <see cref="Ext.Component">Ext.Component</see> returns the
        /// Component's immediate owner. But if a known target is required, this can be overridden to access the
        /// required target more quickly.
        /// Example:
        /// <code><see cref="Ext.ExtContext.override">Ext.override</see>(<see cref="Ext.form.field.Base">Ext.form.field.Base</see>, {
        /// //  Add functionality to Field's initComponent to enable the change event to bubble
        /// initComponent : <see cref="Ext.Function.createSequence">Ext.Function.createSequence</see>(Ext.form.field.Base.prototype.initComponent, function() {
        /// this.enableBubble('change');
        /// }),
        /// //  We know that we want Field's events to bubble directly to the FormPanel.
        /// getBubbleTarget : function() {
        /// if (!this.formPanel) {
        /// this.formPanel = this.findParentByType('form');
        /// }
        /// return this.formPanel;
        /// }
        /// });
        /// var myForm = new Ext.formPanel({
        /// title: 'User Details',
        /// items: [{
        /// ...
        /// }],
        /// listeners: {
        /// change: function() {
        /// // Title goes red if form has been modified.
        /// myForm.header.setStyle('color', 'red');
        /// }
        /// }
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventNames"><p>The event name to bubble, or an Array of event names.</p>
        /// </param>
        public virtual void enableBubble(object eventNames){}
        /// <summary>
        /// Find a specific Ext.form.field.Field in this form by id or name.
        /// </summary>
        /// <param name="id"><p>The value to search for (specify either a <see cref="Ext.ComponentConfig.id">id</see> or
        /// <see cref="Ext.form.field.Field.getName">name or hiddenName</see>).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.field.Field">Ext.form.field.Field</see></span><div><p>The first matching field, or <c>null</c> if none was found.</p>
        /// </div>
        /// </returns>
        public Ext.form.field.Field findField(JsString id){return null;}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addListener).
        /// An event may be set to bubble up an Observable parent hierarchy (See <see cref="Ext.Component.getBubbleTarget">Ext.Component.getBubbleTarget</see>) by
        /// calling <see cref="Ext.util.Observable.enableBubble">enableBubble</see>.
        /// </summary>
        /// <param name="eventName"><p>The name of the event to fire.</p>
        /// </param>
        /// <param name="args"><p>Variable number of parameters are passed to handlers.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>returns false if any of the handlers return false otherwise it returns true.</p>
        /// </div>
        /// </returns>
        public virtual bool fireEvent(JsString eventName, params object[] args){return false;}
        /// <summary>
        /// Finds and returns the set of all items bound to fields inside this form
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.MixedCollection">Ext.util.MixedCollection</see></span><div><p>The set of all bound form field items</p>
        /// </div>
        /// </returns>
        private Ext.util.MixedCollection getBoundItems(){return null;}
        /// <summary>
        /// Gets the bubbling parent for an Observable
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.Observable">Ext.util.Observable</see></span><div><p>The bubble parent. null is returned if no bubble target exists</p>
        /// </div>
        /// </returns>
        public virtual Ext.util.Observable getBubbleParent(){return null;}
        /// <summary>
        /// Retrieves the fields in the form as a set of key/value pairs, using their
        /// getModelData() method to collect the values.
        /// If multiple fields return values under the same name those values will be combined into an Array.
        /// This is similar to getValues except that this method collects type-specific data values
        /// (e.g. Date objects for date fields) while getValues returns only String values for submission.
        /// </summary>
        /// <param name="dirtyOnly"><p>If true, only fields that are dirty will be included in the result.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public object getFieldValues(object dirtyOnly=null){return null;}
        /// <summary>
        /// Return all the Ext.form.field.Field components in the owner container.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.MixedCollection">Ext.util.MixedCollection</see></span><div><p>Collection of the Field objects</p>
        /// </div>
        /// </returns>
        public Ext.util.MixedCollection getFields(){return null;}
        /// <summary>
        /// Returns the last Ext.data.Model instance that was loaded via loadRecord
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see></span><div><p>The record</p>
        /// </div>
        /// </returns>
        public Ext.data.Model getRecord(){return null;}
        /// <summary>
        /// Retrieves the fields in the form as a set of key/value pairs, using their
        /// getSubmitData() method to collect the values.
        /// If multiple fields return values under the same name those values will be combined into an Array.
        /// This is similar to getFieldValues except that this method
        /// collects only String values for submission, while getFieldValues collects type-specific data
        /// values (e.g. Date objects for date fields.)
        /// </summary>
        /// <param name="asString"><p>If true, will return the key/value collection as a single
        /// URL-encoded param string.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="dirtyOnly"><p>If true, only fields that are dirty will be included in the result.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="includeEmptyText"><p>If true, the configured emptyText of empty fields will be used.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="useDataValues"><p>If true, the <see cref="Ext.form.field.Field.getModelData">getModelData</see>
        /// method is used to retrieve values from fields, otherwise the <see cref="Ext.form.field.Field.getSubmitData">getSubmitData</see>
        /// method is used.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="String">String</see>/<see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public object getValues(object asString=null, object dirtyOnly=null, object includeEmptyText=null, object useDataValues=null){return null;}
        /// <summary>
        /// Returns true if the form contains any invalid fields. No fields will be marked as invalid
        /// as a result of calling this; to trigger marking of fields use isValid instead.
        /// </summary>
        public void hasInvalidField(){}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer
        /// indicates whether the event needs firing or not.
        /// </summary>
        /// <param name="eventName"><p>The name of the event to check for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p><c>true</c> if the event is being listened for or bubbles, else <c>false</c></p>
        /// </div>
        /// </returns>
        public virtual bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Returns true if the form contains a file upload field. This is used to determine the method for submitting the
        /// form: File uploads are not performed using normal 'Ajax' techniques, that is they are not performed using
        /// XMLHttpRequests. Instead a hidden &lt;form&gt; element containing all the fields is created temporarily and submitted
        /// with its target set to refer to a dynamically generated, hidden &lt;iframe&gt; which is inserted into the document
        /// but removed after the return data has been gathered.
        /// The server response is parsed by the browser to create the document for the IFRAME. If the server is using JSON
        /// to send the return object, then the <i>Content-Type</i> header must be set to "text/html" in order to tell the
        /// browser to insert the text unchanged into the document body.
        /// Characters which are significant to an HTML parser must be sent as HTML entities, so encode <c>"&lt;"</c> as <c>"&amp;lt;"</c>,
        /// <c>"&amp;"</c> as <c>"&amp;amp;"</c> etc.
        /// The response text is retrieved from the document, and a fake XMLHttpRequest object is created containing a
        /// responseText property in order to conform to the requirements of event handlers and callbacks.
        /// Be aware that file upload packets are sent with the content type <i>multipart/form</i> and some server technologies
        /// (notably JEE) may require some custom processing in order to retrieve parameter names and parameter values from
        /// the packet content.
        /// </summary>
        public void hasUpload(){}
        /// <summary>
        /// Do any post layout initialization
        /// </summary>
        private void initialize(){}
        /// <summary>
        /// Returns true if any fields in this form have changed from their original values.
        /// Note that if this BasicForm was configured with <see cref="Ext.form.BasicConfig.trackResetOnLoad">trackResetOnLoad</see> then the
        /// Fields' <em>original values</em> are updated when the values are loaded by <see cref="Ext.form.Basic.setValues">setValues</see>
        /// or <see cref="Ext.form.Basic.loadRecord">loadRecord</see>.
        /// </summary>
        public void isDirty(){}
        /// <summary>
        /// Returns true if client-side validation on the form is successful. Any invalid fields will be
        /// marked as invalid. If you only want to determine overall form validity without marking anything,
        /// use hasInvalidField instead.
        /// </summary>
        public bool isValid(){return false;}
        /// <summary>
        /// Shortcut to do a load action.
        /// </summary>
        /// <param name="options"><p>The options to pass to the action (see <see cref="Ext.form.Basic.doAction">doAction</see> for details)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic load(object options){return null;}
        /// <summary>
        /// Loads an Ext.data.Model into this form by calling setValues with the
        /// record data.
        /// See also trackResetOnLoad.
        /// </summary>
        /// <param name="record"><p>The record to load</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic loadRecord(Ext.data.Model record){return null;}
        /// <summary>
        /// Mark fields in this form invalid in bulk.
        /// </summary>
        /// <param name="errors"><p>Either an array in the form <c>[{id:'fieldId', msg:'The message'}, ...]</c>,
        /// an object hash of <c>{id: msg, id2: msg2}</c>, or a <see cref="Ext.data.Errors">Ext.data.Errors</see> object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic markInvalid(object errors){return null;}
        /// <summary>
        /// Shorthand for addManagedListener.
        /// Adds listeners to any Observable object (or <see cref="Ext.dom.Element">Ext.Element</see>) which are automatically removed when this Component is
        /// destroyed.
        /// </summary>
        /// <param name="item"><p>The item to which to add a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        /// <param name="opt"><p>If the <c>ename</c> parameter was an event name, this is the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> options.</p>
        /// </param>
        public virtual void mon(object item, object ename, System.Delegate fn=null, object scope=null, object opt=null){}
        /// <summary>
        /// Shorthand for removeManagedListener.
        /// Removes listeners that were added by the <see cref="Ext.util.Observable.mon">mon</see> method.
        /// </summary>
        /// <param name="item"><p>The item from which to remove a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        public virtual void mun(object item, object ename, System.Delegate fn=null, object scope=null){}
        /// <summary>
        /// Shorthand for addListener.
        /// Appends an event handler to this object.  For example:
        /// <code>myGridPanel.on("mouseover", this.onMouseOver, this);
        /// </code>
        /// The method also allows for a single argument to be passed which is a config object
        /// containing properties which specify multiple events. For example:
        /// <code>myGridPanel.on({
        /// cellClick: this.onCellClick,
        /// mouseover: this.onMouseOver,
        /// mouseout: this.onMouseOut,
        /// scope: this // Important. Ensure "this" is correct during handler execution
        /// });
        /// </code>
        /// One can also specify options for each event handler separately:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: this.onCellClick, scope: this, single: true},
        /// mouseover: {fn: panel.onMouseOver, scope: panel}
        /// });
        /// </code>
        /// <em>Names</em> of methods in a specified scope may also be used. Note that
        /// <c>scope</c> MUST be specified to use this option:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: 'onCellClick', scope: this, single: true},
        /// mouseover: {fn: 'onMouseOver', scope: panel}
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventName"><p>The name of the event to listen for.
        /// May also be an object who's property names are event names.</p>
        /// </param>
        /// <param name="fn"><p>The method the event invokes, or <em>if <c>scope</c> is specified, the </em>name* of the method within
        /// the specified <c>scope</c>.  Will be called with arguments
        /// given to <see cref="Ext.util.Observable.fireEvent">fireEvent</see> plus the <c>options</c> parameter described below.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function is
        /// executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration.</p>
        /// <p><strong>Note:</strong> Unlike in ExtJS 3.x, the options object will also be passed as the last
        /// argument to every event handler.</p>
        /// <p>This object may contain any of the following properties:</p>
        /// <ul><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which the handler function is executed. <strong>If omitted,
        /// defaults to the object which fired the event.</strong></p>
        /// </div></li><li><span>delay</span> : <see cref="Number">Number</see><div><p>The number of milliseconds to delay the invocation of the handler after the event fires.</p>
        /// </div></li><li><span>single</span> : <see cref="bool">Boolean</see><div><p>True to add a handler to handle just the next firing of the event, and then remove itself.</p>
        /// </div></li><li><span>buffer</span> : <see cref="Number">Number</see><div><p>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed
        /// by the specified number of milliseconds. If the event fires again within that time,
        /// the original handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p>
        /// </div></li><li><span>target</span> : <see cref="Ext.util.Observable">Ext.util.Observable</see><div><p>Only call the handler if the event was fired on the target Observable, <em>not</em> if the event
        /// was bubbled up from a child Observable.</p>
        /// </div></li><li><span>element</span> : <see cref="String">String</see><div><p><strong>This option is only valid for listeners bound to <see cref="Ext.Component">Components</see>.</strong>
        /// The name of a Component property which references an element to add a listener to.</p>
        /// <p>  This option is useful during Component construction to add DOM event listeners to elements of
        /// <see cref="Ext.Component">Components</see> which will exist only after the Component is rendered.
        /// For example, to add a click listener to a Panel's body:</p>
        /// <pre><code>  new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// title: 'The title',
        /// listeners: {
        /// click: this.handlePanelClick,
        /// element: 'body'
        /// }
        /// });
        /// </code></pre>
        /// <p><strong>Combining Options</strong></p>
        /// <p>Using the options argument, it is possible to combine different types of listeners:</p>
        /// <p>A delayed, one-time listener.</p>
        /// <pre><code>myPanel.on('hide', this.handleClick, this, {
        /// single: true,
        /// delay: 100
        /// });
        /// </code></pre>
        /// </div></li></ul></param>
        public virtual void on(object eventName, System.Delegate fn=null, object scope=null, object options=null){}
        /// <summary>
        /// Handle addition or removal of descendant items. Invalidates the cached list of fields
        /// so that getFields will do a fresh query next time it is called. Also adds listeners
        /// for state change events on added fields, and tracks components with formBind=true.
        /// </summary>
        /// <param name="parent">
        /// </param>
        /// <param name="child">
        /// </param>
        private void onItemAddOrRemove(object parent, object child){}
        /// <summary>
        /// Handle changes in the form's validity. If there are any sub components with
        /// formBind=true then they are enabled/disabled based on the new validity.
        /// </summary>
        /// <param name="valid">
        /// </param>
        private void onValidityChange(bool valid){}
        /// <summary>
        /// Prepares a given class for observable instances. This method is called when a
        /// class derives from this class or uses this class as a mixin.
        /// </summary>
        /// <param name="T"><p>The class constructor to prepare.</p>
        /// </param>
        public virtual void prepareClass(System.Delegate T){}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this.
        /// For example if you are extending Grid, you might decide to forward some events from store.
        /// So you can do this inside your initComponent:
        /// <code>this.relayEvents(this.getStore(), ['load']);
        /// </code>
        /// The grid instance will then have an observable 'load' event which will be passed the
        /// parameters of the store's load event and any function fired with the grid's load event
        /// would have access to the grid using the <c>this</c> keyword.
        /// </summary>
        /// <param name="origin"><p>The Observable whose events this object is to relay.</p>
        /// </param>
        /// <param name="events"><p>Array of event names to relay.</p>
        /// </param>
        /// <param name="prefix"><p>A common prefix to prepend to the event names. For example:</p>
        /// <pre><code>this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
        /// </code></pre>
        /// <p>Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.</p>
        /// </param>
        public virtual void relayEvents(object origin, JsArray<String> events, object prefix=null){}
        /// <summary>
        /// Removes an event handler.
        /// </summary>
        /// <param name="eventName"><p>The type of event the handler was associated with.</p>
        /// </param>
        /// <param name="fn"><p>The handler to remove. <strong>This must be a reference to the function passed into the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> call.</strong></p>
        /// </param>
        /// <param name="scope"><p>The scope originally specified for the handler. It must be the same as the
        /// scope argument specified in the original call to <see cref="Ext.util.Observable.addListener">addListener</see> or the listener will not be removed.</p>
        /// </param>
        public virtual void removeListener(JsString eventName, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Removes listeners that were added by the mon method.
        /// </summary>
        /// <param name="item"><p>The item from which to remove a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        public virtual void removeManagedListener(object item, object ename, System.Delegate fn=null, object scope=null){}
        /// <summary>
        /// Remove a single managed listener item
        /// </summary>
        /// <param name="isClear"><p>True if this is being called during a clear</p>
        /// </param>
        /// <param name="managedListener"><p>The managed listener item
        /// See removeManagedListener for other args</p>
        /// </param>
        public virtual void removeManagedListenerItem(bool isClear, object managedListener){}
        /// <summary>
        /// Resets all fields in this form.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic reset(){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents).
        /// If events were suspended using the <c>queueSuspended</c> parameter, then all events fired
        /// during event suspension will be sent to any listeners now.
        /// </summary>
        public virtual void resumeEvents(){}
        /// <summary>
        /// Set values for fields in this form in bulk.
        /// </summary>
        /// <param name="values"><p>Either an array in the form:</p>
        /// <pre><code>[{id:'clientName', value:'Fred. Olsen Lines'},
        /// {id:'portOfLoading', value:'FXT'},
        /// {id:'portOfDischarge', value:'OSL'} ]
        /// </code></pre>
        /// <p>or an object hash of the form:</p>
        /// <pre><code>{
        /// clientName: 'Fred. Olsen Lines',
        /// portOfLoading: 'FXT',
        /// portOfDischarge: 'OSL'
        /// }
        /// </code></pre>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic setValues(object values){return null;}
        /// <summary>
        /// Shortcut to do a submit action. This will use the
        /// AJAX submit action by default. If the standardSubmit config
        /// is enabled it will use a standard form element to submit, or if the api config is present
        /// it will use the Ext.direct.Direct submit action.
        /// The following code:
        /// <code>myFormPanel.getForm().submit({
        /// clientValidation: true,
        /// url: 'updateConsignment.php',
        /// params: {
        /// newStatus: 'delivered'
        /// },
        /// success: function(form, action) {
        /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Success', action.result.msg);
        /// },
        /// failure: function(form, action) {
        /// switch (action.failureType) {
        /// case <see cref="Ext.form.action.Action">Ext.form.action.Action</see>.CLIENT_INVALID:
        /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Failure', 'Form fields may not be submitted with invalid values');
        /// break;
        /// case <see cref="Ext.form.action.Action">Ext.form.action.Action</see>.CONNECT_FAILURE:
        /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Failure', 'Ajax communication failed');
        /// break;
        /// case <see cref="Ext.form.action.Action">Ext.form.action.Action</see>.SERVER_INVALID:
        /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Failure', action.result.msg);
        /// }
        /// }
        /// });
        /// </code>
        /// would process the following server response for a successful submission:
        /// <code>{
        /// "success":true, // note this is Boolean, not string
        /// "msg":"Consignment updated"
        /// }
        /// </code>
        /// and the following server response for a failed submission:
        /// <code>{
        /// "success":false, // note this is Boolean, not string
        /// "msg":"You do not have permission to perform this operation"
        /// }
        /// </code>
        /// </summary>
        /// <param name="options"><p>The options to pass to the action (see <see cref="Ext.form.Basic.doAction">doAction</see> for details).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic submit(object options){return null;}
        /// <summary>
        /// Suspends the firing of all events. (see resumeEvents)
        /// </summary>
        /// <param name="queueSuspended"><p>Pass as true to queue up suspended events to be fired
        /// after the <see cref="Ext.util.Observable.resumeEvents">resumeEvents</see> call instead of discarding all suspended events.</p>
        /// </param>
        public virtual void suspendEvents(bool queueSuspended){}
        /// <summary>
        /// Shorthand for removeListener.
        /// Removes an event handler.
        /// </summary>
        /// <param name="eventName"><p>The type of event the handler was associated with.</p>
        /// </param>
        /// <param name="fn"><p>The handler to remove. <strong>This must be a reference to the function passed into the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> call.</strong></p>
        /// </param>
        /// <param name="scope"><p>The scope originally specified for the handler. It must be the same as the
        /// scope argument specified in the original call to <see cref="Ext.util.Observable.addListener">addListener</see> or the listener will not be removed.</p>
        /// </param>
        public virtual void un(JsString eventName, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Persists the values in this form into the passed Ext.data.Model object in a beginEdit/endEdit block.
        /// If the record is not specified, it will attempt to update (if it exists) the record provided to loadRecord.
        /// </summary>
        /// <param name="record"><p>The record to edit</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Basic updateRecord(object record=null){return null;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        [JsProperty(Name="$onExtended")]
        private static JsArray @onExtended{get;set;}
        public Basic(BasicConfig config){}
        public Basic(){}
        public Basic(params object[] args){}
    }
    #endregion
    #region BasicConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BasicConfig : Ext.util.ObservableConfig
    {
        /// <summary>
        /// If specified, load and submit actions will be handled with DirectLoad
        /// and DirectSubmit.  Methods which have been imported by
        /// Ext.direct.Manager can be specified here to load and submit forms. API methods may also be
        /// specified as strings. See Ext.data.proxy.Direct.directFn.  Such as the following:
        /// <code>api: {
        /// load: App.ss.MyProfile.load,
        /// submit: App.ss.MyProfile.submit
        /// }
        /// </code>
        /// Load actions can use <see cref="Ext.form.BasicConfig.paramOrder">paramOrder</see> or <see cref="Ext.form.BasicConfig.paramsAsHash">paramsAsHash</see> to customize how the load method
        /// is invoked.  Submit actions will always use a standard form submit. The <c>formHandler</c> configuration
        /// (see Ext.direct.RemotingProvider#action) must be set on the associated server-side method which has
        /// been imported by <see cref="Ext.direct.Manager">Ext.direct.Manager</see>.
        /// </summary>
        public JsObject api;
        /// <summary>
        /// Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.
        /// Parameters are encoded as standard HTTP parameters using <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>.
        /// </summary>
        public JsObject baseParams;
        /// <summary>
        /// An Ext.data.DataReader (e.g. Ext.data.reader.Xml) to be used to
        /// read field error messages returned from 'submit' actions. This is optional
        /// as there is built-in support for processing JSON responses.
        /// The Records which provide messages for the invalid Fields must use the
        /// Field name (or id) as the Record ID, and must contain a field called 'msg'
        /// which contains the error message.
        /// The errorReader does not have to be a full-blown implementation of a
        /// Reader. It simply needs to implement a <c>read(xhr)</c> function
        /// which returns an Array of Records in an object with the following
        /// structure:
        /// <code>{
        /// records: recordArray
        /// }
        /// </code>
        /// </summary>
        public Ext.data.reader.Reader errorReader;
        /// <summary>
        /// The request method to use (GET or POST) for form actions if one isn't supplied in the action options.
        /// </summary>
        public JsString method;
        /// <summary>
        /// A list of params to be executed server side. Only used for the api load
        /// configuration.
        /// Specify the params in the order in which they must be executed on the
        /// server-side as either (1) an Array of String values, or (2) a String of params
        /// delimited by either whitespace, comma, or pipe. For example,
        /// any of the following would be acceptable:
        /// <code>paramOrder: ['param1','param2','param3']
        /// paramOrder: 'param1 param2 param3'
        /// paramOrder: 'param1,param2,param3'
        /// paramOrder: 'param1|param2|param'
        /// </code>
        /// </summary>
        public object paramOrder;
        /// <summary>
        /// Only used for the api load configuration. If true, parameters will be sent as a
        /// single hash collection of named arguments. Providing a paramOrder nullifies this
        /// configuration.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool paramsAsHash;
        /// <summary>
        /// An Ext.data.DataReader (e.g. Ext.data.reader.Xml) to be used to read
        /// data when executing 'load' actions. This is optional as there is built-in
        /// support for processing JSON responses.
        /// </summary>
        public Ext.data.reader.Reader reader;
        /// <summary>
        /// If set to true, a standard HTML form submit is used instead of a XHR (Ajax) style form submission.
        /// All of the field values, plus any additional params configured via baseParams
        /// and/or the options to submit, will be included in the values submitted in the form.
        /// </summary>
        public bool standardSubmit;
        /// <summary>
        /// Timeout for form actions in seconds.
        /// Defaults to: <c>30</c>
        /// </summary>
        public JsNumber timeout;
        /// <summary>
        /// If set to true, reset() resets to the last loaded or setValues() data instead of
        /// when the form was first created.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool trackResetOnLoad;
        /// <summary>
        /// The URL to use for form actions if one isn't supplied in the
        /// doAction options.
        /// </summary>
        public JsString url;
        /// <summary>
        /// By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific
        /// element by passing it or its id or mask the form itself by passing in true.
        /// </summary>
        public object waitMsgTarget;
        /// <summary>
        /// The default title to show for the waiting message box
        /// Defaults to: <c>&quot;Please Wait...&quot;</c>
        /// </summary>
        public JsString waitTitle;
        public BasicConfig(params object[] args){}
    }
    #endregion
    #region BasicEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BasicEvents : Ext.util.ObservableEvents
    {
        /// <summary>
        /// Fires when an action is completed.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="action"><p>The <see cref="Ext.form.action.Action">Ext.form.action.Action</see> that completed</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void actioncomplete(Basic @this, Ext.form.action.Action action, object eOpts){}
        /// <summary>
        /// Fires when an action fails.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="action"><p>The <see cref="Ext.form.action.Action">Ext.form.action.Action</see> that failed</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void actionfailed(Basic @this, Ext.form.action.Action action, object eOpts){}
        /// <summary>
        /// Fires before any action is performed. Return false to cancel the action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="action"><p>The <see cref="Ext.form.action.Action">Ext.form.action.Action</see> to be performed</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeaction(Basic @this, Ext.form.action.Action action, object eOpts){}
        /// <summary>
        /// Fires when the dirty state of the entire form changes.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="dirty"><p><c>true</c> if the form is now dirty, <c>false</c> if it is no longer dirty.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void dirtychange(Basic @this, bool dirty, object eOpts){}
        /// <summary>
        /// Fires when the validity of the entire form changes.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="valid"><p><c>true</c> if the form is now valid, <c>false</c> if it is now invalid.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void validitychange(Basic @this, bool valid, object eOpts){}
        public BasicEvents(params object[] args){}
    }
    #endregion
}
