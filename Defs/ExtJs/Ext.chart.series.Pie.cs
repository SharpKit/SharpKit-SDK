//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.chart.series
{
    #region Pie
    /// <inheritdocs />
    /// <summary>
    /// <p>Creates a Pie Chart. A Pie Chart is a useful visualization technique to display quantitative information for different
    /// categories that also have a meaning as a whole.
    /// As with all other series, the Pie Series must be appended in the <em>series</em> Chart array configuration. See the Chart
    /// documentation for more information. A typical configuration object for the pie series could be:</p>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.JsonStore">Ext.data.JsonStore</see>', {
    /// fields: ['name', 'data'],
    /// data: [
    /// { 'name': 'metric one',   'data': 10 },
    /// { 'name': 'metric two',   'data':  7 },
    /// { 'name': 'metric three', 'data':  5 },
    /// { 'name': 'metric four',  'data':  2 },
    /// { 'name': 'metric five',  'data': 27 }
    /// ]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// width: 500,
    /// height: 350,
    /// animate: true,
    /// store: store,
    /// theme: 'Base:gradients',
    /// series: [{
    /// type: 'pie',
    /// angleField: 'data',
    /// showInLegend: true,
    /// tips: {
    /// trackMouse: true,
    /// width: 140,
    /// height: 28,
    /// renderer: function(storeItem, item) {
    /// // calculate and display percentage on hover
    /// var total = 0;
    /// store.each(function(rec) {
    /// total += rec.get('data');
    /// });
    /// this.setTitle(storeItem.get('name') + ': ' + Math.round(storeItem.get('data') / total * 100) + '%');
    /// }
    /// },
    /// highlight: {
    /// segment: {
    /// margin: 20
    /// }
    /// },
    /// label: {
    /// field: 'name',
    /// display: 'rotate',
    /// contrast: true,
    /// font: '18px Arial'
    /// }
    /// }]
    /// });
    /// </code></pre>
    /// <p>In this configuration we set <c>pie</c> as the type for the series, set an object with specific style properties for highlighting options
    /// (triggered when hovering elements). We also set true to <c>showInLegend</c> so all the pie slices can be represented by a legend item.</p>
    /// <p>We set <c>data</c> as the value of the field to determine the angle span for each pie slice. We also set a label configuration object
    /// where we set the field name of the store field to be renderer as text for the label. The labels will also be displayed rotated.</p>
    /// <p>We set <c>contrast</c> to <c>true</c> to flip the color of the label if it is to similar to the background color. Finally, we set the font family
    /// and size through the <c>font</c> parameter.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Pie : Series
    {
        /// <summary>
        /// The store record field name to be used for the pie angles.
        /// The values bound to this field name must be positive real numbers.
        /// Defaults to: <c>false</c>
        /// </summary>
        public JsString angleField;
        /// <summary>
        /// An array of color values which will be used, in order, as the pie slice fill colors.
        /// </summary>
        public JsArray colorSet;
        /// <summary>
        /// Whether to set the pie chart as donut chart.
        /// Default's false. Can be set to a particular percentage to set the radius
        /// of the donut chart.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object donut;
        /// <summary>
        /// Alias for angleField.
        /// </summary>
        public JsString field;
        /// <summary>
        /// The duration for the pie slice highlight effect.
        /// Defaults to: <c>150</c>
        /// </summary>
        public JsNumber highlightDuration;
        /// <summary>
        /// The store record field name to be used for the pie slice lengths.
        /// The values bound to this field name must be positive real numbers.
        /// Defaults to: <c>false</c>
        /// </summary>
        public JsString lengthField;
        /// <summary>
        /// An object containing styles for overriding series styles from Theming.
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject style;
        /// <summary>
        /// Alias for angleField.
        /// </summary>
        public JsString xField;
        /// <summary>
        /// Draws the series for the current chart.
        /// </summary>
        public void drawSeries(){}
        /// <summary>
        /// Un-highlights the specified item. If no item is provided it will un-highlight the entire series.
        /// </summary>
        /// <param name="item"><p>{Object} Info about the item; same format as returned by <see cref="Ext.chart.series.Pie.getItemForPoint">getItemForPoint</see></p>
        /// </param>
        public void unHighlightItem(object item){}
        public Pie(PieConfig config){}
        public Pie(){}
        public Pie(params object[] args){}
    }
    #endregion
    #region PieConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PieConfig : SeriesConfig
    {
        /// <summary>
        /// The store record field name to be used for the pie angles.
        /// The values bound to this field name must be positive real numbers.
        /// Defaults to: <c>false</c>
        /// </summary>
        public JsString angleField;
        /// <summary>
        /// An array of color values which will be used, in order, as the pie slice fill colors.
        /// </summary>
        public JsArray colorSet;
        /// <summary>
        /// Whether to set the pie chart as donut chart.
        /// Default's false. Can be set to a particular percentage to set the radius
        /// of the donut chart.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object donut;
        /// <summary>
        /// Alias for angleField.
        /// </summary>
        public JsString field;
        /// <summary>
        /// The duration for the pie slice highlight effect.
        /// Defaults to: <c>150</c>
        /// </summary>
        public JsNumber highlightDuration;
        /// <summary>
        /// The store record field name to be used for the pie slice lengths.
        /// The values bound to this field name must be positive real numbers.
        /// Defaults to: <c>false</c>
        /// </summary>
        public JsString lengthField;
        /// <summary>
        /// An object containing styles for overriding series styles from Theming.
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject style;
        /// <summary>
        /// Alias for angleField.
        /// </summary>
        public JsString xField;
        public PieConfig(params object[] args){}
    }
    #endregion
    #region PieEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PieEvents : SeriesEvents
    {
        public PieEvents(params object[] args){}
    }
    #endregion
}
