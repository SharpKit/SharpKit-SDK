//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region AbstractPlugin
    /// <inheritdocs />
    /// <summary>
    /// <p>The AbstractPlugin class is the base class from which user-implemented plugins should inherit.</p>
    /// <p>This class defines the essential API of plugins as used by Components by defining the following methods:</p>
    /// <ul>
    /// <li><p><c>init</c> : The plugin initialization method which the owning Component calls at Component initialization time.</p>
    /// <p>The Component passes itself as the sole parameter.</p>
    /// <p>Subclasses should set up bidirectional links between the plugin and its client Component here.</p></li>
    /// <li><p><c>destroy</c> : The plugin cleanup method which the owning Component calls at Component destruction time.</p>
    /// <p>Use this method to break links between the plugin and the Component and to free any allocated resources.</p></li>
    /// <li><p><c>enable</c> : The base implementation just sets the plugin's <c>disabled</c> flag to <c>false</c></p></li>
    /// <li><p><c>disable</c> : The base implementation just sets the plugin's <c>disabled</c> flag to <c>true</c></p></li>
    /// </ul>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractPlugin : Ext.Base
    {
        /// <summary>
        /// A name for the plugin that can be set at creation time to then retrieve the plugin
        /// through getPlugin method.  For example:
        /// <code>var grid = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
        /// plugins: [{
        /// ptype: 'cellediting',
        /// clicksToEdit: 2,
        /// pluginId: 'cellplugin'
        /// }]
        /// });
        /// // later on:
        /// var plugin = grid.getPlugin('cellplugin');
        /// </code>
        /// </summary>
        public JsString pluginId;
        /// <summary>
        /// The base implementation just sets the plugin's disabled flag to true
        /// Plugin subclasses which need more complex processing may implement an overriding implementation.
        /// </summary>
        public void disable(){}
        /// <summary>
        /// The base implementation just sets the plugin's disabled flag to false
        /// Plugin subclasses which need more complex processing may implement an overriding implementation.
        /// </summary>
        public void enable(){}
        /// <summary>
        /// The init method is invoked after initComponent method has been run for the client Component.
        /// The supplied implementation is empty. Subclasses should perform plugin initialization, and set up bidirectional
        /// links between the plugin and its client Component in their own implementation of this method.
        /// </summary>
        /// <param name="client"><p>The client Component which owns this plugin.</p>
        /// </param>
        public void init(Ext.Component client){}
        public AbstractPlugin(AbstractPluginConfig config){}
        public AbstractPlugin(){}
        public AbstractPlugin(params object[] args){}
    }
    #endregion
    #region AbstractPluginConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractPluginConfig : Ext.BaseConfig
    {
        /// <summary>
        /// A name for the plugin that can be set at creation time to then retrieve the plugin
        /// through getPlugin method.  For example:
        /// <code>var grid = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
        /// plugins: [{
        /// ptype: 'cellediting',
        /// clicksToEdit: 2,
        /// pluginId: 'cellplugin'
        /// }]
        /// });
        /// // later on:
        /// var plugin = grid.getPlugin('cellplugin');
        /// </code>
        /// </summary>
        public JsString pluginId;
        public AbstractPluginConfig(params object[] args){}
    }
    #endregion
    #region AbstractPluginEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractPluginEvents : Ext.BaseEvents
    {
        public AbstractPluginEvents(params object[] args){}
    }
    #endregion
}
