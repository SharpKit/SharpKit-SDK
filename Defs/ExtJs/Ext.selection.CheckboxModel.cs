//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.selection
{
    #region CheckboxModel
    /// <inheritdocs />
    /// <summary>
    /// <p>A selection model that renders a column of checkboxes that can be toggled to
    /// select or deselect rows. The default mode for this selection model is MULTI.</p>
    /// <p>The selection model will inject a header for the checkboxes in the first view
    /// and according to the 'injectCheckbox' configuration.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class CheckboxModel : RowModel
    {
        /// <summary>
        /// True if rows can only be selected by clicking on the checkbox column.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool checkOnly;
        /// <summary>
        /// The index at which to insert the checkbox column.
        /// Supported values are a numeric index, and the strings 'first' and 'last'.
        /// Defaults to: <c>0</c>
        /// </summary>
        public object injectCheckbox;
        /// <summary>
        /// Configure as false to not display the header checkbox at the top of the column.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showHeaderCheckbox;
        /// <summary>
        /// Add the header checkbox to the header row
        /// </summary>
        /// <param name="initial"><p>True if we're binding for the first time.</p>
        /// </param>
        private void addCheckbox(bool initial){}
        /// <summary>
        /// Retrieve a configuration to be used in a HeaderContainer.
        /// This should be used when injectCheckbox is set to false.
        /// </summary>
        public void getHeaderConfig(){}
        /// <summary>
        /// Toggle between selecting all and deselecting all when clicking on
        /// a checkbox header.
        /// </summary>
        /// <param name="headerCt">
        /// </param>
        /// <param name="header">
        /// </param>
        /// <param name="e">
        /// </param>
        public void onHeaderClick(object headerCt, object header, object e){}
        /// <summary>
        /// Handles the grid's reconfigure event.  Adds the checkbox header if the columns have been reconfigured.
        /// </summary>
        /// <param name="grid">
        /// </param>
        /// <param name="store">
        /// </param>
        /// <param name="columns">
        /// </param>
        private void onReconfigure(Ext.panel.Table grid, Ext.data.Store store, JsArray<Object> columns){}
        /// <summary>
        /// Synchronize header checker value as selection changes.
        /// </summary>
        private void onSelectChange(){}
        /// <summary>
        /// Generates the HTML to be rendered in the injected checkbox column for each row.
        /// Creates the standard checkbox markup by default; can be overridden to provide custom rendering.
        /// See Ext.grid.column.Column.renderer for description of allowed parameters.
        /// </summary>
        /// <param name="value">
        /// </param>
        /// <param name="metaData">
        /// </param>
        /// <param name="record">
        /// </param>
        /// <param name="rowIndex">
        /// </param>
        /// <param name="colIndex">
        /// </param>
        /// <param name="store">
        /// </param>
        /// <param name="view">
        /// </param>
        public void renderer(object value, object metaData, object record, object rowIndex, object colIndex, object store, object view){}
        /// <summary>
        /// Toggle the ui header between checked and unchecked state.
        /// </summary>
        /// <param name="isChecked">
        /// </param>
        private void toggleUiHeader(bool isChecked){}
        /// <summary>
        /// </summary>
        private void updateHeaderState(){}
        public CheckboxModel(CheckboxModelConfig config){}
        public CheckboxModel(){}
        public CheckboxModel(params object[] args){}
    }
    #endregion
    #region CheckboxModelConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CheckboxModelConfig : RowModelConfig
    {
        /// <summary>
        /// True if rows can only be selected by clicking on the checkbox column.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool checkOnly;
        /// <summary>
        /// The index at which to insert the checkbox column.
        /// Supported values are a numeric index, and the strings 'first' and 'last'.
        /// Defaults to: <c>0</c>
        /// </summary>
        public object injectCheckbox;
        /// <summary>
        /// Configure as false to not display the header checkbox at the top of the column.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showHeaderCheckbox;
        public CheckboxModelConfig(params object[] args){}
    }
    #endregion
    #region CheckboxModelEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CheckboxModelEvents : RowModelEvents
    {
        public CheckboxModelEvents(params object[] args){}
    }
    #endregion
}
