//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.ux.@event
{
    #region Player
    /// <inheritdocs />
    /// <summary>
    /// <p>This class manages the playback of an array of "event descriptors". For details on the
    /// contents of an "event descriptor", see <see cref="Ext.ux.event.Recorder">Ext.ux.event.Recorder</see>. The events recorded by the
    /// <see cref="Ext.ux.event.Recorder">Ext.ux.event.Recorder</see> class are designed to serve as input for this class.</p>
    /// <p>The simplest use of this class is to instantiate it with an <see cref="Ext.uxEvents.PlayerConfig.eventQueue">eventQueue</see> and call
    /// <see cref="Ext.uxEvents.Player.start">start</see>. Like so:</p>
    /// <pre><code> var player = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.event.Player">Ext.ux.event.Player</see>', {
    /// eventQueue: [ ... ],
    /// speed: 2,  // play at 2x speed
    /// listeners: {
    /// stop: function () {
    /// player = null; // all done
    /// }
    /// }
    /// });
    /// player.start();
    /// </code></pre>
    /// <p>A more complex use would be to incorporate keyframe generation after playing certain
    /// events.</p>
    /// <pre><code> var player = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.event.Player">Ext.ux.event.Player</see>', {
    /// eventQueue: [ ... ],
    /// keyFrameEvents: {
    /// click: true
    /// },
    /// listeners: {
    /// stop: function () {
    /// // play has completed... probably time for another keyframe...
    /// player = null;
    /// },
    /// keyframe: onKeyFrame
    /// }
    /// });
    /// player.start();
    /// </code></pre>
    /// <p>If a keyframe can be handled immediately (synchronously), the listener would be:</p>
    /// <pre><code> function onKeyFrame () {
    /// handleKeyFrame();
    /// }
    /// </code></pre>
    /// <p> If the keyframe event is always handled asynchronously, then the event listener is only
    /// a bit more:</p>
    /// <pre><code> function onKeyFrame (p, eventDescriptor) {
    /// eventDescriptor.defer(); // pause event playback...
    /// handleKeyFrame(function () {
    /// eventDescriptor.finish(); // ...resume event playback
    /// });
    /// }
    /// </code></pre>
    /// <p>Finally, if the keyframe could be either handled synchronously or asynchronously (perhaps
    /// differently by browser), a slightly more complex listener is required.</p>
    /// <pre><code> function onKeyFrame (p, eventDescriptor) {
    /// var async;
    /// handleKeyFrame(function () {
    /// // either this callback is being called immediately by handleKeyFrame (in
    /// // which case async is undefined) or it is being called later (in which case
    /// // async will be true).
    /// if (async) {
    /// eventDescriptor.finish();
    /// } else {
    /// async = false;
    /// }
    /// });
    /// // either the callback was called (and async is now false) or it was not
    /// // called (and async remains undefined).
    /// if (async !== false) {
    /// eventDescriptor.defer();
    /// async = true; // let the callback know that we have gone async
    /// }
    /// }
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Player : Driver
    {
        /// <summary>
        /// The event queue to playback. This must be provided before
        /// the start method is called.
        /// </summary>
        public JsArray eventQueue;
        /// <summary>
        /// An object that describes the events that should generate
        /// keyframe events. For example, { click: true } would generate keyframe events after
        /// each click event.
        /// Defaults to: <c>{click: true}</c>
        /// </summary>
        public JsObject keyFrameEvents;
        /// <summary>
        /// True to pause event playback during animations, false
        /// to ignore animations. Default is true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool pauseForAnimations;
        /// <summary>
        /// The playback speed multiplier. Default is 1.0 (to playback at the
        /// recorded speed). A value of 2 would playback at 2x speed.
        /// Defaults to: <c>1.0</c>
        /// </summary>
        public JsNumber speed;
        /// <summary>
        /// Returns the element given is XPath-like description.
        /// </summary>
        /// <param name="xpath"><p>The XPath-like description of the element.</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement</span><div>
        /// </div>
        /// </returns>
        public JsObject getElementFromXPath(JsString xpath){return null;}
        /// <summary>
        /// Called to inject the given event on the specified target.
        /// </summary>
        /// <param name="target"><p>The target of the event.</p>
        /// </param>
        /// <param name="The"><p>event to inject.</p>
        /// </param>
        public void injectEvent(object target, EventObject The){}
        /// <summary>
        /// This method is called after an event has been played to prepare for the next event.
        /// </summary>
        /// <param name="eventDescriptor"><p>The descriptor of the event just played.</p>
        /// </param>
        public void nextEvent(object eventDescriptor){}
        /// <summary>
        /// This method returns the event descriptor at the front of the queue. This does not
        /// dequeue the event. Repeated calls return the same object (until nextEvent
        /// is called).
        /// </summary>
        public void peekEvent(){}
        /// <summary>
        /// This method dequeues and injects events until it has arrived at the time index. If
        /// no events are ready (based on the time index), this method does nothing.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if there is more to do; false if not (at least for now).</p>
        /// </div>
        /// </returns>
        public bool processEvents(){return false;}
        /// <summary>
        /// This method is called when a keyframe is reached. This will fire the keyframe event.
        /// If the keyframe has been handled, true is returned. Otherwise, false is returned.
        /// </summary>
        /// <param name="The"><p>event descriptor of the keyframe.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the keyframe was handled, false if not.</p>
        /// </div>
        /// </returns>
        public bool processKeyFrame(object The){return false;}
        public Player(PlayerConfig config){}
        public Player(){}
        public Player(params object[] args){}
    }
    #endregion
    #region PlayerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PlayerConfig : DriverConfig
    {
        /// <summary>
        /// The event queue to playback. This must be provided before
        /// the start method is called.
        /// </summary>
        public JsArray eventQueue;
        /// <summary>
        /// An object that describes the events that should generate
        /// keyframe events. For example, { click: true } would generate keyframe events after
        /// each click event.
        /// Defaults to: <c>{click: true}</c>
        /// </summary>
        public JsObject keyFrameEvents;
        /// <summary>
        /// True to pause event playback during animations, false
        /// to ignore animations. Default is true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool pauseForAnimations;
        /// <summary>
        /// The playback speed multiplier. Default is 1.0 (to playback at the
        /// recorded speed). A value of 2 would playback at 2x speed.
        /// Defaults to: <c>1.0</c>
        /// </summary>
        public JsNumber speed;
        public PlayerConfig(params object[] args){}
    }
    #endregion
    #region PlayerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PlayerEvents : DriverEvents
    {
        /// <summary>
        /// Fires before an event is played.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eventDescriptor"><p>The event descriptor about to be played.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeplay(Player @this, object eventDescriptor, object eOpts){}
        /// <summary>
        /// Fires when this player reaches a keyframe. Typically, this is after events
        /// like click are injected and any resulting animations have been completed.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eventDescriptor"><p>The keyframe event descriptor.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void keyframe(Player @this, object eventDescriptor, object eOpts){}
        public PlayerEvents(params object[] args){}
    }
    #endregion
}
