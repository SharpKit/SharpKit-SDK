//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.layout.container
{
    #region Box
    /// <inheritdocs />
    /// <summary>
    /// <p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Box : Ext.layout.container.Container
    {
        /// <summary>
        /// If the individual contained items do not have a margins property specified or margin specified via CSS, the
        /// default margins from this property will be applied to each item.
        /// This property may be specified as an object containing margins to apply in the format:
        /// <code>{
        /// top: (top margin),
        /// right: (right margin),
        /// bottom: (bottom margin),
        /// left: (left margin)
        /// }
        /// </code>
        /// This property may also be specified as a string containing space-separated, numeric margin values. The order of
        /// the sides associated with each value matches the way CSS processes margin values:
        /// <li>If there is only one value, it applies to all sides.</li>
        /// <li>If there are two values, the top and bottom borders are set to the first value and the right and left are
        /// set to the second.</li>
        /// <li>If there are three values, the top is set to the first value, the left and right are set to the second,
        /// and the bottom is set to the third.</li>
        /// <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
        /// Defaults to: <c>{top: 0, right: 0, bottom: 0, left: 0}</c>
        /// </summary>
        public JsObject defaultMargins;
        /// <summary>
        /// This configuration option is to be applied to child items of the container managed by this layout. Each child
        /// item with a flex property will be flexed (horizontally in hbox, vertically in vbox) according to each item's
        /// relative flex value compared to the sum of all items with a flex value specified. Any child items that have
        /// either a flex = 0 or flex = undefined will not be 'flexed' (the initial size will not be changed).
        /// </summary>
        public JsNumber flex;
        /// <summary>
        /// Controls how the child items of the container are packed together. Acceptable configuration values for this
        /// property are:
        /// <li><strong>start</strong> - child items are packed together at <strong>left</strong> (HBox) or <strong>top</strong> (VBox) side of container (*default**)</li>
        /// <li><strong>center</strong> - child items are packed together at <strong>mid-width</strong> (HBox) or <strong>mid-height</strong> (VBox) of container</li>
        /// <li><strong>end</strong> - child items are packed together at <strong>right</strong> (HBox) or <strong>bottom</strong> (VBox) side of container</li>
        /// Defaults to: <c>&quot;start&quot;</c>
        /// </summary>
        public JsString pack;
        /// <summary>
        /// Sets the padding to be applied to all child items managed by this layout.
        /// This property must be specified as a string containing space-separated, numeric padding values. The order of the
        /// sides associated with each value matches the way CSS processes padding values:
        /// <li>If there is only one value, it applies to all sides.</li>
        /// <li>If there are two values, the top and bottom borders are set to the first value and the right and left are
        /// set to the second.</li>
        /// <li>If there are three values, the top is set to the first value, the left and right are set to the second,
        /// and the bottom is set to the third.</li>
        /// <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsString padding;
        /// <summary>
        /// Allows stretchMax calculation to take into account the max perpendicular size (height for HBox layout and width
        /// for VBox layout) of another Box layout when calculating its maximum perpendicular child size.
        /// If specified as a string, this may be either a known Container ID, or a ComponentQuery selector which is rooted
        /// at this layout's Container (ie, to find a sibling, use <c>"^&gt;#siblingItemId</c>).
        /// </summary>
        public object stretchMaxPartner;
        /// <summary>
        /// Called by an owning Panel before the Panel begins its collapse process.
        /// Most layouts will not need to override the default Ext.emptyFn implementation.
        /// </summary>
        /// <param name="child">
        /// </param>
        private void beginCollapse(object child){}
        /// <summary>
        /// Called by an owning Panel before the Panel begins its expand process.
        /// Most layouts will not need to override the default Ext.emptyFn implementation.
        /// </summary>
        /// <param name="child">
        /// </param>
        private void beginExpand(object child){}
        /// <summary>
        /// This method is called to (re)cache our understanding of flexes. This happens during beginLayout and may need to
        /// be called again if the flexes are changed during the layout (e.g., like ColumnLayout).
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        protected void cacheFlexes(object ownerContext){}
        /// <summary>
        /// </summary>
        private void initOverflowHandler(){}
        public Box(BoxConfig config){}
        public Box(){}
        public Box(params object[] args){}
    }
    #endregion
    #region BoxConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BoxConfig : Ext.layout.container.ContainerConfig
    {
        /// <summary>
        /// If the individual contained items do not have a margins property specified or margin specified via CSS, the
        /// default margins from this property will be applied to each item.
        /// This property may be specified as an object containing margins to apply in the format:
        /// <code>{
        /// top: (top margin),
        /// right: (right margin),
        /// bottom: (bottom margin),
        /// left: (left margin)
        /// }
        /// </code>
        /// This property may also be specified as a string containing space-separated, numeric margin values. The order of
        /// the sides associated with each value matches the way CSS processes margin values:
        /// <li>If there is only one value, it applies to all sides.</li>
        /// <li>If there are two values, the top and bottom borders are set to the first value and the right and left are
        /// set to the second.</li>
        /// <li>If there are three values, the top is set to the first value, the left and right are set to the second,
        /// and the bottom is set to the third.</li>
        /// <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
        /// Defaults to: <c>{top: 0, right: 0, bottom: 0, left: 0}</c>
        /// </summary>
        public JsObject defaultMargins;
        /// <summary>
        /// This configuration option is to be applied to child items of the container managed by this layout. Each child
        /// item with a flex property will be flexed (horizontally in hbox, vertically in vbox) according to each item's
        /// relative flex value compared to the sum of all items with a flex value specified. Any child items that have
        /// either a flex = 0 or flex = undefined will not be 'flexed' (the initial size will not be changed).
        /// </summary>
        public JsNumber flex;
        /// <summary>
        /// Controls how the child items of the container are packed together. Acceptable configuration values for this
        /// property are:
        /// <li><strong>start</strong> - child items are packed together at <strong>left</strong> (HBox) or <strong>top</strong> (VBox) side of container (*default**)</li>
        /// <li><strong>center</strong> - child items are packed together at <strong>mid-width</strong> (HBox) or <strong>mid-height</strong> (VBox) of container</li>
        /// <li><strong>end</strong> - child items are packed together at <strong>right</strong> (HBox) or <strong>bottom</strong> (VBox) side of container</li>
        /// Defaults to: <c>&quot;start&quot;</c>
        /// </summary>
        public JsString pack;
        /// <summary>
        /// Sets the padding to be applied to all child items managed by this layout.
        /// This property must be specified as a string containing space-separated, numeric padding values. The order of the
        /// sides associated with each value matches the way CSS processes padding values:
        /// <li>If there is only one value, it applies to all sides.</li>
        /// <li>If there are two values, the top and bottom borders are set to the first value and the right and left are
        /// set to the second.</li>
        /// <li>If there are three values, the top is set to the first value, the left and right are set to the second,
        /// and the bottom is set to the third.</li>
        /// <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsString padding;
        /// <summary>
        /// Allows stretchMax calculation to take into account the max perpendicular size (height for HBox layout and width
        /// for VBox layout) of another Box layout when calculating its maximum perpendicular child size.
        /// If specified as a string, this may be either a known Container ID, or a ComponentQuery selector which is rooted
        /// at this layout's Container (ie, to find a sibling, use <c>"^&gt;#siblingItemId</c>).
        /// </summary>
        public object stretchMaxPartner;
        public BoxConfig(params object[] args){}
    }
    #endregion
    #region BoxEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BoxEvents : Ext.layout.container.ContainerEvents
    {
        public BoxEvents(params object[] args){}
    }
    #endregion
}
