//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region TaskManager
    /// <inheritdocs />
    /// <summary>
    /// <p>A static <see cref="Ext.util.TaskRunner">Ext.util.TaskRunner</see> instance that can be used to start and stop
    /// arbitrary tasks. See <see cref="Ext.util.TaskRunner">Ext.util.TaskRunner</see> for supported methods and task
    /// config properties.</p>
    /// <p>   // Start a simple clock task that updates a div once per second
    /// var task = {</p>
    /// <pre><code>  run: function(){
    /// <see cref="Ext.ExtContext.fly">Ext.fly</see>('clock').update(new Date().format('g:i:s A'));
    /// },
    /// interval: 1000 //1 second
    /// </code></pre>
    /// <p>   }</p>
    /// <p>   <see cref="Ext.TaskManager.start">Ext.TaskManager.start</see>(task);</p>
    /// <p>See the <see cref="Ext.TaskManager.start">start</see> method for details about how to configure a task object.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class TaskManager : Ext.util.TaskRunner
    {
        /// <summary>
        /// The timer resolution.
        /// Defaults to: <c>10</c>
        /// </summary>
        public static JsNumber interval;
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        private static JsString @className{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject configMap{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        private static bool isInstance{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        protected static Class self{get;set;}
        /// <summary>
        /// The id of the current timer.
        /// Defaults to: <c>null</c>
        /// </summary>
        private static JsObject timerId{get;set;}
        /// <summary>
        /// Parameters<li><span>interval</span> : <see cref="Number">Number</see>/<see cref="Object">Object</see> (optional)<div><p>The minimum precision in milliseconds supported by this
        /// TaskRunner instance. Alternatively, a config object to apply to the new instance.</p>
        /// <p>Defaults to: <c>10</c></p></div></li>
        /// </summary>
        /// <param name="interval"><p>The minimum precision in milliseconds supported by this
        /// TaskRunner instance. Alternatively, a config object to apply to the new instance.</p>
        /// <p>Defaults to: <c>10</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public TaskManager(object interval=null){}
        /// <summary>
        /// Call the original method that was previously overridden with override
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// constructor: function() {
        /// alert("I'm a cat!");
        /// }
        /// });
        /// My.Cat.override({
        /// constructor: function() {
        /// alert("I'm going to be a cat!");
        /// this.callOverridden();
        /// alert("Meeeeoooowwww");
        /// }
        /// });
        /// var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
        /// // alerts "I'm a cat!"
        /// // alerts "Meeeeoooowwww"
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// <p>as of 4.1. Use <see cref="Ext.Base.callParent">callParent</see> instead.</p>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callOverridden(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the overridden method</p>
        /// </div>
        /// </returns>
        protected static object callOverridden(object args=null){return null;}
        /// <summary>
        /// Call the "parent" method of the current method. That is the method previously
        /// overridden by derivation or by an override (see Ext.define).
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Base', {
        /// constructor: function (x) {
        /// this.x = x;
        /// },
        /// statics: {
        /// method: function (x) {
        /// return x;
        /// }
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived', {
        /// extend: 'My.Base',
        /// constructor: function () {
        /// this.callParent([21]);
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // alerts 21
        /// </code>
        /// This can be used with an override as follows:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.DerivedOverride', {
        /// override: 'My.Derived',
        /// constructor: function (x) {
        /// this.callParent([x*2]); // calls original My.Derived constructor
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // now alerts 42
        /// </code>
        /// This also works with static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2', {
        /// extend: 'My.Base',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Base.method
        /// }
        /// }
        /// });
        /// alert(My.Base.method(10);     // alerts 10
        /// alert(My.Derived2.method(10); // alerts 20
        /// </code>
        /// Lastly, it also works with overridden static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2Override', {
        /// override: 'My.Derived2',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Derived2.method
        /// }
        /// }
        /// });
        /// alert(My.Derived2.method(10); // now alerts 40
        /// </code>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callParent(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the parent method</p>
        /// </div>
        /// </returns>
        protected static object callParent(object args=null){return null;}
        /// <summary>
        /// </summary>
        private static void configClass(){}
        /// <summary>
        /// Destroys this instance, stopping all tasks that are currently running.
        /// Overrides: <see cref="Ext.Base.destroy">Ext.Base.destroy</see>
        /// </summary>
        public static void destroy(){}
        /// <summary>
        /// Parameters<li><span>name</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="name">
        /// </param>
        private static void getConfig(object name){}
        /// <summary>
        /// Returns the initial configuration passed to constructor when instantiating
        /// this class.
        /// </summary>
        /// <param name="name"><p>Name of the config option to return.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see>/Mixed</span><div><p>The full config object or a single config value
        /// when <c>name</c> parameter specified.</p>
        /// </div>
        /// </returns>
        public static object getInitialConfig(object name=null){return null;}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        private static void hasConfig(object config){}
        /// <summary>
        /// Initialize configuration for this class. a typical example:
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.awesome.Class', {
        /// // The default config
        /// config: {
        /// name: 'Awesome',
        /// isAwesome: true
        /// },
        /// constructor: function(config) {
        /// this.initConfig(config);
        /// }
        /// });
        /// var awesome = new My.awesome.Class({
        /// name: 'Super Awesome'
        /// });
        /// alert(awesome.getName()); // 'Super Awesome'
        /// </code>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Base">Ext.Base</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        protected static Ext.Base initConfig(object config){return null;}
        /// <summary>
        /// Creates a new Task instance. These instances can
        /// be easily started and stopped.
        /// </summary>
        /// <param name="config"><p>The config object. For details on the supported properties,
        /// see <see cref="Ext.util.TaskRunner.start">start</see>.</p>
        /// </param>
        public static void newTask(object config){}
        /// <summary>
        /// Parameters<li><span>names</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>callback</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="names">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        private static void onConfigUpdate(object names, object callback, object scope){}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>applyIfNotSet</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <param name="applyIfNotSet">
        /// </param>
        private static void setConfig(object config, object applyIfNotSet){}
        /// <summary>
        /// Starts a new task.
        /// Before each invocation, Ext injects the property <c>taskRunCount</c> into the task object
        /// so that calculations based on the repeat count can be performed.
        /// The returned task will contain a <c>destroy</c> method that can be used to destroy the
        /// task and cancel further calls. This is equivalent to the <see cref="Ext.util.TaskRunner.stop">stop</see> method.
        /// </summary>
        /// <param name="task"><p>A config object that supports the following properties:</p>
        /// <ul><li><span>run</span> : <see cref="Function">Function</see><div><p>The function to execute each time the task is invoked. The
        /// function will be called at each interval and passed the <c>args</c> argument if specified,
        /// and the current invocation count if not.</p>
        /// <p>If a particular scope (<c>this</c> reference) is required, be sure to specify it using
        /// the <c>scope</c> argument.</p>
        /// <h3>Parameters</h3><ul></ul><h3>Returns</h3><ul><li><span><see cref="bool">Boolean</see></span><div><p><c>false</c> from this function to terminate the task.</p>
        /// </div></li></ul></div></li><li><span>onError</span> : <see cref="Function">Function</see><div><p>The function to execute in case of unhandled
        /// error on task.run.</p>
        /// </div></li><li><span>interval</span> : <see cref="Number">Number</see><div><p>The frequency in milliseconds with which the task
        /// should be invoked.</p>
        /// </div></li><li><span>args</span> : <see cref="Object">Object</see>[]<div><p>An array of arguments to be passed to the function
        /// specified by <c>run</c>. If not specified, the current invocation count is passed.</p>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which to execute the
        /// <c>run</c> function. Defaults to the task config object.</p>
        /// </div></li><li><span>duration</span> : <see cref="Number">Number</see><div><p>The length of time in milliseconds to invoke the task
        /// before stopping automatically (defaults to indefinite).</p>
        /// </div></li><li><span>repeat</span> : <see cref="Number">Number</see><div><p>The number of times to invoke the task before stopping
        /// automatically (defaults to indefinite).</p>
        /// </div></li></ul></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The task</p>
        /// </div>
        /// </returns>
        public static object start(object task=null){return null;}
        /// <summary>
        /// Get the reference to the class from which this object was instantiated. Note that unlike self,
        /// this.statics() is scope-independent and it always returns the class from which it was called, regardless of what
        /// this points to during run-time
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// totalCreated: 0,
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// var statics = this.statics();
        /// alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
        /// // equivalent to: My.Cat.speciesName
        /// alert(this.self.speciesName);   // dependent on 'this'
        /// statics.totalCreated++;
        /// },
        /// clone: function() {
        /// var cloned = new this.self;                      // dependent on 'this'
        /// cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
        /// return cloned;
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// },
        /// constructor: function() {
        /// this.callParent();
        /// }
        /// });
        /// var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));         // alerts 'My.SnowLeopard'
        /// alert(clone.groupName);                 // alerts 'Cat'
        /// alert(My.Cat.totalCreated);             // alerts 3
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Class">Ext.Class</see></span><div>
        /// </div>
        /// </returns>
        protected static Class statics(){return null;}
        /// <summary>
        /// Stops an existing running task.
        /// </summary>
        /// <param name="task"><p>The task to stop</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The task</p>
        /// </div>
        /// </returns>
        public static object stop(object task){return null;}
        /// <summary>
        /// Stops all tasks that are currently running.
        /// </summary>
        public static void stopAll(){}
        public TaskManager(TaskManagerConfig config){}
        public TaskManager(params object[] args){}
    }
    #endregion
    #region TaskManagerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TaskManagerConfig : Ext.util.TaskRunnerConfig
    {
        public TaskManagerConfig(params object[] args){}
    }
    #endregion
    #region TaskManagerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TaskManagerEvents : Ext.util.TaskRunnerEvents
    {
        public TaskManagerEvents(params object[] args){}
    }
    #endregion
}
