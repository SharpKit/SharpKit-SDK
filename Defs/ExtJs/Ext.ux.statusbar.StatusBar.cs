//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.ux.statusbar
{
    #region StatusBar
    /// <inheritdocs />
    /// <summary>
    /// <p>Basic status bar component that can be used as the bottom toolbar of any <see cref="Ext.panel.Panel">Ext.Panel</see>.  In addition to
    /// supporting the standard <see cref="Ext.toolbar.Toolbar">Ext.toolbar.Toolbar</see> interface for adding buttons, menus and other items, the StatusBar
    /// provides a greedy status element that can be aligned to either side and has convenient methods for setting the
    /// status text and icon.  You can also indicate that something is processing using the <see cref="Ext.ux.statusbar.StatusBar.showBusy">showBusy</see> method.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.Panel</see>', {
    /// title: 'StatusBar',
    /// // etc.
    /// bbar: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.statusbar.StatusBar">Ext.ux.StatusBar</see>', {
    /// id: 'my-status',
    /// // defaults to use when the status is cleared:
    /// defaultText: 'Default status text',
    /// defaultIconCls: 'default-icon',
    /// // values to set initially:
    /// text: 'Ready',
    /// iconCls: 'ready-icon',
    /// // any standard Toolbar items:
    /// items: [{
    /// text: 'A Button'
    /// }, '-', 'Plain Text']
    /// })
    /// });
    /// // Update the status bar later in code:
    /// var sb = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('my-status');
    /// sb.setStatus({
    /// text: 'OK',
    /// iconCls: 'ok-icon',
    /// clear: true // auto-clear after a set interval
    /// });
    /// // Set the status bar to show that something is processing:
    /// sb.showBusy();
    /// // processing....
    /// sb.clearStatus(); // once completeed
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class StatusBar : Ext.toolbar.Toolbar
    {
        /// <summary>
        /// The number of milliseconds to wait after setting the status via
        /// setStatus before automatically clearing the status text and icon.
        /// Note that this only applies when passing the clear argument to setStatus
        /// since that is the only way to defer clearing the status.  This can
        /// be overridden by specifying a different wait value in setStatus.
        /// Calls to clearStatus always clear the status bar immediately and ignore this value.
        /// Defaults to: <c>5000</c>
        /// </summary>
        public JsNumber autoClear;
        /// <summary>
        /// The default iconCls applied when calling showBusy.
        /// It can be overridden at any time by passing the iconCls argument into showBusy.
        /// Defaults to: <c>&quot;x-status-busy&quot;</c>
        /// </summary>
        public JsString busyIconCls;
        /// <summary>
        /// The default text applied when calling showBusy.
        /// It can be overridden at any time by passing the text argument into showBusy.
        /// Defaults to: <c>&quot;Loading...&quot;</c>
        /// </summary>
        public JsString busyText;
        /// <summary>
        /// The default iconCls value (see the iconCls docs for additional details about customizing the icon).
        /// This will be used anytime the status bar is cleared with the useDefaults:true option.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString defaultIconCls;
        /// <summary>
        /// The default text value.  This will be used anytime the status bar is cleared with the
        /// useDefaults:true option.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString defaultText;
        /// <summary>
        /// The text string to use if no text has been set. If there are no other items in
        /// the toolbar using an empty string ('') for this value would end up in the toolbar
        /// height collapsing since the empty string will not maintain the toolbar height.
        /// Use '' if the toolbar should collapse in height vertically when no text is
        /// specified and there are no other items in the toolbar.
        /// Defaults to: <c>&quot;&amp;#160;&quot;</c>
        /// </summary>
        public JsString emptyText;
        /// <summary>
        /// A CSS class that will be initially set as the status bar icon and is
        /// expected to provide a background image.
        /// Example usage:
        /// <code>// Example CSS rule:
        /// .x-statusbar .x-status-custom {
        /// padding-left: 25px;
        /// background: transparent url(images/custom-icon.gif) no-repeat 3px 2px;
        /// }
        /// // Setting a default icon:
        /// var sb = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see>', {
        /// defaultIconCls: 'x-status-custom'
        /// });
        /// // Changing the icon:
        /// sb.setStatus({
        /// text: 'New status',
        /// iconCls: 'x-status-custom'
        /// });
        /// </code>
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString iconCls;
        /// <summary>
        /// The alignment of the status element within the overall StatusBar layout.  When the StatusBar is rendered,
        /// it creates an internal div containing the status text and icon.  Any additional Toolbar items added in the
        /// StatusBar's items config, or added via add or any of the supported add* methods, will be
        /// rendered, in added order, to the opposite side.  The status element is greedy, so it will automatically
        /// expand to take up all sapce left over by any other items.  Example usage:
        /// <code>// Create a left-aligned status bar containing a button,
        /// // separator and text item that will be right-aligned (default):
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.Panel</see>', {
        /// title: 'StatusBar',
        /// // etc.
        /// bbar: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see>', {
        /// defaultText: 'Default status text',
        /// id: 'status-id',
        /// items: [{
        /// text: 'A Button'
        /// }, '-', 'Plain Text']
        /// })
        /// });
        /// // By adding the statusAlign config, this will create the
        /// // exact same toolbar, except the status and toolbar item
        /// // layout will be reversed from the previous example:
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.Panel</see>', {
        /// title: 'StatusBar',
        /// // etc.
        /// bbar: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see>', {
        /// defaultText: 'Default status text',
        /// id: 'status-id',
        /// statusAlign: 'right',
        /// items: [{
        /// text: 'A Button'
        /// }, '-', 'Plain Text']
        /// })
        /// });
        /// </code>
        /// </summary>
        public JsString statusAlign;
        /// <summary>
        /// A string that will be initially set as the status message.  This string
        /// will be set as innerHTML (html tags are accepted) for the toolbar item.
        /// If not specified, the value set for defaultText will be used.
        /// </summary>
        public JsString text;
        /// <summary>
        /// Clears the status text and iconCls. Also supports clearing via an optional fade out animation.
        /// </summary>
        /// <param name="config"><p>A config object containing any or all of the following properties.  If this
        /// object is not specified the status will be cleared using the defaults below:</p>
        /// <ul><li><span>anim</span> : <see cref="bool">Boolean</see><div><p>True to clear the status by fading out the status element (defaults
        /// to false which clears immediately).</p>
        /// </div></li><li><span>useDefaults</span> : <see cref="bool">Boolean</see><div><p>True to reset the text and icon using <see cref="Ext.ux.statusbar.StatusBarConfig.defaultText">defaultText</see> and
        /// <see cref="Ext.ux.statusbar.StatusBarConfig.defaultIconCls">defaultIconCls</see> (defaults to false which sets the text to '' and removes any existing icon class).</p>
        /// </div></li></ul></param>
        /// <returns>
        /// <span><see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public StatusBar clearStatus(object config=null){return null;}
        /// <summary>
        /// Returns the current status text.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The status text</p>
        /// </div>
        /// </returns>
        public JsString getText(){return null;}
        /// <summary>
        /// Convenience method for setting the status icon directly.  For more flexible options see setStatus.
        /// See iconCls for complete details about customizing the icon.
        /// </summary>
        /// <param name="iconCls"><p>The icon class to set (defaults to '', and any current icon class is removed)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public StatusBar setIcon(object iconCls=null){return null;}
        /// <summary>
        /// Sets the status text and/or iconCls. Also supports automatically clearing the
        /// status that was set after a specified interval.
        /// Example usage:
        /// <code>// Simple call to update the text
        /// statusBar.setStatus('New status');
        /// // Set the status and icon, auto-clearing with default options:
        /// statusBar.setStatus({
        /// text: 'New status',
        /// iconCls: 'x-status-custom',
        /// clear: true
        /// });
        /// // Auto-clear with custom options:
        /// statusBar.setStatus({
        /// text: 'New status',
        /// iconCls: 'x-status-custom',
        /// clear: {
        /// wait: 8000,
        /// anim: false,
        /// useDefaults: false
        /// }
        /// });
        /// </code>
        /// </summary>
        /// <param name="config"><p>A config object specifying what status to set, or a string assumed
        /// to be the status text (and all other options are defaulted as explained below). A config
        /// object containing any or all of the following properties can be passed:</p>
        /// <ul><li><span>text</span> : <see cref="String">String</see><div><p>The status text to display.  If not specified, any current
        /// status text will remain unchanged.</p>
        /// </div></li><li><span>iconCls</span> : <see cref="String">String</see><div><p>The CSS class used to customize the status icon (see
        /// <see cref="Ext.ux.statusbar.StatusBarConfig.iconCls">iconCls</see> for details). If not specified, any current iconCls will remain unchanged.</p>
        /// </div></li><li><span>clear</span> : <see cref="bool">Boolean</see>/<see cref="Number">Number</see>/<see cref="Object">Object</see><div><p>Allows you to set an internal callback that will
        /// automatically clear the status text and iconCls after a specified amount of time has passed. If clear is not
        /// specified, the new status will not be auto-cleared and will stay until updated again or cleared using
        /// <see cref="Ext.ux.statusbar.StatusBar.clearStatus">clearStatus</see>. If <c>true</c> is passed, the status will be cleared using <see cref="Ext.ux.statusbar.StatusBarConfig.autoClear">autoClear</see>,
        /// <see cref="Ext.ux.statusbar.StatusBarConfig.defaultText">defaultText</see> and <see cref="Ext.ux.statusbar.StatusBarConfig.defaultIconCls">defaultIconCls</see> via a fade out animation. If a numeric value is passed,
        /// it will be used as the callback interval (in milliseconds), overriding the <see cref="Ext.ux.statusbar.StatusBarConfig.autoClear">autoClear</see> value.
        /// All other options will be defaulted as with the boolean option.  To customize any other options,
        /// you can pass an object in the format:</p>
        /// <ul><li><span>wait</span> : <see cref="Number">Number</see><div><p>The number of milliseconds to wait before clearing
        /// (defaults to <see cref="Ext.ux.statusbar.StatusBarConfig.autoClear">autoClear</see>).</p>
        /// </div></li><li><span>anim</span> : <see cref="bool">Boolean</see><div><p>False to clear the status immediately once the callback
        /// executes (defaults to true which fades the status out).</p>
        /// </div></li><li><span>useDefaults</span> : <see cref="bool">Boolean</see><div><p>False to completely clear the status text and iconCls
        /// (defaults to true which uses <see cref="Ext.ux.statusbar.StatusBarConfig.defaultText">defaultText</see> and <see cref="Ext.ux.statusbar.StatusBarConfig.defaultIconCls">defaultIconCls</see>).</p>
        /// </div></li></ul></div></li></ul></param>
        /// <returns>
        /// <span><see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public StatusBar setStatus(object config=null){return null;}
        /// <summary>
        /// Convenience method for setting the status text directly.  For more flexible options see setStatus.
        /// </summary>
        /// <param name="text"><p>The text to set (defaults to '')</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public StatusBar setText(object text=null){return null;}
        /// <summary>
        /// Convenience method for setting the status text and icon to special values that are pre-configured to indicate
        /// a "busy" state, usually for loading or processing activities.
        /// </summary>
        /// <param name="config"><p>A config object in the same format supported by <see cref="Ext.ux.statusbar.StatusBar.setStatus">setStatus</see>, or a
        /// string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
        /// <c>text</c> and/or <c>iconCls</c> properties on the config to override the default <see cref="Ext.ux.statusbar.StatusBarConfig.busyText">busyText</see>
        /// and <see cref="Ext.ux.statusbar.StatusBarConfig.busyIconCls">busyIconCls</see> settings. If the config argument is not specified, <see cref="Ext.ux.statusbar.StatusBarConfig.busyText">busyText</see> and
        /// <see cref="Ext.ux.statusbar.StatusBarConfig.busyIconCls">busyIconCls</see> will be used in conjunction with all of the default options for <see cref="Ext.ux.statusbar.StatusBar.setStatus">setStatus</see>.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public StatusBar showBusy(object config=null){return null;}
        public StatusBar(StatusBarConfig config){}
        public StatusBar(){}
        public StatusBar(params object[] args){}
    }
    #endregion
    #region StatusBarConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class StatusBarConfig : Ext.toolbar.ToolbarConfig
    {
        /// <summary>
        /// The number of milliseconds to wait after setting the status via
        /// setStatus before automatically clearing the status text and icon.
        /// Note that this only applies when passing the clear argument to setStatus
        /// since that is the only way to defer clearing the status.  This can
        /// be overridden by specifying a different wait value in setStatus.
        /// Calls to clearStatus always clear the status bar immediately and ignore this value.
        /// Defaults to: <c>5000</c>
        /// </summary>
        public JsNumber autoClear;
        /// <summary>
        /// The default iconCls applied when calling showBusy.
        /// It can be overridden at any time by passing the iconCls argument into showBusy.
        /// Defaults to: <c>&quot;x-status-busy&quot;</c>
        /// </summary>
        public JsString busyIconCls;
        /// <summary>
        /// The default text applied when calling showBusy.
        /// It can be overridden at any time by passing the text argument into showBusy.
        /// Defaults to: <c>&quot;Loading...&quot;</c>
        /// </summary>
        public JsString busyText;
        /// <summary>
        /// The default iconCls value (see the iconCls docs for additional details about customizing the icon).
        /// This will be used anytime the status bar is cleared with the useDefaults:true option.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString defaultIconCls;
        /// <summary>
        /// The default text value.  This will be used anytime the status bar is cleared with the
        /// useDefaults:true option.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString defaultText;
        /// <summary>
        /// The text string to use if no text has been set. If there are no other items in
        /// the toolbar using an empty string ('') for this value would end up in the toolbar
        /// height collapsing since the empty string will not maintain the toolbar height.
        /// Use '' if the toolbar should collapse in height vertically when no text is
        /// specified and there are no other items in the toolbar.
        /// Defaults to: <c>&quot;&amp;#160;&quot;</c>
        /// </summary>
        public JsString emptyText;
        /// <summary>
        /// A CSS class that will be initially set as the status bar icon and is
        /// expected to provide a background image.
        /// Example usage:
        /// <code>// Example CSS rule:
        /// .x-statusbar .x-status-custom {
        /// padding-left: 25px;
        /// background: transparent url(images/custom-icon.gif) no-repeat 3px 2px;
        /// }
        /// // Setting a default icon:
        /// var sb = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see>', {
        /// defaultIconCls: 'x-status-custom'
        /// });
        /// // Changing the icon:
        /// sb.setStatus({
        /// text: 'New status',
        /// iconCls: 'x-status-custom'
        /// });
        /// </code>
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString iconCls;
        /// <summary>
        /// The alignment of the status element within the overall StatusBar layout.  When the StatusBar is rendered,
        /// it creates an internal div containing the status text and icon.  Any additional Toolbar items added in the
        /// StatusBar's items config, or added via add or any of the supported add* methods, will be
        /// rendered, in added order, to the opposite side.  The status element is greedy, so it will automatically
        /// expand to take up all sapce left over by any other items.  Example usage:
        /// <code>// Create a left-aligned status bar containing a button,
        /// // separator and text item that will be right-aligned (default):
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.Panel</see>', {
        /// title: 'StatusBar',
        /// // etc.
        /// bbar: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see>', {
        /// defaultText: 'Default status text',
        /// id: 'status-id',
        /// items: [{
        /// text: 'A Button'
        /// }, '-', 'Plain Text']
        /// })
        /// });
        /// // By adding the statusAlign config, this will create the
        /// // exact same toolbar, except the status and toolbar item
        /// // layout will be reversed from the previous example:
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.Panel</see>', {
        /// title: 'StatusBar',
        /// // etc.
        /// bbar: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.ux.statusbar.StatusBar">Ext.ux.statusbar.StatusBar</see>', {
        /// defaultText: 'Default status text',
        /// id: 'status-id',
        /// statusAlign: 'right',
        /// items: [{
        /// text: 'A Button'
        /// }, '-', 'Plain Text']
        /// })
        /// });
        /// </code>
        /// </summary>
        public JsString statusAlign;
        /// <summary>
        /// A string that will be initially set as the status message.  This string
        /// will be set as innerHTML (html tags are accepted) for the toolbar item.
        /// If not specified, the value set for defaultText will be used.
        /// </summary>
        public JsString text;
        public StatusBarConfig(params object[] args){}
    }
    #endregion
    #region StatusBarEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class StatusBarEvents : Ext.toolbar.ToolbarEvents
    {
        public StatusBarEvents(params object[] args){}
    }
    #endregion
}
