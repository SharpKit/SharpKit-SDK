//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.dd
{
    #region DragDrop
    /// <inheritdocs />
    /// <summary>
    /// <p>Defines the interface and base operation of items that that can be
    /// dragged or can be drop targets.  It was designed to be extended, overriding
    /// the event handlers for startDrag, onDrag, onDragOver and onDragOut.
    /// Up to three html elements can be associated with a DragDrop instance:</p>
    /// <ul>
    /// <li><p>linked element: the element that is passed into the constructor.
    /// This is the element which defines the boundaries for interaction with
    /// other DragDrop objects.</p></li>
    /// <li><p>handle element(s): The drag operation only occurs if the element that
    /// was clicked matches a handle element.  By default this is the linked
    /// element, but there are times that you will want only a portion of the
    /// linked element to initiate the drag operation, and the setHandleElId()
    /// method provides a way to define this.</p></li>
    /// <li><p>drag element: this represents the element that would be moved along
    /// with the cursor during a drag operation.  By default, this is the linked
    /// element itself as in <see cref="Ext.dd.DD">Ext.dd.DD</see>.  setDragElId() lets you define
    /// a separate element that would be moved, as in <see cref="Ext.dd.DDProxy">Ext.dd.DDProxy</see>.</p></li>
    /// </ul>
    /// <p>This class should not be instantiated until the onload event to ensure that
    /// the associated elements are available.
    /// The following would define a DragDrop obj that would interact with any
    /// other DragDrop obj in the "group1" group:</p>
    /// <pre><code>dd = new <see cref="Ext.dd.DragDrop">Ext.dd.DragDrop</see>("div1", "group1");
    /// </code></pre>
    /// <p>Since none of the event handlers have been implemented, nothing would
    /// actually happen if you were to run the code above.  Normally you would
    /// override this class or one of the default implementations, but you can
    /// also override the methods you want on an instance of the class...</p>
    /// <pre><code>dd.onDragDrop = function(e, id) {
    /// alert("dd was dropped on " + id);
    /// }
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class DragDrop : Ext.Base
    {
        /// <summary>
        /// Internal typeof flag
        /// Defaults to: <c>true</c>
        /// </summary>
        private bool __ygDragDrop{get;set;}
        /// <summary>
        /// Cached reference to the linked element
        /// Defaults to: <c>null</c>
        /// </summary>
        private JsObject _domRef{get;set;}
        /// <summary>
        /// The available property is false until the linked dom element is accessible.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool available{get;set;}
        /// <summary>
        /// Configuration attributes passed into the constructor
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsObject config{get;set;}
        /// <summary>
        /// Set to true when horizontal contraints are applied
        /// Defaults to: <c>false</c>
        /// </summary>
        private bool constrainX{get;set;}
        /// <summary>
        /// Set to true when vertical contraints are applied
        /// Defaults to: <c>false</c>
        /// </summary>
        private bool constrainY{get;set;}
        /// <summary>
        /// Provides default constraint padding to "constrainTo" elements.
        /// Defaults to: <c>{left: 0, right: 0, top: 0, bottom: 0}</c>
        /// </summary>
        public JsObject defaultPadding{get;set;}
        /// <summary>
        /// The id of the element that will be dragged.  By default this is same
        /// as the linked element, but could be changed to another element. Ex:
        /// Ext.dd.DDProxy
        /// Defaults to: <c>null</c>
        /// </summary>
        private JsString dragElId{get;set;}
        /// <summary>
        /// The group defines a logical collection of DragDrop objects that are
        /// related.  Instances only get events when interacting with other
        /// DragDrop object in the same group.  This lets us define multiple
        /// groups using a single DragDrop subclass if we want.
        /// An object in the format {'group1':true, 'group2':true}
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsObject groups{get;set;}
        /// <summary>
        /// The ID of the element that initiates the drag operation.  By default
        /// this is the linked element, but could be changed to be a child of this
        /// element.  This lets us do things like only starting the drag when the
        /// header element within the linked html element is clicked.
        /// Defaults to: <c>null</c>
        /// </summary>
        private JsString handleElId{get;set;}
        /// <summary>
        /// By default, drags can only be initiated if the mousedown occurs in the
        /// region the linked element is.  This is done in part to work around a
        /// bug in some browsers that mis-report the mousedown if the previous
        /// mouseup happened outside of the window.  This property is set to true
        /// if outer handles are defined. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hasOuterHandles{get;set;}
        /// <summary>
        /// The id of the element associated with this object.  This is what we
        /// refer to as the "linked element" because the size and position of
        /// this element is used to determine when the drag and drop objects have
        /// interacted.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString id{get;set;}
        /// <summary>
        /// Set to false to enable a DragDrop object to fire drag events while dragging
        /// over its own Element. Defaults to true - DragDrop objects do not by default
        /// fire drag events to themselves.
        /// </summary>
        public bool ignoreSelf{get;set;}
        /// <summary>
        /// An Array of CSS class names for elements to be considered in valid as drag handles.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString invalidHandleClasses{get;set;}
        /// <summary>
        /// An object who's property names identify the IDs of elements to be considered invalid as drag handles.
        /// A non-null property value identifies the ID as invalid. For example, to prevent
        /// dragging from being initiated on element ID "foo", use:
        /// <code>{
        /// foo: true
        /// }
        /// </code>
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsObject invalidHandleIds{get;set;}
        /// <summary>
        /// An object who's property names identify HTML tags to be considered invalid as drag handles.
        /// A non-null property value identifies the tag as invalid. Defaults to the
        /// following value which prevents drag operations from being initiated by &lt;a&gt; elements:
        /// <code>{
        /// A: "A"
        /// }
        /// </code>
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsObject invalidHandleTypes{get;set;}
        /// <summary>
        /// By default, all instances can be a drop target.  This can be disabled by
        /// setting isTarget to false.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isTarget{get;set;}
        /// <summary>
        /// Individual drag/drop instances can be locked.  This will prevent
        /// onmousedown start drag.
        /// Defaults to: <c>false</c>
        /// </summary>
        private bool locked{get;set;}
        /// <summary>
        /// Maintain offsets when we resetconstraints.  Set to true when you want
        /// the position of the element relative to its parent to stay the same
        /// when the page changes
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool maintainOffset{get;set;}
        /// <summary>
        /// The right constraint
        /// Defaults to: <c>0</c>
        /// </summary>
        private JsNumber maxX{get;set;}
        /// <summary>
        /// The down constraint
        /// Defaults to: <c>0</c>
        /// </summary>
        private JsNumber maxY{get;set;}
        /// <summary>
        /// The left constraint
        /// Defaults to: <c>0</c>
        /// </summary>
        private JsNumber minX{get;set;}
        /// <summary>
        /// The up constraint
        /// Defaults to: <c>0</c>
        /// </summary>
        private JsNumber minY{get;set;}
        /// <summary>
        /// When set to true, other DD objects in cooperating DDGroups do not receive
        /// notification events when this DD object is dragged over them.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool moveOnly{get;set;}
        /// <summary>
        /// The padding configured for this drag and drop object for calculating
        /// the drop zone intersection with this object.
        /// An array containing the 4 padding values: [top, right, bottom, left]
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsNumber padding{get;set;}
        /// <summary>
        /// By default the drag and drop instance will only respond to the primary
        /// button click (left button for a right-handed mouse).  Set to true to
        /// allow drag and drop to start with any mouse click that is propogated
        /// by the browser
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool primaryButtonOnly{get;set;}
        /// <summary>
        /// The linked element's absolute X position at the time the drag was
        /// started
        /// Defaults to: <c>0</c>
        /// </summary>
        private JsNumber startPageX{get;set;}
        /// <summary>
        /// The linked element's absolute X position at the time the drag was
        /// started
        /// Defaults to: <c>0</c>
        /// </summary>
        private JsNumber startPageY{get;set;}
        /// <summary>
        /// Array of pixel locations the element will snap to if we specified a
        /// horizontal graduation/interval.  This array is generated automatically
        /// when you define a tick interval.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsNumber xTicks{get;set;}
        /// <summary>
        /// Array of pixel locations the element will snap to if we specified a
        /// vertical graduation/interval.  This array is generated automatically
        /// when you define a tick interval.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsNumber yTicks{get;set;}
        /// <summary>
        /// Creates new DragDrop.
        /// </summary>
        /// <param name="id"><p>of the element that is linked to this instance</p>
        /// </param>
        /// <param name="sGroup"><p>the group of related DragDrop objects</p>
        /// </param>
        /// <param name="config"><p>an object containing configurable attributes.
        /// Valid properties for DragDrop:</p>
        /// <ul>
        /// <li>padding</li>
        /// <li>isTarget</li>
        /// <li>maintainOffset</li>
        /// <li>primaryButtonOnly</li>
        /// </ul>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public DragDrop(JsString id, JsString sGroup, object config){}
        /// <summary>
        /// Lets you specify a css class of elements that will not initiate a drag
        /// </summary>
        /// <param name="cssClass"><p>the class of the elements you wish to ignore</p>
        /// </param>
        public void addInvalidHandleClass(JsString cssClass){}
        /// <summary>
        /// Lets you to specify an element id for a child of a drag handle
        /// that should not initiate a drag
        /// </summary>
        /// <param name="id"><p>the element id of the element you wish to ignore</p>
        /// </param>
        public void addInvalidHandleId(JsString id){}
        /// <summary>
        /// Allows you to specify a tag name that should not start a drag operation
        /// when clicked.  This is designed to facilitate embedding links within a
        /// drag handle that do something other than start the drag.
        /// </summary>
        /// <param name="tagName"><p>the type of element to exclude</p>
        /// </param>
        public void addInvalidHandleType(JsString tagName){}
        /// <summary>
        /// Adds this instance to a group of related drag/drop objects.  All
        /// instances belong to at least one group, and can belong to as many
        /// groups as needed.
        /// </summary>
        /// <param name="sGroup"><p>the name of the group</p>
        /// </param>
        public void addToGroup(JsString sGroup){}
        /// <summary>
        /// Applies the configuration parameters that were passed into the constructor.
        /// This is supposed to happen at each level through the inheritance chain.  So
        /// a DDProxy implentation will execute apply config on DDProxy, DD, and
        /// DragDrop in order to get all of the parameters that are available in
        /// each object.
        /// </summary>
        public void applyConfig(){}
        /// <summary>
        /// Code that executes immediately before the onDrag event
        /// </summary>
        /// <param name="e">
        /// </param>
        private void b4Drag(object e){}
        /// <summary>
        /// Code that executes immediately before the onDragDrop event
        /// </summary>
        /// <param name="e">
        /// </param>
        private void b4DragDrop(object e){}
        /// <summary>
        /// Code that executes immediately before the onDragOut event
        /// </summary>
        /// <param name="e">
        /// </param>
        private void b4DragOut(object e){}
        /// <summary>
        /// Code that executes immediately before the onDragOver event
        /// </summary>
        /// <param name="e">
        /// </param>
        private void b4DragOver(object e){}
        /// <summary>
        /// Code that executes immediately before the endDrag event
        /// </summary>
        /// <param name="e">
        /// </param>
        private void b4EndDrag(object e){}
        /// <summary>
        /// Code executed immediately before the onMouseDown event
        /// </summary>
        /// <param name="e"><p>the mousedown event</p>
        /// </param>
        private void b4MouseDown(object e){}
        /// <summary>
        /// Code that executes immediately before the startDrag event
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        private void b4StartDrag(object x, object y){}
        /// <summary>
        /// Clears any constraints applied to this instance.  Also clears ticks
        /// since they can't exist independent of a constraint at this time.
        /// </summary>
        public void clearConstraints(){}
        /// <summary>
        /// Clears any tick interval defined for this instance
        /// </summary>
        public void clearTicks(){}
        /// <summary>
        /// Initializes the drag drop object's constraints to restrict movement to a certain element.
        /// Usage:
        /// <code>var dd = new <see cref="Ext.dd.DDProxy">Ext.dd.DDProxy</see>("dragDiv1", "proxytest",
        /// { dragElId: "existingProxyDiv" });
        /// dd.startDrag = function(){
        /// this.constrainTo("parent-id");
        /// };
        /// </code>
        /// Or you can initalize it using the <see cref="Ext.dom.Element">Ext.Element</see> object:
        /// <code><see cref="Ext.ExtContext.get">Ext.get</see>("dragDiv1").initDDProxy("proxytest", {dragElId: "existingProxyDiv"}, {
        /// startDrag : function(){
        /// this.constrainTo("parent-id");
        /// }
        /// });
        /// </code>
        /// </summary>
        /// <param name="constrainTo"><p>The element or element ID to constrain to.</p>
        /// </param>
        /// <param name="pad"><p>Pad provides a way to specify "padding" of the constraints,
        /// and can be either a number for symmetrical padding (4 would be equal to <c>{left:4, right:4, top:4, bottom:4}</c>) or
        /// an object containing the sides to pad. For example: <c>{right:10, bottom:10}</c></p>
        /// </param>
        /// <param name="inContent"><p>Constrain the draggable in the content box of the element (inside padding and borders)</p>
        /// </param>
        public void constrainTo(object constrainTo, object pad=null, object inContent=null){}
        /// <summary>
        /// Called when we are done dragging the object
        /// </summary>
        /// <param name="e"><p>the mouseup event</p>
        /// </param>
        public void endDrag(object e){}
        /// <summary>
        /// Returns a reference to the actual element to drag.  By default this is
        /// the same as the html element, but it can be assigned to another
        /// element. An example of this can be found in Ext.dd.DDProxy
        /// </summary>
        /// <returns>
        /// <span>HTMLElement</span><div><p>the html element</p>
        /// </div>
        /// </returns>
        public JsObject getDragEl(){return null;}
        /// <summary>
        /// Returns a reference to the linked element
        /// </summary>
        /// <returns>
        /// <span>HTMLElement</span><div><p>the html element</p>
        /// </div>
        /// </returns>
        public JsObject getEl(){return null;}
        /// <summary>
        /// Normally the drag element is moved pixel by pixel, but we can specify
        /// that it move a number of pixels at a time.  This method resolves the
        /// location when we have it set up like this.
        /// </summary>
        /// <param name="val"><p>where we want to place the object</p>
        /// </param>
        /// <param name="tickArray"><p>sorted array of valid points</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>the closest tick</p>
        /// </div>
        /// </returns>
        private JsNumber getTick(JsNumber val, JsArray<Number> tickArray){return null;}
        /// <summary>
        /// Called when this object is clicked
        /// </summary>
        /// <param name="e">
        /// </param>
        /// <param name="oDD"><p>the clicked dd object (this dd obj)</p>
        /// </param>
        private void handleMouseDown(object e, Ext.dd.DragDrop oDD){}
        /// <summary>
        /// Executed when the linked element is available
        /// </summary>
        private void handleOnAvailable(){}
        /// <summary>
        /// Sets up the DragDrop object.  Must be called in the constructor of any
        /// Ext.dd.DragDrop subclass
        /// </summary>
        /// <param name="id"><p>the id of the linked element</p>
        /// </param>
        /// <param name="sGroup"><p>the group of related items</p>
        /// </param>
        /// <param name="config"><p>configuration attributes</p>
        /// </param>
        public void init(JsString id, JsString sGroup, object config){}
        /// <summary>
        /// Initializes Targeting functionality only... the object does not
        /// get a mousedown handler.
        /// </summary>
        /// <param name="id"><p>the id of the linked element</p>
        /// </param>
        /// <param name="sGroup"><p>the group of related items</p>
        /// </param>
        /// <param name="config"><p>configuration attributes</p>
        /// </param>
        public void initTarget(JsString id, JsString sGroup, object config){}
        /// <summary>
        /// Returns true if this instance is locked, or the drag drop mgr is locked
        /// (meaning that all drag/drop is disabled on the page.)
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if this obj or all drag/drop is locked, else
        /// false</p>
        /// </div>
        /// </returns>
        public bool isLocked(){return false;}
        /// <summary>
        /// Checks the tag exclusion list to see if this click should be ignored
        /// </summary>
        /// <param name="node"><p>the HTMLElement to evaluate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if this is a valid tag type, false if not</p>
        /// </div>
        /// </returns>
        public bool isValidHandleChild(object node){return false;}
        /// <summary>
        /// Locks this instance
        /// </summary>
        public void @lock(){}
        /// <summary>
        /// Override the onAvailable method to do what is needed after the initial
        /// position was determined.
        /// </summary>
        public void onAvailable(){}
        /// <summary>
        /// Abstract method called during the onMouseMove event while dragging an
        /// object.
        /// </summary>
        /// <param name="e"><p>the mousemove event</p>
        /// </param>
        public void onDrag(object e){}
        /// <summary>
        /// Abstract method called when this item is dropped on another DragDrop
        /// obj
        /// </summary>
        /// <param name="e"><p>the mouseup event</p>
        /// </param>
        /// <param name="id"><p>In POINT mode, the element
        /// id this was dropped on.  In INTERSECT mode, an array of dd items this
        /// was dropped on.</p>
        /// </param>
        public void onDragDrop(object e, object id){}
        /// <summary>
        /// Abstract method called when this element fist begins hovering over
        /// another DragDrop obj
        /// </summary>
        /// <param name="e"><p>the mousemove event</p>
        /// </param>
        /// <param name="id"><p>In POINT mode, the element
        /// id this is hovering over.  In INTERSECT mode, an array of one or more
        /// dragdrop items being hovered over.</p>
        /// </param>
        public void onDragEnter(object e, object id){}
        /// <summary>
        /// Abstract method called when we are no longer hovering over an element
        /// </summary>
        /// <param name="e"><p>the mousemove event</p>
        /// </param>
        /// <param name="id"><p>In POINT mode, the element
        /// id this was hovering over.  In INTERSECT mode, an array of dd items
        /// that the mouse is no longer over.</p>
        /// </param>
        public void onDragOut(object e, object id){}
        /// <summary>
        /// Abstract method called when this element is hovering over another
        /// DragDrop obj
        /// </summary>
        /// <param name="e"><p>the mousemove event</p>
        /// </param>
        /// <param name="id"><p>In POINT mode, the element
        /// id this is hovering over.  In INTERSECT mode, an array of dd items
        /// being hovered over.</p>
        /// </param>
        public void onDragOver(object e, object id){}
        /// <summary>
        /// Abstract method called when this item is dropped on an area with no
        /// drop target
        /// </summary>
        /// <param name="e"><p>the mouseup event</p>
        /// </param>
        public void onInvalidDrop(object e){}
        /// <summary>
        /// Called when a drag/drop obj gets a mousedown
        /// </summary>
        /// <param name="e"><p>the mousedown event</p>
        /// </param>
        public void onMouseDown(object e){}
        /// <summary>
        /// Called when a drag/drop obj gets a mouseup
        /// </summary>
        /// <param name="e"><p>the mouseup event</p>
        /// </param>
        public void onMouseUp(object e){}
        /// <summary>
        /// Removes this instance from the supplied interaction group
        /// </summary>
        /// <param name="sGroup"><p>The group to drop</p>
        /// </param>
        public void removeFromGroup(JsString sGroup){}
        /// <summary>
        /// Unsets an invalid css class
        /// </summary>
        /// <param name="cssClass"><p>the class of the element(s) you wish to
        /// re-enable</p>
        /// </param>
        public void removeInvalidHandleClass(JsString cssClass){}
        /// <summary>
        /// Unsets an invalid handle id
        /// </summary>
        /// <param name="id"><p>the id of the element to re-enable</p>
        /// </param>
        public void removeInvalidHandleId(JsString id){}
        /// <summary>
        /// Unsets an excluded tag name set by addInvalidHandleType
        /// </summary>
        /// <param name="tagName"><p>the type of element to unexclude</p>
        /// </param>
        public void removeInvalidHandleType(JsString tagName){}
        /// <summary>
        /// Must be called if you manually reposition a dd element.
        /// </summary>
        /// <param name="maintainOffset">
        /// </param>
        public void resetConstraints(bool maintainOffset){}
        /// <summary>
        /// Allows you to specify that an element other than the linked element
        /// will be moved with the cursor during a drag
        /// </summary>
        /// <param name="id"><p>the id of the element that will be used to initiate the drag</p>
        /// </param>
        public void setDragElId(JsString id){}
        /// <summary>
        /// Allows you to specify a child of the linked element that should be
        /// used to initiate the drag operation.  An example of this would be if
        /// you have a content div with text and links.  Clicking anywhere in the
        /// content area would normally start the drag operation.  Use this method
        /// to specify that an element inside of the content div is the element
        /// that starts the drag operation.
        /// </summary>
        /// <param name="id"><p>the id of the element that will be used to
        /// initiate the drag.</p>
        /// </param>
        public void setHandleElId(JsString id){}
        /// <summary>
        /// Stores the initial placement of the linked element.
        /// </summary>
        /// <param name="diffX"><p>the X offset, default 0</p>
        /// </param>
        /// <param name="diffY"><p>the Y offset, default 0</p>
        /// </param>
        public void setInitPosition(JsNumber diffX, JsNumber diffY){}
        /// <summary>
        /// Allows you to set an element outside of the linked element as a drag
        /// handle
        /// </summary>
        /// <param name="id"><p>the id of the element that will be used to initiate the drag</p>
        /// </param>
        public void setOuterHandleElId(JsString id){}
        /// <summary>
        /// Configures the padding for the target zone in px.  Effectively expands
        /// (or reduces) the virtual object size for targeting calculations.
        /// Supports css-style shorthand; if only one parameter is passed, all sides
        /// will have that padding, and if only two are passed, the top and bottom
        /// will have the first param, the left and right the second.
        /// </summary>
        /// <param name="iTop"><p>Top pad</p>
        /// </param>
        /// <param name="iRight"><p>Right pad</p>
        /// </param>
        /// <param name="iBot"><p>Bot pad</p>
        /// </param>
        /// <param name="iLeft"><p>Left pad</p>
        /// </param>
        public void setPadding(JsNumber iTop, JsNumber iRight, JsNumber iBot, JsNumber iLeft){}
        /// <summary>
        /// Sets the start position of the element.  This is set when the obj
        /// is initialized, the reset when a drag is started.
        /// </summary>
        /// <param name="pos"><p>current position (from previous lookup)</p>
        /// </param>
        private void setStartPosition(object pos){}
        /// <summary>
        /// By default, the element can be dragged any place on the screen.  Use
        /// this method to limit the horizontal travel of the element.  Pass in
        /// 0,0 for the parameters if you want to lock the drag to the y axis.
        /// </summary>
        /// <param name="iLeft"><p>the number of pixels the element can move to the left</p>
        /// </param>
        /// <param name="iRight"><p>the number of pixels the element can move to the
        /// right</p>
        /// </param>
        /// <param name="iTickSize"><p>parameter for specifying that the
        /// element should move iTickSize pixels at a time.</p>
        /// </param>
        public void setXConstraint(JsNumber iLeft, JsNumber iRight, object iTickSize=null){}
        /// <summary>
        /// Creates the array of horizontal tick marks if an interval was specified
        /// in setXConstraint().
        /// </summary>
        /// <param name="iStartX">
        /// </param>
        /// <param name="iTickSize">
        /// </param>
        private void setXTicks(object iStartX, object iTickSize){}
        /// <summary>
        /// By default, the element can be dragged any place on the screen.  Set
        /// this to limit the vertical travel of the element.  Pass in 0,0 for the
        /// parameters if you want to lock the drag to the x axis.
        /// </summary>
        /// <param name="iUp"><p>the number of pixels the element can move up</p>
        /// </param>
        /// <param name="iDown"><p>the number of pixels the element can move down</p>
        /// </param>
        /// <param name="iTickSize"><p>parameter for specifying that the
        /// element should move iTickSize pixels at a time.</p>
        /// </param>
        public void setYConstraint(JsNumber iUp, JsNumber iDown, object iTickSize=null){}
        /// <summary>
        /// Creates the array of vertical tick marks if an interval was specified in
        /// setYConstraint().
        /// </summary>
        /// <param name="iStartY">
        /// </param>
        /// <param name="iTickSize">
        /// </param>
        private void setYTicks(object iStartY, object iTickSize){}
        /// <summary>
        /// Abstract method called after a drag/drop object is clicked
        /// and the drag or mousedown time thresholds have beeen met.
        /// </summary>
        /// <param name="X"><p>click location</p>
        /// </param>
        /// <param name="Y"><p>click location</p>
        /// </param>
        public void startDrag(JsNumber X, JsNumber Y){}
        /// <summary>
        /// toString method
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>string representation of the dd obj</p>
        /// </div>
        /// </returns>
        public JsString toString(){return null;}
        /// <summary>
        /// Unlocks this instace
        /// </summary>
        public void unlock(){}
        /// <summary>
        /// Removes all drag and drop hooks for this element
        /// </summary>
        public void unreg(){}
        public DragDrop(Ext.dd.DragDropConfig config){}
        public DragDrop(){}
        public DragDrop(params object[] args){}
    }
    #endregion
    #region DragDropConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DragDropConfig : Ext.BaseConfig
    {
        public DragDropConfig(params object[] args){}
    }
    #endregion
    #region DragDropEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DragDropEvents : Ext.BaseEvents
    {
        public DragDropEvents(params object[] args){}
    }
    #endregion
}
