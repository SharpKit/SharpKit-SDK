//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.container
{
    #region DockingContainer
    /// <summary>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial interface DockingContainer
    {
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        JsString @className{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject configMap{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        bool isInstance{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        Class self{get;set;}
        /// <summary>
        /// Adds docked item(s) to the container.
        /// </summary>
        /// <param name="component"><p>The Component or array of components to add. The components
        /// must include a 'dock' parameter on each component to indicate where it should be docked
        /// ('top', 'right', 'bottom', 'left').</p>
        /// </param>
        /// <param name="pos"><p>The index at which the Component will be added</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>The added components.</p>
        /// </div>
        /// </returns>
        Ext.Component[] addDocked(object component, object pos=null);
        /// <summary>
        /// Finds a docked component by id, itemId or position. Also see getDockedItems
        /// </summary>
        /// <param name="comp"><p>The id, itemId or position of the docked component (see <see cref="Ext.panel.AbstractPanel.getComponent">getComponent</see> for details)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The docked component (if found)</p>
        /// </div>
        /// </returns>
        Ext.Component getDockedComponent(object comp);
        /// <summary>
        /// Retrieves an array of all currently docked Components.
        /// For example to find a toolbar that has been docked at top:
        /// <code>panel.getDockedItems('toolbar[dock="top"]');
        /// </code>
        /// </summary>
        /// <param name="selector"><p>A <see cref="Ext.ComponentQuery">ComponentQuery</see> selector string to filter the returned items.</p>
        /// </param>
        /// <param name="beforeBody"><p>An optional flag to limit the set of items to only those
        /// before the body (true) or after the body (false). All components are returned by
        /// default.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>The array of docked components meeting the specified criteria.</p>
        /// </div>
        /// </returns>
        Ext.Component[] getDockedItems(JsString selector, object beforeBody=null);
        /// <summary>
        /// Inserts docked item(s) to the panel at the indicated position.
        /// </summary>
        /// <param name="pos"><p>The index at which the Component will be inserted</p>
        /// </param>
        /// <param name="component"><p>. The Component or array of components to add. The components
        /// must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right',
        /// 'bottom', 'left').</p>
        /// </param>
        void insertDocked(JsNumber pos, object component);
        /// <summary>
        /// Invoked after a docked item is added to the Panel.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="component">
        /// </param>
        void onDockedAdd(Ext.Component component);
        /// <summary>
        /// Invoked after a docked item is removed from the Panel.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="component">
        /// </param>
        void onDockedRemove(Ext.Component component);
        /// <summary>
        /// Removes the docked item from the panel.
        /// </summary>
        /// <param name="item"><p>. The Component to remove.</p>
        /// </param>
        /// <param name="autoDestroy"><p>Destroy the component after removal.</p>
        /// </param>
        void removeDocked(Ext.Component item, object autoDestroy=null);
    }
    #endregion
    #region DockingContainerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DockingContainerConfig : Ext.BaseConfig
    {
        /// <summary>
        /// This object holds the default weights applied to dockedItems that have no weight. These start with a
        /// weight of 1, to allow negative weights to insert before top items and are odd numbers
        /// so that even weights can be used to get between different dock orders.
        /// To make default docking order match border layout, do this:
        /// <code> Ext.panel.AbstractPanel.prototype.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };
        /// </code>
        /// Changing these defaults as above or individually on this object will effect all Panels.
        /// To change the defaults on a single panel, you should replace the entire object:
        /// <code> initComponent: function () {
        /// // NOTE: Don't change members of defaultDockWeights since the object is shared.
        /// this.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };
        /// this.callParent();
        /// }
        /// </code>
        /// To change only one of the default values, you do this:
        /// <code> initComponent: function () {
        /// // NOTE: Don't change members of defaultDockWeights since the object is shared.
        /// this.defaultDockWeights = <see cref="Ext.ExtContext.applyIf">Ext.applyIf</see>({ top: 10 }, this.defaultDockWeights);
        /// this.callParent();
        /// }
        /// </code>
        /// Defaults to: <c>{top: {render: 1, visual: 1}, left: {render: 3, visual: 5}, right: {render: 5, visual: 7}, bottom: {render: 7, visual: 3}}</c>
        /// </summary>
        public JsObject defaultDockWeights;
        public DockingContainerConfig(params object[] args){}
    }
    #endregion
    #region DockingContainerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DockingContainerEvents : Ext.BaseEvents
    {
        public DockingContainerEvents(params object[] args){}
    }
    #endregion
}
