//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data
{
    #region TreeStore
    /// <inheritdocs />
    /// <summary>
    /// <p>The TreeStore is a store implementation that is backed by by an <see cref="Ext.data.Tree">Ext.data.Tree</see>.
    /// It provides convenience methods for loading nodes, as well as the ability to use
    /// the hierarchical tree structure combined with a store. This class is generally used
    /// in conjunction with <see cref="Ext.tree.Panel">Ext.tree.Panel</see>. This class also relays many events from
    /// the Tree for convenience.</p>
    /// <h1>Using Models</h1>
    /// <p>If no Model is specified, an implicit model will be created that implements <see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see>.
    /// The standard Tree fields will also be copied onto the Model for maintaining their state. These fields are listed
    /// in the <see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see> documentation.</p>
    /// <h1>Reading Nested Data</h1>
    /// <p>For the tree to read nested data, the <see cref="Ext.data.reader.Reader">Ext.data.reader.Reader</see> must be configured with a root property,
    /// so the reader can find nested data for each node (if a root is not specified, it will default to
    /// 'children'). This will tell the tree to look for any nested tree nodes by the same keyword, i.e., 'children'.
    /// If a root is specified in the config make sure that any nested nodes with children have the same name.
    /// Note that setting <see cref="Ext.data.TreeStoreConfig.defaultRootProperty">defaultRootProperty</see> accomplishes the same thing.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class TreeStore : AbstractStore
    {
        /// <summary>
        /// Remove previously existing child nodes before loading.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool clearOnLoad;
        /// <summary>
        /// If true, when a node is reloaded, any records in the removed record collection that were previously descendants of the node being reloaded will be cleared from the removed collection.
        /// Only applicable if clearOnLoad is true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool clearRemovedOnLoad;
        /// <summary>
        /// The default root id.
        /// Defaults to: <c>&quot;root&quot;</c>
        /// </summary>
        public JsString defaultRootId;
        /// <summary>
        /// The root property to specify on the reader if one is not explicitly defined.
        /// Defaults to: <c>&quot;children&quot;</c>
        /// </summary>
        public JsString defaultRootProperty;
        /// <summary>
        /// Set to true to automatically prepend a leaf sorter.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool folderSort;
        /// <summary>
        /// The name of the parameter sent to the server which contains the identifier of the node.
        /// Defaults to: <c>&quot;node&quot;</c>
        /// </summary>
        public JsString nodeParam;
        /// <summary>
        /// The root node for this store. For example:
        /// <code>root: {
        /// expanded: true,
        /// text: "My Root",
        /// children: [
        /// { text: "Child 1", leaf: true },
        /// { text: "Child 2", expanded: true, children: [
        /// { text: "GrandChild", leaf: true }
        /// ] }
        /// ]
        /// }
        /// </code>
        /// Setting the <c>root</c> config option is the same as calling <see cref="Ext.data.TreeStore.setRootNode">setRootNode</see>.
        /// </summary>
        public object root;
        /// <summary>
        /// Removes all records that used to be descendants of the passed node from the removed array
        /// </summary>
        /// <param name="node">
        /// </param>
        private void clearRemoved(NodeInterface node){}
        /// <summary>
        /// Fills a node with a series of child records.
        /// </summary>
        /// <param name="node"><p>The node to fill</p>
        /// </param>
        /// <param name="newNodes"><p>The records to add</p>
        /// </param>
        private void fillNode(NodeInterface node, JsArray<Ext.data.Model> newNodes){}
        /// <summary>
        /// Returns the record node by id
        /// </summary>
        /// <param name="id">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see></span><div>
        /// </div>
        /// </returns>
        public NodeInterface getNodeById(object id){return null;}
        /// <summary>
        /// Returns the root node for this tree.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see></span><div>
        /// </div>
        /// </returns>
        public NodeInterface getRootNode(){return null;}
        /// <summary>
        /// Called before a node is collapsed.
        /// </summary>
        /// <param name="node"><p>The node being collapsed.</p>
        /// </param>
        /// <param name="callback"><p>The function to run after the collapse finishes</p>
        /// </param>
        /// <param name="scope"><p>The scope in which to run the callback function</p>
        /// </param>
        private void onBeforeNodeCollapse(NodeInterface node, System.Delegate callback, object scope){}
        /// <summary>
        /// Called before a node is expanded.
        /// </summary>
        /// <param name="node"><p>The node being expanded.</p>
        /// </param>
        /// <param name="callback"><p>The function to run after the expand finishes</p>
        /// </param>
        /// <param name="scope"><p>The scope in which to run the callback function</p>
        /// </param>
        private void onBeforeNodeExpand(NodeInterface node, System.Delegate callback, object scope){}
        /// <summary>
        /// Sets the root node for this store.  See also the root config option.
        /// </summary>
        /// <param name="root">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see></span><div><p>The new root</p>
        /// </div>
        /// </returns>
        public NodeInterface setRootNode(object root=null){return null;}
        /// <summary>
        /// Sorter function for sorting records in index order
        /// </summary>
        /// <param name="node1">
        /// </param>
        /// <param name="node2">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        private JsNumber sortByIndex(NodeInterface node1, NodeInterface node2){return null;}
        public TreeStore(TreeStoreConfig config){}
        public TreeStore(){}
        public TreeStore(params object[] args){}
    }
    #endregion
    #region TreeStoreConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TreeStoreConfig : AbstractStoreConfig
    {
        /// <summary>
        /// Remove previously existing child nodes before loading.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool clearOnLoad;
        /// <summary>
        /// If true, when a node is reloaded, any records in the removed record collection that were previously descendants of the node being reloaded will be cleared from the removed collection.
        /// Only applicable if clearOnLoad is true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool clearRemovedOnLoad;
        /// <summary>
        /// The default root id.
        /// Defaults to: <c>&quot;root&quot;</c>
        /// </summary>
        public JsString defaultRootId;
        /// <summary>
        /// The root property to specify on the reader if one is not explicitly defined.
        /// Defaults to: <c>&quot;children&quot;</c>
        /// </summary>
        public JsString defaultRootProperty;
        /// <summary>
        /// Set to true to automatically prepend a leaf sorter.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool folderSort;
        /// <summary>
        /// The name of the parameter sent to the server which contains the identifier of the node.
        /// Defaults to: <c>&quot;node&quot;</c>
        /// </summary>
        public JsString nodeParam;
        /// <summary>
        /// The root node for this store. For example:
        /// <code>root: {
        /// expanded: true,
        /// text: "My Root",
        /// children: [
        /// { text: "Child 1", leaf: true },
        /// { text: "Child 2", expanded: true, children: [
        /// { text: "GrandChild", leaf: true }
        /// ] }
        /// ]
        /// }
        /// </code>
        /// Setting the <c>root</c> config option is the same as calling <see cref="Ext.data.TreeStore.setRootNode">setRootNode</see>.
        /// </summary>
        public object root;
        public TreeStoreConfig(params object[] args){}
    }
    #endregion
    #region TreeStoreEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TreeStoreEvents : AbstractStoreEvents
    {
        /// <summary>
        /// Fires when a new child node is appended
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The newly appended node</p>
        /// </param>
        /// <param name="index"><p>The index of the newly appended node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void append(NodeInterface @this, NodeInterface node, JsNumber index, object eOpts){}
        /// <summary>
        /// Fires before a new child is appended, return false to cancel the append.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The child node to be appended</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeappend(NodeInterface @this, NodeInterface node, object eOpts){}
        /// <summary>
        /// Fires before this node is collapsed.
        /// </summary>
        /// <param name="this"><p>The collapsing node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecollapse(NodeInterface @this, object eOpts){}
        /// <summary>
        /// Fires before this node is expanded.
        /// </summary>
        /// <param name="this"><p>The expanding node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeexpand(NodeInterface @this, object eOpts){}
        /// <summary>
        /// Fires before a new child is inserted, return false to cancel the insert.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The child node to be inserted</p>
        /// </param>
        /// <param name="refNode"><p>The child node the node is being inserted before</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeinsert(NodeInterface @this, NodeInterface node, NodeInterface refNode, object eOpts){}
        /// <summary>
        /// Fires before this node is moved to a new location in the tree. Return false to cancel the move.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="oldParent"><p>The parent of this node</p>
        /// </param>
        /// <param name="newParent"><p>The new parent this node is moving to</p>
        /// </param>
        /// <param name="index"><p>The index it is being moved to</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforemove(NodeInterface @this, NodeInterface oldParent, NodeInterface newParent, JsNumber index, object eOpts){}
        /// <summary>
        /// Fires before a child is removed, return false to cancel the remove.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The child node to be removed</p>
        /// </param>
        /// <param name="isMove"><p><c>true</c> if the child node is being removed so it can be moved to another position in the tree.
        /// (a side effect of calling <see cref="Ext.data.NodeInterface.appendChild">appendChild</see> or
        /// <see cref="Ext.data.NodeInterface.insertBefore">insertBefore</see> with a node that already has a parentNode)</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeremove(NodeInterface @this, NodeInterface node, bool isMove, object eOpts){}
        /// <summary>
        /// Fires when this node is collapsed.
        /// </summary>
        /// <param name="this"><p>The collapsing node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void collapse(NodeInterface @this, object eOpts){}
        /// <summary>
        /// Fires when this node is expanded.
        /// </summary>
        /// <param name="this"><p>The expanding node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void expand(NodeInterface @this, object eOpts){}
        /// <summary>
        /// Fires when a new child node is inserted.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The child node inserted</p>
        /// </param>
        /// <param name="refNode"><p>The child node the node was inserted before</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void insert(NodeInterface @this, NodeInterface node, NodeInterface refNode, object eOpts){}
        /// <summary>
        /// Fires whenever the store reads data from a remote data source.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="node"><p>The node that was loaded.</p>
        /// </param>
        /// <param name="records"><p>An array of records.</p>
        /// </param>
        /// <param name="successful"><p>True if the operation was successful.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void load(TreeStore @this, NodeInterface node, JsArray<Ext.data.Model> records, bool successful, object eOpts){}
        /// <summary>
        /// Fires when this node is moved to a new location in the tree
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="oldParent"><p>The old parent of this node</p>
        /// </param>
        /// <param name="newParent"><p>The new parent of this node</p>
        /// </param>
        /// <param name="index"><p>The index it was moved to</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void move(NodeInterface @this, NodeInterface oldParent, NodeInterface newParent, JsNumber index, object eOpts){}
        /// <summary>
        /// Fires whenever the root node is changed in the tree.
        /// </summary>
        /// <param name="root"><p>The new root</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void rootchange(object root=null, object eOpts=null){}
        /// <summary>
        /// Fires when this node's childNodes are sorted.
        /// </summary>
        /// <param name="this"><p>This node.</p>
        /// </param>
        /// <param name="childNodes"><p>The childNodes of this node.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void sort(NodeInterface @this, JsArray<Ext.data.NodeInterface> childNodes, object eOpts){}
        public TreeStoreEvents(params object[] args){}
    }
    #endregion
}
