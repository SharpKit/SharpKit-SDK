//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.layout.component
{
    #region Dock
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>This ComponentLayout handles docking for Panels. It takes care of panels that are
    /// part of a ContainerLayout that sets this Panel's size and Panels that are part of
    /// an AutoContainerLayout in which this panel get his height based of the CSS or
    /// or its content.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Dock : Ext.layout.component.Component
    {
        /// <summary>
        /// Creates an axis object given the particulars.
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="contentSize">
        /// </param>
        /// <param name="sizeModel">
        /// </param>
        /// <param name="dockBegin">
        /// </param>
        /// <param name="dockEnd">
        /// </param>
        /// <param name="posProp">
        /// </param>
        /// <param name="sizeProp">
        /// </param>
        /// <param name="sizePropCap">
        /// </param>
        /// <param name="collapsedAxis">
        /// </param>
        private void createAxis(object ownerContext, object contentSize, object sizeModel, object dockBegin, object dockEnd, object posProp, object sizeProp, object sizePropCap, object collapsedAxis){}
        /// <summary>
        /// Docks a child item on the specified axis. This boils down to determining if the item
        /// is docked at the "beginning" of the axis ("left" if horizontal, "top" if vertical),
        /// the "end" of the axis ("right" if horizontal, "bottom" if vertical) or stretches
        /// along the axis ("top" or "bottom" if horizontal, "left" or "right" if vertical). It
        /// also has to differentiate between fixed and shrinkWrap sized dimensions.
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="axis">
        /// </param>
        /// <param name="backward">
        /// </param>
        /// <param name="forward">
        /// </param>
        private void dockChild(object ownerContext, object axis, object backward, object forward){}
        /// <summary>
        /// Docks an item on a fixed-size axis at the "beginning". The "beginning" of the horizontal
        /// axis is "left" and the vertical is "top". For a fixed-size axis, the size works from
        /// the outer element (the panel) towards the body.
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="itemContext">
        /// </param>
        /// <param name="item">
        /// </param>
        /// <param name="axis">
        /// </param>
        private void dockInwardBegin(object ownerContext, object itemContext, object item, object axis){}
        /// <summary>
        /// Docks an item on a fixed-size axis at the "end". The "end" of the horizontal axis is
        /// "right" and the vertical is "bottom".
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="itemContext">
        /// </param>
        /// <param name="item">
        /// </param>
        /// <param name="axis">
        /// </param>
        private void dockInwardEnd(object ownerContext, object itemContext, object item, object axis){}
        /// <summary>
        /// Docks an item on a shrinkWrap axis at the "beginning". The "beginning" of the horizontal
        /// axis is "left" and the vertical is "top". For a shrinkWrap axis, the size works from
        /// the body outward to the outermost element (the panel).
        /// During the docking process, coordinates are allowed to be negative. We start with the
        /// body at (0,0) so items docked "top" or "left" will simply be assigned negative x/y. In
        /// the <see cref="Ext.layout.component.Dock">finishPositions</see> method these are corrected and framing is added. This way
        /// the correction is applied as a simple translation of delta x/y on all coordinates to
        /// bring the origin back to (0,0).
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="itemContext">
        /// </param>
        /// <param name="item">
        /// </param>
        /// <param name="axis">
        /// </param>
        private void dockOutwardBegin(object ownerContext, object itemContext, object item, object axis){}
        /// <summary>
        /// Docks an item on a shrinkWrap axis at the "end". The "end" of the horizontal axis is
        /// "right" and the vertical is "bottom".
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="itemContext">
        /// </param>
        /// <param name="item">
        /// </param>
        /// <param name="axis">
        /// </param>
        private void dockOutwardEnd(object ownerContext, object itemContext, object item, object axis){}
        /// <summary>
        /// Docks an item that might stretch across an axis. This is done for dock "top" and
        /// "bottom" items on the horizontal axis and dock "left" and "right" on the vertical.
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="itemContext">
        /// </param>
        /// <param name="item">
        /// </param>
        /// <param name="axis">
        /// </param>
        private void dockStretch(object ownerContext, object itemContext, object item, object axis){}
        /// <summary>
        /// Finishes the calculation of an axis by determining its size. In non-shrink-wrap
        /// cases, this is also where we set the body size.
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="axis">
        /// </param>
        private void finishAxis(object ownerContext, object axis){}
        /// <summary>
        /// Finishes processing of each axis by applying the min/max size constraints.
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="horz">
        /// </param>
        /// <param name="vert">
        /// </param>
        private void finishConstraints(object ownerContext, object horz, object vert){}
        /// <summary>
        /// Finishes the calculation by setting positions on the body and all of the items.
        /// </summary>
        /// <param name="ownerContext">
        /// </param>
        /// <param name="horz">
        /// </param>
        /// <param name="vert">
        /// </param>
        private void finishPositions(object ownerContext, object horz, object vert){}
        /// <summary>
        /// Retrieve an ordered and/or filtered array of all docked Components.
        /// </summary>
        /// <param name="order"><p>The desired ordering of the items ('render' or 'visual').</p>
        /// <p>Defaults to: <c>&quot;render&quot;</c></p></param>
        /// <param name="beforeBody"><p>An optional flag to limit the set of items to only those
        /// before the body (true) or after the body (false). All components are returned by
        /// default.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>An array of components.</p>
        /// </div>
        /// </returns>
        protected Ext.Component[] getDockedItems(object order=null, object beforeBody=null){return null;}
        public Dock(DockConfig config){}
        public Dock(){}
        public Dock(params object[] args){}
    }
    #endregion
    #region DockConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DockConfig : Ext.layout.component.ComponentConfig
    {
        public DockConfig(params object[] args){}
    }
    #endregion
    #region DockEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DockEvents : Ext.layout.component.ComponentEvents
    {
        public DockEvents(params object[] args){}
    }
    #endregion
}
