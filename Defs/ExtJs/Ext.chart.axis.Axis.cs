//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.chart.axis
{
    #region Axis
    /// <inheritdocs />
    /// <summary>
    /// <p>Defines axis for charts. The axis position, type, style can be configured.
    /// The axes are defined in an axes array of configuration objects where the type,
    /// field, grid and other configuration options can be set. To know more about how
    /// to create a Chart please check the Chart class documentation. Here's an example for the axes part:
    /// An example of axis for a series (in this case for an area chart that has multiple layers of yFields) could be:</p>
    /// <pre><code>axes: [{
    /// type: 'Numeric',
    /// position: 'left',
    /// fields: ['data1', 'data2', 'data3'],
    /// title: 'Number of Hits',
    /// grid: {
    /// odd: {
    /// opacity: 1,
    /// fill: '#ddd',
    /// stroke: '#bbb',
    /// 'stroke-width': 1
    /// }
    /// },
    /// minimum: 0
    /// }, {
    /// type: 'Category',
    /// position: 'bottom',
    /// fields: ['name'],
    /// title: 'Month of the Year',
    /// grid: true,
    /// label: {
    /// rotate: {
    /// degrees: 315
    /// }
    /// }
    /// }]
    /// </code></pre>
    /// <p>In this case we use a <c>Numeric</c> axis for displaying the values of the Area series and a <c>Category</c> axis for displaying the names of
    /// the store elements. The numeric axis is placed on the left of the screen, while the category axis is placed at the bottom of the chart.
    /// Both the category and numeric axes have <c>grid</c> set, which means that horizontal and vertical lines will cover the chart background. In the
    /// category axis the labels will be rotated so they can fit the space better.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Axis : Abstract
    {
        /// <summary>
        /// Whether to adjust the label at the end of the axis.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool adjustEnd;
        /// <summary>
        /// The size of the dash marker. Default's 3.
        /// Defaults to: <c>3</c>
        /// </summary>
        public JsNumber dashSize;
        /// <summary>
        /// The grid configuration enables you to set a background grid for an axis.
        /// If set to true on a vertical axis, vertical lines will be drawn.
        /// If set to true on a horizontal axis, horizontal lines will be drawn.
        /// If both are set, a proper grid with horizontal and vertical lines will be drawn.
        /// You can set specific options for the grid configuration for odd and/or even lines/rows.
        /// Since the rows being drawn are rectangle sprites, you can set to an odd or even property
        /// all styles that apply to <see cref="Ext.draw.Sprite">Ext.draw.Sprite</see>. For more information on all the style
        /// properties you can set please take a look at <see cref="Ext.draw.Sprite">Ext.draw.Sprite</see>. Some useful style properties are <c>opacity</c>, <c>fill</c>, <c>stroke</c>, <c>stroke-width</c>, etc.
        /// The possible values for a grid option are then <em>true</em>, <em>false</em>, or an object with <c>{ odd, even }</c> properties
        /// where each property contains a sprite style descriptor object that is defined in <see cref="Ext.draw.Sprite">Ext.draw.Sprite</see>.
        /// For example:
        /// <code>axes: [{
        /// type: 'Numeric',
        /// position: 'left',
        /// fields: ['data1', 'data2', 'data3'],
        /// title: 'Number of Hits',
        /// grid: {
        /// odd: {
        /// opacity: 1,
        /// fill: '#ddd',
        /// stroke: '#bbb',
        /// 'stroke-width': 1
        /// }
        /// }
        /// }, {
        /// type: 'Category',
        /// position: 'bottom',
        /// fields: ['name'],
        /// title: 'Month of the Year',
        /// grid: true
        /// }]
        /// </code>
        /// </summary>
        public object grid;
        /// <summary>
        /// Offset axis position. Default's 0.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber length;
        /// <summary>
        /// If minimum and maximum are specified it forces the number of major ticks to the specified value.
        /// If a number of major ticks is forced, it wont search for pretty numbers at the ticks.
        /// </summary>
        public JsNumber majorTickSteps;
        /// <summary>
        /// The number of small ticks between two major ticks. Default is zero.
        /// </summary>
        public JsNumber minorTickSteps;
        /// <summary>
        /// Where to set the axis. Available options are left, bottom, right, top. Default's bottom.
        /// Defaults to: <c>&quot;bottom&quot;</c>
        /// </summary>
        public JsString position;
        /// <summary>
        /// The title for the Axis
        /// </summary>
        public JsString title;
        /// <summary>
        /// Offset axis width. Default's 0.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber width;
        /// <summary>
        /// Renders the axis into the screen and updates its position.
        /// </summary>
        /// <param name="init">
        /// </param>
        public void drawAxis(object init){}
        /// <summary>
        /// Renders an horizontal and/or vertical grid into the Surface.
        /// </summary>
        public void drawGrid(){}
        /// <summary>
        /// Renders the labels in the axes.
        /// </summary>
        public void drawLabel(){}
        /// <summary>
        /// Updates the title of this axis.
        /// </summary>
        /// <param name="title">
        /// </param>
        public void setTitle(JsString title){}
        public Axis(AxisConfig config){}
        public Axis(){}
        public Axis(params object[] args){}
    }
    #endregion
    #region AxisConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AxisConfig : AbstractConfig
    {
        /// <summary>
        /// Whether to adjust the label at the end of the axis.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool adjustEnd;
        /// <summary>
        /// The size of the dash marker. Default's 3.
        /// Defaults to: <c>3</c>
        /// </summary>
        public JsNumber dashSize;
        /// <summary>
        /// The grid configuration enables you to set a background grid for an axis.
        /// If set to true on a vertical axis, vertical lines will be drawn.
        /// If set to true on a horizontal axis, horizontal lines will be drawn.
        /// If both are set, a proper grid with horizontal and vertical lines will be drawn.
        /// You can set specific options for the grid configuration for odd and/or even lines/rows.
        /// Since the rows being drawn are rectangle sprites, you can set to an odd or even property
        /// all styles that apply to <see cref="Ext.draw.Sprite">Ext.draw.Sprite</see>. For more information on all the style
        /// properties you can set please take a look at <see cref="Ext.draw.Sprite">Ext.draw.Sprite</see>. Some useful style properties are <c>opacity</c>, <c>fill</c>, <c>stroke</c>, <c>stroke-width</c>, etc.
        /// The possible values for a grid option are then <em>true</em>, <em>false</em>, or an object with <c>{ odd, even }</c> properties
        /// where each property contains a sprite style descriptor object that is defined in <see cref="Ext.draw.Sprite">Ext.draw.Sprite</see>.
        /// For example:
        /// <code>axes: [{
        /// type: 'Numeric',
        /// position: 'left',
        /// fields: ['data1', 'data2', 'data3'],
        /// title: 'Number of Hits',
        /// grid: {
        /// odd: {
        /// opacity: 1,
        /// fill: '#ddd',
        /// stroke: '#bbb',
        /// 'stroke-width': 1
        /// }
        /// }
        /// }, {
        /// type: 'Category',
        /// position: 'bottom',
        /// fields: ['name'],
        /// title: 'Month of the Year',
        /// grid: true
        /// }]
        /// </code>
        /// </summary>
        public object grid;
        /// <summary>
        /// Offset axis position. Default's 0.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber length;
        /// <summary>
        /// If minimum and maximum are specified it forces the number of major ticks to the specified value.
        /// If a number of major ticks is forced, it wont search for pretty numbers at the ticks.
        /// </summary>
        public JsNumber majorTickSteps;
        /// <summary>
        /// The number of small ticks between two major ticks. Default is zero.
        /// </summary>
        public JsNumber minorTickSteps;
        /// <summary>
        /// Where to set the axis. Available options are left, bottom, right, top. Default's bottom.
        /// Defaults to: <c>&quot;bottom&quot;</c>
        /// </summary>
        public JsString position;
        /// <summary>
        /// The title for the Axis
        /// </summary>
        public JsString title;
        /// <summary>
        /// Offset axis width. Default's 0.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber width;
        public AxisConfig(params object[] args){}
    }
    #endregion
    #region AxisEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AxisEvents : AbstractEvents
    {
        public AxisEvents(params object[] args){}
    }
    #endregion
}
