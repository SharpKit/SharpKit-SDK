//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.proxy
{
    #region Memory
    /// <inheritdocs />
    /// <summary>
    /// <p>In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on
    /// every page refresh.</p>
    /// <p>Usually this Proxy isn't used directly, serving instead as a helper to a <see cref="Ext.data.Store">Store</see> where a reader
    /// is required to load data. For example, say we have a Store for a User model and have some inline data we want to
    /// load, but this data isn't in quite the right format: we can use a MemoryProxy with a JsonReader to read it into our
    /// Store:</p>
    /// <pre><code>//this is the model we will be using in the store
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: [
    /// {name: 'id',    type: 'int'},
    /// {name: 'name',  type: 'string'},
    /// {name: 'phone', type: 'string', mapping: 'phoneNumber'}
    /// ]
    /// });
    /// //this data does not line up to our model fields - the phone field is called phoneNumber
    /// var data = {
    /// users: [
    /// {
    /// id: 1,
    /// name: 'Ed Spencer',
    /// phoneNumber: '555 1234'
    /// },
    /// {
    /// id: 2,
    /// name: 'Abe Elias',
    /// phoneNumber: '666 1234'
    /// }
    /// ]
    /// };
    /// //note how we set the 'root' in the reader to match the data structure above
    /// var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// autoLoad: true,
    /// model: 'User',
    /// data : data,
    /// proxy: {
    /// type: 'memory',
    /// reader: {
    /// type: 'json',
    /// root: 'users'
    /// }
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Memory : Client
    {
        /// <summary>
        /// Optional data to pass to configured Reader.
        /// </summary>
        public JsObject data;
        /// <summary>
        /// Fake processing function to commit the records, set the current operation
        /// to successful and call the callback if provided. This function is shared
        /// by the create, update and destroy methods to perform the bare minimum
        /// processing required for the proxy to register a result from the action.
        /// </summary>
        /// <param name="operation">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        private void updateOperation(object operation, object callback, object scope){}
        public Memory(MemoryConfig config){}
        public Memory(){}
        public Memory(params object[] args){}
    }
    #endregion
    #region MemoryConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MemoryConfig : ClientConfig
    {
        /// <summary>
        /// Optional data to pass to configured Reader.
        /// </summary>
        public JsObject data;
        public MemoryConfig(params object[] args){}
    }
    #endregion
    #region MemoryEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MemoryEvents : ClientEvents
    {
        public MemoryEvents(params object[] args){}
    }
    #endregion
}
