//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.grid
{
    #region Lockable
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>Lockable is a private mixin which injects lockable behavior into any
    /// TablePanel subclass such as GridPanel or TreePanel. TablePanel will
    /// automatically inject the <see cref="Ext.grid.Lockable">Ext.grid.Lockable</see> mixin in when one of the
    /// these conditions are met:</p>
    /// <ul>
    /// <li>The TablePanel has the lockable configuration set to true</li>
    /// <li>One of the columns in the TablePanel has locked set to true/false</li>
    /// </ul>
    /// <p>Each TablePanel subclass must register an alias. It should have an array
    /// of configurations to copy to the 2 separate tablepanel's that will be generated
    /// to note what configurations should be copied. These are named normalCfgCopy and
    /// lockedCfgCopy respectively.</p>
    /// <p>Columns which are locked must specify a fixed width. They do NOT support a
    /// flex width.</p>
    /// <p>Configurations which are specified in this class will be available on any grid or
    /// tree which is using the lockable functionality.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Lockable : Ext.Base
    {
        /// <summary>
        /// Any special configuration options for the locked part of the grid
        /// </summary>
        public JsObject lockedGridConfig;
        /// <summary>
        /// A view configuration to be applied to the
        /// locked side of the grid. Any conflicting configurations between lockedViewConfig
        /// and viewConfig will be overwritten by the lockedViewConfig.
        /// </summary>
        public JsObject lockedViewConfig;
        /// <summary>
        /// Any special configuration options for the normal part of the grid
        /// </summary>
        public JsObject normalGridConfig;
        /// <summary>
        /// A view configuration to be applied to the
        /// normal/unlocked side of the grid. Any conflicting configurations between normalViewConfig
        /// and viewConfig will be overwritten by the normalViewConfig.
        /// </summary>
        public JsObject normalViewConfig;
        /// <summary>
        /// Number of pixels to scroll when scrolling the locked section with mousewheel.
        /// Defaults to: <c>40</c>
        /// </summary>
        public JsNumber scrollDelta;
        /// <summary>
        /// The xtype of the subgrid to specify. If this is
        /// not specified lockable will determine the subgrid xtype to create by the
        /// following rule. Use the superclasses xtype if the superclass is NOT
        /// tablepanel, otherwise use the xtype itself.
        /// </summary>
        public JsString subGridXType;
        /// <summary>
        /// Synchronize rowHeight between the normal and
        /// locked grid view. This is turned on by default. If your grid is guaranteed
        /// to have rows of all the same height, you should set this to false to
        /// optimize performance.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool syncRowHeight;
        /// <summary>
        /// Clones items in the features array if they are instantiated Features. If an item
        /// is just a feature config, it leaves it alone.
        /// This is so that features can be replicated on both sides of the LockingView
        /// </summary>
        public void cloneFeatures(){}
        /// <summary>
        /// Clones items in the plugins array if they are instantiated Plugins. If an item
        /// is just a plugin config, it leaves it alone.
        /// This is so that plugins can be replicated on both sides of the LockingView
        /// </summary>
        public void clonePlugins(){}
        /// <summary>
        /// Locks the activeHeader as determined by which menu is open OR a header
        /// as specified.
        /// </summary>
        /// <param name="header"><p>Header to unlock from the locked section.
        /// Defaults to the header which has the menu open currently.</p>
        /// </param>
        /// <param name="toIdx"><p>The index to move the unlocked header to.
        /// Defaults to appending as the last item.</p>
        /// </param>
        private void @lock(object header=null, object toIdx=null){}
        /// <summary>
        /// Listen for mousewheel events on the locked section which does not scroll.
        /// Scroll it in response, and the other section will automatically sync.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void onLockedViewMouseWheel(object e){}
        /// <summary>
        /// Synchronizes the row heights between the locked and non locked portion of the grid for each
        /// row. If one row is smaller than the other, the height will be increased to match the larger one.
        /// </summary>
        public void syncRowHeights(){}
        /// <summary>
        /// Unlocks the activeHeader as determined by which menu is open OR a header
        /// as specified.
        /// </summary>
        /// <param name="header"><p>Header to unlock from the locked section.
        /// Defaults to the header which has the menu open currently.</p>
        /// </param>
        /// <param name="toIdx"><p>The index to move the unlocked header to.</p>
        /// <p>Defaults to: <c>0</c></p></param>
        private void unlock(object header=null, object toIdx=null){}
        public Lockable(LockableConfig config){}
        public Lockable(){}
        public Lockable(params object[] args){}
    }
    #endregion
    #region LockableConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LockableConfig : Ext.BaseConfig
    {
        /// <summary>
        /// Any special configuration options for the locked part of the grid
        /// </summary>
        public JsObject lockedGridConfig;
        /// <summary>
        /// A view configuration to be applied to the
        /// locked side of the grid. Any conflicting configurations between lockedViewConfig
        /// and viewConfig will be overwritten by the lockedViewConfig.
        /// </summary>
        public JsObject lockedViewConfig;
        /// <summary>
        /// Any special configuration options for the normal part of the grid
        /// </summary>
        public JsObject normalGridConfig;
        /// <summary>
        /// A view configuration to be applied to the
        /// normal/unlocked side of the grid. Any conflicting configurations between normalViewConfig
        /// and viewConfig will be overwritten by the normalViewConfig.
        /// </summary>
        public JsObject normalViewConfig;
        /// <summary>
        /// Number of pixels to scroll when scrolling the locked section with mousewheel.
        /// Defaults to: <c>40</c>
        /// </summary>
        public JsNumber scrollDelta;
        /// <summary>
        /// The xtype of the subgrid to specify. If this is
        /// not specified lockable will determine the subgrid xtype to create by the
        /// following rule. Use the superclasses xtype if the superclass is NOT
        /// tablepanel, otherwise use the xtype itself.
        /// </summary>
        public JsString subGridXType;
        /// <summary>
        /// Synchronize rowHeight between the normal and
        /// locked grid view. This is turned on by default. If your grid is guaranteed
        /// to have rows of all the same height, you should set this to false to
        /// optimize performance.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool syncRowHeight;
        public LockableConfig(params object[] args){}
    }
    #endregion
    #region LockableEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LockableEvents : Ext.BaseEvents
    {
        /// <summary>
        /// Fires when a column is locked.
        /// </summary>
        /// <param name="this"><p>The gridpanel.</p>
        /// </param>
        /// <param name="column"><p>The column being locked.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void lockcolumn(Ext.grid.Panel @this, Ext.grid.column.Column column, object eOpts){}
        /// <summary>
        /// Fires when a column is unlocked.
        /// </summary>
        /// <param name="this"><p>The gridpanel.</p>
        /// </param>
        /// <param name="column"><p>The column being unlocked.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void unlockcolumn(Ext.grid.Panel @this, Ext.grid.column.Column column, object eOpts){}
        public LockableEvents(params object[] args){}
    }
    #endregion
}
