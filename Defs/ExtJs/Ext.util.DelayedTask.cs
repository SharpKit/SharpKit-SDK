//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region DelayedTask
    /// <summary>
    /// <p>The DelayedTask class provides a convenient way to "buffer" the execution of a method,
    /// performing setTimeout where a new timeout cancels the old timeout. When called, the
    /// task will wait the specified time period before executing. If durng that time period,
    /// the task is called again, the original call will be cancelled. This continues so that
    /// the function is only called a single time for each iteration.</p>
    /// <p>This method is especially useful for things like detecting whether a user has finished
    /// typing in a text field. An example would be performing validation on a keypress. You can
    /// use this class to buffer the keypress events for a certain number of milliseconds, and
    /// perform only if they stop for that amount of time.</p>
    /// <h2>Usage</h2>
    /// <pre><code>var task = new <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see>(function(){
    /// alert(<see cref="Ext.ExtContext.getDom">Ext.getDom</see>('myInputField').value.length);
    /// });
    /// // Wait 500ms before calling our function. If the user presses another key
    /// // during that 500ms, it will be cancelled and we'll wait another 500ms.
    /// <see cref="Ext.ExtContext.get">Ext.get</see>('myInputField').on('keypress', function(){
    /// task.<see cref="Ext.util.DelayedTask.delay">delay</see>(500);
    /// });
    /// </code></pre>
    /// <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
    /// option <c>buffer</c> for <see cref="Ext.util.Observable.addListener">addListener/on</see> will
    /// also setup a delayed task for you to buffer events.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class DelayedTask
    {
        /// <summary>
        /// The parameters to this constructor serve as defaults and are not required.
        /// </summary>
        /// <param name="fn"><p>The default function to call. If not specified here, it must be specified during the <see cref="Ext.util.DelayedTask.delay">delay</see> call.</p>
        /// </param>
        /// <param name="scope"><p>The default scope (The <c><b>this</b></c> reference) in which the
        /// function is called. If not specified, <c>this</c> will refer to the browser window.</p>
        /// </param>
        /// <param name="args"><p>The default Array of arguments.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public DelayedTask(System.Delegate fn=null, object scope=null, object args=null){}
        /// <summary>
        /// Cancel the last queued timeout
        /// </summary>
        public void cancel(){}
        /// <summary>
        /// Cancels any pending timeout and queues a new one
        /// </summary>
        /// <param name="delay"><p>The milliseconds to delay</p>
        /// </param>
        /// <param name="newFn"><p>Overrides function passed to constructor</p>
        /// </param>
        /// <param name="newScope"><p>Overrides scope passed to constructor. Remember that if no scope
        /// is specified, <c>this</c> will refer to the browser window.</p>
        /// </param>
        /// <param name="newArgs"><p>Overrides args passed to constructor</p>
        /// </param>
        public void delay(object delay=null, object newFn=null, object newScope=null, object newArgs=null){}
        public DelayedTask(DelayedTaskConfig config){}
        public DelayedTask(params object[] args){}
    }
    #endregion
    #region DelayedTaskConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DelayedTaskConfig
    {
        public DelayedTaskConfig(params object[] args){}
    }
    #endregion
    #region DelayedTaskEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DelayedTaskEvents
    {
        public DelayedTaskEvents(params object[] args){}
    }
    #endregion
}
