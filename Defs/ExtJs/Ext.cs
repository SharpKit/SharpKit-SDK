//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region ExtContext
    /// <inheritdocs />
    /// <summary>
    /// <p>The Ext namespace (global object) encapsulates all classes, singletons, and
    /// utility methods provided by Sencha's libraries.</p>
    /// <p>Most user interface Components are at a lower level of nesting in the namespace,
    /// but many common utility functions are provided as direct properties of the Ext namespace.</p>
    /// <p>Also many frequently used methods from other classes are provided as shortcuts
    /// within the Ext namespace. For example <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see> aliases
    /// <see cref="Ext.ComponentManager.get">Ext.ComponentManager.get</see>.</p>
    /// <p>Many applications are initiated with <see cref="Ext.ExtContext.onReady">Ext.onReady</see> which is
    /// called once the DOM is ready. This ensures all scripts have been loaded,
    /// preventing dependency issues. For example:</p>
    /// <pre><code><see cref="Ext.ExtContext.onReady">Ext.onReady</see>(function(){
    /// new <see cref="Ext.Component">Ext.Component</see>({
    /// renderTo: document.body,
    /// html: 'DOM ready!'
    /// });
    /// });
    /// </code></pre>
    /// <p>For more information about how to use the Ext classes, see:</p>
    /// <ul>
    /// <li><i>The Learning Center</i></li>
    /// <li><i>The FAQ</i></li>
    /// <li><i>The forums</i></li>
    /// </ul>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true, Name="Ext")]
    public partial class ExtContext : JsContext
    {
        /// <summary>
        /// URL to a 1x1 transparent gif image used by Ext to create inline icons with
        /// CSS background images. In older versions of IE, this defaults to
        /// "http://sencha.com/s.gif" and you should change this to a URL on your server.
        /// For other browsers it uses an inline data URL.
        /// </summary>
        public static JsString BLANK_IMAGE_URL{get;set;}
        /// <summary>
        /// </summary>
        private static JsObject Logger{get;set;}
        /// <summary>
        /// URL to a blank file used by Ext when in secure mode for iframe src and onReady src
        /// to prevent the IE insecure content warning ('about:blank', except for IE
        /// in secure mode, which is 'javascript:""').
        /// </summary>
        public static JsString SSL_SECURE_URL{get;set;}
        /// <summary>
        /// Indicates whether to use native browser parsing for JSON methods.
        /// This option is ignored if the browser does not support native JSON methods.
        /// <strong>Note:</strong> Native JSON methods will not work with objects that have functions.
        /// Also, property names must be quoted, otherwise the data will not parse.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool USE_NATIVE_JSON{get;set;}
        /// <summary>
        /// The current version of Chrome (0 if the browser is not Chrome).
        /// </summary>
        public static JsNumber chromeVersion{get;set;}
        /// <summary>
        /// A reusable empty function
        /// </summary>
        public static JsObject emptyFn{get;set;}
        /// <summary>
        /// A zero length string which will pass a truth test. Useful for passing to methods
        /// which use a truth test to reject falsy values where a string value must be cleared.
        /// </summary>
        public static JsObject emptyString{get;set;}
        /// <summary>
        /// True if the Ext.fx.Anim Class is available.
        /// </summary>
        public static bool enableFx{get;set;}
        /// <summary>
        /// True to automatically uncache orphaned Ext.Elements periodically
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool enableGarbageCollector{get;set;}
        /// <summary>
        /// True to automatically purge event listeners during garbageCollection.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool enableListenerCollection{get;set;}
        /// <summary>
        /// Experimental. True to cascade listener removal to child elements when an element
        /// is removed. Currently not optimized for performance.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool enableNestedListenerRemoval{get;set;}
        /// <summary>
        /// An array containing extra enumerables for old browsers
        /// </summary>
        public static JsString enumerables{get;set;}
        /// <summary>
        /// The current version of Firefox (0 if the browser is not Firefox).
        /// </summary>
        public static JsNumber firefoxVersion{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject functionFactoryCache{get;set;}
        /// <summary>
        /// The current version of IE (0 if the browser is not IE). This does not account
        /// for the documentMode of the current page, which is factored into isIE7,
        /// isIE8 and isIE9. Thus this is not always true:
        /// <code><see cref="Ext.isIE8">Ext.isIE8</see> == (<see cref="Ext.ieVersion">Ext.ieVersion</see> == 8)
        /// </code>
        /// </summary>
        public static JsNumber ieVersion{get;set;}
        /// <summary>
        /// True if the detected browser is Chrome.
        /// </summary>
        public static bool isChrome{get;set;}
        /// <summary>
        /// True if the detected browser uses FireFox 10
        /// </summary>
        public static bool isFF10{get;set;}
        /// <summary>
        /// True if the detected browser uses FireFox 3.0
        /// </summary>
        public static bool isFF3_0{get;set;}
        /// <summary>
        /// True if the detected browser uses FireFox 3.5
        /// </summary>
        public static bool isFF3_5{get;set;}
        /// <summary>
        /// True if the detected browser uses FireFox 3.6
        /// </summary>
        public static bool isFF3_6{get;set;}
        /// <summary>
        /// True if the detected browser uses FireFox 4
        /// </summary>
        public static bool isFF4{get;set;}
        /// <summary>
        /// True if the detected browser uses FireFox 5
        /// </summary>
        public static bool isFF5{get;set;}
        /// <summary>
        /// True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox).
        /// </summary>
        public static bool isGecko{get;set;}
        /// <summary>
        /// True if the detected browser uses a Gecko 5.0+ layout engine (e.g. Firefox 5.x).
        /// </summary>
        public static bool isGecko10{get;set;}
        /// <summary>
        /// True if the detected browser uses a Gecko 1.9+ layout engine (e.g. Firefox 3.x).
        /// </summary>
        public static bool isGecko3{get;set;}
        /// <summary>
        /// True if the detected browser uses a Gecko 2.0+ layout engine (e.g. Firefox 4.x).
        /// </summary>
        public static bool isGecko4{get;set;}
        /// <summary>
        /// True if the detected browser uses a Gecko 5.0+ layout engine (e.g. Firefox 5.x).
        /// </summary>
        public static bool isGecko5{get;set;}
        /// <summary>
        /// True if the detected browser is Internet Explorer.
        /// </summary>
        public static bool isIE{get;set;}
        /// <summary>
        /// True if the detected browser is Internet Explorer 6.x.
        /// </summary>
        public static bool isIE6{get;set;}
        /// <summary>
        /// True if the detected browser is Internet Explorer 7.x.
        /// </summary>
        public static bool isIE7{get;set;}
        /// <summary>
        /// True if the detected browser is Internet Explorer 8.x.
        /// </summary>
        public static bool isIE8{get;set;}
        /// <summary>
        /// True if the detected browser is Internet Explorer 9.x.
        /// </summary>
        public static bool isIE9{get;set;}
        /// <summary>
        /// True if the detected platform is Linux.
        /// </summary>
        public static bool isLinux{get;set;}
        /// <summary>
        /// True if the detected platform is Mac OS.
        /// </summary>
        public static bool isMac{get;set;}
        /// <summary>
        /// True if the detected browser is Opera.
        /// </summary>
        public static bool isOpera{get;set;}
        /// <summary>
        /// True if the detected browser is Opera 10.5x.
        /// </summary>
        public static bool isOpera10_5{get;set;}
        /// <summary>
        /// True when the document is fully initialized and ready for action
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool isReady{get;set;}
        /// <summary>
        /// True if the detected browser is Safari.
        /// </summary>
        public static bool isSafari{get;set;}
        /// <summary>
        /// True if the detected browser is Safari 2.x.
        /// </summary>
        public static bool isSafari2{get;set;}
        /// <summary>
        /// True if the detected browser is Safari 3.x.
        /// </summary>
        public static bool isSafari3{get;set;}
        /// <summary>
        /// True if the detected browser is Safari 4.x.
        /// </summary>
        public static bool isSafari4{get;set;}
        /// <summary>
        /// True if the detected browser is Safari 5.x.
        /// </summary>
        public static bool isSafari5{get;set;}
        /// <summary>
        /// True if the detected browser is Safari 5.0.x.
        /// </summary>
        public static bool isSafari5_0{get;set;}
        /// <summary>
        /// True if the page is running over SSL
        /// </summary>
        public static bool isSecure{get;set;}
        /// <summary>
        /// True if the detected browser uses WebKit.
        /// </summary>
        public static bool isWebKit{get;set;}
        /// <summary>
        /// True if the detected platform is Windows.
        /// </summary>
        public static bool isWindows{get;set;}
        /// <summary>
        /// Defaults to: <c>null</c>
        /// </summary>
        private static JsObject lastRegisteredVersion{get;set;}
        /// <summary>
        /// </summary>
        private static JsObject mergeIf{get;set;}
        /// <summary>
        /// The name of the property in the global namespace (The window in browser environments) which refers to the current instance of Ext.
        /// This is usually <c>"Ext"</c>, but if a sandboxed build of ExtJS is being used, this will be an alternative name.
        /// If code is being generated for use by <c>eval</c> or to create a <c>new Function</c>, and the global instance
        /// of Ext must be referenced, this is the name that should be built into the code.
        /// Defaults to: <c>&quot;Ext&quot;</c>
        /// </summary>
        public static JsString name{get;set;}
        /// <summary>
        /// The current version of Opera (0 if the browser is not Opera).
        /// </summary>
        public static JsNumber operaVersion{get;set;}
        /// <summary>
        /// The css class used to wrap Ext components when the scopeResetCSS option
        /// is used.
        /// </summary>
        public static JsString resetCls{get;set;}
        /// <summary>
        /// The current version of Safari (0 if the browser is not Safari).
        /// </summary>
        public static JsNumber safariVersion{get;set;}
        /// <summary>
        /// True to scope the reset CSS to be just applied to Ext components. Note that this
        /// wraps root containers with an additional element. Also remember that when you turn
        /// on this option, you have to use ext-all-scoped (unless you use the bootstrap.js to
        /// load your javascript, in which case it will be handled for you).
        /// </summary>
        public static bool scopeResetCSS{get;set;}
        /// <summary>
        /// By default, Ext intelligently decides whether floating elements should be shimmed.
        /// If you are using flash, you may want to set this to true.
        /// </summary>
        public static bool useShims{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject versions{get;set;}
        /// <summary>
        /// The current version of WebKit (0 if the browser does not use WebKit).
        /// </summary>
        public static JsNumber webKitVersion{get;set;}
        /// <summary>
        /// Applies event listeners to elements by selectors when the document is ready.
        /// The event name is specified with an @ suffix.
        /// <code><see cref="Ext.ExtContext.addBehaviors">Ext.addBehaviors</see>({
        /// // add a listener for click on all anchors in element with id foo
        /// '#foo a@click' : function(e, t){
        /// // do something
        /// },
        /// // add the same listener to multiple selectors (separated by comma BEFORE the @)
        /// '#foo a, #bar span.some-class@mouseover' : function(){
        /// // do something
        /// }
        /// });
        /// </code>
        /// </summary>
        /// <param name="obj"><p>The list of behaviors to apply</p>
        /// </param>
        public static void addBehaviors(object obj){}
        /// <summary>
        /// Loads Ext.app.Application class and starts it up with given configuration after the page is ready.
        /// See <see cref="Ext.app.Application">Ext.app.Application</see> for details.
        /// </summary>
        /// <param name="config">
        /// </param>
        public static void application(object config){}
        /// <summary>
        /// Copies all the properties of config to the specified object.
        /// Note that if recursive merging and cloning without referencing the original objects / arrays is needed, use
        /// Ext.Object.merge instead.
        /// </summary>
        /// <param name="object"><p>The receiver of the properties</p>
        /// </param>
        /// <param name="config"><p>The source of the properties</p>
        /// </param>
        /// <param name="defaults"><p>A different object that will also be applied for default values</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>returns obj</p>
        /// </div>
        /// </returns>
        public static object apply(object @object, object config, object defaults=null){return null;}
        /// <summary>
        /// Copies all the properties of config to object if they don't already exist.
        /// </summary>
        /// <param name="object"><p>The receiver of the properties</p>
        /// </param>
        /// <param name="config"><p>The source of the properties</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>returns obj</p>
        /// </div>
        /// </returns>
        public static object applyIf(object @object, object config){return null;}
        /// <summary>
        /// Utility wrapper that suspends layouts of all components for the duration of a given function.
        /// </summary>
        /// <param name="fn"><p>The function to execute.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the specified function is executed.</p>
        /// </param>
        public static void batchLayouts(System.Delegate fn, object scope=null){}
        /// <summary>
        /// Create a new function from the provided fn, change this to the provided scope, optionally
        /// overrides arguments for the call. (Defaults to the arguments passed by the caller)
        /// <see cref="Ext.ExtContext.bind">Ext.bind</see> is alias for <see cref="Ext.Function.bind">Ext.Function.bind</see>
        /// </summary>
        /// <param name="fn"><p>The function to delegate.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the function is executed.
        /// <strong>If omitted, defaults to the default global environment object (usually the browser window).</strong></p>
        /// </param>
        /// <param name="args"><p>Overrides arguments for the call. (Defaults to the arguments passed by the caller)</p>
        /// </param>
        /// <param name="appendArgs"><p>if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>The new function</p>
        /// </div>
        /// </returns>
        public static System.Delegate bind(System.Delegate fn, object scope=null, object args=null, object appendArgs=null){return null;}
        /// <summary>
        /// Execute a callback function in a particular scope. If no function is passed the call is ignored.
        /// For example, these lines are equivalent:
        /// <code><see cref="Ext.ExtContext.callback">Ext.callback</see>(myFunc, this, [arg1, arg2]);
        /// <see cref="Ext.ExtContext.isFunction">Ext.isFunction</see>(myFunc) &amp;&amp; myFunc.apply(this, [arg1, arg2]);
        /// </code>
        /// </summary>
        /// <param name="callback"><p>The callback to execute</p>
        /// </param>
        /// <param name="scope"><p>The scope to execute in</p>
        /// </param>
        /// <param name="args"><p>The arguments to pass to the function</p>
        /// </param>
        /// <param name="delay"><p>Pass a number to delay the call by a number of milliseconds.</p>
        /// </param>
        public static void callback(System.Delegate callback, object scope=null, object args=null, object delay=null){}
        /// <summary>
        /// Old alias to Ext.Array.clean
        /// Filter through an array and remove empty item as defined in <see cref="Ext.ExtContext.isEmpty">Ext.isEmpty</see>
        /// See <see cref="Ext.Array.filter">Ext.Array.filter</see>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Array.clean">Ext.Array.clean</see> instead</p>
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>results</p>
        /// </div>
        /// </returns>
        public static JsArray clean(JsArray array){return null;}
        /// <summary>
        /// Clone simple variables including array, {}-like objects, DOM nodes and Date without keeping the old reference.
        /// A reference for the object itself is returned if it's not a direct decendant of Object. For model cloning,
        /// see Model.copy.
        /// </summary>
        /// <param name="item"><p>The variable to clone</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>clone</p>
        /// </div>
        /// </returns>
        public static object clone(object item){return null;}
        /// <summary>
        /// Copies a set of named properties fom the source object to the destination object.
        /// Example:
        /// <code>ImageComponent = <see cref="Ext.ExtContext.extend">Ext.extend</see>(<see cref="Ext.Component">Ext.Component</see>, {
        /// initComponent: function() {
        /// this.autoEl = { tag: 'img' };
        /// MyComponent.superclass.initComponent.apply(this, arguments);
        /// this.initialBox = <see cref="Ext.ExtContext.copyTo">Ext.copyTo</see>({}, this.initialConfig, 'x,y,width,height');
        /// }
        /// });
        /// </code>
        /// Important note: To borrow class prototype methods, use <see cref="Ext.Base">Ext.Base.borrow</see> instead.
        /// </summary>
        /// <param name="dest"><p>The destination object.</p>
        /// </param>
        /// <param name="source"><p>The source object.</p>
        /// </param>
        /// <param name="names"><p>Either an Array of property names, or a comma-delimited list
        /// of property names to copy.</p>
        /// </param>
        /// <param name="usePrototypeKeys"><p>Defaults to false. Pass true to copy keys off of the
        /// prototype as well as the instance.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The modified object.</p>
        /// </div>
        /// </returns>
        public static object copyTo(object dest, object source, object names, object usePrototypeKeys=null){return null;}
        /// <summary>
        /// Instantiate a class by either full name, alias or alternate name.
        /// If <see cref="Ext.Loader">Ext.Loader</see> is <see cref="Ext.Loader.setConfig">enabled</see> and the class has
        /// not been defined yet, it will attempt to load the class via synchronous loading.
        /// For example, all these three lines return the same result:
        /// <code> // alias
        /// var window = <see cref="Ext.ExtContext.create">Ext.create</see>('widget.window', {
        /// width: 600,
        /// height: 800,
        /// ...
        /// });
        /// // alternate name
        /// var window = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.window.Window">Ext.Window</see>', {
        /// width: 600,
        /// height: 800,
        /// ...
        /// });
        /// // full class name
        /// var window = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.window.Window">Ext.window.Window</see>', {
        /// width: 600,
        /// height: 800,
        /// ...
        /// });
        /// // single object with xclass property:
        /// var window = <see cref="Ext.ExtContext.create">Ext.create</see>({
        /// xclass: '<see cref="Ext.window.Window">Ext.window.Window</see>', // any valid value for 'name' (above)
        /// width: 600,
        /// height: 800,
        /// ...
        /// });
        /// </code>
        /// </summary>
        /// <param name="name"><p>The class name or alias. Can be specified as <c>xclass</c>
        /// property if only one object parameter is specified.</p>
        /// </param>
        /// <param name="args"><p>Additional arguments after the name will be passed to
        /// the class' constructor.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>instance</p>
        /// </div>
        /// </returns>
        public static object create(object name, params object[] args){return null;}
        /// <summary>
        /// Convenient shorthand, see Ext.ClassManager.instantiateByAlias
        /// </summary>
        public static object createByAlias(JsString name, params object[] args){return null;}
        /// <summary>
        /// Old name for widget.
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.ExtContext.widget">widget</see> instead.</p>
        /// </summary>
        public static void createWidget(){}
        /// <summary>
        /// Shorthand for Ext.JSON.decode
        /// Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws
        /// a SyntaxError unless the safe option is set.
        /// </summary>
        /// <param name="json"><p>The JSON string</p>
        /// </param>
        /// <param name="safe"><p>True to return null, false to throw an exception if the JSON is invalid.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The resulting object</p>
        /// </div>
        /// </returns>
        public static object decode(JsString json, object safe=null){return null;}
        /// <summary>
        /// Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
        /// <code>var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// // executes immediately:
        /// sayHi('Fred');
        /// // executes after 2 seconds:
        /// <see cref="Ext.Function.defer">Ext.Function.defer</see>(sayHi, 2000, this, ['Fred']);
        /// // this syntax is sometimes useful for deferring
        /// // execution of an anonymous function:
        /// <see cref="Ext.Function.defer">Ext.Function.defer</see>(function(){
        /// alert('Anonymous');
        /// }, 100);
        /// </code>
        /// <see cref="Ext.ExtContext.defer">Ext.defer</see> is alias for <see cref="Ext.Function.defer">Ext.Function.defer</see>
        /// </summary>
        /// <param name="fn"><p>The function to defer.</p>
        /// </param>
        /// <param name="millis"><p>The number of milliseconds for the setTimeout call
        /// (if less than or equal to 0 the function is executed immediately)</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the function is executed.
        /// <strong>If omitted, defaults to the browser window.</strong></p>
        /// </param>
        /// <param name="args"><p>Overrides arguments for the call. (Defaults to the arguments passed by the caller)</p>
        /// </param>
        /// <param name="appendArgs"><p>if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The timeout id that can be used with clearTimeout</p>
        /// </div>
        /// </returns>
        public static JsNumber defer(System.Delegate fn, JsNumber millis, object scope=null, object args=null, object appendArgs=null){return null;}
        /// <summary>
        /// Defines a class or override. A basic class is defined like this:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.awesome.Class', {
        /// someProperty: 'something',
        /// someMethod: function(s) {
        /// alert(s + this.someProperty);
        /// }
        /// ...
        /// });
        /// var obj = new My.awesome.Class();
        /// obj.someMethod('Say '); // alerts 'Say something'
        /// </code>
        /// To create an anonymous class, pass <c>null</c> for the <c>className</c>:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>(null, {
        /// constructor: function () {
        /// // ...
        /// }
        /// });
        /// </code>
        /// In some cases, it is helpful to create a nested scope to contain some private
        /// properties. The best way to do this is to pass a function instead of an object
        /// as the second parameter. This function will be called to produce the class
        /// body:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.foo.Bar', function () {
        /// var id = 0;
        /// return {
        /// nextId: function () {
        /// return ++id;
        /// }
        /// };
        /// });
        /// </code>
        /// When using this form of <c><see cref="Ext.ExtContext.define">Ext.define</see></c>, the function is passed a reference to its
        /// class. This can be used as an efficient way to access any static properties you
        /// may have:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.foo.Bar', function (Bar) {
        /// return {
        /// statics: {
        /// staticMethod: function () {
        /// // ...
        /// }
        /// },
        /// method: function () {
        /// return Bar.staticMethod();
        /// }
        /// };
        /// });
        /// </code>
        /// To define an override, include the <c>override</c> property. The content of an
        /// override is aggregated with the specified class in order to extend or modify
        /// that class. This can be as simple as setting default property values or it can
        /// extend and/or replace methods. This can also extend the statics of the class.
        /// One use for an override is to break a large class into manageable pieces.
        /// <code> // File: /src/app/Panel.js
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.app.Panel', {
        /// extend: '<see cref="Ext.panel.Panel">Ext.panel.Panel</see>',
        /// requires: [
        /// 'My.app.PanelPart2',
        /// 'My.app.PanelPart3'
        /// ]
        /// constructor: function (config) {
        /// this.callParent(arguments); // calls <see cref="Ext.panel.Panel">Ext.panel.Panel</see>'s constructor
        /// //...
        /// },
        /// statics: {
        /// method: function () {
        /// return 'abc';
        /// }
        /// }
        /// });
        /// // File: /src/app/PanelPart2.js
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.app.PanelPart2', {
        /// override: 'My.app.Panel',
        /// constructor: function (config) {
        /// this.callParent(arguments); // calls My.app.Panel's constructor
        /// //...
        /// }
        /// });
        /// </code>
        /// Another use of overrides is to provide optional parts of classes that can be
        /// independently required. In this case, the class may even be unaware of the
        /// override altogether.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.ux.CoolTip', {
        /// override: '<see cref="Ext.tip.ToolTip">Ext.tip.ToolTip</see>',
        /// constructor: function (config) {
        /// this.callParent(arguments); // calls <see cref="Ext.tip.ToolTip">Ext.tip.ToolTip</see>'s constructor
        /// //...
        /// }
        /// });
        /// </code>
        /// The above override can now be required as normal.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.app.App', {
        /// requires: [
        /// 'My.ux.CoolTip'
        /// ]
        /// });
        /// </code>
        /// Overrides can also contain statics:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.app.BarMod', {
        /// override: 'Ext.foo.Bar',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x * 2]); // call Ext.foo.Bar.method
        /// }
        /// }
        /// });
        /// </code>
        /// IMPORTANT: An override is only included in a build if the class it overrides is
        /// required. Otherwise, the override, like the target class, is not included.
        /// </summary>
        /// <param name="className"><p>The class name to create in string dot-namespaced format, for example:
        /// 'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager'
        /// It is highly recommended to follow this simple convention:
        /// - The root and the class name are 'CamelCased'
        /// - Everything else is lower-cased
        /// Pass <c>null</c> to create an anonymous class.</p>
        /// </param>
        /// <param name="data"><p>The key - value pairs of properties to apply to this class. Property names can be of any valid
        /// strings, except those in the reserved listed below:
        /// - <c>mixins</c>
        /// - <c>statics</c>
        /// - <c>config</c>
        /// - <c>alias</c>
        /// - <c>self</c>
        /// - <c>singleton</c>
        /// - <c>alternateClassName</c>
        /// - <c>override</c></p>
        /// </param>
        /// <param name="createdFn"><p>Optional callback to execute after the class is created, the execution scope of which
        /// (<c>this</c>) will be the newly created class itself.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Base">Ext.Base</see></span><div>
        /// </div>
        /// </returns>
        public static Ext.Base define(JsString className, object data, object createdFn=null){return null;}
        /// <summary>
        /// Create a closure for deprecated code.
        /// <code>// This means Ext.oldMethod is only supported in 4.0.0beta and older.
        /// // If <see cref="Ext.ExtContext.getVersion">Ext.getVersion</see>('extjs') returns a version that is later than '4.0.0beta', for example '4.0.0RC',
        /// // the closure will not be invoked
        /// <see cref="Ext.ExtContext.deprecate">Ext.deprecate</see>('extjs', '4.0.0beta', function() {
        /// Ext.oldMethod = Ext.newMethod;
        /// ...
        /// });
        /// </code>
        /// </summary>
        /// <param name="packageName"><p>The package name</p>
        /// </param>
        /// <param name="since"><p>The last version before it's deprecated</p>
        /// </param>
        /// <param name="closure"><p>The callback function to be executed with the specified version is less than the current version</p>
        /// </param>
        /// <param name="scope"><p>The execution scope (<c>this</c>) if the closure</p>
        /// </param>
        public static void deprecate(JsString packageName, JsString since, System.Delegate closure, object scope){}
        /// <summary>
        /// Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
        /// DOM (if applicable) and calling their destroy functions (if available).  This method is primarily
        /// intended for arguments of type Ext.Element and Ext.Component, but any subclass of
        /// Ext.util.Observable can be passed in.  Any number of elements and/or components can be
        /// passed into this function in a single call as separate arguments.
        /// </summary>
        /// <param name="args"><p>An <see cref="Ext.dom.Element">Ext.Element</see>, <see cref="Ext.Component">Ext.Component</see>, or an Array of either of these to destroy</p>
        /// </param>
        public static void destroy(object args=null){}
        /// <summary>
        /// Attempts to destroy and then remove a set of named properties of the passed object.
        /// </summary>
        /// <param name="o"><p>The object (most likely a Component) who's properties you wish to destroy.</p>
        /// </param>
        /// <param name="args"><p>One or more names of the properties to destroy and remove from the object.</p>
        /// </param>
        public static void destroyMembers(object o, object args=null){}
        /// <summary>
        /// Iterates an array or an iterable value and invoke the given callback function for each item.
        /// <code>var countries = ['Vietnam', 'Singapore', 'United States', 'Russia'];
        /// <see cref="Ext.Array.each">Ext.Array.each</see>(countries, function(name, index, countriesItSelf) {
        /// console.log(name);
        /// });
        /// var sum = function() {
        /// var sum = 0;
        /// <see cref="Ext.Array.each">Ext.Array.each</see>(arguments, function(value) {
        /// sum += value;
        /// });
        /// return sum;
        /// };
        /// sum(1, 2, 3); // returns 6
        /// </code>
        /// The iteration can be stopped by returning false in the function callback.
        /// <code><see cref="Ext.Array.each">Ext.Array.each</see>(countries, function(name, index, countriesItSelf) {
        /// if (name === 'Singapore') {
        /// return false; // break here
        /// }
        /// });
        /// </code>
        /// <see cref="Ext.ExtContext.each">Ext.each</see> is alias for <see cref="Ext.Array.each">Ext.Array.each</see>
        /// </summary>
        /// <param name="iterable"><p>The value to be iterated. If this
        /// argument is not iterable, the callback function is called once.</p>
        /// </param>
        /// <param name="fn"><p>The callback function. If it returns false, the iteration stops and this method returns
        /// the current <c>index</c>.</p>
        /// <h3>Parameters</h3><ul><li><span>item</span> : <see cref="Object">Object</see><div><p>The item at the current <c>index</c> in the passed <c>array</c></p>
        /// </div></li><li><span>index</span> : <see cref="Number">Number</see><div><p>The current <c>index</c> within the <c>array</c></p>
        /// </div></li><li><span>allItems</span> : <see cref="Array">Array</see><div><p>The <c>array</c> itself which was passed as the first argument</p>
        /// </div></li></ul><h3>Returns</h3><ul><li><span><see cref="bool">Boolean</see></span><div><p>Return false to stop iteration.</p>
        /// </div></li></ul></param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the specified function is executed.</p>
        /// </param>
        /// <param name="reverse"><p>Reverse the iteration order (loop from the end to the beginning)
        /// Defaults false</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>See description for the <c>fn</c> parameter.</p>
        /// </div>
        /// </returns>
        public static bool each(object iterable, System.Delegate fn, object scope=null, object reverse=null){return false;}
        /// <summary>
        /// Shorthand for Ext.JSON.encode
        /// Encodes an Object, Array or other value.
        /// If the environment's native JSON encoding is not being used (<see cref="Ext.USE_NATIVE_JSON">USE_NATIVE_JSON</see> is not set,
        /// or the environment does not support it), then ExtJS's encoding will be used. This allows the developer
        /// to add a <c>toJSON</c> method to their classes which need serializing to return a valid JSON representation
        /// of the object.
        /// </summary>
        /// <param name="o"><p>The variable to encode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The JSON string</p>
        /// </div>
        /// </returns>
        public static JsString encode(object o){return null;}
        /// <summary>
        /// Escapes the passed string for use in a regular expression.
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.String.escapeRegex">Ext.String.escapeRegex</see> instead</p>
        /// </summary>
        /// <param name="str">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString escapeRe(JsString str){return null;}
        /// <summary>
        /// Convenient shortcut to Ext.Loader.exclude
        /// </summary>
        public static void exclude(){}
        /// <summary>
        /// This method deprecated. Use Ext.define instead.
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.ExtContext.define">Ext.define</see> instead</p>
        /// </summary>
        /// <param name="superclass">
        /// </param>
        /// <param name="overrides">
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>The subclass constructor from the <tt>overrides</tt> parameter, or a generated one if not provided.</p>
        /// </div>
        /// </returns>
        public static System.Delegate extend(System.Delegate superclass, object overrides){return null;}
        /// <summary>
        /// Old alias to Ext.Array.flatten
        /// Recursively flattens into 1-d Array. Injects Arrays inline.
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Array.flatten">Ext.Array.flatten</see> instead</p>
        /// </summary>
        /// <param name="array"><p>The array to flatten</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The 1-d array.</p>
        /// </div>
        /// </returns>
        public static JsArray flatten(JsArray array){return null;}
        /// <summary>
        /// Gets the singleton flyweight element, with the passed node as the active element.
        /// Because it is a singleton, this Flyweight does not have an ID, and must be used and discarded in a single line.
        /// You may not keep and use the reference to this singleton over multiple lines because methods that you call
        /// may themselves make use of <see cref="Ext.ExtContext.fly">fly</see> and may change the DOM element to which the instance refers.
        /// <see cref="Ext.ExtContext.fly">fly</see> is alias for <see cref="Ext.dom.AbstractElement.fly">Ext.dom.AbstractElement.fly</see>.
        /// Use this to make one-time references to DOM elements which are not going to be accessed again either by
        /// application code, or by Ext's classes. If accessing an element which will be processed regularly, then <see cref="Ext.ExtContext.get">Ext.get</see> will be more appropriate to take advantage of the caching provided by the <see cref="Ext.dom.Element">Ext.dom.Element</see>
        /// class.
        /// </summary>
        /// <param name="dom"><p>The dom node or id</p>
        /// </param>
        /// <param name="named"><p>Allows for creation of named reusable flyweights to prevent conflicts (e.g.
        /// internally Ext uses "_global")</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement.Fly">Ext.dom.AbstractElement.Fly</see></span><div><p>The singleton flyweight object (or null if no matching element was found)</p>
        /// </div>
        /// </returns>
        public static Ext.dom.AbstractElement.Fly fly(object dom, object named=null){return null;}
        /// <summary>
        /// Retrieves Ext.dom.Element objects. get is alias for Ext.dom.Element.get.
        /// <strong>This method does not retrieve <see cref="Ext.Component">Component</see>s.</strong> This method retrieves <see cref="Ext.dom.Element">Ext.dom.Element</see>
        /// objects which encapsulate DOM elements. To retrieve a Component by its ID, use <see cref="Ext.ComponentManager.get">Ext.ComponentManager.get</see>.
        /// Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
        /// the same id via AJAX or DOM.
        /// </summary>
        /// <param name="el"><p>The id of the node, a DOM Node or an existing Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element object (or null if no matching element was found)</p>
        /// </div>
        /// </returns>
        public static Ext.dom.Element get(object el){return null;}
        /// <summary>
        /// Returns the current document body as an Ext.Element.
        /// </summary>
        public static Ext.dom.Element getBody(){return null;}
        /// <summary>
        /// Convenient shorthand, see Ext.ClassManager.getClass
        /// </summary>
        public static Class getClass(object cls){return null;}
        /// <summary>
        /// Convenient shorthand, see Ext.ClassManager.getName
        /// </summary>
        public static JsString getClassName(object cls){return null;}
        /// <summary>
        /// This is shorthand reference to Ext.ComponentManager.get.
        /// Looks up an existing Component by id
        /// </summary>
        /// <param name="id"><p>The component <see cref="Ext.ComponentConfig.id">id</see></p>
        /// </param>
        public static Ext.Component getCmp(JsString id){return null;}
        /// <summary>
        /// </summary>
        private static void getDetachedBody(){}
        /// <summary>
        /// Returns the current HTML document object as an Ext.Element.
        /// </summary>
        public static Ext.dom.Element getDoc(){return null;}
        /// <summary>
        /// Returns the dom node for the passed String (id), dom node, or Ext.Element.
        /// Optional 'strict' flag is needed for IE since it can return 'name' and
        /// 'id' elements by using getElementById.
        /// Here are some examples:
        /// <code>// gets dom node based on id
        /// var elDom = <see cref="Ext.ExtContext.getDom">Ext.getDom</see>('elId');
        /// // gets dom node based on the dom node
        /// var elDom1 = <see cref="Ext.ExtContext.getDom">Ext.getDom</see>(elDom);
        /// // If we don&amp;#39;t know if we are working with an
        /// // <see cref="Ext.dom.Element">Ext.Element</see> or a dom node use <see cref="Ext.ExtContext.getDom">Ext.getDom</see>
        /// function(el){
        /// var dom = <see cref="Ext.ExtContext.getDom">Ext.getDom</see>(el);
        /// // do something with the dom node
        /// }
        /// </code>
        /// <strong>Note:</strong> the dom node to be found actually needs to exist (be rendered, etc)
        /// when this method is called to be successful.
        /// </summary>
        /// <param name="el">
        /// </param>
        public static Ext.dom.Element getDom(object el){return null;}
        /// <summary>
        /// Parameters<li><span>id</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="id">
        /// </param>
        private static Ext.dom.Element getElementById(object id){return null;}
        /// <summary>
        /// Returns the current document head as an Ext.Element.
        /// </summary>
        public static void getHead(){}
        /// <summary>
        /// Returns the current orientation of the mobile device
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>Either 'portrait' or 'landscape'</p>
        /// </div>
        /// </returns>
        public static JsString getOrientation(){return null;}
        /// <summary>
        /// Utility method for getting the width of the browser's vertical scrollbar. This
        /// can differ depending on operating system settings, such as the theme or font size.
        /// This method is deprected in favor of <see cref="Ext.ExtContext.getScrollbarSize">getScrollbarSize</see>.
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// </summary>
        /// <param name="force"><p>true to force a recalculation of the value.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The width of a vertical scrollbar.</p>
        /// </div>
        /// </returns>
        public static JsNumber getScrollBarWidth(object force=null){return null;}
        /// <summary>
        /// Returns the size of the browser scrollbars. This can differ depending on
        /// operating system settings, such as the theme or font size.
        /// </summary>
        /// <param name="force"><p>true to force a recalculation of the value.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>An object containing scrollbar sizes.</p>
        /// </div>
        /// </returns>
        public static object getScrollbarSize(object force=null){return null;}
        /// <summary>
        /// Shortcut to Ext.data.StoreManager.lookup.
        /// Gets a registered Store by id
        /// </summary>
        /// <param name="store"><p>The id of the Store, or a Store instance, or a store configuration</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Store">Ext.data.Store</see></span><div>
        /// </div>
        /// </returns>
        public static Ext.data.Store getStore(object store){return null;}
        /// <summary>
        /// Generate a unique reference of Ext in the global scope, useful for sandboxing
        /// </summary>
        private static void getUniqueGlobalNamespace(){}
        /// <summary>
        /// Get the version number of the supplied package name; will return the last registered version
        /// (last Ext.setVersion call) if there's no package name given.
        /// </summary>
        /// <param name="packageName"><p>The package name, for example: 'core', 'touch', 'extjs'</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Version">Ext.Version</see></span><div><p>The version</p>
        /// </div>
        /// </returns>
        public static Version getVersion(object packageName=null){return null;}
        /// <summary>
        /// Old alias to Ext.String.htmlDecode
        /// Convert certain characters (&amp;, &lt;, >, ', and ") from their HTML character equivalents.
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// <p>Use <see cref="Ext.String.htmlDecode">Ext.String.htmlDecode</see> instead</p>
        /// </summary>
        /// <param name="value"><p>The string to decode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The decoded text</p>
        /// </div>
        /// </returns>
        public static JsString htmlDecode(JsString value){return null;}
        /// <summary>
        /// Old alias to Ext.String.htmlEncode
        /// Convert certain characters (&amp;, &lt;, >, ', and ") to their HTML character equivalents for literal display in web pages.
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// <p>Use <see cref="Ext.String.htmlEncode">Ext.String.htmlEncode</see> instead</p>
        /// </summary>
        /// <param name="value"><p>The string to encode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The encoded text</p>
        /// </div>
        /// </returns>
        public static JsString htmlEncode(JsString value){return null;}
        /// <summary>
        /// Generates unique ids. If the element already has an id, it is unchanged
        /// </summary>
        /// <param name="el"><p>The element to generate an id for</p>
        /// </param>
        /// <param name="prefix"><p>Id prefix (defaults "ext-gen")</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The generated Id.</p>
        /// </div>
        /// </returns>
        public static JsString id(object el=null, object prefix=null){return null;}
        /// <summary>
        /// Invokes a method on each item in an Array.
        /// Example:
        /// <code><see cref="Ext.ExtContext.invoke">Ext.invoke</see>(<see cref="Ext.ExtContext.query">Ext.query</see>("p"), "getAttribute", "id");
        /// // [el1.getAttribute("id"), el2.getAttribute("id"), ..., elN.getAttribute("id")]
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Will be removed in the next major version</p>
        /// </summary>
        /// <param name="arr"><p>The Array of items to invoke the method on.</p>
        /// </param>
        /// <param name="methodName"><p>The method name to invoke.</p>
        /// </param>
        /// <param name="args"><p>Arguments to send into the method invocation.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The results of invoking the method on each item in the array.</p>
        /// </div>
        /// </returns>
        public static JsArray invoke(object arr, JsString methodName, object args=null){return null;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Array, false otherwise.
        /// </summary>
        /// <param name="target"><p>The target to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isArray(object target){return false;}
        /// <summary>
        /// Returns true if the passed value is a boolean.
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isBoolean(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Date object, false otherwise.
        /// </summary>
        /// <param name="object"><p>The object to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isDate(object @object){return false;}
        /// <summary>
        /// Returns true if the passed value is defined.
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isDefined(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is an HTMLElement
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isElement(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is empty, false otherwise. The value is deemed to be empty if it is either:
        /// <li><c>null</c></li>
        /// <li><c>undefined</c></li>
        /// <li>a zero-length array</li>
        /// <li>a zero-length string (Unless the <c>allowEmptyString</c> parameter is set to <c>true</c>)</li>
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <param name="allowEmptyString"><p>true to allow empty strings (defaults to false)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isEmpty(object value, object allowEmptyString=null){return false;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Function, false otherwise.
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isFunction(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is iterable, false otherwise
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isIterable(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a number. Returns false for non-finite numbers.
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isNumber(object value){return false;}
        /// <summary>
        /// Validates that a value is numeric.
        /// </summary>
        /// <param name="value"><p>Examples: 1, '1', '2.34'</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if numeric, false otherwise</p>
        /// </div>
        /// </returns>
        public static bool isNumeric(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Object, false otherwise.
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isObject(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isPrimitive(object value){return false;}
        /// <summary>
        /// Parameters<li><span>value</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="value">
        /// </param>
        private static void isSimpleObject(object value){}
        /// <summary>
        /// Returns true if the passed value is a string.
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isString(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a TextNode
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public static bool isTextNode(object value){return false;}
        /// <summary>
        /// Iterates either an array or an object. This method delegates to
        /// Ext.Array.each if the given value is iterable, and Ext.Object.each otherwise.
        /// </summary>
        /// <param name="object"><p>The object or array to be iterated.</p>
        /// </param>
        /// <param name="fn"><p>The function to be called for each iteration. See and <see cref="Ext.Array.each">Ext.Array.each</see> and
        /// <see cref="Ext.Object.each">Ext.Object.each</see> for detailed lists of arguments passed to this function depending on the given object
        /// type that is being iterated.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the specified function is executed.
        /// Defaults to the object being iterated itself.</p>
        /// </param>
        public static void iterate(object @object, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Logs a message. If a console is present it will be used. On Opera, the method
        /// "opera.postError" is called. In other cases, the message is logged to an array
        /// "Ext.log.out". An attached debugger can watch this array and view the log. The
        /// log buffer is limited to a maximum of "Ext.log.max" entries (defaults to 250).
        /// The Ext.log.out array can also be written to a popup window by entering the
        /// following in the URL bar (a "bookmarklet"):
        /// <code>javascript:void(Ext.log.show());
        /// </code>
        /// If additional parameters are passed, they are joined and appended to the message.
        /// A technique for tracing entry and exit of a function is this:
        /// <code>function foo () {
        /// <see cref="Ext.ExtContext.log">Ext.log</see>({ indent: 1 }, '&gt;&gt; foo');
        /// // log statements in here or methods called from here will be indented
        /// // by one step
        /// <see cref="Ext.ExtContext.log">Ext.log</see>({ outdent: 1 }, '&lt;&lt; foo');
        /// }
        /// </code>
        /// This method does nothing in a release build.
        /// </summary>
        /// <param name="options"><p>The message to log or an options object with any
        /// of the following properties:</p>
        /// <ul>
        /// <li><c>msg</c>: The message to log (required).</li>
        /// <li><c>level</c>: One of: "error", "warn", "info" or "log" (the default is "log").</li>
        /// <li><c>dump</c>: An object to dump to the log as part of the message.</li>
        /// <li><c>stack</c>: True to include a stack trace in the log.</li>
        /// <li><c>indent</c>: Cause subsequent log statements to be indented one step.</li>
        /// <li><c>outdent</c>: Cause this and following statements to be one step less indented.</li>
        /// </ul>
        /// </param>
        /// <param name="message"><p>The message to log (required unless specified in
        /// options object).</p>
        /// </param>
        public static void log(object options=null, object message=null){}
        /// <summary>
        /// Old alias to Ext.Array.max
        /// Returns the maximum value in the Array.
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Array.max">Ext.Array.max</see> instead</p>
        /// </summary>
        /// <param name="array"><p>The Array from which to select the maximum value.</p>
        /// </param>
        /// <param name="comparisonFn"><p>a function to perform the comparision which determines maximization.
        /// If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>maxValue The maximum value</p>
        /// </div>
        /// </returns>
        public static object max(object array, object comparisonFn=null){return null;}
        /// <summary>
        /// Old alias to Ext.Array.mean
        /// Calculates the mean of all items in the array.
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Array.mean">Ext.Array.mean</see> instead</p>
        /// </summary>
        /// <param name="array"><p>The Array to calculate the mean value of.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The mean.</p>
        /// </div>
        /// </returns>
        public static JsNumber mean(JsArray array){return null;}
        /// <summary>
        /// A convenient alias method for Ext.Object.merge.
        /// Merges any number of objects recursively without referencing them or their children.
        /// <code>var extjs = {
        /// companyName: 'Ext JS',
        /// products: ['Ext JS', 'Ext GWT', 'Ext Designer'],
        /// isSuperCool: true,
        /// office: {
        /// size: 2000,
        /// location: 'Palo Alto',
        /// isFun: true
        /// }
        /// };
        /// var newStuff = {
        /// companyName: 'Sencha Inc.',
        /// products: ['Ext JS', 'Ext GWT', 'Ext Designer', 'Sencha Touch', 'Sencha Animator'],
        /// office: {
        /// size: 40000,
        /// location: 'Redwood City'
        /// }
        /// };
        /// var sencha = <see cref="Ext.Object.merge">Ext.Object.merge</see>(extjs, newStuff);
        /// // extjs and sencha then equals to
        /// {
        /// companyName: 'Sencha Inc.',
        /// products: ['Ext JS', 'Ext GWT', 'Ext Designer', 'Sencha Touch', 'Sencha Animator'],
        /// isSuperCool: true,
        /// office: {
        /// size: 40000,
        /// location: 'Redwood City',
        /// isFun: true
        /// }
        /// }
        /// </code>
        /// </summary>
        /// <param name="destination"><p>The object into which all subsequent objects are merged.</p>
        /// </param>
        /// <param name="object"><p>Any number of objects to merge into the destination.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>merged The destination object with all passed objects merged in.</p>
        /// </div>
        /// </returns>
        public static object merge(object destination, object @object){return null;}
        /// <summary>
        /// Old alias to Ext.Array.min
        /// Returns the minimum value in the Array.
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Array.min">Ext.Array.min</see> instead</p>
        /// </summary>
        /// <param name="array"><p>The Array from which to select the minimum value.</p>
        /// </param>
        /// <param name="comparisonFn"><p>a function to perform the comparision which determines minimization.
        /// If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>minValue The minimum value</p>
        /// </div>
        /// </returns>
        public static object min(object array, object comparisonFn=null){return null;}
        /// <summary>
        /// Creates namespaces to be used for scoping variables and classes so that they are not global.
        /// Specifying the last node of a namespace implicitly creates all other nodes. Usage:
        /// <code><see cref="Ext.ExtContext.namespace">Ext.namespace</see>('Company', 'Company.data');
        /// // equivalent and preferable to the above syntax
        /// <see cref="Ext.ExtContext.ns">Ext.ns</see>('Company.data');
        /// Company.Widget = function() { ... };
        /// Company.data.CustomStore = function(config) { ... };
        /// </code>
        /// </summary>
        /// <param name="namespaces">
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The namespace object.
        /// (If multiple arguments are passed, this will be the last namespace created)</p>
        /// </div>
        /// </returns>
        public static object @namespace(JsString namespaces){return null;}
        /// <summary>
        /// Convenient alias for Ext.namespace.
        /// Creates namespaces to be used for scoping variables and classes so that they are not global.
        /// Specifying the last node of a namespace implicitly creates all other nodes. Usage:
        /// <code><see cref="Ext.ExtContext.namespace">Ext.namespace</see>('Company', 'Company.data');
        /// // equivalent and preferable to the above syntax
        /// <see cref="Ext.ExtContext.ns">Ext.ns</see>('Company.data');
        /// Company.Widget = function() { ... };
        /// Company.data.CustomStore = function(config) { ... };
        /// </code>
        /// </summary>
        /// <param name="namespaces">
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The namespace object.
        /// (If multiple arguments are passed, this will be the last namespace created)</p>
        /// </div>
        /// </returns>
        public static object ns(JsString namespaces){return null;}
        /// <summary>
        /// Validate that a value is numeric and convert it to a number if necessary. Returns the specified default value if
        /// it is not.
        /// <code><see cref="Ext.Number.from">Ext.Number.from</see>('1.23', 1); // returns 1.23
        /// <see cref="Ext.Number.from">Ext.Number.from</see>('abc', 1); // returns 1
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Please use <see cref="Ext.Number.from">Ext.Number.from</see> instead.</p>
        /// </summary>
        /// <param name="value">
        /// </param>
        /// <param name="defaultValue"><p>The value to return if the original value is non-numeric</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>value, if numeric, defaultValue otherwise</p>
        /// </div>
        /// </returns>
        public static JsNumber num(object value, JsNumber defaultValue){return null;}
        /// <summary>
        /// Alias for Ext.EventManager.onDocumentReady
        /// </summary>
        public static void onDocumentReady(){}
        /// <summary>
        /// Alias for Ext.Loader.onReady with withDomReady set to true
        /// </summary>
        /// <param name="fn">
        /// </param>
        /// <param name="scope">
        /// </param>
        /// <param name="options">
        /// </param>
        public static void onReady(System.Delegate fn, object scope, object options){}
        /// <summary>
        /// Overrides members of the specified target with the given values.
        /// If the <c>target</c> is a class declared using <see cref="Ext.ExtContext.define">Ext.define</see>, the
        /// <c>override</c> method of that class is called (see <see cref="Ext.Base.override">Ext.Base.override</see>) given
        /// the <c>overrides</c>.
        /// If the <c>target</c> is a function, it is assumed to be a constructor and the contents
        /// of <c>overrides</c> are applied to its <c>prototype</c> using <see cref="Ext.ExtContext.apply">Ext.apply</see>.
        /// If the <c>target</c> is an instance of a class declared using <see cref="Ext.ExtContext.define">Ext.define</see>,
        /// the <c>overrides</c> are applied to only that instance. In this case, methods are
        /// specially processed to allow them to use <see cref="Ext.Base.callParent">Ext.Base.callParent</see>.
        /// <code> var panel = new <see cref="Ext.panel.Panel">Ext.Panel</see>({ ... });
        /// <see cref="Ext.ExtContext.override">Ext.override</see>(panel, {
        /// initComponent: function () {
        /// // extra processing...
        /// this.callParent();
        /// }
        /// });
        /// </code>
        /// If the <c>target</c> is none of these, the <c>overrides</c> are applied to the <c>target</c>
        /// using <see cref="Ext.ExtContext.apply">Ext.apply</see>.
        /// Please refer to <see cref="Ext.ExtContext.define">Ext.define</see> and <see cref="Ext.Base.override">Ext.Base.override</see> for
        /// further details.
        /// </summary>
        /// <param name="target"><p>The target to override.</p>
        /// </param>
        /// <param name="overrides"><p>The properties to add or replace on <c>target</c>.</p>
        /// </param>
        public static void @override(object target, object overrides){}
        /// <summary>
        /// Partitions the set into two sets: a true set and a false set.
        /// Example 1:
        /// <code><see cref="Ext.ExtContext.partition">Ext.partition</see>([true, false, true, true, false]);
        /// // returns [[true, true, true], [false, false]]
        /// </code>
        /// Example 2:
        /// <code><see cref="Ext.ExtContext.partition">Ext.partition</see>(
        /// <see cref="Ext.ExtContext.query">Ext.query</see>("p"),
        /// function(val){
        /// return val.className == "class1"
        /// }
        /// );
        /// // true are those paragraph elements with a className of "class1",
        /// // false set are those that do not have that className.
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Will be removed in the next major version</p>
        /// </summary>
        /// <param name="arr"><p>The array to partition</p>
        /// </param>
        /// <param name="truth"><p>a function to determine truth.
        /// If this is omitted the element itself must be able to be evaluated for its truthfulness.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>[array of truish values, array of falsy values]</p>
        /// </div>
        /// </returns>
        public static JsArray partition(object arr, object truth=null){return null;}
        /// <summary>
        /// Create a new function from the provided fn, the arguments of which are pre-set to args.
        /// New arguments passed to the newly created callback when it's invoked are appended after the pre-set ones.
        /// This is especially useful when creating callbacks.
        /// For example:
        /// <code>var originalFunction = function(){
        /// alert(<see cref="Ext.Array.from">Ext.Array.from</see>(arguments).join(' '));
        /// };
        /// var callback = <see cref="Ext.Function.pass">Ext.Function.pass</see>(originalFunction, ['Hello', 'World']);
        /// callback(); // alerts 'Hello World'
        /// callback('by Me'); // alerts 'Hello World by Me'
        /// </code>
        /// <see cref="Ext.ExtContext.pass">Ext.pass</see> is alias for <see cref="Ext.Function.pass">Ext.Function.pass</see>
        /// </summary>
        /// <param name="fn"><p>The original function</p>
        /// </param>
        /// <param name="args"><p>The arguments to pass to new callback</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the function is executed.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>The new callback function</p>
        /// </div>
        /// </returns>
        public static System.Delegate pass(System.Delegate fn, object args=null, object scope=null){return null;}
        /// <summary>
        /// Old alias to Ext.Array.pluck
        /// Plucks the value of a property from each item in the Array. Example:
        /// <code><see cref="Ext.Array.pluck">Ext.Array.pluck</see>(<see cref="Ext.ExtContext.query">Ext.query</see>("p"), "className"); // [el1.className, el2.className, ..., elN.className]
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Array.pluck">Ext.Array.pluck</see> instead</p>
        /// </summary>
        /// <param name="array"><p>The Array of items to pluck the value from.</p>
        /// </param>
        /// <param name="propertyName"><p>The property name to pluck from each element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The value from each item in the Array.</p>
        /// </div>
        /// </returns>
        public static JsArray pluck(object array, JsString propertyName){return null;}
        /// <summary>
        /// Shorthand for Ext.PluginManager.registerType
        /// </summary>
        /// <param name="ptype"><p>The ptype mnemonic string by which the Plugin class
        /// may be looked up.</p>
        /// </param>
        /// <param name="cls"><p>The new Plugin class.</p>
        /// </param>
        public static void preg(JsString ptype, System.Delegate cls){}
        /// <summary>
        /// Shorthand of Ext.dom.Query.select
        /// Selects an array of DOM nodes by CSS/XPath selector.
        /// Uses <i>document.querySelectorAll</i> if browser supports that, otherwise falls back to
        /// <see cref="Ext.dom.Query.jsSelect">Ext.dom.Query.jsSelect</see> to do the work.
        /// Aliased as <see cref="Ext.ExtContext.query">query</see>.
        /// </summary>
        /// <param name="path"><p>The selector/xpath query</p>
        /// </param>
        /// <param name="root"><p>The start of the query.</p>
        /// <p>Defaults to: <c>document</c></p></param>
        /// <param name="type"><p>Either "select" or "simple" for a simple selector match (only valid when
        /// used when the call is deferred to the jsSelect method)</p>
        /// <p>Defaults to: <c>&quot;select&quot;</c></p></param>
        /// <returns>
        /// <span>HTMLElement[]</span><div><p>An array of DOM elements (not a NodeList as returned by <c>querySelectorAll</c>).</p>
        /// </div>
        /// </returns>
        public static JsObject[] query(object path, object root=null, object type=null){return null;}
        /// <summary>
        /// Old way for creating Model classes.  Instead use:
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>("MyModel", {
        /// extend: "<see cref="Ext.data.Model">Ext.data.Model</see>",
        /// fields: []
        /// });
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.ExtContext.define">define</see> instead.</p>
        /// </summary>
        /// <param name="name"><p>Name of the Model class.</p>
        /// </param>
        /// <param name="config"><p>A configuration object for the Model you wish to create.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see></span><div><p>The newly registered Model</p>
        /// </div>
        /// </returns>
        public static Ext.data.Model regModel(JsString name, object config){return null;}
        /// <summary>
        /// Creates a new store for the given id and config, then registers it with the Store Manager.
        /// Sample usage:
        /// <code><see cref="Ext.ExtContext.regStore">Ext.regStore</see>('AllUsers', {
        /// model: 'User'
        /// });
        /// // the store can now easily be used throughout the application
        /// new Ext.List({
        /// store: 'AllUsers',
        /// ... other config
        /// });
        /// </code>
        /// </summary>
        /// <param name="id"><p>The id to set on the new store</p>
        /// </param>
        /// <param name="config"><p>The store config</p>
        /// </param>
        public static void regStore(JsString id, object config){}
        /// <summary>
        /// Removes a DOM node from the document.
        /// Removes this element from the document, removes all DOM event listeners, and
        /// deletes the cache reference. All DOM event listeners are removed from this element.
        /// If <see cref="Ext.enableNestedListenerRemoval">Ext.enableNestedListenerRemoval</see> is
        /// <c>true</c>, then DOM event listeners are also removed from all child nodes.
        /// The body node will be ignored if passed in.
        /// </summary>
        /// <param name="node"><p>The node to remove</p>
        /// </param>
        public static void removeNode(object node){}
        /// <summary>
        /// Convenient alias of Ext.Loader.require. Please see the introduction documentation of
        /// Ext.Loader for examples.
        /// </summary>
        public static void require(params object[] args){}
        /// <summary>
        /// Resumes layout activity in the whole framework.
        /// <see cref="Ext.ExtContext.suspendLayouts">suspendLayouts</see> is alias of <see cref="Ext.AbstractComponent.suspendLayouts">Ext.AbstractComponent.suspendLayouts</see>.
        /// </summary>
        /// <param name="flush"><p>True to perform all the pending layouts. This can also be
        /// achieved by calling <see cref="Ext.AbstractComponent.flushLayouts">flushLayouts</see> directly.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public static void resumeLayouts(object flush=null){}
        /// <summary>
        /// Shorthand of Ext.Element.select.
        /// Creates a <see cref="Ext.dom.CompositeElement">Ext.CompositeElement</see> for child nodes based on the passed CSS selector (the selector should not contain an id).
        /// </summary>
        /// <param name="selector"><p>The CSS selector</p>
        /// </param>
        /// <param name="unique"><p>True to create a unique <see cref="Ext.dom.Element">Ext.Element</see> for each element. Defaults to a shared flyweight object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.CompositeElement">Ext.CompositeElement</see></span><div><p>The composite element</p>
        /// </div>
        /// </returns>
        public static Ext.dom.CompositeElement select(JsString selector, object unique=null){return null;}
        /// <summary>
        /// Set version number for the given package name.
        /// </summary>
        /// <param name="packageName"><p>The package name, for example: 'core', 'touch', 'extjs'</p>
        /// </param>
        /// <param name="version"><p>The version, for example: '1.2.3alpha', '2.4.0-dev'</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext">Ext</see></span><div>
        /// </div>
        /// </returns>
        public static ExtContext setVersion(JsString packageName, object version){return null;}
        /// <summary>
        /// Old alias to Ext.Array.sum
        /// Calculates the sum of all items in the given array.
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Array.sum">Ext.Array.sum</see> instead</p>
        /// </summary>
        /// <param name="array"><p>The Array to calculate the sum value of.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The sum.</p>
        /// </div>
        /// </returns>
        public static JsNumber sum(JsArray array){return null;}
        /// <summary>
        /// Stops layouts from happening in the whole framework.
        /// It's useful to suspend the layout activity while updating multiple components and
        /// containers:
        /// <code><see cref="Ext.ExtContext.suspendLayouts">Ext.suspendLayouts</see>();
        /// // batch of updates...
        /// <see cref="Ext.ExtContext.resumeLayouts">Ext.resumeLayouts</see>(true);
        /// </code>
        /// <see cref="Ext.ExtContext.suspendLayouts">suspendLayouts</see> is alias of <see cref="Ext.AbstractComponent.suspendLayouts">Ext.AbstractComponent.suspendLayouts</see>.
        /// See also <see cref="Ext.ExtContext.batchLayouts">batchLayouts</see> for more abstract way of doing this.
        /// </summary>
        public static void suspendLayouts(){}
        /// <summary>
        /// Synchronous version of require, convenient alias of Ext.Loader.syncRequire.
        /// </summary>
        public static void syncRequire(){}
        /// <summary>
        /// Converts any iterable (numeric indices and a length property) into a true array.
        /// <code>function test() {
        /// var args = <see cref="Ext.Array.toArray">Ext.Array.toArray</see>(arguments),
        /// fromSecondToLastArgs = <see cref="Ext.Array.toArray">Ext.Array.toArray</see>(arguments, 1);
        /// alert(args.join(' '));
        /// alert(fromSecondToLastArgs.join(' '));
        /// }
        /// test('just', 'testing', 'here'); // alerts 'just testing here';
        /// // alerts 'testing here';
        /// <see cref="Ext.Array.toArray">Ext.Array.toArray</see>(document.getElementsByTagName('div')); // will convert the NodeList into an array
        /// <see cref="Ext.Array.toArray">Ext.Array.toArray</see>('splitted'); // returns ['s', 'p', 'l', 'i', 't', 't', 'e', 'd']
        /// <see cref="Ext.Array.toArray">Ext.Array.toArray</see>('splitted', 0, 3); // returns ['s', 'p', 'l']
        /// </code>
        /// <see cref="Ext.ExtContext.toArray">Ext.toArray</see> is alias for <see cref="Ext.Array.toArray">Ext.Array.toArray</see>
        /// </summary>
        /// <param name="iterable"><p>the iterable object to be turned into a true Array.</p>
        /// </param>
        /// <param name="start"><p>a zero-based index that specifies the start of extraction. Defaults to 0</p>
        /// </param>
        /// <param name="end"><p>a 1-based index that specifies the end of extraction. Defaults to the last
        /// index of the iterable value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>array</p>
        /// </div>
        /// </returns>
        public static JsArray toArray(object iterable, object start=null, object end=null){return null;}
        /// <summary>
        /// Turns an array into a sentence, joined by a specified connector - e.g.:
        /// <code><see cref="Ext.ExtContext.toSentence">Ext.toSentence</see>(['Adama', 'Tigh', 'Roslin']); //'Adama, Tigh and Roslin'
        /// <see cref="Ext.ExtContext.toSentence">Ext.toSentence</see>(['Adama', 'Tigh', 'Roslin'], 'or'); //'Adama, Tigh or Roslin'
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Will be removed in the next major version</p>
        /// </summary>
        /// <param name="items"><p>The array to create a sentence from</p>
        /// </param>
        /// <param name="connector"><p>The string to use to connect the last two words.
        /// Usually 'and' or 'or' - defaults to 'and'.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The sentence string</p>
        /// </div>
        /// </returns>
        public static JsString toSentence(JsArray<String> items, JsString connector){return null;}
        /// <summary>
        /// Old alias to typeOf
        /// Returns the type of the given variable in string format. List of possible values are:
        /// <li><c>undefined</c>: If the given value is <c>undefined</c></li>
        /// <li><c>null</c>: If the given value is <c>null</c></li>
        /// <li><c>string</c>: If the given value is a string</li>
        /// <li><c>number</c>: If the given value is a number</li>
        /// <li><c>boolean</c>: If the given value is a boolean value</li>
        /// <li><c>date</c>: If the given value is a <c>Date</c> object</li>
        /// <li><c>function</c>: If the given value is a function reference</li>
        /// <li><c>object</c>: If the given value is an object</li>
        /// <li><c>array</c>: If the given value is an array</li>
        /// <li><c>regexp</c>: If the given value is a regular expression</li>
        /// <li><c>element</c>: If the given value is a DOM Element</li>
        /// <li><c>textnode</c>: If the given value is a DOM text node and contains something other than whitespace</li>
        /// <li><c>whitespace</c>: If the given value is a DOM text node and contains only whitespace</li>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.ExtContext.typeOf">typeOf</see> instead</p>
        /// </summary>
        /// <param name="value">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString type(object value){return null;}
        /// <summary>
        /// Returns the type of the given variable in string format. List of possible values are:
        /// <li><c>undefined</c>: If the given value is <c>undefined</c></li>
        /// <li><c>null</c>: If the given value is <c>null</c></li>
        /// <li><c>string</c>: If the given value is a string</li>
        /// <li><c>number</c>: If the given value is a number</li>
        /// <li><c>boolean</c>: If the given value is a boolean value</li>
        /// <li><c>date</c>: If the given value is a <c>Date</c> object</li>
        /// <li><c>function</c>: If the given value is a function reference</li>
        /// <li><c>object</c>: If the given value is an object</li>
        /// <li><c>array</c>: If the given value is an array</li>
        /// <li><c>regexp</c>: If the given value is a regular expression</li>
        /// <li><c>element</c>: If the given value is a DOM Element</li>
        /// <li><c>textnode</c>: If the given value is a DOM text node and contains something other than whitespace</li>
        /// <li><c>whitespace</c>: If the given value is a DOM text node and contains only whitespace</li>
        /// </summary>
        /// <param name="value">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString typeOf(object value){return null;}
        /// <summary>
        /// Old alias to Ext.Array.unique
        /// Returns a new array with unique items
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Array.unique">Ext.Array.unique</see> instead</p>
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>results</p>
        /// </div>
        /// </returns>
        public static JsArray unique(JsArray array){return null;}
        /// <summary>
        /// Old alias to Ext.String.urlAppend
        /// Appends content to the query string of a URL, handling logic for whether to place
        /// a question mark or ampersand.
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// <p>Use <see cref="Ext.String.urlAppend">Ext.String.urlAppend</see> instead</p>
        /// </summary>
        /// <param name="url"><p>The URL to append to.</p>
        /// </param>
        /// <param name="string"><p>The content to append to the URL.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The resulting URL</p>
        /// </div>
        /// </returns>
        public static JsString urlAppend(JsString url, JsString @string){return null;}
        /// <summary>
        /// Alias for Ext.Object.fromQueryString.
        /// Converts a query string back into an object.
        /// Non-recursive:
        /// <code><see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>("foo=1&amp;bar=2"); // returns {foo: 1, bar: 2}
        /// <see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>("foo=&amp;bar=2"); // returns {foo: null, bar: 2}
        /// <see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>("some%20price=%24300"); // returns {'some price': '$300'}
        /// <see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>("colors=red&amp;colors=green&amp;colors=blue"); // returns {colors: ['red', 'green', 'blue']}
        /// </code>
        /// Recursive:
        /// <code><see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>(
        /// "username=Jacky&amp;"+
        /// "dateOfBirth[day]=1&amp;dateOfBirth[month]=2&amp;dateOfBirth[year]=1911&amp;"+
        /// "hobbies[0]=coding&amp;hobbies[1]=eating&amp;hobbies[2]=sleeping&amp;"+
        /// "hobbies[3][0]=nested&amp;hobbies[3][1]=stuff", true);
        /// // returns
        /// {
        /// username: 'Jacky',
        /// dateOfBirth: {
        /// day: '1',
        /// month: '2',
        /// year: '1911'
        /// },
        /// hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]
        /// }
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see> instead</p>
        /// </summary>
        /// <param name="queryString"><p>The query string to decode</p>
        /// </param>
        /// <param name="recursive"><p>Whether or not to recursively decode the string. This format is supported by
        /// PHP / Ruby on Rails servers and similar.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public static object urlDecode(JsString queryString, object recursive=null){return null;}
        /// <summary>
        /// Takes an object and converts it to an encoded query string.
        /// Non-recursive:
        /// <code><see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({foo: 1, bar: 2}); // returns "foo=1&amp;bar=2"
        /// <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({foo: null, bar: 2}); // returns "foo=&amp;bar=2"
        /// <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({'some price': '$300'}); // returns "some%20price=%24300"
        /// <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({date: new Date(2011, 0, 1)}); // returns "date=%222011-01-01T00%3A00%3A00%22"
        /// <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({colors: ['red', 'green', 'blue']}); // returns "colors=red&amp;colors=green&amp;colors=blue"
        /// </code>
        /// Recursive:
        /// <code><see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({
        /// username: 'Jacky',
        /// dateOfBirth: {
        /// day: 1,
        /// month: 2,
        /// year: 1911
        /// },
        /// hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]
        /// }, true); // returns the following string (broken down and url-decoded for ease of reading purpose):
        /// // username=Jacky
        /// //    &amp;dateOfBirth[day]=1&amp;dateOfBirth[month]=2&amp;dateOfBirth[year]=1911
        /// //    &amp;hobbies[0]=coding&amp;hobbies[1]=eating&amp;hobbies[2]=sleeping&amp;hobbies[3][0]=nested&amp;hobbies[3][1]=stuff
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see> instead</p>
        /// </summary>
        /// <param name="object"><p>The object to encode</p>
        /// </param>
        /// <param name="recursive"><p>Whether or not to interpret the object in recursive format.
        /// (PHP / Ruby on Rails servers and similar).</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>queryString</p>
        /// </div>
        /// </returns>
        public static JsString urlEncode(object @object, object recursive=null){return null;}
        /// <summary>
        /// Utility method for returning a default value if the passed value is empty.
        /// The value is deemed to be empty if it is:
        /// <li>null</li>
        /// <li>undefined</li>
        /// <li>an empty array</li>
        /// <li>a zero length string (Unless the <c>allowBlank</c> parameter is <c>true</c>)</li>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Use <see cref="Ext.ExtContext.valueFrom">valueFrom</see> instead</p>
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <param name="defaultValue"><p>The value to return if the original value is empty</p>
        /// </param>
        /// <param name="allowBlank"><p>true to allow zero length strings to qualify as non-empty.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>value, if non-empty, else defaultValue</p>
        /// </div>
        /// </returns>
        public static object value(object value, object defaultValue, object allowBlank=null){return null;}
        /// <summary>
        /// Returns the given value itself if it's not empty, as described in isEmpty; returns the default
        /// value (second argument) otherwise.
        /// </summary>
        /// <param name="value"><p>The value to test</p>
        /// </param>
        /// <param name="defaultValue"><p>The value to return if the original value is empty</p>
        /// </param>
        /// <param name="allowBlank"><p>true to allow zero length strings to qualify as non-empty (defaults to false)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>value, if non-empty, else defaultValue</p>
        /// </div>
        /// </returns>
        public static object valueFrom(object value, object defaultValue, object allowBlank=null){return null;}
        /// <summary>
        /// Convenient shorthand to create a widget by its xtype or a config object.
        /// See also Ext.ClassManager.instantiateByAlias.
        /// <code> var button = <see cref="Ext.ExtContext.widget">Ext.widget</see>('button'); // Equivalent to <see cref="Ext.ExtContext.create">Ext.create</see>('widget.button');
        /// var panel = <see cref="Ext.ExtContext.widget">Ext.widget</see>('panel', { // Equivalent to <see cref="Ext.ExtContext.create">Ext.create</see>('widget.panel')
        /// title: 'Panel'
        /// });
        /// var grid = <see cref="Ext.ExtContext.widget">Ext.widget</see>({
        /// xtype: 'grid',
        /// ...
        /// });
        /// </code>
        /// If a <see cref="Ext.Component">component</see> instance is passed, it is simply returned.
        /// </summary>
        /// <param name="name"><p>The xtype of the widget to create.</p>
        /// </param>
        /// <param name="config"><p>The configuration object for the widget constructor.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The widget instance</p>
        /// </div>
        /// </returns>
        public static object widget(object name=null, object config=null){return null;}
        /// <summary>
        /// Zips N sets together.
        /// Example 1:
        /// <code><see cref="Ext.ExtContext.zip">Ext.zip</see>([1,2,3],[4,5,6]); // [[1,4],[2,5],[3,6]]
        /// </code>
        /// Example 2:
        /// <code><see cref="Ext.ExtContext.zip">Ext.zip</see>(
        /// [ "+", "-", "+"],
        /// [  12,  10,  22],
        /// [  43,  15,  96],
        /// function(a, b, c){
        /// return "$" + a + "" + b + "." + c
        /// }
        /// ); // ["$+12.43", "$-10.15", "$+22.96"]
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0.0</p>
        /// <p>Will be removed in the next major version</p>
        /// </summary>
        /// <param name="arr"><p>This argument may be repeated. Array(s)
        /// to contribute values.</p>
        /// </param>
        /// <param name="zipper"><p>The last item in the argument list.
        /// This will drive how the items are zipped together.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The zipped set.</p>
        /// </div>
        /// </returns>
        public static JsArray zip(object arr, object zipper=null){return null;}
        public static Ext.window.MessageBox Msg{get;set;}
        public static Ext.direct.Manager Direct{get;set;}
        public ExtContext(ExtContextConfig config){}
        public ExtContext(){}
        public ExtContext(params object[] args){}
    }
    #endregion
    #region ExtContextConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ExtContextConfig
    {
        public ExtContextConfig(params object[] args){}
    }
    #endregion
    #region ExtContextEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ExtContextEvents
    {
        public ExtContextEvents(params object[] args){}
    }
    #endregion
}
