//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region Editor
    /// <inheritdocs />
    /// <summary>
    /// <p>The Editor class is used to provide inline editing for elements on the page. The editor
    /// is backed by a <see cref="Ext.form.field.Field">Ext.form.field.Field</see> that will be displayed to edit the underlying content.
    /// The editor is a floating Component, when the editor is shown it is automatically aligned to
    /// display over the top of the bound element it is editing. The Editor contains several options
    /// for how to handle key presses:</p>
    /// <ul>
    /// <li><see cref="Ext.EditorConfig.completeOnEnter">completeOnEnter</see></li>
    /// <li><see cref="Ext.EditorConfig.cancelOnEsc">cancelOnEsc</see></li>
    /// <li><see cref="Ext.EditorConfig.swallowKeys">swallowKeys</see></li>
    /// </ul>
    /// <p>It also has options for how to use the value once the editor has been activated:</p>
    /// <ul>
    /// <li><see cref="Ext.EditorConfig.revertInvalid">revertInvalid</see></li>
    /// <li><see cref="Ext.EditorConfig.ignoreNoChange">ignoreNoChange</see></li>
    /// <li><see cref="Ext.EditorConfig.updateEl">updateEl</see></li>
    /// </ul>
    /// <p>Sample usage:</p>
    /// <pre><code>var editor = new <see cref="Ext.Editor">Ext.Editor</see>({
    /// updateEl: true, // update the innerHTML of the bound element when editing completes
    /// field: {
    /// xtype: 'textfield'
    /// }
    /// });
    /// var el = <see cref="Ext.ExtContext.get">Ext.get</see>('my-text'); // The element to 'edit'
    /// editor.startEdit(el); // The value of the field will be taken as the innerHTML of the element.
    /// </code></pre>
    /// <p><p><i></i></p></p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Editor : Ext.container.Container
    {
        /// <summary>
        /// The position to align to (see Ext.Element.alignTo for more details).
        /// Defaults to: <c>&quot;c-c?&quot;</c>
        /// </summary>
        public JsString alignment;
        /// <summary>
        /// True to complete the editing process if in edit mode when the
        /// field is blurred.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowBlur;
        /// <summary>
        /// True for the editor to automatically adopt the size of the underlying field. Otherwise, an object
        /// can be passed to indicate where to get each dimension. The available properties are 'boundEl' and
        /// 'field'. If a dimension is not specified, it will use the underlying height/width specified on
        /// the editor object.
        /// Examples:
        /// <code>autoSize: true // The editor will be sized to the height/width of the field
        /// height: 21,
        /// autoSize: {
        /// width: 'boundEl' // The width will be determined by the width of the boundEl, the height from the editor (21)
        /// }
        /// autoSize: {
        /// width: 'field', // Width from the field
        /// height: 'boundEl' // Height from the boundEl
        /// }
        /// </code>
        /// </summary>
        public object autoSize;
        /// <summary>
        /// True to cancel the edit when the escape key is pressed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool cancelOnEsc;
        /// <summary>
        /// True to complete the edit when the enter key is pressed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool completeOnEnter;
        /// <summary>
        /// True to constrain the editor to the viewport
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool constrain;
        /// <summary>
        /// The Field object (or descendant) or config object for field
        /// </summary>
        public Ext.form.field.Field field;
        /// <summary>
        /// False to keep the bound element visible while the editor is displayed
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool hideEl;
        /// <summary>
        /// True to skip the edit completion process (no save, no events fired) if the user completes an edit and
        /// the value has not changed.  Applies only to string values - edits for other data types
        /// will never be ignored.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool ignoreNoChange;
        /// <summary>
        /// The offsets to use when aligning (see Ext.Element.alignTo for more details.
        /// Defaults to: <c>[0, 0]</c>
        /// </summary>
        public JsNumber offsets;
        /// <summary>
        /// An element to render to.
        /// Defaults to: <c>document.body</c>
        /// </summary>
        public object parentEl;
        /// <summary>
        /// True to automatically revert the field value and cancel the edit when the user completes an edit and the field
        /// validation fails
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool revertInvalid;
        /// <summary>
        /// Handle the keydown/keypress events so they don't propagate
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool swallowKeys;
        /// <summary>
        /// True to update the innerHTML of the bound element when the update completes
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool updateEl;
        /// <summary>
        /// The data value of the underlying field
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsObject value;
        /// <summary>
        /// Cancels the editing process and hides the editor without persisting any changes.  The field value will be
        /// reverted to the original starting value.
        /// </summary>
        /// <param name="remainVisible"><p>Override the default behavior and keep the editor visible after cancel</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public void cancelEdit(object remainVisible=null){}
        /// <summary>
        /// Ends the editing process, persists the changed value to the underlying field, and hides the editor.
        /// </summary>
        /// <param name="remainVisible"><p>Override the default behavior and keep the editor visible after edit</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public void completeEdit(object remainVisible=null){}
        /// <summary>
        /// Gets the data value of the editor
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The data value</p>
        /// </div>
        /// </returns>
        public object getValue(){return null;}
        /// <summary>
        /// Realigns the editor to the bound field based on the current alignment config value.
        /// </summary>
        /// <param name="autoSize"><p>True to size the field to the dimensions of the bound element.</p>
        /// </param>
        public void realign(object autoSize=null){}
        /// <summary>
        /// Sets the data value of the editor
        /// </summary>
        /// <param name="value"><p>Any valid value supported by the underlying field</p>
        /// </param>
        public void setValue(object value){}
        /// <summary>
        /// Starts the editing process and shows the editor.
        /// </summary>
        /// <param name="el"><p>The element to edit</p>
        /// </param>
        /// <param name="value"><p>A value to initialize the editor with. If a value is not provided, it defaults
        /// to the innerHTML of el.</p>
        /// </param>
        public void startEdit(object el, object value=null){}
        public Editor(Ext.EditorConfig config){}
        public Editor(){}
        public Editor(params object[] args){}
    }
    #endregion
    #region EditorConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class EditorConfig : Ext.container.ContainerConfig
    {
        /// <summary>
        /// The position to align to (see Ext.Element.alignTo for more details).
        /// Defaults to: <c>&quot;c-c?&quot;</c>
        /// </summary>
        public JsString alignment;
        /// <summary>
        /// True to complete the editing process if in edit mode when the
        /// field is blurred.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowBlur;
        /// <summary>
        /// True for the editor to automatically adopt the size of the underlying field. Otherwise, an object
        /// can be passed to indicate where to get each dimension. The available properties are 'boundEl' and
        /// 'field'. If a dimension is not specified, it will use the underlying height/width specified on
        /// the editor object.
        /// Examples:
        /// <code>autoSize: true // The editor will be sized to the height/width of the field
        /// height: 21,
        /// autoSize: {
        /// width: 'boundEl' // The width will be determined by the width of the boundEl, the height from the editor (21)
        /// }
        /// autoSize: {
        /// width: 'field', // Width from the field
        /// height: 'boundEl' // Height from the boundEl
        /// }
        /// </code>
        /// </summary>
        public object autoSize;
        /// <summary>
        /// True to cancel the edit when the escape key is pressed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool cancelOnEsc;
        /// <summary>
        /// True to complete the edit when the enter key is pressed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool completeOnEnter;
        /// <summary>
        /// True to constrain the editor to the viewport
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool constrain;
        /// <summary>
        /// The Field object (or descendant) or config object for field
        /// </summary>
        public Ext.form.field.Field field;
        /// <summary>
        /// False to keep the bound element visible while the editor is displayed
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool hideEl;
        /// <summary>
        /// True to skip the edit completion process (no save, no events fired) if the user completes an edit and
        /// the value has not changed.  Applies only to string values - edits for other data types
        /// will never be ignored.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool ignoreNoChange;
        /// <summary>
        /// The offsets to use when aligning (see Ext.Element.alignTo for more details.
        /// Defaults to: <c>[0, 0]</c>
        /// </summary>
        public JsNumber offsets;
        /// <summary>
        /// An element to render to.
        /// Defaults to: <c>document.body</c>
        /// </summary>
        public object parentEl;
        /// <summary>
        /// True to automatically revert the field value and cancel the edit when the user completes an edit and the field
        /// validation fails
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool revertInvalid;
        /// <summary>
        /// Handle the keydown/keypress events so they don't propagate
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool swallowKeys;
        /// <summary>
        /// True to update the innerHTML of the bound element when the update completes
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool updateEl;
        /// <summary>
        /// The data value of the underlying field
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsObject value;
        public EditorConfig(params object[] args){}
    }
    #endregion
    #region EditorEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class EditorEvents : Ext.container.ContainerEvents
    {
        /// <summary>
        /// Fires after a change has been made to the field, but before the change is reflected in the underlying
        /// field.  Saving the change to the field can be canceled by returning false from the handler of this event.
        /// Note that if the value has not changed and ignoreNoChange = true, the editing will still end but this
        /// event will not fire since no edit actually occurred.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The current field value</p>
        /// </param>
        /// <param name="startValue"><p>The original field value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecomplete(Ext.Editor @this, object value, object startValue, object eOpts){}
        /// <summary>
        /// Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning
        /// false from the handler of this event.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="boundEl"><p>The underlying element bound to this editor</p>
        /// </param>
        /// <param name="value"><p>The field value being set</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforestartedit(Ext.Editor @this, Ext.dom.Element boundEl, object value, object eOpts){}
        /// <summary>
        /// Fires after editing has been canceled and the editor's value has been reset.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The user-entered field value that was discarded</p>
        /// </param>
        /// <param name="startValue"><p>The original field value that was set back into the editor after cancel</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void canceledit(Ext.Editor @this, object value, object startValue, object eOpts){}
        /// <summary>
        /// Fires after editing is complete and any changed value has been written to the underlying field.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The current field value</p>
        /// </param>
        /// <param name="startValue"><p>The original field value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void complete(Ext.Editor @this, object value, object startValue, object eOpts){}
        /// <summary>
        /// Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check
        /// Ext.EventObject.getKey to determine which key was pressed.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="field"><p>The field attached to this editor</p>
        /// </param>
        /// <param name="event"><p>The event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void specialkey(Ext.Editor @this, Ext.form.field.Field field, EventObject @event, object eOpts){}
        /// <summary>
        /// Fires when this editor is displayed
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="boundEl"><p>The underlying element bound to this editor</p>
        /// </param>
        /// <param name="value"><p>The starting field value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void startedit(Ext.Editor @this, Ext.dom.Element boundEl, object value, object eOpts){}
        public EditorEvents(params object[] args){}
    }
    #endregion
}
