//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.dd
{
    #region DragDropElement
    /// <summary>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class DragDropElement
    {
        /// <summary>
        /// Internal counter
        /// Defaults to: <c>0</c>
        /// </summary>
        private JsNumber _timeoutCount{get;set;}
        /// <summary>
        /// Trying to make the load order less important.  Without this we get
        /// an error if this file is loaded before the Event Utility.
        /// </summary>
        private void _addListeners(){}
        /// <summary>
        /// Returns the X position of an html element
        /// </summary>
        /// <param name="el"><p>the element for which to get the position</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>the X coordinate</p>
        /// </div>
        /// </returns>
        public JsNumber getPosX(object el){return null;}
        /// <summary>
        /// Returns the Y position of an html element
        /// </summary>
        /// <param name="el"><p>the element for which to get the position</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>the Y coordinate</p>
        /// </div>
        /// </returns>
        public JsNumber getPosY(object el){return null;}
        /// <summary>
        /// Returns the current scroll position
        /// </summary>
        private void getScroll(){}
        /// <summary>
        /// Gets the scrollLeft
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>the document's scrollTop</p>
        /// </div>
        /// </returns>
        public JsNumber getScrollLeft(){return null;}
        /// <summary>
        /// Gets the scrollTop
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>the document's scrollTop</p>
        /// </div>
        /// </returns>
        public JsNumber getScrollTop(){return null;}
        /// <summary>
        /// Returns the specified element style property
        /// </summary>
        /// <param name="el"><p>the element</p>
        /// </param>
        /// <param name="styleProp"><p>the style property</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The value of the style property</p>
        /// </div>
        /// </returns>
        public JsString getStyle(object el, JsString styleProp){return null;}
        /// <summary>
        /// Recursively searches the immediate parent and all child nodes for
        /// the handle element in order to determine wheter or not it was
        /// clicked.
        /// </summary>
        /// <param name="node"><p>the html element to inspect</p>
        /// </param>
        public void handleWasClicked(object node){}
        /// <summary>
        /// Sets the x/y position of an element to the location of the
        /// target element.
        /// </summary>
        /// <param name="moveEl"><p>The element to move</p>
        /// </param>
        /// <param name="targetEl"><p>The position reference element</p>
        /// </param>
        public void moveToEl(object moveEl, object targetEl){}
        /// <summary>
        /// Numeric array sort function
        /// </summary>
        /// <param name="a">
        /// </param>
        /// <param name="b">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>positive, negative or 0</p>
        /// </div>
        /// </returns>
        public JsNumber numericSort(JsNumber a, JsNumber b){return null;}
        /// <summary>
        /// Swap two nodes.  In IE, we use the native method, for others we
        /// emulate the IE behavior
        /// </summary>
        /// <param name="n1"><p>the first node to swap</p>
        /// </param>
        /// <param name="n2"><p>the other node to swap</p>
        /// </param>
        public void swapNode(object n1, object n2){}
        public DragDropElement(DragDropElementConfig config){}
        public DragDropElement(){}
        public DragDropElement(params object[] args){}
    }
    #endregion
    #region DragDropElementConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DragDropElementConfig
    {
        public DragDropElementConfig(params object[] args){}
    }
    #endregion
    #region DragDropElementEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DragDropElementEvents
    {
        public DragDropElementEvents(params object[] args){}
    }
    #endregion
}
