//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.reader
{
    #region Array
    /// <inheritdocs />
    /// <summary>
    /// <p>Data reader class to create an Array of <see cref="Ext.data.Model">Ext.data.Model</see> objects from an Array.
    /// Each element of that Array represents a row of data fields. The
    /// fields are pulled into a Record object using as a subscript, the <c>mapping</c> property
    /// of the field definition if it exists, or the field's ordinal position in the definition.</p>
    /// <p><u>Example code:</u></p>
    /// <pre><code>Employee = <see cref="Ext.ExtContext.define">Ext.define</see>('Employee', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: [
    /// 'id',
    /// {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
    /// {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
    /// ]
    /// });
    /// var myReader = new <see cref="Ext.data.reader.Array">Ext.data.reader.Array</see>({
    /// model: 'Employee'
    /// }, Employee);
    /// </code></pre>
    /// <p>This would consume an Array like this:</p>
    /// <pre><code>[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Array : Ext.data.reader.Json
    {
        /// <summary>
        /// Returns an accessor expression for the passed Field from an Array using either the Field's mapping, or
        /// its ordinal position in the fields collsction as the index.
        /// This is used by buildExtractors to create optimized on extractor function which converts raw data into model instances.
        /// </summary>
        /// <param name="field">
        /// </param>
        /// <param name="fieldVarName">
        /// </param>
        /// <param name="dataName">
        /// </param>
        private void createFieldAccessExpression(object field, object fieldVarName, object dataName){}
        public Array(Ext.data.reader.ArrayConfig config){}
        public Array(){}
        public Array(params object[] args){}
    }
    #endregion
    #region ArrayConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ArrayConfig : Ext.data.reader.JsonConfig
    {
        public ArrayConfig(params object[] args){}
    }
    #endregion
    #region ArrayEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ArrayEvents : Ext.data.reader.JsonEvents
    {
        public ArrayEvents(params object[] args){}
    }
    #endregion
}
