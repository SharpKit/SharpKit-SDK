//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.chart.series
{
    #region Cartesian
    /// <inheritdocs />
    /// <summary>
    /// <p>Common base class for series implementations which plot values using x/y coordinates.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Cartesian : Series
    {
        /// <summary>
        /// The position of the axis to bind the values to. Possible values are 'left', 'bottom', 'top' and 'right'.
        /// You must explicitly set this value to bind the values of the line series to the ones in the axis, otherwise a
        /// relative scale will be used. For example, if you're using a Scatter or Line series and you'd like to have the
        /// values in the chart relative to the bottom and left axes then axis should be ['left', 'bottom'].
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public object axis;
        /// <summary>
        /// The field used to access the x axis value from the items from the data
        /// source.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString xField{get;set;}
        /// <summary>
        /// The field used to access the y-axis value from the items from the data
        /// source.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString yField{get;set;}
        /// <summary>
        /// Iterates over a given record's values for each of this series's yFields,
        /// executing a given function for each value. Any yFields that have been combined
        /// via legend drag-drop will be treated as a single value.
        /// </summary>
        /// <param name="record">
        /// </param>
        /// <param name="fn">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected void eachYValue(Ext.data.Model record, System.Delegate fn, object scope){}
        /// <summary>
        /// Calculate the min and max values for this series's xField.
        /// </summary>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>[min, max]</p>
        /// </div>
        /// </returns>
        public JsArray getMinMaxXValues(){return null;}
        /// <summary>
        /// Calculate the min and max values for this series's yField(s). Takes into account yField
        /// combinations, exclusions, and stacking.
        /// </summary>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>[min, max]</p>
        /// </div>
        /// </returns>
        public JsArray getMinMaxYValues(){return null;}
        /// <summary>
        /// Returns an array of functions, each of which returns the value of the yField
        /// corresponding to function's index in the array, for a given record (each function takes the
        /// record as its only argument.) If yFields have been combined by the user via legend drag-drop,
        /// this list of accessors will be kept in sync with those combinations.
        /// </summary>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>array of accessor functions</p>
        /// </div>
        /// </returns>
        protected JsArray getYValueAccessors(){return null;}
        /// <summary>
        /// Returns the number of yField values, taking into account fields combined
        /// via legend drag-drop.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        protected JsNumber getYValueCount(){return null;}
        public Cartesian(CartesianConfig config){}
        public Cartesian(){}
        public Cartesian(params object[] args){}
    }
    #endregion
    #region CartesianConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CartesianConfig : SeriesConfig
    {
        /// <summary>
        /// The position of the axis to bind the values to. Possible values are 'left', 'bottom', 'top' and 'right'.
        /// You must explicitly set this value to bind the values of the line series to the ones in the axis, otherwise a
        /// relative scale will be used. For example, if you're using a Scatter or Line series and you'd like to have the
        /// values in the chart relative to the bottom and left axes then axis should be ['left', 'bottom'].
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public object axis;
        public CartesianConfig(params object[] args){}
    }
    #endregion
    #region CartesianEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CartesianEvents : SeriesEvents
    {
        public CartesianEvents(params object[] args){}
    }
    #endregion
}
