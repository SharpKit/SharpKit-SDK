//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.picker
{
    #region Month
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>A month picker component. This class is used by the <see cref="Ext.picker.Date">Date picker</see> class
    /// to allow browsing and selection of year/months combinations.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Month : Ext.Component
    {
        /// <summary>
        /// The text to display on the cancel button.
        /// Defaults to: <c>&quot;Cancel&quot;</c>
        /// </summary>
        public JsString cancelText;
        /// <summary>
        /// The text to display on the ok button.
        /// Defaults to: <c>&quot;OK&quot;</c>
        /// </summary>
        public JsString okText;
        /// <summary>
        /// The class to be added to selected items in the picker.
        /// Defaults to: <c>&quot;x-monthpicker-selected&quot;</c>
        /// </summary>
        public JsString selectedCls;
        /// <summary>
        /// True to show ok and cancel buttons below the picker.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showButtons;
        /// <summary>
        /// The default value to set. See setValue
        /// </summary>
        public object value;
        /// <summary>
        /// Modify the year display by passing an offset.
        /// </summary>
        /// <param name="offset"><p>The offset to move by.</p>
        /// <p>Defaults to: <c>10</c></p></param>
        public void adjustYear(object offset=null){}
        /// <summary>
        /// Gets the selected value. It is returned as an array [month, year]. It may
        /// be a partial value, for example [null, 2010]. The month is returned as
        /// 0 based.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The selected value</p>
        /// </div>
        /// </returns>
        public JsNumber[] getValue(){return null;}
        /// <summary>
        /// Gets the current year value, or the default.
        /// </summary>
        /// <param name="defaultValue"><p>The default value to use if the year is not defined.</p>
        /// </param>
        /// <param name="offset"><p>A number to offset the value by</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The year value</p>
        /// </div>
        /// </returns>
        private JsNumber getYear(JsNumber defaultValue, JsNumber offset){return null;}
        /// <summary>
        /// Get an array of years to be pushed in the template. It is not in strict
        /// numerical order because we want to show them in columns.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>An array of years</p>
        /// </div>
        /// </returns>
        private JsNumber[] getYears(){return null;}
        /// <summary>
        /// Checks whether the picker has a selection
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>Returns true if both a month and year have been selected</p>
        /// </div>
        /// </returns>
        public bool hasSelection(){return false;}
        /// <summary>
        /// React to clicks on the body
        /// </summary>
        /// <param name="e">
        /// </param>
        /// <param name="t">
        /// </param>
        private void onBodyClick(object e, object t){}
        /// <summary>
        /// React to the cancel button being pressed
        /// </summary>
        private void onCancelClick(){}
        /// <summary>
        /// React to a month being clicked
        /// </summary>
        /// <param name="target"><p>The element that was clicked</p>
        /// </param>
        /// <param name="isDouble"><p>True if the event was a doubleclick</p>
        /// </param>
        private void onMonthClick(object target, bool isDouble){}
        /// <summary>
        /// React to the ok button being pressed
        /// </summary>
        private void onOkClick(){}
        /// <summary>
        /// React to a year being clicked
        /// </summary>
        /// <param name="target"><p>The element that was clicked</p>
        /// </param>
        /// <param name="isDouble"><p>True if the event was a doubleclick</p>
        /// </param>
        private void onYearClick(object target, bool isDouble){}
        /// <summary>
        /// Returns an offsetted number based on the position in the collection. Since our collections aren't
        /// numerically ordered, this function helps to normalize those differences.
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The correctly offsetted number</p>
        /// </div>
        /// </returns>
        private JsNumber resolveOffset(object index, object offset){return null;}
        /// <summary>
        /// Set the value for the picker.
        /// </summary>
        /// <param name="value"><p>The value to set. It can be a Date object, where the month/year will be extracted, or
        /// it can be an array, with the month as the first index and the year as the second.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.picker.Month">Ext.picker.Month</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Month setValue(object value){return null;}
        /// <summary>
        /// Update the years in the body based on any change
        /// </summary>
        private void updateBody(){}
        public Month(MonthConfig config){}
        public Month(){}
        public Month(params object[] args){}
    }
    #endregion
    #region MonthConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MonthConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// The text to display on the cancel button.
        /// Defaults to: <c>&quot;Cancel&quot;</c>
        /// </summary>
        public JsString cancelText;
        /// <summary>
        /// The text to display on the ok button.
        /// Defaults to: <c>&quot;OK&quot;</c>
        /// </summary>
        public JsString okText;
        /// <summary>
        /// The class to be added to selected items in the picker.
        /// Defaults to: <c>&quot;x-monthpicker-selected&quot;</c>
        /// </summary>
        public JsString selectedCls;
        /// <summary>
        /// True to show ok and cancel buttons below the picker.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showButtons;
        /// <summary>
        /// The default value to set. See setValue
        /// </summary>
        public object value;
        public MonthConfig(params object[] args){}
    }
    #endregion
    #region MonthEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MonthEvents : Ext.ComponentEvents
    {
        /// <summary>
        /// Fires when the cancel button is pressed.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void cancelclick(Month @this, object eOpts){}
        /// <summary>
        /// Fires when a month is clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The current value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void monthclick(Month @this, JsArray value, object eOpts){}
        /// <summary>
        /// Fires when a month is clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The current value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void monthdblclick(Month @this, JsArray value, object eOpts){}
        /// <summary>
        /// Fires when the ok button is pressed.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The current value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void okclick(Month @this, JsArray value, object eOpts){}
        /// <summary>
        /// Fires when a month/year is selected.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The current value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void select(Month @this, JsArray value, object eOpts){}
        /// <summary>
        /// Fires when a year is clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The current value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void yearclick(Month @this, JsArray value, object eOpts){}
        /// <summary>
        /// Fires when a year is clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="value"><p>The current value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void yeardblclick(Month @this, JsArray value, object eOpts){}
        public MonthEvents(params object[] args){}
    }
    #endregion
}
