//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.tree
{
    #region Panel
    /// <inheritdocs />
    /// <summary>
    /// <p>The TreePanel provides tree-structured UI representation of tree-structured data.
    /// A TreePanel must be bound to a <see cref="Ext.data.TreeStore">Ext.data.TreeStore</see>. TreePanel's support
    /// multiple columns through the <see cref="Ext.tree.PanelConfig.columns">columns</see> configuration.</p>
    /// <p>Simple TreePanel using inline data:</p>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.TreeStore">Ext.data.TreeStore</see>', {
    /// root: {
    /// expanded: true,
    /// children: [
    /// { text: "detention", leaf: true },
    /// { text: "homework", expanded: true, children: [
    /// { text: "book report", leaf: true },
    /// { text: "alegrbra", leaf: true}
    /// ] },
    /// { text: "buy lottery tickets", leaf: true }
    /// ]
    /// }
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tree.Panel">Ext.tree.Panel</see>', {
    /// title: 'Simple Tree',
    /// width: 200,
    /// height: 150,
    /// store: store,
    /// rootVisible: false,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>For the tree node config options (like <c>text</c>, <c>leaf</c>, <c>expanded</c>), see the documentation of
    /// <see cref="Ext.data.NodeInterface">NodeInterface</see> config options.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Panel : Ext.panel.Table
    {
        /// <summary>
        /// The field inside the model that will be used as the node's text.
        /// Defaults to: <c>&quot;text&quot;</c>
        /// </summary>
        public JsString displayField;
        /// <summary>
        /// True to automatically prepend a leaf sorter to the store.
        /// </summary>
        public bool folderSort;
        /// <summary>
        /// False to disable tree lines.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool lines;
        /// <summary>
        /// Allows you to not specify a store on this TreePanel. This is useful for creating a simple tree with preloaded
        /// data without having to specify a TreeStore and Model. A store and model will be created and root will be passed
        /// to that store. For example:
        /// <code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tree.Panel">Ext.tree.Panel</see>', {
        /// title: 'Simple Tree',
        /// root: {
        /// text: "Root node",
        /// expanded: true,
        /// children: [
        /// { text: "Child 1", leaf: true },
        /// { text: "Child 2", leaf: true }
        /// ]
        /// },
        /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
        /// });
        /// </code>
        /// Defaults to: <c>null</c>
        /// </summary>
        public object root;
        /// <summary>
        /// False to hide the root node.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool rootVisible;
        /// <summary>
        /// True if only 1 node per branch may be expanded.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool singleExpand;
        /// <summary>
        /// True to use Vista-style arrows in the tree.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool useArrows;
        /// <summary>
        /// Collapse all nodes
        /// </summary>
        /// <param name="callback"><p>A function to execute when the collapse finishes.</p>
        /// </param>
        /// <param name="scope"><p>The scope of the callback function</p>
        /// </param>
        public void collapseAll(object callback=null, object scope=null){}
        /// <summary>
        /// Collapses a record that is loaded in the tree.
        /// </summary>
        /// <param name="record"><p>The record to collapse</p>
        /// </param>
        /// <param name="deep"><p>True to collapse nodes all the way up the tree hierarchy.</p>
        /// </param>
        /// <param name="callback"><p>The function to run after the collapse is completed</p>
        /// </param>
        /// <param name="scope"><p>The scope of the callback function.</p>
        /// </param>
        public void collapseNode(Ext.data.Model record, object deep=null, object callback=null, object scope=null){}
        /// <summary>
        /// Expand all nodes
        /// </summary>
        /// <param name="callback"><p>A function to execute when the expand finishes.</p>
        /// </param>
        /// <param name="scope"><p>The scope of the callback function</p>
        /// </param>
        public void expandAll(object callback=null, object scope=null){}
        /// <summary>
        /// Expands a record that is loaded in the tree.
        /// </summary>
        /// <param name="record"><p>The record to expand</p>
        /// </param>
        /// <param name="deep"><p>True to expand nodes all the way down the tree hierarchy.</p>
        /// </param>
        /// <param name="callback"><p>The function to run after the expand is completed</p>
        /// </param>
        /// <param name="scope"><p>The scope of the callback function.</p>
        /// </param>
        public void expandNode(Ext.data.Model record, object deep=null, object callback=null, object scope=null){}
        /// <summary>
        /// Expand the tree to the path of a particular node.
        /// </summary>
        /// <param name="path"><p>The path to expand. The path should include a leading separator.</p>
        /// </param>
        /// <param name="field"><p>The field to get the data from. Defaults to the model idProperty.</p>
        /// </param>
        /// <param name="separator"><p>A separator to use.</p>
        /// <p>Defaults to: <c>&quot;/&quot;</c></p></param>
        /// <param name="callback"><p>A function to execute when the expand finishes. The callback will be called with
        /// (success, lastNode) where success is if the expand was successful and lastNode is the last node that was expanded.</p>
        /// </param>
        /// <param name="scope"><p>The scope of the callback function</p>
        /// </param>
        public void expandPath(JsString path, object field=null, object separator=null, object callback=null, object scope=null){}
        /// <summary>
        /// Retrieve an array of checked records.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see>[]</span><div><p>An array containing the checked records</p>
        /// </div>
        /// </returns>
        public Ext.data.NodeInterface[] getChecked(){return null;}
        /// <summary>
        /// Returns the root node for this tree.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see></span><div>
        /// </div>
        /// </returns>
        public Ext.data.NodeInterface getRootNode(){return null;}
        /// <summary>
        /// Expand the tree to the path of a particular node, then select it.
        /// </summary>
        /// <param name="path"><p>The path to select. The path should include a leading separator.</p>
        /// </param>
        /// <param name="field"><p>The field to get the data from. Defaults to the model idProperty.</p>
        /// </param>
        /// <param name="separator"><p>A separator to use.</p>
        /// <p>Defaults to: <c>&quot;/&quot;</c></p></param>
        /// <param name="callback"><p>A function to execute when the select finishes. The callback will be called with
        /// (bSuccess, oLastNode) where bSuccess is if the select was successful and oLastNode is the last node that was expanded.</p>
        /// </param>
        /// <param name="scope"><p>The scope of the callback function</p>
        /// </param>
        public void selectPath(JsString path, object field=null, object separator=null, object callback=null, object scope=null){}
        /// <summary>
        /// Sets root node of this tree.
        /// </summary>
        /// <param name="root">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.NodeInterface">Ext.data.NodeInterface</see></span><div><p>The new root</p>
        /// </div>
        /// </returns>
        public Ext.data.NodeInterface setRootNode(object root=null){return null;}
        public Panel(Ext.tree.PanelConfig config){}
        public Panel(){}
        public Panel(params object[] args){}
    }
    #endregion
    #region PanelConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PanelConfig : Ext.panel.TableConfig
    {
        /// <summary>
        /// True to enable animated expand/collapse. Defaults to the value of Ext.enableFx.
        /// </summary>
        public bool animate;
        /// <summary>
        /// The field inside the model that will be used as the node's text.
        /// Defaults to: <c>&quot;text&quot;</c>
        /// </summary>
        public JsString displayField;
        /// <summary>
        /// True to automatically prepend a leaf sorter to the store.
        /// </summary>
        public bool folderSort;
        /// <summary>
        /// False to disable tree lines.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool lines;
        /// <summary>
        /// Allows you to not specify a store on this TreePanel. This is useful for creating a simple tree with preloaded
        /// data without having to specify a TreeStore and Model. A store and model will be created and root will be passed
        /// to that store. For example:
        /// <code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tree.Panel">Ext.tree.Panel</see>', {
        /// title: 'Simple Tree',
        /// root: {
        /// text: "Root node",
        /// expanded: true,
        /// children: [
        /// { text: "Child 1", leaf: true },
        /// { text: "Child 2", leaf: true }
        /// ]
        /// },
        /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
        /// });
        /// </code>
        /// Defaults to: <c>null</c>
        /// </summary>
        public object root;
        /// <summary>
        /// False to hide the root node.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool rootVisible;
        /// <summary>
        /// True if only 1 node per branch may be expanded.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool singleExpand;
        /// <summary>
        /// True to use Vista-style arrows in the tree.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool useArrows;
        public PanelConfig(params object[] args){}
    }
    #endregion
    #region PanelEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PanelEvents : Ext.panel.TableEvents
    {
        /// <summary>
        /// Fires after an item has been visually collapsed and is no longer visible in the tree.
        /// </summary>
        /// <param name="node"><p>The node that was collapsed</p>
        /// </param>
        /// <param name="index"><p>The index of the node</p>
        /// </param>
        /// <param name="item"><p>The HTML element for the node that was collapsed</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void afteritemcollapse(Ext.data.NodeInterface node, JsNumber index, object item, object eOpts){}
        /// <summary>
        /// Fires after an item has been visually expanded and is visible in the tree.
        /// </summary>
        /// <param name="node"><p>The node that was expanded</p>
        /// </param>
        /// <param name="index"><p>The index of the node</p>
        /// </param>
        /// <param name="item"><p>The HTML element for the node that was expanded</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void afteritemexpand(Ext.data.NodeInterface node, JsNumber index, object item, object eOpts){}
        /// <summary>
        /// Fires before a new child is appended, return false to cancel the append.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The child node to be appended</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemappend(Ext.data.NodeInterface @this, Ext.data.NodeInterface node, object eOpts){}
        /// <summary>
        /// Fires before this node is collapsed.
        /// </summary>
        /// <param name="this"><p>The collapsing node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemcollapse(Ext.data.NodeInterface @this, object eOpts){}
        /// <summary>
        /// Fires before this node is expanded.
        /// </summary>
        /// <param name="this"><p>The expanding node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemexpand(Ext.data.NodeInterface @this, object eOpts){}
        /// <summary>
        /// Fires before a new child is inserted, return false to cancel the insert.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The child node to be inserted</p>
        /// </param>
        /// <param name="refNode"><p>The child node the node is being inserted before</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeiteminsert(Ext.data.NodeInterface @this, Ext.data.NodeInterface node, Ext.data.NodeInterface refNode, object eOpts){}
        /// <summary>
        /// Fires before this node is moved to a new location in the tree. Return false to cancel the move.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="oldParent"><p>The parent of this node</p>
        /// </param>
        /// <param name="newParent"><p>The new parent this node is moving to</p>
        /// </param>
        /// <param name="index"><p>The index it is being moved to</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemmove(Ext.data.NodeInterface @this, Ext.data.NodeInterface oldParent, Ext.data.NodeInterface newParent, JsNumber index, object eOpts){}
        /// <summary>
        /// Fires before a child is removed, return false to cancel the remove.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The child node to be removed</p>
        /// </param>
        /// <param name="isMove"><p><c>true</c> if the child node is being removed so it can be moved to another position in the tree.
        /// (a side effect of calling <see cref="Ext.data.NodeInterface.appendChild">appendChild</see> or
        /// <see cref="Ext.data.NodeInterface.insertBefore">insertBefore</see> with a node that already has a parentNode)</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemremove(Ext.data.NodeInterface @this, Ext.data.NodeInterface node, bool isMove, object eOpts){}
        /// <summary>
        /// Fires before a request is made for a new data object. If the beforeload handler returns false the load
        /// action will be canceled.
        /// </summary>
        /// <param name="store"><p>This Store</p>
        /// </param>
        /// <param name="operation"><p>The <see cref="Ext.data.Operation">Ext.data.Operation</see> object that will be passed to the Proxy to
        /// load the Store</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeload(Ext.data.Store store, Ext.data.Operation operation, object eOpts){}
        /// <summary>
        /// Fires when a node with a checkbox's checked property changes
        /// </summary>
        /// <param name="node"><p>The node who's checked property was changed</p>
        /// </param>
        /// <param name="checked"><p>The node's new checked state</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void checkchange(Ext.data.NodeInterface node, bool @checked, object eOpts){}
        /// <summary>
        /// Fires when a new child node is appended
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The newly appended node</p>
        /// </param>
        /// <param name="index"><p>The index of the newly appended node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemappend(Ext.data.NodeInterface @this, Ext.data.NodeInterface node, JsNumber index, object eOpts){}
        /// <summary>
        /// Fires when this node is collapsed.
        /// </summary>
        /// <param name="this"><p>The collapsing node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemcollapse(Ext.data.NodeInterface @this, object eOpts){}
        /// <summary>
        /// Fires when this node is expanded.
        /// </summary>
        /// <param name="this"><p>The expanding node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemexpand(Ext.data.NodeInterface @this, object eOpts){}
        /// <summary>
        /// Fires when a new child node is inserted.
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The child node inserted</p>
        /// </param>
        /// <param name="refNode"><p>The child node the node was inserted before</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void iteminsert(Ext.data.NodeInterface @this, Ext.data.NodeInterface node, Ext.data.NodeInterface refNode, object eOpts){}
        /// <summary>
        /// Fires when this node is moved to a new location in the tree
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="oldParent"><p>The old parent of this node</p>
        /// </param>
        /// <param name="newParent"><p>The new parent of this node</p>
        /// </param>
        /// <param name="index"><p>The index it was moved to</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemmove(Ext.data.NodeInterface @this, Ext.data.NodeInterface oldParent, Ext.data.NodeInterface newParent, JsNumber index, object eOpts){}
        /// <summary>
        /// Fires when a child node is removed
        /// </summary>
        /// <param name="this"><p>This node</p>
        /// </param>
        /// <param name="node"><p>The removed node</p>
        /// </param>
        /// <param name="isMove"><p><c>true</c> if the child node is being removed so it can be moved to another position in the tree.
        /// (a side effect of calling <see cref="Ext.data.NodeInterface.appendChild">appendChild</see> or
        /// <see cref="Ext.data.NodeInterface.insertBefore">insertBefore</see> with a node that already has a parentNode)</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemremove(Ext.data.NodeInterface @this, Ext.data.NodeInterface node, bool isMove, object eOpts){}
        /// <summary>
        /// Fires whenever the store reads data from a remote data source.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="node"><p>The node that was loaded.</p>
        /// </param>
        /// <param name="records"><p>An array of records.</p>
        /// </param>
        /// <param name="successful"><p>True if the operation was successful.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void load(Ext.data.TreeStore @this, Ext.data.NodeInterface node, JsArray<Ext.data.Model> records, bool successful, object eOpts){}
        public PanelEvents(params object[] args){}
    }
    #endregion
}
