//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.dd
{
    #region DD
    /// <inheritdocs />
    /// <summary>
    /// <p>A DragDrop implementation where the linked element follows the
    /// mouse cursor during a drag.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class DD : Ext.dd.DragDrop
    {
        /// <summary>
        /// When set to true, the utility automatically tries to scroll the browser
        /// window when a drag and drop element is dragged near the viewport boundary.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool scroll{get;set;}
        /// <summary>
        /// Sets the element to the location of the mousedown or click event,
        /// maintaining the cursor location relative to the location on the element
        /// that was clicked.  Override this if you want to place the element in a
        /// location other than where the cursor is.
        /// </summary>
        /// <param name="el"><p>the element to move</p>
        /// </param>
        /// <param name="iPageX"><p>the X coordinate of the mousedown or drag event</p>
        /// </param>
        /// <param name="iPageY"><p>the Y coordinate of the mousedown or drag event</p>
        /// </param>
        public void alignElWithMouse(object el, JsNumber iPageX, JsNumber iPageY){}
        /// <summary>
        /// Sets the pointer offset to the distance between the linked element's top
        /// left corner and the location the element was clicked.
        /// </summary>
        /// <param name="iPageX"><p>the X coordinate of the click</p>
        /// </param>
        /// <param name="iPageY"><p>the Y coordinate of the click</p>
        /// </param>
        public void autoOffset(JsNumber iPageX, JsNumber iPageY){}
        /// <summary>
        /// Auto-scroll the window if the dragged object has been moved beyond the
        /// visible window boundary.
        /// </summary>
        /// <param name="x"><p>the drag element's x position</p>
        /// </param>
        /// <param name="y"><p>the drag element's y position</p>
        /// </param>
        /// <param name="h"><p>the height of the drag element</p>
        /// </param>
        /// <param name="w"><p>the width of the drag element</p>
        /// </param>
        private void autoScroll(JsNumber x, JsNumber y, JsNumber h, JsNumber w){}
        /// <summary>
        /// Saves the most recent position so that we can reset the constraints and
        /// tick marks on-demand.  We need to know this so that we can calculate the
        /// number of pixels the element is offset from its original position.
        /// </summary>
        /// <param name="iPageX"><p>the current x position (this just makes it so we
        /// don't have to look it up again)</p>
        /// </param>
        /// <param name="iPageY"><p>the current y position (this just makes it so we
        /// don't have to look it up again)</p>
        /// </param>
        public void cachePosition(object iPageX=null, object iPageY=null){}
        /// <summary>
        /// Finds the location the element should be placed if we want to move
        /// it to where the mouse location less the click offset would place us.
        /// </summary>
        /// <param name="iPageX"><p>the X coordinate of the click</p>
        /// </param>
        /// <param name="iPageY"><p>the Y coordinate of the click</p>
        /// </param>
        private void getTargetCoord(JsNumber iPageX, JsNumber iPageY){}
        /// <summary>
        /// Sets the pointer offset.  You can call this directly to force the
        /// offset to be in a particular location (e.g., pass in 0,0 to set it
        /// to the center of the object)
        /// </summary>
        /// <param name="iDeltaX"><p>the distance from the left</p>
        /// </param>
        /// <param name="iDeltaY"><p>the distance from the top</p>
        /// </param>
        public void setDelta(JsNumber iDeltaX, JsNumber iDeltaY){}
        /// <summary>
        /// Sets the drag element to the location of the mousedown or click event,
        /// maintaining the cursor location relative to the location on the element
        /// that was clicked.  Override this if you want to place the element in a
        /// location other than where the cursor is.
        /// </summary>
        /// <param name="iPageX"><p>the X coordinate of the mousedown or drag event</p>
        /// </param>
        /// <param name="iPageY"><p>the Y coordinate of the mousedown or drag event</p>
        /// </param>
        public void setDragElPos(JsNumber iPageX, JsNumber iPageY){}
        public DD(Ext.dd.DDConfig config){}
        public DD(){}
        public DD(params object[] args){}
    }
    #endregion
    #region DDConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DDConfig : Ext.dd.DragDropConfig
    {
        public DDConfig(params object[] args){}
    }
    #endregion
    #region DDEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DDEvents : Ext.dd.DragDropEvents
    {
        public DDEvents(params object[] args){}
    }
    #endregion
}
