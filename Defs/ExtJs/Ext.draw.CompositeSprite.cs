//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.draw
{
    #region CompositeSprite
    /// <inheritdocs />
    /// <summary>
    /// <p>A composite Sprite handles a group of sprites with common methods to a sprite
    /// such as <c>hide</c>, <c>show</c>, <c>setAttributes</c>. These methods are applied to the set of sprites
    /// added to the group.</p>
    /// <p>CompositeSprite extends <see cref="Ext.util.MixedCollection">Ext.util.MixedCollection</see> so you can use the same methods
    /// in <c>MixedCollection</c> to iterate through sprites, add and remove elements, etc.</p>
    /// <p>In order to create a CompositeSprite, one has to provide a handle to the surface where it is
    /// rendered:</p>
    /// <pre><code>var group = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.draw.CompositeSprite">Ext.draw.CompositeSprite</see>', {
    /// surface: drawComponent.surface
    /// });
    /// </code></pre>
    /// <p>Then just by using <c>MixedCollection</c> methods it's possible to add <see cref="Ext.draw.Sprite">Ext.draw.Sprite</see>s:</p>
    /// <pre><code>group.add(sprite1);
    /// group.add(sprite2);
    /// group.add(sprite3);
    /// </code></pre>
    /// <p>And then apply common Sprite methods to them:</p>
    /// <pre><code>group.setAttributes({
    /// fill: '#f00'
    /// }, true);
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class CompositeSprite : Ext.util.MixedCollection, Ext.util.Animate
    {
        /// <summary>
        /// Adds class to all sprites.
        /// </summary>
        /// <param name="cls"><p>CSS class name</p>
        /// </param>
        public void addCls(JsString cls){}
        /// <summary>
        /// Performs custom animation on this object.
        /// This method is applicable to both the <see cref="Ext.Component">Component</see> class and the <see cref="Ext.draw.Sprite">Sprite</see>
        /// class. It performs animated transitions of certain properties of this object over a specified timeline.
        /// </summary>
        /// <param name="config"><p>Configuration for <see cref="Ext.fx.Anim">Ext.fx.Anim</see>.
        /// Note that the <see cref="Ext.fx.AnimConfig.to">to</see> config is required.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public virtual object animate(object config){return null;}
        /// <summary>
        /// Returns the current animation if this object has any effects actively running or queued, else returns false.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.fx.Anim">Ext.fx.Anim</see>/<see cref="bool">Boolean</see></span><div><p>Anim if element has active effects, else false</p>
        /// </div>
        /// </returns>
        public virtual object getActiveAnimation(){return null;}
        /// <summary>
        /// Returns the group bounding box.
        /// Behaves like Ext.draw.Sprite.getBBox method.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>an object with x, y, width, and height properties.</p>
        /// </div>
        /// </returns>
        public object getBBox(){return null;}
        /// <summary>
        /// Grab the surface from the items
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.draw.Surface">Ext.draw.Surface</see></span><div><p>The surface, null if not found</p>
        /// </div>
        /// </returns>
        private Surface getSurface(){return null;}
        /// <summary>
        /// Returns the current animation if this object has any effects actively running or queued, else returns false.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Replaced by <see cref="Ext.util.Animate.getActiveAnimation">getActiveAnimation</see></p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.fx.Anim">Ext.fx.Anim</see>/<see cref="bool">Boolean</see></span><div><p>Anim if element has active effects, else false</p>
        /// </div>
        /// </returns>
        public virtual object hasActiveFx(){return null;}
        /// <summary>
        /// Hides all sprites. If true is passed then a redraw will be forced for each sprite.
        /// </summary>
        /// <param name="redraw"><p>Flag to immediately draw the change.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.draw.CompositeSprite">Ext.draw.CompositeSprite</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.draw.CompositeSprite hide(bool redraw){return null;}
        /// <summary>
        /// Force redraw of all sprites.
        /// </summary>
        public void redraw(){}
        /// <summary>
        /// Removes class from all sprites.
        /// </summary>
        /// <param name="cls"><p>CSS class name</p>
        /// </param>
        public void removeCls(JsString cls){}
        /// <summary>
        /// Ensures that all effects queued after sequenceFx is called on this object are run in sequence. This is the
        /// opposite of syncFx.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public virtual object sequenceFx(){return null;}
        /// <summary>
        /// Iterates through all sprites calling setAttributes on each one. For more information Ext.draw.Sprite
        /// provides a description of the attributes that can be set with this method.
        /// </summary>
        /// <param name="attrs"><p>Attributes to be changed on the sprite.</p>
        /// </param>
        /// <param name="redraw"><p>Flag to immediately draw the change.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.draw.CompositeSprite">Ext.draw.CompositeSprite</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.draw.CompositeSprite setAttributes(object attrs, bool redraw){return null;}
        /// <summary>
        /// Sets style for all sprites.
        /// </summary>
        /// <param name="style"><p>CSS Style definition.</p>
        /// </param>
        public void setStyle(JsString style){}
        /// <summary>
        /// Shows all sprites. If true is passed then a redraw will be forced for each sprite.
        /// </summary>
        /// <param name="redraw"><p>Flag to immediately draw the change.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.draw.CompositeSprite">Ext.draw.CompositeSprite</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.draw.CompositeSprite show(bool redraw){return null;}
        /// <summary>
        /// Stops any running effects and clears this object's internal effects queue if it contains any additional effects
        /// that haven't started yet.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public virtual Ext.dom.Element stopAnimation(){return null;}
        /// <summary>
        /// Stops any running effects and clears this object's internal effects queue if it contains any additional effects
        /// that haven't started yet.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Replaced by <see cref="Ext.util.Animate.stopAnimation">stopAnimation</see></p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public virtual Ext.dom.Element stopFx(){return null;}
        /// <summary>
        /// Ensures that all effects queued after syncFx is called on this object are run concurrently. This is the opposite
        /// of sequenceFx.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public virtual object syncFx(){return null;}
        public CompositeSprite(Ext.draw.CompositeSpriteConfig config){}
        public CompositeSprite(){}
        public CompositeSprite(params object[] args){}
    }
    #endregion
    #region CompositeSpriteConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CompositeSpriteConfig : Ext.util.MixedCollectionConfig
    {
        public CompositeSpriteConfig(params object[] args){}
    }
    #endregion
    #region CompositeSpriteEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CompositeSpriteEvents : Ext.util.MixedCollectionEvents
    {
        /// <summary>
        /// Fires when a mouse click is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void click(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mousedown is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mousedown(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mouseout is detected with the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseout(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mouseover is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseover(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mouseup is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseup(EventObject e, object t, object eOpts){}
        public CompositeSpriteEvents(params object[] args){}
    }
    #endregion
}
