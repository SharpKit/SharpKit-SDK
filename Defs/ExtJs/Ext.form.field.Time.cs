//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region Time
    /// <inheritdocs />
    /// <summary>
    /// <p>Provides a time input field with a time dropdown and automatic time validation.</p>
    /// <p>This field recognizes and uses JavaScript Date objects as its main <see cref="Ext.form.field.TimeConfig.value">value</see> type (only the time portion of the
    /// date is used; the month/day/year are ignored). In addition, it recognizes string values which are parsed according to
    /// the <see cref="Ext.form.field.TimeConfig.format">format</see> and/or <see cref="Ext.form.field.TimeConfig.altFormats">altFormats</see> configs. These may be reconfigured to use time formats appropriate for
    /// the user's locale.</p>
    /// <p>The field may be limited to a certain range of times by using the <see cref="Ext.form.field.TimeConfig.minValue">minValue</see> and <see cref="Ext.form.field.TimeConfig.maxValue">maxValue</see> configs,
    /// and the interval between time options in the dropdown can be changed with the <see cref="Ext.form.field.TimeConfig.increment">increment</see> config.</p>
    /// <p>Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'Time Card',
    /// width: 300,
    /// bodyPadding: 10,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// items: [{
    /// xtype: 'timefield',
    /// name: 'in',
    /// fieldLabel: 'Time In',
    /// minValue: '6:00 AM',
    /// maxValue: '8:00 PM',
    /// increment: 30,
    /// anchor: '100%'
    /// }, {
    /// xtype: 'timefield',
    /// name: 'out',
    /// fieldLabel: 'Time Out',
    /// minValue: '6:00 AM',
    /// maxValue: '8:00 PM',
    /// increment: 30,
    /// anchor: '100%'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Time : Ext.form.field.ComboBox
    {
        /// <summary>
        /// Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
        /// format.
        /// Defaults to: <c>&quot;g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A&quot;</c>
        /// </summary>
        public JsString altFormats;
        /// <summary>
        /// The default time format string which can be overriden for localization support. The format must be valid
        /// according to Ext.Date.parse.
        /// Defaults to <c>'g:i A'</c>, e.g., <c>'3:15 PM'</c>. For 24-hour time format try <c>'H:i'</c> instead.
        /// </summary>
        public JsString format;
        /// <summary>
        /// The number of minutes between each time value in the list.
        /// Defaults to: <c>15</c>
        /// </summary>
        public JsNumber increment;
        /// <summary>
        /// The error text to display when the entered time is after maxValue.
        /// Defaults to: <c>&quot;The time in this field must be equal to or before {0}&quot;</c>
        /// </summary>
        public JsString maxText;
        /// <summary>
        /// The maximum allowed time. Can be either a Javascript date object with a valid time value or a string time in a
        /// valid format -- see format and altFormats.
        /// </summary>
        public object maxValue;
        /// <summary>
        /// The error text to display when the entered time is before minValue.
        /// Defaults to: <c>&quot;The time in this field must be equal to or after {0}&quot;</c>
        /// </summary>
        public JsString minText;
        /// <summary>
        /// The minimum allowed time. Can be either a Javascript date object with a valid time value or a string time in a
        /// valid format -- see format and altFormats.
        /// </summary>
        public object minValue;
        /// <summary>
        /// The maximum height of the Ext.picker.Time dropdown.
        /// Defaults to: <c>300</c>
        /// </summary>
        public JsNumber pickerMaxHeight;
        /// <summary>
        /// Specify as true to enforce that only values on the increment boundary are accepted.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool snapToIncrement;
        /// <summary>
        /// The date format string which will be submitted to the server. The format must be valid according to
        /// Ext.Date.parse.
        /// Defaults to <see cref="Ext.form.field.TimeConfig.format">format</see>.
        /// </summary>
        public JsString submitFormat;
        /// <summary>
        /// This is the date to use when generating time values in the absence of either minValue
        /// or maxValue.  Using the current date causes DST issues on DST boundary dates, so this is an
        /// arbitrary "safe" date that can be any date aside from DST boundary dates.
        /// Defaults to: <c>&quot;1/1/2008&quot;</c>
        /// </summary>
        private JsString initDate{get;set;}
        /// <summary>
        /// Handles a time being selected from the Time picker.
        /// </summary>
        /// <param name="list">
        /// </param>
        /// <param name="recordArray">
        /// </param>
        private void onListSelectionChange(object list, object recordArray){}
        /// <summary>
        /// Parses an input value into a valid Date object.
        /// </summary>
        /// <param name="value">
        /// </param>
        private void parseDate(object value){}
        /// <summary>
        /// Updates either the min or max value. Converts the user's value into a Date object whose
        /// year/month/day is set to the initDate so that only the time fields are significant.
        /// </summary>
        /// <param name="value">
        /// </param>
        /// <param name="isMin">
        /// </param>
        private void setLimit(object value, object isMin){}
        /// <summary>
        /// Replaces any existing maxValue with the new time and refreshes the picker's range.
        /// </summary>
        /// <param name="value"><p>The maximum time that can be selected</p>
        /// </param>
        public void setMaxValue(object value){}
        /// <summary>
        /// Replaces any existing minValue with the new time and refreshes the picker's range.
        /// </summary>
        /// <param name="value"><p>The minimum time that can be selected</p>
        /// </param>
        public void setMinValue(object value){}
        public Time(Ext.form.field.TimeConfig config){}
        public Time(){}
        public Time(params object[] args){}
    }
    #endregion
    #region TimeConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TimeConfig : Ext.form.field.ComboBoxConfig
    {
        /// <summary>
        /// Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
        /// format.
        /// Defaults to: <c>&quot;g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A&quot;</c>
        /// </summary>
        public JsString altFormats;
        /// <summary>
        /// The default time format string which can be overriden for localization support. The format must be valid
        /// according to Ext.Date.parse.
        /// Defaults to <c>'g:i A'</c>, e.g., <c>'3:15 PM'</c>. For 24-hour time format try <c>'H:i'</c> instead.
        /// </summary>
        public JsString format;
        /// <summary>
        /// The number of minutes between each time value in the list.
        /// Defaults to: <c>15</c>
        /// </summary>
        public JsNumber increment;
        /// <summary>
        /// The error text to display when the entered time is after maxValue.
        /// Defaults to: <c>&quot;The time in this field must be equal to or before {0}&quot;</c>
        /// </summary>
        public JsString maxText;
        /// <summary>
        /// The maximum allowed time. Can be either a Javascript date object with a valid time value or a string time in a
        /// valid format -- see format and altFormats.
        /// </summary>
        public object maxValue;
        /// <summary>
        /// The error text to display when the entered time is before minValue.
        /// Defaults to: <c>&quot;The time in this field must be equal to or after {0}&quot;</c>
        /// </summary>
        public JsString minText;
        /// <summary>
        /// The minimum allowed time. Can be either a Javascript date object with a valid time value or a string time in a
        /// valid format -- see format and altFormats.
        /// </summary>
        public object minValue;
        /// <summary>
        /// The maximum height of the Ext.picker.Time dropdown.
        /// Defaults to: <c>300</c>
        /// </summary>
        public JsNumber pickerMaxHeight;
        /// <summary>
        /// Specify as true to enforce that only values on the increment boundary are accepted.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool snapToIncrement;
        /// <summary>
        /// The date format string which will be submitted to the server. The format must be valid according to
        /// Ext.Date.parse.
        /// Defaults to <see cref="Ext.form.field.TimeConfig.format">format</see>.
        /// </summary>
        public JsString submitFormat;
        public TimeConfig(params object[] args){}
    }
    #endregion
    #region TimeEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TimeEvents : Ext.form.field.ComboBoxEvents
    {
        public TimeEvents(params object[] args){}
    }
    #endregion
}
