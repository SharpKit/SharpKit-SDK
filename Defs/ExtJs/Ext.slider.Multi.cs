//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.slider
{
    #region Multi
    /// <inheritdocs />
    /// <summary>
    /// <p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking
    /// and animation. Can be added as an item to any container.</p>
    /// <p>Sliders can be created with more than one thumb handle by passing an array of values instead of a single one:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.slider.Multi">Ext.slider.Multi</see>', {
    /// width: 200,
    /// values: [25, 50, 75],
    /// increment: 5,
    /// minValue: 0,
    /// maxValue: 100,
    /// // this defaults to true, setting to false allows the thumbs to pass each other
    /// constrainThumbs: false,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Multi : Ext.form.field.Base
    {
        /// <summary>
        /// Determines whether or not clicking on the Slider axis will change the slider.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool clickToChange;
        /// <summary>
        /// True to disallow thumbs from overlapping one another.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool constrainThumbs;
        /// <summary>
        /// The number of decimal places to which to round the Slider's value.
        /// To disable rounding, configure as <strong>false</strong>.
        /// Defaults to: <c>0</c>
        /// </summary>
        public object decimalPrecision;
        /// <summary>
        /// How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber increment;
        /// <summary>
        /// How many units to change the Slider when adjusting with keyboard navigation. If the increment
        /// config is larger, it will be used instead.
        /// Defaults to: <c>1</c>
        /// </summary>
        public JsNumber keyIncrement;
        /// <summary>
        /// The maximum value for the Slider.
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber maxValue;
        /// <summary>
        /// The minimum value for the Slider.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber minValue;
        /// <summary>
        /// A function used to display custom text for the slider tip.
        /// Defaults to null, which will use the default on the plugin.
        /// </summary>
        public System.Delegate tipText;
        /// <summary>
        /// True to use an Ext.slider.Tip to display tips for the value. This option may also
        /// provide a configuration object for an Ext.slider.Tip.
        /// Defaults to: <c>true</c>
        /// </summary>
        public object useTips;
        /// <summary>
        /// Array of Number values with which to initalize the slider. A separate slider thumb will be created for each value
        /// in this array. This will take precedence over the single value config.
        /// </summary>
        public JsNumber values;
        /// <summary>
        /// Orient the Slider vertically rather than horizontally.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool vertical;
        /// <summary>
        /// Set to true to calculate snap points based on increments from zero as opposed to
        /// from this Slider's minValue.
        /// By Default, valid snap points are calculated starting <see cref="Ext.slider.MultiConfig.increment">increment</see>s from the <see cref="Ext.slider.MultiConfig.minValue">minValue</see>
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool zeroBasedSnapping;
        /// <summary>
        /// Determines whether or not a click to the slider component is considered to be a user request to change the value. Specified as an array of [top, bottom],
        /// the click event's 'top' property is compared to these numbers and the click only considered a change request if it falls within them. e.g. if the 'top'
        /// value of the click event is 4 or 16, the click is not considered a change request as it falls outside of the [5, 15] range
        /// Defaults to: <c>[5, 15]</c>
        /// </summary>
        private JsNumber clickRange{get;set;}
        /// <summary>
        /// True while the thumb is in a drag operation
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool dragging{get;set;}
        /// <summary>
        /// Array containing references to each thumb
        /// Defaults to: <c>[]</c>
        /// </summary>
        public JsArray thumbs{get;set;}
        /// <summary>
        /// Creates a new thumb and adds it to the slider
        /// </summary>
        /// <param name="value"><p>The initial value to set on the thumb.</p>
        /// <p>Defaults to: <c>0</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.slider.Thumb">Ext.slider.Thumb</see></span><div><p>The thumb</p>
        /// </div>
        /// </returns>
        public Thumb addThumb(object value=null){return null;}
        /// <summary>
        /// Given a value within this Slider's range, calculates a Thumb's percentage CSS position to map that value.
        /// </summary>
        /// <param name="v">
        /// </param>
        private void calculateThumbPosition(object v){}
        /// <summary>
        /// Returns the nearest thumb to a click event, along with its distance
        /// </summary>
        /// <param name="trackPoint"><p>local pixel position along the Slider's axis to find the Thumb for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The closest thumb object and its distance from the click event</p>
        /// </div>
        /// </returns>
        private object getNearest(JsNumber trackPoint){return null;}
        /// <summary>
        /// Returns the ratio of pixels to mapped values. e.g. if the slider is 200px wide and maxValue - minValue is 100,
        /// the ratio is 2
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The ratio of pixels to mapped values</p>
        /// </div>
        /// </returns>
        private JsNumber getRatio(){return null;}
        /// <summary>
        /// Given an [x, y] position within the slider's track (Points outside the slider's track are coerced to either the minimum or maximum value),
        /// calculate how many pixels from the slider origin (left for horizontal Sliders and bottom for vertical Sliders) that point is.
        /// If the point is outside the range of the Slider's track, the return value is <c>undefined</c>
        /// </summary>
        /// <param name="xy"><p>The point to calculate the track point for</p>
        /// </param>
        private void getTrackpoint(JsArray<Number> xy){}
        /// <summary>
        /// Returns the current value of the slider
        /// </summary>
        /// <param name="index"><p>The index of the thumb to return a value for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see>/<see cref="Number">Number</see>[]</span><div><p>The current value of the slider at the given index, or an array of all thumb values if
        /// no index is given.</p>
        /// </div>
        /// </returns>
        public object[] getValue(JsNumber index){return null;}
        /// <summary>
        /// Returns an array of values - one for the location of each thumb
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The set of thumb values</p>
        /// </div>
        /// </returns>
        public JsNumber[] getValues(){return null;}
        /// <summary>
        /// Adds keyboard and mouse listeners on this.el. Ignores click events on the internal focus element.
        /// </summary>
        private void initEvents(){}
        /// <summary>
        /// Returns a snapped, constrained value when given a desired value
        /// </summary>
        /// <param name="value"><p>Raw number value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The raw value rounded to the correct d.p. and constrained within the set max and min values</p>
        /// </div>
        /// </returns>
        private JsNumber normalizeValue(JsNumber value){return null;}
        /// <summary>
        /// Moves the thumb to the indicated position.
        /// Only changes the value if the click was within this.clickRange.
        /// </summary>
        /// <param name="trackPoint"><p>local pixel offset <strong>from the origin</strong> (left for horizontal and bottom for vertical) along the Slider's axis at which the click event occured.</p>
        /// </param>
        private void onClickChange(JsNumber trackPoint){}
        /// <summary>
        /// Handler for any keypresses captured by the slider. If the key is UP or RIGHT, the thumb is moved along to the right
        /// by this.keyIncrement. If DOWN or LEFT it is moved left. Pressing CTRL moves the slider to the end in either direction
        /// </summary>
        /// <param name="e"><p>The Event object</p>
        /// </param>
        private void onKeyDown(EventObject e){}
        /// <summary>
        /// Mousedown handler for the slider. If the clickToChange is enabled and the click was not on the draggable 'thumb',
        /// this calculates the new value of the slider and tells the implementation (Horizontal or Vertical) to move the thumb
        /// </summary>
        /// <param name="e"><p>The click event</p>
        /// </param>
        private void onMouseDown(EventObject e){}
        /// <summary>
        /// Moves the given thumb above all other by increasing its z-index. This is called when as drag
        /// any thumb, so that the thumb that was just dragged is always at the highest z-index. This is
        /// required when the thumbs are stacked on top of each other at one of the ends of the slider's
        /// range, which can result in the user not being able to move any of them.
        /// </summary>
        /// <param name="topThumb"><p>The thumb to move to the top</p>
        /// </param>
        private void promoteThumb(Thumb topThumb){}
        /// <summary>
        /// Given a Thumb's percentage position along the slider, returns the mapped slider value for that pixel.
        /// E.g. if we have a slider 200px wide with minValue = 100 and maxValue = 500, reversePercentageValue(25)
        /// returns 200
        /// </summary>
        /// <param name="pos"><p>The percentage along the slider track to return a mapped value for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The mapped value for the given position</p>
        /// </div>
        /// </returns>
        private JsNumber reversePercentageValue(JsNumber pos){return null;}
        /// <summary>
        /// Given a pixel location along the slider, returns the mapped slider value for that pixel.
        /// E.g. if we have a slider 200px wide with minValue = 100 and maxValue = 500, reversePixelValue(50)
        /// returns 200
        /// </summary>
        /// <param name="pos"><p>The position along the slider to return a mapped value for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The mapped value for the given position</p>
        /// </div>
        /// </returns>
        private JsNumber reversePixelValue(JsNumber pos){return null;}
        /// <summary>
        /// Sets the maximum value for the slider instance. If the current value is more than the maximum value, the current
        /// value will be changed.
        /// </summary>
        /// <param name="val"><p>The new maximum value</p>
        /// </param>
        public void setMaxValue(JsNumber val){}
        /// <summary>
        /// Sets the minimum value for the slider instance. If the current value is less than the minimum value, the current
        /// value will be changed.
        /// </summary>
        /// <param name="val"><p>The new minimum value</p>
        /// </param>
        public void setMinValue(JsNumber val){}
        /// <summary>
        /// Programmatically sets the value of the Slider. Ensures that the value is constrained within the minValue and
        /// maxValue.
        /// </summary>
        /// <param name="index"><p>Index of the thumb to move</p>
        /// </param>
        /// <param name="value"><p>The value to set the slider to. (This will be constrained within minValue and maxValue)</p>
        /// </param>
        /// <param name="animate"><p>Turn on or off animation</p>
        /// <p>Defaults to: <c>true</c></p></param>
        public void setValue(JsNumber index, JsNumber value, object animate=null){}
        /// <summary>
        /// Synchronizes thumbs position to the proper proportion of the total component width based on the current slider
        /// value. This will be called automatically when the Slider is resized by a layout, but if it is rendered
        /// auto width, this method can be called from another resize handler to sync the Slider if necessary.
        /// </summary>
        public void syncThumbs(){}
        public Multi(MultiConfig config){}
        public Multi(){}
        public Multi(params object[] args){}
    }
    #endregion
    #region MultiConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MultiConfig : Ext.form.field.BaseConfig
    {
        /// <summary>
        /// Turn on or off animation.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool animate;
        /// <summary>
        /// Determines whether or not clicking on the Slider axis will change the slider.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool clickToChange;
        /// <summary>
        /// True to disallow thumbs from overlapping one another.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool constrainThumbs;
        /// <summary>
        /// The number of decimal places to which to round the Slider's value.
        /// To disable rounding, configure as <strong>false</strong>.
        /// Defaults to: <c>0</c>
        /// </summary>
        public object decimalPrecision;
        /// <summary>
        /// How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber increment;
        /// <summary>
        /// How many units to change the Slider when adjusting with keyboard navigation. If the increment
        /// config is larger, it will be used instead.
        /// Defaults to: <c>1</c>
        /// </summary>
        public JsNumber keyIncrement;
        /// <summary>
        /// The maximum value for the Slider.
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber maxValue;
        /// <summary>
        /// The minimum value for the Slider.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber minValue;
        /// <summary>
        /// A function used to display custom text for the slider tip.
        /// Defaults to null, which will use the default on the plugin.
        /// </summary>
        public System.Delegate tipText;
        /// <summary>
        /// True to use an Ext.slider.Tip to display tips for the value. This option may also
        /// provide a configuration object for an Ext.slider.Tip.
        /// Defaults to: <c>true</c>
        /// </summary>
        public object useTips;
        /// <summary>
        /// Array of Number values with which to initalize the slider. A separate slider thumb will be created for each value
        /// in this array. This will take precedence over the single value config.
        /// </summary>
        public JsNumber values;
        /// <summary>
        /// Orient the Slider vertically rather than horizontally.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool vertical;
        /// <summary>
        /// Set to true to calculate snap points based on increments from zero as opposed to
        /// from this Slider's minValue.
        /// By Default, valid snap points are calculated starting <see cref="Ext.slider.MultiConfig.increment">increment</see>s from the <see cref="Ext.slider.MultiConfig.minValue">minValue</see>
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool zeroBasedSnapping;
        public MultiConfig(params object[] args){}
    }
    #endregion
    #region MultiEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MultiEvents : Ext.form.field.BaseEvents
    {
        /// <summary>
        /// Fires before the slider value is changed. By returning false from an event handler, you can cancel the
        /// event and prevent the slider from changing.
        /// </summary>
        /// <param name="slider"><p>The slider</p>
        /// </param>
        /// <param name="newValue"><p>The new value which the slider is being changed to.</p>
        /// </param>
        /// <param name="oldValue"><p>The old value which the slider was previously.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforechange(Multi slider, JsNumber newValue, JsNumber oldValue, object eOpts){}
        /// <summary>
        /// Fires when the slider value is changed by the user and any drag operations have completed.
        /// </summary>
        /// <param name="slider"><p>The slider</p>
        /// </param>
        /// <param name="newValue"><p>The new value which the slider has been changed to.</p>
        /// </param>
        /// <param name="thumb"><p>The thumb that was changed</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void changecomplete(Multi slider, JsNumber newValue, Thumb thumb, object eOpts){}
        /// <summary>
        /// Fires continuously during the drag operation while the mouse is moving.
        /// </summary>
        /// <param name="slider"><p>The slider</p>
        /// </param>
        /// <param name="e"><p>The event fired from <see cref="Ext.dd.DragTracker">Ext.dd.DragTracker</see></p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void drag(Multi slider, EventObject e, object eOpts){}
        /// <summary>
        /// Fires after the drag operation has completed.
        /// </summary>
        /// <param name="slider"><p>The slider</p>
        /// </param>
        /// <param name="e"><p>The event fired from <see cref="Ext.dd.DragTracker">Ext.dd.DragTracker</see></p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void dragend(Multi slider, EventObject e, object eOpts){}
        /// <summary>
        /// Fires after a drag operation has started.
        /// </summary>
        /// <param name="slider"><p>The slider</p>
        /// </param>
        /// <param name="e"><p>The event fired from <see cref="Ext.dd.DragTracker">Ext.dd.DragTracker</see></p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void dragstart(Multi slider, EventObject e, object eOpts){}
        public MultiEvents(params object[] args){}
    }
    #endregion
}
