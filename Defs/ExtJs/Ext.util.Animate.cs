//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region Animate
    /// <summary>
    /// <p>This animation class is a mixin.</p>
    /// <p><see cref="Ext.util.Animate">Ext.util.Animate</see> provides an API for the creation of animated transitions of properties and styles.
    /// This class is used as a mixin and currently applied to <see cref="Ext.dom.Element">Ext.Element</see>, <see cref="Ext.dom.CompositeElement">Ext.CompositeElement</see>,
    /// <see cref="Ext.draw.Sprite">Ext.draw.Sprite</see>, <see cref="Ext.draw.CompositeSprite">Ext.draw.CompositeSprite</see>, and <see cref="Ext.Component">Ext.Component</see>.  Note that Components
    /// have a limited subset of what attributes can be animated such as top, left, x, y, height, width, and
    /// opacity (color, paddings, and margins can not be animated).</p>
    /// <h2>Animation Basics</h2>
    /// <p>All animations require three things - <c>easing</c>, <c>duration</c>, and <c>to</c> (the final end value for each property)
    /// you wish to animate. Easing and duration are defaulted values specified below.
    /// Easing describes how the intermediate values used during a transition will be calculated.
    /// <see cref="Ext.fx.AnimConfig.easing">Easing</see> allows for a transition to change speed over its duration.
    /// You may use the defaults for easing and duration, but you must always set a
    /// <see cref="Ext.fx.AnimConfig.to">to</see> property which is the end value for all animations.</p>
    /// <p>Popular element 'to' configurations are:</p>
    /// <ul>
    /// <li>opacity</li>
    /// <li>x</li>
    /// <li>y</li>
    /// <li>color</li>
    /// <li>height</li>
    /// <li>width</li>
    /// </ul>
    /// <p>Popular sprite 'to' configurations are:</p>
    /// <ul>
    /// <li>translation</li>
    /// <li>path</li>
    /// <li>scale</li>
    /// <li>stroke</li>
    /// <li>rotation</li>
    /// </ul>
    /// <p>The default duration for animations is 250 (which is a 1/4 of a second).  Duration is denoted in
    /// milliseconds.  Therefore 1 second is 1000, 1 minute would be 60000, and so on. The default easing curve
    /// used for all animations is 'ease'.  Popular easing functions are included and can be found in <see cref="Ext.fx.AnimConfig.easing">Easing</see>.</p>
    /// <p>For example, a simple animation to fade out an element with a default easing and duration:</p>
    /// <pre><code>var p1 = <see cref="Ext.ExtContext.get">Ext.get</see>('myElementId');
    /// p1.animate({
    /// to: {
    /// opacity: 0
    /// }
    /// });
    /// </code></pre>
    /// <p>To make this animation fade out in a tenth of a second:</p>
    /// <pre><code>var p1 = <see cref="Ext.ExtContext.get">Ext.get</see>('myElementId');
    /// p1.animate({
    /// duration: 100,
    /// to: {
    /// opacity: 0
    /// }
    /// });
    /// </code></pre>
    /// <h2>Animation Queues</h2>
    /// <p>By default all animations are added to a queue which allows for animation via a chain-style API.
    /// For example, the following code will queue 4 animations which occur sequentially (one right after the other):</p>
    /// <pre><code>p1.animate({
    /// to: {
    /// x: 500
    /// }
    /// }).animate({
    /// to: {
    /// y: 150
    /// }
    /// }).animate({
    /// to: {
    /// backgroundColor: '#f00'  //red
    /// }
    /// }).animate({
    /// to: {
    /// opacity: 0
    /// }
    /// });
    /// </code></pre>
    /// <p>You can change this behavior by calling the <see cref="Ext.util.Animate.syncFx">syncFx</see> method and all
    /// subsequent animations for the specified target will be run concurrently (at the same time).</p>
    /// <pre><code>p1.syncFx();  //this will make all animations run at the same time
    /// p1.animate({
    /// to: {
    /// x: 500
    /// }
    /// }).animate({
    /// to: {
    /// y: 150
    /// }
    /// }).animate({
    /// to: {
    /// backgroundColor: '#f00'  //red
    /// }
    /// }).animate({
    /// to: {
    /// opacity: 0
    /// }
    /// });
    /// </code></pre>
    /// <p>This works the same as:</p>
    /// <pre><code>p1.animate({
    /// to: {
    /// x: 500,
    /// y: 150,
    /// backgroundColor: '#f00'  //red
    /// opacity: 0
    /// }
    /// });
    /// </code></pre>
    /// <p>The <see cref="Ext.util.Animate.stopAnimation">stopAnimation</see> method can be used to stop any
    /// currently running animations and clear any queued animations.</p>
    /// <h2>Animation Keyframes</h2>
    /// <p>You can also set up complex animations with <see cref="Ext.fx.AnimConfig.keyframes">keyframes</see> which follow the
    /// CSS3 Animation configuration pattern. Note rotation, translation, and scaling can only be done for sprites.
    /// The previous example can be written with the following syntax:</p>
    /// <pre><code>p1.animate({
    /// duration: 1000,  //one second total
    /// keyframes: {
    /// 25: {     //from 0 to 250ms (25%)
    /// x: 0
    /// },
    /// 50: {   //from 250ms to 500ms (50%)
    /// y: 0
    /// },
    /// 75: {  //from 500ms to 750ms (75%)
    /// backgroundColor: '#f00'  //red
    /// },
    /// 100: {  //from 750ms to 1sec
    /// opacity: 0
    /// }
    /// }
    /// });
    /// </code></pre>
    /// <h2>Animation Events</h2>
    /// <p>Each animation you create has events for <see cref="Ext.fx.AnimEvents.beforeanimate">beforeanimate</see>,
    /// <see cref="Ext.fx.AnimEvents.afteranimate">afteranimate</see>, and <see cref="Ext.fx.AnimEvents.lastframe">lastframe</see>.
    /// Keyframed animations adds an additional <see cref="Ext.fx.AnimatorEvents.keyframe">keyframe</see> event which
    /// fires for each keyframe in your animation.</p>
    /// <p>All animations support the <see cref="Ext.util.ObservableConfig.listeners">listeners</see> configuration to attact functions to these events.</p>
    /// <pre><code>startAnimate: function() {
    /// var p1 = <see cref="Ext.ExtContext.get">Ext.get</see>('myElementId');
    /// p1.animate({
    /// duration: 100,
    /// to: {
    /// opacity: 0
    /// },
    /// listeners: {
    /// beforeanimate:  function() {
    /// // Execute my custom method before the animation
    /// this.myBeforeAnimateFn();
    /// },
    /// afteranimate: function() {
    /// // Execute my custom method after the animation
    /// this.myAfterAnimateFn();
    /// },
    /// scope: this
    /// });
    /// },
    /// myBeforeAnimateFn: function() {
    /// // My custom logic
    /// },
    /// myAfterAnimateFn: function() {
    /// // My custom logic
    /// }
    /// </code></pre>
    /// <p>Due to the fact that animations run asynchronously, you can determine if an animation is currently
    /// running on any target by using the <see cref="Ext.util.Animate.getActiveAnimation">getActiveAnimation</see>
    /// method.  This method will return false if there are no active animations or return the currently
    /// running <see cref="Ext.fx.Anim">Ext.fx.Anim</see> instance.</p>
    /// <p>In this example, we're going to wait for the current animation to finish, then stop any other
    /// queued animations before we fade our element's opacity to 0:</p>
    /// <pre><code>var curAnim = p1.getActiveAnimation();
    /// if (curAnim) {
    /// curAnim.on('afteranimate', function() {
    /// p1.stopAnimation();
    /// p1.animate({
    /// to: {
    /// opacity: 0
    /// }
    /// });
    /// });
    /// }
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial interface Animate
    {
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        JsString @className{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject configMap{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        bool isInstance{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        Class self{get;set;}
        /// <summary>
        /// Performs custom animation on this object.
        /// This method is applicable to both the <see cref="Ext.Component">Component</see> class and the <see cref="Ext.draw.Sprite">Sprite</see>
        /// class. It performs animated transitions of certain properties of this object over a specified timeline.
        /// </summary>
        /// <param name="config"><p>Configuration for <see cref="Ext.fx.Anim">Ext.fx.Anim</see>.
        /// Note that the <see cref="Ext.fx.AnimConfig.to">to</see> config is required.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        object animate(object config);
        /// <summary>
        /// Returns the current animation if this object has any effects actively running or queued, else returns false.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.fx.Anim">Ext.fx.Anim</see>/<see cref="bool">Boolean</see></span><div><p>Anim if element has active effects, else false</p>
        /// </div>
        /// </returns>
        object getActiveAnimation();
        /// <summary>
        /// Returns the current animation if this object has any effects actively running or queued, else returns false.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Replaced by <see cref="Ext.util.Animate.getActiveAnimation">getActiveAnimation</see></p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.fx.Anim">Ext.fx.Anim</see>/<see cref="bool">Boolean</see></span><div><p>Anim if element has active effects, else false</p>
        /// </div>
        /// </returns>
        object hasActiveFx();
        /// <summary>
        /// Ensures that all effects queued after sequenceFx is called on this object are run in sequence. This is the
        /// opposite of syncFx.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        object sequenceFx();
        /// <summary>
        /// Stops any running effects and clears this object's internal effects queue if it contains any additional effects
        /// that haven't started yet.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        Ext.dom.Element stopAnimation();
        /// <summary>
        /// Stops any running effects and clears this object's internal effects queue if it contains any additional effects
        /// that haven't started yet.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Replaced by <see cref="Ext.util.Animate.stopAnimation">stopAnimation</see></p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        Ext.dom.Element stopFx();
        /// <summary>
        /// Ensures that all effects queued after syncFx is called on this object are run concurrently. This is the opposite
        /// of sequenceFx.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        object syncFx();
    }
    #endregion
    #region AnimateConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AnimateConfig : Ext.BaseConfig
    {
        public AnimateConfig(params object[] args){}
    }
    #endregion
    #region AnimateEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AnimateEvents : Ext.BaseEvents
    {
        public AnimateEvents(params object[] args){}
    }
    #endregion
}
