//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.ux.form
{
    #region ItemSelector
    /// <inheritdocs />
    /// <summary>
    /// <p>A control that allows selection of between two <see cref="Ext.ux.form.MultiSelect">Ext.ux.form.MultiSelect</see> controls.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class ItemSelector : MultiSelect
    {
        /// <summary>
        /// Defines the set of buttons that should be displayed in between the ItemSelector
        /// fields. Defaults to ['top', 'up', 'add', 'remove', 'down', 'bottom']. These names are used
        /// to build the button CSS class names, and to look up the button text labels in buttonsText.
        /// This can be overridden with a custom Array to change which buttons are displayed or their order.
        /// Defaults to: <c>[&quot;top&quot;, &quot;up&quot;, &quot;add&quot;, &quot;remove&quot;, &quot;down&quot;, &quot;bottom&quot;]</c>
        /// </summary>
        public JsArray buttons;
        /// <summary>
        /// The tooltips for the buttons.
        /// Labels for buttons.
        /// Defaults to: <c>{top: &quot;Move to Top&quot;, up: &quot;Move Up&quot;, add: &quot;Add to Selected&quot;, remove: &quot;Remove from Selected&quot;, down: &quot;Move Down&quot;, bottom: &quot;Move to Bottom&quot;}</c>
        /// </summary>
        public JsObject buttonsText;
        /// <summary>
        /// True to hide the navigation icons
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideNavIcons;
        /// <summary>
        /// Get the selected records from the specified list.
        /// Records will be returned <em>in store order</em>, not in order of selection.
        /// </summary>
        /// <param name="list"><p>The list to read selections from.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see>[]</span><div><p>The selected records in store order.</p>
        /// </div>
        /// </returns>
        public Ext.data.Model[] getSelections(Ext.view.BoundList list){return null;}
        public ItemSelector(ItemSelectorConfig config){}
        public ItemSelector(){}
        public ItemSelector(params object[] args){}
    }
    #endregion
    #region ItemSelectorConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ItemSelectorConfig : MultiSelectConfig
    {
        /// <summary>
        /// Defines the set of buttons that should be displayed in between the ItemSelector
        /// fields. Defaults to ['top', 'up', 'add', 'remove', 'down', 'bottom']. These names are used
        /// to build the button CSS class names, and to look up the button text labels in buttonsText.
        /// This can be overridden with a custom Array to change which buttons are displayed or their order.
        /// Defaults to: <c>[&quot;top&quot;, &quot;up&quot;, &quot;add&quot;, &quot;remove&quot;, &quot;down&quot;, &quot;bottom&quot;]</c>
        /// </summary>
        public JsArray buttons;
        /// <summary>
        /// The tooltips for the buttons.
        /// Labels for buttons.
        /// Defaults to: <c>{top: &quot;Move to Top&quot;, up: &quot;Move Up&quot;, add: &quot;Add to Selected&quot;, remove: &quot;Remove from Selected&quot;, down: &quot;Move Down&quot;, bottom: &quot;Move to Bottom&quot;}</c>
        /// </summary>
        public JsObject buttonsText;
        /// <summary>
        /// True to hide the navigation icons
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideNavIcons;
        public ItemSelectorConfig(params object[] args){}
    }
    #endregion
    #region ItemSelectorEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ItemSelectorEvents : MultiSelectEvents
    {
        public ItemSelectorEvents(params object[] args){}
    }
    #endregion
}
