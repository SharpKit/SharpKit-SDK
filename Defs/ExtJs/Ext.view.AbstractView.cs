//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.view
{
    #region AbstractView
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>This is an abstract superclass and should not be used directly. Please see <see cref="Ext.view.View">Ext.view.View</see>.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractView : Ext.Component, Ext.util.Bindable
    {
        /// <summary>
        /// Set this to true to ignore refresh events on the bound store. This is useful if
        /// you wish to provide custom transition animations via a plugin
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool blockRefresh;
        /// <summary>
        /// True to defer emptyText being applied until the store's first load.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool deferEmptyText;
        /// <summary>
        /// Defaults to true to defer the initial refresh of the view.
        /// This allows the View to execute its render and initial layout more quickly because the process will not be encumbered
        /// by the expensive update of the view structure.
        /// <b>Important: </b>Be aware that this will mean that the View's item elements will not be available immediately upon render, so
        /// <i>selection</i> may not take place at render time. To access a View's item elements as soon as possible, use the <see cref="Ext.view.AbstractViewEvents.viewready">viewready</see> event.
        /// Or set <c>deferInitialrefresh</c> to false, but this will be at the cost of slower rendering.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool deferInitialRefresh;
        /// <summary>
        /// True to disable selection within the DataView. This configuration will lock the selection model
        /// that the DataView uses.
        /// </summary>
        public bool disableSelection;
        /// <summary>
        /// The text to display in the view when there is no data to display.
        /// Note that when using local data the emptyText will not be displayed unless you set
        /// the deferEmptyText option to false.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString emptyText;
        /// <summary>
        /// Specifies the class to be assigned to each element in the view when used in conjunction with the
        /// itemTpl configuration.
        /// Defaults to: <c>&quot;x-dataview-item&quot;</c>
        /// </summary>
        public JsString itemCls;
        /// <summary>
        /// This is a required setting. A simple CSS selector (e.g. div.some-class or
        /// span:first-child) that will be used to determine what nodes this DataView will be
        /// working with. The itemSelector is used to map DOM nodes to records. As such, there should
        /// only be one root level element that matches the selector for each record.
        /// </summary>
        public JsString itemSelector;
        /// <summary>
        /// The inner portion of the item template to be rendered. Follows an XTemplate
        /// structure and will be placed inside of a tpl.
        /// </summary>
        public object itemTpl;
        /// <summary>
        /// False to disable a load mask from displaying while the view is loading. This can also be a
        /// Ext.LoadMask configuration object.
        /// Defaults to: <c>true</c>
        /// </summary>
        public object loadMask;
        /// <summary>
        /// The CSS class to apply to the loading message element. Defaults to Ext.LoadMask.prototype.msgCls "x-mask-loading".
        /// </summary>
        public JsString loadingCls;
        /// <summary>
        /// If specified, gives an explicit height for the data view when it is showing the loadingText,
        /// if that is specified. This is useful to prevent the view's height from collapsing to zero when the
        /// loading mask is applied and there are no other contents in the data view.
        /// </summary>
        public JsNumber loadingHeight;
        /// <summary>
        /// A string to display during data load operations.  If specified, this text will be
        /// displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
        /// contents will continue to display normally until the new data is loaded and the contents are replaced.
        /// Defaults to: <c>&quot;Loading...&quot;</c>
        /// </summary>
        public JsString loadingText;
        /// <summary>
        /// Whether or not to use the loading message.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool loadingUseMsg;
        /// <summary>
        /// True to allow selection of more than one item at a time, false to allow selection of only a single item
        /// at a time or no selection at all, depending on the value of singleSelect.
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'MULTI' instead.</p>
        /// </summary>
        public bool multiSelect;
        /// <summary>
        /// A CSS class to apply to each item in the view on mouseover.
        /// Setting this will automatically set trackOver to true.
        /// </summary>
        public JsString overItemCls;
        /// <summary>
        /// =false
        /// True to preserve scroll position across refresh operations.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool preserveScrollOnRefresh;
        /// <summary>
        /// A CSS class to apply to each selected item in the view.
        /// Defaults to: <c>&quot;x-item-selected&quot;</c>
        /// </summary>
        public JsString selectedItemCls;
        /// <summary>
        /// True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,
        /// false to force the user to hold Ctrl or Shift to select more than on item.
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'SIMPLE' instead.</p>
        /// </summary>
        public bool simpleSelect;
        /// <summary>
        /// Allows selection of exactly one item at a time. As this is the default selection mode anyway, this config
        /// is completely ignored.
        /// <p>This cfg has been <strong>removed</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'SINGLE' instead.</p>
        /// </summary>
        public bool singleSelect;
        /// <summary>
        /// The Ext.data.Store to bind this DataView to.
        /// </summary>
        public Ext.data.Store store;
        /// <summary>
        /// When true the overItemCls will be applied to rows when hovered over.
        /// This in return will also cause highlightitem and
        /// unhighlightitem events to be fired.
        /// Enabled automatically when the <see cref="Ext.view.AbstractViewConfig.overItemCls">overItemCls</see> config is set.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool trackOver;
        /// <summary>
        /// Changes the data store bound to this view and refreshes it.
        /// </summary>
        /// <param name="store"><p>The store to bind to this view</p>
        /// </param>
        public void bindStore(Ext.data.Store store){}
        /// <summary>
        /// Binds listeners for this component to the store. By default it will add
        /// anything bound by the getStoreListeners method, however it can be overridden
        /// in a subclass to provide any more complicated handling.
        /// </summary>
        /// <param name="store"><p>The store to bind to</p>
        /// </param>
        public virtual void bindStoreListeners(Ext.data.AbstractStore store){}
        /// <summary>
        /// Deselects all selected records.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use <see cref="Ext.selection.Model.deselectAll">Ext.selection.Model.deselectAll</see> instead.</p>
        /// </summary>
        public void clearSelections(){}
        /// <summary>
        /// Function which can be overridden which returns the data object passed to this
        /// DataView's template to render the whole DataView.
        /// This is usually an Array of data objects, each element of which is processed by an
        /// <see cref="Ext.XTemplate">XTemplate</see> which uses <tt>'&lt;tpl for="."&gt;'</tt> to iterate over its supplied
        /// data object as an Array. However, <i>named</i> properties may be placed into the data object to
        /// provide non-repeating data such as headings, totals etc.
        /// </summary>
        /// <param name="records"><p>An Array of <see cref="Ext.data.Model">Ext.data.Model</see>s to be rendered into the DataView.</p>
        /// </param>
        /// <param name="startIndex"><p>the index number of the Record being prepared for rendering.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see>[]</span><div><p>An Array of data objects to be processed by a repeating XTemplate. May also
        /// contain <i>named</i> properties.</p>
        /// </div>
        /// </returns>
        public object[] collectData(JsArray<Ext.data.Model> records, JsNumber startIndex){return null;}
        /// <summary>
        /// Deselects a record instance by record instance or index.
        /// </summary>
        /// <param name="records"><p>An array of records or an index</p>
        /// </param>
        /// <param name="suppressEvent"><p>Set to false to not fire a deselect event</p>
        /// </param>
        public void deselect(object records, object suppressEvent=null){}
        /// <summary>
        /// Perform the first refresh of the View from a newly bound store.
        /// This is called when this View has been sized for the first time.
        /// </summary>
        /// <param name="store">
        /// </param>
        private void doFirstRefresh(object store){}
        /// <summary>
        /// Returns the template node the passed child belongs to, or null if it doesn't belong to one.
        /// </summary>
        /// <param name="node">
        /// </param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The template node</p>
        /// </div>
        /// </returns>
        public JsObject findItemByChild(object node){return null;}
        /// <summary>
        /// Returns the template node by the Ext.EventObject or null if it is not found.
        /// </summary>
        /// <param name="e">
        /// </param>
        public void findTargetByEvent(EventObject e){}
        /// <summary>
        /// Gets a template node.
        /// </summary>
        /// <param name="nodeInfo"><p>An HTMLElement template node, index of a template node,
        /// the id of a template node or the record associated with the node.</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The node or null if it wasn't found</p>
        /// </div>
        /// </returns>
        public JsObject getNode(object nodeInfo){return null;}
        /// <summary>
        /// Parameters<li><span>record</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="record">
        /// </param>
        private void getNodeByRecord(object record){}
        /// <summary>
        /// Gets a range nodes.
        /// </summary>
        /// <param name="start"><p>The index of the first node in the range</p>
        /// </param>
        /// <param name="end"><p>The index of the last node in the range</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement[]</span><div><p>An array of nodes</p>
        /// </div>
        /// </returns>
        public JsObject[] getNodes(object start=null, object end=null){return null;}
        /// <summary>
        /// Gets a record from a node
        /// </summary>
        /// <param name="node"><p>The node to evaluate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see></span><div><p>record The <see cref="Ext.data.Model">Ext.data.Model</see> object</p>
        /// </div>
        /// </returns>
        public Ext.data.Model getRecord(object node){return null;}
        /// <summary>
        /// Gets an array of the records from an array of nodes
        /// </summary>
        /// <param name="nodes"><p>The nodes to evaluate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see>[]</span><div><p>records The <see cref="Ext.data.Model">Ext.data.Model</see> objects</p>
        /// </div>
        /// </returns>
        public Ext.data.Model[] getRecords(object nodes){return null;}
        /// <summary>
        /// Gets the currently selected nodes.
        /// </summary>
        /// <returns>
        /// <span>HTMLElement[]</span><div><p>An array of HTMLElements</p>
        /// </div>
        /// </returns>
        public JsObject[] getSelectedNodes(){return null;}
        /// <summary>
        /// Gets an array of the selected records
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use <see cref="Ext.selection.Model.getSelection">Ext.selection.Model.getSelection</see> instead.</p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see>[]</span><div><p>An array of <see cref="Ext.data.Model">Ext.data.Model</see> objects</p>
        /// </div>
        /// </returns>
        public Ext.data.Model[] getSelectedRecords(){return null;}
        /// <summary>
        /// Gets the number of selected nodes.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use <see cref="Ext.selection.Model.getCount">Ext.selection.Model.getCount</see> instead.</p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The node count</p>
        /// </div>
        /// </returns>
        public JsNumber getSelectionCount(){return null;}
        /// <summary>
        /// Gets the selection model for this view.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.selection.Model">Ext.selection.Model</see></span><div><p>The selection model</p>
        /// </div>
        /// </returns>
        public Ext.selection.Model getSelectionModel(){return null;}
        /// <summary>
        /// Returns the store associated with this DataView.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.Store">Ext.data.Store</see></span><div><p>The store</p>
        /// </div>
        /// </returns>
        public virtual Ext.data.Store getStore(){return null;}
        /// <summary>
        /// Gets the listeners to bind to a new store.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The listeners to be bound to the store in object literal form. The scope
        /// may be omitted, it is assumed to be the current instance.</p>
        /// </div>
        /// </returns>
        public virtual object getStoreListeners(){return null;}
        /// <summary>
        /// Finds the index of the passed node.
        /// </summary>
        /// <param name="nodeInfo"><p>An HTMLElement template node, index of a template node, the id of a template node
        /// or a record associated with a node.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The index of the node or -1</p>
        /// </div>
        /// </returns>
        public JsNumber indexOf(object nodeInfo){return null;}
        /// <summary>
        /// Returns true if the passed node is selected, else false.
        /// </summary>
        /// <param name="node"><p>The node, node index or record to check</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if selected, else false</p>
        /// </div>
        /// </returns>
        public bool isSelected(object node){return false;}
        /// <summary>
        /// Template method, it is called when a new store is bound
        /// to the current instance.
        /// </summary>
        /// <param name="store"><p>The store being bound</p>
        /// </param>
        /// <param name="initial"><p>True if this store is being bound as initialization of the instance.</p>
        /// </param>
        public virtual void onBindStore(Ext.data.AbstractStore store, bool initial){}
        /// <summary>
        /// Calls this.refresh if this.blockRefresh is not true
        /// </summary>
        private void onDataRefresh(){}
        /// <summary>
        /// Template method, it is called when an existing store is unbound
        /// from the current instance.
        /// </summary>
        /// <param name="store"><p>The store being unbound</p>
        /// </param>
        /// <param name="initial"><p>True if this store is being bound as initialization of the instance.</p>
        /// </param>
        public virtual void onUnbindStore(Ext.data.AbstractStore store, bool initial){}
        /// <summary>
        /// Function which can be overridden to provide custom formatting for each Record that is used by this
        /// DataView's template to render each node.
        /// </summary>
        /// <param name="data"><p>The raw data object that was used to create the Record.</p>
        /// </param>
        /// <param name="recordIndex"><p>the index number of the Record being prepared for rendering.</p>
        /// </param>
        /// <param name="record"><p>The Record being prepared for rendering.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see>/<see cref="Object">Object</see></span><div><p>The formatted data in a format expected by the internal <see cref="Ext.view.AbstractViewConfig.tpl">template</see>'s overwrite() method.
        /// (either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))</p>
        /// </div>
        /// </returns>
        public object prepareData(object data, JsNumber recordIndex, Ext.data.Model record){return null;}
        /// <summary>
        /// Refreshes the view by reloading the data from the store and re-rendering the template.
        /// </summary>
        public void refresh(){}
        /// <summary>
        /// Refreshes an individual node's data from the store.
        /// </summary>
        /// <param name="index"><p>The item's data index in the store</p>
        /// </param>
        public void refreshNode(JsNumber index){}
        /// <summary>
        /// Called by the framework when the view is refreshed, or when rows are added or deleted.
        /// These operations may cause the view's dimensions to change, and if the owning container
        /// is shrinkwrapping this view, then the layout must be updated to accommodate these new dimensions.
        /// </summary>
        private void refreshSize(){}
        /// <summary>
        /// Restores the scrollState.
        /// Must be used in conjunction with saveScrollState
        /// </summary>
        private void restoreScrollState(){}
        /// <summary>
        /// Saves the scrollState in a private variable. Must be used in conjunction with restoreScrollState.
        /// </summary>
        private void saveScrollState(){}
        /// <summary>
        /// Selects a record instance by record instance or index.
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use <see cref="Ext.selection.Model.select">Ext.selection.Model.select</see> instead.</p>
        /// </summary>
        /// <param name="records"><p>An array of records or an index</p>
        /// </param>
        /// <param name="keepExisting">
        /// </param>
        /// <param name="suppressEvent"><p>Set to false to not fire a select event</p>
        /// </param>
        public void select(object records, bool keepExisting, object suppressEvent=null){}
        /// <summary>
        /// Unbinds listeners from this component to the store. By default it will remove
        /// anything bound by the bindStoreListeners method, however it can be overridden
        /// in a subclass to provide any more complicated handling.
        /// </summary>
        /// <param name="store"><p>The store to unbind from</p>
        /// </param>
        public virtual void unbindStoreListeners(Ext.data.AbstractStore store){}
        /// <summary>
        /// Binds a store to this instance.
        /// </summary>
        public virtual void bindStore(object store=null, object initial=null){}
        public AbstractView(AbstractViewConfig config){}
        public AbstractView(){}
        public AbstractView(params object[] args){}
    }
    #endregion
    #region AbstractViewConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractViewConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// Set this to true to ignore refresh events on the bound store. This is useful if
        /// you wish to provide custom transition animations via a plugin
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool blockRefresh;
        /// <summary>
        /// True to defer emptyText being applied until the store's first load.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool deferEmptyText;
        /// <summary>
        /// Defaults to true to defer the initial refresh of the view.
        /// This allows the View to execute its render and initial layout more quickly because the process will not be encumbered
        /// by the expensive update of the view structure.
        /// <b>Important: </b>Be aware that this will mean that the View's item elements will not be available immediately upon render, so
        /// <i>selection</i> may not take place at render time. To access a View's item elements as soon as possible, use the <see cref="Ext.view.AbstractViewEvents.viewready">viewready</see> event.
        /// Or set <c>deferInitialrefresh</c> to false, but this will be at the cost of slower rendering.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool deferInitialRefresh;
        /// <summary>
        /// True to disable selection within the DataView. This configuration will lock the selection model
        /// that the DataView uses.
        /// </summary>
        public bool disableSelection;
        /// <summary>
        /// The text to display in the view when there is no data to display.
        /// Note that when using local data the emptyText will not be displayed unless you set
        /// the deferEmptyText option to false.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString emptyText;
        /// <summary>
        /// Specifies the class to be assigned to each element in the view when used in conjunction with the
        /// itemTpl configuration.
        /// Defaults to: <c>&quot;x-dataview-item&quot;</c>
        /// </summary>
        public JsString itemCls;
        /// <summary>
        /// This is a required setting. A simple CSS selector (e.g. div.some-class or
        /// span:first-child) that will be used to determine what nodes this DataView will be
        /// working with. The itemSelector is used to map DOM nodes to records. As such, there should
        /// only be one root level element that matches the selector for each record.
        /// </summary>
        public JsString itemSelector;
        /// <summary>
        /// The inner portion of the item template to be rendered. Follows an XTemplate
        /// structure and will be placed inside of a tpl.
        /// </summary>
        public object itemTpl;
        /// <summary>
        /// False to disable a load mask from displaying while the view is loading. This can also be a
        /// Ext.LoadMask configuration object.
        /// Defaults to: <c>true</c>
        /// </summary>
        public object loadMask;
        /// <summary>
        /// The CSS class to apply to the loading message element. Defaults to Ext.LoadMask.prototype.msgCls "x-mask-loading".
        /// </summary>
        public JsString loadingCls;
        /// <summary>
        /// If specified, gives an explicit height for the data view when it is showing the loadingText,
        /// if that is specified. This is useful to prevent the view's height from collapsing to zero when the
        /// loading mask is applied and there are no other contents in the data view.
        /// </summary>
        public JsNumber loadingHeight;
        /// <summary>
        /// A string to display during data load operations.  If specified, this text will be
        /// displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
        /// contents will continue to display normally until the new data is loaded and the contents are replaced.
        /// Defaults to: <c>&quot;Loading...&quot;</c>
        /// </summary>
        public JsString loadingText;
        /// <summary>
        /// Whether or not to use the loading message.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool loadingUseMsg;
        /// <summary>
        /// True to allow selection of more than one item at a time, false to allow selection of only a single item
        /// at a time or no selection at all, depending on the value of singleSelect.
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'MULTI' instead.</p>
        /// </summary>
        public bool multiSelect;
        /// <summary>
        /// A CSS class to apply to each item in the view on mouseover.
        /// Setting this will automatically set trackOver to true.
        /// </summary>
        public JsString overItemCls;
        /// <summary>
        /// =false
        /// True to preserve scroll position across refresh operations.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool preserveScrollOnRefresh;
        /// <summary>
        /// A CSS class to apply to each selected item in the view.
        /// Defaults to: <c>&quot;x-item-selected&quot;</c>
        /// </summary>
        public JsString selectedItemCls;
        /// <summary>
        /// True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,
        /// false to force the user to hold Ctrl or Shift to select more than on item.
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'SIMPLE' instead.</p>
        /// </summary>
        public bool simpleSelect;
        /// <summary>
        /// Allows selection of exactly one item at a time. As this is the default selection mode anyway, this config
        /// is completely ignored.
        /// <p>This cfg has been <strong>removed</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'SINGLE' instead.</p>
        /// </summary>
        public bool singleSelect;
        /// <summary>
        /// The Ext.data.Store to bind this DataView to.
        /// </summary>
        public Ext.data.Store store;
        /// <summary>
        /// When true the overItemCls will be applied to rows when hovered over.
        /// This in return will also cause highlightitem and
        /// unhighlightitem events to be fired.
        /// Enabled automatically when the <see cref="Ext.view.AbstractViewConfig.overItemCls">overItemCls</see> config is set.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool trackOver;
        public AbstractViewConfig(params object[] args){}
    }
    #endregion
    #region AbstractViewEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractViewEvents : Ext.ComponentEvents
    {
        /// <summary>
        /// Fires before the view is refreshed
        /// </summary>
        /// <param name="this"><p>The DataView object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforerefresh(Ext.view.View @this, object eOpts){}
        /// <summary>
        /// Fires when the nodes associated with an recordset have been added to the underlying store
        /// </summary>
        /// <param name="records"><p>The model instance</p>
        /// </param>
        /// <param name="index"><p>The index at which the set of record/nodes starts</p>
        /// </param>
        /// <param name="node"><p>The node that has just been updated</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemadd(JsArray<Ext.data.Model> records, object index, object node, object eOpts){}
        /// <summary>
        /// Fires when the node associated with an individual record is removed
        /// </summary>
        /// <param name="record"><p>The model instance</p>
        /// </param>
        /// <param name="index"><p>The index of the record/node</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemremove(Ext.data.Model record, object index, object eOpts){}
        /// <summary>
        /// Fires when the node associated with an individual record is updated
        /// </summary>
        /// <param name="record"><p>The model instance</p>
        /// </param>
        /// <param name="index"><p>The index of the record/node</p>
        /// </param>
        /// <param name="node"><p>The node that has just been updated</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemupdate(Ext.data.Model record, object index, object node, object eOpts){}
        /// <summary>
        /// Fires when the view is refreshed
        /// </summary>
        /// <param name="this"><p>The DataView object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void refresh(Ext.view.View @this, object eOpts){}
        /// <summary>
        /// Fires when the View's item elements representing Store items has been rendered. If the deferInitialRefresh flag
        /// was set (and it is true by default), this will be after initial render, and no items will be available
        /// for selection until this event fires.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void viewready(Ext.view.View @this, object eOpts){}
        public AbstractViewEvents(params object[] args){}
    }
    #endregion
}
