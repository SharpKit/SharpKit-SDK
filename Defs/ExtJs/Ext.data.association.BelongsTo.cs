//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.association
{
    #region BelongsTo
    /// <inheritdocs />
    /// <summary>
    /// <p>Represents a many to one association with another model. The owner model is expected to have
    /// a foreign key which references the primary key of the associated model:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('Category', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: [
    /// { name: 'id',   type: 'int' },
    /// { name: 'name', type: 'string' }
    /// ]
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('Product', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: [
    /// { name: 'id',          type: 'int' },
    /// { name: 'category_id', type: 'int' },
    /// { name: 'name',        type: 'string' }
    /// ],
    /// // we can use the belongsTo shortcut on the model to create a belongsTo association
    /// associations: [
    /// { type: 'belongsTo', model: 'Category' }
    /// ]
    /// });
    /// </code></pre>
    /// <p>In the example above we have created models for Products and Categories, and linked them together
    /// by saying that each Product belongs to a Category. This automatically links each Product to a Category
    /// based on the Product's category_id, and provides new functions on the Product model:</p>
    /// <h2>Generated getter function</h2>
    /// <p>The first function that is added to the owner model is a getter function:</p>
    /// <pre><code>var product = new Product({
    /// id: 100,
    /// category_id: 20,
    /// name: 'Sneakers'
    /// });
    /// product.getCategory(function(category, operation) {
    /// // do something with the category object
    /// alert(category.get('id')); // alerts 20
    /// }, this);
    /// </code></pre>
    /// <p>The getCategory function was created on the Product model when we defined the association. This uses the
    /// Category's configured <see cref="Ext.data.proxy.Proxy">proxy</see> to load the Category asynchronously, calling the provided
    /// callback when it has loaded.</p>
    /// <p>The new getCategory function will also accept an object containing success, failure and callback properties
    /// - callback will always be called, success will only be called if the associated model was loaded successfully
    /// and failure will only be called if the associatied model could not be loaded:</p>
    /// <pre><code>product.getCategory({
    /// reload: true, // force a reload if the owner model is already cached
    /// callback: function(category, operation) {}, // a function that will always be called
    /// success : function(category, operation) {}, // a function that will only be called if the load succeeded
    /// failure : function(category, operation) {}, // a function that will only be called if the load did not succeed
    /// scope   : this // optionally pass in a scope object to execute the callbacks in
    /// });
    /// </code></pre>
    /// <p>In each case above the callbacks are called with two arguments - the associated model instance and the
    /// <see cref="Ext.data.Operation">operation</see> object that was executed to load that instance. The Operation object is
    /// useful when the instance could not be loaded.</p>
    /// <p>Once the getter has been called on the model, it will be cached if the getter is called a second time. To
    /// force the model to reload, specify reload: true in the options object.</p>
    /// <h2>Generated setter function</h2>
    /// <p>The second generated function sets the associated model instance - if only a single argument is passed to
    /// the setter then the following two calls are identical:</p>
    /// <pre><code>// this call...
    /// product.setCategory(10);
    /// // is equivalent to this call:
    /// product.set('category_id', 10);
    /// </code></pre>
    /// <p>An instance of the owner model can also be passed as a parameter.</p>
    /// <p>If we pass in a second argument, the model will be automatically saved and the second argument passed to
    /// the owner model's <see cref="Ext.data.Model.save">save</see> method:</p>
    /// <pre><code>product.setCategory(10, function(product, operation) {
    /// // the product has been saved
    /// alert(product.get('category_id')); //now alerts 10
    /// });
    /// //alternative syntax:
    /// product.setCategory(10, {
    /// callback: function(product, operation), // a function that will always be called
    /// success : function(product, operation), // a function that will only be called if the load succeeded
    /// failure : function(product, operation), // a function that will only be called if the load did not succeed
    /// scope   : this //optionally pass in a scope object to execute the callbacks in
    /// })
    /// </code></pre>
    /// <h2>Customisation</h2>
    /// <p>Associations reflect on the models they are linking to automatically set up properties such as the
    /// <see cref="Ext.data.association.BelongsToConfig.primaryKey">primaryKey</see> and <see cref="Ext.data.association.BelongsToConfig.foreignKey">foreignKey</see>. These can alternatively be specified:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('Product', {
    /// fields: [...],
    /// associations: [
    /// { type: 'belongsTo', model: 'Category', primaryKey: 'unique_id', foreignKey: 'cat_id' }
    /// ]
    /// });
    /// </code></pre>
    /// <p>Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'category_id')
    /// with our own settings. Usually this will not be needed.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class BelongsTo : Association
    {
        /// <summary>
        /// The name of the foreign key on the owner model that links it to the associated
        /// model. Defaults to the lowercased name of the associated model plus "_id", e.g. an association with a
        /// model called Product would set up a product_id foreign key.
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('Order', {
        /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
        /// fields: ['id', 'date'],
        /// hasMany: 'Product'
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('Product', {
        /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
        /// fields: ['id', 'name', 'order_id'], // refers to the id of the order that this product belongs to
        /// belongsTo: 'Order'
        /// });
        /// var product = new Product({
        /// id: 1,
        /// name: 'Product 1',
        /// order_id: 22
        /// }, 1);
        /// product.getOrder(); // Will make a call to the server asking for order_id 22
        /// </code>
        /// </summary>
        public JsString foreignKey;
        /// <summary>
        /// The name of the getter function that will be added to the local model's prototype.
        /// Defaults to 'get' + the name of the foreign model, e.g. getCategory
        /// </summary>
        public JsString getterName;
        /// <summary>
        /// The name of the setter function that will be added to the local model's prototype.
        /// Defaults to 'set' + the name of the foreign model, e.g. setCategory
        /// </summary>
        public JsString setterName;
        /// <summary>
        /// The type configuration can be used when creating associations using a configuration object.
        /// Use 'belongsTo' to create a BelongsTo association.
        /// <code>associations: [{
        /// type: 'belongsTo',
        /// model: 'User'
        /// }]
        /// </code>
        /// </summary>
        public JsString type;
        /// <summary>
        /// Returns a getter function to be placed on the owner model's prototype. We cache the loaded instance
        /// the first time it is loaded so that subsequent calls to the getter always receive the same reference.
        /// </summary>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>The getter function</p>
        /// </div>
        /// </returns>
        private System.Delegate createGetter(){return null;}
        /// <summary>
        /// Returns a setter function to be placed on the owner model's prototype
        /// </summary>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>The setter function</p>
        /// </div>
        /// </returns>
        private System.Delegate createSetter(){return null;}
        /// <summary>
        /// Read associated data
        /// </summary>
        /// <param name="record"><p>The record we're writing to</p>
        /// </param>
        /// <param name="reader"><p>The reader for the associated model</p>
        /// </param>
        /// <param name="associationData"><p>The raw associated data</p>
        /// </param>
        private void read(Ext.data.Model record, Ext.data.reader.Reader reader, object associationData){}
        public BelongsTo(BelongsToConfig config){}
        public BelongsTo(){}
        public BelongsTo(params object[] args){}
    }
    #endregion
    #region BelongsToConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BelongsToConfig : AssociationConfig
    {
        /// <summary>
        /// The name of the foreign key on the owner model that links it to the associated
        /// model. Defaults to the lowercased name of the associated model plus "_id", e.g. an association with a
        /// model called Product would set up a product_id foreign key.
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('Order', {
        /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
        /// fields: ['id', 'date'],
        /// hasMany: 'Product'
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('Product', {
        /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
        /// fields: ['id', 'name', 'order_id'], // refers to the id of the order that this product belongs to
        /// belongsTo: 'Order'
        /// });
        /// var product = new Product({
        /// id: 1,
        /// name: 'Product 1',
        /// order_id: 22
        /// }, 1);
        /// product.getOrder(); // Will make a call to the server asking for order_id 22
        /// </code>
        /// </summary>
        public JsString foreignKey;
        /// <summary>
        /// The name of the getter function that will be added to the local model's prototype.
        /// Defaults to 'get' + the name of the foreign model, e.g. getCategory
        /// </summary>
        public JsString getterName;
        /// <summary>
        /// The name of the setter function that will be added to the local model's prototype.
        /// Defaults to 'set' + the name of the foreign model, e.g. setCategory
        /// </summary>
        public JsString setterName;
        /// <summary>
        /// The type configuration can be used when creating associations using a configuration object.
        /// Use 'belongsTo' to create a BelongsTo association.
        /// <code>associations: [{
        /// type: 'belongsTo',
        /// model: 'User'
        /// }]
        /// </code>
        /// </summary>
        public JsString type;
        public BelongsToConfig(params object[] args){}
    }
    #endregion
    #region BelongsToEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BelongsToEvents : AssociationEvents
    {
        public BelongsToEvents(params object[] args){}
    }
    #endregion
}
