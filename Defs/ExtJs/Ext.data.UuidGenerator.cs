//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data
{
    #region UuidGenerator
    /// <inheritdocs />
    /// <summary>
    /// <p>This class generates UUID's according to RFC 4122. This class has a default id property.
    /// This means that a single instance is shared unless the id property is overridden. Thus,
    /// two <see cref="Ext.data.Model">Ext.data.Model</see> instances configured like the following share one generator:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModelX', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: 'uuid'
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModelY', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: 'uuid'
    /// });
    /// </code></pre>
    /// <p>This allows all models using this class to share a commonly configured instance.</p>
    /// <h1>Using Version 1 ("Sequential") UUID's</h1>
    /// <p>If a server can provide a proper timestamp and a "cryptographic quality random number"
    /// (as described in RFC 4122), the shared instance can be configured as follows:</p>
    /// <pre><code><see cref="Ext.data.IdGenerator.get">Ext.data.IdGenerator.get</see>('uuid').reconfigure({
    /// version: 1,
    /// clockSeq: clock, // 14 random bits
    /// salt: salt,      // 48 secure random bits (the Node field)
    /// timestamp: ts    // timestamp per Section 4.1.4
    /// });
    /// // or these values can be split into 32-bit chunks:
    /// <see cref="Ext.data.IdGenerator.get">Ext.data.IdGenerator.get</see>('uuid').reconfigure({
    /// version: 1,
    /// clockSeq: clock,
    /// salt: { lo: saltLow32, hi: saltHigh32 },
    /// timestamp: { lo: timestampLow32, hi: timestamptHigh32 }
    /// });
    /// </code></pre>
    /// <p>This approach improves the generator's uniqueness by providing a valid timestamp and
    /// higher quality random data. Version 1 UUID's should not be used unless this information
    /// can be provided by a server and care should be taken to avoid caching of this data.</p>
    /// <p>See http://www.ietf.org/rfc/rfc4122.txt for details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class UuidGenerator : IdGenerator
    {
        /// <summary>
        /// The Version of UUID. Supported values are:
        /// <li>1 : Time-based, "sequential" UUID.</li>
        /// <li>4 : Pseudo-random UUID.</li>
        /// The default is 4.
        /// Defaults to: <c>4</c>
        /// </summary>
        public JsNumber version;
        /// <summary>
        /// When created, this value is a 48-bit number. For computation, this value is split
        /// into 32-bit parts and stored in an object with hi and lo properties.
        /// </summary>
        public object salt{get;set;}
        /// <summary>
        /// When created, this value is a 60-bit number. For computation, this value is split
        /// into 32-bit parts and stored in an object with hi and lo properties.
        /// </summary>
        public object timestamp{get;set;}
        /// <summary>
        /// </summary>
        private void init(){}
        /// <summary>
        /// Reconfigures this generator given new config properties.
        /// </summary>
        /// <param name="config">
        /// </param>
        public void reconfigure(object config){}
        public UuidGenerator(UuidGeneratorConfig config){}
        public UuidGenerator(){}
        public UuidGenerator(params object[] args){}
    }
    #endregion
    #region UuidGeneratorConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class UuidGeneratorConfig : IdGeneratorConfig
    {
        /// <summary>
        /// The Version of UUID. Supported values are:
        /// <li>1 : Time-based, "sequential" UUID.</li>
        /// <li>4 : Pseudo-random UUID.</li>
        /// The default is 4.
        /// Defaults to: <c>4</c>
        /// </summary>
        public JsNumber version;
        public UuidGeneratorConfig(params object[] args){}
    }
    #endregion
    #region UuidGeneratorEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class UuidGeneratorEvents : IdGeneratorEvents
    {
        public UuidGeneratorEvents(params object[] args){}
    }
    #endregion
}
