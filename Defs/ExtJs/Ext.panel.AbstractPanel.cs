//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.panel
{
    #region AbstractPanel
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>A base class which provides methods common to Panel classes across the Sencha product range.</p>
    /// <p>Please refer to sub class's documentation</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractPanel : Ext.container.Container, Ext.container.DockingContainer
    {
        /// <summary>
        /// A shortcut to add or remove the border on the body of a panel. This only applies to a panel which has the frame configuration set to true.
        /// Defaults to undefined.
        /// </summary>
        public bool bodyBorder;
        /// <summary>
        /// A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element.
        /// The following examples are all valid:
        /// <code>bodyCls: 'foo'
        /// bodyCls: 'foo bar'
        /// bodyCls: ['foo', 'bar']
        /// </code>
        /// </summary>
        public object bodyCls;
        /// <summary>
        /// A shortcut for setting a padding style on the body element. The value can either be
        /// a number to be applied to all sides, or a normal css string describing padding.
        /// Defaults to undefined.
        /// </summary>
        public object bodyPadding;
        /// <summary>
        /// Custom CSS styles to be applied to the panel's body element, which can be supplied as a valid CSS style string,
        /// an object containing style property name/value pairs or a function that returns such a string or object.
        /// For example, these two formats are interpreted to be equivalent:
        /// <code>bodyStyle: 'background:#ffc; padding:10px;'
        /// bodyStyle: {
        /// background: '#ffc',
        /// padding: '10px'
        /// }
        /// </code>
        /// </summary>
        public object bodyStyle;
        /// <summary>
        /// This object holds the default weights applied to dockedItems that have no weight. These start with a
        /// weight of 1, to allow negative weights to insert before top items and are odd numbers
        /// so that even weights can be used to get between different dock orders.
        /// To make default docking order match border layout, do this:
        /// <code> Ext.panel.AbstractPanel.prototype.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };
        /// </code>
        /// Changing these defaults as above or individually on this object will effect all Panels.
        /// To change the defaults on a single panel, you should replace the entire object:
        /// <code> initComponent: function () {
        /// // NOTE: Don't change members of defaultDockWeights since the object is shared.
        /// this.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };
        /// this.callParent();
        /// }
        /// </code>
        /// To change only one of the default values, you do this:
        /// <code> initComponent: function () {
        /// // NOTE: Don't change members of defaultDockWeights since the object is shared.
        /// this.defaultDockWeights = <see cref="Ext.ExtContext.applyIf">Ext.applyIf</see>({ top: 10 }, this.defaultDockWeights);
        /// this.callParent();
        /// }
        /// </code>
        /// Defaults to: <c>{top: {render: 1, visual: 1}, left: {render: 3, visual: 5}, right: {render: 5, visual: 7}, bottom: {render: 7, visual: 3}}</c>
        /// </summary>
        public JsObject defaultDockWeights;
        /// <summary>
        /// A component or series of components to be added as docked items to this panel.
        /// The docked items can be docked to either the top, right, left or bottom of a panel.
        /// This is typically used for things like toolbars or tab bars:
        /// <code>var panel = new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// fullscreen: true,
        /// dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'top',
        /// items: [{
        /// text: 'Docked to the top'
        /// }]
        /// }]
        /// });</code>
        /// </summary>
        public object dockedItems;
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private JsArray emptyArray{get;set;}
        /// <summary>
        /// true in this class to identify an object as an instantiated Panel, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isPanel{get;set;}
        /// <summary>
        /// Adds a CSS class to the body element. If not rendered, the class will
        /// be added when the panel is rendered.
        /// </summary>
        /// <param name="cls"><p>The class to add</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.panel.Panel addBodyCls(JsString cls){return null;}
        /// <summary>
        /// Adds docked item(s) to the container.
        /// </summary>
        /// <param name="component"><p>The Component or array of components to add. The components
        /// must include a 'dock' parameter on each component to indicate where it should be docked
        /// ('top', 'right', 'bottom', 'left').</p>
        /// </param>
        /// <param name="pos"><p>The index at which the Component will be added</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>The added components.</p>
        /// </div>
        /// </returns>
        public virtual Ext.Component[] addDocked(object component, object pos=null){return null;}
        /// <summary>
        /// Finds a docked component by id, itemId or position. Also see getDockedItems
        /// </summary>
        /// <param name="comp"><p>The id, itemId or position of the docked component (see <see cref="Ext.panel.AbstractPanel.getComponent">getComponent</see> for details)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The docked component (if found)</p>
        /// </div>
        /// </returns>
        public virtual Ext.Component getDockedComponent(object comp){return null;}
        /// <summary>
        /// Retrieves an array of all currently docked Components.
        /// For example to find a toolbar that has been docked at top:
        /// <code>panel.getDockedItems('toolbar[dock="top"]');
        /// </code>
        /// </summary>
        /// <param name="selector"><p>A <see cref="Ext.ComponentQuery">ComponentQuery</see> selector string to filter the returned items.</p>
        /// </param>
        /// <param name="beforeBody"><p>An optional flag to limit the set of items to only those
        /// before the body (true) or after the body (false). All components are returned by
        /// default.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see>[]</span><div><p>The array of docked components meeting the specified criteria.</p>
        /// </div>
        /// </returns>
        public virtual Ext.Component[] getDockedItems(JsString selector, object beforeBody=null){return null;}
        /// <summary>
        /// Parses the bodyStyle config if available to create a style string that will be applied to the body element.
        /// This also includes bodyPadding and bodyBorder if available.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>A CSS style string with body styles, padding and border.</p>
        /// </div>
        /// </returns>
        private JsString initBodyStyles(){return null;}
        /// <summary>
        /// Inserts docked item(s) to the panel at the indicated position.
        /// </summary>
        /// <param name="pos"><p>The index at which the Component will be inserted</p>
        /// </param>
        /// <param name="component"><p>. The Component or array of components to add. The components
        /// must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right',
        /// 'bottom', 'left').</p>
        /// </param>
        public virtual void insertDocked(JsNumber pos, object component){}
        /// <summary>
        /// Invoked after a docked item is added to the Panel.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="component">
        /// </param>
        public virtual void onDockedAdd(Ext.Component component){}
        /// <summary>
        /// Invoked after a docked item is removed from the Panel.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="component">
        /// </param>
        public virtual void onDockedRemove(Ext.Component component){}
        /// <summary>
        /// Removes a CSS class from the body element.
        /// </summary>
        /// <param name="cls"><p>The class to remove</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.panel.Panel removeBodyCls(JsString cls){return null;}
        /// <summary>
        /// Removes the docked item from the panel.
        /// </summary>
        /// <param name="item"><p>. The Component to remove.</p>
        /// </param>
        /// <param name="autoDestroy"><p>Destroy the component after removal.</p>
        /// </param>
        public virtual void removeDocked(Ext.Component item, object autoDestroy=null){}
        /// <summary>
        /// Sets the body style according to the passed parameters.
        /// </summary>
        /// <param name="style"><p>A full style specification string, or object, or the name of a style property to set.</p>
        /// </param>
        /// <param name="value"><p>If the first param was a style property name, the style property value.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Panel">Ext.panel.Panel</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.panel.Panel setBodyStyle(object style, JsString value){return null;}
        public AbstractPanel(AbstractPanelConfig config){}
        public AbstractPanel(){}
        public AbstractPanel(params object[] args){}
    }
    #endregion
    #region AbstractPanelConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractPanelConfig : Ext.container.ContainerConfig
    {
        /// <summary>
        /// A shortcut to add or remove the border on the body of a panel. This only applies to a panel which has the frame configuration set to true.
        /// Defaults to undefined.
        /// </summary>
        public bool bodyBorder;
        /// <summary>
        /// A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element.
        /// The following examples are all valid:
        /// <code>bodyCls: 'foo'
        /// bodyCls: 'foo bar'
        /// bodyCls: ['foo', 'bar']
        /// </code>
        /// </summary>
        public object bodyCls;
        /// <summary>
        /// A shortcut for setting a padding style on the body element. The value can either be
        /// a number to be applied to all sides, or a normal css string describing padding.
        /// Defaults to undefined.
        /// </summary>
        public object bodyPadding;
        /// <summary>
        /// Custom CSS styles to be applied to the panel's body element, which can be supplied as a valid CSS style string,
        /// an object containing style property name/value pairs or a function that returns such a string or object.
        /// For example, these two formats are interpreted to be equivalent:
        /// <code>bodyStyle: 'background:#ffc; padding:10px;'
        /// bodyStyle: {
        /// background: '#ffc',
        /// padding: '10px'
        /// }
        /// </code>
        /// </summary>
        public object bodyStyle;
        /// <summary>
        /// This object holds the default weights applied to dockedItems that have no weight. These start with a
        /// weight of 1, to allow negative weights to insert before top items and are odd numbers
        /// so that even weights can be used to get between different dock orders.
        /// To make default docking order match border layout, do this:
        /// <code> Ext.panel.AbstractPanel.prototype.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };
        /// </code>
        /// Changing these defaults as above or individually on this object will effect all Panels.
        /// To change the defaults on a single panel, you should replace the entire object:
        /// <code> initComponent: function () {
        /// // NOTE: Don't change members of defaultDockWeights since the object is shared.
        /// this.defaultDockWeights = { top: 1, bottom: 3, left: 5, right: 7 };
        /// this.callParent();
        /// }
        /// </code>
        /// To change only one of the default values, you do this:
        /// <code> initComponent: function () {
        /// // NOTE: Don't change members of defaultDockWeights since the object is shared.
        /// this.defaultDockWeights = <see cref="Ext.ExtContext.applyIf">Ext.applyIf</see>({ top: 10 }, this.defaultDockWeights);
        /// this.callParent();
        /// }
        /// </code>
        /// Defaults to: <c>{top: {render: 1, visual: 1}, left: {render: 3, visual: 5}, right: {render: 5, visual: 7}, bottom: {render: 7, visual: 3}}</c>
        /// </summary>
        public JsObject defaultDockWeights;
        /// <summary>
        /// A component or series of components to be added as docked items to this panel.
        /// The docked items can be docked to either the top, right, left or bottom of a panel.
        /// This is typically used for things like toolbars or tab bars:
        /// <code>var panel = new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// fullscreen: true,
        /// dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'top',
        /// items: [{
        /// text: 'Docked to the top'
        /// }]
        /// }]
        /// });</code>
        /// </summary>
        public object dockedItems;
        public AbstractPanelConfig(params object[] args){}
    }
    #endregion
    #region AbstractPanelEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractPanelEvents : Ext.container.ContainerEvents
    {
        public AbstractPanelEvents(params object[] args){}
    }
    #endregion
}
