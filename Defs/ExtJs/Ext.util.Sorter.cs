//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region Sorter
    /// <inheritdocs />
    /// <summary>
    /// <p>Represents a single sorter that can be applied to a Store. The sorter is used
    /// to compare two values against each other for the purpose of ordering them. Ordering
    /// is achieved by specifying either:</p>
    /// <ul>
    /// <li><see cref="Ext.util.SorterConfig.property">A sorting property</see></li>
    /// <li><see cref="Ext.util.SorterConfig.sorterFn">A sorting function</see></li>
    /// </ul>
    /// <p>As a contrived example, we can specify a custom sorter that sorts by rank:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('Person', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['name', 'rank']
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// model: 'Person',
    /// proxy: 'memory',
    /// sorters: [{
    /// sorterFn: function(o1, o2){
    /// var getRank = function(o){
    /// var name = o.get('rank');
    /// if (name === 'first') {
    /// return 1;
    /// } else if (name === 'second') {
    /// return 2;
    /// } else {
    /// return 3;
    /// }
    /// },
    /// rank1 = getRank(o1),
    /// rank2 = getRank(o2);
    /// if (rank1 === rank2) {
    /// return 0;
    /// }
    /// return rank1 &lt; rank2 ? -1 : 1;
    /// }
    /// }],
    /// data: [{
    /// name: 'Person1',
    /// rank: 'second'
    /// }, {
    /// name: 'Person2',
    /// rank: 'third'
    /// }, {
    /// name: 'Person3',
    /// rank: 'first'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Sorter : Ext.Base
    {
        /// <summary>
        /// The direction to sort by.
        /// Defaults to: <c>&quot;ASC&quot;</c>
        /// </summary>
        public JsString direction;
        /// <summary>
        /// The property to sort by. Required unless sorterFn is provided. The property is extracted from the object
        /// directly and compared for sorting using the built in comparison operators.
        /// </summary>
        public JsString property;
        /// <summary>
        /// Optional root property. This is mostly useful when sorting a Store, in which case we set the root to 'data' to
        /// make the filter pull the property out of the data object of each item
        /// </summary>
        public JsString root;
        /// <summary>
        /// A specific sorter function to execute. Can be passed instead of property. This sorter function allows
        /// for any kind of custom/complex comparisons. The sorterFn receives two arguments, the objects being compared. The
        /// function should return:
        /// <li>-1 if o1 is "less than" o2</li>
        /// <li>0 if o1 is "equal" to o2</li>
        /// <li>1 if o1 is "greater than" o2</li>
        /// </summary>
        public System.Delegate sorterFn;
        /// <summary>
        /// A function that will be run on each value before it is compared in the sorter. The function will receive a single
        /// argument, the value.
        /// </summary>
        public System.Delegate transform;
        /// <summary>
        /// Creates and returns a function which sorts an array by the given property and direction
        /// </summary>
        /// <param name="sorterFn">
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>A function which sorts by the property/direction combination provided</p>
        /// </div>
        /// </returns>
        private System.Delegate createSortFunction(object sorterFn){return null;}
        /// <summary>
        /// Basic default sorter function that just compares the defined property of each object
        /// </summary>
        /// <param name="o1">
        /// </param>
        /// <param name="o2">
        /// </param>
        private void defaultSorterFn(object o1, object o2){}
        /// <summary>
        /// Returns the root property of the given item, based on the configured root property
        /// </summary>
        /// <param name="item"><p>The item</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The root property of the object</p>
        /// </div>
        /// </returns>
        private object getRoot(object item){return null;}
        /// <summary>
        /// Set the sorting direction for this sorter.
        /// </summary>
        /// <param name="direction"><p>The direction to sort in. Should be either 'ASC' or 'DESC'.</p>
        /// </param>
        public void setDirection(JsString direction){}
        /// <summary>
        /// Toggles the sorting direction for this sorter.
        /// </summary>
        public void toggle(){}
        /// <summary>
        /// Update the sort function for this sorter.
        /// </summary>
        /// <param name="fn"><p>A new sorter function for this sorter. If not specified it will use the default
        /// sorting function.</p>
        /// </param>
        public void updateSortFunction(System.Delegate fn=null){}
        public Sorter(SorterConfig config){}
        public Sorter(){}
        public Sorter(params object[] args){}
    }
    #endregion
    #region SorterConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class SorterConfig : Ext.BaseConfig
    {
        /// <summary>
        /// The direction to sort by.
        /// Defaults to: <c>&quot;ASC&quot;</c>
        /// </summary>
        public JsString direction;
        /// <summary>
        /// The property to sort by. Required unless sorterFn is provided. The property is extracted from the object
        /// directly and compared for sorting using the built in comparison operators.
        /// </summary>
        public JsString property;
        /// <summary>
        /// Optional root property. This is mostly useful when sorting a Store, in which case we set the root to 'data' to
        /// make the filter pull the property out of the data object of each item
        /// </summary>
        public JsString root;
        /// <summary>
        /// A specific sorter function to execute. Can be passed instead of property. This sorter function allows
        /// for any kind of custom/complex comparisons. The sorterFn receives two arguments, the objects being compared. The
        /// function should return:
        /// <li>-1 if o1 is "less than" o2</li>
        /// <li>0 if o1 is "equal" to o2</li>
        /// <li>1 if o1 is "greater than" o2</li>
        /// </summary>
        public System.Delegate sorterFn;
        /// <summary>
        /// A function that will be run on each value before it is compared in the sorter. The function will receive a single
        /// argument, the value.
        /// </summary>
        public System.Delegate transform;
        public SorterConfig(params object[] args){}
    }
    #endregion
    #region SorterEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class SorterEvents : Ext.BaseEvents
    {
        public SorterEvents(params object[] args){}
    }
    #endregion
}
