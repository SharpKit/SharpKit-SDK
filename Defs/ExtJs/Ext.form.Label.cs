//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form
{
    #region Label
    /// <inheritdocs />
    /// <summary>
    /// <p>Produces a standalone <c>&lt;label /&gt;</c> element which can be inserted into a form and be associated with a field
    /// in that form using the <see cref="Ext.form.LabelConfig.forId">forId</see> property.</p>
    /// <p><strong>NOTE:</strong> in most cases it will be more appropriate to use the <see cref="Ext.form.LabelableConfig.fieldLabel">fieldLabel</see>
    /// and associated config properties (<see cref="Ext.form.LabelableConfig.labelAlign">Ext.form.Labelable.labelAlign</see>, <see cref="Ext.form.LabelableConfig.labelWidth">Ext.form.Labelable.labelWidth</see>,
    /// etc.) in field components themselves, as that allows labels to be uniformly sized throughout the form.
    /// <see cref="Ext.form.Label">Ext.form.Label</see> should only be used when your layout can not be achieved with the standard
    /// <see cref="Ext.form.Labelable">field layout</see>.</p>
    /// <p>You will likely be associating the label with a field component that extends <see cref="Ext.form.field.Base">Ext.form.field.Base</see>, so
    /// you should make sure the <see cref="Ext.form.LabelConfig.forId">forId</see> is set to the same value as the <see cref="Ext.form.field.BaseConfig.inputId">inputId</see>
    /// of that field.</p>
    /// <p>The label's text can be set using either the <see cref="Ext.form.LabelConfig.text">text</see> or <see cref="Ext.form.LabelConfig.html">html</see> configuration properties; the
    /// difference between the two is that the former will automatically escape HTML characters when rendering, while
    /// the latter will not.</p>
    /// <h1>Example</h1>
    /// <p>This example creates a Label after its associated Text field, an arrangement that cannot currently
    /// be achieved using the standard Field layout's labelAlign.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'Field with Label',
    /// width: 400,
    /// bodyPadding: 10,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// layout: {
    /// type: 'hbox',
    /// align: 'middle'
    /// },
    /// items: [{
    /// xtype: 'textfield',
    /// hideLabel: true,
    /// flex: 1
    /// }, {
    /// xtype: 'label',
    /// forId: 'myFieldId',
    /// text: 'My Awesome Field',
    /// margin: '0 0 0 10'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Label : Ext.Component
    {
        /// <summary>
        /// The id of the input element to which this label will be bound via the standard HTML 'for'
        /// attribute. If not specified, the attribute will not be added to the label. In most cases you will be
        /// associating the label with a Ext.form.field.Base component, so you should make sure this matches
        /// the inputId of that field.
        /// </summary>
        public JsString forId;
        /// <summary>
        /// The plain text to display within the label. If you need to include HTML
        /// tags within the label's innerHTML, use the html config instead.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString text;
        /// <summary>
        /// Updates the label's innerHTML with the specified string.
        /// </summary>
        /// <param name="text"><p>The new label text</p>
        /// </param>
        /// <param name="encode"><p>False to skip HTML-encoding the text when rendering it
        /// to the label. This might be useful if you want to include tags in the label's innerHTML rather
        /// than rendering them as string literals per the default logic.</p>
        /// <p>Defaults to: <c>true</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.form.Label">Ext.form.Label</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.form.Label setText(JsString text, object encode=null){return null;}
        public Label(Ext.form.LabelConfig config){}
        public Label(){}
        public Label(params object[] args){}
    }
    #endregion
    #region LabelConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LabelConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// The id of the input element to which this label will be bound via the standard HTML 'for'
        /// attribute. If not specified, the attribute will not be added to the label. In most cases you will be
        /// associating the label with a Ext.form.field.Base component, so you should make sure this matches
        /// the inputId of that field.
        /// </summary>
        public JsString forId;
        /// <summary>
        /// The plain text to display within the label. If you need to include HTML
        /// tags within the label's innerHTML, use the html config instead.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString text;
        public LabelConfig(params object[] args){}
    }
    #endregion
    #region LabelEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LabelEvents : Ext.ComponentEvents
    {
        public LabelEvents(params object[] args){}
    }
    #endregion
}
