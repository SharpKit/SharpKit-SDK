//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region Base
    /// <inheritdocs />
    /// <summary>
    /// <p>Base class for form fields that provides default event handling, rendering, and other common functionality
    /// needed by all form field types. Utilizes the <see cref="Ext.form.field.Field">Ext.form.field.Field</see> mixin for value handling and validation,
    /// and the <see cref="Ext.form.Labelable">Ext.form.Labelable</see> mixin to provide label and error message display.</p>
    /// <p>In most cases you will want to use a subclass, such as <see cref="Ext.form.field.Text">Ext.form.field.Text</see> or <see cref="Ext.form.field.Checkbox">Ext.form.field.Checkbox</see>,
    /// rather than creating instances of this class directly. However if you are implementing a custom form field,
    /// using this as the parent class is recommended.</p>
    /// <h1>Values and Conversions</h1>
    /// <p>Because Base implements the Field mixin, it has a main value that can be initialized with the
    /// <see cref="Ext.form.field.BaseConfig.value">value</see> config and manipulated via the <see cref="Ext.form.field.Base.getValue">getValue</see> and <see cref="Ext.form.field.Base.setValue">setValue</see> methods. This main
    /// value can be one of many data types appropriate to the current field, for instance a <see cref="Ext.form.field.Date">Date</see>
    /// field would use a JavaScript Date object as its value type. However, because the field is rendered as a HTML
    /// input, this value data type can not always be directly used in the rendered field.</p>
    /// <p>Therefore Base introduces the concept of a "raw value". This is the value of the rendered HTML input field,
    /// and is normally a String. The <see cref="Ext.form.field.Base.getRawValue">getRawValue</see> and <see cref="Ext.form.field.Base.setRawValue">setRawValue</see> methods can be used to directly
    /// work with the raw value, though it is recommended to use getValue and setValue in most cases.</p>
    /// <p>Conversion back and forth between the main value and the raw value is handled by the <see cref="Ext.form.field.Base.valueToRaw">valueToRaw</see> and
    /// <see cref="Ext.form.field.Base.rawToValue">rawToValue</see> methods. If you are implementing a subclass that uses a non-String value data type, you
    /// should override these methods to handle the conversion.</p>
    /// <h1>Rendering</h1>
    /// <p>The content of the field body is defined by the <see cref="Ext.form.field.Base">fieldSubTpl</see> XTemplate, with its argument data
    /// created by the <see cref="Ext.form.field.Base.getSubTplData">getSubTplData</see> method. Override this template and/or method to create custom
    /// field renderings.</p>
    /// <h1>Example usage:</h1>
    /// <pre><code>// A simple subclass of Base that creates a HTML5 search field. Redirects to the
    /// // searchUrl when the Enter key is pressed.222
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('Ext.form.SearchField', {
    /// extend: '<see cref="Ext.form.field.Base">Ext.form.field.Base</see>',
    /// alias: 'widget.searchfield',
    /// inputType: 'search',
    /// // Config defining the search URL
    /// searchUrl: 'http://www.google.com/search?q={0}',
    /// // Add specialkey listener
    /// initComponent: function() {
    /// this.callParent();
    /// this.on('specialkey', this.checkEnterKey, this);
    /// },
    /// // Handle enter key presses, execute the search if the field has a value
    /// checkEnterKey: function(field, e) {
    /// var value = this.getValue();
    /// if (e.getKey() === e.ENTER &amp;&amp; !<see cref="Ext.ExtContext.isEmpty">Ext.isEmpty</see>(value)) {
    /// location.href = <see cref="Ext.String.format">Ext.String.format</see>(this.searchUrl, value);
    /// }
    /// }
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'Base Example',
    /// bodyPadding: 5,
    /// width: 250,
    /// // Fields will be arranged vertically, stretched to full width
    /// layout: 'anchor',
    /// defaults: {
    /// anchor: '100%'
    /// },
    /// items: [{
    /// xtype: 'searchfield',
    /// fieldLabel: 'Search',
    /// name: 'query'
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Base : Ext.Component, Labelable, Ext.form.field.Field
    {
        /// <summary>
        /// If specified, then the component will be displayed with this value as its active error when first rendered. Use
        /// setActiveError or unsetActiveError to change it after component creation.
        /// </summary>
        public JsString activeError;
        /// <summary>
        /// The template used to format the Array of error messages passed to setActiveErrors into a single HTML
        /// string. By default this renders each message as an item in an unordered list.
        /// Defaults to: <c>[&quot;&lt;tpl if=&quot;errors &amp;&amp; errors.length&quot;&gt;&quot;, &quot;&lt;ul&gt;&lt;tpl for=&quot;errors&quot;&gt;&lt;li&gt;{.}&lt;/li&gt;&lt;/tpl&gt;&lt;/ul&gt;&quot;, &quot;&lt;/tpl&gt;&quot;]</c>
        /// </summary>
        public object activeErrorsTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// at the end of the input containing element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterBodyEl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the label text. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterLabelTextTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the label element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterLabelTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the subTpl markup. If an XTemplate is used, the
        /// component's render data serves as the context.
        /// </summary>
        public object afterSubTpl;
        /// <summary>
        /// Whether to adjust the component's body area to make room for 'side' or 'under' error messages.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoFitErrors;
        /// <summary>
        /// The CSS class to be applied to the body content element.
        /// Defaults to: <c>&quot;x-form-item-body&quot;</c>
        /// </summary>
        public JsString baseBodyCls;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// at the beginning of the input containing element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeBodyEl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the label text. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeLabelTextTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the label element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeLabelTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the subTpl markup. If an XTemplate is used, the
        /// component's render data serves as the context.
        /// </summary>
        public object beforeSubTpl;
        /// <summary>
        /// Defines a timeout in milliseconds for buffering checkChangeEvents that fire in rapid succession.
        /// Defaults to 50 milliseconds.
        /// Defaults to: <c>50</c>
        /// </summary>
        public JsNumber checkChangeBuffer;
        /// <summary>
        /// A list of event names that will be listened for on the field's input element, which will cause
        /// the field's value to be checked for changes. If a change is detected, the change event will be
        /// fired, followed by validation if the validateOnChange option is enabled.
        /// Defaults to ['change', 'propertychange'] in Internet Explorer, and ['change', 'input', 'textInput', 'keyup',
        /// 'dragdrop'] in other browsers. This catches all the ways that field values can be changed in most supported
        /// browsers; the only known exceptions at the time of writing are:
        /// <li>Safari 3.2 and older: cut/paste in textareas via the context menu, and dragging text into textareas</li>
        /// <li>Opera 10 and 11: dragging text into text fields and textareas, and cut via the context menu in text fields
        /// and textareas</li>
        /// <li>Opera 9: Same as Opera 10 and 11, plus paste from context menu in text fields and textareas</li>
        /// If you need to guarantee on-the-fly change notifications including these edge cases, you can call the
        /// <see cref="Ext.form.field.Base.checkChange">checkChange</see> method on a repeating interval, e.g. using <see cref="Ext.TaskManager">Ext.TaskManager</see>, or if the field is within
        /// a <see cref="Ext.form.Panel">Ext.form.Panel</see>, you can use the FormPanel's <see cref="Ext.form.PanelConfig.pollForChanges">Ext.form.Panel.pollForChanges</see> configuration to set up
        /// such a task automatically.
        /// </summary>
        public JsString checkChangeEvents;
        /// <summary>
        /// The CSS class to be applied to the special clearing div rendered directly after the field contents wrapper to
        /// provide field clearing.
        /// Defaults to: <c>&quot;x-clear&quot;</c>
        /// </summary>
        public JsString clearCls;
        /// <summary>
        /// The CSS class to use when the field value is dirty.
        /// Defaults to: <c>&quot;x-form-dirty&quot;</c>
        /// </summary>
        public JsString dirtyCls;
        /// <summary>
        /// The CSS class to be applied to the error message element.
        /// Defaults to: <c>&quot;x-form-error-msg&quot;</c>
        /// </summary>
        public JsString errorMsgCls;
        /// <summary>
        /// An extra CSS class to be applied to the body content element in addition to baseBodyCls.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString fieldBodyCls;
        /// <summary>
        /// The default CSS class for the field input
        /// Defaults to: <c>&quot;x-form-field&quot;</c>
        /// </summary>
        public JsString fieldCls;
        /// <summary>
        /// The label for the field. It gets appended with the labelSeparator, and its position and sizing is
        /// determined by the labelAlign, labelWidth, and labelPad configs.
        /// </summary>
        public JsString fieldLabel;
        /// <summary>
        /// Optional CSS style(s) to be applied to the field input element. Should be a valid argument to
        /// Ext.Element.applyStyles. Defaults to undefined. See also the setFieldStyle method for changing
        /// the style after initialization.
        /// </summary>
        public JsString fieldStyle;
        /// <summary>
        /// The content of the field body is defined by this config option.
        /// Defaults to: <c>[&quot;&lt;input id=&quot;{id}&quot; type=&quot;{type}&quot; {inputAttrTpl}&quot;, &quot; size=&quot;1&quot;&quot;, &quot;&lt;tpl if=&quot;name&quot;&gt; name=&quot;{name}&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;value&quot;&gt; value=&quot;{[Ext.util.Format.htmlEncode(values.value)]}&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;placeholder&quot;&gt; placeholder=&quot;{placeholder}&quot;&lt;/tpl&gt;&quot;, &quot;{%if (values.maxLength !== undefined){%} maxlength=&quot;{maxLength}&quot;{%}%}&quot;, &quot;&lt;tpl if=&quot;readOnly&quot;&gt; readonly=&quot;readonly&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;disabled&quot;&gt; disabled=&quot;disabled&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;tabIdx&quot;&gt; tabIndex=&quot;{tabIdx}&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;fieldStyle&quot;&gt; style=&quot;{fieldStyle}&quot;&lt;/tpl&gt;&quot;, &quot; class=&quot;{fieldCls} {typeCls} {editableCls}&quot; autocomplete=&quot;off&quot;/&gt;&quot;, {disableFormats: true}]</c>
        /// </summary>
        public XTemplate fieldSubTpl;
        /// <summary>
        /// The CSS class to use when the field receives focus
        /// Defaults to: <c>&quot;x-form-focus&quot;</c>
        /// </summary>
        public JsString focusCls;
        /// <summary>
        /// A CSS class to be applied to the outermost element to denote that it is participating in the form field layout.
        /// Defaults to: <c>&quot;x-form-item&quot;</c>
        /// </summary>
        public JsString formItemCls;
        /// <summary>
        /// When set to true, the label element (fieldLabel and labelSeparator) will be automatically
        /// hidden if the fieldLabel is empty. Setting this to false will cause the empty label element to be
        /// rendered and space to be reserved for it; this is useful if you want a field without a label to line up with
        /// other labeled fields in the same form.
        /// If you wish to unconditionall hide the label even if a non-empty fieldLabel is configured, then set the
        /// <see cref="Ext.form.LabelableConfig.hideLabel">hideLabel</see> config to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool hideEmptyLabel;
        /// <summary>
        /// Set to true to completely hide the label element (fieldLabel and labelSeparator). Also see
        /// hideEmptyLabel, which controls whether space will be reserved for an empty fieldLabel.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideLabel;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// inside the input element (as attributes). If an XTemplate is used, the component's
        /// subTpl data serves as the context.
        /// </summary>
        public object inputAttrTpl;
        /// <summary>
        /// The id that will be given to the generated input DOM element. Defaults to an automatically generated id. If you
        /// configure this manually, you must make sure it is unique in the document.
        /// </summary>
        public JsString inputId;
        /// <summary>
        /// The type attribute for input fields -- e.g. radio, text, password, file. The extended types
        /// supported by HTML5 inputs (url, email, etc.) may also be used, though using them will cause older browsers to
        /// fall back to 'text'.
        /// The type 'password' must be used to render that field type currently -- there is no separate Ext component for
        /// that. You can use <see cref="Ext.form.field.File">Ext.form.field.File</see> which creates a custom-rendered file upload field, but if you want
        /// a plain unstyled file input you can use a Base with inputType:'file'.
        /// Defaults to: <c>&quot;text&quot;</c>
        /// </summary>
        public JsString inputType;
        /// <summary>
        /// The CSS class to use when marking the component invalid.
        /// Defaults to: <c>&quot;x-form-invalid&quot;</c>
        /// </summary>
        public JsString invalidCls;
        /// <summary>
        /// The error text to use when marking a field invalid and no message is provided
        /// Defaults to: <c>&quot;The value in this field is invalid&quot;</c>
        /// </summary>
        public JsString invalidText;
        /// <summary>
        /// Controls the position and alignment of the fieldLabel. Valid values are:
        /// <li>"left" (the default) - The label is positioned to the left of the field, with its text aligned to the left.
        /// Its width is determined by the <see cref="Ext.form.LabelableConfig.labelWidth">labelWidth</see> config.</li>
        /// <li>"top" - The label is positioned above the field.</li>
        /// <li>"right" - The label is positioned to the left of the field, with its text aligned to the right.
        /// Its width is determined by the <see cref="Ext.form.LabelableConfig.labelWidth">labelWidth</see> config.</li>
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString labelAlign;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// inside the label element (as attributes). If an XTemplate is used, the component's
        /// render data serves as the context.
        /// </summary>
        public object labelAttrTpl;
        /// <summary>
        /// The CSS class to be applied to the label element. This (single) CSS class is used to formulate the renderSelector
        /// and drives the field layout where it is concatenated with a hyphen ('-') and labelAlign. To add
        /// additional classes, use labelClsExtra.
        /// Defaults to: <c>&quot;x-form-item-label&quot;</c>
        /// </summary>
        public JsString labelCls;
        /// <summary>
        /// An optional string of one or more additional CSS classes to add to the label element. Defaults to empty.
        /// </summary>
        public JsString labelClsExtra;
        /// <summary>
        /// The amount of space in pixels between the fieldLabel and the input field.
        /// Defaults to: <c>5</c>
        /// </summary>
        public JsNumber labelPad;
        /// <summary>
        /// Character(s) to be inserted at the end of the label text.
        /// Set to empty string to hide the separator completely.
        /// Defaults to: <c>&quot;:&quot;</c>
        /// </summary>
        public JsString labelSeparator;
        /// <summary>
        /// A CSS style specification string to apply directly to this field's label.
        /// </summary>
        public JsString labelStyle;
        /// <summary>
        /// The width of the fieldLabel in pixels. Only applicable if the labelAlign is set to "left" or
        /// "right".
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber labelWidth;
        /// <summary>
        /// The rendering template for the field decorations. Component classes using this mixin
        /// should include logic to use this as their renderTpl,
        /// and implement the getSubTplMarkup method to generate the field body content.
        /// The structure of a field is a table as follows:
        /// If <c>labelAlign: 'left',</c>msgTarget: 'side'`
        /// <code> +----------------------+----------------------+-------------+
        /// | Label:               | InputField           | sideErrorEl |
        /// +----------------------+----------------------+-------------+
        /// </code>
        /// If <c>labelAlign: 'left',</c>msgTarget: 'under'`
        /// <code> +----------------------+------------------------------------+
        /// | Label:               | InputField      (colspan=2)        |
        /// |                      | underErrorEl                       |
        /// +----------------------+------------------------------------+
        /// </code>
        /// If <c>labelAlign: 'top',</c>msgTarget: 'side'`
        /// <code> +---------------------------------------------+-------------+
        /// | label                                       |             |
        /// | InputField                                  | sideErrorEl |
        /// +---------------------------------------------+-------------+
        /// </code>
        /// If <c>labelAlign: 'top',</c>msgTarget: 'under'`
        /// <code> +-----------------------------------------------------------+
        /// | label                                                     |
        /// | InputField                      (colspan=2)               |
        /// | underErrorEl                                              |
        /// +-----------------------------------------------------------+
        /// </code>
        /// The total columns always the same for fields with each setting of <see cref="Ext.form.LabelableConfig.labelAlign">labelAlign</see> because when
        /// rendered into a <see cref="Ext.layout.container.Form">Ext.layout.container.Form</see> layout, just the <c>TR</c> of the table
        /// will be placed into the form's main <c>TABLE</c>, and the columns of all the siblings
        /// must match so that they all line up. In a <see cref="Ext.layout.container.Form">Ext.layout.container.Form</see> layout, different
        /// settings of <see cref="Ext.form.LabelableConfig.labelAlign">labelAlign</see> are not supported because of the incompatible column structure.
        /// When the triggerCell or side error cell are hidden or shown, the input cell's colspan
        /// is recalculated to maintain the correct 3 visible column count.
        /// Defaults to: <c>[&quot;&lt;tr id=&quot;{id}-inputRow&quot; &lt;tpl if=&quot;inFormLayout&quot;&gt;id=&quot;{id}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;&lt;tpl if=&quot;labelOnLeft&quot;&gt;&quot;, &quot;&lt;td id=&quot;{id}-labelCell&quot; style=&quot;{labelCellStyle}&quot; {labelCellAttrs}&gt;&quot;, &quot;{beforeLabelTpl}&quot;, &quot;&lt;label id=&quot;{id}-labelEl&quot; {labelAttrTpl}&lt;tpl if=&quot;inputId&quot;&gt; for=&quot;{inputId}&quot;&lt;/tpl&gt; class=&quot;{labelCls}&quot;&quot;, &quot;&lt;tpl if=&quot;labelStyle&quot;&gt; style=&quot;{labelStyle}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;{beforeLabelTextTpl}&quot;, &quot;&lt;tpl if=&quot;fieldLabel&quot;&gt;{fieldLabel}{labelSeparator}&lt;/tpl&gt;&quot;, &quot;{afterLabelTextTpl}&quot;, &quot;&lt;/label&gt;&quot;, &quot;{afterLabelTpl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;&lt;td class=&quot;{baseBodyCls} {fieldBodyCls}&quot; id=&quot;{id}-bodyEl&quot; colspan=&quot;{bodyColspan}&quot; role=&quot;presentation&quot;&gt;&quot;, &quot;{beforeBodyEl}&quot;, &quot;&lt;tpl if=&quot;labelAlign==\'top\'&quot;&gt;&quot;, &quot;{beforeLabelTpl}&quot;, &quot;&lt;div id=&quot;{id}-labelCell&quot; style=&quot;{labelCellStyle}&quot;&gt;&quot;, &quot;&lt;label id=&quot;{id}-labelEl&quot; {labelAttrTpl}&lt;tpl if=&quot;inputId&quot;&gt; for=&quot;{inputId}&quot;&lt;/tpl&gt; class=&quot;{labelCls}&quot;&quot;, &quot;&lt;tpl if=&quot;labelStyle&quot;&gt; style=&quot;{labelStyle}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;{beforeLabelTextTpl}&quot;, &quot;&lt;tpl if=&quot;fieldLabel&quot;&gt;{fieldLabel}{labelSeparator}&lt;/tpl&gt;&quot;, &quot;{afterLabelTextTpl}&quot;, &quot;&lt;/label&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;{afterLabelTpl}&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;{beforeSubTpl}&quot;, &quot;{[values.$comp.getSubTplMarkup()]}&quot;, &quot;{afterSubTpl}&quot;, &quot;&lt;tpl if=&quot;msgTarget===\'side\'&quot;&gt;&quot;, &quot;{afterBodyEl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;td id=&quot;{id}-sideErrorCell&quot; vAlign=&quot;{[values.labelAlign===\'top\' &amp;&amp; !values.hideLabel ? \'bottom\' : \'middle\']}&quot; style=&quot;{[values.autoFitErrors ? \'display:none\' : \'\']}&quot; width=&quot;{errorIconWidth}&quot;&gt;&quot;, &quot;&lt;div id=&quot;{id}-errorEl&quot; class=&quot;{errorMsgCls}&quot; style=&quot;display:none;width:{errorIconWidth}px&quot;&gt;&lt;/div&gt;&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;tpl elseif=&quot;msgTarget==\'under\'&quot;&gt;&quot;, &quot;&lt;div id=&quot;{id}-errorEl&quot; class=&quot;{errorMsgClass}&quot; colspan=&quot;2&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;&quot;, &quot;{afterBodyEl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;&lt;/tr&gt;&quot;, {disableFormats: true}]</c>
        /// </summary>
        public object labelableRenderTpl;
        /// <summary>
        /// The location where the error message text should display. Must be one of the following values:
        /// <li><p><c>qtip</c> Display a quick tip containing the message when the user hovers over the field.
        /// This is the default.</p>
        /// <p><strong><see cref="Ext.tip.QuickTipManager.init">Ext.tip.QuickTipManager.init</see> must have been called for this setting to work.</strong></p></li>
        /// <li><p><c>title</c> Display the message in a default browser title attribute popup.</p></li>
        /// <li><c>under</c> Add a block div beneath the field containing the error message.</li>
        /// <li><c>side</c> Add an error icon to the right of the field, displaying the message in a popup on hover.</li>
        /// <li><c>none</c> Don't display any error message. This might be useful if you are implementing custom error display.</li>
        /// <li><c>[element id]</c> Add the error message directly to the innerHTML of the specified element.</li>
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString msgTarget;
        /// <summary>
        /// The name of the field. This is used as the parameter name when including the field value
        /// in a form submit(). If no name is configured, it falls back to the inputId.
        /// To prevent the field from being included in the form submit, set submitValue to false.
        /// Overrides: <see cref="Ext.form.field.FieldConfig.name">Ext.form.field.Field.name</see>
        /// </summary>
        public JsString name;
        /// <summary>
        /// true to disable displaying any error message set on this object.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool preventMark;
        /// <summary>
        /// true to mark the field as readOnly in HTML.
        /// <strong>Note</strong>: this only sets the element's readOnly DOM attribute. Setting <c>readOnly=true</c>, for example, will not
        /// disable triggering a ComboBox or Date; it gives you the option of forcing the user to choose via the trigger
        /// without typing in the text box. To hide the trigger use <c><see cref="Ext.form.field.TriggerConfig.hideTrigger">hideTrigger</see></c>.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool readOnly;
        /// <summary>
        /// The CSS class applied to the component's main element when it is readOnly.
        /// Defaults to: <c>&quot;x-form-readonly&quot;</c>
        /// </summary>
        public JsString readOnlyCls;
        /// <summary>
        /// Setting this to false will prevent the field from being submitted even when it is
        /// not disabled.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool submitValue;
        /// <summary>
        /// The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via
        /// applyTo
        /// </summary>
        public JsNumber tabIndex;
        /// <summary>
        /// Whether the field should validate when it loses focus. This will cause fields to be validated
        /// as the user steps through the fields in the form regardless of whether they are making changes to those fields
        /// along the way. See also validateOnChange.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool validateOnBlur;
        /// <summary>
        /// Specifies whether this field should be validated immediately whenever a change in its value is detected.
        /// If the validation results in a change in the field's validity, a validitychange event will be
        /// fired. This allows the field to show feedback about the validity of its contents immediately as the user is
        /// typing.
        /// When set to false, feedback will not be immediate. However the form will still be validated before submitting if
        /// the clientValidation option to <see cref="Ext.form.Basic.doAction">Ext.form.Basic.doAction</see> is enabled, or if the field or form are validated
        /// manually.
        /// See also <see cref="Ext.form.field.BaseConfig.checkChangeEvents">Ext.form.field.Base.checkChangeEvents</see> for controlling how changes to the field's value are
        /// detected.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool validateOnChange;
        /// <summary>
        /// A value to initialize this field with.
        /// </summary>
        public JsObject value;
        /// <summary>
        /// The div Element wrapping the component's contents. Only available after the component has been rendered.
        /// </summary>
        public Ext.dom.Element bodyEl{get;set;}
        /// <summary>
        /// The div Element that will contain the component's error message(s). Note that depending on the configured
        /// msgTarget, this element may be hidden in favor of some other form of presentation, but will always
        /// be present in the DOM for use by assistive technologies.
        /// </summary>
        public Ext.dom.Element errorEl{get;set;}
        /// <summary>
        /// The input Element for this Field. Only available after the field has been rendered.
        /// </summary>
        public Ext.dom.Element inputEl{get;set;}
        /// <summary>
        /// Flag denoting that this object is labelable as a field. Always true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isFieldLabelable{get;set;}
        /// <summary>
        /// Flag denoting that this component is a Field. Always true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isFormField{get;set;}
        /// <summary>
        /// The &lt;TD&gt; Element which contains the label Element for this component. Only available after the component has been rendered.
        /// </summary>
        public Ext.dom.Element labelCell{get;set;}
        /// <summary>
        /// The label Element for this component. Only available after the component has been rendered.
        /// </summary>
        public Ext.dom.Element labelEl{get;set;}
        /// <summary>
        /// Tells the layout system that the height can be measured immediately because the width does not need setting.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool noWrap{get;set;}
        /// <summary>
        /// The original value of the field as configured in the value configuration, or as loaded by the last
        /// form load operation if the form's trackResetOnLoad setting is true.
        /// </summary>
        public JsObject originalValue{get;set;}
        /// <summary>
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber suspendCheckChange{get;set;}
        /// <summary>
        /// A utility for grouping a set of modifications which may trigger value changes into a single transaction, to
        /// prevent excessive firing of change events. This is useful for instance if the field has sub-fields which
        /// are being updated as a group; you don't want the container field to check its own changed state for each subfield
        /// change.
        /// </summary>
        /// <param name="fn"><p>A function containing the transaction code</p>
        /// </param>
        public virtual void batchChanges(System.Delegate fn){}
        /// <summary>
        /// Template method before a field is reset.
        /// </summary>
        public virtual void beforeReset(){}
        /// <summary>
        /// Checks whether the value of the field has changed since the last time it was checked.
        /// If the value has changed, it:
        /// <li>Fires the <see cref="Ext.form.field.FieldEvents.change">change event</see>,</li>
        /// <li>Performs validation if the <see cref="Ext.form.field.FieldConfig.validateOnChange">validateOnChange</see> config is enabled, firing the
        /// <see cref="Ext.form.field.FieldEvents.validitychange">validitychange event</see> if the validity has changed, and</li>
        /// <li>Checks the <see cref="Ext.form.field.Field.isDirty">dirty state</see> of the field and fires the <see cref="Ext.form.field.FieldEvents.dirtychange">dirtychange event</see>
        /// if it has changed.</li>
        /// </summary>
        public virtual void checkChange(){}
        /// <summary>
        /// Checks the isDirty state of the field and if it has changed since the last time it was checked,
        /// fires the dirtychange event.
        /// </summary>
        public virtual void checkDirty(){}
        /// <summary>
        /// Clear any invalid styles/messages for this field.
        /// <strong>Note</strong>: this method does not cause the Field's <see cref="Ext.form.field.Base.validate">validate</see> or <see cref="Ext.form.field.Base.isValid">isValid</see> methods to return <c>true</c>
        /// if the value does not <em>pass</em> validation. So simply clearing a field's errors will not necessarily allow
        /// submission of forms submitted with the <see cref="Ext.form.action.SubmitConfig.clientValidation">Ext.form.action.Submit.clientValidation</see> option set.
        /// Overrides: <see cref="Ext.form.field.Field.clearInvalid">Ext.form.field.Field.clearInvalid</see>
        /// </summary>
        public virtual void clearInvalid(){}
        /// <summary>
        /// Only relevant if the instance's isFileUpload method returns true. Returns a reference to the file input
        /// DOM element holding the user's selected file. The input will be appended into the submission form and will not be
        /// returned, so this method should also create a replacement.
        /// </summary>
        /// <returns>
        /// <span>HTMLElement</span><div>
        /// </div>
        /// </returns>
        public virtual JsObject extractFileInput(){return null;}
        /// <summary>
        /// Gets the active error message for this component, if any. This does not trigger validation on its own, it merely
        /// returns any message that the component may already hold.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The active error message on the component; if there is no error, an empty string is returned.</p>
        /// </div>
        /// </returns>
        public virtual JsString getActiveError(){return null;}
        /// <summary>
        /// Gets an Array of any active error messages currently applied to the field. This does not trigger validation on
        /// its own, it merely returns any messages that the component may already hold.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see>[]</span><div><p>The active error messages on the component; if there are no errors, an empty Array is
        /// returned.</p>
        /// </div>
        /// </returns>
        public virtual JsString[] getActiveErrors(){return null;}
        /// <summary>
        /// Calculates the colspan value for the body cell - the cell which contains the input field.
        /// The field table structure contains 4 columns:
        /// </summary>
        public virtual void getBodyColspan(){}
        /// <summary>
        /// Runs this field's validators and returns an array of error messages for any validation failures. This is called
        /// internally during validation and would not usually need to be used manually.
        /// Each subclass should override or augment the return value to provide their own errors.
        /// </summary>
        /// <param name="value"><p>The value to get errors for (defaults to the current field value)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see>[]</span><div><p>All error messages for this field; an empty Array if none.</p>
        /// </div>
        /// </returns>
        public virtual JsString[] getErrors(object value=null){return null;}
        /// <summary>
        /// Returns the label for the field. Defaults to simply returning the fieldLabel config. Can be overridden
        /// to provide a custom generated label.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The configured field label, or empty string if not defined</p>
        /// </div>
        /// </returns>
        public virtual JsString getFieldLabel(){return null;}
        /// <summary>
        /// Returns the input id for this field. If none was specified via the inputId config, then an id will be
        /// automatically generated.
        /// Overrides: <see cref="Ext.form.Labelable.getInputId">Ext.form.Labelable.getInputId</see>
        /// </summary>
        public virtual JsString getInputId(){return null;}
        /// <summary>
        /// Gets any label styling for the labelEl
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The label styling</p>
        /// </div>
        /// </returns>
        public virtual JsString getLabelStyle(){return null;}
        /// <summary>
        /// Generates the arguments for the field decorations rendering template.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The template arguments</p>
        /// </div>
        /// </returns>
        public virtual object getLabelableRenderData(){return null;}
        /// <summary>
        /// Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when Ext.form.Basic.updateRecord is called. Typically this will be an object with a single name-value pair, the name
        /// being this field's name and the value being its current data value. More advanced field
        /// implementations may return more than one name-value pair. The returned values will be saved to the corresponding
        /// field names in the Model.
        /// Note that the values returned from this method are not guaranteed to have been successfully <see cref="Ext.form.field.Field.validate">validated</see>.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>A mapping of submit parameter names to values; each value should be a string, or an array of
        /// strings if that particular name has multiple values. It can also return null if there are no parameters to be
        /// submitted.</p>
        /// </div>
        /// </returns>
        public virtual object getModelData(){return null;}
        /// <summary>
        /// Returns the name attribute of the field. This is used as the parameter name
        /// when including the field value in a form submit().
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>name The field <see cref="Ext.form.field.FieldConfig.name">name</see></p>
        /// </div>
        /// </returns>
        public virtual JsString getName(){return null;}
        /// <summary>
        /// Returns the raw value of the field, without performing any normalization, conversion, or validation. To get a
        /// normalized and converted value see getValue.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>value The raw String value of the field</p>
        /// </div>
        /// </returns>
        public JsString getRawValue(){return null;}
        /// <summary>
        /// Creates and returns the data object to be used when rendering the fieldSubTpl.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The template data</p>
        /// </div>
        /// </returns>
        public virtual object getSubTplData(){return null;}
        /// <summary>
        /// Gets the markup to be inserted into the outer template's bodyEl. For fields this is the actual input element.
        /// Overrides: <see cref="Ext.form.Labelable.getSubTplMarkup">Ext.form.Labelable.getSubTplMarkup</see>
        /// </summary>
        public virtual JsString getSubTplMarkup(){return null;}
        /// <summary>
        /// Returns the parameter(s) that would be included in a standard form submit for this field. Typically this will be
        /// an object with a single name-value pair, the name being this field's name and the value being
        /// its current stringified value. More advanced field implementations may return more than one name-value pair.
        /// Note that the values returned from this method are not guaranteed to have been successfully <see cref="Ext.form.field.Field.validate">validated</see>.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>A mapping of submit parameter names to values; each value should be a string, or an array of
        /// strings if that particular name has multiple values. It can also return null if there are no parameters to be
        /// submitted.</p>
        /// </div>
        /// </returns>
        public virtual object getSubmitData(){return null;}
        /// <summary>
        /// Returns the value that would be included in a standard form submit for this field. This will be combined with the
        /// field's name to form a name=value pair in the submitted parameters. If an empty string is
        /// returned then just the name= will be submitted; if null is returned then nothing will be submitted.
        /// Note that the value returned will have been <see cref="Ext.form.field.Base.processRawValue">processed</see> but may or may not have been
        /// successfully <see cref="Ext.form.field.Base.validate">validated</see>.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The value to be submitted, or null.</p>
        /// </div>
        /// </returns>
        public JsString getSubmitValue(){return null;}
        /// <summary>
        /// Returns the current data value of the field. The type of value returned is particular to the type of the
        /// particular field (e.g. a Date object for Ext.form.field.Date), as the result of calling rawToValue on
        /// the field's processed String value. To return the raw String value, see getRawValue.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>value The field value</p>
        /// </div>
        /// </returns>
        public virtual object getValue(){return null;}
        /// <summary>
        /// Tells whether the field currently has an active error message. This does not trigger validation on its own, it
        /// merely looks for any message that the component may already hold.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public virtual bool hasActiveError(){return false;}
        /// <summary>
        /// Checks if the field has a visible label
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the field has a visible label</p>
        /// </div>
        /// </returns>
        public virtual bool hasVisibleLabel(){return false;}
        /// <summary>
        /// Initializes this Field mixin on the current instance. Components using this mixin should call this method during
        /// their own initialization process.
        /// </summary>
        public virtual void initField(){}
        /// <summary>
        /// Performs initialization of this mixin. Component classes using this mixin should call this method during their
        /// own initialization.
        /// </summary>
        public virtual void initLabelable(){}
        /// <summary>
        /// Initializes the field's value based on the initial config.
        /// </summary>
        public virtual void initValue(){}
        /// <summary>
        /// Returns true if the value of this Field has been changed from its originalValue.
        /// Will always return false if the field is disabled.
        /// Note that if the owning <see cref="Ext.form.Basic">form</see> was configured with
        /// <see cref="Ext.form.BasicConfig.trackResetOnLoad">trackResetOnLoad</see> then the <see cref="Ext.form.field.Field.originalValue">originalValue</see> is updated when
        /// the values are loaded by <see cref="Ext.form.Basic">Ext.form.Basic</see>.<see cref="Ext.form.Basic.setValues">setValues</see>.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if this field has been changed from its original value (and is not disabled),
        /// false otherwise.</p>
        /// </div>
        /// </returns>
        public virtual bool isDirty(){return false;}
        /// <summary>
        /// Returns whether two field values are logically equal. Field implementations may override this
        /// to provide custom comparison logic appropriate for the particular field's data type.
        /// </summary>
        /// <param name="value1"><p>The first value to compare</p>
        /// </param>
        /// <param name="value2"><p>The second value to compare</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the values are equal, false if inequal.</p>
        /// </div>
        /// </returns>
        public virtual bool isEqual(object value1, object value2){return false;}
        /// <summary>
        /// Returns whether two values are logically equal.
        /// Similar to isEqual, however null or undefined values will be treated as empty strings.
        /// </summary>
        /// <param name="value1"><p>The first value to compare</p>
        /// </param>
        /// <param name="value2"><p>The second value to compare</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the values are equal, false if inequal.</p>
        /// </div>
        /// </returns>
        public virtual bool isEqualAsString(object value1, object value2){return false;}
        /// <summary>
        /// Returns whether this Field is a file upload field; if it returns true, forms will use special techniques for
        /// submitting the form via AJAX. See Ext.form.Basic.hasUpload for details. If
        /// this returns true, the extractFileInput method must also be implemented to return the corresponding file
        /// input element.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public virtual bool isFileUpload(){return false;}
        /// <summary>
        /// Returns whether or not the field value is currently valid by validating the
        /// processed raw value of the field. Note: disabled fields are
        /// always treated as valid.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the value is valid, else false</p>
        /// </div>
        /// </returns>
        public virtual bool isValid(){return false;}
        /// <summary>
        /// Display one or more error messages associated with this field, using msgTarget to determine how to
        /// display the messages and applying invalidCls to the field's UI element.
        /// <strong>Note</strong>: this method does not cause the Field's <see cref="Ext.form.field.Base.validate">validate</see> or <see cref="Ext.form.field.Base.isValid">isValid</see> methods to return <c>false</c>
        /// if the value does <em>pass</em> validation. So simply marking a Field as invalid will not prevent submission of forms
        /// submitted with the <see cref="Ext.form.action.SubmitConfig.clientValidation">Ext.form.action.Submit.clientValidation</see> option set.
        /// </summary>
        /// <param name="errors"><p>The validation message(s) to display.</p>
        /// </param>
        public virtual void markInvalid(object errors){}
        /// <summary>
        /// Called when the field's value changes. Performs validation if the validateOnChange
        /// config is enabled, and invokes the dirty check.
        /// </summary>
        /// <param name="newVal">
        /// </param>
        /// <param name="oldVal">
        /// </param>
        public virtual void onChange(object newVal, object oldVal){}
        /// <summary>
        /// Called when the field's dirty state changes. Adds/removes the dirtyCls on the main element.
        /// </summary>
        /// <param name="isDirty">
        /// </param>
        public virtual void onDirtyChange(bool isDirty){}
        /// <summary>
        /// Performs any necessary manipulation of a raw field value to prepare it for conversion and/or
        /// validation, for instance stripping out ignored characters. In the base implementation it does
        /// nothing; individual subclasses may override this as needed.
        /// </summary>
        /// <param name="value"><p>The unprocessed string value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The processed string value</p>
        /// </div>
        /// </returns>
        public object processRawValue(object value){return null;}
        /// <summary>
        /// Converts a raw input field value into a mixed-type value that is suitable for this particular field type. This
        /// allows controlling the normalization and conversion of user-entered values into field-type-appropriate values,
        /// e.g. a Date object for Ext.form.field.Date, and is invoked by getValue.
        /// It is up to individual implementations to decide how to handle raw values that cannot be successfully converted
        /// to the desired object type.
        /// See <see cref="Ext.form.field.Base.valueToRaw">valueToRaw</see> for the opposite conversion.
        /// The base implementation does no conversion, returning the raw value untouched.
        /// </summary>
        /// <param name="rawValue">
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The converted value.</p>
        /// </div>
        /// </returns>
        public object rawToValue(object rawValue){return null;}
        /// <summary>
        /// Overrides the method from the Ext.form.Labelable mixin to also add the invalidCls to the inputEl,
        /// as that is required for proper styling in IE with nested fields (due to lack of child selector)
        /// Overrides: <see cref="Ext.form.Labelable.renderActiveError">Ext.form.Labelable.renderActiveError</see>
        /// </summary>
        public virtual void renderActiveError(){}
        /// <summary>
        /// Resets the current field value to the originally loaded value and clears any validation messages. See Ext.form.Basic.trackResetOnLoad
        /// </summary>
        public virtual void reset(){}
        /// <summary>
        /// Resets the field's originalValue property so it matches the current value. This is
        /// called by Ext.form.Basic.setValues if the form's
        /// trackResetOnLoad property is set to true.
        /// </summary>
        public virtual void resetOriginalValue(){}
        /// <summary>
        /// Sets the active error message to the given string. This replaces the entire error message contents with the given
        /// string. Also see setActiveErrors which accepts an Array of messages and formats them according to the
        /// activeErrorsTpl. Note that this only updates the error message element's text and attributes, you'll
        /// have to call doComponentLayout to actually update the field's layout to match. If the field extends Ext.form.field.Base you should call markInvalid instead.
        /// </summary>
        /// <param name="msg"><p>The error message</p>
        /// </param>
        public virtual void setActiveError(JsString msg){}
        /// <summary>
        /// Set the active error message to an Array of error messages. The messages are formatted into a single message
        /// string using the activeErrorsTpl. Also see setActiveError which allows setting the entire error
        /// contents with a single string. Note that this only updates the error message element's text and attributes,
        /// you'll have to call doComponentLayout to actually update the field's layout to match. If the field extends
        /// Ext.form.field.Base you should call markInvalid instead.
        /// </summary>
        /// <param name="errors"><p>The error messages</p>
        /// </param>
        public virtual void setActiveErrors(JsArray<String> errors){}
        /// <summary>
        /// Applies a set of default configuration values to this Labelable instance. For each of the properties in the given
        /// object, check if this component hasOwnProperty that config; if not then it's inheriting a default value from its
        /// prototype and we should apply the default value.
        /// </summary>
        /// <param name="defaults"><p>The defaults to apply to the object.</p>
        /// </param>
        public virtual void setFieldDefaults(object defaults){}
        /// <summary>
        /// Set the label of this field.
        /// </summary>
        /// <param name="label"><p>The new label. The <see cref="Ext.form.LabelableConfig.labelSeparator">labelSeparator</see> will be automatically appended to the label
        /// string.</p>
        /// </param>
        public virtual void setFieldLabel(JsString label){}
        /// <summary>
        /// Set the CSS style of the field input element.
        /// </summary>
        /// <param name="style"><p>The style(s) to apply. Should be a valid argument to <see cref="Ext.dom.Element.applyStyles">Ext.Element.applyStyles</see>.</p>
        /// </param>
        public void setFieldStyle(object style){}
        /// <summary>
        /// Sets the field's raw value directly, bypassing value conversion, change detection, and
        /// validation. To set the value with these additional inspections see setValue.
        /// </summary>
        /// <param name="value"><p>The value to set</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>value The field value that is set</p>
        /// </div>
        /// </returns>
        public object setRawValue(object value){return null;}
        /// <summary>
        /// Sets the read only state of this field.
        /// </summary>
        /// <param name="readOnly"><p>Whether the field should be read only.</p>
        /// </param>
        public void setReadOnly(bool readOnly){}
        /// <summary>
        /// Sets a data value into the field and runs the change detection and validation. To set the value directly
        /// without these inspections see setRawValue.
        /// </summary>
        /// <param name="value"><p>The value to set</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.field.Field">Ext.form.field.Field</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public virtual Ext.form.field.Field setValue(object value){return null;}
        /// <summary>
        /// Allows for any necessary modifications before the original
        /// value is set
        /// </summary>
        /// <param name="value"><p>The initial value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The modified initial value</p>
        /// </div>
        /// </returns>
        public virtual object transformOriginalValue(object value){return null;}
        /// <summary>
        /// Transform the raw value before it is set
        /// </summary>
        /// <param name="value"><p>The value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The value to set</p>
        /// </div>
        /// </returns>
        protected object transformRawValue(object value){return null;}
        /// <summary>
        /// Returns the trimmed label by slicing off the label separator character. Can be overridden.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The trimmed field label, or empty string if not defined</p>
        /// </div>
        /// </returns>
        public virtual JsString trimLabelSeparator(){return null;}
        /// <summary>
        /// Clears the active error message(s). Note that this only clears the error message element's text and attributes,
        /// you'll have to call doComponentLayout to actually update the field's layout to match. If the field extends Ext.form.field.Base you should call clearInvalid instead.
        /// </summary>
        public virtual void unsetActiveError(){}
        /// <summary>
        /// Returns whether or not the field value is currently valid by validating the field's current
        /// value, and fires the validitychange event if the field's validity has changed since the last validation.
        /// Note: disabled fields are always treated as valid.
        /// Custom implementations of this method are allowed to have side-effects such as triggering error message display.
        /// To validate without side-effects, use <see cref="Ext.form.field.Field.isValid">isValid</see>.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the value is valid, else false</p>
        /// </div>
        /// </returns>
        public virtual bool validate(){return false;}
        /// <summary>
        /// Uses getErrors to build an array of validation errors. If any errors are found, they are passed to
        /// markInvalid and false is returned, otherwise true is returned.
        /// Previously, subclasses were invited to provide an implementation of this to process validations - from 3.2
        /// onwards <see cref="Ext.form.field.Base.getErrors">getErrors</see> should be overridden instead.
        /// </summary>
        /// <param name="value"><p>The value to validate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if all validations passed, false if one or more failed</p>
        /// </div>
        /// </returns>
        public bool validateValue(object value){return false;}
        /// <summary>
        /// Converts a mixed-type value to a raw representation suitable for displaying in the field. This allows controlling
        /// how value objects passed to setValue are shown to the user, including localization. For instance, for a
        /// Ext.form.field.Date, this would control how a Date object passed to setValue would be converted
        /// to a String for display in the field.
        /// See <see cref="Ext.form.field.Base.rawToValue">rawToValue</see> for the opposite conversion.
        /// The base implementation simply does a standard toString conversion, and converts <see cref="Ext.ExtContext.isEmpty">empty values</see>
        /// to an empty string.
        /// </summary>
        /// <param name="value"><p>The mixed-type value to convert to the raw representation.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The converted raw value.</p>
        /// </div>
        /// </returns>
        public object valueToRaw(object value){return null;}
        public Base(Ext.form.field.BaseConfig config){}
        public Base(){}
        public Base(params object[] args){}
    }
    #endregion
    #region BaseConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BaseConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// If specified, then the component will be displayed with this value as its active error when first rendered. Use
        /// setActiveError or unsetActiveError to change it after component creation.
        /// </summary>
        public JsString activeError;
        /// <summary>
        /// The template used to format the Array of error messages passed to setActiveErrors into a single HTML
        /// string. By default this renders each message as an item in an unordered list.
        /// Defaults to: <c>[&quot;&lt;tpl if=&quot;errors &amp;&amp; errors.length&quot;&gt;&quot;, &quot;&lt;ul&gt;&lt;tpl for=&quot;errors&quot;&gt;&lt;li&gt;{.}&lt;/li&gt;&lt;/tpl&gt;&lt;/ul&gt;&quot;, &quot;&lt;/tpl&gt;&quot;]</c>
        /// </summary>
        public object activeErrorsTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// at the end of the input containing element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterBodyEl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the label text. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterLabelTextTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the label element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterLabelTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the subTpl markup. If an XTemplate is used, the
        /// component's render data serves as the context.
        /// </summary>
        public object afterSubTpl;
        /// <summary>
        /// Whether to adjust the component's body area to make room for 'side' or 'under' error messages.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoFitErrors;
        /// <summary>
        /// The CSS class to be applied to the body content element.
        /// Defaults to: <c>&quot;x-form-item-body&quot;</c>
        /// </summary>
        public JsString baseBodyCls;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// at the beginning of the input containing element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeBodyEl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the label text. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeLabelTextTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the label element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeLabelTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the subTpl markup. If an XTemplate is used, the
        /// component's render data serves as the context.
        /// </summary>
        public object beforeSubTpl;
        /// <summary>
        /// Defines a timeout in milliseconds for buffering checkChangeEvents that fire in rapid succession.
        /// Defaults to 50 milliseconds.
        /// Defaults to: <c>50</c>
        /// </summary>
        public JsNumber checkChangeBuffer;
        /// <summary>
        /// A list of event names that will be listened for on the field's input element, which will cause
        /// the field's value to be checked for changes. If a change is detected, the change event will be
        /// fired, followed by validation if the validateOnChange option is enabled.
        /// Defaults to ['change', 'propertychange'] in Internet Explorer, and ['change', 'input', 'textInput', 'keyup',
        /// 'dragdrop'] in other browsers. This catches all the ways that field values can be changed in most supported
        /// browsers; the only known exceptions at the time of writing are:
        /// <li>Safari 3.2 and older: cut/paste in textareas via the context menu, and dragging text into textareas</li>
        /// <li>Opera 10 and 11: dragging text into text fields and textareas, and cut via the context menu in text fields
        /// and textareas</li>
        /// <li>Opera 9: Same as Opera 10 and 11, plus paste from context menu in text fields and textareas</li>
        /// If you need to guarantee on-the-fly change notifications including these edge cases, you can call the
        /// <see cref="Ext.form.field.Base.checkChange">checkChange</see> method on a repeating interval, e.g. using <see cref="Ext.TaskManager">Ext.TaskManager</see>, or if the field is within
        /// a <see cref="Ext.form.Panel">Ext.form.Panel</see>, you can use the FormPanel's <see cref="Ext.form.PanelConfig.pollForChanges">Ext.form.Panel.pollForChanges</see> configuration to set up
        /// such a task automatically.
        /// </summary>
        public JsString checkChangeEvents;
        /// <summary>
        /// The CSS class to be applied to the special clearing div rendered directly after the field contents wrapper to
        /// provide field clearing.
        /// Defaults to: <c>&quot;x-clear&quot;</c>
        /// </summary>
        public JsString clearCls;
        /// <summary>
        /// The CSS class to use when the field value is dirty.
        /// Defaults to: <c>&quot;x-form-dirty&quot;</c>
        /// </summary>
        public JsString dirtyCls;
        /// <summary>
        /// The CSS class to be applied to the error message element.
        /// Defaults to: <c>&quot;x-form-error-msg&quot;</c>
        /// </summary>
        public JsString errorMsgCls;
        /// <summary>
        /// An extra CSS class to be applied to the body content element in addition to baseBodyCls.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString fieldBodyCls;
        /// <summary>
        /// The default CSS class for the field input
        /// Defaults to: <c>&quot;x-form-field&quot;</c>
        /// </summary>
        public JsString fieldCls;
        /// <summary>
        /// The label for the field. It gets appended with the labelSeparator, and its position and sizing is
        /// determined by the labelAlign, labelWidth, and labelPad configs.
        /// </summary>
        public JsString fieldLabel;
        /// <summary>
        /// Optional CSS style(s) to be applied to the field input element. Should be a valid argument to
        /// Ext.Element.applyStyles. Defaults to undefined. See also the setFieldStyle method for changing
        /// the style after initialization.
        /// </summary>
        public JsString fieldStyle;
        /// <summary>
        /// The content of the field body is defined by this config option.
        /// Defaults to: <c>[&quot;&lt;input id=&quot;{id}&quot; type=&quot;{type}&quot; {inputAttrTpl}&quot;, &quot; size=&quot;1&quot;&quot;, &quot;&lt;tpl if=&quot;name&quot;&gt; name=&quot;{name}&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;value&quot;&gt; value=&quot;{[Ext.util.Format.htmlEncode(values.value)]}&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;placeholder&quot;&gt; placeholder=&quot;{placeholder}&quot;&lt;/tpl&gt;&quot;, &quot;{%if (values.maxLength !== undefined){%} maxlength=&quot;{maxLength}&quot;{%}%}&quot;, &quot;&lt;tpl if=&quot;readOnly&quot;&gt; readonly=&quot;readonly&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;disabled&quot;&gt; disabled=&quot;disabled&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;tabIdx&quot;&gt; tabIndex=&quot;{tabIdx}&quot;&lt;/tpl&gt;&quot;, &quot;&lt;tpl if=&quot;fieldStyle&quot;&gt; style=&quot;{fieldStyle}&quot;&lt;/tpl&gt;&quot;, &quot; class=&quot;{fieldCls} {typeCls} {editableCls}&quot; autocomplete=&quot;off&quot;/&gt;&quot;, {disableFormats: true}]</c>
        /// </summary>
        public XTemplate fieldSubTpl;
        /// <summary>
        /// The CSS class to use when the field receives focus
        /// Defaults to: <c>&quot;x-form-focus&quot;</c>
        /// </summary>
        public JsString focusCls;
        /// <summary>
        /// A CSS class to be applied to the outermost element to denote that it is participating in the form field layout.
        /// Defaults to: <c>&quot;x-form-item&quot;</c>
        /// </summary>
        public JsString formItemCls;
        /// <summary>
        /// When set to true, the label element (fieldLabel and labelSeparator) will be automatically
        /// hidden if the fieldLabel is empty. Setting this to false will cause the empty label element to be
        /// rendered and space to be reserved for it; this is useful if you want a field without a label to line up with
        /// other labeled fields in the same form.
        /// If you wish to unconditionall hide the label even if a non-empty fieldLabel is configured, then set the
        /// <see cref="Ext.form.LabelableConfig.hideLabel">hideLabel</see> config to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool hideEmptyLabel;
        /// <summary>
        /// Set to true to completely hide the label element (fieldLabel and labelSeparator). Also see
        /// hideEmptyLabel, which controls whether space will be reserved for an empty fieldLabel.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideLabel;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// inside the input element (as attributes). If an XTemplate is used, the component's
        /// subTpl data serves as the context.
        /// </summary>
        public object inputAttrTpl;
        /// <summary>
        /// The id that will be given to the generated input DOM element. Defaults to an automatically generated id. If you
        /// configure this manually, you must make sure it is unique in the document.
        /// </summary>
        public JsString inputId;
        /// <summary>
        /// The type attribute for input fields -- e.g. radio, text, password, file. The extended types
        /// supported by HTML5 inputs (url, email, etc.) may also be used, though using them will cause older browsers to
        /// fall back to 'text'.
        /// The type 'password' must be used to render that field type currently -- there is no separate Ext component for
        /// that. You can use <see cref="Ext.form.field.File">Ext.form.field.File</see> which creates a custom-rendered file upload field, but if you want
        /// a plain unstyled file input you can use a Base with inputType:'file'.
        /// Defaults to: <c>&quot;text&quot;</c>
        /// </summary>
        public JsString inputType;
        /// <summary>
        /// The CSS class to use when marking the component invalid.
        /// Defaults to: <c>&quot;x-form-invalid&quot;</c>
        /// </summary>
        public JsString invalidCls;
        /// <summary>
        /// The error text to use when marking a field invalid and no message is provided
        /// Defaults to: <c>&quot;The value in this field is invalid&quot;</c>
        /// </summary>
        public JsString invalidText;
        /// <summary>
        /// Controls the position and alignment of the fieldLabel. Valid values are:
        /// <li>"left" (the default) - The label is positioned to the left of the field, with its text aligned to the left.
        /// Its width is determined by the <see cref="Ext.form.LabelableConfig.labelWidth">labelWidth</see> config.</li>
        /// <li>"top" - The label is positioned above the field.</li>
        /// <li>"right" - The label is positioned to the left of the field, with its text aligned to the right.
        /// Its width is determined by the <see cref="Ext.form.LabelableConfig.labelWidth">labelWidth</see> config.</li>
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString labelAlign;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// inside the label element (as attributes). If an XTemplate is used, the component's
        /// render data serves as the context.
        /// </summary>
        public object labelAttrTpl;
        /// <summary>
        /// The CSS class to be applied to the label element. This (single) CSS class is used to formulate the renderSelector
        /// and drives the field layout where it is concatenated with a hyphen ('-') and labelAlign. To add
        /// additional classes, use labelClsExtra.
        /// Defaults to: <c>&quot;x-form-item-label&quot;</c>
        /// </summary>
        public JsString labelCls;
        /// <summary>
        /// An optional string of one or more additional CSS classes to add to the label element. Defaults to empty.
        /// </summary>
        public JsString labelClsExtra;
        /// <summary>
        /// The amount of space in pixels between the fieldLabel and the input field.
        /// Defaults to: <c>5</c>
        /// </summary>
        public JsNumber labelPad;
        /// <summary>
        /// Character(s) to be inserted at the end of the label text.
        /// Set to empty string to hide the separator completely.
        /// Defaults to: <c>&quot;:&quot;</c>
        /// </summary>
        public JsString labelSeparator;
        /// <summary>
        /// A CSS style specification string to apply directly to this field's label.
        /// </summary>
        public JsString labelStyle;
        /// <summary>
        /// The width of the fieldLabel in pixels. Only applicable if the labelAlign is set to "left" or
        /// "right".
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber labelWidth;
        /// <summary>
        /// The rendering template for the field decorations. Component classes using this mixin
        /// should include logic to use this as their renderTpl,
        /// and implement the getSubTplMarkup method to generate the field body content.
        /// The structure of a field is a table as follows:
        /// If <c>labelAlign: 'left',</c>msgTarget: 'side'`
        /// <code> +----------------------+----------------------+-------------+
        /// | Label:               | InputField           | sideErrorEl |
        /// +----------------------+----------------------+-------------+
        /// </code>
        /// If <c>labelAlign: 'left',</c>msgTarget: 'under'`
        /// <code> +----------------------+------------------------------------+
        /// | Label:               | InputField      (colspan=2)        |
        /// |                      | underErrorEl                       |
        /// +----------------------+------------------------------------+
        /// </code>
        /// If <c>labelAlign: 'top',</c>msgTarget: 'side'`
        /// <code> +---------------------------------------------+-------------+
        /// | label                                       |             |
        /// | InputField                                  | sideErrorEl |
        /// +---------------------------------------------+-------------+
        /// </code>
        /// If <c>labelAlign: 'top',</c>msgTarget: 'under'`
        /// <code> +-----------------------------------------------------------+
        /// | label                                                     |
        /// | InputField                      (colspan=2)               |
        /// | underErrorEl                                              |
        /// +-----------------------------------------------------------+
        /// </code>
        /// The total columns always the same for fields with each setting of <see cref="Ext.form.LabelableConfig.labelAlign">labelAlign</see> because when
        /// rendered into a <see cref="Ext.layout.container.Form">Ext.layout.container.Form</see> layout, just the <c>TR</c> of the table
        /// will be placed into the form's main <c>TABLE</c>, and the columns of all the siblings
        /// must match so that they all line up. In a <see cref="Ext.layout.container.Form">Ext.layout.container.Form</see> layout, different
        /// settings of <see cref="Ext.form.LabelableConfig.labelAlign">labelAlign</see> are not supported because of the incompatible column structure.
        /// When the triggerCell or side error cell are hidden or shown, the input cell's colspan
        /// is recalculated to maintain the correct 3 visible column count.
        /// Defaults to: <c>[&quot;&lt;tr id=&quot;{id}-inputRow&quot; &lt;tpl if=&quot;inFormLayout&quot;&gt;id=&quot;{id}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;&lt;tpl if=&quot;labelOnLeft&quot;&gt;&quot;, &quot;&lt;td id=&quot;{id}-labelCell&quot; style=&quot;{labelCellStyle}&quot; {labelCellAttrs}&gt;&quot;, &quot;{beforeLabelTpl}&quot;, &quot;&lt;label id=&quot;{id}-labelEl&quot; {labelAttrTpl}&lt;tpl if=&quot;inputId&quot;&gt; for=&quot;{inputId}&quot;&lt;/tpl&gt; class=&quot;{labelCls}&quot;&quot;, &quot;&lt;tpl if=&quot;labelStyle&quot;&gt; style=&quot;{labelStyle}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;{beforeLabelTextTpl}&quot;, &quot;&lt;tpl if=&quot;fieldLabel&quot;&gt;{fieldLabel}{labelSeparator}&lt;/tpl&gt;&quot;, &quot;{afterLabelTextTpl}&quot;, &quot;&lt;/label&gt;&quot;, &quot;{afterLabelTpl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;&lt;td class=&quot;{baseBodyCls} {fieldBodyCls}&quot; id=&quot;{id}-bodyEl&quot; colspan=&quot;{bodyColspan}&quot; role=&quot;presentation&quot;&gt;&quot;, &quot;{beforeBodyEl}&quot;, &quot;&lt;tpl if=&quot;labelAlign==\'top\'&quot;&gt;&quot;, &quot;{beforeLabelTpl}&quot;, &quot;&lt;div id=&quot;{id}-labelCell&quot; style=&quot;{labelCellStyle}&quot;&gt;&quot;, &quot;&lt;label id=&quot;{id}-labelEl&quot; {labelAttrTpl}&lt;tpl if=&quot;inputId&quot;&gt; for=&quot;{inputId}&quot;&lt;/tpl&gt; class=&quot;{labelCls}&quot;&quot;, &quot;&lt;tpl if=&quot;labelStyle&quot;&gt; style=&quot;{labelStyle}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;{beforeLabelTextTpl}&quot;, &quot;&lt;tpl if=&quot;fieldLabel&quot;&gt;{fieldLabel}{labelSeparator}&lt;/tpl&gt;&quot;, &quot;{afterLabelTextTpl}&quot;, &quot;&lt;/label&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;{afterLabelTpl}&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;{beforeSubTpl}&quot;, &quot;{[values.$comp.getSubTplMarkup()]}&quot;, &quot;{afterSubTpl}&quot;, &quot;&lt;tpl if=&quot;msgTarget===\'side\'&quot;&gt;&quot;, &quot;{afterBodyEl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;td id=&quot;{id}-sideErrorCell&quot; vAlign=&quot;{[values.labelAlign===\'top\' &amp;&amp; !values.hideLabel ? \'bottom\' : \'middle\']}&quot; style=&quot;{[values.autoFitErrors ? \'display:none\' : \'\']}&quot; width=&quot;{errorIconWidth}&quot;&gt;&quot;, &quot;&lt;div id=&quot;{id}-errorEl&quot; class=&quot;{errorMsgCls}&quot; style=&quot;display:none;width:{errorIconWidth}px&quot;&gt;&lt;/div&gt;&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;tpl elseif=&quot;msgTarget==\'under\'&quot;&gt;&quot;, &quot;&lt;div id=&quot;{id}-errorEl&quot; class=&quot;{errorMsgClass}&quot; colspan=&quot;2&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;&quot;, &quot;{afterBodyEl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;&lt;/tr&gt;&quot;, {disableFormats: true}]</c>
        /// </summary>
        public object labelableRenderTpl;
        /// <summary>
        /// The location where the error message text should display. Must be one of the following values:
        /// <li><p><c>qtip</c> Display a quick tip containing the message when the user hovers over the field.
        /// This is the default.</p>
        /// <p><strong><see cref="Ext.tip.QuickTipManager.init">Ext.tip.QuickTipManager.init</see> must have been called for this setting to work.</strong></p></li>
        /// <li><p><c>title</c> Display the message in a default browser title attribute popup.</p></li>
        /// <li><c>under</c> Add a block div beneath the field containing the error message.</li>
        /// <li><c>side</c> Add an error icon to the right of the field, displaying the message in a popup on hover.</li>
        /// <li><c>none</c> Don't display any error message. This might be useful if you are implementing custom error display.</li>
        /// <li><c>[element id]</c> Add the error message directly to the innerHTML of the specified element.</li>
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString msgTarget;
        /// <summary>
        /// The name of the field. This is used as the parameter name when including the field value
        /// in a form submit(). If no name is configured, it falls back to the inputId.
        /// To prevent the field from being included in the form submit, set submitValue to false.
        /// Overrides: <see cref="Ext.form.field.FieldConfig.name">Ext.form.field.Field.name</see>
        /// </summary>
        public JsString name;
        /// <summary>
        /// true to disable displaying any error message set on this object.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool preventMark;
        /// <summary>
        /// true to mark the field as readOnly in HTML.
        /// <strong>Note</strong>: this only sets the element's readOnly DOM attribute. Setting <c>readOnly=true</c>, for example, will not
        /// disable triggering a ComboBox or Date; it gives you the option of forcing the user to choose via the trigger
        /// without typing in the text box. To hide the trigger use <c><see cref="Ext.form.field.TriggerConfig.hideTrigger">hideTrigger</see></c>.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool readOnly;
        /// <summary>
        /// The CSS class applied to the component's main element when it is readOnly.
        /// Defaults to: <c>&quot;x-form-readonly&quot;</c>
        /// </summary>
        public JsString readOnlyCls;
        /// <summary>
        /// Setting this to false will prevent the field from being submitted even when it is
        /// not disabled.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool submitValue;
        /// <summary>
        /// The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via
        /// applyTo
        /// </summary>
        public JsNumber tabIndex;
        /// <summary>
        /// Whether the field should validate when it loses focus. This will cause fields to be validated
        /// as the user steps through the fields in the form regardless of whether they are making changes to those fields
        /// along the way. See also validateOnChange.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool validateOnBlur;
        /// <summary>
        /// Specifies whether this field should be validated immediately whenever a change in its value is detected.
        /// If the validation results in a change in the field's validity, a validitychange event will be
        /// fired. This allows the field to show feedback about the validity of its contents immediately as the user is
        /// typing.
        /// When set to false, feedback will not be immediate. However the form will still be validated before submitting if
        /// the clientValidation option to <see cref="Ext.form.Basic.doAction">Ext.form.Basic.doAction</see> is enabled, or if the field or form are validated
        /// manually.
        /// See also <see cref="Ext.form.field.BaseConfig.checkChangeEvents">Ext.form.field.Base.checkChangeEvents</see> for controlling how changes to the field's value are
        /// detected.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool validateOnChange;
        /// <summary>
        /// A value to initialize this field with.
        /// </summary>
        public JsObject value;
        public BaseConfig(params object[] args){}
    }
    #endregion
    #region BaseEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class BaseEvents : Ext.ComponentEvents
    {
        /// <summary>
        /// Fires when the value of a field is changed via the setValue method.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="newValue"><p>The new value</p>
        /// </param>
        /// <param name="oldValue"><p>The original value</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void change(Ext.form.field.Field @this, object newValue, object oldValue, object eOpts){}
        /// <summary>
        /// Fires when a change in the field's isDirty state is detected.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="isDirty"><p>Whether or not the field is now dirty</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void dirtychange(Ext.form.field.Field @this, bool isDirty, object eOpts){}
        /// <summary>
        /// Fires when the active error message is changed via setActiveError.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="error"><p>The active error message</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void errorchange(Labelable @this, JsString error, object eOpts){}
        /// <summary>
        /// Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. To handle other keys
        /// see Ext.util.KeyMap. You can check Ext.EventObject.getKey to determine which key was
        /// pressed. For example:
        /// <code>var form = new <see cref="Ext.form.Panel">Ext.form.Panel</see>({
        /// ...
        /// items: [{
        /// fieldLabel: 'Field 1',
        /// name: 'field1',
        /// allowBlank: false
        /// },{
        /// fieldLabel: 'Field 2',
        /// name: 'field2',
        /// listeners: {
        /// specialkey: function(field, e){
        /// // e.HOME, e.END, e.PAGE_UP, e.PAGE_DOWN,
        /// // e.TAB, e.ESC, arrow keys: e.LEFT, e.RIGHT, e.UP, e.DOWN
        /// if (e.<see cref="Ext.EventObject.getKey">getKey()</see> == e.ENTER) {
        /// var form = field.up('form').getForm();
        /// form.submit();
        /// }
        /// }
        /// }
        /// }
        /// ],
        /// ...
        /// });
        /// </code>
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void specialkey(Ext.form.field.Base @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when a change in the field's validity is detected.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="isValid"><p>Whether or not the field is now valid</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void validitychange(Ext.form.field.Field @this, bool isValid, object eOpts){}
        /// <summary>
        /// Fires when this field changes its read-only status.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="Read"><p>only flag</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void writeablechange(Ext.form.field.Base @this, bool Read, object eOpts){}
        public BaseEvents(params object[] args){}
    }
    #endregion
}
