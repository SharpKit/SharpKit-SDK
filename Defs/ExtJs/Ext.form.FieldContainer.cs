//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form
{
    #region FieldContainer
    /// <inheritdocs />
    /// <summary>
    /// <p>FieldContainer is a derivation of <see cref="Ext.container.Container">Container</see> that implements the
    /// <see cref="Ext.form.Labelable">Labelable</see> mixin. This allows it to be configured so that it is rendered with
    /// a <see cref="Ext.form.FieldContainerConfig.fieldLabel">field label</see> and optional <see cref="Ext.form.FieldContainerConfig.msgTarget">error message</see> around its sub-items.
    /// This is useful for arranging a group of fields or other components within a single item in a form, so
    /// that it lines up nicely with other fields. A common use is for grouping a set of related fields under
    /// a single label in a form.</p>
    /// <p>The container's configured <see cref="Ext.form.FieldContainerConfig.items">items</see> will be layed out within the field body area according to the
    /// configured <see cref="Ext.form.FieldContainerConfig.layout">layout</see> type. The default layout is <c>'autocontainer'</c>.</p>
    /// <p>Like regular fields, FieldContainer can inherit its decoration configuration from the
    /// <see cref="Ext.form.PanelConfig.fieldDefaults">fieldDefaults</see> of an enclosing FormPanel. In addition,
    /// FieldContainer itself can pass <see cref="Ext.form.FieldContainerConfig.fieldDefaults">fieldDefaults</see> to any <see cref="Ext.form.Labelable">fields</see>
    /// it may itself contain.</p>
    /// <p>If you are grouping a set of <see cref="Ext.form.field.Checkbox">Checkbox</see> or <see cref="Ext.form.field.Radio">Radio</see>
    /// fields in a single labeled container, consider using a <see cref="Ext.form.CheckboxGroup">Ext.form.CheckboxGroup</see>
    /// or <see cref="Ext.form.RadioGroup">Ext.form.RadioGroup</see> instead as they are specialized for handling those types.</p>
    /// <h1>Example</h1>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'FieldContainer Example',
    /// width: 550,
    /// bodyPadding: 10,
    /// items: [{
    /// xtype: 'fieldcontainer',
    /// fieldLabel: 'Last Three Jobs',
    /// labelWidth: 100,
    /// // The body area will contain three text fields, arranged
    /// // horizontally, separated by draggable splitters.
    /// layout: 'hbox',
    /// items: [{
    /// xtype: 'textfield',
    /// flex: 1
    /// }, {
    /// xtype: 'splitter'
    /// }, {
    /// xtype: 'textfield',
    /// flex: 1
    /// }, {
    /// xtype: 'splitter'
    /// }, {
    /// xtype: 'textfield',
    /// flex: 1
    /// }]
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <h1>Usage of fieldDefaults</h1>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'FieldContainer Example',
    /// width: 350,
    /// bodyPadding: 10,
    /// items: [{
    /// xtype: 'fieldcontainer',
    /// fieldLabel: 'Your Name',
    /// labelWidth: 75,
    /// defaultType: 'textfield',
    /// // Arrange fields vertically, stretched to full width
    /// layout: 'anchor',
    /// defaults: {
    /// layout: '100%'
    /// },
    /// // These config values will be applied to both sub-fields, except
    /// // for Last Name which will use its own msgTarget.
    /// fieldDefaults: {
    /// msgTarget: 'under',
    /// labelAlign: 'top'
    /// },
    /// items: [{
    /// fieldLabel: 'First Name',
    /// name: 'firstName'
    /// }, {
    /// fieldLabel: 'Last Name',
    /// name: 'lastName',
    /// msgTarget: 'under'
    /// }]
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class FieldContainer : Ext.container.Container, Labelable, FieldAncestor
    {
        /// <summary>
        /// If specified, then the component will be displayed with this value as its active error when first rendered. Use
        /// setActiveError or unsetActiveError to change it after component creation.
        /// </summary>
        public JsString activeError;
        /// <summary>
        /// The template used to format the Array of error messages passed to setActiveErrors into a single HTML
        /// string. By default this renders each message as an item in an unordered list.
        /// Defaults to: <c>[&quot;&lt;tpl if=&quot;errors &amp;&amp; errors.length&quot;&gt;&quot;, &quot;&lt;ul&gt;&lt;tpl for=&quot;errors&quot;&gt;&lt;li&gt;{.}&lt;/li&gt;&lt;/tpl&gt;&lt;/ul&gt;&quot;, &quot;&lt;/tpl&gt;&quot;]</c>
        /// </summary>
        public object activeErrorsTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// at the end of the input containing element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterBodyEl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the label text. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterLabelTextTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the label element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterLabelTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the subTpl markup. If an XTemplate is used, the
        /// component's render data serves as the context.
        /// </summary>
        public object afterSubTpl;
        /// <summary>
        /// Whether to adjust the component's body area to make room for 'side' or 'under' error messages.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoFitErrors;
        /// <summary>
        /// The CSS class to be applied to the body content element.
        /// Defaults to: <c>&quot;x-form-item-body&quot;</c>
        /// </summary>
        public JsString baseBodyCls;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// at the beginning of the input containing element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeBodyEl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the label text. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeLabelTextTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the label element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeLabelTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the subTpl markup. If an XTemplate is used, the
        /// component's render data serves as the context.
        /// </summary>
        public object beforeSubTpl;
        /// <summary>
        /// The CSS class to be applied to the special clearing div rendered directly after the field contents wrapper to
        /// provide field clearing.
        /// Defaults to: <c>&quot;x-clear&quot;</c>
        /// </summary>
        public JsString clearCls;
        /// <summary>
        /// If set to true, the field container will automatically combine and display the validation errors from
        /// all the fields it contains as a single error on the container, according to the configured
        /// msgTarget. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool combineErrors;
        /// <summary>
        /// If set to true, and there is no defined fieldLabel, the field container will automatically
        /// generate its label by combining the labels of all the fields it contains. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool combineLabels;
        /// <summary>
        /// The CSS class to be applied to the error message element.
        /// Defaults to: <c>&quot;x-form-error-msg&quot;</c>
        /// </summary>
        public JsString errorMsgCls;
        /// <summary>
        /// An extra CSS class to be applied to the body content element in addition to baseBodyCls.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString fieldBodyCls;
        /// <summary>
        /// If specified, the properties in this object are used as default config values for each Ext.form.Labelable
        /// instance (e.g. Ext.form.field.Base or Ext.form.FieldContainer) that is added as a descendant of
        /// this container. Corresponding values specified in an individual field's own configuration, or from the defaults config of its parent container, will take precedence. See the
        /// documentation for Ext.form.Labelable to see what config options may be specified in the fieldDefaults.
        /// Example:
        /// <code>new <see cref="Ext.form.Panel">Ext.form.Panel</see>({
        /// fieldDefaults: {
        /// labelAlign: 'left',
        /// labelWidth: 100
        /// },
        /// items: [{
        /// xtype: 'fieldset',
        /// defaults: {
        /// labelAlign: 'top'
        /// },
        /// items: [{
        /// name: 'field1'
        /// }, {
        /// name: 'field2'
        /// }]
        /// }, {
        /// xtype: 'fieldset',
        /// items: [{
        /// name: 'field3',
        /// labelWidth: 150
        /// }, {
        /// name: 'field4'
        /// }]
        /// }]
        /// });
        /// </code>
        /// In this example, field1 and field2 will get labelAlign:'top' (from the fieldset's defaults) and labelWidth:100
        /// (from fieldDefaults), field3 and field4 will both get labelAlign:'left' (from fieldDefaults and field3 will use
        /// the labelWidth:150 from its own config.
        /// </summary>
        public JsObject fieldDefaults;
        /// <summary>
        /// The label for the field. It gets appended with the labelSeparator, and its position and sizing is
        /// determined by the labelAlign, labelWidth, and labelPad configs.
        /// </summary>
        public JsString fieldLabel;
        /// <summary>
        /// A CSS class to be applied to the outermost element to denote that it is participating in the form field layout.
        /// Defaults to: <c>&quot;x-form-item&quot;</c>
        /// </summary>
        public JsString formItemCls;
        /// <summary>
        /// When set to true, the label element (fieldLabel and labelSeparator) will be automatically
        /// hidden if the fieldLabel is empty. Setting this to false will cause the empty label element to be
        /// rendered and space to be reserved for it; this is useful if you want a field without a label to line up with
        /// other labeled fields in the same form.
        /// If you wish to unconditionall hide the label even if a non-empty fieldLabel is configured, then set the
        /// <see cref="Ext.form.LabelableConfig.hideLabel">hideLabel</see> config to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool hideEmptyLabel;
        /// <summary>
        /// Set to true to completely hide the label element (fieldLabel and labelSeparator). Also see
        /// hideEmptyLabel, which controls whether space will be reserved for an empty fieldLabel.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideLabel;
        /// <summary>
        /// The CSS class to use when marking the component invalid.
        /// Defaults to: <c>&quot;x-form-invalid&quot;</c>
        /// </summary>
        public JsString invalidCls;
        /// <summary>
        /// Controls the position and alignment of the fieldLabel. Valid values are:
        /// <li>"left" (the default) - The label is positioned to the left of the field, with its text aligned to the left.
        /// Its width is determined by the <see cref="Ext.form.LabelableConfig.labelWidth">labelWidth</see> config.</li>
        /// <li>"top" - The label is positioned above the field.</li>
        /// <li>"right" - The label is positioned to the left of the field, with its text aligned to the right.
        /// Its width is determined by the <see cref="Ext.form.LabelableConfig.labelWidth">labelWidth</see> config.</li>
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString labelAlign;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// inside the label element (as attributes). If an XTemplate is used, the component's
        /// render data serves as the context.
        /// </summary>
        public object labelAttrTpl;
        /// <summary>
        /// The CSS class to be applied to the label element. This (single) CSS class is used to formulate the renderSelector
        /// and drives the field layout where it is concatenated with a hyphen ('-') and labelAlign. To add
        /// additional classes, use labelClsExtra.
        /// Defaults to: <c>&quot;x-form-item-label&quot;</c>
        /// </summary>
        public JsString labelCls;
        /// <summary>
        /// An optional string of one or more additional CSS classes to add to the label element. Defaults to empty.
        /// </summary>
        public JsString labelClsExtra;
        /// <summary>
        /// The string to use when joining the labels of individual sub-fields, when combineLabels is
        /// set to true. Defaults to ', '.
        /// Defaults to: <c>&quot;, &quot;</c>
        /// </summary>
        public JsString labelConnector;
        /// <summary>
        /// The amount of space in pixels between the fieldLabel and the input field.
        /// Defaults to: <c>5</c>
        /// </summary>
        public JsNumber labelPad;
        /// <summary>
        /// Character(s) to be inserted at the end of the label text.
        /// Set to empty string to hide the separator completely.
        /// Defaults to: <c>&quot;:&quot;</c>
        /// </summary>
        public JsString labelSeparator;
        /// <summary>
        /// A CSS style specification string to apply directly to this field's label.
        /// </summary>
        public JsString labelStyle;
        /// <summary>
        /// The width of the fieldLabel in pixels. Only applicable if the labelAlign is set to "left" or
        /// "right".
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber labelWidth;
        /// <summary>
        /// The rendering template for the field decorations. Component classes using this mixin
        /// should include logic to use this as their renderTpl,
        /// and implement the getSubTplMarkup method to generate the field body content.
        /// The structure of a field is a table as follows:
        /// If <c>labelAlign: 'left',</c>msgTarget: 'side'`
        /// <code> +----------------------+----------------------+-------------+
        /// | Label:               | InputField           | sideErrorEl |
        /// +----------------------+----------------------+-------------+
        /// </code>
        /// If <c>labelAlign: 'left',</c>msgTarget: 'under'`
        /// <code> +----------------------+------------------------------------+
        /// | Label:               | InputField      (colspan=2)        |
        /// |                      | underErrorEl                       |
        /// +----------------------+------------------------------------+
        /// </code>
        /// If <c>labelAlign: 'top',</c>msgTarget: 'side'`
        /// <code> +---------------------------------------------+-------------+
        /// | label                                       |             |
        /// | InputField                                  | sideErrorEl |
        /// +---------------------------------------------+-------------+
        /// </code>
        /// If <c>labelAlign: 'top',</c>msgTarget: 'under'`
        /// <code> +-----------------------------------------------------------+
        /// | label                                                     |
        /// | InputField                      (colspan=2)               |
        /// | underErrorEl                                              |
        /// +-----------------------------------------------------------+
        /// </code>
        /// The total columns always the same for fields with each setting of <see cref="Ext.form.LabelableConfig.labelAlign">labelAlign</see> because when
        /// rendered into a <see cref="Ext.layout.container.Form">Ext.layout.container.Form</see> layout, just the <c>TR</c> of the table
        /// will be placed into the form's main <c>TABLE</c>, and the columns of all the siblings
        /// must match so that they all line up. In a <see cref="Ext.layout.container.Form">Ext.layout.container.Form</see> layout, different
        /// settings of <see cref="Ext.form.LabelableConfig.labelAlign">labelAlign</see> are not supported because of the incompatible column structure.
        /// When the triggerCell or side error cell are hidden or shown, the input cell's colspan
        /// is recalculated to maintain the correct 3 visible column count.
        /// Defaults to: <c>[&quot;&lt;tr id=&quot;{id}-inputRow&quot; &lt;tpl if=&quot;inFormLayout&quot;&gt;id=&quot;{id}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;&lt;tpl if=&quot;labelOnLeft&quot;&gt;&quot;, &quot;&lt;td id=&quot;{id}-labelCell&quot; style=&quot;{labelCellStyle}&quot; {labelCellAttrs}&gt;&quot;, &quot;{beforeLabelTpl}&quot;, &quot;&lt;label id=&quot;{id}-labelEl&quot; {labelAttrTpl}&lt;tpl if=&quot;inputId&quot;&gt; for=&quot;{inputId}&quot;&lt;/tpl&gt; class=&quot;{labelCls}&quot;&quot;, &quot;&lt;tpl if=&quot;labelStyle&quot;&gt; style=&quot;{labelStyle}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;{beforeLabelTextTpl}&quot;, &quot;&lt;tpl if=&quot;fieldLabel&quot;&gt;{fieldLabel}{labelSeparator}&lt;/tpl&gt;&quot;, &quot;{afterLabelTextTpl}&quot;, &quot;&lt;/label&gt;&quot;, &quot;{afterLabelTpl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;&lt;td class=&quot;{baseBodyCls} {fieldBodyCls}&quot; id=&quot;{id}-bodyEl&quot; colspan=&quot;{bodyColspan}&quot; role=&quot;presentation&quot;&gt;&quot;, &quot;{beforeBodyEl}&quot;, &quot;&lt;tpl if=&quot;labelAlign==\'top\'&quot;&gt;&quot;, &quot;{beforeLabelTpl}&quot;, &quot;&lt;div id=&quot;{id}-labelCell&quot; style=&quot;{labelCellStyle}&quot;&gt;&quot;, &quot;&lt;label id=&quot;{id}-labelEl&quot; {labelAttrTpl}&lt;tpl if=&quot;inputId&quot;&gt; for=&quot;{inputId}&quot;&lt;/tpl&gt; class=&quot;{labelCls}&quot;&quot;, &quot;&lt;tpl if=&quot;labelStyle&quot;&gt; style=&quot;{labelStyle}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;{beforeLabelTextTpl}&quot;, &quot;&lt;tpl if=&quot;fieldLabel&quot;&gt;{fieldLabel}{labelSeparator}&lt;/tpl&gt;&quot;, &quot;{afterLabelTextTpl}&quot;, &quot;&lt;/label&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;{afterLabelTpl}&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;{beforeSubTpl}&quot;, &quot;{[values.$comp.getSubTplMarkup()]}&quot;, &quot;{afterSubTpl}&quot;, &quot;&lt;tpl if=&quot;msgTarget===\'side\'&quot;&gt;&quot;, &quot;{afterBodyEl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;td id=&quot;{id}-sideErrorCell&quot; vAlign=&quot;{[values.labelAlign===\'top\' &amp;&amp; !values.hideLabel ? \'bottom\' : \'middle\']}&quot; style=&quot;{[values.autoFitErrors ? \'display:none\' : \'\']}&quot; width=&quot;{errorIconWidth}&quot;&gt;&quot;, &quot;&lt;div id=&quot;{id}-errorEl&quot; class=&quot;{errorMsgCls}&quot; style=&quot;display:none;width:{errorIconWidth}px&quot;&gt;&lt;/div&gt;&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;tpl elseif=&quot;msgTarget==\'under\'&quot;&gt;&quot;, &quot;&lt;div id=&quot;{id}-errorEl&quot; class=&quot;{errorMsgClass}&quot; colspan=&quot;2&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;&quot;, &quot;{afterBodyEl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;&lt;/tr&gt;&quot;, {disableFormats: true}]</c>
        /// </summary>
        public object labelableRenderTpl;
        /// <summary>
        /// The location where the error message text should display. Must be one of the following values:
        /// <li><p><c>qtip</c> Display a quick tip containing the message when the user hovers over the field.
        /// This is the default.</p>
        /// <p><strong><see cref="Ext.tip.QuickTipManager.init">Ext.tip.QuickTipManager.init</see> must have been called for this setting to work.</strong></p></li>
        /// <li><p><c>title</c> Display the message in a default browser title attribute popup.</p></li>
        /// <li><c>under</c> Add a block div beneath the field containing the error message.</li>
        /// <li><c>side</c> Add an error icon to the right of the field, displaying the message in a popup on hover.</li>
        /// <li><c>none</c> Don't display any error message. This might be useful if you are implementing custom error display.</li>
        /// <li><c>[element id]</c> Add the error message directly to the innerHTML of the specified element.</li>
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString msgTarget;
        /// <summary>
        /// true to disable displaying any error message set on this object.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool preventMark;
        /// <summary>
        /// The div Element wrapping the component's contents. Only available after the component has been rendered.
        /// </summary>
        public Ext.dom.Element bodyEl{get;set;}
        /// <summary>
        /// The div Element that will contain the component's error message(s). Note that depending on the configured
        /// msgTarget, this element may be hidden in favor of some other form of presentation, but will always
        /// be present in the DOM for use by assistive technologies.
        /// </summary>
        public Ext.dom.Element errorEl{get;set;}
        /// <summary>
        /// Flag denoting that this object is labelable as a field. Always true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isFieldLabelable{get;set;}
        /// <summary>
        /// The &lt;TD&gt; Element which contains the label Element for this component. Only available after the component has been rendered.
        /// </summary>
        public Ext.dom.Element labelCell{get;set;}
        /// <summary>
        /// The label Element for this component. Only available after the component has been rendered.
        /// </summary>
        public Ext.dom.Element labelEl{get;set;}
        /// <summary>
        /// Tells the layout system that the height can be measured immediately because the width does not need setting.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool noWrap{get;set;}
        /// <summary>
        /// Gets the active error message for this component, if any. This does not trigger validation on its own, it merely
        /// returns any message that the component may already hold.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The active error message on the component; if there is no error, an empty string is returned.</p>
        /// </div>
        /// </returns>
        public virtual JsString getActiveError(){return null;}
        /// <summary>
        /// Gets an Array of any active error messages currently applied to the field. This does not trigger validation on
        /// its own, it merely returns any messages that the component may already hold.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see>[]</span><div><p>The active error messages on the component; if there are no errors, an empty Array is
        /// returned.</p>
        /// </div>
        /// </returns>
        public virtual JsString[] getActiveErrors(){return null;}
        /// <summary>
        /// Calculates the colspan value for the body cell - the cell which contains the input field.
        /// The field table structure contains 4 columns:
        /// </summary>
        public virtual void getBodyColspan(){}
        /// <summary>
        /// Takes an Array of invalid Ext.form.field.Field objects and builds a combined list of error
        /// messages from them. Defaults to prepending each message by the field name and a colon. This
        /// can be overridden to provide custom combined error message handling, for instance changing
        /// the format of each message or sorting the array (it is sorted in order of appearance by default).
        /// </summary>
        /// <param name="invalidFields"><p>An Array of the sub-fields which are currently invalid.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see>[]</span><div><p>The combined list of error messages</p>
        /// </div>
        /// </returns>
        public JsString[] getCombinedErrors(JsArray<Ext.form.field.Field> invalidFields){return null;}
        /// <summary>
        /// Returns the combined field label if combineLabels is set to true and if there is no
        /// set fieldLabel. Otherwise returns the fieldLabel like normal. You can also override
        /// this method to provide a custom generated label.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The label, or empty string if none.</p>
        /// </div>
        /// </returns>
        public virtual JsString getFieldLabel(){return null;}
        /// <summary>
        /// Get the input id, if any, for this component. This is used as the "for" attribute on the label element.
        /// Implementing subclasses may also use this as e.g. the id for their own input element.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The input id</p>
        /// </div>
        /// </returns>
        public virtual JsString getInputId(){return null;}
        /// <summary>
        /// Gets any label styling for the labelEl
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The label styling</p>
        /// </div>
        /// </returns>
        public virtual JsString getLabelStyle(){return null;}
        /// <summary>
        /// Generates the arguments for the field decorations rendering template.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The template arguments</p>
        /// </div>
        /// </returns>
        public virtual object getLabelableRenderData(){return null;}
        /// <summary>
        /// Gets the markup to be inserted into the outer template's bodyEl. Defaults to empty string, should be implemented
        /// by classes including this mixin as needed.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The markup to be inserted</p>
        /// </div>
        /// </returns>
        public virtual JsString getSubTplMarkup(){return null;}
        /// <summary>
        /// Handle errorchange events on sub-fields; invoke the aggregated event and method
        /// </summary>
        /// <param name="labelable">
        /// </param>
        /// <param name="activeError">
        /// </param>
        public virtual void handleFieldErrorChange(object labelable, object activeError){}
        /// <summary>
        /// Handle validitychange events on sub-fields; invoke the aggregated event and method
        /// </summary>
        /// <param name="field">
        /// </param>
        /// <param name="isValid">
        /// </param>
        public virtual void handleFieldValidityChange(object field, object isValid){}
        /// <summary>
        /// Tells whether the field currently has an active error message. This does not trigger validation on its own, it
        /// merely looks for any message that the component may already hold.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public virtual bool hasActiveError(){return false;}
        /// <summary>
        /// Checks if the field has a visible label
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the field has a visible label</p>
        /// </div>
        /// </returns>
        public virtual bool hasVisibleLabel(){return false;}
        /// <summary>
        /// Initializes the FieldAncestor's state; this must be called from the initComponent method of any components
        /// importing this mixin.
        /// </summary>
        public virtual void initFieldAncestor(){}
        /// <summary>
        /// Initialize the fieldDefaults object
        /// </summary>
        public virtual void initFieldDefaults(){}
        /// <summary>
        /// Performs initialization of this mixin. Component classes using this mixin should call this method during their
        /// own initialization.
        /// </summary>
        public virtual void initLabelable(){}
        /// <summary>
        /// Called when a Ext.form.field.Field instance is added to the container's subtree.
        /// </summary>
        /// <param name="field"><p>The field which was added</p>
        /// </param>
        public virtual void onFieldAdded(Ext.form.field.Field field){}
        /// <summary>
        /// Handle the addition and removal of components in the FieldAncestor component's child tree.
        /// </summary>
        /// <param name="parent">
        /// </param>
        /// <param name="child">
        /// </param>
        public virtual void onFieldAncestorSubtreeChange(object parent, object child){}
        /// <summary>
        /// Fired when the error message of any field within the container changes, and updates the
        /// combined error message to match.
        /// </summary>
        /// <param name="field">
        /// </param>
        /// <param name="activeError">
        /// </param>
        public virtual void onFieldErrorChange(Labelable field, JsString activeError){}
        /// <summary>
        /// Called when a Ext.form.field.Field instance is removed from the container's subtree.
        /// </summary>
        /// <param name="field"><p>The field which was removed</p>
        /// </param>
        public virtual void onFieldRemoved(Ext.form.field.Field field){}
        /// <summary>
        /// Fired when the validity of any field within the container changes.
        /// </summary>
        /// <param name="field"><p>The sub-field whose validity changed</p>
        /// </param>
        /// <param name="valid"><p>The new validity state</p>
        /// </param>
        public virtual void onFieldValidityChange(Ext.form.field.Field field, bool valid){}
        /// <summary>
        /// Called when a Ext.form.Labelable instance is added to the container's subtree.
        /// </summary>
        /// <param name="labelable"><p>The instance that was added</p>
        /// </param>
        public virtual void onLabelableAdded(Labelable labelable){}
        /// <summary>
        /// Called when a Ext.form.Labelable instance is removed from the container's subtree.
        /// </summary>
        /// <param name="labelable"><p>The instance that was removed</p>
        /// </param>
        public virtual void onLabelableRemoved(Labelable labelable){}
        /// <summary>
        /// Updates the rendered DOM to match the current activeError. This only updates the content and
        /// attributes, you'll have to call doComponentLayout to actually update the display.
        /// </summary>
        public virtual void renderActiveError(){}
        /// <summary>
        /// Sets the active error message to the given string. This replaces the entire error message contents with the given
        /// string. Also see setActiveErrors which accepts an Array of messages and formats them according to the
        /// activeErrorsTpl. Note that this only updates the error message element's text and attributes, you'll
        /// have to call doComponentLayout to actually update the field's layout to match. If the field extends Ext.form.field.Base you should call markInvalid instead.
        /// </summary>
        /// <param name="msg"><p>The error message</p>
        /// </param>
        public virtual void setActiveError(JsString msg){}
        /// <summary>
        /// Set the active error message to an Array of error messages. The messages are formatted into a single message
        /// string using the activeErrorsTpl. Also see setActiveError which allows setting the entire error
        /// contents with a single string. Note that this only updates the error message element's text and attributes,
        /// you'll have to call doComponentLayout to actually update the field's layout to match. If the field extends
        /// Ext.form.field.Base you should call markInvalid instead.
        /// </summary>
        /// <param name="errors"><p>The error messages</p>
        /// </param>
        public virtual void setActiveErrors(JsArray<String> errors){}
        /// <summary>
        /// Applies a set of default configuration values to this Labelable instance. For each of the properties in the given
        /// object, check if this component hasOwnProperty that config; if not then it's inheriting a default value from its
        /// prototype and we should apply the default value.
        /// </summary>
        /// <param name="defaults"><p>The defaults to apply to the object.</p>
        /// </param>
        public virtual void setFieldDefaults(object defaults){}
        /// <summary>
        /// Set the label of this field.
        /// </summary>
        /// <param name="label"><p>The new label. The <see cref="Ext.form.LabelableConfig.labelSeparator">labelSeparator</see> will be automatically appended to the label
        /// string.</p>
        /// </param>
        public virtual void setFieldLabel(JsString label){}
        /// <summary>
        /// Returns the trimmed label by slicing off the label separator character. Can be overridden.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The trimmed field label, or empty string if not defined</p>
        /// </div>
        /// </returns>
        public virtual JsString trimLabelSeparator(){return null;}
        /// <summary>
        /// Clears the active error message(s). Note that this only clears the error message element's text and attributes,
        /// you'll have to call doComponentLayout to actually update the field's layout to match. If the field extends Ext.form.field.Base you should call clearInvalid instead.
        /// </summary>
        public virtual void unsetActiveError(){}
        /// <summary>
        /// Updates the content of the labelEl if it is rendered
        /// </summary>
        private void updateLabel(){}
        public FieldContainer(Ext.form.FieldContainerConfig config){}
        public FieldContainer(){}
        public FieldContainer(params object[] args){}
    }
    #endregion
    #region FieldContainerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FieldContainerConfig : Ext.container.ContainerConfig
    {
        /// <summary>
        /// If specified, then the component will be displayed with this value as its active error when first rendered. Use
        /// setActiveError or unsetActiveError to change it after component creation.
        /// </summary>
        public JsString activeError;
        /// <summary>
        /// The template used to format the Array of error messages passed to setActiveErrors into a single HTML
        /// string. By default this renders each message as an item in an unordered list.
        /// Defaults to: <c>[&quot;&lt;tpl if=&quot;errors &amp;&amp; errors.length&quot;&gt;&quot;, &quot;&lt;ul&gt;&lt;tpl for=&quot;errors&quot;&gt;&lt;li&gt;{.}&lt;/li&gt;&lt;/tpl&gt;&lt;/ul&gt;&quot;, &quot;&lt;/tpl&gt;&quot;]</c>
        /// </summary>
        public object activeErrorsTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// at the end of the input containing element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterBodyEl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the label text. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterLabelTextTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the label element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object afterLabelTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// after the subTpl markup. If an XTemplate is used, the
        /// component's render data serves as the context.
        /// </summary>
        public object afterSubTpl;
        /// <summary>
        /// Whether to adjust the component's body area to make room for 'side' or 'under' error messages.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoFitErrors;
        /// <summary>
        /// The CSS class to be applied to the body content element.
        /// Defaults to: <c>&quot;x-form-item-body&quot;</c>
        /// </summary>
        public JsString baseBodyCls;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// at the beginning of the input containing element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeBodyEl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the label text. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeLabelTextTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the label element. If an XTemplate is used, the component's render data
        /// serves as the context.
        /// </summary>
        public object beforeLabelTpl;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// before the subTpl markup. If an XTemplate is used, the
        /// component's render data serves as the context.
        /// </summary>
        public object beforeSubTpl;
        /// <summary>
        /// The CSS class to be applied to the special clearing div rendered directly after the field contents wrapper to
        /// provide field clearing.
        /// Defaults to: <c>&quot;x-clear&quot;</c>
        /// </summary>
        public JsString clearCls;
        /// <summary>
        /// If set to true, the field container will automatically combine and display the validation errors from
        /// all the fields it contains as a single error on the container, according to the configured
        /// msgTarget. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool combineErrors;
        /// <summary>
        /// If set to true, and there is no defined fieldLabel, the field container will automatically
        /// generate its label by combining the labels of all the fields it contains. Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool combineLabels;
        /// <summary>
        /// The CSS class to be applied to the error message element.
        /// Defaults to: <c>&quot;x-form-error-msg&quot;</c>
        /// </summary>
        public JsString errorMsgCls;
        /// <summary>
        /// An extra CSS class to be applied to the body content element in addition to baseBodyCls.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString fieldBodyCls;
        /// <summary>
        /// If specified, the properties in this object are used as default config values for each Ext.form.Labelable
        /// instance (e.g. Ext.form.field.Base or Ext.form.FieldContainer) that is added as a descendant of
        /// this container. Corresponding values specified in an individual field's own configuration, or from the defaults config of its parent container, will take precedence. See the
        /// documentation for Ext.form.Labelable to see what config options may be specified in the fieldDefaults.
        /// Example:
        /// <code>new <see cref="Ext.form.Panel">Ext.form.Panel</see>({
        /// fieldDefaults: {
        /// labelAlign: 'left',
        /// labelWidth: 100
        /// },
        /// items: [{
        /// xtype: 'fieldset',
        /// defaults: {
        /// labelAlign: 'top'
        /// },
        /// items: [{
        /// name: 'field1'
        /// }, {
        /// name: 'field2'
        /// }]
        /// }, {
        /// xtype: 'fieldset',
        /// items: [{
        /// name: 'field3',
        /// labelWidth: 150
        /// }, {
        /// name: 'field4'
        /// }]
        /// }]
        /// });
        /// </code>
        /// In this example, field1 and field2 will get labelAlign:'top' (from the fieldset's defaults) and labelWidth:100
        /// (from fieldDefaults), field3 and field4 will both get labelAlign:'left' (from fieldDefaults and field3 will use
        /// the labelWidth:150 from its own config.
        /// </summary>
        public JsObject fieldDefaults;
        /// <summary>
        /// The label for the field. It gets appended with the labelSeparator, and its position and sizing is
        /// determined by the labelAlign, labelWidth, and labelPad configs.
        /// </summary>
        public JsString fieldLabel;
        /// <summary>
        /// A CSS class to be applied to the outermost element to denote that it is participating in the form field layout.
        /// Defaults to: <c>&quot;x-form-item&quot;</c>
        /// </summary>
        public JsString formItemCls;
        /// <summary>
        /// When set to true, the label element (fieldLabel and labelSeparator) will be automatically
        /// hidden if the fieldLabel is empty. Setting this to false will cause the empty label element to be
        /// rendered and space to be reserved for it; this is useful if you want a field without a label to line up with
        /// other labeled fields in the same form.
        /// If you wish to unconditionall hide the label even if a non-empty fieldLabel is configured, then set the
        /// <see cref="Ext.form.LabelableConfig.hideLabel">hideLabel</see> config to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool hideEmptyLabel;
        /// <summary>
        /// Set to true to completely hide the label element (fieldLabel and labelSeparator). Also see
        /// hideEmptyLabel, which controls whether space will be reserved for an empty fieldLabel.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideLabel;
        /// <summary>
        /// The CSS class to use when marking the component invalid.
        /// Defaults to: <c>&quot;x-form-invalid&quot;</c>
        /// </summary>
        public JsString invalidCls;
        /// <summary>
        /// Controls the position and alignment of the fieldLabel. Valid values are:
        /// <li>"left" (the default) - The label is positioned to the left of the field, with its text aligned to the left.
        /// Its width is determined by the <see cref="Ext.form.LabelableConfig.labelWidth">labelWidth</see> config.</li>
        /// <li>"top" - The label is positioned above the field.</li>
        /// <li>"right" - The label is positioned to the left of the field, with its text aligned to the right.
        /// Its width is determined by the <see cref="Ext.form.LabelableConfig.labelWidth">labelWidth</see> config.</li>
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString labelAlign;
        /// <summary>
        /// An optional string or XTemplate configuration to insert in the field markup
        /// inside the label element (as attributes). If an XTemplate is used, the component's
        /// render data serves as the context.
        /// </summary>
        public object labelAttrTpl;
        /// <summary>
        /// The CSS class to be applied to the label element. This (single) CSS class is used to formulate the renderSelector
        /// and drives the field layout where it is concatenated with a hyphen ('-') and labelAlign. To add
        /// additional classes, use labelClsExtra.
        /// Defaults to: <c>&quot;x-form-item-label&quot;</c>
        /// </summary>
        public JsString labelCls;
        /// <summary>
        /// An optional string of one or more additional CSS classes to add to the label element. Defaults to empty.
        /// </summary>
        public JsString labelClsExtra;
        /// <summary>
        /// The string to use when joining the labels of individual sub-fields, when combineLabels is
        /// set to true. Defaults to ', '.
        /// Defaults to: <c>&quot;, &quot;</c>
        /// </summary>
        public JsString labelConnector;
        /// <summary>
        /// The amount of space in pixels between the fieldLabel and the input field.
        /// Defaults to: <c>5</c>
        /// </summary>
        public JsNumber labelPad;
        /// <summary>
        /// Character(s) to be inserted at the end of the label text.
        /// Set to empty string to hide the separator completely.
        /// Defaults to: <c>&quot;:&quot;</c>
        /// </summary>
        public JsString labelSeparator;
        /// <summary>
        /// A CSS style specification string to apply directly to this field's label.
        /// </summary>
        public JsString labelStyle;
        /// <summary>
        /// The width of the fieldLabel in pixels. Only applicable if the labelAlign is set to "left" or
        /// "right".
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber labelWidth;
        /// <summary>
        /// The rendering template for the field decorations. Component classes using this mixin
        /// should include logic to use this as their renderTpl,
        /// and implement the getSubTplMarkup method to generate the field body content.
        /// The structure of a field is a table as follows:
        /// If <c>labelAlign: 'left',</c>msgTarget: 'side'`
        /// <code> +----------------------+----------------------+-------------+
        /// | Label:               | InputField           | sideErrorEl |
        /// +----------------------+----------------------+-------------+
        /// </code>
        /// If <c>labelAlign: 'left',</c>msgTarget: 'under'`
        /// <code> +----------------------+------------------------------------+
        /// | Label:               | InputField      (colspan=2)        |
        /// |                      | underErrorEl                       |
        /// +----------------------+------------------------------------+
        /// </code>
        /// If <c>labelAlign: 'top',</c>msgTarget: 'side'`
        /// <code> +---------------------------------------------+-------------+
        /// | label                                       |             |
        /// | InputField                                  | sideErrorEl |
        /// +---------------------------------------------+-------------+
        /// </code>
        /// If <c>labelAlign: 'top',</c>msgTarget: 'under'`
        /// <code> +-----------------------------------------------------------+
        /// | label                                                     |
        /// | InputField                      (colspan=2)               |
        /// | underErrorEl                                              |
        /// +-----------------------------------------------------------+
        /// </code>
        /// The total columns always the same for fields with each setting of <see cref="Ext.form.LabelableConfig.labelAlign">labelAlign</see> because when
        /// rendered into a <see cref="Ext.layout.container.Form">Ext.layout.container.Form</see> layout, just the <c>TR</c> of the table
        /// will be placed into the form's main <c>TABLE</c>, and the columns of all the siblings
        /// must match so that they all line up. In a <see cref="Ext.layout.container.Form">Ext.layout.container.Form</see> layout, different
        /// settings of <see cref="Ext.form.LabelableConfig.labelAlign">labelAlign</see> are not supported because of the incompatible column structure.
        /// When the triggerCell or side error cell are hidden or shown, the input cell's colspan
        /// is recalculated to maintain the correct 3 visible column count.
        /// Defaults to: <c>[&quot;&lt;tr id=&quot;{id}-inputRow&quot; &lt;tpl if=&quot;inFormLayout&quot;&gt;id=&quot;{id}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;&lt;tpl if=&quot;labelOnLeft&quot;&gt;&quot;, &quot;&lt;td id=&quot;{id}-labelCell&quot; style=&quot;{labelCellStyle}&quot; {labelCellAttrs}&gt;&quot;, &quot;{beforeLabelTpl}&quot;, &quot;&lt;label id=&quot;{id}-labelEl&quot; {labelAttrTpl}&lt;tpl if=&quot;inputId&quot;&gt; for=&quot;{inputId}&quot;&lt;/tpl&gt; class=&quot;{labelCls}&quot;&quot;, &quot;&lt;tpl if=&quot;labelStyle&quot;&gt; style=&quot;{labelStyle}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;{beforeLabelTextTpl}&quot;, &quot;&lt;tpl if=&quot;fieldLabel&quot;&gt;{fieldLabel}{labelSeparator}&lt;/tpl&gt;&quot;, &quot;{afterLabelTextTpl}&quot;, &quot;&lt;/label&gt;&quot;, &quot;{afterLabelTpl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;&lt;td class=&quot;{baseBodyCls} {fieldBodyCls}&quot; id=&quot;{id}-bodyEl&quot; colspan=&quot;{bodyColspan}&quot; role=&quot;presentation&quot;&gt;&quot;, &quot;{beforeBodyEl}&quot;, &quot;&lt;tpl if=&quot;labelAlign==\'top\'&quot;&gt;&quot;, &quot;{beforeLabelTpl}&quot;, &quot;&lt;div id=&quot;{id}-labelCell&quot; style=&quot;{labelCellStyle}&quot;&gt;&quot;, &quot;&lt;label id=&quot;{id}-labelEl&quot; {labelAttrTpl}&lt;tpl if=&quot;inputId&quot;&gt; for=&quot;{inputId}&quot;&lt;/tpl&gt; class=&quot;{labelCls}&quot;&quot;, &quot;&lt;tpl if=&quot;labelStyle&quot;&gt; style=&quot;{labelStyle}&quot;&lt;/tpl&gt;&gt;&quot;, &quot;{beforeLabelTextTpl}&quot;, &quot;&lt;tpl if=&quot;fieldLabel&quot;&gt;{fieldLabel}{labelSeparator}&lt;/tpl&gt;&quot;, &quot;{afterLabelTextTpl}&quot;, &quot;&lt;/label&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;{afterLabelTpl}&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;{beforeSubTpl}&quot;, &quot;{[values.$comp.getSubTplMarkup()]}&quot;, &quot;{afterSubTpl}&quot;, &quot;&lt;tpl if=&quot;msgTarget===\'side\'&quot;&gt;&quot;, &quot;{afterBodyEl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;td id=&quot;{id}-sideErrorCell&quot; vAlign=&quot;{[values.labelAlign===\'top\' &amp;&amp; !values.hideLabel ? \'bottom\' : \'middle\']}&quot; style=&quot;{[values.autoFitErrors ? \'display:none\' : \'\']}&quot; width=&quot;{errorIconWidth}&quot;&gt;&quot;, &quot;&lt;div id=&quot;{id}-errorEl&quot; class=&quot;{errorMsgCls}&quot; style=&quot;display:none;width:{errorIconWidth}px&quot;&gt;&lt;/div&gt;&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;tpl elseif=&quot;msgTarget==\'under\'&quot;&gt;&quot;, &quot;&lt;div id=&quot;{id}-errorEl&quot; class=&quot;{errorMsgClass}&quot; colspan=&quot;2&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;&quot;, &quot;{afterBodyEl}&quot;, &quot;&lt;/td&gt;&quot;, &quot;&lt;/tpl&gt;&quot;, &quot;&lt;/tr&gt;&quot;, {disableFormats: true}]</c>
        /// </summary>
        public object labelableRenderTpl;
        /// <summary>
        /// The location where the error message text should display. Must be one of the following values:
        /// <li><p><c>qtip</c> Display a quick tip containing the message when the user hovers over the field.
        /// This is the default.</p>
        /// <p><strong><see cref="Ext.tip.QuickTipManager.init">Ext.tip.QuickTipManager.init</see> must have been called for this setting to work.</strong></p></li>
        /// <li><p><c>title</c> Display the message in a default browser title attribute popup.</p></li>
        /// <li><c>under</c> Add a block div beneath the field containing the error message.</li>
        /// <li><c>side</c> Add an error icon to the right of the field, displaying the message in a popup on hover.</li>
        /// <li><c>none</c> Don't display any error message. This might be useful if you are implementing custom error display.</li>
        /// <li><c>[element id]</c> Add the error message directly to the innerHTML of the specified element.</li>
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString msgTarget;
        /// <summary>
        /// true to disable displaying any error message set on this object.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool preventMark;
        public FieldContainerConfig(params object[] args){}
    }
    #endregion
    #region FieldContainerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FieldContainerEvents : Ext.container.ContainerEvents
    {
        /// <summary>
        /// Fires when the active error message is changed via setActiveError.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="error"><p>The active error message</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void errorchange(Labelable @this, JsString error, object eOpts){}
        /// <summary>
        /// Fires when the active error message is changed for any one of the Ext.form.Labelable instances
        /// within this container.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="The"><p>Labelable instance whose active error was changed</p>
        /// </param>
        /// <param name="error"><p>The active error message</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void fielderrorchange(FieldAncestor @this, Labelable The, JsString error, object eOpts){}
        /// <summary>
        /// Fires when the validity state of any one of the Ext.form.field.Field instances within this
        /// container changes.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="The"><p>Field instance whose validity changed</p>
        /// </param>
        /// <param name="isValid"><p>The field's new validity state</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void fieldvaliditychange(FieldAncestor @this, Labelable The, JsString isValid, object eOpts){}
        public FieldContainerEvents(params object[] args){}
    }
    #endregion
}
