//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region Ajax
    /// <inheritdocs />
    /// <summary>
    /// <p>A singleton instance of an <see cref="Ext.data.Connection">Ext.data.Connection</see>. This class
    /// is used to communicate with your server side code. It can be used as follows:</p>
    /// <pre><code><see cref="Ext.Ajax.request">Ext.Ajax.request</see>({
    /// url: 'page.php',
    /// params: {
    /// id: 1
    /// },
    /// success: function(response){
    /// var text = response.responseText;
    /// // process server response here
    /// }
    /// });
    /// </code></pre>
    /// <p>Default options for all requests can be set by changing a property on the <see cref="Ext.Ajax">Ext.Ajax</see> class:</p>
    /// <pre><code><see cref="Ext.Ajax.timeout">Ext.Ajax.timeout</see> = 60000; // 60 seconds
    /// </code></pre>
    /// <p>Any options specified in the request method for the Ajax request will override any
    /// defaults set on the <see cref="Ext.Ajax">Ext.Ajax</see> class. In the code sample below, the timeout for the
    /// request will be 60 seconds.</p>
    /// <pre><code><see cref="Ext.Ajax.timeout">Ext.Ajax.timeout</see> = 120000; // 120 seconds
    /// <see cref="Ext.Ajax.request">Ext.Ajax.request</see>({
    /// url: 'page.aspx',
    /// timeout: 60000
    /// });
    /// </code></pre>
    /// <p>In general, this class will be used for all Ajax requests in your application.
    /// The main reason for creating a separate <see cref="Ext.data.Connection">Ext.data.Connection</see> is for a
    /// series of requests that share common settings that are different to all other
    /// requests in the application.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Ajax : Ext.data.Connection
    {
        /// <summary>
        /// True to enable CORS support on the XHR object. Currently the only effect of this option
        /// is to use the XDomainRequest object instead of XMLHttpRequest if the browser is IE8 or above.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool cors;
        /// <summary>
        /// Change the parameter which is sent went disabling caching through a cache buster.
        /// Defaults to: <c>&quot;_dc&quot;</c>
        /// </summary>
        public static JsString disableCachingParam;
        /// <summary>
        /// A config object containing one or more event handlers to be added to this object during initialization. This
        /// should be a valid listeners config object as specified in the addListener example for attaching multiple
        /// handlers at once.
        /// <strong>DOM events from Ext JS <see cref="Ext.Component">Components</see></strong>
        /// While <em>some</em> Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
        /// only done when extra value can be added. For example the <see cref="Ext.view.View">DataView</see>'s <strong><c><see cref="Ext.view.ViewEvents.itemclick">itemclick</see></c></strong> event passing the node clicked on. To access DOM events directly from a
        /// child element of a Component, we need to specify the <c>element</c> option to identify the Component property to add a
        /// DOM listener to:
        /// <code>new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// width: 400,
        /// height: 200,
        /// dockedItems: [{
        /// xtype: 'toolbar'
        /// }],
        /// listeners: {
        /// click: {
        /// element: 'el', //bind to the underlying el property on the panel
        /// fn: function(){ console.log('click el'); }
        /// },
        /// dblclick: {
        /// element: 'body', //bind to the underlying body property on the panel
        /// fn: function(){ console.log('dblclick body'); }
        /// }
        /// }
        /// });
        /// </code>
        /// </summary>
        public static JsObject listeners;
        /// <summary>
        /// True to set withCredentials = true on the XHR object
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool withCredentials;
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        private static JsString @className{get;set;}
        /// <summary>
        /// Whether a new request should abort any pending requests.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool autoAbort{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject configMap{get;set;}
        /// <summary>
        /// An object containing request headers which are added to each request made by this object.
        /// </summary>
        public static JsObject defaultHeaders{get;set;}
        /// <summary>
        /// True to add a unique cache-buster param to GET requests. Defaults to true.
        /// </summary>
        public static bool disableCaching{get;set;}
        /// <summary>
        /// Initial suspended call count. Incremented when suspendEvents is called, decremented when resumeEvents is called.
        /// Defaults to: <c>0</c>
        /// </summary>
        private static JsNumber eventsSuspended{get;set;}
        /// <summary>
        /// An object containing properties which are used as extra parameters to each request made
        /// by this object. Session information and other data that you need
        /// to pass with each request are commonly put here.
        /// </summary>
        public static JsObject extraParams{get;set;}
        /// <summary>
        /// Creates the appropriate XHR transport for this browser.
        /// </summary>
        private static JsObject getXhrInstance{get;set;}
        /// <summary>
        /// This object holds a key for any event that has a listener. The listener may be set
        /// directly on the instance, or on its class or a super class (via observe) or
        /// on the MVC EventBus. The values of this object are truthy
        /// (a non-zero number) and falsy (0 or undefined). They do not represent an exact count
        /// of listeners. The value for an event is truthy if the event must be fired and is
        /// falsy if there is no need to fire the event.
        /// The intended use of this property is to avoid the expense of fireEvent calls when
        /// there are no listeners. This can be particularly helpful when one would otherwise
        /// have to call fireEvent hundreds or thousands of times. It is used like this:
        /// <code> if (this.hasListeners.foo) {
        /// this.fireEvent('foo', this, arg1);
        /// }
        /// </code>
        /// </summary>
        public static JsObject hasListeners{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        private static bool isInstance{get;set;}
        /// <summary>
        /// true in this class to identify an object as an instantiated Observable, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public static bool isObservable{get;set;}
        /// <summary>
        /// The default HTTP method to be used for requests. Note that this is case-sensitive and
        /// should be all caps (if not set but params are present will use
        /// "POST", otherwise will use "GET".)
        /// </summary>
        public static JsString method{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        protected static Class self{get;set;}
        /// <summary>
        /// The timeout in milliseconds to be used for requests. Defaults to 30000.
        /// </summary>
        public static JsNumber timeout{get;set;}
        /// <summary>
        /// The default URL to be used for requests to the server.
        /// If the server receives all requests through one URL, setting this once is easier than
        /// entering it on every request.
        /// </summary>
        public static JsString url{get;set;}
        /// <summary>
        /// Aborts an active request.
        /// </summary>
        /// <param name="request"><p>Defaults to the last request</p>
        /// </param>
        public static void abort(object request=null){}
        /// <summary>
        /// Aborts all active requests
        /// </summary>
        public static void abortAll(){}
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire.
        /// </summary>
        /// <param name="eventNames"><p>Either an object with event names as properties with
        /// a value of <c>true</c>. For example:</p>
        /// <pre><code>this.addEvents({
        /// storeloaded: true,
        /// storecleared: true
        /// });
        /// </code></pre>
        /// <p>Or any number of event names as separate parameters. For example:</p>
        /// <pre><code>this.addEvents('storeloaded', 'storecleared');
        /// </code></pre>
        /// </param>
        public static void addEvents(object eventNames){}
        /// <summary>
        /// Appends an event handler to this object.  For example:
        /// <code>myGridPanel.on("mouseover", this.onMouseOver, this);
        /// </code>
        /// The method also allows for a single argument to be passed which is a config object
        /// containing properties which specify multiple events. For example:
        /// <code>myGridPanel.on({
        /// cellClick: this.onCellClick,
        /// mouseover: this.onMouseOver,
        /// mouseout: this.onMouseOut,
        /// scope: this // Important. Ensure "this" is correct during handler execution
        /// });
        /// </code>
        /// One can also specify options for each event handler separately:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: this.onCellClick, scope: this, single: true},
        /// mouseover: {fn: panel.onMouseOver, scope: panel}
        /// });
        /// </code>
        /// <em>Names</em> of methods in a specified scope may also be used. Note that
        /// <c>scope</c> MUST be specified to use this option:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: 'onCellClick', scope: this, single: true},
        /// mouseover: {fn: 'onMouseOver', scope: panel}
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventName"><p>The name of the event to listen for.
        /// May also be an object who's property names are event names.</p>
        /// </param>
        /// <param name="fn"><p>The method the event invokes, or <em>if <c>scope</c> is specified, the </em>name* of the method within
        /// the specified <c>scope</c>.  Will be called with arguments
        /// given to <see cref="Ext.util.Observable.fireEvent">fireEvent</see> plus the <c>options</c> parameter described below.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function is
        /// executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration.</p>
        /// <p><strong>Note:</strong> Unlike in ExtJS 3.x, the options object will also be passed as the last
        /// argument to every event handler.</p>
        /// <p>This object may contain any of the following properties:</p>
        /// <ul><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which the handler function is executed. <strong>If omitted,
        /// defaults to the object which fired the event.</strong></p>
        /// </div></li><li><span>delay</span> : <see cref="Number">Number</see><div><p>The number of milliseconds to delay the invocation of the handler after the event fires.</p>
        /// </div></li><li><span>single</span> : <see cref="bool">Boolean</see><div><p>True to add a handler to handle just the next firing of the event, and then remove itself.</p>
        /// </div></li><li><span>buffer</span> : <see cref="Number">Number</see><div><p>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed
        /// by the specified number of milliseconds. If the event fires again within that time,
        /// the original handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p>
        /// </div></li><li><span>target</span> : <see cref="Ext.util.Observable">Ext.util.Observable</see><div><p>Only call the handler if the event was fired on the target Observable, <em>not</em> if the event
        /// was bubbled up from a child Observable.</p>
        /// </div></li><li><span>element</span> : <see cref="String">String</see><div><p><strong>This option is only valid for listeners bound to <see cref="Ext.Component">Components</see>.</strong>
        /// The name of a Component property which references an element to add a listener to.</p>
        /// <p>  This option is useful during Component construction to add DOM event listeners to elements of
        /// <see cref="Ext.Component">Components</see> which will exist only after the Component is rendered.
        /// For example, to add a click listener to a Panel's body:</p>
        /// <pre><code>  new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// title: 'The title',
        /// listeners: {
        /// click: this.handlePanelClick,
        /// element: 'body'
        /// }
        /// });
        /// </code></pre>
        /// <p><strong>Combining Options</strong></p>
        /// <p>Using the options argument, it is possible to combine different types of listeners:</p>
        /// <p>A delayed, one-time listener.</p>
        /// <pre><code>myPanel.on('hide', this.handleClick, this, {
        /// single: true,
        /// delay: 100
        /// });
        /// </code></pre>
        /// </div></li></ul></param>
        public static void addListener(object eventName, System.Delegate fn=null, object scope=null, object options=null){}
        /// <summary>
        /// Adds listeners to any Observable object (or Ext.Element) which are automatically removed when this Component is
        /// destroyed.
        /// </summary>
        /// <param name="item"><p>The item to which to add a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        /// <param name="opt"><p>If the <c>ename</c> parameter was an event name, this is the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> options.</p>
        /// </param>
        public static void addManagedListener(object item, object ename, System.Delegate fn=null, object scope=null, object opt=null){}
        /// <summary>
        /// Call the original method that was previously overridden with override
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// constructor: function() {
        /// alert("I'm a cat!");
        /// }
        /// });
        /// My.Cat.override({
        /// constructor: function() {
        /// alert("I'm going to be a cat!");
        /// this.callOverridden();
        /// alert("Meeeeoooowwww");
        /// }
        /// });
        /// var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
        /// // alerts "I'm a cat!"
        /// // alerts "Meeeeoooowwww"
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// <p>as of 4.1. Use <see cref="Ext.Base.callParent">callParent</see> instead.</p>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callOverridden(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the overridden method</p>
        /// </div>
        /// </returns>
        protected static object callOverridden(object args=null){return null;}
        /// <summary>
        /// Call the "parent" method of the current method. That is the method previously
        /// overridden by derivation or by an override (see Ext.define).
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Base', {
        /// constructor: function (x) {
        /// this.x = x;
        /// },
        /// statics: {
        /// method: function (x) {
        /// return x;
        /// }
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived', {
        /// extend: 'My.Base',
        /// constructor: function () {
        /// this.callParent([21]);
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // alerts 21
        /// </code>
        /// This can be used with an override as follows:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.DerivedOverride', {
        /// override: 'My.Derived',
        /// constructor: function (x) {
        /// this.callParent([x*2]); // calls original My.Derived constructor
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // now alerts 42
        /// </code>
        /// This also works with static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2', {
        /// extend: 'My.Base',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Base.method
        /// }
        /// }
        /// });
        /// alert(My.Base.method(10);     // alerts 10
        /// alert(My.Derived2.method(10); // alerts 20
        /// </code>
        /// Lastly, it also works with overridden static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2Override', {
        /// override: 'My.Derived2',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Derived2.method
        /// }
        /// }
        /// });
        /// alert(My.Derived2.method(10); // now alerts 40
        /// </code>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callParent(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the parent method</p>
        /// </div>
        /// </returns>
        protected static object callParent(object args=null){return null;}
        /// <summary>
        /// Cleans up any left over information from the request
        /// </summary>
        /// <param name="The"><p>request</p>
        /// </param>
        private static void cleanup(object The){}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners
        /// </summary>
        public static void clearListeners(){}
        /// <summary>
        /// Removes all managed listeners for this object.
        /// </summary>
        public static void clearManagedListeners(){}
        /// <summary>
        /// Clears the timeout on the request
        /// </summary>
        /// <param name="The"><p>request</p>
        /// </param>
        private static void clearTimeout(object The){}
        /// <summary>
        /// </summary>
        private static void configClass(){}
        /// <summary>
        /// Continue to fire event.
        /// </summary>
        /// <param name="eventName">
        /// </param>
        /// <param name="args">
        /// </param>
        /// <param name="bubbles">
        /// </param>
        private static void continueFireEvent(JsString eventName, object args=null, object bubbles=null){}
        /// <summary>
        /// Creates the exception object
        /// </summary>
        /// <param name="request">
        /// </param>
        private static void createException(object request){}
        /// <summary>
        /// Creates an event handling function which refires the event from this object as the passed event name.
        /// </summary>
        /// <param name="newName">
        /// </param>
        /// <param name="beginEnd"><p>The caller can specify on which indices to slice</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div>
        /// </div>
        /// </returns>
        private static System.Delegate createRelayer(object newName, object beginEnd=null){return null;}
        /// <summary>
        /// Creates the response object
        /// </summary>
        /// <param name="request">
        /// </param>
        private static void createResponse(object request){}
        /// <summary>
        /// Overrides: <see cref="Ext.AbstractComponent.destroy">Ext.AbstractComponent.destroy</see>, <see cref="Ext.AbstractPlugin.destroy">Ext.AbstractPlugin.destroy</see>, <see cref="Ext.layout.Layout.destroy">Ext.layout.Layout.destroy</see>
        /// </summary>
        private static void destroy(){}
        /// <summary>
        /// Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
        /// present. There is no implementation in the Observable base class.
        /// This is commonly used by Ext.Components to bubble events to owner Containers.
        /// See <see cref="Ext.Component.getBubbleTarget">Ext.Component.getBubbleTarget</see>. The default implementation in <see cref="Ext.Component">Ext.Component</see> returns the
        /// Component's immediate owner. But if a known target is required, this can be overridden to access the
        /// required target more quickly.
        /// Example:
        /// <code><see cref="Ext.ExtContext.override">Ext.override</see>(<see cref="Ext.form.field.Base">Ext.form.field.Base</see>, {
        /// //  Add functionality to Field's initComponent to enable the change event to bubble
        /// initComponent : <see cref="Ext.Function.createSequence">Ext.Function.createSequence</see>(Ext.form.field.Base.prototype.initComponent, function() {
        /// this.enableBubble('change');
        /// }),
        /// //  We know that we want Field's events to bubble directly to the FormPanel.
        /// getBubbleTarget : function() {
        /// if (!this.formPanel) {
        /// this.formPanel = this.findParentByType('form');
        /// }
        /// return this.formPanel;
        /// }
        /// });
        /// var myForm = new Ext.formPanel({
        /// title: 'User Details',
        /// items: [{
        /// ...
        /// }],
        /// listeners: {
        /// change: function() {
        /// // Title goes red if form has been modified.
        /// myForm.header.setStyle('color', 'red');
        /// }
        /// }
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventNames"><p>The event name to bubble, or an Array of event names.</p>
        /// </param>
        public static void enableBubble(object eventNames){}
        /// <summary>
        /// Fires the specified event with the passed parameters (minus the event name, plus the options object passed
        /// to addListener).
        /// An event may be set to bubble up an Observable parent hierarchy (See <see cref="Ext.Component.getBubbleTarget">Ext.Component.getBubbleTarget</see>) by
        /// calling <see cref="Ext.util.Observable.enableBubble">enableBubble</see>.
        /// </summary>
        /// <param name="eventName"><p>The name of the event to fire.</p>
        /// </param>
        /// <param name="args"><p>Variable number of parameters are passed to handlers.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>returns false if any of the handlers return false otherwise it returns true.</p>
        /// </div>
        /// </returns>
        public static bool fireEvent(JsString eventName, params object[] args){return false;}
        /// <summary>
        /// Gets the bubbling parent for an Observable
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.Observable">Ext.util.Observable</see></span><div><p>The bubble parent. null is returned if no bubble target exists</p>
        /// </div>
        /// </returns>
        private static Ext.util.Observable getBubbleParent(){return null;}
        /// <summary>
        /// Parameters<li><span>name</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="name">
        /// </param>
        private static void getConfig(object name){}
        /// <summary>
        /// Gets the form object from options.
        /// </summary>
        /// <param name="options"><p>The request options</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The form, null if not passed</p>
        /// </div>
        /// </returns>
        private static JsObject getForm(object options){return null;}
        /// <summary>
        /// Returns the initial configuration passed to constructor when instantiating
        /// this class.
        /// </summary>
        /// <param name="name"><p>Name of the config option to return.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see>/Mixed</span><div><p>The full config object or a single config value
        /// when <c>name</c> parameter specified.</p>
        /// </div>
        /// </returns>
        public static object getInitialConfig(object name=null){return null;}
        /// <summary>
        /// Gets the most recent request
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The request. Null if there is no recent request</p>
        /// </div>
        /// </returns>
        private static object getLatest(){return null;}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        private static void hasConfig(object config){}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event, or whether the event bubbles. The answer
        /// indicates whether the event needs firing or not.
        /// </summary>
        /// <param name="eventName"><p>The name of the event to check for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p><c>true</c> if the event is being listened for or bubbles, else <c>false</c></p>
        /// </div>
        /// </returns>
        public static bool hasListener(JsString eventName){return false;}
        /// <summary>
        /// Initialize configuration for this class. a typical example:
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.awesome.Class', {
        /// // The default config
        /// config: {
        /// name: 'Awesome',
        /// isAwesome: true
        /// },
        /// constructor: function(config) {
        /// this.initConfig(config);
        /// }
        /// });
        /// var awesome = new My.awesome.Class({
        /// name: 'Super Awesome'
        /// });
        /// alert(awesome.getName()); // 'Super Awesome'
        /// </code>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Base">Ext.Base</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        protected static Ext.Base initConfig(object config){return null;}
        /// <summary>
        /// Detects whether the form is intended to be used for an upload.
        /// </summary>
        /// <param name="options">
        /// </param>
        private static void isFormUpload(object options){}
        /// <summary>
        /// Determines whether this object has a request outstanding.
        /// </summary>
        /// <param name="request"><p>Defaults to the last transaction</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if there is an outstanding request.</p>
        /// </div>
        /// </returns>
        public static bool isLoading(object request=null){return false;}
        /// <summary>
        /// Shorthand for addManagedListener.
        /// Adds listeners to any Observable object (or <see cref="Ext.dom.Element">Ext.Element</see>) which are automatically removed when this Component is
        /// destroyed.
        /// </summary>
        /// <param name="item"><p>The item to which to add a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        /// <param name="opt"><p>If the <c>ename</c> parameter was an event name, this is the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> options.</p>
        /// </param>
        public static void mon(object item, object ename, System.Delegate fn=null, object scope=null, object opt=null){}
        /// <summary>
        /// Shorthand for removeManagedListener.
        /// Removes listeners that were added by the <see cref="Ext.util.Observable.mon">mon</see> method.
        /// </summary>
        /// <param name="item"><p>The item from which to remove a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        public static void mun(object item, object ename, System.Delegate fn=null, object scope=null){}
        /// <summary>
        /// Creates the appropriate XHR transport for a given request on this browser. On IE
        /// this may be an XDomainRequest rather than an XMLHttpRequest.
        /// </summary>
        /// <param name="options">
        /// </param>
        private static void newRequest(object options){}
        /// <summary>
        /// Shorthand for addListener.
        /// Appends an event handler to this object.  For example:
        /// <code>myGridPanel.on("mouseover", this.onMouseOver, this);
        /// </code>
        /// The method also allows for a single argument to be passed which is a config object
        /// containing properties which specify multiple events. For example:
        /// <code>myGridPanel.on({
        /// cellClick: this.onCellClick,
        /// mouseover: this.onMouseOver,
        /// mouseout: this.onMouseOut,
        /// scope: this // Important. Ensure "this" is correct during handler execution
        /// });
        /// </code>
        /// One can also specify options for each event handler separately:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: this.onCellClick, scope: this, single: true},
        /// mouseover: {fn: panel.onMouseOver, scope: panel}
        /// });
        /// </code>
        /// <em>Names</em> of methods in a specified scope may also be used. Note that
        /// <c>scope</c> MUST be specified to use this option:
        /// <code>myGridPanel.on({
        /// cellClick: {fn: 'onCellClick', scope: this, single: true},
        /// mouseover: {fn: 'onMouseOver', scope: panel}
        /// });
        /// </code>
        /// </summary>
        /// <param name="eventName"><p>The name of the event to listen for.
        /// May also be an object who's property names are event names.</p>
        /// </param>
        /// <param name="fn"><p>The method the event invokes, or <em>if <c>scope</c> is specified, the </em>name* of the method within
        /// the specified <c>scope</c>.  Will be called with arguments
        /// given to <see cref="Ext.util.Observable.fireEvent">fireEvent</see> plus the <c>options</c> parameter described below.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function is
        /// executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration.</p>
        /// <p><strong>Note:</strong> Unlike in ExtJS 3.x, the options object will also be passed as the last
        /// argument to every event handler.</p>
        /// <p>This object may contain any of the following properties:</p>
        /// <ul><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope (<c>this</c> reference) in which the handler function is executed. <strong>If omitted,
        /// defaults to the object which fired the event.</strong></p>
        /// </div></li><li><span>delay</span> : <see cref="Number">Number</see><div><p>The number of milliseconds to delay the invocation of the handler after the event fires.</p>
        /// </div></li><li><span>single</span> : <see cref="bool">Boolean</see><div><p>True to add a handler to handle just the next firing of the event, and then remove itself.</p>
        /// </div></li><li><span>buffer</span> : <see cref="Number">Number</see><div><p>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed
        /// by the specified number of milliseconds. If the event fires again within that time,
        /// the original handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p>
        /// </div></li><li><span>target</span> : <see cref="Ext.util.Observable">Ext.util.Observable</see><div><p>Only call the handler if the event was fired on the target Observable, <em>not</em> if the event
        /// was bubbled up from a child Observable.</p>
        /// </div></li><li><span>element</span> : <see cref="String">String</see><div><p><strong>This option is only valid for listeners bound to <see cref="Ext.Component">Components</see>.</strong>
        /// The name of a Component property which references an element to add a listener to.</p>
        /// <p>  This option is useful during Component construction to add DOM event listeners to elements of
        /// <see cref="Ext.Component">Components</see> which will exist only after the Component is rendered.
        /// For example, to add a click listener to a Panel's body:</p>
        /// <pre><code>  new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
        /// title: 'The title',
        /// listeners: {
        /// click: this.handlePanelClick,
        /// element: 'body'
        /// }
        /// });
        /// </code></pre>
        /// <p><strong>Combining Options</strong></p>
        /// <p>Using the options argument, it is possible to combine different types of listeners:</p>
        /// <p>A delayed, one-time listener.</p>
        /// <pre><code>myPanel.on('hide', this.handleClick, this, {
        /// single: true,
        /// delay: 100
        /// });
        /// </code></pre>
        /// </div></li></ul></param>
        public static void on(object eventName, System.Delegate fn=null, object scope=null, object options=null){}
        /// <summary>
        /// To be called when the request has come back from the server
        /// </summary>
        /// <param name="request">
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The response</p>
        /// </div>
        /// </returns>
        private static object onComplete(object request){return null;}
        /// <summary>
        /// Parameters<li><span>names</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>callback</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="names">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        private static void onConfigUpdate(object names, object callback, object scope){}
        /// <summary>
        /// Fires when the state of the xhr changes
        /// </summary>
        /// <param name="request"><p>The request</p>
        /// </param>
        private static void onStateChange(object request){}
        /// <summary>
        /// Callback handler for the upload function. After we've submitted the form via the iframe this creates a bogus
        /// response object to simulate an XHR and populates its responseText from the now-loaded iframe's document body
        /// (or a textarea inside the body). We then clean up by removing the iframe
        /// </summary>
        /// <param name="frame">
        /// </param>
        /// <param name="options">
        /// </param>
        private static void onUploadComplete(object frame, object options){}
        /// <summary>
        /// Creates and opens an appropriate XHR transport for a given request on this browser.
        /// This logic is contained in an individual method to allow for overrides to process all
        /// of the parameters and options and return a suitable, open connection.
        /// </summary>
        /// <param name="options">
        /// </param>
        /// <param name="requestOptions">
        /// </param>
        /// <param name="async">
        /// </param>
        /// <param name="username">
        /// </param>
        /// <param name="password">
        /// </param>
        private static void openRequest(object options, object requestOptions, object @async, object username, object password){}
        /// <summary>
        /// Checks if the response status was successful
        /// </summary>
        /// <param name="status"><p>The status code</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>An object containing success/status state</p>
        /// </div>
        /// </returns>
        public static object parseStatus(JsNumber status){return null;}
        /// <summary>
        /// Prepares a given class for observable instances. This method is called when a
        /// class derives from this class or uses this class as a mixin.
        /// </summary>
        /// <param name="T"><p>The class constructor to prepare.</p>
        /// </param>
        private static void prepareClass(System.Delegate T){}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by this.
        /// For example if you are extending Grid, you might decide to forward some events from store.
        /// So you can do this inside your initComponent:
        /// <code>this.relayEvents(this.getStore(), ['load']);
        /// </code>
        /// The grid instance will then have an observable 'load' event which will be passed the
        /// parameters of the store's load event and any function fired with the grid's load event
        /// would have access to the grid using the <c>this</c> keyword.
        /// </summary>
        /// <param name="origin"><p>The Observable whose events this object is to relay.</p>
        /// </param>
        /// <param name="events"><p>Array of event names to relay.</p>
        /// </param>
        /// <param name="prefix"><p>A common prefix to prepend to the event names. For example:</p>
        /// <pre><code>this.relayEvents(this.getStore(), ['load', 'clear'], 'store');
        /// </code></pre>
        /// <p>Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.</p>
        /// </param>
        public static void relayEvents(object origin, JsArray<String> events, object prefix=null){}
        /// <summary>
        /// Removes an event handler.
        /// </summary>
        /// <param name="eventName"><p>The type of event the handler was associated with.</p>
        /// </param>
        /// <param name="fn"><p>The handler to remove. <strong>This must be a reference to the function passed into the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> call.</strong></p>
        /// </param>
        /// <param name="scope"><p>The scope originally specified for the handler. It must be the same as the
        /// scope argument specified in the original call to <see cref="Ext.util.Observable.addListener">addListener</see> or the listener will not be removed.</p>
        /// </param>
        public static void removeListener(JsString eventName, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Removes listeners that were added by the mon method.
        /// </summary>
        /// <param name="item"><p>The item from which to remove a listener/listeners.</p>
        /// </param>
        /// <param name="ename"><p>The event name, or an object containing event name properties.</p>
        /// </param>
        /// <param name="fn"><p>If the <c>ename</c> parameter was an event name, this is the handler function.</p>
        /// </param>
        /// <param name="scope"><p>If the <c>ename</c> parameter was an event name, this is the scope (<c>this</c> reference)
        /// in which the handler function is executed.</p>
        /// </param>
        public static void removeManagedListener(object item, object ename, System.Delegate fn=null, object scope=null){}
        /// <summary>
        /// Remove a single managed listener item
        /// </summary>
        /// <param name="isClear"><p>True if this is being called during a clear</p>
        /// </param>
        /// <param name="managedListener"><p>The managed listener item
        /// See removeManagedListener for other args</p>
        /// </param>
        private static void removeManagedListenerItem(bool isClear, object managedListener){}
        /// <summary>
        /// Sends an HTTP request to a remote server.
        /// <strong>Important:</strong> Ajax server requests are asynchronous, and this call will
        /// return before the response has been received. Process any returned data
        /// in a callback function.
        /// <code><see cref="Ext.Ajax.request">Ext.Ajax.request</see>({
        /// url: 'ajax_demo/sample.json',
        /// success: function(response, opts) {
        /// var obj = <see cref="Ext.ExtContext.decode">Ext.decode</see>(response.responseText);
        /// console.dir(obj);
        /// },
        /// failure: function(response, opts) {
        /// console.log('server-side failure with status code ' + response.status);
        /// }
        /// });
        /// </code>
        /// To execute a callback function in the correct scope, use the <c>scope</c> option.
        /// </summary>
        /// <param name="options"><p>An object which may contain the following properties:</p>
        /// <p>(The options object may also contain any other property which might be needed to perform
        /// postprocessing in a callback because it is passed to callback functions.)</p>
        /// <ul><li><span>url</span> : <see cref="String">String</see>/<see cref="Function">Function</see><div><p>The URL to which to send the request, or a function
        /// to call which returns a URL string. The scope of the function is specified by the <c>scope</c> option.
        /// Defaults to the configured <c>url</c>.</p>
        /// </div></li><li><span>params</span> : <see cref="Object">Object</see>/<see cref="String">String</see>/<see cref="Function">Function</see><div><p>An object containing properties which are
        /// used as parameters to the request, a url encoded string or a function to call to get either. The scope
        /// of the function is specified by the <c>scope</c> option.</p>
        /// </div></li><li><span>method</span> : <see cref="String">String</see><div><p>The HTTP method to use
        /// for the request. Defaults to the configured method, or if no method was configured,
        /// "GET" if no parameters are being sent, and "POST" if parameters are being sent.  Note that
        /// the method name is case-sensitive and should be all caps.</p>
        /// </div></li><li><span>callback</span> : <see cref="Function">Function</see><div><p>The function to be called upon receipt of the HTTP response.
        /// The callback is called regardless of success or failure and is passed the following parameters:</p>
        /// <h3>Parameters</h3><ul><li><span>options</span> : <see cref="Object">Object</see><div><p>The parameter to the request call.</p>
        /// </div></li><li><span>success</span> : <see cref="bool">Boolean</see><div><p>True if the request succeeded.</p>
        /// </div></li><li><span>response</span> : <see cref="Object">Object</see><div><p>The XMLHttpRequest object containing the response data.
        /// See <i>www.w3.org/TR/XMLHttpRequest/</i> for details about
        /// accessing elements of the response.</p>
        /// </div></li></ul></div></li><li><span>success</span> : <see cref="Function">Function</see><div><p>The function to be called upon success of the request.
        /// The callback is passed the following parameters:</p>
        /// <h3>Parameters</h3><ul><li><span>response</span> : <see cref="Object">Object</see><div><p>The XMLHttpRequest object containing the response data.</p>
        /// </div></li><li><span>options</span> : <see cref="Object">Object</see><div><p>The parameter to the request call.</p>
        /// </div></li></ul></div></li><li><span>failure</span> : <see cref="Function">Function</see><div><p>The function to be called upon failure of the request.
        /// The callback is passed the following parameters:</p>
        /// <h3>Parameters</h3><ul><li><span>response</span> : <see cref="Object">Object</see><div><p>The XMLHttpRequest object containing the response data.</p>
        /// </div></li><li><span>options</span> : <see cref="Object">Object</see><div><p>The parameter to the request call.</p>
        /// </div></li></ul></div></li><li><span>scope</span> : <see cref="Object">Object</see><div><p>The scope in which to execute the callbacks: The "this" object for
        /// the callback function. If the <c>url</c>, or <c>params</c> options were specified as functions from which to
        /// draw values, then this also serves as the scope for those function calls. Defaults to the browser
        /// window.</p>
        /// </div></li><li><span>timeout</span> : <see cref="Number">Number</see><div><p>The timeout in milliseconds to be used for this request.
        /// Defaults to 30 seconds.</p>
        /// </div></li><li><span>form</span> : <see cref="Ext.dom.Element">Ext.Element</see>/HTMLElement/<see cref="String">String</see><div><p>The <c>&lt;form&gt;</c> Element or the id of the <c>&lt;form&gt;</c>
        /// to pull parameters from.</p>
        /// </div></li><li><span>isUpload</span> : <see cref="bool">Boolean</see><div><p><strong>Only meaningful when used with the <c>form</c> option.</strong></p>
        /// <p>True if the form object is a file upload (will be set automatically if the form was configured
        /// with <strong><c>enctype</c></strong> <c>"multipart/form-data"</c>).</p>
        /// <p>File uploads are not performed using normal "Ajax" techniques, that is they are <strong>not</strong>
        /// performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
        /// DOM <c>&lt;form&gt;</c> element temporarily modified to have its <i>target</i> set to refer to a dynamically
        /// generated, hidden <c>&lt;iframe&gt;</c> which is inserted into the document but removed after the return data
        /// has been gathered.</p>
        /// <p>The server response is parsed by the browser to create the document for the IFRAME. If the
        /// server is using JSON to send the return object, then the <i>Content-Type</i> header must be set to
        /// "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
        /// <p>The response text is retrieved from the document, and a fake XMLHttpRequest object is created
        /// containing a <c>responseText</c> property in order to conform to the requirements of event handlers
        /// and callbacks.</p>
        /// <p>Be aware that file upload packets are sent with the content type <i>multipart/form</i> and some server
        /// technologies (notably JEE) may require some custom processing in order to retrieve parameter names
        /// and parameter values from the packet content.</p>
        /// </div></li><li><span>headers</span> : <see cref="Object">Object</see><div><p>Request headers to set for the request.</p>
        /// </div></li><li><span>xmlData</span> : <see cref="Object">Object</see><div><p>XML document to use for the post. Note: This will be used instead
        /// of params for the post data. Any params will be appended to the URL.</p>
        /// </div></li><li><span>jsonData</span> : <see cref="Object">Object</see>/<see cref="String">String</see><div><p>JSON data to use as the post. Note: This will be used
        /// instead of params for the post data. Any params will be appended to the URL.</p>
        /// </div></li><li><span>disableCaching</span> : <see cref="bool">Boolean</see><div><p>True to add a unique cache-buster param to GET requests.</p>
        /// </div></li><li><span>withCredentials</span> : <see cref="bool">Boolean</see><div><p>True to add the withCredentials property to the XHR object</p>
        /// </div></li></ul></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The request object. This may be used to cancel the request.</p>
        /// </div>
        /// </returns>
        public static object request(object options){return null;}
        /// <summary>
        /// Resumes firing events (see suspendEvents).
        /// If events were suspended using the <c>queueSuspended</c> parameter, then all events fired
        /// during event suspension will be sent to any listeners now.
        /// </summary>
        public static void resumeEvents(){}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>applyIfNotSet</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <param name="applyIfNotSet">
        /// </param>
        private static void setConfig(object config, object applyIfNotSet){}
        /// <summary>
        /// Sets various options such as the url, params for the request
        /// </summary>
        /// <param name="options"><p>The initial options</p>
        /// </param>
        /// <param name="scope"><p>The scope to execute in</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The params for the request</p>
        /// </div>
        /// </returns>
        public static object setOptions(object options, object scope){return null;}
        /// <summary>
        /// Setup all the headers for the request
        /// </summary>
        /// <param name="xhr"><p>The xhr object</p>
        /// </param>
        /// <param name="options"><p>The options for the request</p>
        /// </param>
        /// <param name="data"><p>The data for the request</p>
        /// </param>
        /// <param name="params"><p>The params for the request</p>
        /// </param>
        private static void setupHeaders(object xhr, object options, object data, object @params){}
        /// <summary>
        /// Template method for overriding method
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="options">
        /// </param>
        /// <param name="method">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The modified method</p>
        /// </div>
        /// </returns>
        protected static JsString setupMethod(object options, JsString method){return null;}
        /// <summary>
        /// Template method for overriding params
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="options">
        /// </param>
        /// <param name="params">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The modified params</p>
        /// </div>
        /// </returns>
        protected static JsString setupParams(object options, JsString @params){return null;}
        /// <summary>
        /// Template method for overriding url
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="options">
        /// </param>
        /// <param name="url">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The modified url</p>
        /// </div>
        /// </returns>
        protected static JsString setupUrl(object options, JsString url){return null;}
        /// <summary>
        /// Get the reference to the class from which this object was instantiated. Note that unlike self,
        /// this.statics() is scope-independent and it always returns the class from which it was called, regardless of what
        /// this points to during run-time
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// totalCreated: 0,
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// var statics = this.statics();
        /// alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
        /// // equivalent to: My.Cat.speciesName
        /// alert(this.self.speciesName);   // dependent on 'this'
        /// statics.totalCreated++;
        /// },
        /// clone: function() {
        /// var cloned = new this.self;                      // dependent on 'this'
        /// cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
        /// return cloned;
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// },
        /// constructor: function() {
        /// this.callParent();
        /// }
        /// });
        /// var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));         // alerts 'My.SnowLeopard'
        /// alert(clone.groupName);                 // alerts 'Cat'
        /// alert(My.Cat.totalCreated);             // alerts 3
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Class">Ext.Class</see></span><div>
        /// </div>
        /// </returns>
        protected static Class statics(){return null;}
        /// <summary>
        /// Suspends the firing of all events. (see resumeEvents)
        /// </summary>
        /// <param name="queueSuspended"><p>Pass as true to queue up suspended events to be fired
        /// after the <see cref="Ext.util.Observable.resumeEvents">resumeEvents</see> call instead of discarding all suspended events.</p>
        /// </param>
        public static void suspendEvents(bool queueSuspended){}
        /// <summary>
        /// Shorthand for removeListener.
        /// Removes an event handler.
        /// </summary>
        /// <param name="eventName"><p>The type of event the handler was associated with.</p>
        /// </param>
        /// <param name="fn"><p>The handler to remove. <strong>This must be a reference to the function passed into the
        /// <see cref="Ext.util.Observable.addListener">addListener</see> call.</strong></p>
        /// </param>
        /// <param name="scope"><p>The scope originally specified for the handler. It must be the same as the
        /// scope argument specified in the original call to <see cref="Ext.util.Observable.addListener">addListener</see> or the listener will not be removed.</p>
        /// </param>
        public static void un(JsString eventName, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Uploads a form using a hidden iframe.
        /// </summary>
        /// <param name="form"><p>The form to upload</p>
        /// </param>
        /// <param name="url"><p>The url to post to</p>
        /// </param>
        /// <param name="params"><p>Any extra parameters to pass</p>
        /// </param>
        /// <param name="options"><p>The initial options</p>
        /// </param>
        public static void upload(object form, JsString url, JsString @params, object options){}
        public Ajax(Ext.AjaxConfig config){}
        public Ajax(){}
        public Ajax(params object[] args){}
    }
    #endregion
    #region AjaxConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AjaxConfig : Ext.data.ConnectionConfig
    {
        public AjaxConfig(params object[] args){}
    }
    #endregion
    #region AjaxEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AjaxEvents : Ext.data.ConnectionEvents
    {
        public AjaxEvents(params object[] args){}
    }
    #endregion
}
