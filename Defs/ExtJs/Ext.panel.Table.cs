//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.panel
{
    #region Table
    /// <inheritdocs />
    /// <summary>
    /// <p>TablePanel is the basis of both <see cref="Ext.tree.Panel">TreePanel</see> and <see cref="Ext.grid.Panel">GridPanel</see>.</p>
    /// <p>TablePanel aggregates:</p>
    /// <ul>
    /// <li>a Selection Model</li>
    /// <li>a View</li>
    /// <li>a Store</li>
    /// <li>Scrollers</li>
    /// <li><see cref="Ext.grid.header.Container">Ext.grid.header.Container</see></li>
    /// </ul>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Table : Ext.panel.Panel
    {
        /// <summary>
        /// True to allow deselecting a record. This config is forwarded to Ext.selection.Model.allowDeselect.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool allowDeselect;
        /// <summary>
        /// Adds column line styling
        /// </summary>
        public bool columnLines;
        /// <summary>
        /// An array of column definition objects which define all columns that appear in this
        /// grid. Each column definition provides the header text for the column, and a definition of where the data for that
        /// column comes from.
        /// This can also be a configuration object for a {<see cref="Ext.grid.header.Container">Ext.grid.header.Container</see> HeaderContainer} which may override
        /// certain default configurations if necessary. For example, the special layout may be overridden to use a simpler
        /// layout, or one can set default values shared by all columns:
        /// <code>columns: {
        /// items: [
        /// {
        /// text: "Column A"
        /// dataIndex: "field_A"
        /// },{
        /// text: "Column B",
        /// dataIndex: "field_B"
        /// },
        /// ...
        /// ],
        /// defaults: {
        /// flex: 1
        /// }
        /// }
        /// </code>
        /// </summary>
        public object columns;
        /// <summary>
        /// Defaults to true to enable deferred row rendering.
        /// This allows the View to execute a refresh quickly, with the expensive update of the row structure deferred so
        /// that layouts with GridPanels appear, and lay out more quickly.
        /// </summary>
        public bool deferRowRender;
        /// <summary>
        /// True to disable selection model.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool disableSelection;
        /// <summary>
        /// Default text (html tags are accepted) to display in the Panel body when the Store
        /// is empty. When specified, and the Store is empty, the text will be rendered inside a DIV with the CSS class "x-grid-empty".
        /// </summary>
        public JsString emptyText;
        /// <summary>
        /// False to disable column hiding within this grid.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableColumnHide;
        /// <summary>
        /// False to disable column dragging within this grid.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableColumnMove;
        /// <summary>
        /// False to disable column resizing within this grid.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableColumnResize;
        /// <summary>
        /// True to enable locking support for this grid. Alternatively, locking will also be automatically
        /// enabled if any of the columns in the column configuration contain the locked config option.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool enableLocking;
        /// <summary>
        /// An array of grid Features to be added to this grid. See Ext.grid.feature.Feature for usage.
        /// </summary>
        public Ext.grid.feature.Feature features;
        /// <summary>
        /// Ttrue to force the columns to fit into the available width. Headers are first sized according to configuration,
        /// whether that be a specific width, or flex. Then they are all proportionally changed in width so that the entire
        /// content width is used. For more accurate control, it is more optimal to specify a flex setting on the columns
        /// that are to be stretched &amp; explicit widths on columns that are not.
        /// </summary>
        public bool forceFit;
        /// <summary>
        /// True to hide column headers.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideHeaders;
        /// <summary>
        /// True to enable 'MULTI' selection mode on selection model.
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'MULTI' instead.</p>
        /// </summary>
        public bool multiSelect;
        /// <summary>
        /// Adds row line styling
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool rowLines;
        /// <summary>
        /// Scrollers configuration. Valid values are 'both', 'horizontal' or 'vertical'.
        /// True implies 'both'. False implies 'none'.
        /// Defaults to: <c>true</c>
        /// </summary>
        public object scroll;
        /// <summary>
        /// True to constrain column dragging so that a column cannot be dragged in or out of it's
        /// current group. Only relevant while enableColumnMove is enabled.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool sealedColumns;
        /// <summary>
        /// A selection model instance or config object.  In latter case the selType
        /// config option determines to which type of selection model this config is applied.
        /// </summary>
        public object selModel;
        /// <summary>
        /// An xtype of selection model to use. Defaults to 'rowmodel'. This is used to create selection model if just
        /// a config object or nothing at all given in selModel config.
        /// Defaults to: <c>&quot;rowmodel&quot;</c>
        /// </summary>
        public JsString selType;
        /// <summary>
        /// True to enable 'SIMPLE' selection mode on selection model.
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'SIMPLE' instead.</p>
        /// </summary>
        public bool simpleSelect;
        /// <summary>
        /// False to disable column sorting via clicking the header and via the Sorting menu items.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool sortableColumns;
        /// <summary>
        /// The Store the grid should use as its data source.
        /// </summary>
        public Ext.data.Store store;
        /// <summary>
        /// A config object to be used when configuring the scroll monitor to control
        /// refreshing of data in an "infinite grid".
        /// Configurations of this object allow fine tuning of data caching which can improve performance and usability
        /// of the infinite grid.
        /// </summary>
        public JsObject verticalScroller;
        /// <summary>
        /// The Ext.view.Table used by the grid. Use viewConfig to just supply some config options to
        /// view (instead of creating an entire View instance).
        /// </summary>
        public Ext.view.Table view;
        /// <summary>
        /// A config object that will be applied to the grid's UI view. Any of the config options available for
        /// Ext.view.Table can be specified here. This option is ignored if view is specified.
        /// </summary>
        public JsObject viewConfig;
        /// <summary>
        /// An xtype of view to use. This is automatically set to 'gridview' by Grid
        /// and to 'treeview' by Tree.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString viewType;
        /// <summary>
        /// True to indicate that a view has been injected into the panel.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hasView{get;set;}
        /// <summary>
        /// If you are writing a grid plugin or a {Ext.grid.feature.Feature Feature} which creates a column-based structure which
        /// needs a view refresh when columns are moved, then set this property in the grid.
        /// An example is the built in <see cref="Ext.grid.feature.AbstractSummary">Summary</see> Feature. This creates summary rows, and the
        /// summary columns must be in the same order as the data columns. This plugin sets the <c>optimizedColumnMove</c> to `false.
        /// </summary>
        public bool optimizedColumnMove{get;set;}
        /// <summary>
        /// This method is obsolete in 4.1. The closest equivalent in
        /// 4.1 is doLayout, but it is also possible that no
        /// layout is needed.
        /// <p>This method has been <strong>deprecated</strong> since 4.1</p>
        /// </summary>
        public void determineScrollbars(){}
        /// <summary>
        /// Gets left hand side marker for header resizing.
        /// </summary>
        private void getLhsMarker(){}
        /// <summary>
        /// Gets right hand side marker for header resizing.
        /// </summary>
        private void getRhsMarker(){}
        /// <summary>
        /// Returns the selection model being used and creates it via the configuration if it has not been created already.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.selection.Model">Ext.selection.Model</see></span><div><p>selModel</p>
        /// </div>
        /// </returns>
        public Ext.selection.Model getSelectionModel(){return null;}
        /// <summary>
        /// Returns the store associated with this Panel.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.Store">Ext.data.Store</see></span><div><p>The store</p>
        /// </div>
        /// </returns>
        public Ext.data.Store getStore(){return null;}
        /// <summary>
        /// Gets the view for this panel.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.view.Table">Ext.view.Table</see></span><div>
        /// </div>
        /// </returns>
        public Ext.view.Table getView(){return null;}
        /// <summary>
        /// This method is obsolete in 4.1. The closest equivalent in 4.1 is
        /// Ext.AbstractComponent.updateLayout, but it is also possible that no layout
        /// is needed.
        /// <p>This method has been <strong>deprecated</strong> since 4.1</p>
        /// </summary>
        public void invalidateScroller(){}
        /// <summary>
        /// Tracks when things happen to the view and preserves the horizontal scroll position.
        /// </summary>
        private void onRestoreHorzScroll(){}
        /// <summary>
        /// Fires the TablePanel's viewready event when the view declares that its internal DOM is ready
        /// </summary>
        private void onViewReady(){}
        /// <summary>
        /// Processes UI events from the view. Propagates them to whatever internal Components need to process them.
        /// </summary>
        /// <param name="type"><p>Event type, eg 'click'</p>
        /// </param>
        /// <param name="view"><p>TableView Component</p>
        /// </param>
        /// <param name="cell"><p>Cell HtmlElement the event took place within</p>
        /// </param>
        /// <param name="recordIndex"><p>Index of the associated Store Model (-1 if none)</p>
        /// </param>
        /// <param name="cellIndex"><p>Cell index within the row</p>
        /// </param>
        /// <param name="e"><p>Original event</p>
        /// </param>
        private void processEvent(JsString type, Ext.view.Table view, object cell, JsNumber recordIndex, JsNumber cellIndex, EventObject e){}
        /// <summary>
        /// autoScroll is never valid for all classes which extend TablePanel.
        /// Overrides: <see cref="Ext.Component.setAutoScroll">Ext.Component.setAutoScroll</see>
        /// </summary>
        private void setAutoScroll(){}
        public Table(Ext.panel.TableConfig config){}
        public Table(){}
        public Table(params object[] args){}
    }
    #endregion
    #region TableConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TableConfig : Ext.panel.PanelConfig
    {
        /// <summary>
        /// True to allow deselecting a record. This config is forwarded to Ext.selection.Model.allowDeselect.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool allowDeselect;
        /// <summary>
        /// Adds column line styling
        /// </summary>
        public bool columnLines;
        /// <summary>
        /// An array of column definition objects which define all columns that appear in this
        /// grid. Each column definition provides the header text for the column, and a definition of where the data for that
        /// column comes from.
        /// This can also be a configuration object for a {<see cref="Ext.grid.header.Container">Ext.grid.header.Container</see> HeaderContainer} which may override
        /// certain default configurations if necessary. For example, the special layout may be overridden to use a simpler
        /// layout, or one can set default values shared by all columns:
        /// <code>columns: {
        /// items: [
        /// {
        /// text: "Column A"
        /// dataIndex: "field_A"
        /// },{
        /// text: "Column B",
        /// dataIndex: "field_B"
        /// },
        /// ...
        /// ],
        /// defaults: {
        /// flex: 1
        /// }
        /// }
        /// </code>
        /// </summary>
        public object columns;
        /// <summary>
        /// Defaults to true to enable deferred row rendering.
        /// This allows the View to execute a refresh quickly, with the expensive update of the row structure deferred so
        /// that layouts with GridPanels appear, and lay out more quickly.
        /// </summary>
        public bool deferRowRender;
        /// <summary>
        /// True to disable selection model.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool disableSelection;
        /// <summary>
        /// Default text (html tags are accepted) to display in the Panel body when the Store
        /// is empty. When specified, and the Store is empty, the text will be rendered inside a DIV with the CSS class "x-grid-empty".
        /// </summary>
        public JsString emptyText;
        /// <summary>
        /// False to disable column hiding within this grid.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableColumnHide;
        /// <summary>
        /// False to disable column dragging within this grid.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableColumnMove;
        /// <summary>
        /// False to disable column resizing within this grid.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableColumnResize;
        /// <summary>
        /// True to enable locking support for this grid. Alternatively, locking will also be automatically
        /// enabled if any of the columns in the column configuration contain the locked config option.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool enableLocking;
        /// <summary>
        /// An array of grid Features to be added to this grid. See Ext.grid.feature.Feature for usage.
        /// </summary>
        public Ext.grid.feature.Feature features;
        /// <summary>
        /// Ttrue to force the columns to fit into the available width. Headers are first sized according to configuration,
        /// whether that be a specific width, or flex. Then they are all proportionally changed in width so that the entire
        /// content width is used. For more accurate control, it is more optimal to specify a flex setting on the columns
        /// that are to be stretched &amp; explicit widths on columns that are not.
        /// </summary>
        public bool forceFit;
        /// <summary>
        /// True to hide column headers.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideHeaders;
        /// <summary>
        /// True to enable 'MULTI' selection mode on selection model.
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'MULTI' instead.</p>
        /// </summary>
        public bool multiSelect;
        /// <summary>
        /// Adds row line styling
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool rowLines;
        /// <summary>
        /// Scrollers configuration. Valid values are 'both', 'horizontal' or 'vertical'.
        /// True implies 'both'. False implies 'none'.
        /// Defaults to: <c>true</c>
        /// </summary>
        public object scroll;
        /// <summary>
        /// True to constrain column dragging so that a column cannot be dragged in or out of it's
        /// current group. Only relevant while enableColumnMove is enabled.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool sealedColumns;
        /// <summary>
        /// A selection model instance or config object.  In latter case the selType
        /// config option determines to which type of selection model this config is applied.
        /// </summary>
        public object selModel;
        /// <summary>
        /// An xtype of selection model to use. Defaults to 'rowmodel'. This is used to create selection model if just
        /// a config object or nothing at all given in selModel config.
        /// Defaults to: <c>&quot;rowmodel&quot;</c>
        /// </summary>
        public JsString selType;
        /// <summary>
        /// True to enable 'SIMPLE' selection mode on selection model.
        /// Defaults to: <c>false</c>
        /// <p>This cfg has been <strong>deprecated</strong> since 4.1.1</p>
        /// <p>Use <see cref="Ext.selection.ModelConfig.mode">Ext.selection.Model.mode</see> 'SIMPLE' instead.</p>
        /// </summary>
        public bool simpleSelect;
        /// <summary>
        /// False to disable column sorting via clicking the header and via the Sorting menu items.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool sortableColumns;
        /// <summary>
        /// The Store the grid should use as its data source.
        /// </summary>
        public Ext.data.Store store;
        /// <summary>
        /// A config object to be used when configuring the scroll monitor to control
        /// refreshing of data in an "infinite grid".
        /// Configurations of this object allow fine tuning of data caching which can improve performance and usability
        /// of the infinite grid.
        /// </summary>
        public JsObject verticalScroller;
        /// <summary>
        /// The Ext.view.Table used by the grid. Use viewConfig to just supply some config options to
        /// view (instead of creating an entire View instance).
        /// </summary>
        public Ext.view.Table view;
        /// <summary>
        /// A config object that will be applied to the grid's UI view. Any of the config options available for
        /// Ext.view.Table can be specified here. This option is ignored if view is specified.
        /// </summary>
        public JsObject viewConfig;
        /// <summary>
        /// An xtype of view to use. This is automatically set to 'gridview' by Grid
        /// and to 'treeview' by Tree.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString viewType;
        public TableConfig(params object[] args){}
    }
    #endregion
    #region TableEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TableEvents : Ext.panel.PanelEvents
    {
        /// <summary>
        /// Fires before the click event on the container is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecontainerclick(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the contextmenu event on the container is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecontainercontextmenu(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the dblclick event on the container is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecontainerdblclick(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the mousedown event on the container is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecontainermousedown(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the mouseout event on the container is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecontainermouseout(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the mouseover event on the container is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecontainermouseover(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the mouseup event on the container is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecontainermouseup(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fired before a record is deselected. If any listener returns false, the
        /// deselection is cancelled.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The deselected record</p>
        /// </param>
        /// <param name="index"><p>The row index deselected</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforedeselect(Ext.selection.RowModel @this, Ext.data.Model record, JsNumber index, object eOpts){}
        /// <summary>
        /// Forwarded event from Ext.grid.plugin.Editing.
        /// Fires before editing is triggered. Return false from event handler to stop the editing.
        /// </summary>
        /// <param name="editor">
        /// </param>
        /// <param name="e"><p>An edit event with the following properties:</p>
        /// <ul>
        /// <li>grid - The grid</li>
        /// <li>record - The record being edited</li>
        /// <li>field - The field name being edited</li>
        /// <li>value - The value for the field being edited.</li>
        /// <li>row - The grid table row</li>
        /// <li>column - The grid <see cref="Ext.grid.column.Column">Column</see> defining the column that is being edited.</li>
        /// <li>rowIdx - The row index that is being edited</li>
        /// <li>colIdx - The column index that is being edited</li>
        /// <li>cancel - Set this to true to cancel the edit or return false from your handler.</li>
        /// <li>originalValue - Alias for value (only when using <see cref="Ext.grid.plugin.CellEditing">CellEditing</see>).</li>
        /// </ul>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeedit(Ext.grid.plugin.Editing editor, object e, object eOpts){}
        /// <summary>
        /// Fires before the click event on an item is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemclick(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the contextmenu event on an item is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemcontextmenu(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the dblclick event on an item is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemdblclick(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the mousedown event on an item is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemmousedown(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the mouseenter event on an item is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemmouseenter(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the mouseleave event on an item is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemmouseleave(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires before the mouseup event on an item is processed. Returns false to cancel the default action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeitemmouseup(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fired before a record is selected. If any listener returns false, the
        /// selection is cancelled.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The selected record</p>
        /// </param>
        /// <param name="index"><p>The row index selected</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeselect(Ext.selection.RowModel @this, Ext.data.Model record, JsNumber index, object eOpts){}
        /// <summary>
        /// Forwarded event from Ext.grid.plugin.Editing.
        /// Fires when the user started editing but then cancelled the edit.
        /// </summary>
        /// <param name="editor">
        /// </param>
        /// <param name="e"><p>An edit event with the following properties:</p>
        /// <ul>
        /// <li>grid - The grid</li>
        /// <li>record - The record that was edited</li>
        /// <li>field - The field name that was edited</li>
        /// <li>value - The value being set</li>
        /// <li>row - The grid table row</li>
        /// <li>column - The grid <see cref="Ext.grid.column.Column">Column</see> defining the column that was edited.</li>
        /// <li>rowIdx - The row index that was edited</li>
        /// <li>colIdx - The column index that was edited</li>
        /// <li>view - The grid view</li>
        /// <li>store - The grid store</li>
        /// </ul>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void canceledit(Ext.grid.plugin.Editing editor, object e, object eOpts){}
        /// <summary>
        /// Fired when table cell is clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="td"><p>The TD element that was clicked.</p>
        /// </param>
        /// <param name="cellIndex">
        /// </param>
        /// <param name="record">
        /// </param>
        /// <param name="tr"><p>The TR element that was clicked.</p>
        /// </param>
        /// <param name="rowIndex">
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void cellclick(Ext.view.Table @this, object td, JsNumber cellIndex, Ext.data.Model record, object tr, JsNumber rowIndex, EventObject e, object eOpts){}
        /// <summary>
        /// Fired when table cell is double clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="td"><p>The TD element that was clicked.</p>
        /// </param>
        /// <param name="cellIndex">
        /// </param>
        /// <param name="record">
        /// </param>
        /// <param name="tr"><p>The TR element that was clicked.</p>
        /// </param>
        /// <param name="rowIndex">
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void celldblclick(Ext.view.Table @this, object td, JsNumber cellIndex, Ext.data.Model record, object tr, JsNumber rowIndex, EventObject e, object eOpts){}
        /// <summary>
        /// Parameters<li><span>ct</span> : <see cref="Ext.grid.header.Container">Ext.grid.header.Container</see><div><p>The grid's header Container which encapsulates all column headers.</p>
        /// </div></li><li><span>column</span> : <see cref="Ext.grid.column.Column">Ext.grid.column.Column</see><div><p>The Column header Component which provides the column definition</p>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="ct"><p>The grid's header Container which encapsulates all column headers.</p>
        /// </param>
        /// <param name="column"><p>The Column header Component which provides the column definition</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void columnhide(Ext.grid.header.Container ct, Ext.grid.column.Column column, object eOpts){}
        /// <summary>
        /// Parameters<li><span>ct</span> : <see cref="Ext.grid.header.Container">Ext.grid.header.Container</see><div><p>The grid's header Container which encapsulates all column headers.</p>
        /// </div></li><li><span>column</span> : <see cref="Ext.grid.column.Column">Ext.grid.column.Column</see><div><p>The Column header Component which provides the column definition</p>
        /// </div></li><li><span>fromIdx</span> : <see cref="Number">Number</see><div>
        /// </div></li><li><span>toIdx</span> : <see cref="Number">Number</see><div>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="ct"><p>The grid's header Container which encapsulates all column headers.</p>
        /// </param>
        /// <param name="column"><p>The Column header Component which provides the column definition</p>
        /// </param>
        /// <param name="fromIdx">
        /// </param>
        /// <param name="toIdx">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void columnmove(Ext.grid.header.Container ct, Ext.grid.column.Column column, JsNumber fromIdx, JsNumber toIdx, object eOpts){}
        /// <summary>
        /// Parameters<li><span>ct</span> : <see cref="Ext.grid.header.Container">Ext.grid.header.Container</see><div><p>The grid's header Container which encapsulates all column headers.</p>
        /// </div></li><li><span>column</span> : <see cref="Ext.grid.column.Column">Ext.grid.column.Column</see><div><p>The Column header Component which provides the column definition</p>
        /// </div></li><li><span>width</span> : <see cref="Number">Number</see><div>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="ct"><p>The grid's header Container which encapsulates all column headers.</p>
        /// </param>
        /// <param name="column"><p>The Column header Component which provides the column definition</p>
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void columnresize(Ext.grid.header.Container ct, Ext.grid.column.Column column, JsNumber width, object eOpts){}
        /// <summary>
        /// Parameters<li><span>ct</span> : <see cref="Ext.grid.header.Container">Ext.grid.header.Container</see><div><p>The grid's header Container which encapsulates all column headers.</p>
        /// </div></li><li><span>column</span> : <see cref="Ext.grid.column.Column">Ext.grid.column.Column</see><div><p>The Column header Component which provides the column definition</p>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="ct"><p>The grid's header Container which encapsulates all column headers.</p>
        /// </param>
        /// <param name="column"><p>The Column header Component which provides the column definition</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void columnshow(Ext.grid.header.Container ct, Ext.grid.column.Column column, object eOpts){}
        /// <summary>
        /// Fires when the container is clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void containerclick(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when the container is right clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void containercontextmenu(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when the container is double clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void containerdblclick(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when you move the mouse out of the container.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void containermouseout(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when you move the mouse over the container.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void containermouseover(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when there is a mouse up on the container
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void containermouseup(Ext.view.View @this, EventObject e, object eOpts){}
        /// <summary>
        /// Fired after a record is deselected
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The deselected record</p>
        /// </param>
        /// <param name="index"><p>The row index deselected</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void deselect(Ext.selection.RowModel @this, Ext.data.Model record, JsNumber index, object eOpts){}
        /// <summary>
        /// Forwarded event from Ext.grid.plugin.Editing.
        /// Fires after a editing. Usage example:
        /// <code>grid.on('edit', function(editor, e) {
        /// // commit the changes right after editing finished
        /// e.record.commit();
        /// });
        /// </code>
        /// </summary>
        /// <param name="editor">
        /// </param>
        /// <param name="e"><p>An edit event with the following properties:</p>
        /// <ul>
        /// <li>grid - The grid</li>
        /// <li>record - The record that was edited</li>
        /// <li>field - The field name that was edited</li>
        /// <li>value - The value being set</li>
        /// <li>row - The grid table row</li>
        /// <li>column - The grid <see cref="Ext.grid.column.Column">Column</see> defining the column that was edited.</li>
        /// <li>rowIdx - The row index that was edited</li>
        /// <li>colIdx - The column index that was edited</li>
        /// <li>originalValue - The original value for the field, before the edit (only when using <see cref="Ext.grid.plugin.CellEditing">CellEditing</see>)</li>
        /// <li>originalValues - The original values for the field, before the edit (only when using <see cref="Ext.grid.plugin.RowEditing">RowEditing</see>)</li>
        /// <li>newValues - The new values being set (only when using <see cref="Ext.grid.plugin.RowEditing">RowEditing</see>)</li>
        /// <li>view - The grid view (only when using <see cref="Ext.grid.plugin.RowEditing">RowEditing</see>)</li>
        /// <li>store - The grid store (only when using <see cref="Ext.grid.plugin.RowEditing">RowEditing</see>)</li>
        /// </ul>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void edit(Ext.grid.plugin.Editing editor, object e, object eOpts){}
        /// <summary>
        /// Fires when an item is clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemclick(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when an item is right clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemcontextmenu(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when an item is double clicked.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemdblclick(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when there is a mouse down on an item
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemmousedown(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when the mouse enters an item.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemmouseenter(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when the mouse leaves an item.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemmouseleave(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when there is a mouse up on an item
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The record that belongs to the item</p>
        /// </param>
        /// <param name="item"><p>The item's element</p>
        /// </param>
        /// <param name="index"><p>The item's index</p>
        /// </param>
        /// <param name="e"><p>The raw event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void itemmouseup(Ext.view.View @this, Ext.data.Model record, object item, JsNumber index, EventObject e, object eOpts){}
        /// <summary>
        /// Fired after a record is selected
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="record"><p>The selected record</p>
        /// </param>
        /// <param name="index"><p>The row index selected</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void select(Ext.selection.RowModel @this, Ext.data.Model record, JsNumber index, object eOpts){}
        /// <summary>
        /// Fired after a selection change has occurred
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="selected"><p>The selected records</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void selectionchange(Ext.selection.Model @this, JsArray<Ext.data.Model> selected, object eOpts){}
        /// <summary>
        /// Parameters<li><span>ct</span> : <see cref="Ext.grid.header.Container">Ext.grid.header.Container</see><div><p>The grid's header Container which encapsulates all column headers.</p>
        /// </div></li><li><span>column</span> : <see cref="Ext.grid.column.Column">Ext.grid.column.Column</see><div><p>The Column header Component which provides the column definition</p>
        /// </div></li><li><span>direction</span> : <see cref="String">String</see><div>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="ct"><p>The grid's header Container which encapsulates all column headers.</p>
        /// </param>
        /// <param name="column"><p>The Column header Component which provides the column definition</p>
        /// </param>
        /// <param name="direction">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void sortchange(Ext.grid.header.Container ct, Ext.grid.column.Column column, JsString direction, object eOpts){}
        /// <summary>
        /// Forwarded event from Ext.grid.plugin.Editing.
        /// Fires after editing, but before the value is set in the record. Return false from event handler to
        /// cancel the change.
        /// Usage example showing how to remove the red triangle (dirty record indicator) from some records (not all). By
        /// observing the grid's validateedit event, it can be cancelled if the edit occurs on a targeted row (for example)
        /// and then setting the field's new value in the Record directly:
        /// <code>grid.on('validateedit', function(editor, e) {
        /// var myTargetRow = 6;
        /// if (e.rowIdx == myTargetRow) {
        /// e.cancel = true;
        /// e.record.data[e.field] = e.value;
        /// }
        /// });
        /// </code>
        /// </summary>
        /// <param name="editor">
        /// </param>
        /// <param name="e"><p>An edit event with the following properties:</p>
        /// <ul>
        /// <li>grid - The grid</li>
        /// <li>record - The record being edited</li>
        /// <li>field - The field name being edited</li>
        /// <li>value - The value being set</li>
        /// <li>row - The grid table row</li>
        /// <li>column - The grid <see cref="Ext.grid.column.Column">Column</see> defining the column that is being edited.</li>
        /// <li>rowIdx - The row index that is being edited</li>
        /// <li>colIdx - The column index that is being edited</li>
        /// <li>cancel - Set this to true to cancel the edit or return false from your handler.</li>
        /// <li>originalValue - The original value for the field, before the edit (only when using <see cref="Ext.grid.plugin.CellEditing">CellEditing</see>)</li>
        /// <li>originalValues - The original values for the field, before the edit (only when using <see cref="Ext.grid.plugin.RowEditing">RowEditing</see>)</li>
        /// <li>newValues - The new values being set (only when using <see cref="Ext.grid.plugin.RowEditing">RowEditing</see>)</li>
        /// <li>view - The grid view (only when using <see cref="Ext.grid.plugin.RowEditing">RowEditing</see>)</li>
        /// <li>store - The grid store (only when using <see cref="Ext.grid.plugin.RowEditing">RowEditing</see>)</li>
        /// </ul>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void validateedit(Ext.grid.plugin.Editing editor, object e, object eOpts){}
        /// <summary>
        /// Fires when the grid view is available (use this for selecting a default row).
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void viewready(Ext.panel.Table @this, object eOpts){}
        public TableEvents(params object[] args){}
    }
    #endregion
}
