//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region ClassManager
    /// <summary>
    /// <p><see cref="Ext.ClassManager">Ext.ClassManager</see> manages all classes and handles mapping from string class name to
    /// actual class objects throughout the whole framework. It is not generally accessed directly, rather through
    /// these convenient shorthands:</p>
    /// <ul>
    /// <li><see cref="Ext.ExtContext.define">Ext.define</see></li>
    /// <li><see cref="Ext.ExtContext.create">Ext.create</see></li>
    /// <li><see cref="Ext.ExtContext.widget">Ext.widget</see></li>
    /// <li><see cref="Ext.ExtContext.getClass">Ext.getClass</see></li>
    /// <li><see cref="Ext.ExtContext.getClassName">Ext.getClassName</see></li>
    /// </ul>
    /// <h1>Basic syntax:</h1>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>(className, properties);
    /// </code></pre>
    /// <p>in which <c>properties</c> is an object represent a collection of properties that apply to the class. See
    /// <see cref="Ext.ClassManager.create">create</see> for more detailed instructions.</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('Person', {
    /// name: 'Unknown',
    /// constructor: function(name) {
    /// if (name) {
    /// this.name = name;
    /// }
    /// },
    /// eat: function(foodType) {
    /// alert("I'm eating: " + foodType);
    /// return this;
    /// }
    /// });
    /// var aaron = new Person("Aaron");
    /// aaron.eat("Sandwich"); // alert("I'm eating: Sandwich");
    /// </code></pre>
    /// <p><see cref="Ext.Class">Ext.Class</see> has a powerful set of extensible <see cref="Ext.Class">pre-processors</see> which takes care of
    /// everything related to class creation, including but not limited to inheritance, mixins, configuration, statics, etc.</p>
    /// <h1>Inheritance:</h1>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('Developer', {
    /// extend: 'Person',
    /// constructor: function(name, isGeek) {
    /// this.isGeek = isGeek;
    /// // Apply a method from the parent class' prototype
    /// this.callParent([name]);
    /// },
    /// code: function(language) {
    /// alert("I'm coding in: " + language);
    /// this.eat("Bugs");
    /// return this;
    /// }
    /// });
    /// var jacky = new Developer("Jacky", true);
    /// jacky.code("JavaScript"); // alert("I'm coding in: JavaScript");
    /// // alert("I'm eating: Bugs");
    /// </code></pre>
    /// <p>See <see cref="Ext.Base.callParent">Ext.Base.callParent</see> for more details on calling superclass' methods</p>
    /// <h1>Mixins:</h1>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('CanPlayGuitar', {
    /// playGuitar: function() {
    /// alert("F#...G...D...A");
    /// }
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('CanComposeSongs', {
    /// composeSongs: function() { ... }
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('CanSing', {
    /// sing: function() {
    /// alert("I'm on the highway to hell...")
    /// }
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('Musician', {
    /// extend: 'Person',
    /// mixins: {
    /// canPlayGuitar: 'CanPlayGuitar',
    /// canComposeSongs: 'CanComposeSongs',
    /// canSing: 'CanSing'
    /// }
    /// })
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('CoolPerson', {
    /// extend: 'Person',
    /// mixins: {
    /// canPlayGuitar: 'CanPlayGuitar',
    /// canSing: 'CanSing'
    /// },
    /// sing: function() {
    /// alert("Ahem....");
    /// this.mixins.canSing.sing.call(this);
    /// alert("[Playing guitar at the same time...]");
    /// this.playGuitar();
    /// }
    /// });
    /// var me = new CoolPerson("Jacky");
    /// me.sing(); // alert("Ahem...");
    /// // alert("I'm on the highway to hell...");
    /// // alert("[Playing guitar at the same time...]");
    /// // alert("F#...G...D...A");
    /// </code></pre>
    /// <h1>Config:</h1>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('SmartPhone', {
    /// config: {
    /// hasTouchScreen: false,
    /// operatingSystem: 'Other',
    /// price: 500
    /// },
    /// isExpensive: false,
    /// constructor: function(config) {
    /// this.initConfig(config);
    /// },
    /// applyPrice: function(price) {
    /// this.isExpensive = (price &gt; 500);
    /// return price;
    /// },
    /// applyOperatingSystem: function(operatingSystem) {
    /// if (!(/^(iOS|Android|BlackBerry)$/i).test(operatingSystem)) {
    /// return 'Other';
    /// }
    /// return operatingSystem;
    /// }
    /// });
    /// var iPhone = new SmartPhone({
    /// hasTouchScreen: true,
    /// operatingSystem: 'iOS'
    /// });
    /// iPhone.getPrice(); // 500;
    /// iPhone.getOperatingSystem(); // 'iOS'
    /// iPhone.getHasTouchScreen(); // true;
    /// iPhone.hasTouchScreen(); // true
    /// iPhone.isExpensive; // false;
    /// iPhone.setPrice(600);
    /// iPhone.getPrice(); // 600
    /// iPhone.isExpensive; // true;
    /// iPhone.setOperatingSystem('AlienOS');
    /// iPhone.getOperatingSystem(); // 'Other'
    /// </code></pre>
    /// <h1>Statics:</h1>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('Computer', {
    /// statics: {
    /// factory: function(brand) {
    /// // 'this' in static methods refer to the class itself
    /// return new this(brand);
    /// }
    /// },
    /// constructor: function() { ... }
    /// });
    /// var dellComputer = Computer.factory('Dell');
    /// </code></pre>
    /// <p>Also see <see cref="Ext.Base.statics">Ext.Base.statics</see> and <see cref="Ext.Base.self">Ext.Base.self</see> for more details on accessing
    /// static properties within class methods</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class ClassManager
    {
        /// <summary>
        /// All classes which were defined through the ClassManager. Keys are the
        /// name of the classes and the values are references to the classes.
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject classes{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray createdListeners{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray defaultPostprocessors{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        private static bool enableNamespaceParseCache{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject existCache{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray instantiators{get;set;}
        /// <summary>
        /// Defaults to: <c>{alternateToName: {}, aliasToName: {}, nameToAliases: {}, nameToAlternates: {}}</c>
        /// </summary>
        private static JsObject maps{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject nameCreatedListeners{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject namespaceParseCache{get;set;}
        /// <summary>
        /// </summary>
        private static JsObject namespaceRewrites{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject postprocessors{get;set;}
        /// <summary>
        /// Defines a class.
        /// <p>This method has been <strong>deprecated</strong> since 4.1.0</p>
        /// <p>Use <see cref="Ext.ExtContext.define">Ext.define</see> instead, as that also supports creating overrides.</p>
        /// </summary>
        /// <param name="className">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="createdFn">
        /// </param>
        public static void create(object className, object data, object createdFn=null){}
        /// <summary>
        /// The new Ext.ns, supports namespace rewriting
        /// </summary>
        private static void createNamespaces(){}
        /// <summary>
        /// Parameters<li><span>name</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>args</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="name">
        /// </param>
        /// <param name="args">
        /// </param>
        private static void dynInstantiate(object name, object args=null){}
        /// <summary>
        /// Retrieve a class by its name.
        /// </summary>
        /// <param name="name">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Class">Ext.Class</see></span><div><p>class</p>
        /// </div>
        /// </returns>
        public static Class get(JsString name){return null;}
        /// <summary>
        /// Get the aliases of a class by the class name
        /// </summary>
        /// <param name="name">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>aliases</p>
        /// </div>
        /// </returns>
        public static JsArray getAliasesByName(JsString name){return null;}
        /// <summary>
        /// Get a reference to the class by its alias.
        /// </summary>
        /// <param name="alias">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Class">Ext.Class</see></span><div><p>class</p>
        /// </div>
        /// </returns>
        public static Class getByAlias(JsString alias){return null;}
        /// <summary>
        /// Get the class of the provided object; returns null if it's not an instance
        /// of any class created with Ext.define. This is usually invoked by the shorthand Ext.getClass
        /// <code>var component = new <see cref="Ext.Component">Ext.Component</see>();
        /// <see cref="Ext.ClassManager.getClass">Ext.ClassManager.getClass</see>(component); // returns <see cref="Ext.Component">Ext.Component</see>
        /// </code>
        /// </summary>
        /// <param name="object">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Class">Ext.Class</see></span><div><p>class</p>
        /// </div>
        /// </returns>
        public static Class getClass(object @object){return null;}
        /// <summary>
        /// Returns the displayName property or className or object. When all else fails, returns "Anonymous".
        /// </summary>
        /// <param name="object">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString getDisplayName(object @object){return null;}
        /// <summary>
        /// Parameters<li><span>length</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="length">
        /// </param>
        private static void getInstantiator(object length){}
        /// <summary>
        /// Get the name of the class by its reference or its instance;
        /// usually invoked by the shorthand Ext.getClassName
        /// <code><see cref="Ext.ClassManager.getName">Ext.ClassManager.getName</see>(<see cref="Ext.Action">Ext.Action</see>); // returns "<see cref="Ext.Action">Ext.Action</see>"
        /// </code>
        /// </summary>
        /// <param name="object">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>className</p>
        /// </div>
        /// </returns>
        public static JsString getName(object @object){return null;}
        /// <summary>
        /// Get the name of a class by its alias.
        /// </summary>
        /// <param name="alias">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>className</p>
        /// </div>
        /// </returns>
        public static JsString getNameByAlias(JsString alias){return null;}
        /// <summary>
        /// Get the name of a class by its alternate name.
        /// </summary>
        /// <param name="alternate">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>className</p>
        /// </div>
        /// </returns>
        public static JsString getNameByAlternate(JsString alternate){return null;}
        /// <summary>
        /// Converts a string expression to an array of matching class names. An expression can either refers to class aliases
        /// or class names. Expressions support wildcards:
        /// <code> // returns ['<see cref="Ext.window.Window">Ext.window.Window</see>']
        /// var window = <see cref="Ext.ClassManager.getNamesByExpression">Ext.ClassManager.getNamesByExpression</see>('widget.window');
        /// // returns ['widget.panel', 'widget.window', ...]
        /// var allWidgets = <see cref="Ext.ClassManager.getNamesByExpression">Ext.ClassManager.getNamesByExpression</see>('widget.*');
        /// // returns ['<see cref="Ext.data.Store">Ext.data.Store</see>', 'Ext.data.ArrayProxy', ...]
        /// var allData = <see cref="Ext.ClassManager.getNamesByExpression">Ext.ClassManager.getNamesByExpression</see>('Ext.data.*');
        /// </code>
        /// </summary>
        /// <param name="expression">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see>[]</span><div><p>classNames</p>
        /// </div>
        /// </returns>
        public static JsString[] getNamesByExpression(JsString expression){return null;}
        /// <summary>
        /// </summary>
        private static void instantiate(){}
        /// <summary>
        /// Instantiate a class by its alias; usually invoked by the convenient shorthand Ext.createByAlias
        /// If Ext.Loader is enabled and the class has not been defined yet, it will
        /// attempt to load the class via synchronous loading.
        /// <code>var window = <see cref="Ext.ClassManager.instantiateByAlias">Ext.ClassManager.instantiateByAlias</see>('widget.window', { width: 600, height: 800, ... });
        /// </code>
        /// </summary>
        /// <param name="alias">
        /// </param>
        /// <param name="args"><p>Additional arguments after the alias will be passed to the
        /// class constructor.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>instance</p>
        /// </div>
        /// </returns>
        public static object instantiateByAlias(JsString alias, object args=null){return null;}
        /// <summary>
        /// Checks if a class has already been created.
        /// </summary>
        /// <param name="className">
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>exist</p>
        /// </div>
        /// </returns>
        public static bool isCreated(JsString className){return false;}
        /// <summary>
        /// Parameters<li><span>fn</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>className</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="fn">
        /// </param>
        /// <param name="scope">
        /// </param>
        /// <param name="className">
        /// </param>
        private static void onCreated(System.Delegate fn, object scope, object className){}
        /// <summary>
        /// Supports namespace rewriting
        /// </summary>
        /// <param name="namespace">
        /// </param>
        private static void parseNamespace(object @namespace){}
        /// <summary>
        /// Register a post-processor function.
        /// </summary>
        /// <param name="name">
        /// </param>
        /// <param name="postprocessor">
        /// </param>
        private static void registerPostprocessor(JsString name, System.Delegate postprocessor){}
        /// <summary>
        /// Sets a name reference to a class.
        /// </summary>
        /// <param name="name">
        /// </param>
        /// <param name="value">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.ClassManager">Ext.ClassManager</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public static ClassManager set(JsString name, object value){return null;}
        /// <summary>
        /// Register the alias for a class.
        /// </summary>
        /// <param name="cls"><p>a reference to a class or a className</p>
        /// </param>
        /// <param name="alias"><p>Alias to use when referring to this class</p>
        /// </param>
        public static void setAlias(object cls, JsString alias){}
        /// <summary>
        /// Insert this post-processor at a specific position in the stack, optionally relative to
        /// any existing post-processor
        /// </summary>
        /// <param name="name"><p>The post-processor name. Note that it needs to be registered with
        /// <see cref="Ext.ClassManager">registerPostprocessor</see> before this</p>
        /// </param>
        /// <param name="offset"><p>The insertion position. Four possible values are:
        /// 'first', 'last', or: 'before', 'after' (relative to the name provided in the third argument)</p>
        /// </param>
        /// <param name="relativeName">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.ClassManager">Ext.ClassManager</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        private static ClassManager setDefaultPostprocessorPosition(JsString name, JsString offset, JsString relativeName){return null;}
        /// <summary>
        /// Set the default post processors array stack which are applied to every class.
        /// </summary>
        /// <param name="The"><p>name of a registered post processor or an array of registered names.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.ClassManager">Ext.ClassManager</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        private static ClassManager setDefaultPostprocessors(object The){return null;}
        /// <summary>
        /// Creates a namespace and assign the value to the created object
        /// <code><see cref="Ext.ClassManager.setNamespace">Ext.ClassManager.setNamespace</see>('MyCompany.pkg.Example', someObject);
        /// alert(MyCompany.pkg.Example === someObject); // alerts true
        /// </code>
        /// </summary>
        /// <param name="name">
        /// </param>
        /// <param name="value">
        /// </param>
        public static void setNamespace(JsString name, object value){}
        /// <summary>
        /// Parameters<li><span>className</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="className">
        /// </param>
        private static void triggerCreated(object className){}
        public ClassManager(ClassManagerConfig config){}
        public ClassManager(){}
        public ClassManager(params object[] args){}
    }
    #endregion
    #region ClassManagerConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ClassManagerConfig
    {
        public ClassManagerConfig(params object[] args){}
    }
    #endregion
    #region ClassManagerEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ClassManagerEvents
    {
        public ClassManagerEvents(params object[] args){}
    }
    #endregion
}
