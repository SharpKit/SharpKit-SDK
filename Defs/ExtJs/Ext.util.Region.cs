//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region Region
    /// <inheritdocs />
    /// <summary>
    /// <p>This class represents a rectangular region in X,Y space, and performs geometric
    /// transformations or tests upon the region.</p>
    /// <p>This class may be used to compare the document regions occupied by elements.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Region : Ext.Base
    {
        /// <summary>
        /// Creates a region from the bounding sides.
        /// </summary>
        /// <param name="top"><p>Top The topmost pixel of the Region.</p>
        /// </param>
        /// <param name="right"><p>Right The rightmost pixel of the Region.</p>
        /// </param>
        /// <param name="bottom"><p>Bottom The bottom pixel of the Region.</p>
        /// </param>
        /// <param name="left"><p>Left The leftmost pixel of the Region.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public Region(JsNumber top, JsNumber right, JsNumber bottom, JsNumber left){}
        /// <summary>
        /// Modifies the current region to be adjusted by offsets.
        /// </summary>
        /// <param name="top"><p>top offset</p>
        /// </param>
        /// <param name="right"><p>right offset</p>
        /// </param>
        /// <param name="bottom"><p>bottom offset</p>
        /// </param>
        /// <param name="left"><p>left offset</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Region adjust(JsNumber top, JsNumber right, JsNumber bottom, JsNumber left){return null;}
        /// <summary>
        /// Modifies the current region to be constrained to the targetRegion.
        /// </summary>
        /// <param name="targetRegion">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Region constrainTo(Region targetRegion){return null;}
        /// <summary>
        /// Checks if this region completely contains the region that is passed in.
        /// </summary>
        /// <param name="region">
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool contains(Region region){return false;}
        /// <summary>
        /// Create a copy of this Region.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div>
        /// </div>
        /// </returns>
        public Region copy(){return null;}
        /// <summary>
        /// Copy the values of another Region to this Region
        /// </summary>
        /// <param name="p"><p>The region to copy from.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>This Region</p>
        /// </div>
        /// </returns>
        public Region copyFrom(Region p){return null;}
        /// <summary>
        /// Check whether this region is equivalent to the given region
        /// </summary>
        /// <param name="region"><p>The region to compare with</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool equals(Region region){return false;}
        /// <summary>
        /// Get the offset amount of a point outside the region
        /// </summary>
        /// <param name="axis">
        /// </param>
        /// <param name="p"><p>the point</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Offset">Ext.util.Offset</see></span><div>
        /// </div>
        /// </returns>
        public Offset getOutOfBoundOffset(object axis=null, object p=null){return null;}
        /// <summary>
        /// Get the offset amount on the x-axis
        /// </summary>
        /// <param name="p"><p>the offset</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getOutOfBoundOffsetX(JsNumber p){return null;}
        /// <summary>
        /// Get the offset amount on the y-axis
        /// </summary>
        /// <param name="p"><p>the offset</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getOutOfBoundOffsetY(JsNumber p){return null;}
        /// <summary>
        /// Get the width / height of this region
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>an object with width and height properties</p>
        /// </div>
        /// </returns>
        private object getSize(){return null;}
        /// <summary>
        /// Checks if this region intersects the region passed in.
        /// </summary>
        /// <param name="region">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see>/<see cref="bool">Boolean</see></span><div><p>Returns the intersected region or false if there is no intersection.</p>
        /// </div>
        /// </returns>
        public object intersect(Region region){return null;}
        /// <summary>
        /// Check whether the point / offset is out of bound
        /// </summary>
        /// <param name="axis">
        /// </param>
        /// <param name="p"><p>the point / offset</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool isOutOfBound(object axis=null, object p=null){return false;}
        /// <summary>
        /// Check whether the offset is out of bound in the x-axis
        /// </summary>
        /// <param name="p"><p>the offset</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool isOutOfBoundX(JsNumber p){return false;}
        /// <summary>
        /// Check whether the offset is out of bound in the y-axis
        /// </summary>
        /// <param name="p"><p>the offset</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool isOutOfBoundY(JsNumber p){return false;}
        /// <summary>
        /// Restrict a point within the region by a certain factor.
        /// </summary>
        /// <param name="axis">
        /// </param>
        /// <param name="p">
        /// </param>
        /// <param name="factor">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Point">Ext.util.Point</see>/<see cref="Ext.util.Offset">Ext.util.Offset</see>/<see cref="Object">Object</see>/<see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        private object restrict(object axis=null, object p=null, object factor=null){return null;}
        /// <summary>
        /// Restrict an offset within the region by a certain factor, on the x-axis
        /// </summary>
        /// <param name="p">
        /// </param>
        /// <param name="factor"><p>The factor.</p>
        /// <p>Defaults to: <c>1</c></p></param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        private JsNumber restrictX(JsNumber p, object factor=null){return null;}
        /// <summary>
        /// Restrict an offset within the region by a certain factor, on the y-axis
        /// </summary>
        /// <param name="p">
        /// </param>
        /// <param name="factor"><p>The factor, defaults to 1</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        private JsNumber restrictY(JsNumber p, object factor=null){return null;}
        /// <summary>
        /// Round all the properties of this region
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>this This Region</p>
        /// </div>
        /// </returns>
        public Region round(){return null;}
        /// <summary>
        /// Translate this region by the given offset amount
        /// </summary>
        /// <param name="x"><p>Object containing the <c>x</c> and <c>y</c> properties.
        /// Or the x value is using the two argument form.</p>
        /// </param>
        /// <param name="y"><p>The y value unless using an Offset object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>this This Region</p>
        /// </div>
        /// </returns>
        public Region translateBy(object x, JsNumber y){return null;}
        /// <summary>
        /// Returns the smallest region that contains the current AND targetRegion.
        /// </summary>
        /// <param name="region">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>a new region</p>
        /// </div>
        /// </returns>
        public Region union(Region region){return null;}
        /// <summary>
        /// Creates a Region from a "box" Object which contains four numeric properties top, right, bottom and left.
        /// </summary>
        /// <param name="o"><p>An object with <c>top</c>, <c>right</c>, <c>bottom</c> and <c>left</c> properties.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>region The Region constructed based on the passed object</p>
        /// </div>
        /// </returns>
        public static Region from(object o){return null;}
        /// <summary>
        /// Retrieves an Ext.util.Region for a particular element.
        /// </summary>
        /// <param name="el"><p>An element ID, htmlElement or <see cref="Ext.dom.Element">Ext.Element</see> representing an element in the document.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>region</p>
        /// </div>
        /// </returns>
        public static Region getRegion(object el){return null;}
        public Region(RegionConfig config){}
        public Region(){}
        public Region(params object[] args){}
    }
    #endregion
    #region RegionConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class RegionConfig : Ext.BaseConfig
    {
        public RegionConfig(params object[] args){}
    }
    #endregion
    #region RegionEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class RegionEvents : Ext.BaseEvents
    {
        public RegionEvents(params object[] args){}
    }
    #endregion
}
