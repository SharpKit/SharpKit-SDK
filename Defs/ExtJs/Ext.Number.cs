//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region Number
    /// <summary>
    /// <p>A collection of useful static methods to deal with numbers</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Number
    {
        /// <summary>
        /// Checks whether or not the passed number is within a desired range.  If the number is already within the
        /// range it is returned, otherwise the min or max value is returned depending on which side of the range is
        /// exceeded. Note that this method returns the constrained value but does not change the current number.
        /// </summary>
        /// <param name="number"><p>The number to check</p>
        /// </param>
        /// <param name="min"><p>The minimum number in the range</p>
        /// </param>
        /// <param name="max"><p>The maximum number in the range</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The constrained value if outside the range, otherwise the current value</p>
        /// </div>
        /// </returns>
        public static JsNumber constrain(JsNumber number, JsNumber min, JsNumber max){return null;}
        /// <summary>
        /// Validate that a value is numeric and convert it to a number if necessary. Returns the specified default value if
        /// it is not.
        /// <code><see cref="Ext.Number.from">Ext.Number.from</see>('1.23', 1); // returns 1.23
        /// <see cref="Ext.Number.from">Ext.Number.from</see>('abc', 1); // returns 1
        /// </code>
        /// </summary>
        /// <param name="value">
        /// </param>
        /// <param name="defaultValue"><p>The value to return if the original value is non-numeric</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>value, if numeric, defaultValue otherwise</p>
        /// </div>
        /// </returns>
        public static JsNumber from(object value, JsNumber defaultValue){return null;}
        /// <summary>
        /// Returns a random integer between the specified range (inclusive)
        /// </summary>
        /// <param name="from"><p>Lowest value to return.</p>
        /// </param>
        /// <param name="to"><p>Highst value to return.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>A random integer within the specified range.</p>
        /// </div>
        /// </returns>
        public static JsNumber randomInt(JsNumber from, JsNumber to){return null;}
        /// <summary>
        /// Snaps the passed number between stopping points based upon a passed increment value.
        /// The difference between this and <see cref="Ext.Number.snapInRange">snapInRange</see> is that <see cref="Ext.Number.snapInRange">snapInRange</see> uses the minValue
        /// when calculating snap points:
        /// <code>r = <see cref="Ext.Number.snap">Ext.Number.snap</see>(56, 2, 55, 65);        // Returns 56 - snap points are zero based
        /// r = <see cref="Ext.Number.snapInRange">Ext.Number.snapInRange</see>(56, 2, 55, 65); // Returns 57 - snap points are based from minValue
        /// </code>
        /// </summary>
        /// <param name="value"><p>The unsnapped value.</p>
        /// </param>
        /// <param name="increment"><p>The increment by which the value must move.</p>
        /// </param>
        /// <param name="minValue"><p>The minimum value to which the returned value must be constrained. Overrides the increment.</p>
        /// </param>
        /// <param name="maxValue"><p>The maximum value to which the returned value must be constrained. Overrides the increment.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The value of the nearest snap target.</p>
        /// </div>
        /// </returns>
        public static JsNumber snap(JsNumber value, JsNumber increment, JsNumber minValue, JsNumber maxValue){return null;}
        /// <summary>
        /// Snaps the passed number between stopping points based upon a passed increment value.
        /// The difference between this and <see cref="Ext.Number.snap">snap</see> is that <see cref="Ext.Number.snap">snap</see> does not use the minValue
        /// when calculating snap points:
        /// <code>r = <see cref="Ext.Number.snap">Ext.Number.snap</see>(56, 2, 55, 65);        // Returns 56 - snap points are zero based
        /// r = <see cref="Ext.Number.snapInRange">Ext.Number.snapInRange</see>(56, 2, 55, 65); // Returns 57 - snap points are based from minValue
        /// </code>
        /// </summary>
        /// <param name="value"><p>The unsnapped value.</p>
        /// </param>
        /// <param name="increment"><p>The increment by which the value must move.</p>
        /// </param>
        /// <param name="minValue"><p>The minimum value to which the returned value must be constrained.</p>
        /// <p>Defaults to: <c>0</c></p></param>
        /// <param name="maxValue"><p>The maximum value to which the returned value must be constrained.</p>
        /// <p>Defaults to: <c>Infinity</c></p></param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The value of the nearest snap target.</p>
        /// </div>
        /// </returns>
        public static JsNumber snapInRange(JsNumber value, JsNumber increment, object minValue=null, object maxValue=null){return null;}
        /// <summary>
        /// Formats a number using fixed-point notation
        /// </summary>
        /// <param name="value"><p>The number to format</p>
        /// </param>
        /// <param name="precision"><p>The number of digits to show after the decimal point</p>
        /// </param>
        public static JsString toFixed(JsNumber value, JsNumber precision){return null;}
        public Number(Ext.NumberConfig config){}
        public Number(){}
        public Number(params object[] args){}
    }
    #endregion
    #region NumberConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class NumberConfig
    {
        public NumberConfig(params object[] args){}
    }
    #endregion
    #region NumberEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class NumberEvents
    {
        public NumberEvents(params object[] args){}
    }
    #endregion
}
