//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.layout.component
{
    #region Auto
    /// <inheritdocs />
    /// <summary>
    /// <p>The class is the default component layout for <see cref="Ext.Component">Ext.Component</see> when no explicit
    /// <c><see cref="Ext.ComponentConfig.componentLayout">componentLayout</see></c> is configured.</p>
    /// <p>This class uses template methods to perform the individual aspects of measurement,
    /// calculation and publication of results. The methods called depend on the component's
    /// <see cref="Ext.AbstractComponent.getSizeModel">size model</see>.</p>
    /// <h2>configured / calculated</h2>
    /// <p>In either of these size models, the dimension of the outer element is of a known size.
    /// The size is found in the <c>ownerContext</c> (the <see cref="Ext.layout.ContextItem">Ext.layout.ContextItem</see> for the owner
    /// component) as either "width" or "height". This value, if available, is passed to the
    /// <c>publishInnerWidth</c> or <c>publishInnerHeight</c> method, respectively.</p>
    /// <h2>shrinkWrap</h2>
    /// <p>When a dimension uses the <c>shrinkWrap</c> size model, that means the content is measured,
    /// then the outer (owner) size is calculated and published.</p>
    /// <p>For example, for a shrinkWrap width, the following sequence of calls are made:</p>
    /// <ul>
    /// <li><c>Ext.layout.component.Component#measureContentWidth</c></li>
    /// <li><c>publishOwnerWidth</c>
    /// <ul>
    /// <li><c>calculateOwnerWidthFromContentWidth</c></li>
    /// <li><c>publishInnerWidth</c> (in the event of hitting a min/maxWidth constraint)</li>
    /// </ul>
    /// </li>
    /// </ul>
    /// <h2>natural</h2>
    /// <p>When a dimension uses the <c>natural</c> size model, the measurement is made on the outer
    /// (owner) element. This size is then used to determine the content area in much the same
    /// way as if the outer element had a <c>configured</c> or <c>calculated</c> size model.</p>
    /// <ul>
    /// <li><c>Ext.layout.component.Component#measureOwnerWidth</c></li>
    /// <li><c>publishInnerWidth</c></li>
    /// </ul>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Auto : Ext.layout.component.Component
    {
        /// <summary>
        /// When publishing height of an auto Component, it is usually not written to the DOM.
        /// Setting this to true overrides this behaviour.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool setHeightInDom;
        /// <summary>
        /// When publishing width of an auto Component, it is usually not written to the DOM.
        /// Setting this to true overrides this behaviour.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool setWidthInDom;
        public Auto(Ext.layout.component.AutoConfig config){}
        public Auto(){}
        public Auto(params object[] args){}
    }
    #endregion
    #region AutoConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AutoConfig : Ext.layout.component.ComponentConfig
    {
        /// <summary>
        /// When publishing height of an auto Component, it is usually not written to the DOM.
        /// Setting this to true overrides this behaviour.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool setHeightInDom;
        /// <summary>
        /// When publishing width of an auto Component, it is usually not written to the DOM.
        /// Setting this to true overrides this behaviour.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool setWidthInDom;
        public AutoConfig(params object[] args){}
    }
    #endregion
    #region AutoEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AutoEvents : Ext.layout.component.ComponentEvents
    {
        public AutoEvents(params object[] args){}
    }
    #endregion
}
