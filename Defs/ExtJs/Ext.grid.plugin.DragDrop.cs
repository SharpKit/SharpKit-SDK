//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.grid.plugin
{
    #region DragDrop
    /// <inheritdocs />
    /// <summary>
    /// <p>This plugin provides drag and/or drop functionality for a GridView.</p>
    /// <p>It creates a specialized instance of <see cref="Ext.dd.DragZone">DragZone</see> which knows how to drag out of a <see cref="Ext.grid.View">GridView</see> and loads the data object which is passed to a cooperating <see cref="Ext.dd.DragZone">DragZone</see>'s
    /// methods with the following properties:</p>
    /// <ul>
    /// <li><p><c>copy</c> : Boolean</p>
    /// <p>The value of the GridView's <c>copy</c> property, or <c>true</c> if the GridView was configured with <c>allowCopy: true</c> <em>and</em>
    /// the control key was pressed when the drag operation was begun.</p></li>
    /// <li><p><c>view</c> : GridView</p>
    /// <p>The source GridView from which the drag originated.</p></li>
    /// <li><p><c>ddel</c> : HtmlElement</p>
    /// <p>The drag proxy element which moves with the mouse</p></li>
    /// <li><p><c>item</c> : HtmlElement</p>
    /// <p>The GridView node upon which the mousedown event was registered.</p></li>
    /// <li><p><c>records</c> : Array</p>
    /// <p>An Array of <see cref="Ext.data.Model">Model</see>s representing the selected data being dragged from the source GridView.</p></li>
    /// </ul>
    /// <p>It also creates a specialized instance of <see cref="Ext.dd.DropZone">Ext.dd.DropZone</see> which cooperates with other DropZones which are
    /// members of the same ddGroup which processes such data objects.</p>
    /// <p>Adding this plugin to a view means that two new events may be fired from the client GridView, <c><see cref="Ext.grid.plugin.DragDropEvents.beforedrop">beforedrop</see></c> and <c><see cref="Ext.grid.plugin.DragDropEvents.drop">drop</see></c></p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// storeId:'simpsonsStore',
    /// fields:['name'],
    /// data: [["Lisa"], ["Bart"], ["Homer"], ["Marge"]],
    /// proxy: {
    /// type: 'memory',
    /// reader: 'array'
    /// }
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
    /// store: 'simpsonsStore',
    /// columns: [
    /// {header: 'Name',  dataIndex: 'name', flex: true}
    /// ],
    /// viewConfig: {
    /// plugins: {
    /// ptype: 'gridviewdragdrop',
    /// dragText: 'Drag and drop to reorganize'
    /// }
    /// },
    /// height: 200,
    /// width: 400,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class DragDrop : AbstractPlugin
    {
        /// <summary>
        /// A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and
        /// DropZone used by this plugin will only interact with other drag drop objects in the same group.
        /// Defaults to: <c>&quot;GridDD&quot;</c>
        /// </summary>
        public JsString ddGroup;
        /// <summary>
        /// The ddGroup to which the DragZone will belong.
        /// This defines which other DropZones the DragZone will interact with. Drag/DropZones only interact with other
        /// Drag/DropZones which are members of the same ddGroup.
        /// </summary>
        public JsString dragGroup;
        /// <summary>
        /// The text to show while dragging.
        /// Two placeholders can be used in the text:
        /// <li><c>{0}</c> The number of selected items.</li>
        /// <li><c>{1}</c> 's' when more than 1 items (only useful for English).</li>
        /// Defaults to: <c>&quot;{0} selected row{1}&quot;</c>
        /// </summary>
        public JsString dragText;
        /// <summary>
        /// The ddGroup to which the DropZone will belong.
        /// This defines which other DragZones the DropZone will interact with. Drag/DropZones only interact with other
        /// Drag/DropZones which are members of the same ddGroup.
        /// </summary>
        public JsString dropGroup;
        /// <summary>
        /// False to disallow dragging items from the View.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableDrag;
        /// <summary>
        /// False to disallow the View from accepting drop gestures.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableDrop;
        public DragDrop(Ext.grid.plugin.DragDropConfig config){}
        public DragDrop(){}
        public DragDrop(params object[] args){}
    }
    #endregion
    #region DragDropConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DragDropConfig : AbstractPluginConfig
    {
        /// <summary>
        /// A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and
        /// DropZone used by this plugin will only interact with other drag drop objects in the same group.
        /// Defaults to: <c>&quot;GridDD&quot;</c>
        /// </summary>
        public JsString ddGroup;
        /// <summary>
        /// The ddGroup to which the DragZone will belong.
        /// This defines which other DropZones the DragZone will interact with. Drag/DropZones only interact with other
        /// Drag/DropZones which are members of the same ddGroup.
        /// </summary>
        public JsString dragGroup;
        /// <summary>
        /// The text to show while dragging.
        /// Two placeholders can be used in the text:
        /// <li><c>{0}</c> The number of selected items.</li>
        /// <li><c>{1}</c> 's' when more than 1 items (only useful for English).</li>
        /// Defaults to: <c>&quot;{0} selected row{1}&quot;</c>
        /// </summary>
        public JsString dragText;
        /// <summary>
        /// The ddGroup to which the DropZone will belong.
        /// This defines which other DragZones the DropZone will interact with. Drag/DropZones only interact with other
        /// Drag/DropZones which are members of the same ddGroup.
        /// </summary>
        public JsString dropGroup;
        /// <summary>
        /// False to disallow dragging items from the View.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableDrag;
        /// <summary>
        /// False to disallow the View from accepting drop gestures.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableDrop;
        public DragDropConfig(params object[] args){}
    }
    #endregion
    #region DragDropEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DragDropEvents : AbstractPluginEvents
    {
        /// <summary>
        /// This event is fired through the GridView. Add listeners to the GridView object
        /// Fired when a drop gesture has been triggered by a mouseup event in a valid drop position in the GridView.
        /// </summary>
        /// <param name="node"><p>The GridView node <strong>if any</strong> over which the mouse was positioned.</p>
        /// <p>Returning <c>false</c> to this event signals that the drop gesture was invalid, and if the drag proxy will animate
        /// back to the point from which the drag began.</p>
        /// <p>Returning <c>0</c> To this event signals that the data transfer operation should not take place, but that the gesture
        /// was valid, and that the repair operation should not take place.</p>
        /// <p>Any other return value continues with the data transfer operation.</p>
        /// </param>
        /// <param name="data"><p>The data object gathered at mousedown time by the cooperating <see cref="Ext.dd.DragZone">DragZone</see>'s <see cref="Ext.dd.DragZone.getDragData">getDragData</see> method it contains the following properties:</p>
        /// <ul>
        /// <li><p>copy : Boolean</p>
        /// <p>The value of the GridView's <c>copy</c> property, or <c>true</c> if the GridView was configured with <c>allowCopy: true</c> and
        /// the control key was pressed when the drag operation was begun</p></li>
        /// <li><p>view : GridView</p>
        /// <p>The source GridView from which the drag originated.</p></li>
        /// <li><p>ddel : HtmlElement</p>
        /// <p>The drag proxy element which moves with the mouse</p></li>
        /// <li><p>item : HtmlElement</p>
        /// <p>The GridView node upon which the mousedown event was registered.</p></li>
        /// <li><p>records : Array</p>
        /// <p>An Array of <see cref="Ext.data.Model">Model</see>s representing the selected data being dragged from the source GridView.</p></li>
        /// </ul>
        /// </param>
        /// <param name="overModel"><p>The Model over which the drop gesture took place.</p>
        /// </param>
        /// <param name="dropPosition"><p><c>"before"</c> or <c>"after"</c> depending on whether the mouse is above or below the midline
        /// of the node.</p>
        /// </param>
        /// <param name="dropFunction"><p>A function to call to complete the data transfer operation and either move or copy Model instances from the
        /// source View's Store to the destination View's Store.</p>
        /// <p>This is useful when you want to perform some kind of asynchronous processing before confirming the drop, such as
        /// an <see cref="Ext.window.MessageBox.confirm">confirm</see> call, or an Ajax request.</p>
        /// <p>Return <c>0</c> from this event handler, and call the <c>dropFunction</c> at any time to perform the data transfer.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforedrop(object node, object data, Ext.data.Model overModel, JsString dropPosition, System.Delegate dropFunction, object eOpts){}
        /// <summary>
        /// This event is fired through the GridView. Add listeners to the GridView object Fired when a drop operation
        /// has been completed and the data has been moved or copied.
        /// </summary>
        /// <param name="node"><p>The GridView node <strong>if any</strong> over which the mouse was positioned.</p>
        /// </param>
        /// <param name="data"><p>The data object gathered at mousedown time by the cooperating <see cref="Ext.dd.DragZone">DragZone</see>'s <see cref="Ext.dd.DragZone.getDragData">getDragData</see> method it contains the following properties:</p>
        /// <ul>
        /// <li><p>copy : Boolean</p>
        /// <p>The value of the GridView's <c>copy</c> property, or <c>true</c> if the GridView was configured with <c>allowCopy: true</c> and
        /// the control key was pressed when the drag operation was begun</p></li>
        /// <li><p>view : GridView</p>
        /// <p>The source GridView from which the drag originated.</p></li>
        /// <li><p>ddel : HtmlElement</p>
        /// <p>The drag proxy element which moves with the mouse</p></li>
        /// <li><p>item : HtmlElement</p>
        /// <p>The GridView node upon which the mousedown event was registered.</p></li>
        /// <li><p>records : Array</p>
        /// <p>An Array of <see cref="Ext.data.Model">Model</see>s representing the selected data being dragged from the source GridView.</p></li>
        /// </ul>
        /// </param>
        /// <param name="overModel"><p>The Model over which the drop gesture took place.</p>
        /// </param>
        /// <param name="dropPosition"><p><c>"before"</c> or <c>"after"</c> depending on whether the mouse is above or below the midline
        /// of the node.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void drop(object node, object data, Ext.data.Model overModel, JsString dropPosition, object eOpts){}
        public DragDropEvents(params object[] args){}
    }
    #endregion
}
