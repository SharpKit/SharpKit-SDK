//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.chart.series
{
    #region Gauge
    /// <inheritdocs />
    /// <summary>
    /// <p>Creates a Gauge Chart. Gauge Charts are used to show progress in a certain variable. There are two ways of using the Gauge chart.
    /// One is setting a store element into the Gauge and selecting the field to be used from that store. Another one is instantiating the
    /// visualization and using the <c>setValue</c> method to adjust the value you want.</p>
    /// <p>An example of Gauge visualization:</p>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.JsonStore">Ext.data.JsonStore</see>', {
    /// fields: ['data'],
    /// data: [
    /// { 'value':80 }
    /// ]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// store: store,
    /// width: 400,
    /// height: 250,
    /// animate: true,
    /// insetPadding: 30,
    /// axes: [{
    /// type: 'gauge',
    /// position: 'gauge',
    /// minimum: 0,
    /// maximum: 100,
    /// steps: 10,
    /// margin: 10
    /// }],
    /// series: [{
    /// type: 'gauge',
    /// field: 'value',
    /// donut: 30,
    /// colorSet: ['#F49D10', '#ddd']
    /// }]
    /// });
    /// <see cref="Ext.ExtContext.widget">Ext.widget</see>("button", {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// text: "Refresh",
    /// handler: function() {
    /// store.getAt(0).set('value', Math.round(Math.random()*100));
    /// }
    /// });
    /// </code></pre>
    /// <p>In this example we create a special Gauge axis to be used with the gauge visualization (describing half-circle markers), and also we're
    /// setting a maximum, minimum and steps configuration options into the axis. The Gauge series configuration contains the store field to be bound to
    /// the visual display and the color set to be used with the visualization.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Gauge : Series
    {
        /// <summary>
        /// The store record field name to be used for the pie angles.
        /// The values bound to this field name must be positive real numbers.
        /// Defaults to: <c>false</c>
        /// </summary>
        public JsString angleField;
        /// <summary>
        /// Use the entire disk or just a fraction of it for the gauge. Default's false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object donut;
        /// <summary>
        /// The duration for the pie slice highlight effect.
        /// Defaults to: <c>150</c>
        /// </summary>
        public JsNumber highlightDuration;
        /// <summary>
        /// Use the Gauge Series as an area series or add a needle to it. Default's false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool needle;
        /// <summary>
        /// An object containing styles for overriding series styles from Theming.
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject style;
        /// <summary>
        /// Draws the series for the current chart.
        /// </summary>
        public void drawSeries(){}
        /// <summary>
        /// Sets the Gauge chart to the current specified value.
        /// </summary>
        /// <param name="value">
        /// </param>
        public void setValue(object value){}
        public Gauge(Ext.chart.series.GaugeConfig config){}
        public Gauge(){}
        public Gauge(params object[] args){}
    }
    #endregion
    #region GaugeConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class GaugeConfig : SeriesConfig
    {
        /// <summary>
        /// The store record field name to be used for the pie angles.
        /// The values bound to this field name must be positive real numbers.
        /// Defaults to: <c>false</c>
        /// </summary>
        public JsString angleField;
        /// <summary>
        /// Use the entire disk or just a fraction of it for the gauge. Default's false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object donut;
        /// <summary>
        /// The duration for the pie slice highlight effect.
        /// Defaults to: <c>150</c>
        /// </summary>
        public JsNumber highlightDuration;
        /// <summary>
        /// Use the Gauge Series as an area series or add a needle to it. Default's false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool needle;
        /// <summary>
        /// An object containing styles for overriding series styles from Theming.
        /// Defaults to: <c>{}</c>
        /// </summary>
        public JsObject style;
        public GaugeConfig(params object[] args){}
    }
    #endregion
    #region GaugeEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class GaugeEvents : SeriesEvents
    {
        public GaugeEvents(params object[] args){}
    }
    #endregion
}
