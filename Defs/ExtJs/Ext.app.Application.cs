//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.app
{
    #region Application
    /// <inheritdocs />
    /// <summary>
    /// <p>Represents an Ext JS 4 application, which is typically a single page app using a <see cref="Ext.container.Viewport">Viewport</see>.
    /// A typical <see cref="Ext.app.Application">Ext.app.Application</see> might look like this:</p>
    /// <pre><code><see cref="Ext.ExtContext.application">Ext.application</see>({
    /// name: 'MyApp',
    /// launch: function() {
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.container.Viewport">Ext.container.Viewport</see>', {
    /// items: {
    /// html: 'My App'
    /// }
    /// });
    /// }
    /// });
    /// </code></pre>
    /// <p>This does several things. First it creates a global variable called 'MyApp' - all of your Application's classes (such
    /// as its Models, Views and Controllers) will reside under this single namespace, which drastically lowers the chances
    /// of colliding global variables.</p>
    /// <p>When the page is ready and all of your JavaScript has loaded, your Application's <see cref="Ext.app.Application.launch">launch</see> function is called,
    /// at which time you can run the code that starts your app. Usually this consists of creating a Viewport, as we do in
    /// the example above.</p>
    /// <h1>Telling Application about the rest of the app</h1>
    /// <p>Because an <see cref="Ext.app.Application">Ext.app.Application</see> represents an entire app, we should tell it about the other parts of the app - namely
    /// the Models, Views and Controllers that are bundled with the application. Let's say we have a blog management app; we
    /// might have Models and Controllers for Posts and Comments, and Views for listing, adding and editing Posts and Comments.
    /// Here's how we'd tell our Application about all these things:</p>
    /// <pre><code><see cref="Ext.ExtContext.application">Ext.application</see>({
    /// name: 'Blog',
    /// models: ['Post', 'Comment'],
    /// controllers: ['Posts', 'Comments'],
    /// launch: function() {
    /// ...
    /// }
    /// });
    /// </code></pre>
    /// <p>Note that we didn't actually list the Views directly in the Application itself. This is because Views are managed by
    /// Controllers, so it makes sense to keep those dependencies there. The Application will load each of the specified
    /// Controllers using the pathing conventions laid out in the <i>application architecture guide</i> - in this case
    /// expecting the controllers to reside in app/controller/Posts.js and app/controller/Comments.js. In turn, each
    /// Controller simply needs to list the Views it uses and they will be automatically loaded. Here's how our Posts
    /// controller like be defined:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.controller.Posts', {
    /// extend: '<see cref="Ext.app.Controller">Ext.app.Controller</see>',
    /// views: ['posts.List', 'posts.Edit'],
    /// //the rest of the Controller here
    /// });
    /// </code></pre>
    /// <p>Because we told our Application about our Models and Controllers, and our Controllers about their Views, Ext JS will
    /// automatically load all of our app files for us. This means we don't have to manually add script tags into our html
    /// files whenever we add a new class, but more importantly it enables us to create a minimized build of our entire
    /// application using the Ext JS 4 SDK Tools.</p>
    /// <p>For more information about writing Ext JS 4 applications, please see the <i>application architecture guide</i>.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Application : Controller
    {
        /// <summary>
        /// The path to the directory which contains all application's classes.
        /// This path will be registered via Ext.Loader.setPath for the namespace specified
        /// in the name config.
        /// Defaults to: <c>&quot;app&quot;</c>
        /// </summary>
        public JsString appFolder;
        /// <summary>
        /// True to automatically load and instantiate AppName.view.Viewport before firing the launch function.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool autoCreateViewport;
        /// <summary>
        /// Names of controllers that the app uses.
        /// </summary>
        public JsString controllers;
        /// <summary>
        /// True to automatically set up Ext.tip.QuickTip support.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableQuickTips;
        /// <summary>
        /// The name of your application. This will also be the namespace for your views, controllers
        /// models and stores. Don't use spaces or special characters in the name.
        /// </summary>
        public JsString name;
        /// <summary>
        /// Additional load paths to add to Ext.Loader.
        /// See Ext.Loader.paths config for more details.
        /// </summary>
        public JsObject paths;
        /// <summary>
        /// The scope to execute the launch function in. Defaults to the Application instance.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// Called automatically when the page has completely loaded. This is an empty function that should be
        /// overridden by each application that needs to take action on page load.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="profile"><p>The detected application profile</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>By default, the Application will dispatch to the configured startup controller and
        /// action immediately after running the launch function. Return false to prevent this behavior.</p>
        /// </div>
        /// </returns>
        public virtual bool launch(JsString profile){return false;}
        /// <summary>
        /// </summary>
        private void onBeforeLaunch(){}
        public Application(ApplicationConfig config){}
        public Application(params object[] args){}
    }
    #endregion
    #region ApplicationConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ApplicationConfig : ControllerConfig
    {
        /// <summary>
        /// The path to the directory which contains all application's classes.
        /// This path will be registered via Ext.Loader.setPath for the namespace specified
        /// in the name config.
        /// Defaults to: <c>&quot;app&quot;</c>
        /// </summary>
        public JsString appFolder;
        /// <summary>
        /// True to automatically load and instantiate AppName.view.Viewport before firing the launch function.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool autoCreateViewport;
        /// <summary>
        /// Names of controllers that the app uses.
        /// </summary>
        public JsString controllers;
        /// <summary>
        /// True to automatically set up Ext.tip.QuickTip support.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableQuickTips;
        /// <summary>
        /// The name of your application. This will also be the namespace for your views, controllers
        /// models and stores. Don't use spaces or special characters in the name.
        /// </summary>
        public JsString name;
        /// <summary>
        /// Additional load paths to add to Ext.Loader.
        /// See Ext.Loader.paths config for more details.
        /// </summary>
        public JsObject paths;
        /// <summary>
        /// The scope to execute the launch function in. Defaults to the Application instance.
        /// </summary>
        public JsObject scope;
        public ApplicationConfig(params object[] args){}
    }
    #endregion
    #region ApplicationEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ApplicationEvents : ControllerEvents
    {
        public ApplicationEvents(params object[] args){}
    }
    #endregion
}
