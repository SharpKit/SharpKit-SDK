//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.grid
{
    #region PagingScroller
    /// <inheritdocs />
    /// <summary>
    /// <p>Implements infinite scrolling of a grid, allowing users can scroll
    /// through thousands of records without the performance penalties of
    /// renderering all the records on screen at once. The grid should be
    /// bound to a <em>buffered</em> store with a pageSize specified.</p>
    /// <p>The number of rows rendered outside the visible area, and the
    /// buffering of pages of data from the remote server for immediate
    /// rendering upon scroll can be controlled by configuring the
    /// <see cref="Ext.grid.PagingScroller">#verticalScroller</see>.</p>
    /// <p>You can tell it to create a larger table to provide more scrolling
    /// before a refresh is needed, and also to keep more pages of records
    /// in memory for faster refreshing when scrolling.</p>
    /// <pre><code>var myStore = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// // ...
    /// buffered: true,
    /// pageSize: 100,
    /// // ...
    /// });
    /// var grid = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
    /// // ...
    /// autoLoad: true,
    /// verticalScroller: {
    /// trailingBufferZone: 200,  // Keep 200 records buffered in memory behind scroll
    /// leadingBufferZone: 5000   // Keep 5000 records buffered in memory ahead of scroll
    /// },
    /// // ...
    /// });
    /// </code></pre>
    /// <h2>Implementation notes</h2>
    /// <p>This class monitors scrolling of the <see cref="Ext.view.Table">TableView</see> within a <see cref="Ext.grid.Panel">GridPanel</see> which is using
    /// a buffered store to only cache and render a small section of a very
    /// large dataset.</p>
    /// <p><strong>NB!</strong> The GridPanel will instantiate this to perform monitoring,
    /// this class should never be instantiated by user code.  Always use the
    /// <see cref="Ext.panel.TableConfig.verticalScroller">verticalScroller</see> config.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class PagingScroller : Ext.Base
    {
        /// <summary>
        /// The number of extra rows to render on the leading side of scrolling
        /// outside the numFromEdge buffer as scrolling proceeds.
        /// Defaults to: <c>15</c>
        /// </summary>
        public JsNumber leadingBufferZone;
        /// <summary>
        /// The zone which causes a refresh of the rendered viewport. As soon as the edge
        /// of the rendered grid is this number of rows from the edge of the viewport, the view is moved.
        /// Defaults to: <c>2</c>
        /// </summary>
        public JsNumber numFromEdge;
        /// <summary>
        /// Defaults to: <c>0.35</c>
        /// <p>This cfg has been <strong>deprecated</strong> </p>
        /// <p>This config is now ignored.</p>
        /// </summary>
        public JsNumber percentageFromEdge;
        /// <summary>
        /// This is the time in milliseconds to buffer load requests when scrolling the PagingScrollbar.
        /// Defaults to: <c>200</c>
        /// </summary>
        public JsNumber scrollToLoadBuffer;
        /// <summary>
        /// The number of extra rows to render on the trailing side of scrolling
        /// outside the numFromEdge buffer as scrolling proceeds.
        /// Defaults to: <c>5</c>
        /// </summary>
        public JsNumber trailingBufferZone;
        /// <summary>
        /// Current pixel scroll position of the associated View.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber position{get;set;}
        public PagingScroller(PagingScrollerConfig config){}
        public PagingScroller(){}
        public PagingScroller(params object[] args){}
    }
    #endregion
    #region PagingScrollerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PagingScrollerConfig : Ext.BaseConfig
    {
        /// <summary>
        /// The number of extra rows to render on the leading side of scrolling
        /// outside the numFromEdge buffer as scrolling proceeds.
        /// Defaults to: <c>15</c>
        /// </summary>
        public JsNumber leadingBufferZone;
        /// <summary>
        /// The zone which causes a refresh of the rendered viewport. As soon as the edge
        /// of the rendered grid is this number of rows from the edge of the viewport, the view is moved.
        /// Defaults to: <c>2</c>
        /// </summary>
        public JsNumber numFromEdge;
        /// <summary>
        /// Defaults to: <c>0.35</c>
        /// <p>This cfg has been <strong>deprecated</strong> </p>
        /// <p>This config is now ignored.</p>
        /// </summary>
        public JsNumber percentageFromEdge;
        /// <summary>
        /// This is the time in milliseconds to buffer load requests when scrolling the PagingScrollbar.
        /// Defaults to: <c>200</c>
        /// </summary>
        public JsNumber scrollToLoadBuffer;
        /// <summary>
        /// The number of extra rows to render on the trailing side of scrolling
        /// outside the numFromEdge buffer as scrolling proceeds.
        /// Defaults to: <c>5</c>
        /// </summary>
        public JsNumber trailingBufferZone;
        public PagingScrollerConfig(params object[] args){}
    }
    #endregion
    #region PagingScrollerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PagingScrollerEvents : Ext.BaseEvents
    {
        public PagingScrollerEvents(params object[] args){}
    }
    #endregion
}
