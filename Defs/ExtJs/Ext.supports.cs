//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region supports
    /// <summary>
    /// <p>Determines information about features are supported in the current environment</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class supports
    {
        /// <summary>
        /// True if the Array sort native method isn't bugged.
        /// </summary>
        public static bool ArraySort{get;set;}
        /// <summary>
        /// True if the device supports the HTML5 audio tag
        /// </summary>
        public static bool AudioTag{get;set;}
        /// <summary>
        /// True if the browser supports the getBoundingClientRect method on elements
        /// </summary>
        public static bool BoundingClientRect{get;set;}
        /// <summary>
        /// True if the device supports CSS3 border radius
        /// </summary>
        public static bool CSS3BorderRadius{get;set;}
        /// <summary>
        /// True if document environment supports the CSS3 box-shadow style.
        /// </summary>
        public static bool CSS3BoxShadow{get;set;}
        /// <summary>
        /// True if the device supports CSS3DTransform
        /// </summary>
        public static bool CSS3DTransform{get;set;}
        /// <summary>
        /// True if the device supports CSS3 linear gradients
        /// </summary>
        public static bool CSS3LinearGradient{get;set;}
        /// <summary>
        /// True if the device supports Canvas
        /// </summary>
        public static bool Canvas{get;set;}
        /// <summary>
        /// True if document environment supports the HTML5 classList API.
        /// </summary>
        public static bool ClassList{get;set;}
        /// <summary>
        /// True if the browser supports document.defaultView.getComputedStyle()
        /// </summary>
        public static bool ComputedStyle{get;set;}
        /// <summary>
        /// True if browser support CreateContextualFragment range native methods.
        /// </summary>
        public static bool CreateContextualFragment{get;set;}
        /// <summary>
        /// True if the device supports device motion (acceleration and rotation rate)
        /// </summary>
        public static bool DeviceMotion{get;set;}
        /// <summary>
        /// True if when asking for an element's dimension via offsetWidth or offsetHeight,
        /// getBoundingClientRect, etc. the browser returns the subpixel width rounded to the nearest pixel.
        /// </summary>
        public static bool Direct2DBug{get;set;}
        /// <summary>
        /// True if INPUT elements lose their
        /// selection when their display style is changed. Essentially, if a text input
        /// has focus and its display style is changed, the I-beam disappears.
        /// This bug is encountered due to the work around in place for the <see cref="Ext.supports.RightMargin">RightMargin</see>
        /// bug. This has been observed in Safari 4.0.4 and older, and appears to be fixed
        /// in Safari 5. It's not clear if Safari 4.1 has the bug, but it has the same WebKit
        /// version number as Safari 5 (according to http://unixpapa.com/js/gecko.html).
        /// </summary>
        public static JsObject DisplayChangeInputSelectionBug{get;set;}
        /// <summary>
        /// True if TEXTAREA elements lose their
        /// selection when their display style is changed. Essentially, if a text area has
        /// focus and its display style is changed, the I-beam disappears.
        /// This bug is encountered due to the work around in place for the <see cref="Ext.supports.RightMargin">RightMargin</see>
        /// bug. This has been observed in Chrome 10 and Safari 5 and older, and appears to
        /// be fixed in Chrome 11.
        /// </summary>
        public static JsObject DisplayChangeTextAreaSelectionBug{get;set;}
        /// <summary>
        /// True if the device supports CSS float
        /// </summary>
        public static bool Float{get;set;}
        /// <summary>
        /// True if the device supports GeoLocation
        /// </summary>
        public static bool GeoLocation{get;set;}
        /// <summary>
        /// True if the browser will return the left/top/right/bottom
        /// position as a percentage when explicitly set as a percentage value.
        /// </summary>
        public static bool GetPositionPercentage{get;set;}
        /// <summary>
        /// True if the device supports HTML5 history
        /// </summary>
        public static bool History{get;set;}
        /// <summary>
        /// True if the browser supports mouseenter and mouseleave events
        /// </summary>
        public static bool MouseEnterLeave{get;set;}
        /// <summary>
        /// True if the browser supports the mousewheel event
        /// </summary>
        public static bool MouseWheel{get;set;}
        /// <summary>
        /// True if the browser supports normal css opacity
        /// </summary>
        public static bool Opacity{get;set;}
        /// <summary>
        /// True if the device supports orientation change
        /// </summary>
        public static bool OrientationChange{get;set;}
        /// <summary>
        /// True if the browser supports the HTML5 placeholder attribute on inputs
        /// </summary>
        public static bool Placeholder{get;set;}
        /// <summary>
        /// True if document environment supports the CSS3 pointer-events style.
        /// </summary>
        public static bool PointerEvents{get;set;}
        /// <summary>
        /// True if browser support document.createRange native method.
        /// </summary>
        public static bool Range{get;set;}
        /// <summary>
        /// True if the device supports right margin.
        /// See https://bugs.webkit.org/show_bug.cgi?id=13343 for why this is needed.
        /// </summary>
        public static bool RightMargin{get;set;}
        /// <summary>
        /// True if the device supports SVG
        /// </summary>
        public static bool Svg{get;set;}
        /// <summary>
        /// True if the browser supports maxlength on textareas.
        /// </summary>
        public static bool TextAreaMaxLength{get;set;}
        /// <summary>
        /// True if the browser passes the "actualLateness" parameter to
        /// setTimeout. See: https://developer.mozilla.org/en/DOM/window.setTimeout
        /// </summary>
        public static bool TimeoutActualLateness{get;set;}
        /// <summary>
        /// True if the device supports touch
        /// </summary>
        public static bool Touch{get;set;}
        /// <summary>
        /// True if the device supports CSS3 Transitions
        /// </summary>
        public static bool Transitions{get;set;}
        /// <summary>
        /// True if the device supports transparent color
        /// </summary>
        public static bool TransparentColor{get;set;}
        /// <summary>
        /// True if the device supports VML
        /// </summary>
        public static bool Vml{get;set;}
        /// <summary>
        /// True if browser supports window.onerror.
        /// </summary>
        public static bool WindowOnError{get;set;}
        /// <summary>
        /// Runs feature detection routines and sets the various flags. This is called when
        /// the scripts loads (very early) and again at Ext.onReady. Some detections
        /// are flagged as early and run immediately. Others that require the document body
        /// will not run until ready.
        /// Each test is run only once, so calling this method from an onReady function is safe
        /// and ensures that all flags have been set.
        /// </summary>
        private static void init(){}
        public supports(supportsConfig config){}
        public supports(){}
        public supports(params object[] args){}
    }
    #endregion
    #region supportsConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class supportsConfig
    {
        public supportsConfig(params object[] args){}
    }
    #endregion
    #region supportsEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class supportsEvents
    {
        public supportsEvents(params object[] args){}
    }
    #endregion
}
