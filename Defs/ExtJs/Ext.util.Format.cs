//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region Format
    /// <summary>
    /// <p>This class is a centralized place for formatting functions. It includes
    /// functions to format various different types of data, such as text, dates and numeric values.</p>
    /// <h2>Localization</h2>
    /// <p>This class contains several options for localization. These can be set once the library has loaded,
    /// all calls to the functions from that point will use the locale settings that were specified.</p>
    /// <p>Options include:</p>
    /// <ul>
    /// <li>thousandSeparator</li>
    /// <li>decimalSeparator</li>
    /// <li>currenyPrecision</li>
    /// <li>currencySign</li>
    /// <li>currencyAtEnd</li>
    /// </ul>
    /// <p>This class also uses the default date format defined here: <see cref="Ext.Date.defaultFormat">Ext.Date.defaultFormat</see>.</p>
    /// <h2>Using with renderers</h2>
    /// <p>There are two helper functions that return a new function that can be used in conjunction with
    /// grid renderers:</p>
    /// <pre><code>columns: [{
    /// dataIndex: 'date',
    /// renderer: <see cref="Ext.util.Format.dateRenderer">Ext.util.Format.dateRenderer</see>('Y-m-d')
    /// }, {
    /// dataIndex: 'time',
    /// renderer: <see cref="Ext.util.Format.numberRenderer">Ext.util.Format.numberRenderer</see>('0.000')
    /// }]
    /// </code></pre>
    /// <p>Functions that only take a single argument can also be passed directly:</p>
    /// <pre><code>columns: [{
    /// dataIndex: 'cost',
    /// renderer: <see cref="Ext.util.Format.usMoney">Ext.util.Format.usMoney</see>
    /// }, {
    /// dataIndex: 'productCode',
    /// renderer: <see cref="Ext.util.Format.uppercase">Ext.util.Format.uppercase</see>
    /// }]
    /// </code></pre>
    /// <h2>Using with XTemplates</h2>
    /// <p>XTemplates can also directly use <see cref="Ext.util.Format">Ext.util.Format</see> functions:</p>
    /// <pre><code>new <see cref="Ext.XTemplate">Ext.XTemplate</see>([
    /// 'Date: {startDate:date("Y-m-d")}',
    /// 'Cost: {cost:usMoney}'
    /// ]);
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Format
    {
        /// <summary>
        /// This may be set to true to make the currency function
        /// append the currency sign to the formatted value.
        /// This may be overridden in a locale file.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool currencyAtEnd{get;set;}
        /// <summary>
        /// The number of decimal places that the currency function displays.
        /// This may be overridden in a locale file.
        /// Defaults to: <c>2</c>
        /// </summary>
        public static JsNumber currencyPrecision{get;set;}
        /// <summary>
        /// The currency sign that the currency function displays.
        /// This may be overridden in a locale file.
        /// Defaults to: <c>&quot;$&quot;</c>
        /// </summary>
        public static JsString currencySign{get;set;}
        /// <summary>
        /// The character that the number function uses as a decimal point.
        /// This may be overridden in a locale file.
        /// Defaults to: <c>&quot;.&quot;</c>
        /// </summary>
        public static JsString decimalSeparator{get;set;}
        /// <summary>
        /// The character that the number function uses as a thousand separator.
        /// This may be overridden in a locale file.
        /// Defaults to: <c>&quot;,&quot;</c>
        /// </summary>
        public static JsString thousandSeparator{get;set;}
        /// <summary>
        /// Alias for Ext.String.capitalize.
        /// Capitalize the given string
        /// </summary>
        /// <param name="string">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString capitalize(JsString @string){return null;}
        /// <summary>
        /// Format a number as a currency.
        /// </summary>
        /// <param name="value"><p>The numeric value to format</p>
        /// </param>
        /// <param name="sign"><p>The currency sign to use (defaults to <see cref="Ext.util.Format.currencySign">currencySign</see>)</p>
        /// </param>
        /// <param name="decimals"><p>The number of decimals to use for the currency
        /// (defaults to <see cref="Ext.util.Format.currencyPrecision">currencyPrecision</see>)</p>
        /// </param>
        /// <param name="end"><p>True if the currency sign should be at the end of the string
        /// (defaults to <see cref="Ext.util.Format.currencyAtEnd">currencyAtEnd</see>)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The formatted currency string</p>
        /// </div>
        /// </returns>
        public static JsString currency(object value, object sign=null, object decimals=null, object end=null){return null;}
        /// <summary>
        /// Formats the passed date using the specified format pattern.
        /// </summary>
        /// <param name="value"><p>The value to format. If a string is passed, it is converted to a Date
        /// by the Javascript's built-in <see cref="Date.parse">Date.parse</see> method.</p>
        /// </param>
        /// <param name="format"><p>Any valid date format string. Defaults to <see cref="Ext.Date.defaultFormat">Ext.Date.defaultFormat</see>.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The formatted date string.</p>
        /// </div>
        /// </returns>
        public static JsString date(object value, object format=null){return null;}
        /// <summary>
        /// Returns a date rendering function that can be reused to apply a date format multiple times efficiently.
        /// </summary>
        /// <param name="format"><p>Any valid date format string. Defaults to <see cref="Ext.Date.defaultFormat">Ext.Date.defaultFormat</see>.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>The date formatting function</p>
        /// </div>
        /// </returns>
        public static System.Delegate dateRenderer(JsString format){return null;}
        /// <summary>
        /// Checks a reference and converts it to the default value if it's empty.
        /// </summary>
        /// <param name="value"><p>Reference to check</p>
        /// </param>
        /// <param name="defaultValue"><p>The value to insert of it's undefined.</p>
        /// <p>Defaults to: <c>&quot;&quot;</c></p></param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString defaultValue(object value, object defaultValue=null){return null;}
        /// <summary>
        /// Alias for Ext.String.ellipsis.
        /// Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
        /// </summary>
        /// <param name="value"><p>The string to truncate</p>
        /// </param>
        /// <param name="length"><p>The maximum length to allow before truncating</p>
        /// </param>
        /// <param name="word"><p>True to try to find a common word break</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The converted text</p>
        /// </div>
        /// </returns>
        public static JsString ellipsis(JsString value, JsNumber length, bool word){return null;}
        /// <summary>
        /// Escapes the passed string for use in a regular expression.
        /// </summary>
        /// <param name="str">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public static JsString escapeRegex(JsString str){return null;}
        /// <summary>
        /// Simple format for a file size (xxx bytes, xxx KB, xxx MB).
        /// </summary>
        /// <param name="size"><p>The numeric value to format</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The formatted file size</p>
        /// </div>
        /// </returns>
        public static JsString fileSize(object size){return null;}
        /// <summary>
        /// Alias for Ext.String.format.
        /// Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
        /// token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
        /// <code>    var cls = 'my-class', text = 'Some text';
        /// var s = <see cref="Ext.String.format">Ext.String.format</see>('&lt;div class="{0}">{1}&lt;/div>', cls, text);
        /// // s now contains the string: '&lt;div class="my-class">Some text&lt;/div>'
        /// </code>
        /// </summary>
        /// <param name="string"><p>The tokenized string to be formatted</p>
        /// </param>
        /// <param name="value1"><p>The value to replace token {0}</p>
        /// </param>
        /// <param name="value2"><p>Etc...</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The formatted string</p>
        /// </div>
        /// </returns>
        public static JsString format(JsString @string, JsString value1, JsString value2){return null;}
        /// <summary>
        /// Alias for Ext.String.htmlDecode.
        /// Convert certain characters (&amp;, &lt;, >, ', and ") from their HTML character equivalents.
        /// </summary>
        /// <param name="value"><p>The string to decode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The decoded text</p>
        /// </div>
        /// </returns>
        public static JsString htmlDecode(JsString value){return null;}
        /// <summary>
        /// Alias for Ext.String.htmlEncode.
        /// Convert certain characters (&amp;, &lt;, >, ', and ") to their HTML character equivalents for literal display in web pages.
        /// </summary>
        /// <param name="value"><p>The string to encode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The encoded text</p>
        /// </div>
        /// </returns>
        public static JsString htmlEncode(JsString value){return null;}
        /// <summary>
        /// Alias for Ext.String.leftPad.
        /// Pads the left side of a string with a specified character.  This is especially useful
        /// for normalizing number and date strings.  Example usage:
        /// <code>    var s = <see cref="Ext.String.leftPad">Ext.String.leftPad</see>('123', 5, '0');
        /// // s now contains the string: '00123'
        /// </code>
        /// </summary>
        /// <param name="string"><p>The original string</p>
        /// </param>
        /// <param name="size"><p>The total length of the output string</p>
        /// </param>
        /// <param name="character"><p>The character with which to pad the original string (defaults to empty string " ")</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The padded string</p>
        /// </div>
        /// </returns>
        public static JsString leftPad(JsString @string, JsNumber size, object character=null){return null;}
        /// <summary>
        /// Converts a string to all lower case letters.
        /// </summary>
        /// <param name="value"><p>The text to convert</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The converted text</p>
        /// </div>
        /// </returns>
        public static JsString lowercase(JsString value){return null;}
        /// <summary>
        /// It does simple math for use in a template, for example:
        /// <code>var tpl = new <see cref="Ext.Template">Ext.Template</see>('{value} * 10 = {value:math("* 10")}');
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>A function that operates on the passed value.</p>
        /// </div>
        /// </returns>
        public static System.Delegate math(){return null;}
        /// <summary>
        /// Converts newline characters to the HTML tag &lt;br/&gt;
        /// </summary>
        /// <param name="The"><p>string value to format.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The string with embedded <c>&lt;br/&gt;</c> tags in place of newlines.</p>
        /// </div>
        /// </returns>
        public static JsString nl2br(JsString The){return null;}
        /// <summary>
        /// Formats the passed number according to the passed format string.
        /// The number of digits after the decimal separator character specifies the number of
        /// decimal places in the resulting string. The <em>local-specific</em> decimal character is
        /// used in the result.
        /// The <em>presence</em> of a thousand separator character in the format string specifies that
        /// the <em>locale-specific</em> thousand separator (if any) is inserted separating thousand groups.
        /// By default, "," is expected as the thousand separator, and "." is expected as the decimal separator.
        /// New to Ext JS 4
        /// Locale-specific characters are always used in the formatted output when inserting
        /// thousand and decimal separators.
        /// The format string must specify separator characters according to US/UK conventions ("," as the
        /// thousand separator, and "." as the decimal separator)
        /// To allow specification of format strings according to local conventions for separator characters, add
        /// the string <c>/i</c> to the end of the format string.
        /// examples (123456.789):
        /// <li><c>0</c> - (123456) show only digits, no precision</li>
        /// <li><c>0.00</c> - (123456.78) show only digits, 2 precision</li>
        /// <li><c>0.0000</c> - (123456.7890) show only digits, 4 precision</li>
        /// <li><c>0,000</c> - (123,456) show comma and digits, no precision</li>
        /// <li><c>0,000.00</c> - (123,456.78) show comma and digits, 2 precision</li>
        /// <li><c>0,0.00</c> - (123,456.78) shortcut method, show comma and digits, 2 precision</li>
        /// To allow specification of the formatting string using UK/US grouping characters (,) and
        /// decimal (.) for international numbers, add /i to the end. For example: 0.000,00/i
        /// </summary>
        /// <param name="v"><p>The number to format.</p>
        /// </param>
        /// <param name="format"><p>The way you would like to format this text.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The formatted number.</p>
        /// </div>
        /// </returns>
        public static JsString number(JsNumber v, JsString format){return null;}
        /// <summary>
        /// Returns a number rendering function that can be reused to apply a number format multiple
        /// times efficiently.
        /// </summary>
        /// <param name="format"><p>Any valid number format string for <see cref="Ext.util.Format.number">number</see></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>The number formatting function</p>
        /// </div>
        /// </returns>
        public static System.Delegate numberRenderer(JsString format){return null;}
        /// <summary>
        /// Parses a number or string representing margin sizes into an object.
        /// Supports CSS-style margin declarations (e.g. 10, "10", "10 10", "10 10 10" and
        /// "10 10 10 10" are all valid options and would return the same result).
        /// </summary>
        /// <param name="v"><p>The encoded margins</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>An object with margin sizes for top, right, bottom and left</p>
        /// </div>
        /// </returns>
        public static object parseBox(object v){return null;}
        /// <summary>
        /// Selectively do a plural form of a word based on a numeric value. For example, in a template,
        /// {commentCount:plural("Comment")}  would result in "1 Comment" if commentCount was 1 or
        /// would be "x Comments" if the value is 0 or greater than 1.
        /// </summary>
        /// <param name="value"><p>The value to compare against</p>
        /// </param>
        /// <param name="singular"><p>The singular form of the word</p>
        /// </param>
        /// <param name="plural"><p>The plural form of the word (defaults to the singular with an "s")</p>
        /// </param>
        public static void plural(JsNumber value, JsString singular, object plural=null){}
        /// <summary>
        /// Rounds the passed number to the required decimal precision.
        /// </summary>
        /// <param name="value"><p>The numeric value to round.</p>
        /// </param>
        /// <param name="precision"><p>The number of decimal places to which to round the first parameter's value.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The rounded value.</p>
        /// </div>
        /// </returns>
        public static JsNumber round(object value, JsNumber precision){return null;}
        /// <summary>
        /// Strips all script tags.
        /// </summary>
        /// <param name="value"><p>The text from which to strip script tags</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The stripped text</p>
        /// </div>
        /// </returns>
        public static JsString stripScripts(object value){return null;}
        /// <summary>
        /// Strips all HTML tags.
        /// </summary>
        /// <param name="value"><p>The text from which to strip tags</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The stripped text</p>
        /// </div>
        /// </returns>
        public static JsString stripTags(object value){return null;}
        /// <summary>
        /// Returns a substring from within an original string.
        /// </summary>
        /// <param name="value"><p>The original text</p>
        /// </param>
        /// <param name="start"><p>The start index of the substring</p>
        /// </param>
        /// <param name="length"><p>The length of the substring</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The substring</p>
        /// </div>
        /// </returns>
        public static JsString substr(JsString value, JsNumber start, JsNumber length){return null;}
        /// <summary>
        /// Alias for Ext.String.trim.
        /// Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
        /// @example
        /// <code>var s = '  foo bar  ';
        /// alert('-' + s + '-');         //alerts "- foo bar -"
        /// alert('-' + <see cref="Ext.String.trim">Ext.String.trim</see>(s) + '-');  //alerts "-foo bar-"
        /// </code>
        /// </summary>
        /// <param name="string"><p>The string to escape</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The trimmed string</p>
        /// </div>
        /// </returns>
        public static JsString trim(JsString @string){return null;}
        /// <summary>
        /// Checks a reference and converts it to empty string if it is undefined.
        /// </summary>
        /// <param name="value"><p>Reference to check</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Empty string if converted, otherwise the original value</p>
        /// </div>
        /// </returns>
        public static object undef(object value){return null;}
        /// <summary>
        /// Converts a string to all upper case letters.
        /// </summary>
        /// <param name="value"><p>The text to convert</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The converted text</p>
        /// </div>
        /// </returns>
        public static JsString uppercase(JsString value){return null;}
        /// <summary>
        /// Format a number as US currency.
        /// </summary>
        /// <param name="value"><p>The numeric value to format</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The formatted currency string</p>
        /// </div>
        /// </returns>
        public static JsString usMoney(object value){return null;}
        public Format(FormatConfig config){}
        public Format(){}
        public Format(params object[] args){}
    }
    #endregion
    #region FormatConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FormatConfig
    {
        public FormatConfig(params object[] args){}
    }
    #endregion
    #region FormatEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FormatEvents
    {
        public FormatEvents(params object[] args){}
    }
    #endregion
}
