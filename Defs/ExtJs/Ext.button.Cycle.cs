//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.button
{
    #region Cycle
    /// <inheritdocs />
    /// <summary>
    /// <p>A specialized SplitButton that contains a menu of <see cref="Ext.menu.CheckItem">Ext.menu.CheckItem</see> elements. The button automatically
    /// cycles through each menu item on click, raising the button's <see cref="Ext.button.CycleEvents.change">change</see> event (or calling the button's
    /// <see cref="Ext.button.CycleConfig.changeHandler">changeHandler</see> function, if supplied) for the active menu item. Clicking on the arrow section of the
    /// button displays the dropdown menu just like a normal SplitButton.  Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Cycle">Ext.button.Cycle</see>', {
    /// showText: true,
    /// prependText: 'View as ',
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// menu: {
    /// id: 'view-type-menu',
    /// items: [{
    /// text: 'text only',
    /// iconCls: 'view-text',
    /// checked: true
    /// },{
    /// text: 'HTML',
    /// iconCls: 'view-html'
    /// }]
    /// },
    /// changeHandler: function(cycleBtn, activeItem) {
    /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Change View', activeItem.text);
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Cycle : Split
    {
        /// <summary>
        /// A callback function that will be invoked each time the active menu item in the button's menu has changed. If this
        /// callback is not supplied, the SplitButton will instead fire the change event on active item change. The
        /// changeHandler function will be called with the following argument list: (SplitButton this, Ext.menu.CheckItem
        /// item)
        /// </summary>
        public System.Delegate changeHandler;
        /// <summary>
        /// A css class which sets an image to be used as the static icon for this button. This icon will always be displayed
        /// regardless of which item is selected in the dropdown list. This overrides the default behavior of changing the
        /// button's icon to match the selected item's icon on change.
        /// </summary>
        public JsString forceIcon;
        /// <summary>
        /// An array of Ext.menu.CheckItem config objects to be used when creating the button's menu items (e.g.,
        /// {text:'Foo', iconCls:'foo-icon'})
        /// <p>This cfg has been <strong>deprecated</strong> </p>
        /// <p>4.0 Use the <see cref="Ext.button.CycleConfig.menu">menu</see> config instead. All menu items will be created as
        /// <see cref="Ext.menu.CheckItem">CheckItems</see>.</p>
        /// </summary>
        public JsObject items;
        /// <summary>
        /// A static string to prepend before the active item's text when displayed as the button's text (only applies when
        /// showText = true).
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString prependText;
        /// <summary>
        /// True to display the active item's text as the button text. The Button will show its
        /// configured text if this config is omitted.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool showText;
        /// <summary>
        /// Gets the currently active menu item.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.menu.CheckItem">Ext.menu.CheckItem</see></span><div><p>The active item</p>
        /// </div>
        /// </returns>
        public Ext.menu.CheckItem getActiveItem(){return null;}
        /// <summary>
        /// Sets the button's active menu item.
        /// </summary>
        /// <param name="item"><p>The item to activate</p>
        /// </param>
        /// <param name="suppressEvent"><p>True to prevent the button's change event from firing.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public void setActiveItem(Ext.menu.CheckItem item, object suppressEvent=null){}
        /// <summary>
        /// This is normally called internally on button click, but can be called externally to advance the button's active
        /// item programmatically to the next one in the menu. If the current item is the last one in the menu the active
        /// item will be set to the first item in the menu.
        /// </summary>
        public void toggleSelected(){}
        public Cycle(CycleConfig config){}
        public Cycle(){}
        public Cycle(params object[] args){}
    }
    #endregion
    #region CycleConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CycleConfig : SplitConfig
    {
        /// <summary>
        /// A callback function that will be invoked each time the active menu item in the button's menu has changed. If this
        /// callback is not supplied, the SplitButton will instead fire the change event on active item change. The
        /// changeHandler function will be called with the following argument list: (SplitButton this, Ext.menu.CheckItem
        /// item)
        /// </summary>
        public System.Delegate changeHandler;
        /// <summary>
        /// A css class which sets an image to be used as the static icon for this button. This icon will always be displayed
        /// regardless of which item is selected in the dropdown list. This overrides the default behavior of changing the
        /// button's icon to match the selected item's icon on change.
        /// </summary>
        public JsString forceIcon;
        /// <summary>
        /// An array of Ext.menu.CheckItem config objects to be used when creating the button's menu items (e.g.,
        /// {text:'Foo', iconCls:'foo-icon'})
        /// <p>This cfg has been <strong>deprecated</strong> </p>
        /// <p>4.0 Use the <see cref="Ext.button.CycleConfig.menu">menu</see> config instead. All menu items will be created as
        /// <see cref="Ext.menu.CheckItem">CheckItems</see>.</p>
        /// </summary>
        public JsObject items;
        /// <summary>
        /// A static string to prepend before the active item's text when displayed as the button's text (only applies when
        /// showText = true).
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString prependText;
        /// <summary>
        /// True to display the active item's text as the button text. The Button will show its
        /// configured text if this config is omitted.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool showText;
        public CycleConfig(params object[] args){}
    }
    #endregion
    #region CycleEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CycleEvents : SplitEvents
    {
        /// <summary>
        /// Fires after the button's active menu item has changed. Note that if a changeHandler function is
        /// set on this CycleButton, it will be called instead on active item change and this change event will not
        /// be fired.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="item"><p>The menu item that was selected</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void change(Cycle @this, Ext.menu.CheckItem item, object eOpts){}
        public CycleEvents(params object[] args){}
    }
    #endregion
}
