//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.panel
{
    #region Tool
    /// <inheritdocs />
    /// <summary>
    /// <p>This class is used to display small visual icons in the header of a panel. There are a set of
    /// 25 icons that can be specified by using the <see cref="Ext.panel.ToolConfig.type">type</see> config. The <see cref="Ext.panel.ToolConfig.handler">handler</see> config
    /// can be used to provide a function that will respond to any click events. In general, this class
    /// will not be instantiated directly, rather it will be created by specifying the <see cref="Ext.panel.PanelConfig.tools">Ext.panel.Panel.tools</see>
    /// configuration on the Panel itself.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// width: 200,
    /// height: 200,
    /// renderTo: document.body,
    /// title: 'A Panel',
    /// tools: [{
    /// type: 'help',
    /// handler: function(){
    /// // show help here
    /// }
    /// }, {
    /// itemId: 'refresh',
    /// type: 'refresh',
    /// hidden: true,
    /// handler: function(){
    /// // do refresh
    /// }
    /// }, {
    /// type: 'search',
    /// handler: function(event, target, owner, tool){
    /// // do search
    /// owner.child('#refresh').show();
    /// }
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Tool : Ext.Component
    {
        /// <summary>
        /// A function to execute when the tool is clicked. Arguments passed are:
        /// <li><strong>event</strong> : <see cref="Ext.EventObject">Ext.EventObject</see> - The click event.</li>
        /// <li><strong>toolEl</strong> : <see cref="Ext.dom.Element">Ext.Element</see> - The tool Element.</li>
        /// <li><strong>owner</strong> : <see cref="Ext.panel.Header">Ext.panel.Header</see> - The host panel header.</li>
        /// <li><strong>tool</strong> : <see cref="Ext.panel.Tool">Ext.panel.Tool</see> - The tool object</li>
        /// </summary>
        public System.Delegate handler;
        /// <summary>
        /// The scope to execute the handler function. Defaults to the tool.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// Specify as false to allow click event to propagate.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool stopEvent;
        /// <summary>
        /// Defaults to: <c>&quot;x-tool-over&quot;</c>
        /// </summary>
        public JsString toolOverCls;
        /// <summary>
        /// Defaults to: <c>&quot;x-tool-pressed&quot;</c>
        /// </summary>
        public JsString toolPressedCls;
        /// <summary>
        /// The tooltip for the tool - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config
        /// object
        /// </summary>
        public object tooltip;
        /// <summary>
        /// The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString tooltipType;
        /// <summary>
        /// The type of tool to render. The following types are available:
        /// <li><span><i></i></span> close</li>
        /// <li><span><i></i></span> minimize</li>
        /// <li><span><i></i></span> maximize</li>
        /// <li><span><i></i></span> restore</li>
        /// <li><span><i></i></span> toggle</li>
        /// <li><span><i></i></span> gear</li>
        /// <li><span><i></i></span> prev</li>
        /// <li><span><i></i></span> next</li>
        /// <li><span><i></i></span> pin</li>
        /// <li><span><i></i></span> unpin</li>
        /// <li><span><i></i></span> right</li>
        /// <li><span><i></i></span> left</li>
        /// <li><span><i></i></span> down</li>
        /// <li><span><i></i></span> up</li>
        /// <li><span><i></i></span> refresh</li>
        /// <li><span><i></i></span> plus</li>
        /// <li><span><i></i></span> minus</li>
        /// <li><span><i></i></span> search</li>
        /// <li><span><i></i></span> save</li>
        /// <li><span><i></i></span> help</li>
        /// <li><span><i></i></span> print</li>
        /// <li><span><i></i></span> expand</li>
        /// <li><span><i></i></span> collapse</li>
        /// </summary>
        public JsString type;
        /// <summary>
        /// Binds this tool to a component.
        /// </summary>
        /// <param name="component"><p>The component</p>
        /// </param>
        private void bindTo(Ext.Component component){}
        /// <summary>
        /// Called when the tool element is clicked
        /// </summary>
        /// <param name="e">
        /// </param>
        /// <param name="target"><p>The target element</p>
        /// </param>
        private void onClick(EventObject e, object target){}
        /// <summary>
        /// Called when the user presses their mouse button down on a tool
        /// Adds the press class (toolPressedCls)
        /// </summary>
        private void onMouseDown(){}
        /// <summary>
        /// Called when the user rolls out from a tool.
        /// Removes the over class (toolOverCls)
        /// </summary>
        private void onMouseOut(){}
        /// <summary>
        /// Called when the user rolls over a tool
        /// Adds the over class (toolOverCls)
        /// </summary>
        private void onMouseOver(){}
        /// <summary>
        /// Sets the type of the tool. Allows the icon to be changed.
        /// </summary>
        /// <param name="type"><p>The new type. See the <see cref="Ext.panel.ToolConfig.type">type</see> config.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.panel.Tool">Ext.panel.Tool</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Tool setType(JsString type){return null;}
        public Tool(ToolConfig config){}
        public Tool(){}
        public Tool(params object[] args){}
    }
    #endregion
    #region ToolConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ToolConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// A function to execute when the tool is clicked. Arguments passed are:
        /// <li><strong>event</strong> : <see cref="Ext.EventObject">Ext.EventObject</see> - The click event.</li>
        /// <li><strong>toolEl</strong> : <see cref="Ext.dom.Element">Ext.Element</see> - The tool Element.</li>
        /// <li><strong>owner</strong> : <see cref="Ext.panel.Header">Ext.panel.Header</see> - The host panel header.</li>
        /// <li><strong>tool</strong> : <see cref="Ext.panel.Tool">Ext.panel.Tool</see> - The tool object</li>
        /// </summary>
        public System.Delegate handler;
        /// <summary>
        /// The scope to execute the handler function. Defaults to the tool.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// Specify as false to allow click event to propagate.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool stopEvent;
        /// <summary>
        /// Defaults to: <c>&quot;x-tool-over&quot;</c>
        /// </summary>
        public JsString toolOverCls;
        /// <summary>
        /// Defaults to: <c>&quot;x-tool-pressed&quot;</c>
        /// </summary>
        public JsString toolPressedCls;
        /// <summary>
        /// The tooltip for the tool - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config
        /// object
        /// </summary>
        public object tooltip;
        /// <summary>
        /// The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString tooltipType;
        /// <summary>
        /// The type of tool to render. The following types are available:
        /// <li><span><i></i></span> close</li>
        /// <li><span><i></i></span> minimize</li>
        /// <li><span><i></i></span> maximize</li>
        /// <li><span><i></i></span> restore</li>
        /// <li><span><i></i></span> toggle</li>
        /// <li><span><i></i></span> gear</li>
        /// <li><span><i></i></span> prev</li>
        /// <li><span><i></i></span> next</li>
        /// <li><span><i></i></span> pin</li>
        /// <li><span><i></i></span> unpin</li>
        /// <li><span><i></i></span> right</li>
        /// <li><span><i></i></span> left</li>
        /// <li><span><i></i></span> down</li>
        /// <li><span><i></i></span> up</li>
        /// <li><span><i></i></span> refresh</li>
        /// <li><span><i></i></span> plus</li>
        /// <li><span><i></i></span> minus</li>
        /// <li><span><i></i></span> search</li>
        /// <li><span><i></i></span> save</li>
        /// <li><span><i></i></span> help</li>
        /// <li><span><i></i></span> print</li>
        /// <li><span><i></i></span> expand</li>
        /// <li><span><i></i></span> collapse</li>
        /// </summary>
        public JsString type;
        public ToolConfig(params object[] args){}
    }
    #endregion
    #region ToolEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ToolEvents : Ext.ComponentEvents
    {
        /// <summary>
        /// Fires when the tool is clicked
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void click(Tool @this, EventObject e, object eOpts){}
        public ToolEvents(params object[] args){}
    }
    #endregion
}
