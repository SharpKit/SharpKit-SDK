//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.grid.feature
{
    #region GroupingSummary
    /// <inheritdocs />
    /// <summary>
    /// <p>This feature adds an aggregate summary row at the bottom of each group that is provided
    /// by the <see cref="Ext.grid.feature.Grouping">Ext.grid.feature.Grouping</see> feature. There are two aspects to the summary:</p>
    /// <h2>Calculation</h2>
    /// <p>The summary value needs to be calculated for each column in the grid. This is controlled
    /// by the summaryType option specified on the column. There are several built in summary types,
    /// which can be specified as a string on the column configuration. These call underlying methods
    /// on the store:</p>
    /// <ul>
    /// <li><see cref="Ext.data.Store.count">count</see></li>
    /// <li><see cref="Ext.data.Store.sum">sum</see></li>
    /// <li><see cref="Ext.data.Store.min">min</see></li>
    /// <li><see cref="Ext.data.Store.max">max</see></li>
    /// <li><see cref="Ext.data.Store.average">average</see></li>
    /// </ul>
    /// <p>Alternatively, the summaryType can be a function definition. If this is the case,
    /// the function is called with an array of records to calculate the summary value.</p>
    /// <h2>Rendering</h2>
    /// <p>Similar to a column, the summary also supports a summaryRenderer function. This
    /// summaryRenderer is called before displaying a value. The function is optional, if
    /// not specified the default calculated value is shown. The summaryRenderer is called with:</p>
    /// <ul>
    /// <li>value {Object} - The calculated value.</li>
    /// <li>summaryData {Object} - Contains all raw summary values for the row.</li>
    /// <li>field {String} - The name of the field we are calculating</li>
    /// </ul>
    /// <h2>Example Usage</h2>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('TestResult', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['student', 'subject', {
    /// name: 'mark',
    /// type: 'int'
    /// }]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
    /// width: 200,
    /// height: 240,
    /// renderTo: document.body,
    /// features: [{
    /// groupHeaderTpl: 'Subject: {name}',
    /// ftype: 'groupingsummary'
    /// }],
    /// store: {
    /// model: 'TestResult',
    /// groupField: 'subject',
    /// data: [{
    /// student: 'Student 1',
    /// subject: 'Math',
    /// mark: 84
    /// },{
    /// student: 'Student 1',
    /// subject: 'Science',
    /// mark: 72
    /// },{
    /// student: 'Student 2',
    /// subject: 'Math',
    /// mark: 96
    /// },{
    /// student: 'Student 2',
    /// subject: 'Science',
    /// mark: 68
    /// }]
    /// },
    /// columns: [{
    /// dataIndex: 'student',
    /// text: 'Name',
    /// summaryType: 'count',
    /// summaryRenderer: function(value){
    /// return <see cref="Ext.String.format">Ext.String.format</see>('{0} student{1}', value, value !== 1 ? 's' : '');
    /// }
    /// }, {
    /// dataIndex: 'mark',
    /// text: 'Mark',
    /// summaryType: 'average'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class GroupingSummary : Grouping, AbstractSummary
    {
        /// <summary>
        /// The name of the property which contains the Array of summary objects.
        /// It allows to use server-side calculated summaries.
        /// </summary>
        public JsString remoteRoot;
        /// <summary>
        /// True to show the summary row.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showSummaryRow;
        /// <summary>
        /// Generates all of the summary data to be used when processing the template
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The summary data</p>
        /// </div>
        /// </returns>
        private object generateSummaryData(){return null;}
        /// <summary>
        /// Gets the value for the column from the attached data.
        /// </summary>
        /// <param name="column"><p>The header</p>
        /// </param>
        /// <param name="data"><p>The current data</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The value to be rendered</p>
        /// </div>
        /// </returns>
        public virtual JsString getColumnValue(Ext.grid.column.Column column, object data){return null;}
        /// <summary>
        /// Modifies the row template to include the summary row.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The modified template</p>
        /// </div>
        /// </returns>
        private JsString getFeatureTpl(){return null;}
        /// <summary>
        /// Gets any fragments needed for the template.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The fragments</p>
        /// </div>
        /// </returns>
        private object getFragmentTpl(){return null;}
        /// <summary>
        /// Gets the data for printing a template row
        /// </summary>
        /// <param name="index"><p>The index in the template</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The template values</p>
        /// </div>
        /// </returns>
        private JsArray getPrintData(JsNumber index){return null;}
        /// <summary>
        /// Get the summary data for a field.
        /// </summary>
        /// <param name="store"><p>The store to get the data from</p>
        /// </param>
        /// <param name="type"><p>The type of aggregation. If a function is specified it will
        /// be passed to the stores aggregate function.</p>
        /// </param>
        /// <param name="field"><p>The field to aggregate on</p>
        /// </param>
        /// <param name="group"><p>True to aggregate in grouped mode</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see>/<see cref="String">String</see>/<see cref="Object">Object</see></span><div><p>See the return type for the store functions.</p>
        /// </div>
        /// </returns>
        public virtual object getSummary(Ext.data.Store store, object type, JsString field, bool group){return null;}
        /// <summary>
        /// Gets any fragments to be used in the tpl
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The fragments</p>
        /// </div>
        /// </returns>
        public virtual object getSummaryFragments(){return null;}
        /// <summary>
        /// Prints a summary row
        /// </summary>
        /// <param name="index"><p>The index in the template</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The value of the summary row</p>
        /// </div>
        /// </returns>
        public virtual JsString printSummaryRow(object index){return null;}
        /// <summary>
        /// Toggle whether or not to show the summary row.
        /// </summary>
        /// <param name="visible"><p>True to show the summary row</p>
        /// </param>
        public virtual void toggleSummaryRow(bool visible){}
        public GroupingSummary(GroupingSummaryConfig config){}
        public GroupingSummary(){}
        public GroupingSummary(params object[] args){}
    }
    #endregion
    #region GroupingSummaryConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class GroupingSummaryConfig : GroupingConfig
    {
        /// <summary>
        /// The name of the property which contains the Array of summary objects.
        /// It allows to use server-side calculated summaries.
        /// </summary>
        public JsString remoteRoot;
        /// <summary>
        /// True to show the summary row.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showSummaryRow;
        public GroupingSummaryConfig(params object[] args){}
    }
    #endregion
    #region GroupingSummaryEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class GroupingSummaryEvents : GroupingEvents
    {
        public GroupingSummaryEvents(params object[] args){}
    }
    #endregion
}
