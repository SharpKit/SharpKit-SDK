//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.layout.container
{
    #region Card
    /// <inheritdocs />
    /// <summary>
    /// <p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be
    /// visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
    /// This class is intended to be extended or created via the layout:'card' <see cref="Ext.container.ContainerConfig.layout">Ext.container.Container.layout</see> config,
    /// and should generally not need to be created directly via the new keyword.</p>
    /// <p>The CardLayout's focal method is <see cref="Ext.layout.container.Card.setActiveItem">setActiveItem</see>.  Since only one panel is displayed at a time,
    /// the only way to move from one Component to the next is by calling setActiveItem, passing the next panel to display
    /// (or its id or index).  The layout itself does not provide a user interface for handling this navigation,
    /// so that functionality must be provided by the developer.</p>
    /// <p>To change the active card of a container, call the setActiveItem method of its layout:</p>
    /// <pre><code>var p = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// layout: 'card',
    /// items: [
    /// { html: 'Card 1' },
    /// { html: 'Card 2' }
    /// ],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// p.getLayout().setActiveItem(1);
    /// </code></pre>
    /// <p>In the following example, a simplistic wizard setup is demonstrated.  A button bar is added
    /// to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a
    /// common navigation routine.  Note that other uses of a CardLayout (like a tab control) would require a
    /// completely different implementation.  For serious implementations, a better approach would be to extend
    /// CardLayout to provide the custom functionality needed.</p>
    /// <pre><code>var navigate = function(panel, direction){
    /// // This routine could contain business logic required to manage the navigation steps.
    /// // It would call setActiveItem as needed, manage navigation button state, handle any
    /// // branching logic that might be required, handle alternate actions like cancellation
    /// // or finalization, etc.  A complete wizard implementation could get pretty
    /// // sophisticated depending on the complexity required, and should probably be
    /// // done as a subclass of CardLayout in a real-world implementation.
    /// var layout = panel.getLayout();
    /// layout[direction]();
    /// <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('move-prev').setDisabled(!layout.getPrev());
    /// <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('move-next').setDisabled(!layout.getNext());
    /// };
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// title: 'Example Wizard',
    /// width: 300,
    /// height: 200,
    /// layout: 'card',
    /// bodyStyle: 'padding:15px',
    /// defaults: {
    /// // applied to each contained panel
    /// border: false
    /// },
    /// // just an example of one possible navigation scheme, using buttons
    /// bbar: [
    /// {
    /// id: 'move-prev',
    /// text: 'Back',
    /// handler: function(btn) {
    /// navigate(btn.up("panel"), "prev");
    /// },
    /// disabled: true
    /// },
    /// '-&gt;', // greedy spacer so that the buttons are aligned to each side
    /// {
    /// id: 'move-next',
    /// text: 'Next',
    /// handler: function(btn) {
    /// navigate(btn.up("panel"), "next");
    /// }
    /// }
    /// ],
    /// // the panels (or "cards") within the layout
    /// items: [{
    /// id: 'card-0',
    /// html: '&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'
    /// },{
    /// id: 'card-1',
    /// html: '&lt;p&gt;Step 2 of 3&lt;/p&gt;'
    /// },{
    /// id: 'card-2',
    /// html: '&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Card : Fit
    {
        /// <summary>
        /// True to render each contained item at the time it becomes active, false to render all contained items
        /// as soon as the layout is rendered (defaults to false).  If there is a significant amount of content or
        /// a lot of heavy controls being rendered into panels that are not displayed by default, setting this to
        /// true might improve performance.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool deferredRender;
        /// <summary>
        /// Return the active (visible) component in the layout.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div>
        /// </div>
        /// </returns>
        public Ext.Component getActiveItem(){return null;}
        /// <summary>
        /// Return the active (visible) component in the layout to the next card
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The next component or false.</p>
        /// </div>
        /// </returns>
        public Ext.Component getNext(){return null;}
        /// <summary>
        /// Return the active (visible) component in the layout to the previous card
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The previous component or false.</p>
        /// </div>
        /// </returns>
        public Ext.Component getPrev(){return null;}
        /// <summary>
        /// Sets the active (visible) component in the layout to the next card
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>the activated component or false when nothing activated.</p>
        /// </div>
        /// </returns>
        public Ext.Component next(){return null;}
        /// <summary>
        /// Sets the active (visible) component in the layout to the previous card
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>the activated component or false when nothing activated.</p>
        /// </div>
        /// </returns>
        public Ext.Component prev(){return null;}
        /// <summary>
        /// Makes the given card active.
        /// <code>var card1 = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {itemId: 'card-1'});
        /// var card2 = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {itemId: 'card-2'});
        /// var panel = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
        /// layout: 'card',
        /// activeItem: 0,
        /// items: [card1, card2]
        /// });
        /// // These are all equivalent
        /// panel.getLayout().setActiveItem(card2);
        /// panel.getLayout().setActiveItem('card-2');
        /// panel.getLayout().setActiveItem(1);
        /// </code>
        /// </summary>
        /// <param name="newCard"><p>The component, component <see cref="Ext.ComponentConfig.id">id</see>,
        /// <see cref="Ext.ComponentConfig.itemId">itemId</see>, or index of component.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>the activated component or false when nothing activated.
        /// False is returned also when trying to activate an already active card.</p>
        /// </div>
        /// </returns>
        public Ext.Component setActiveItem(object newCard){return null;}
        public Card(CardConfig config){}
        public Card(){}
        public Card(params object[] args){}
    }
    #endregion
    #region CardConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CardConfig : FitConfig
    {
        /// <summary>
        /// True to render each contained item at the time it becomes active, false to render all contained items
        /// as soon as the layout is rendered (defaults to false).  If there is a significant amount of content or
        /// a lot of heavy controls being rendered into panels that are not displayed by default, setting this to
        /// true might improve performance.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool deferredRender;
        public CardConfig(params object[] args){}
    }
    #endregion
    #region CardEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CardEvents : FitEvents
    {
        public CardEvents(params object[] args){}
    }
    #endregion
}
