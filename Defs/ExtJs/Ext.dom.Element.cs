//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.dom
{
    #region Element
    /// <inheritdocs />
    /// <summary>
    /// <p>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.</p>
    /// <p>All instances of this class inherit the methods of <see cref="Ext.fx.Anim">Ext.fx.Anim</see> making visual effects easily available to all
    /// DOM elements.</p>
    /// <p>Note that the events documented in this class are not Ext events, they encapsulate browser events. Some older browsers
    /// may not support the full range of events. Which events are supported is beyond the control of Ext JS.</p>
    /// <p>Usage:</p>
    /// <pre><code>// by id
    /// var el = <see cref="Ext.ExtContext.get">Ext.get</see>("my-div");
    /// // by DOM element reference
    /// var el = <see cref="Ext.ExtContext.get">Ext.get</see>(myDivElement);
    /// </code></pre>
    /// <h1>Animations</h1>
    /// <p>When an element is manipulated, by default there is no animation.</p>
    /// <pre><code>var el = <see cref="Ext.ExtContext.get">Ext.get</see>("my-div");
    /// // no animation
    /// el.setWidth(100);
    /// </code></pre>
    /// <p>Many of the functions for manipulating an element have an optional "animate" parameter. This parameter can be
    /// specified as boolean (true) for default animation effects.</p>
    /// <pre><code>// default animation
    /// el.setWidth(100, true);
    /// </code></pre>
    /// <p>To configure the effects, an object literal with animation options to use as the Element animation configuration
    /// object can also be specified. Note that the supported Element animation configuration options are a subset of the
    /// <see cref="Ext.fx.Anim">Ext.fx.Anim</see> animation options specific to Fx effects. The supported Element animation configuration options
    /// are:</p>
    /// <pre><code>Option    Default   Description
    /// --------- --------  ---------------------------------------------
    /// <see cref="Ext.fx.AnimConfig.duration">duration</see>  350       The duration of the animation in milliseconds
    /// <see cref="Ext.fx.AnimConfig.easing">easing</see>    easeOut   The easing method
    /// <see cref="Ext.fx.AnimConfig.callback">callback</see>  none      A function to execute when the anim completes
    /// <see cref="Ext.fx.AnimConfig.scope">scope</see>     this      The scope (this) of the callback function
    /// </code></pre>
    /// <p>Usage:</p>
    /// <pre><code>// Element animation options object
    /// var opt = {
    /// <see cref="Ext.fx.AnimConfig.duration">duration</see>: 1000,
    /// <see cref="Ext.fx.AnimConfig.easing">easing</see>: 'elasticIn',
    /// <see cref="Ext.fx.AnimConfig.callback">callback</see>: this.foo,
    /// <see cref="Ext.fx.AnimConfig.scope">scope</see>: this
    /// };
    /// // animation with some options set
    /// el.setWidth(100, opt);
    /// </code></pre>
    /// <p>The Element animation object being used for the animation will be set on the options object as "anim", which allows
    /// you to stop or manipulate the animation. Here is an example:</p>
    /// <pre><code>// using the "anim" property to get the Anim object
    /// if(opt.anim.isAnimated()){
    /// opt.anim.stop();
    /// }
    /// </code></pre>
    /// <h1>Composite (Collections of) Elements</h1>
    /// <p>For working with collections of Elements, see <see cref="Ext.dom.CompositeElement">Ext.CompositeElement</see></p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Element : AbstractElement
    {
        /// <summary>
        /// True to automatically adjust width and height settings for box-model issues.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoBoxAdjust{get;set;}
        /// <summary>
        /// The element's default display mode.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString originalDisplay{get;set;}
        /// <summary>
        /// Creates new Element directly.
        /// </summary>
        /// <param name="element">
        /// </param>
        /// <param name="forceNew"><p>By default the constructor checks to see if there is already an instance of this
        /// element in the cache and if there is it returns the same instance. This will skip that check (useful for extending
        /// this class).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public Element(object element, object forceNew=null){}
        /// <summary>
        /// Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)
        /// </summary>
        /// <param name="className"><p>The class to add</p>
        /// </param>
        /// <param name="testFn"><p>A test function to execute before adding the class. The passed parameter
        /// will be the Element instance. If this functions returns false, the class will not be added.</p>
        /// </param>
        /// <param name="scope"><p>The scope to execute the testFn in.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element addClsOnClick(JsString className, object testFn=null, object scope=null){return null;}
        /// <summary>
        /// Sets up event handlers to add and remove a css class when this element has the focus
        /// </summary>
        /// <param name="className"><p>The class to add</p>
        /// </param>
        /// <param name="testFn"><p>A test function to execute before adding the class. The passed parameter
        /// will be the Element instance. If this functions returns false, the class will not be added.</p>
        /// </param>
        /// <param name="scope"><p>The scope to execute the testFn in.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element addClsOnFocus(JsString className, object testFn=null, object scope=null){return null;}
        /// <summary>
        /// Sets up event handlers to add and remove a css class when the mouse is over this element
        /// </summary>
        /// <param name="className"><p>The class to add</p>
        /// </param>
        /// <param name="testFn"><p>A test function to execute before adding the class. The passed parameter
        /// will be the Element instance. If this functions returns false, the class will not be added.</p>
        /// </param>
        /// <param name="scope"><p>The scope to execute the testFn in.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element addClsOnOver(JsString className, object testFn=null, object scope=null){return null;}
        /// <summary>
        /// Convenience method for constructing a KeyMap
        /// </summary>
        /// <param name="key"><p>Either a string with the keys to listen for, the numeric key code,
        /// array of key codes or an object with the following options:</p>
        /// <ul><li><span>key</span> : <see cref="Number">Number</see>/<see cref="Array">Array</see><div></div></li><li><span>shift</span> : <see cref="bool">Boolean</see><div></div></li><li><span>ctrl</span> : <see cref="bool">Boolean</see><div></div></li><li><span>alt</span> : <see cref="bool">Boolean</see><div></div></li></ul></param>
        /// <param name="fn"><p>The function to call</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the specified function is executed. Defaults to this Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.KeyMap">Ext.util.KeyMap</see></span><div><p>The KeyMap created</p>
        /// </div>
        /// </returns>
        public Ext.util.KeyMap addKeyListener(object key, System.Delegate fn, object scope=null){return null;}
        /// <summary>
        /// Creates a KeyMap for this element
        /// </summary>
        /// <param name="config"><p>The KeyMap config. See <see cref="Ext.util.KeyMap">Ext.util.KeyMap</see> for more details</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.util.KeyMap">Ext.util.KeyMap</see></span><div><p>The KeyMap created</p>
        /// </div>
        /// </returns>
        public Ext.util.KeyMap addKeyMap(object config){return null;}
        /// <summary>
        /// Shorthand for on.
        /// Appends an event handler to this element.
        /// </summary>
        /// <param name="eventName"><p>The name of event to handle.</p>
        /// </param>
        /// <param name="fn"><p>The handler function the event invokes. This function is passed the following parameters:</p>
        /// <ul>
        /// <li><p><strong>evt</strong> : EventObject</p>
        /// <p>The <see cref="Ext.EventObject">EventObject</see> describing the event.</p></li>
        /// <li><p><strong>el</strong> : HtmlElement</p>
        /// <p>The DOM element which was the target of the event. Note that this may be filtered by using the delegate option.</p></li>
        /// <li><p><strong>o</strong> : Object</p>
        /// <p>The options object from the call that setup the listener.</p></li>
        /// </ul>
        /// </param>
        /// <param name="scope"><p>The scope (<strong>this</strong> reference) in which the handler function is executed. <strong>If
        /// omitted, defaults to this Element.</strong></p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration properties. This may contain any of
        /// the following properties:</p>
        /// <ul>
        /// <li><p><strong>scope</strong> Object :</p>
        /// <p>The scope (<strong>this</strong> reference) in which the handler function is executed. <strong>If omitted, defaults to this
        /// Element.</strong></p></li>
        /// <li><p><strong>delegate</strong> String:</p>
        /// <p>A simple selector to filter the target or look for a descendant of the target. See below for additional details.</p></li>
        /// <li><p><strong>stopEvent</strong> Boolean:</p>
        /// <p>True to stop the event. That is stop propagation, and prevent the default action.</p></li>
        /// <li><p><strong>preventDefault</strong> Boolean:</p>
        /// <p>True to prevent the default action</p></li>
        /// <li><p><strong>stopPropagation</strong> Boolean:</p>
        /// <p>True to prevent event propagation</p></li>
        /// <li><p><strong>normalized</strong> Boolean:</p>
        /// <p>False to pass a browser event to the handler function instead of an <see cref="Ext.EventObject">Ext.EventObject</see></p></li>
        /// <li><p><strong>target</strong> <see cref="Ext.dom.Element">Ext.dom.Element</see>:</p>
        /// <p>Only call the handler if the event was fired on the target Element, <em>not</em> if the event was bubbled up from a
        /// child node.</p></li>
        /// <li><p><strong>delay</strong> Number:</p>
        /// <p>The number of milliseconds to delay the invocation of the handler after the event fires.</p></li>
        /// <li><p><strong>single</strong> Boolean:</p>
        /// <p>True to add a handler to handle just the next firing of the event, and then remove itself.</p></li>
        /// <li><p><strong>buffer</strong> Number:</p>
        /// <p>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed by the specified number of
        /// milliseconds. If the event fires again within that time, the original handler is <em>not</em> invoked, but the new
        /// handler is scheduled in its place.</p></li>
        /// </ul>
        /// <p><strong>Combining Options</strong></p>
        /// <p>Using the options argument, it is possible to combine different types of listeners:</p>
        /// <p>A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the options
        /// object. The options object is available as the third parameter in the handler function.</p>
        /// <p>Code:</p>
        /// <pre><code>el.on('click', this.onClick, this, {
        /// single: true,
        /// delay: 100,
        /// stopEvent : true,
        /// forumId: 4
        /// });
        /// </code></pre>
        /// <p><strong>Attaching multiple handlers in 1 call</strong></p>
        /// <p>The method also allows for a single argument to be passed which is a config object containing properties which
        /// specify multiple handlers.</p>
        /// <p>Code:</p>
        /// <pre><code>el.on({
        /// 'click' : {
        /// fn: this.onClick,
        /// scope: this,
        /// delay: 100
        /// },
        /// 'mouseover' : {
        /// fn: this.onMouseOver,
        /// scope: this
        /// },
        /// 'mouseout' : {
        /// fn: this.onMouseOut,
        /// scope: this
        /// }
        /// });
        /// </code></pre>
        /// <p>Or a shorthand syntax:</p>
        /// <p>Code:</p>
        /// <pre><code>el.on({
        /// 'click' : this.onClick,
        /// 'mouseover' : this.onMouseOver,
        /// 'mouseout' : this.onMouseOut,
        /// scope: this
        /// });
        /// </code></pre>
        /// <p><strong>delegate</strong></p>
        /// <p>This is a configuration option that you can pass along when registering a handler for an event to assist with
        /// event delegation. Event delegation is a technique that is used to reduce memory consumption and prevent exposure
        /// to memory-leaks. By registering an event for a container element as opposed to each element within a container.
        /// By setting this configuration option to a simple selector, the target element will be filtered to look for a
        /// descendant of the target. For example:</p>
        /// <pre><code>// using this markup:
        /// &lt;div id='elId'&gt;
        /// &lt;p id='p1'&gt;paragraph one&lt;/p&gt;
        /// &lt;p id='p2' class='clickable'&gt;paragraph two&lt;/p&gt;
        /// &lt;p id='p3'&gt;paragraph three&lt;/p&gt;
        /// &lt;/div&gt;
        /// // utilize event delegation to registering just one handler on the container element:
        /// el = <see cref="Ext.ExtContext.get">Ext.get</see>('elId');
        /// el.on(
        /// 'click',
        /// function(e,t) {
        /// // handle click
        /// console.info(t.id); // 'p2'
        /// },
        /// this,
        /// {
        /// // filter the target element to be a descendant with the class 'clickable'
        /// delegate: '.clickable'
        /// }
        /// );
        /// </code></pre>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element addListener(JsString eventName, System.Delegate fn, object scope=null, object options=null){return null;}
        /// <summary>
        /// Returns 1 if the browser returns the subpixel dimension rounded to the lowest pixel.
        /// </summary>
        /// <param name="dimension">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>0 or 1</p>
        /// </div>
        /// </returns>
        private JsNumber adjustDirect2DDimension(object dimension){return null;}
        /// <summary>
        /// Aligns this element with another element relative to the specified anchor points. If the other element is the
        /// document it aligns it to the viewport. The position parameter is optional, and can be specified in any one of
        /// the following formats:
        /// <li><strong>Blank</strong>: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").</li>
        /// <li><strong>One anchor (deprecated)</strong>: The passed anchor position is used as the target element's anchor point.
        /// The element being aligned will position its top-left corner (tl) to that point. <em>This method has been
        /// deprecated in favor of the newer two anchor syntax below</em>.</li>
        /// <li><strong>Two anchors</strong>: If two values from the table below are passed separated by a dash, the first value is used as the
        /// element's anchor point, and the second value is used as the target's anchor point.</li>
        /// In addition to the anchor points, the position parameter also supports the "?" character.  If "?" is passed at the end of
        /// the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
        /// the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
        /// that specified in order to enforce the viewport constraints.
        /// Following are all of the supported anchor positions:
        /// Value  Description
        /// -----  -----------------------------
        /// tl     The top left corner (default)
        /// t      The center of the top edge
        /// tr     The top right corner
        /// l      The center of the left edge
        /// c      In the center of the element
        /// r      The center of the right edge
        /// bl     The bottom left corner
        /// b      The center of the bottom edge
        /// br     The bottom right corner
        /// Example Usage:
        /// <code>// align el to other-el using the default positioning ("tl-bl", non-constrained)
        /// el.alignTo("other-el");
        /// // align the top left corner of el with the top right corner of other-el (constrained to viewport)
        /// el.alignTo("other-el", "tr?");
        /// // align the bottom right corner of el with the center left edge of other-el
        /// el.alignTo("other-el", "br-l?");
        /// // align the center of el with the bottom left corner of other-el and
        /// // adjust the x position by -6 pixels (and the y position by 0)
        /// el.alignTo("other-el", "c-bl", [-6, 0]);
        /// </code>
        /// </summary>
        /// <param name="element"><p>The element to align to.</p>
        /// </param>
        /// <param name="position"><p>The position to align to</p>
        /// <p>Defaults to: <c>&quot;tl-bl?&quot;</c></p></param>
        /// <param name="offsets"><p>Offset the positioning by [x, y]</p>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element alignTo(object element, object position=null, object offsets=null, object animate=null){return null;}
        /// <summary>
        /// Anchors an element to another element and realigns it when the window is resized.
        /// </summary>
        /// <param name="element"><p>The element to align to.</p>
        /// </param>
        /// <param name="position"><p>The position to align to.</p>
        /// </param>
        /// <param name="offsets"><p>Offset the positioning by [x, y]</p>
        /// </param>
        /// <param name="animate"><p>True for the default animation or a standard Element animation config object</p>
        /// </param>
        /// <param name="monitorScroll"><p>True to monitor body scroll and reposition. If this parameter
        /// is a number, it is used as the buffer delay (defaults to 50ms).</p>
        /// </param>
        /// <param name="callback"><p>The function to call after the animation finishes</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element anchorTo(object element, JsString position, object offsets=null, object animate=null, object monitorScroll=null, object callback=null){return null;}
        /// <summary>
        /// Performs custom animation on this Element.
        /// The following properties may be specified in <c>from</c>, <c>to</c>, and <c>keyframe</c> objects:
        /// <li><p><c>x</c> - The page X position in pixels.</p></li>
        /// <li><p><c>y</c> - The page Y position in pixels</p></li>
        /// <li><p><c>left</c> - The element's CSS <c>left</c> value. Units must be supplied.</p></li>
        /// <li><p><c>top</c> - The element's CSS <c>top</c> value. Units must be supplied.</p></li>
        /// <li><p><c>width</c> - The element's CSS <c>width</c> value. Units must be supplied.</p></li>
        /// <li><p><c>height</c> - The element's CSS <c>height</c> value. Units must be supplied.</p></li>
        /// <li><p><c>scrollLeft</c> - The element's <c>scrollLeft</c> value.</p></li>
        /// <li><p><c>scrollTop</c> - The element's <c>scrollTop</c> value.</p></li>
        /// <li><p><c>opacity</c> - The element's <c>opacity</c> value. This must be a value between <c>0</c> and <c>1</c>.</p></li>
        /// <strong>Be aware</strong> that animating an Element which is being used by an Ext Component without in some way informing the
        /// Component about the changed element state will result in incorrect Component behaviour. This is because the
        /// Component will be using the old state of the element. To avoid this problem, it is now possible to directly
        /// animate certain properties of Components.
        /// </summary>
        /// <param name="config"><p>Configuration for <see cref="Ext.fx.Anim">Ext.fx.Anim</see>.
        /// Note that the <see cref="Ext.fx.AnimConfig.to">to</see> config is required.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element animate(object config){return null;}
        /// <summary>
        /// Tries to blur the element. Any exceptions are caught and ignored.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element blur(){return null;}
        /// <summary>
        /// Wraps the specified element with a special 9 element markup/CSS block that renders by default as
        /// a gray container with a gradient background, rounded corners and a 4-way shadow.
        /// This special markup is used throughout Ext when box wrapping elements (<see cref="Ext.button.Button">Ext.button.Button</see>,
        /// <see cref="Ext.panel.Panel">Ext.panel.Panel</see> when <see cref="Ext.panel.PanelConfig.frame">frame=true</see>, <see cref="Ext.window.Window">Ext.window.Window</see>).
        /// The markup is of this form:
        /// <code>Ext.dom.Element.boxMarkup =
        /// '&lt;div class="{0}-tl"&gt;&lt;div class="{0}-tr"&gt;&lt;div class="{0}-tc"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        /// &lt;div class="{0}-ml"&gt;&lt;div class="{0}-mr"&gt;&lt;div class="{0}-mc"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        /// &lt;div class="{0}-bl"&gt;&lt;div class="{0}-br"&gt;&lt;div class="{0}-bc"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;';
        /// </code>
        /// Example usage:
        /// <code>// Basic box wrap
        /// <see cref="Ext.ExtContext.get">Ext.get</see>("foo").boxWrap();
        /// // You can also add a custom class and use CSS inheritance rules to customize the box look.
        /// // 'x-box-blue' is a built-in alternative -- look at the related CSS definitions as an example
        /// // for how to create a custom box wrap style.
        /// <see cref="Ext.ExtContext.get">Ext.get</see>("foo").boxWrap().addCls("x-box-blue");
        /// </code>
        /// </summary>
        /// <param name="class"><p>A base CSS class to apply to the containing wrapper element.
        /// Note that there are a number of CSS rules that are dependent on this name to make the overall effect work,
        /// so if you supply an alternate base class, make sure you also supply all of the necessary rules.</p>
        /// <p>Defaults to: <c>&quot;x-box&quot;</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The outermost wrapping element of the created box structure.</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element boxWrap(object @class=null){return null;}
        /// <summary>
        /// When an element is moved around in the DOM, or is hidden using display:none, it loses layout, and therefore
        /// all scroll positions of all descendant elements are lost.
        /// This function caches them, and returns a function, which when run will restore the cached positions.
        /// In the following example, the Panel is moved from one Container to another which will cause it to lose all scroll positions:
        /// <code>var restoreScroll = myPanel.el.cacheScrollValues();
        /// myOtherContainer.add(myPanel);
        /// restoreScroll();
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>A function which will restore all descentant elements of this Element to their scroll
        /// positions recorded when this function was executed. Be aware that the returned function is a closure which has
        /// captured the scope of <c>cacheScrollValues</c>, so take care to derefence it as soon as not needed - if is it is a <c>var</c>
        /// it will drop out of scope, and the reference will be freed.</p>
        /// </div>
        /// </returns>
        public System.Delegate cacheScrollValues(){return null;}
        /// <summary>
        /// Centers the Element in either the viewport, or another Element.
        /// </summary>
        /// <param name="centerIn"><p>The element in which to center the element.</p>
        /// </param>
        public void center(object centerIn=null){}
        /// <summary>
        /// Removes Empty, or whitespace filled text nodes. Combines adjacent text nodes.
        /// </summary>
        /// <param name="forceReclean"><p>By default the element keeps track if it has been cleaned already
        /// so you can call this over and over. However, if you update the element and need to force a reclean, you
        /// can pass true.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public void clean(object forceReclean=null){}
        /// <summary>
        /// Alias for removeAllListeners.
        /// Removes all previous added listeners from this element
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element clearListeners(){return null;}
        /// <summary>
        /// Clears any opacity settings from this element. Required in some cases for IE.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element clearOpacity(){return null;}
        /// <summary>
        /// Clears positioning back to the default when the document was loaded.
        /// </summary>
        /// <param name="value"><p>The value to use for the left, right, top, bottom. You could use 'auto'.</p>
        /// <p>Defaults to: <c>&quot;&quot;</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement clearPositioning(object value=null){return null;}
        /// <summary>
        /// Store the current overflow setting and clip overflow on the element - use unclip to remove
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element clip(){return null;}
        /// <summary>
        /// Creates a proxy element of this element
        /// </summary>
        /// <param name="config"><p>The class name of the proxy element or a DomHelper config object</p>
        /// </param>
        /// <param name="renderTo"><p>The element or element id to render the proxy to. Defaults to: document.body.</p>
        /// </param>
        /// <param name="matchBox"><p>True to align and size the proxy to this element now.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The new proxy element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element createProxy(object config, object renderTo=null, object matchBox=null){return null;}
        /// <summary>
        /// Creates an iframe shim for this element to keep selects and other windowed objects from
        /// showing through.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The new shim element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element createShim(){return null;}
        /// <summary>
        /// Convenience method for setVisibilityMode(Element.DISPLAY)
        /// </summary>
        /// <param name="display"><p>What to set display to when visible</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element enableDisplayMode(object display=null){return null;}
        /// <summary>
        /// Fade an element in (from transparent to opaque). The ending opacity can be specified using the opacity
        /// config option. Usage:
        /// <code>// default: fade in from opacity 0 to 100%
        /// el.fadeIn();
        /// // custom: fade in from opacity 0 to 75% over 2 seconds
        /// el.fadeIn({ opacity: .75, duration: 2000});
        /// // common config options shown with default values
        /// el.fadeIn({
        /// opacity: 1, //can be any value between 0 and 1 (e.g. .5)
        /// easing: 'easeOut',
        /// duration: 500
        /// });
        /// </code>
        /// </summary>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element fadeIn(object options=null){return null;}
        /// <summary>
        /// Fade an element out (from opaque to transparent). The ending opacity can be specified using the opacity
        /// config option. Note that IE may require useDisplay:true in order to redisplay correctly.
        /// Usage:
        /// <code>// default: fade out from the element's current opacity to 0
        /// el.fadeOut();
        /// // custom: fade out from the element's current opacity to 25% over 2 seconds
        /// el.fadeOut({ opacity: .25, duration: 2000});
        /// // common config options shown with default values
        /// el.fadeOut({
        /// opacity: 0, //can be any value between 0 and 1 (e.g. .5)
        /// easing: 'easeOut',
        /// duration: 500,
        /// remove: false,
        /// useDisplay: false
        /// });
        /// </code>
        /// </summary>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element fadeOut(object options=null){return null;}
        /// <summary>
        /// Tries to focus the element. Any exceptions are caught and ignored.
        /// </summary>
        /// <param name="defer"><p>Milliseconds to defer the focus</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element focus(object defer=null){return null;}
        /// <summary>
        /// Checks whether this element can be focused.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the element is focusable</p>
        /// </div>
        /// </returns>
        public bool focusable(){return false;}
        /// <summary>
        /// Shows a ripple of exploding, attenuating borders to draw attention to an Element. Usage:
        /// <code>// default: a single light blue ripple
        /// el.frame();
        /// // custom: 3 red ripples lasting 3 seconds total
        /// el.frame("#ff0000", 3, { duration: 3000 });
        /// // common config options shown with default values
        /// el.frame("#C3DAF9", 1, {
        /// duration: 1000 // duration of each individual ripple.
        /// // Note: Easing is not configurable and will be ignored if included
        /// });
        /// </code>
        /// </summary>
        /// <param name="color"><p>The hex color value for the border.</p>
        /// <p>Defaults to: <c>&quot;#C3DAF9&quot;</c></p></param>
        /// <param name="count"><p>The number of ripples to display.</p>
        /// <p>Defaults to: <c>1</c></p></param>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element frame(object color=null, object count=null, object options=null){return null;}
        /// <summary>
        /// Returns the value of a namespaced attribute from the element's underlying DOM node.
        /// </summary>
        /// <param name="namespace"><p>The namespace in which to look for the attribute</p>
        /// </param>
        /// <param name="name"><p>The attribute name</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The attribute value</p>
        /// </div>
        /// </returns>
        public JsString getAttributeNS(JsString @namespace, JsString name){return null;}
        /// <summary>
        /// Calculates the x, y to center this element on the screen
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The x, y values [x, y]</p>
        /// </div>
        /// </returns>
        public JsNumber[] getCenterXY(){return null;}
        /// <summary>
        /// Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
        /// are convert to standard 6 digit hex color.
        /// </summary>
        /// <param name="attr"><p>The css attribute</p>
        /// </param>
        /// <param name="defaultValue"><p>The default value to use when a valid color isn't found</p>
        /// </param>
        /// <param name="prefix"><p>defaults to #. Use an empty string when working with
        /// color anims.</p>
        /// </param>
        public void getColor(JsString attr, JsString defaultValue, object prefix=null){}
        /// <summary>
        /// Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
        /// when needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements
        /// if a height has not been set using CSS.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getComputedHeight(){return null;}
        /// <summary>
        /// Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
        /// when needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements
        /// if a width has not been set using CSS.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getComputedWidth(){return null;}
        /// <summary>
        /// Returns the [X, Y] vector by which this element must be translated to make a best attempt
        /// to constrain within the passed constraint. Returns false is this element does not need to be moved.
        /// Priority is given to constraining the top and left within the constraint.
        /// The constraint may either be an existing element into which this element is to be constrained, or
        /// an <see cref="Ext.util.Region">Region</see> into which this element is to be constrained.
        /// </summary>
        /// <param name="constrainTo"><p>The Element or Region into which this element is to be constrained.</p>
        /// </param>
        /// <param name="proposedPosition"><p>A proposed <c>[X, Y]</c> position to test for validity and to produce a vector for instead
        /// of using this Element's current position;</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]/<see cref="bool">Boolean</see></span><div><p><strong>If</strong> this element <em>needs</em> to be translated, an <c>[X, Y]</c>
        /// vector by which this element must be translated. Otherwise, <c>false</c>.</p>
        /// </div>
        /// </returns>
        public object[] getConstrainVector(object constrainTo, JsArray<Number> proposedPosition){return null;}
        /// <summary>
        /// Returns the sum width of the padding and borders for the passed "sides". See getBorderWidth()
        /// for more information about the sides.
        /// </summary>
        /// <param name="sides">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getFrameWidth(JsString sides){return null;}
        /// <summary>
        /// Gets this element's ElementLoader
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.ElementLoader">Ext.ElementLoader</see></span><div><p>The loader</p>
        /// </div>
        /// </returns>
        public ElementLoader getLoader(){return null;}
        /// <summary>
        /// Returns the x-coordinate of this element reletive to its offsetParent.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The local x-coordinate (relative to the <c>offsetParent</c>).</p>
        /// </div>
        /// </returns>
        public JsNumber getLocalX(){return null;}
        /// <summary>
        /// Returns the y-coordinate of this element reletive to its offsetParent.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The local y-coordinate (relative to the <c>offsetParent</c>).</p>
        /// </div>
        /// </returns>
        public JsNumber getLocalY(){return null;}
        /// <summary>
        /// Gets an object with all CSS positioning properties. Useful along with #setPostioning to get
        /// snapshot before performing an update and then restoring the element.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public object getPositioning(){return null;}
        /// <summary>
        /// Returns the region of this element.
        /// The element must be part of the DOM tree to have a region
        /// (display:none or elements not appended return false).
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>A Region containing "top, left, bottom, right" member data.</p>
        /// </div>
        /// </returns>
        public Ext.util.Region getRegion(){return null;}
        /// <summary>
        /// Gets the parent node of the current element taking into account Ext.scopeResetCSS
        /// </summary>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The parent element</p>
        /// </div>
        /// </returns>
        protected JsObject getScopeParent(){return null;}
        /// <summary>
        /// Returns the current scroll position of the element.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>An object containing the scroll position in the format
        /// <c>{left: (scrollLeft), top: (scrollTop)}</c></p>
        /// </div>
        /// </returns>
        public object getScroll(){return null;}
        /// <summary>
        /// Returns the dimensions of the element available to lay content out in.
        /// getStyleSize utilizes prefers style sizing if present, otherwise it chooses the larger of offsetHeight/clientHeight and
        /// offsetWidth/clientWidth. To obtain the size excluding scrollbars, use getViewSize.
        /// Sizing of the document body is handled at the adapter level which handles special cases for IE and strict modes, etc.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Object describing width and height.</p>
        /// <ul><li><span>width</span> : <see cref="Number">Number</see><div></div></li><li><span>height</span> : <see cref="Number">Number</see><div></div></li></ul></div>
        /// </returns>
        public object getStyleSize(){return null;}
        /// <summary>
        /// Returns the width in pixels of the passed text, or the width of the text in this Element.
        /// </summary>
        /// <param name="text"><p>The text to measure. Defaults to the innerHTML of the element.</p>
        /// </param>
        /// <param name="min"><p>The minumum value to return.</p>
        /// </param>
        /// <param name="max"><p>The maximum value to return.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The text width in pixels.</p>
        /// </div>
        /// </returns>
        public JsNumber getTextWidth(JsString text, object min=null, object max=null){return null;}
        /// <summary>
        /// Returns the content region of this element. That is the region within the borders and padding.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.util.Region">Ext.util.Region</see></span><div><p>A Region containing "top, left, bottom, right" member data.</p>
        /// </div>
        /// </returns>
        public Ext.util.Region getViewRegion(){return null;}
        /// <summary>
        /// Slides the element while fading it out of view. An anchor point can be optionally passed to set the ending point
        /// of the effect. Usage:
        /// <code>// default: slide the element downward while fading out
        /// el.ghost();
        /// // custom: slide the element out to the right with a 2-second duration
        /// el.ghost('r', { duration: 2000 });
        /// // common config options shown with default values
        /// el.ghost('b', {
        /// easing: 'easeOut',
        /// duration: 500
        /// });
        /// </code>
        /// </summary>
        /// <param name="anchor"><p>One of the valid Fx anchor positions (defaults to bottom: 'b')</p>
        /// </param>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element ghost(object anchor=null, object options=null){return null;}
        /// <summary>
        /// Determine if the Element has a relevant height and width available based
        /// upon current logical visibility state
        /// </summary>
        private void hasMetrics(){}
        /// <summary>
        /// Highlights the Element by setting a color (applies to the background-color by default, but can be changed using
        /// the "attr" config option) and then fading back to the original color. If no original color is available, you
        /// should provide the "endColor" config option which will be cleared after the animation. Usage:
        /// <code>// default: highlight background to yellow
        /// el.highlight();
        /// // custom: highlight foreground text to blue for 2 seconds
        /// el.highlight("0000ff", { attr: 'color', duration: 2000 });
        /// // common config options shown with default values
        /// el.highlight("ffff9c", {
        /// attr: "backgroundColor", //can be any valid CSS property (attribute) that supports a color value
        /// endColor: (current color) or "ffffff",
        /// easing: 'easeIn',
        /// duration: 1000
        /// });
        /// </code>
        /// </summary>
        /// <param name="color"><p>The highlight color. Should be a 6 char hex color without the leading #
        /// (defaults to yellow: 'ffff9c')</p>
        /// </param>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element highlight(object color=null, object options=null){return null;}
        /// <summary>
        /// Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.
        /// </summary>
        /// <param name="overFn"><p>The function to call when the mouse enters the Element.</p>
        /// </param>
        /// <param name="outFn"><p>The function to call when the mouse leaves the Element.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the functions are executed. Defaults
        /// to the Element's DOM element.</p>
        /// </param>
        /// <param name="options"><p>Options for the listener. See <see cref="Ext.util.Observable.addListener">the
        /// options parameter</see>.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element hover(System.Delegate overFn, System.Delegate outFn, object scope=null, object options=null){return null;}
        /// <summary>
        /// Initializes a Ext.dd.DD drag drop object for this element.
        /// </summary>
        /// <param name="group"><p>The group the DD object is member of</p>
        /// </param>
        /// <param name="config"><p>The DD config object</p>
        /// </param>
        /// <param name="overrides"><p>An object containing methods to override/implement on the DD object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dd.DD">Ext.dd.DD</see></span><div><p>The DD object</p>
        /// </div>
        /// </returns>
        public Ext.dd.DD initDD(JsString group, object config, object overrides){return null;}
        /// <summary>
        /// Initializes a Ext.dd.DDProxy object for this element.
        /// </summary>
        /// <param name="group"><p>The group the DDProxy object is member of</p>
        /// </param>
        /// <param name="config"><p>The DDProxy config object</p>
        /// </param>
        /// <param name="overrides"><p>An object containing methods to override/implement on the DDProxy object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dd.DDProxy">Ext.dd.DDProxy</see></span><div><p>The DDProxy object</p>
        /// </div>
        /// </returns>
        public Ext.dd.DDProxy initDDProxy(JsString group, object config, object overrides){return null;}
        /// <summary>
        /// Initializes a Ext.dd.DDTarget object for this element.
        /// </summary>
        /// <param name="group"><p>The group the DDTarget object is member of</p>
        /// </param>
        /// <param name="config"><p>The DDTarget config object</p>
        /// </param>
        /// <param name="overrides"><p>An object containing methods to override/implement on the DDTarget object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dd.DDTarget">Ext.dd.DDTarget</see></span><div><p>The DDTarget object</p>
        /// </div>
        /// </returns>
        public Ext.dd.DDTarget initDDTarget(JsString group, object config, object overrides){return null;}
        /// <summary>
        /// Tests various css rules/browsers to determine if this element uses a border box
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool isBorderBox(){return false;}
        /// <summary>
        /// Returns true if display is not "none"
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool isDisplayed(){return false;}
        /// <summary>
        /// Returns true if this element is masked. Also re-centers any displayed message within the mask.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool isMasked(){return false;}
        /// <summary>
        /// Returns true if this element is scrollable.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool isScrollable(){return false;}
        /// <summary>
        /// Checks whether the element is currently visible using both visibility and display properties.
        /// </summary>
        /// <param name="deep"><p>True to walk the dom and see if parent elements are hidden.
        /// If false, the function only checks the visibility of the element itself and it may return
        /// <c>true</c> even though a parent is not visible.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p><c>true</c> if the element is currently visible, else <c>false</c></p>
        /// </div>
        /// </returns>
        public bool isVisible(object deep=null){return false;}
        /// <summary>
        /// Direct access to the Ext.ElementLoader Ext.ElementLoader.load method. The method takes the same object
        /// parameter as Ext.ElementLoader.load
        /// </summary>
        /// <param name="options">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element load(object options){return null;}
        /// <summary>
        /// Monitors this Element for the mouse leaving. Calls the function after the specified delay only if
        /// the mouse was not moved back into the Element within the delay. If the mouse was moved
        /// back in, the function is not called.
        /// </summary>
        /// <param name="delay"><p>The delay <strong>in milliseconds</strong> to wait for possible mouse re-entry before calling the handler function.</p>
        /// </param>
        /// <param name="handler"><p>The function to call if the mouse remains outside of this Element for the specified time.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function executes. Defaults to this Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The listeners object which was added to this element so that monitoring can be stopped. Example usage:</p>
        /// <pre><code>// Hide the menu if the mouse moves out for 250ms or more
        /// this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this);
        /// ...
        /// // Remove mouseleave monitor on menu destroy
        /// this.menuEl.un(this.mouseLeaveMonitor);
        /// </code></pre>
        /// </div>
        /// </returns>
        public object monitorMouseLeave(object delay=null, System.Delegate handler=null, object scope=null){return null;}
        /// <summary>
        /// Move this element relative to its current position.
        /// </summary>
        /// <param name="direction"><p>Possible values are:</p>
        /// <ul>
        /// <li><c>"l"</c> (or <c>"left"</c>)</li>
        /// <li><c>"r"</c> (or <c>"right"</c>)</li>
        /// <li><c>"t"</c> (or <c>"top"</c>, or <c>"up"</c>)</li>
        /// <li><c>"b"</c> (or <c>"bottom"</c>, or <c>"down"</c>)</li>
        /// </ul>
        /// </param>
        /// <param name="distance"><p>How far to move the element in pixels</p>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element
        /// animation config object</p>
        /// </param>
        public void move(JsString direction, JsNumber distance, object animate=null){}
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element
        /// is positioned. The element must be part of the DOM tree to have page coordinates
        /// (display:none or elements not appended return false).
        /// </summary>
        /// <param name="x"><p>X value for new position (coordinates are page-based)</p>
        /// </param>
        /// <param name="y"><p>Y value for new position (coordinates are page-based)</p>
        /// </param>
        /// <param name="animate"><p>True for the default animation, or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement moveTo(JsNumber x, JsNumber y, object animate=null){return null;}
        /// <summary>
        /// Returns true if this element needs an explicit tabIndex to make it focusable. Input fields, text areas, buttons
        /// anchors elements with an href etc do not need a tabIndex, but structural elements do.
        /// </summary>
        public void needsTabIndex(){}
        /// <summary>
        /// Appends an event handler to this element.
        /// </summary>
        /// <param name="eventName"><p>The name of event to handle.</p>
        /// </param>
        /// <param name="fn"><p>The handler function the event invokes. This function is passed the following parameters:</p>
        /// <ul>
        /// <li><p><strong>evt</strong> : EventObject</p>
        /// <p>The <see cref="Ext.EventObject">EventObject</see> describing the event.</p></li>
        /// <li><p><strong>el</strong> : HtmlElement</p>
        /// <p>The DOM element which was the target of the event. Note that this may be filtered by using the delegate option.</p></li>
        /// <li><p><strong>o</strong> : Object</p>
        /// <p>The options object from the call that setup the listener.</p></li>
        /// </ul>
        /// </param>
        /// <param name="scope"><p>The scope (<strong>this</strong> reference) in which the handler function is executed. <strong>If
        /// omitted, defaults to this Element.</strong></p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration properties. This may contain any of
        /// the following properties:</p>
        /// <ul>
        /// <li><p><strong>scope</strong> Object :</p>
        /// <p>The scope (<strong>this</strong> reference) in which the handler function is executed. <strong>If omitted, defaults to this
        /// Element.</strong></p></li>
        /// <li><p><strong>delegate</strong> String:</p>
        /// <p>A simple selector to filter the target or look for a descendant of the target. See below for additional details.</p></li>
        /// <li><p><strong>stopEvent</strong> Boolean:</p>
        /// <p>True to stop the event. That is stop propagation, and prevent the default action.</p></li>
        /// <li><p><strong>preventDefault</strong> Boolean:</p>
        /// <p>True to prevent the default action</p></li>
        /// <li><p><strong>stopPropagation</strong> Boolean:</p>
        /// <p>True to prevent event propagation</p></li>
        /// <li><p><strong>normalized</strong> Boolean:</p>
        /// <p>False to pass a browser event to the handler function instead of an <see cref="Ext.EventObject">Ext.EventObject</see></p></li>
        /// <li><p><strong>target</strong> <see cref="Ext.dom.Element">Ext.dom.Element</see>:</p>
        /// <p>Only call the handler if the event was fired on the target Element, <em>not</em> if the event was bubbled up from a
        /// child node.</p></li>
        /// <li><p><strong>delay</strong> Number:</p>
        /// <p>The number of milliseconds to delay the invocation of the handler after the event fires.</p></li>
        /// <li><p><strong>single</strong> Boolean:</p>
        /// <p>True to add a handler to handle just the next firing of the event, and then remove itself.</p></li>
        /// <li><p><strong>buffer</strong> Number:</p>
        /// <p>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed by the specified number of
        /// milliseconds. If the event fires again within that time, the original handler is <em>not</em> invoked, but the new
        /// handler is scheduled in its place.</p></li>
        /// </ul>
        /// <p><strong>Combining Options</strong></p>
        /// <p>Using the options argument, it is possible to combine different types of listeners:</p>
        /// <p>A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the options
        /// object. The options object is available as the third parameter in the handler function.</p>
        /// <p>Code:</p>
        /// <pre><code>el.on('click', this.onClick, this, {
        /// single: true,
        /// delay: 100,
        /// stopEvent : true,
        /// forumId: 4
        /// });
        /// </code></pre>
        /// <p><strong>Attaching multiple handlers in 1 call</strong></p>
        /// <p>The method also allows for a single argument to be passed which is a config object containing properties which
        /// specify multiple handlers.</p>
        /// <p>Code:</p>
        /// <pre><code>el.on({
        /// 'click' : {
        /// fn: this.onClick,
        /// scope: this,
        /// delay: 100
        /// },
        /// 'mouseover' : {
        /// fn: this.onMouseOver,
        /// scope: this
        /// },
        /// 'mouseout' : {
        /// fn: this.onMouseOut,
        /// scope: this
        /// }
        /// });
        /// </code></pre>
        /// <p>Or a shorthand syntax:</p>
        /// <p>Code:</p>
        /// <pre><code>el.on({
        /// 'click' : this.onClick,
        /// 'mouseover' : this.onMouseOver,
        /// 'mouseout' : this.onMouseOut,
        /// scope: this
        /// });
        /// </code></pre>
        /// <p><strong>delegate</strong></p>
        /// <p>This is a configuration option that you can pass along when registering a handler for an event to assist with
        /// event delegation. Event delegation is a technique that is used to reduce memory consumption and prevent exposure
        /// to memory-leaks. By registering an event for a container element as opposed to each element within a container.
        /// By setting this configuration option to a simple selector, the target element will be filtered to look for a
        /// descendant of the target. For example:</p>
        /// <pre><code>// using this markup:
        /// &lt;div id='elId'&gt;
        /// &lt;p id='p1'&gt;paragraph one&lt;/p&gt;
        /// &lt;p id='p2' class='clickable'&gt;paragraph two&lt;/p&gt;
        /// &lt;p id='p3'&gt;paragraph three&lt;/p&gt;
        /// &lt;/div&gt;
        /// // utilize event delegation to registering just one handler on the container element:
        /// el = <see cref="Ext.ExtContext.get">Ext.get</see>('elId');
        /// el.on(
        /// 'click',
        /// function(e,t) {
        /// // handle click
        /// console.info(t.id); // 'p2'
        /// },
        /// this,
        /// {
        /// // filter the target element to be a descendant with the class 'clickable'
        /// delegate: '.clickable'
        /// }
        /// );
        /// </code></pre>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element on(JsString eventName, System.Delegate fn, object scope=null, object options=null){return null;}
        /// <summary>
        /// Creates a pause before any subsequent queued effects begin. If there are no effects queued after the pause it will
        /// have no effect. Usage:
        /// <code>el.pause(1);
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use the <c>delay</c> config to <see cref="Ext.dom.Element.animate">animate</see> instead.</p>
        /// </summary>
        /// <param name="seconds"><p>The length of time to pause (in seconds)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element pause(JsNumber seconds){return null;}
        /// <summary>
        /// Initializes positioning on this element. If a desired position is not passed, it will make the
        /// the element positioned relative IF it is not already positioned.
        /// </summary>
        /// <param name="pos"><p>Positioning to use "relative", "absolute" or "fixed"</p>
        /// </param>
        /// <param name="zIndex"><p>The zIndex to apply</p>
        /// </param>
        /// <param name="x"><p>Set the page X position</p>
        /// </param>
        /// <param name="y"><p>Set the page Y position</p>
        /// </param>
        public void position(object pos=null, object zIndex=null, object x=null, object y=null){}
        /// <summary>
        /// Fades the element out while slowly expanding it in all directions. When the effect is completed, the element will
        /// be hidden (visibility = 'hidden') but block elements will still take up space in the document. Usage:
        /// <code>// default
        /// el.puff();
        /// // common config options shown with default values
        /// el.puff({
        /// easing: 'easeOut',
        /// duration: 500,
        /// useDisplay: false
        /// });
        /// </code>
        /// </summary>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element puff(object options=null){return null;}
        /// <summary>
        /// Recursively removes all previous added listeners from this element and its children
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element purgeAllListeners(){return null;}
        /// <summary>
        /// Create an event handler on this element such that when the event fires and is handled by this element,
        /// it will be relayed to another object (i.e., fired again as if it originated from that object instead).
        /// </summary>
        /// <param name="eventName"><p>The type of event to relay</p>
        /// </param>
        /// <param name="observable"><p>Any object that extends <see cref="Ext.util.Observable">Ext.util.Observable</see> that will provide the context
        /// for firing the relayed event</p>
        /// </param>
        public void relayEvent(JsString eventName, object observable){}
        /// <summary>
        /// Removes all previous added listeners from this element
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element removeAllListeners(){return null;}
        /// <summary>
        /// Remove any anchor to this element. See anchorTo.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element removeAnchor(){return null;}
        /// <summary>
        /// Shorthand for un.
        /// Removes an event handler from this element.
        /// <strong>Note</strong>: if a <em>scope</em> was explicitly specified when <see cref="Ext.dom.Element.on">adding</see> the listener,
        /// the same scope must be specified here.
        /// Example:
        /// <code>el.un('click', this.handlerFn);
        /// // or
        /// el.removeListener('click', this.handlerFn);
        /// </code>
        /// </summary>
        /// <param name="eventName"><p>The name of the event from which to remove the handler.</p>
        /// </param>
        /// <param name="fn"><p>The handler function to remove. <strong>This must be a reference to the function passed into the
        /// <see cref="Ext.dom.Element.on">on</see> call.</strong></p>
        /// </param>
        /// <param name="scope"><p>If a scope (<strong>this</strong> reference) was specified when the listener was added, then this must
        /// refer to the same object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element removeListener(JsString eventName, System.Delegate fn, object scope){return null;}
        /// <summary>
        /// Animates the transition of an element's dimensions from a starting height/width to an ending height/width. This
        /// method is a convenience implementation of shift. Usage:
        /// <code>// change height and width to 100x100 pixels
        /// el.scale(100, 100);
        /// // common config options shown with default values.  The height and width will default to
        /// // the element's existing values if passed as null.
        /// el.scale(
        /// [element's width],
        /// [element's height], {
        /// easing: 'easeOut',
        /// duration: 350
        /// }
        /// );
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Just use <see cref="Ext.dom.Element.animate">animate</see> instead.</p>
        /// </summary>
        /// <param name="width"><p>The new width (pass undefined to keep the original width)</p>
        /// </param>
        /// <param name="height"><p>The new height (pass undefined to keep the original height)</p>
        /// </param>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element scale(JsNumber width, JsNumber height, object options=null){return null;}
        /// <summary>
        /// Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
        /// within this element's scrollable range.
        /// </summary>
        /// <param name="direction"><p>Possible values are:</p>
        /// <ul>
        /// <li><c>"l"</c> (or <c>"left"</c>)</li>
        /// <li><c>"r"</c> (or <c>"right"</c>)</li>
        /// <li><c>"t"</c> (or <c>"top"</c>, or <c>"up"</c>)</li>
        /// <li><c>"b"</c> (or <c>"bottom"</c>, or <c>"down"</c>)</li>
        /// </ul>
        /// </param>
        /// <param name="distance"><p>How far to scroll the element in pixels</p>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>Returns true if a scroll was triggered or false if the element
        /// was scrolled as far as it could go.</p>
        /// </div>
        /// </returns>
        public bool scroll(JsString direction, JsNumber distance, object animate=null){return false;}
        /// <summary>
        /// Scrolls this element by the passed delta values, optionally animating.
        /// All of the following are equivalent:
        /// <code> el.scrollBy(10, 10, true);
        /// el.scrollBy([10, 10], true);
        /// el.scrollBy({ x: 10, y: 10 }, true);
        /// </code>
        /// </summary>
        /// <param name="deltaX"><p>Either the x delta, an Array specifying x and y deltas or
        /// an object with "x" and "y" properties.</p>
        /// </param>
        /// <param name="deltaY"><p>Either the y delta, or an animate flag or config object.</p>
        /// </param>
        /// <param name="animate"><p>Animate flag/config object if the delta values were passed separately.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element scrollBy(object deltaX, object deltaY, object animate){return null;}
        /// <summary>
        /// Scrolls this element into view within the passed container.
        /// </summary>
        /// <param name="container"><p>The container element
        /// to scroll.  Should be a string (id), dom node, or <see cref="Ext.dom.Element">Ext.Element</see>.</p>
        /// <p>Defaults to: <c>document.body</c></p></param>
        /// <param name="hscroll"><p>False to disable horizontal scroll.</p>
        /// <p>Defaults to: <c>true</c></p></param>
        /// <param name="animate"><p>true for the default animation or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element scrollIntoView(object container=null, object hscroll=null, object animate=null){return null;}
        /// <summary>
        /// Scrolls this element the specified scroll point. It does NOT do bounds checking so
        /// if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll.
        /// </summary>
        /// <param name="side"><p>Either "left" for scrollLeft values or "top" for scrollTop values.</p>
        /// </param>
        /// <param name="value"><p>The new scroll value</p>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element scrollTo(JsString side, JsNumber value, object animate=null){return null;}
        /// <summary>
        /// Enable text selection for this element (normalized across browsers)
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element selectable(){return null;}
        /// <summary>
        /// Sets the element's position and size in one shot. If animation is true then width, height,
        /// x and y will be animated concurrently.
        /// </summary>
        /// <param name="x"><p>X value for new position (coordinates are page-based)</p>
        /// </param>
        /// <param name="y"><p>Y value for new position (coordinates are page-based)</p>
        /// </param>
        /// <param name="width"><p>The new width. This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new width in this Element's <see cref="Ext.dom.Element.defaultUnit">defaultUnit</see>s (by default, pixels)</li>
        /// <li>A String used to set the CSS width style. Animation may <strong>not</strong> be used.</li>
        /// </ul>
        /// </param>
        /// <param name="height"><p>The new height. This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new height in this Element's <see cref="Ext.dom.Element.defaultUnit">defaultUnit</see>s (by default, pixels)</li>
        /// <li>A String used to set the CSS height style. Animation may <strong>not</strong> be used.</li>
        /// </ul>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setBounds(JsNumber x, JsNumber y, object width, object height, object animate=null){return null;}
        /// <summary>
        /// Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.
        /// </summary>
        /// <param name="value"><p>Boolean value to display the element using its default display, or a string to set the display directly.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setDisplayed(object value){return null;}
        /// <summary>
        /// Conveniently sets left and top adding default units.
        /// </summary>
        /// <param name="left"><p>The left CSS property value</p>
        /// </param>
        /// <param name="top"><p>The top CSS property value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setLeftTop(JsString left, JsString top){return null;}
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element
        /// is positioned. The element must be part of the DOM tree to have page coordinates
        /// (display:none or elements not appended return false).
        /// </summary>
        /// <param name="x"><p>X value for new position (coordinates are page-based)</p>
        /// </param>
        /// <param name="y"><p>Y value for new position (coordinates are page-based)</p>
        /// </param>
        /// <param name="animate"><p>True for the default animation, or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setLocation(JsNumber x, JsNumber y, object animate=null){return null;}
        /// <summary>
        /// Set the opacity of the element
        /// </summary>
        /// <param name="opacity"><p>The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc</p>
        /// </param>
        /// <param name="animate"><p>a standard Element animation config object or <c>true</c> for
        /// the default animation (<c>{duration: 350, easing: 'easeIn'}</c>)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setOpacity(JsNumber opacity, object animate=null){return null;}
        /// <summary>
        /// Set positioning with an object returned by getPositioning.
        /// </summary>
        /// <param name="posCfg">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setPositioning(object posCfg){return null;}
        /// <summary>
        /// Sets the element's position and size the specified region. If animation is true then width, height,
        /// x and y will be animated concurrently.
        /// </summary>
        /// <param name="region"><p>The region to fill</p>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setRegion(Ext.util.Region region, object animate=null){return null;}
        /// <summary>
        /// Animates the transition of any combination of an element's dimensions, xy position and/or opacity. Any of these
        /// properties not specified in the config object will not be changed. This effect requires that at least one new
        /// dimension, position or opacity setting must be passed in on the config object in order for the function to have
        /// any effect. Usage:
        /// <code>// slide the element horizontally to x position 200 while changing the height and opacity
        /// el.shift({ x: 200, height: 50, opacity: .8 });
        /// // common config options shown with default values.
        /// el.shift({
        /// width: [element's width],
        /// height: [element's height],
        /// x: [element's x position],
        /// y: [element's y position],
        /// opacity: [element's opacity],
        /// easing: 'easeOut',
        /// duration: 350
        /// });
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Just use <see cref="Ext.dom.Element.animate">animate</see> instead.</p>
        /// </summary>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element shift(object options){return null;}
        /// <summary>
        /// Slides the element into view. An anchor point can be optionally passed to set the point of origin for the slide
        /// effect. This function automatically handles wrapping the element with a fixed-size container if needed. See the
        /// Fx class overview for valid anchor point options. Usage:
        /// <code>// default: slide the element in from the top
        /// el.slideIn();
        /// // custom: slide the element in from the right with a 2-second duration
        /// el.slideIn('r', { duration: 2000 });
        /// // common config options shown with default values
        /// el.slideIn('t', {
        /// easing: 'easeOut',
        /// duration: 500
        /// });
        /// </code>
        /// </summary>
        /// <param name="anchor"><p>One of the valid Fx anchor positions (defaults to top: 't')</p>
        /// </param>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// <ul><li><span>preserveScroll</span> : <see cref="bool">Boolean</see><div><p>Set to true if preservation of any descendant elements'
        /// <c>scrollTop</c> values is required. By default the DOM wrapping operation performed by <c>slideIn</c> and
        /// <c>slideOut</c> causes the browser to lose all scroll positions.</p>
        /// </div></li></ul></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element slideIn(object anchor=null, object options=null){return null;}
        /// <summary>
        /// Slides the element out of view. An anchor point can be optionally passed to set the end point for the slide
        /// effect. When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will
        /// still take up space in the document. The element must be removed from the DOM using the 'remove' config option if
        /// desired. This function automatically handles wrapping the element with a fixed-size container if needed. See the
        /// Fx class overview for valid anchor point options. Usage:
        /// <code>// default: slide the element out to the top
        /// el.slideOut();
        /// // custom: slide the element out to the right with a 2-second duration
        /// el.slideOut('r', { duration: 2000 });
        /// // common config options shown with default values
        /// el.slideOut('t', {
        /// easing: 'easeOut',
        /// duration: 500,
        /// remove: false,
        /// useDisplay: false
        /// });
        /// </code>
        /// </summary>
        /// <param name="anchor"><p>One of the valid Fx anchor positions (defaults to top: 't')</p>
        /// </param>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element slideOut(object anchor=null, object options=null){return null;}
        /// <summary>
        /// Stops the specified event(s) from bubbling and optionally prevents the default action
        /// </summary>
        /// <param name="eventName"><p>an event / array of events to stop from bubbling</p>
        /// </param>
        /// <param name="preventDefault"><p>true to prevent the default action too</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element swallowEvent(object eventName, object preventDefault=null){return null;}
        /// <summary>
        /// Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
        /// When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still
        /// take up space in the document. The element must be removed from the DOM using the 'remove' config option if
        /// desired. Usage:
        /// <code>// default
        /// el.switchOff();
        /// // all config options shown with default values
        /// el.switchOff({
        /// easing: 'easeIn',
        /// duration: .3,
        /// remove: false,
        /// useDisplay: false
        /// });
        /// </code>
        /// </summary>
        /// <param name="options"><p>Object literal with any of the Fx config options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element switchOff(object options=null){return null;}
        /// <summary>
        /// .
        /// Currently used for updating grid cells without modifying DOM structure
        /// Synchronizes content of this Element with the content of the passed element.
        /// Style and CSS class are copied from source into this Element, and contents are synched
        /// recursively. If a child node is a text node, the textual data is copied.
        /// </summary>
        /// <param name="source">
        /// </param>
        private void syncContent(object source){}
        /// <summary>
        /// Toggles the element's visibility or display, depending on visibility mode.
        /// </summary>
        /// <param name="animate"><p>True for the default animation, or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element toggle(object animate=null){return null;}
        /// <summary>
        /// Removes an event handler from this element.
        /// <strong>Note</strong>: if a <em>scope</em> was explicitly specified when <see cref="Ext.dom.Element.on">adding</see> the listener,
        /// the same scope must be specified here.
        /// Example:
        /// <code>el.un('click', this.handlerFn);
        /// // or
        /// el.removeListener('click', this.handlerFn);
        /// </code>
        /// </summary>
        /// <param name="eventName"><p>The name of the event from which to remove the handler.</p>
        /// </param>
        /// <param name="fn"><p>The handler function to remove. <strong>This must be a reference to the function passed into the
        /// <see cref="Ext.dom.Element.on">on</see> call.</strong></p>
        /// </param>
        /// <param name="scope"><p>If a scope (<strong>this</strong> reference) was specified when the listener was added, then this must
        /// refer to the same object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element un(JsString eventName, System.Delegate fn, object scope){return null;}
        /// <summary>
        /// Return clipping (overflow) to original clipping before clip was called
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element unclip(){return null;}
        /// <summary>
        /// Disables text selection for this element (normalized across browsers)
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element unselectable(){return null;}
        /// <summary>
        /// Updates the innerHTML of this element, optionally searching for and processing scripts.
        /// </summary>
        /// <param name="html"><p>The new HTML</p>
        /// </param>
        /// <param name="loadScripts"><p>True to look for and process scripts (defaults to false)</p>
        /// </param>
        /// <param name="callback"><p>For async script loading you can be notified when the update completes</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element update(JsString html, object loadScripts=null, object callback=null){return null;}
        /// <summary>
        /// Selects elements based on the passed CSS selector to enable Element methods
        /// to be applied to many related elements in one statement through the returned CompositeElement or
        /// CompositeElementLite object.
        /// </summary>
        /// <param name="selector"><p>The CSS selector or an array of elements</p>
        /// </param>
        /// <param name="unique"><p>true to create a unique <see cref="Ext.dom.Element">Ext.Element</see> for each element (defaults to a shared flyweight object)</p>
        /// </param>
        /// <param name="root"><p>The root element of the query or id of the root</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.CompositeElementLite">Ext.CompositeElementLite</see>/<see cref="Ext.dom.CompositeElement">Ext.CompositeElement</see></span><div>
        /// </div>
        /// </returns>
        public static object select(object selector, object unique=null, object root=null){return null;}
        public Element(Ext.dom.ElementConfig config){}
        public Element(){}
        public Element(params object[] args){}
    }
    #endregion
    #region ElementConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ElementConfig : AbstractElementConfig
    {
        public ElementConfig(params object[] args){}
    }
    #endregion
    #region ElementEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ElementEvents : AbstractElementEvents
    {
        /// <summary>
        /// Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMActivate(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Fires when an attribute has been modified.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMAttrModified(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Fires when the character data has been modified.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMCharacterDataModified(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Similar to HTML focus event, but can be applied to any focusable element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMFocusIn(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Similar to HTML blur event, but can be applied to any focusable element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMFocusOut(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Fires when a node has been added as a child of another node.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMNodeInserted(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Fires when a node is being inserted into a document.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMNodeInsertedIntoDocument(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Fires when a descendant node of the element is removed.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMNodeRemoved(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Fires when a node is being removed from a document.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMNodeRemovedFromDocument(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Where supported. Fires when the subtree is modified.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void DOMSubtreeModified(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when an object/image is stopped from loading before completely loaded.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void abort(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when an element loses focus either via the pointing device or by tabbing navigation.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void blur(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a control loses the input focus and its value has been modified since gaining focus.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void change(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mouse click is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void click(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a right click is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void contextmenu(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mouse double click is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void dblclick(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when an object/image/frame cannot be loaded properly.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void error(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when an element receives focus either via the pointing device or by tab navigation.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void focus(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a keydown is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void keydown(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a keypress is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void keypress(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a keyup is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void keyup(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when the user agent finishes loading all content within the element. Only supported by window, frames,
        /// objects and images.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void load(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mousedown is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mousedown(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when the mouse enters the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseenter(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when the mouse leaves the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseleave(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mousemove is detected with the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mousemove(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mouseout is detected with the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseout(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mouseover is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseover(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a mouseup is detected within the element.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseup(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a form is reset.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void reset(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a document view is resized.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void resize(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a document view is scrolled.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void scroll(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a user selects some text in a text field, including input and textarea.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void select(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when a form is submitted.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void submit(EventObject e, object t, object eOpts){}
        /// <summary>
        /// Fires when the user agent removes all content from a window or frame. For elements, it fires when the target
        /// element or any of its content has been removed.
        /// </summary>
        /// <param name="e"><p>The <see cref="Ext.EventObject">Ext.EventObject</see> encapsulating the DOM event.</p>
        /// </param>
        /// <param name="t"><p>The target of the event.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void unload(EventObject e, object t, object eOpts){}
        public ElementEvents(params object[] args){}
    }
    #endregion
}
