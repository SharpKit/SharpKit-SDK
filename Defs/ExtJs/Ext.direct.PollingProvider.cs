//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.direct
{
    #region PollingProvider
    /// <inheritdocs />
    /// <summary>
    /// <p>Provides for repetitive polling of the server at distinct <see cref="Ext.direct.PollingProviderConfig.interval">intervals</see>.
    /// The initial request for data originates from the client, and then is responded to by the
    /// server.</p>
    /// <p>All configurations for the PollingProvider should be generated by the server-side
    /// API portion of the <see cref="Ext.direct.Manager">Ext.Direct</see> stack.</p>
    /// <p>An instance of PollingProvider may be created directly via the new keyword or by simply
    /// specifying <tt>type = 'polling'</tt>.  For example:</p>
    /// <pre><code>var pollA = new <see cref="Ext.direct.PollingProvider">Ext.direct.PollingProvider</see>({
    /// type:'polling',
    /// url: 'php/pollA.php',
    /// });
    /// <see cref="Ext.direct.Manager.addProvider">Ext.direct.Manager.addProvider</see>(pollA);
    /// pollA.disconnect();
    /// <see cref="Ext.direct.Manager.addProvider">Ext.direct.Manager.addProvider</see>(
    /// {
    /// type:'polling',
    /// url: 'php/pollB.php',
    /// id: 'pollB-provider'
    /// }
    /// );
    /// var pollB = <see cref="Ext.direct.Manager.getProvider">Ext.direct.Manager.getProvider</see>('pollB-provider');
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class PollingProvider : JsonProvider
    {
        /// <summary>
        /// An object containing properties which are to be sent as parameters on every polling request
        /// </summary>
        public JsObject baseParams;
        /// <summary>
        /// How often to poll the server-side in milliseconds. Defaults to every 3 seconds.
        /// Defaults to: <c>3000</c>
        /// </summary>
        public JsNumber interval;
        /// <summary>
        /// The url which the PollingProvider should contact with each request. This can also be
        /// an imported Ext.Direct method which will accept the baseParams as its only argument.
        /// </summary>
        public object url;
        public PollingProvider(PollingProviderConfig config){}
        public PollingProvider(){}
        public PollingProvider(params object[] args){}
    }
    #endregion
    #region PollingProviderConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PollingProviderConfig : JsonProviderConfig
    {
        /// <summary>
        /// An object containing properties which are to be sent as parameters on every polling request
        /// </summary>
        public JsObject baseParams;
        /// <summary>
        /// How often to poll the server-side in milliseconds. Defaults to every 3 seconds.
        /// Defaults to: <c>3000</c>
        /// </summary>
        public JsNumber interval;
        /// <summary>
        /// The url which the PollingProvider should contact with each request. This can also be
        /// an imported Ext.Direct method which will accept the baseParams as its only argument.
        /// </summary>
        public object url;
        public PollingProviderConfig(params object[] args){}
    }
    #endregion
    #region PollingProviderEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PollingProviderEvents : JsonProviderEvents
    {
        /// <summary>
        /// Fired immediately before a poll takes place, an event handler can return false
        /// in order to cancel the poll.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforepoll(PollingProvider @this, object eOpts){}
        /// <summary>
        /// This event has not yet been implemented.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void poll(PollingProvider @this, object eOpts){}
        public PollingProviderEvents(params object[] args){}
    }
    #endregion
}
