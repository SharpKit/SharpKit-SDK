//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.draw
{
    #region Color
    /// <inheritdocs />
    /// <summary>
    /// <p>Represents an RGB color and provides helper functions get
    /// color components in HSL color space.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Color : Ext.Base
    {
        /// <summary>
        /// The default factor to compute the lighter or darker color. Defaults to 0.2.
        /// Defaults to: <c>0.2</c>
        /// </summary>
        public JsNumber lightnessFactor;
        /// <summary>
        /// Creates new Color.
        /// </summary>
        /// <param name="red"><p>Red component (0..255)</p>
        /// </param>
        /// <param name="green"><p>Green component (0..255)</p>
        /// </param>
        /// <param name="blue"><p>Blue component (0..255)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public Color(JsNumber red, JsNumber green, JsNumber blue){}
        /// <summary>
        /// Get the blue component of the color, in the range 0..255.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getBlue(){return null;}
        /// <summary>
        /// Return a new color that is darker than this color.
        /// </summary>
        /// <param name="factor"><p>Darker factor (0..1), default to 0.2</p>
        /// </param>
        public void getDarker(JsNumber factor){}
        /// <summary>
        /// Returns the gray value (0 to 255) of the color.
        /// The gray value is calculated using the formula r<em>0.3 + g</em>0.59 + b*0.11.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getGrayscale(){return null;}
        /// <summary>
        /// Get the green component of the color, in the range 0..255.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getGreen(){return null;}
        /// <summary>
        /// Get the equivalent HSL components of the color.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div>
        /// </div>
        /// </returns>
        public JsNumber[] getHSL(){return null;}
        /// <summary>
        /// Return a new color that is lighter than this color.
        /// </summary>
        /// <param name="factor"><p>Lighter factor (0..1), default to 0.2</p>
        /// </param>
        public void getLighter(JsNumber factor){}
        /// <summary>
        /// Get the RGB values.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div>
        /// </div>
        /// </returns>
        public JsNumber[] getRGB(){return null;}
        /// <summary>
        /// Get the red component of the color, in the range 0..255.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getRed(){return null;}
        /// <summary>
        /// Return the color in the hex format, i.e. '#rrggbb'.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public JsString toString(){return null;}
        /// <summary>
        /// Create a new color based on the specified HSL values.
        /// <strong>Note:</strong> This method is both static and instance.
        /// </summary>
        /// <param name="h"><p>Hue component (0..359)</p>
        /// </param>
        /// <param name="s"><p>Saturation component (0..1)</p>
        /// </param>
        /// <param name="l"><p>Lightness component (0..1)</p>
        /// </param>
        public static void fromHSL(JsNumber h, JsNumber s, JsNumber l){}
        /// <summary>
        /// Parse the string and create a new color.
        /// Supported formats: '#rrggbb', '#rgb', and 'rgb(r,g,b)'.
        /// If the string is not recognized, an undefined will be returned instead.
        /// <strong>Note:</strong> This method is both static and instance.
        /// </summary>
        /// <param name="str"><p>Color in string.</p>
        /// </param>
        public static void fromString(JsString str){}
        /// <summary>
        /// Convert a color to hexadecimal format.
        /// <strong>Note:</strong> This method is both static and instance.
        /// </summary>
        /// <param name="color"><p>The color value (i.e 'rgb(255, 255, 255)', 'color: #ffffff').
        /// Can also be an Array, in this case the function handles the first member.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The color in hexadecimal format.</p>
        /// </div>
        /// </returns>
        public static JsString toHex(object color){return null;}
        public Color(Ext.draw.ColorConfig config){}
        public Color(){}
        public Color(params object[] args){}
    }
    #endregion
    #region ColorConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ColorConfig : Ext.BaseConfig
    {
        /// <summary>
        /// The default factor to compute the lighter or darker color. Defaults to 0.2.
        /// Defaults to: <c>0.2</c>
        /// </summary>
        public JsNumber lightnessFactor;
        public ColorConfig(params object[] args){}
    }
    #endregion
    #region ColorEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ColorEvents : Ext.BaseEvents
    {
        public ColorEvents(params object[] args){}
    }
    #endregion
}
