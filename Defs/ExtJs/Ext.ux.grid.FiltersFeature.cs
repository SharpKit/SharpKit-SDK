//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.ux.grid
{
    #region FiltersFeature
    /// <inheritdocs />
    /// <summary>
    /// <p>FiltersFeature is a grid <see cref="Ext.grid.feature.Feature">feature</see> that allows for a slightly more
    /// robust representation of filtering than what is provided by the default store.</p>
    /// <p>Filtering is adjusted by the user using the grid's column header menu (this menu can be
    /// disabled through configuration). Through this menu users can configure, enable, and
    /// disable filters for each column.</p>
    /// <h1>Features</h1>
    /// <h2>Filtering implementations:</h2>
    /// <p>Default filtering for Strings, Numeric Ranges, Date Ranges, Lists (which can be backed by a
    /// <see cref="Ext.data.Store">Ext.data.Store</see>), and Boolean. Additional custom filter types and menus are easily
    /// created by extending <see cref="Ext.ux.grid.filter.Filter">Ext.ux.grid.filter.Filter</see>.</p>
    /// <h2>Graphical Indicators:</h2>
    /// <p>Columns that are filtered have <see cref="Ext.ux.grid.FiltersFeatureConfig.filterCls">a configurable css class</see> applied to the column headers.</p>
    /// <h2>Automatic Reconfiguration:</h2>
    /// <p>Filters automatically reconfigure when the grid 'reconfigure' event fires.</p>
    /// <h2>Stateful:</h2>
    /// <p>Filter information will be persisted across page loads by specifying a <c>stateId</c>
    /// in the Grid configuration.</p>
    /// <p>The filter collection binds to the <see cref="Ext.grid.PanelEvents.beforestaterestore">beforestaterestore</see>
    /// and <see cref="Ext.grid.PanelEvents.beforestatesave">beforestatesave</see> events in order to be stateful.</p>
    /// <h2>GridPanel Changes:</h2>
    /// <ul>
    /// <li>A <c>filters</c> property is added to the GridPanel using this feature.</li>
    /// <li>A <c>filterupdate</c> event is added to the GridPanel and is fired upon onStateChange completion.</li>
    /// </ul>
    /// <h2>Server side code examples:</h2>
    /// <ul>
    /// <li><i>PHP</i> - (Thanks VinylFox)</li>
    /// <li><i>Ruby on Rails</i> - (Thanks Zyclops)</li>
    /// <li><i>Ruby on Rails</i> - (Thanks Rotomaul)</li>
    /// </ul>
    /// <h1>Example usage:</h1>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// pageSize: 15
    /// ...
    /// });
    /// var filtersCfg = {
    /// ftype: 'filters',
    /// autoReload: false, //don't reload automatically
    /// local: true, //only filter locally
    /// // filters may be configured through the plugin,
    /// // or in the column definition within the headers configuration
    /// filters: [{
    /// type: 'numeric',
    /// dataIndex: 'id'
    /// }, {
    /// type: 'string',
    /// dataIndex: 'name'
    /// }, {
    /// type: 'numeric',
    /// dataIndex: 'price'
    /// }, {
    /// type: 'date',
    /// dataIndex: 'dateAdded'
    /// }, {
    /// type: 'list',
    /// dataIndex: 'size',
    /// options: ['extra small', 'small', 'medium', 'large', 'extra large'],
    /// phpMode: true
    /// }, {
    /// type: 'boolean',
    /// dataIndex: 'visible'
    /// }]
    /// };
    /// var grid = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
    /// store: store,
    /// columns: ...,
    /// features: [filtersCfg],
    /// height: 400,
    /// width: 700,
    /// bbar: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.toolbar.Paging">Ext.PagingToolbar</see>', {
    /// store: store
    /// })
    /// });
    /// // a filters property is added to the GridPanel
    /// grid.filters
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class FiltersFeature : Ext.grid.feature.Feature
    {
        /// <summary>
        /// Defaults to true, reloading the datasource when a filter change happens.
        /// Set this to false to prevent the datastore from being reloaded if there
        /// are changes to the filters.  See updateBuffer.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoReload;
        /// <summary>
        /// Specify true for buildQuery to use Ext.util.JSON.encode to
        /// encode the filter query parameter sent with a remote request.
        /// Defaults to false.
        /// </summary>
        public bool encode;
        /// <summary>
        /// The css class to be applied to column headers with active filters.
        /// Defaults to 'ux-filterd-column'.
        /// Defaults to: <c>&quot;ux-filtered-column&quot;</c>
        /// </summary>
        public JsString filterCls;
        /// <summary>
        /// An Array of filters config objects. Refer to each filter type class for
        /// configuration details specific to each filter type. Filters for Strings,
        /// Numeric Ranges, Date Ranges, Lists, and Boolean are the standard filters
        /// available.
        /// </summary>
        public JsArray filters;
        /// <summary>
        /// true to use Ext.data.Store filter functions (local filtering)
        /// instead of the default (false) server side filtering.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool local;
        /// <summary>
        /// defaults to 'Filters'.
        /// Defaults to: <c>&quot;Filters&quot;</c>
        /// </summary>
        public JsString menuFilterText;
        /// <summary>
        /// The url parameter prefix for the filters.
        /// Defaults to 'filter'.
        /// Defaults to: <c>&quot;filter&quot;</c>
        /// </summary>
        public JsString paramPrefix;
        /// <summary>
        /// Defaults to true, including a filter submenu in the default header menu.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showMenu;
        /// <summary>
        /// Name of the value to be used to store state information.
        /// </summary>
        public JsString stateId;
        /// <summary>
        /// Number of milliseconds to defer store updates since the last filter change.
        /// Defaults to: <c>500</c>
        /// </summary>
        public JsNumber updateBuffer;
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public FiltersFeature(object config){}
        /// <summary>
        /// Adds a filter to the collection and observes it for state change.
        /// </summary>
        /// <param name="config"><p>A filter configuration or a filter object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.ux.grid.filter.Filter">Ext.ux.grid.filter.Filter</see></span><div><p>The existing or newly created filter object.</p>
        /// </div>
        /// </returns>
        public Ext.ux.grid.filter.Filter addFilter(object config){return null;}
        /// <summary>
        /// Adds filters to the collection.
        /// </summary>
        /// <param name="filters"><p>An Array of filter configuration objects.</p>
        /// </param>
        public void addFilters(JsArray filters){}
        /// <summary>
        /// Handler for the grid's beforestaterestore event (fires before the state of the
        /// grid is restored).
        /// </summary>
        /// <param name="grid"><p>The grid object</p>
        /// </param>
        /// <param name="state"><p>The hash of state values returned from the StateProvider.</p>
        /// </param>
        private void applyState(object grid, object state){}
        /// <summary>
        /// Changes the data store bound to this view and refreshes it.
        /// </summary>
        /// <param name="store"><p>The store to bind to this view</p>
        /// </param>
        public void bindStore(Ext.data.Store store){}
        /// <summary>
        /// Function to take the active filters data and build it into a query.
        /// The format of the query depends on the encode configuration:
        /// <li><p><c>false</c> (Default) :
        /// Flatten into query string of the form (assuming <c><see cref="Ext.ux.grid.FiltersFeatureConfig.paramPrefix">paramPrefix</see>='filters'</c>:</p>
        /// <pre><code>filters[0][field]="someDataIndex"&amp;
        /// filters[0][data][comparison]="someValue1"&amp;
        /// filters[0][data][type]="someValue2"&amp;
        /// filters[0][data][value]="someValue3"&amp;
        /// </code></pre></li>
        /// <li><p><c>true</c> :
        /// JSON encode the filter data</p>
        /// <pre><code>{filters:[{"field":"someDataIndex","comparison":"someValue1","type":"someValue2","value":"someValue3"}]}
        /// </code></pre></li>
        /// Override this method to customize the format of the filter query for remote requests.
        /// </summary>
        /// <param name="filters"><p>A collection of objects representing active filters and their configuration.
        /// Each element will take the form of {field: dataIndex, data: filterConf}. dataIndex is not assured
        /// to be unique as any one filter may be a composite of more basic filters for the same dataIndex.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Query keys and values</p>
        /// </div>
        /// </returns>
        public object buildQuery(JsArray filters){return null;}
        /// <summary>
        /// Removes filter related query parameters from the provided object.
        /// </summary>
        /// <param name="p"><p>Query parameters that may contain filter related fields.</p>
        /// </param>
        public void cleanParams(object p){}
        /// <summary>
        /// Turns all filters off. This does not clear the configuration information
        /// (see removeAll).
        /// </summary>
        public void clearFilters(){}
        /// <summary>
        /// Create the Filter objects for the current configuration, destroying any existing ones first.
        /// </summary>
        private void createFilters(){}
        /// <summary>
        /// Handler called by the grid 'beforedestroy' event
        /// Overrides: <see cref="Ext.Base.destroy">Ext.Base.destroy</see>
        /// </summary>
        private void destroy(){}
        /// <summary>
        /// Returns a filter for the given dataIndex, if one exists.
        /// </summary>
        /// <param name="dataIndex"><p>The dataIndex of the desired filter object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.ux.grid.filter.Filter">Ext.ux.grid.filter.Filter</see></span><div>
        /// </div>
        /// </returns>
        public Ext.ux.grid.filter.Filter getFilter(JsString dataIndex){return null;}
        /// <summary>
        /// Function for locating filter classes, overwrite this with your favorite
        /// loader to provide dynamic filter loading.
        /// </summary>
        /// <param name="type"><p>The type of filter to load ('Filter' is automatically
        /// appended to the passed type; eg, 'string' becomes 'StringFilter').</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>The Ext.ux.grid.filter.Class</p>
        /// </div>
        /// </returns>
        public System.Delegate getFilterClass(JsString type){return null;}
        /// <summary>
        /// Returns an Array of the currently active filters.
        /// </summary>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>filters Array of the currently active filters.</p>
        /// </div>
        /// </returns>
        public JsArray getFilterData(){return null;}
        /// <summary>
        /// Get the filter menu from the filters MixedCollection based on the clicked header
        /// </summary>
        private void getMenuFilter(){}
        /// <summary>
        /// Method factory that generates a record validator for the filters active at the time
        /// of invokation.
        /// </summary>
        private void getRecordFilter(){}
        /// <summary>
        /// Parameters<li><span>filters</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="filters">
        /// </param>
        private void initializeFilters(object filters){}
        /// <summary>
        /// Parameters<li><span>check</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>value</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="check">
        /// </param>
        /// <param name="value">
        /// </param>
        private void onBeforeCheck(object check, object value){}
        /// <summary>
        /// Handler for store's beforeload event when configured for remote filtering
        /// </summary>
        /// <param name="store">
        /// </param>
        /// <param name="options">
        /// </param>
        private void onBeforeLoad(object store, object options){}
        /// <summary>
        /// Parameters<li><span>item</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>value</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="item">
        /// </param>
        /// <param name="value">
        /// </param>
        private void onCheckChange(object item, object value){}
        /// <summary>
        /// Handler for store's load event when configured for local filtering
        /// </summary>
        /// <param name="store">
        /// </param>
        private void onLoad(object store){}
        /// <summary>
        /// Handle showing of the grid's header menu. Sets up the filter item and menu
        /// appropriate for the target column.
        /// </summary>
        /// <param name="menu">
        /// </param>
        private void onMenuBeforeShow(object menu){}
        /// <summary>
        /// Handle creation of the grid's header menu. Initializes the filters and listens
        /// for the menu being shown.
        /// </summary>
        /// <param name="headerCt">
        /// </param>
        /// <param name="menu">
        /// </param>
        private void onMenuCreate(object headerCt, object menu){}
        /// <summary>
        /// Handler called when the grid's view is refreshed
        /// </summary>
        private void onRefresh(){}
        /// <summary>
        /// Handler for all events on filters.
        /// </summary>
        /// <param name="event"><p>Event name</p>
        /// </param>
        /// <param name="filter"><p>Standard signature of the event before the event is fired</p>
        /// </param>
        private void onStateChange(JsString @event, object filter){}
        /// <summary>
        /// </summary>
        private void reload(){}
        /// <summary>
        /// Remove all filters, permanently destroying them.
        /// </summary>
        public void removeAll(){}
        /// <summary>
        /// Saves the state of all active filters
        /// </summary>
        /// <param name="grid">
        /// </param>
        /// <param name="state">
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool saveState(object grid, object state){return false;}
        /// <summary>
        /// Update the styles for the header row based on the active filters
        /// </summary>
        public void updateColumnHeadings(){}
        public FiltersFeature(FiltersFeatureConfig config){}
        public FiltersFeature(){}
        public FiltersFeature(params object[] args){}
    }
    #endregion
    #region FiltersFeatureConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FiltersFeatureConfig : Ext.grid.feature.FeatureConfig
    {
        /// <summary>
        /// Defaults to true, reloading the datasource when a filter change happens.
        /// Set this to false to prevent the datastore from being reloaded if there
        /// are changes to the filters.  See updateBuffer.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoReload;
        /// <summary>
        /// Specify true for buildQuery to use Ext.util.JSON.encode to
        /// encode the filter query parameter sent with a remote request.
        /// Defaults to false.
        /// </summary>
        public bool encode;
        /// <summary>
        /// The css class to be applied to column headers with active filters.
        /// Defaults to 'ux-filterd-column'.
        /// Defaults to: <c>&quot;ux-filtered-column&quot;</c>
        /// </summary>
        public JsString filterCls;
        /// <summary>
        /// An Array of filters config objects. Refer to each filter type class for
        /// configuration details specific to each filter type. Filters for Strings,
        /// Numeric Ranges, Date Ranges, Lists, and Boolean are the standard filters
        /// available.
        /// </summary>
        public JsArray filters;
        /// <summary>
        /// true to use Ext.data.Store filter functions (local filtering)
        /// instead of the default (false) server side filtering.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool local;
        /// <summary>
        /// defaults to 'Filters'.
        /// Defaults to: <c>&quot;Filters&quot;</c>
        /// </summary>
        public JsString menuFilterText;
        /// <summary>
        /// The url parameter prefix for the filters.
        /// Defaults to 'filter'.
        /// Defaults to: <c>&quot;filter&quot;</c>
        /// </summary>
        public JsString paramPrefix;
        /// <summary>
        /// Defaults to true, including a filter submenu in the default header menu.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showMenu;
        /// <summary>
        /// Name of the value to be used to store state information.
        /// </summary>
        public JsString stateId;
        /// <summary>
        /// Number of milliseconds to defer store updates since the last filter change.
        /// Defaults to: <c>500</c>
        /// </summary>
        public JsNumber updateBuffer;
        public FiltersFeatureConfig(params object[] args){}
    }
    #endregion
    #region FiltersFeatureEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FiltersFeatureEvents : Ext.grid.feature.FeatureEvents
    {
        public FiltersFeatureEvents(params object[] args){}
    }
    #endregion
}
