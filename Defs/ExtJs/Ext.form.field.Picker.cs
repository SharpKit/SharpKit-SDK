//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region Picker
    /// <inheritdocs />
    /// <summary>
    /// <p>An abstract class for fields that have a single trigger which opens a "picker" popup below the field, e.g. a combobox
    /// menu list or a date picker. It provides a base implementation for toggling the picker's visibility when the trigger
    /// is clicked, as well as keyboard navigation and some basic events. Sizing and alignment of the picker can be
    /// controlled via the <see cref="Ext.form.field.PickerConfig.matchFieldWidth">matchFieldWidth</see> and <see cref="Ext.form.field.PickerConfig.pickerAlign">pickerAlign</see>/<see cref="Ext.form.field.PickerConfig.pickerOffset">pickerOffset</see> config properties
    /// respectively.</p>
    /// <p>You would not normally use this class directly, but instead use it as the parent class for a specific picker field
    /// implementation. Subclasses must implement the <see cref="Ext.form.field.Picker.createPicker">createPicker</see> method to create a picker component appropriate
    /// for the field.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Picker : Ext.form.field.Trigger
    {
        /// <summary>
        /// Whether the picker dropdown's width should be explicitly set to match the width of the field. Defaults to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool matchFieldWidth;
        /// <summary>
        /// A class to be added to the field's bodyEl element when the picker is opened.
        /// Defaults to: <c>&quot;x-pickerfield-open&quot;</c>
        /// </summary>
        public JsString openCls;
        /// <summary>
        /// The alignment position with which to align the picker. Defaults to "tl-bl?"
        /// Defaults to: <c>&quot;tl-bl?&quot;</c>
        /// </summary>
        public JsString pickerAlign;
        /// <summary>
        /// An offset [x,y] to use in addition to the pickerAlign when positioning the picker.
        /// Defaults to undefined.
        /// </summary>
        public JsNumber pickerOffset;
        /// <summary>
        /// True if the picker is currently expanded, false if not.
        /// </summary>
        public bool isExpanded{get;set;}
        /// <summary>
        /// Aligns the picker to the input element
        /// </summary>
        protected void alignPicker(){}
        /// <summary>
        /// Collapses this field's picker dropdown.
        /// </summary>
        public void collapse(){}
        /// <summary>
        /// Runs on mousewheel and mousedown of doc to check to see if we should collapse the picker
        /// </summary>
        /// <param name="e">
        /// </param>
        private void collapseIf(object e){}
        /// <summary>
        /// Creates and returns the component to be used as this field's picker. Must be implemented by subclasses of Picker.
        /// The current field should also be passed as a configuration option to the picker component as the pickerField
        /// property.
        /// </summary>
        public void createPicker(){}
        /// <summary>
        /// Performs the alignment on the picker using the class defaults
        /// </summary>
        private void doAlign(){}
        /// <summary>
        /// Expands this field's picker dropdown.
        /// </summary>
        public void expand(){}
        /// <summary>
        /// Returns a reference to the picker component for this field, creating it if necessary by
        /// calling createPicker.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The picker component</p>
        /// </div>
        /// </returns>
        public Ext.Component getPicker(){return null;}
        /// <summary>
        /// returns true if the picker has a load mask and the passed event is within the load mask
        /// </summary>
        /// <param name="e">
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        private bool isEventWithinPickerLoadMask(EventObject e){return false;}
        /// <summary>
        /// Handles the trigger click; by default toggles between expanding and collapsing the picker component.
        /// Overrides: <see cref="Ext.form.field.Trigger.onTriggerClick">Ext.form.field.Trigger.onTriggerClick</see>
        /// </summary>
        protected void onTriggerClick(){}
        public Picker(PickerConfig config){}
        public Picker(){}
        public Picker(params object[] args){}
    }
    #endregion
    #region PickerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PickerConfig : Ext.form.field.TriggerConfig
    {
        /// <summary>
        /// Whether the picker dropdown's width should be explicitly set to match the width of the field. Defaults to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool matchFieldWidth;
        /// <summary>
        /// A class to be added to the field's bodyEl element when the picker is opened.
        /// Defaults to: <c>&quot;x-pickerfield-open&quot;</c>
        /// </summary>
        public JsString openCls;
        /// <summary>
        /// The alignment position with which to align the picker. Defaults to "tl-bl?"
        /// Defaults to: <c>&quot;tl-bl?&quot;</c>
        /// </summary>
        public JsString pickerAlign;
        /// <summary>
        /// An offset [x,y] to use in addition to the pickerAlign when positioning the picker.
        /// Defaults to undefined.
        /// </summary>
        public JsNumber pickerOffset;
        public PickerConfig(params object[] args){}
    }
    #endregion
    #region PickerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PickerEvents : Ext.form.field.TriggerEvents
    {
        /// <summary>
        /// Fires when the field's picker is collapsed.
        /// </summary>
        /// <param name="field"><p>This field instance</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void collapse(Picker field, object eOpts){}
        /// <summary>
        /// Fires when the field's picker is expanded.
        /// </summary>
        /// <param name="field"><p>This field instance</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void expand(Picker field, object eOpts){}
        /// <summary>
        /// Fires when a value is selected via the picker.
        /// </summary>
        /// <param name="field"><p>This field instance</p>
        /// </param>
        /// <param name="value"><p>The value that was selected. The exact type of this value is dependent on
        /// the individual field and picker implementations.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void select(Picker field, object value, object eOpts){}
        public PickerEvents(params object[] args){}
    }
    #endregion
}
