//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.dom
{
    #region AbstractElement
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractElement : Ext.Base
    {
        /// <summary>
        /// The default unit to append to CSS values where a unit isn't provided.
        /// Defaults to: <c>&quot;px&quot;</c>
        /// </summary>
        public JsString defaultUnit{get;set;}
        /// <summary>
        /// The DOM element
        /// </summary>
        public object dom{get;set;}
        /// <summary>
        /// The DOM element ID
        /// </summary>
        public JsString id{get;set;}
        /// <summary>
        /// This shared object is keyed by style name (e.g., 'margin-left' or 'marginLeft'). The
        /// values are objects with the following properties:
        /// <li><c>name</c> (String) : The actual name to be presented to the DOM. This is typically the value
        /// returned by <see cref="Ext.dom.AbstractElement.normalize">normalize</see>.</li>
        /// <li><c>get</c> (Function) : A hook function that will perform the get on this style. These
        /// functions receive "(dom, el)" arguments. The <c>dom</c> parameter is the DOM Element
        /// from which to get ths tyle. The <c>el</c> argument (may be null) is the <see cref="Ext.dom.Element">Ext.Element</see>.</li>
        /// <li><c>set</c> (Function) : A hook function that will perform the set on this style. These
        /// functions receive "(dom, value, el)" arguments. The <c>dom</c> parameter is the DOM Element
        /// from which to get ths tyle. The <c>value</c> parameter is the new value for the style. The
        /// <c>el</c> argument (may be null) is the <see cref="Ext.dom.Element">Ext.Element</see>.</li>
        /// The <c>this</c> pointer is the object that contains <c>get</c> or <c>set</c>, which means that
        /// <c>this.name</c> can be accessed if needed. The hook functions are both optional.
        /// Defaults to: <c>{}</c>
        /// </summary>
        private JsObject styleHooks{get;set;}
        /// <summary>
        /// Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.
        /// </summary>
        /// <param name="className"><p>The CSS classes to add separated by space, or an array of classes</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element addCls(object className){return null;}
        /// <summary>
        /// Appends the passed element(s) to this element
        /// </summary>
        /// <param name="el"><p>The id of the node, a DOM Node or an existing Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>This element</p>
        /// </div>
        /// </returns>
        public AbstractElement appendChild(object el){return null;}
        /// <summary>
        /// Appends this element to the passed element
        /// </summary>
        /// <param name="el"><p>The new parent element.
        /// The id of the node, a DOM Node or an existing Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>This element</p>
        /// </div>
        /// </returns>
        public AbstractElement appendTo(object el){return null;}
        /// <summary>
        /// More flexible version of setStyle for setting style properties.
        /// </summary>
        /// <param name="styles"><p>A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or
        /// a function which returns such a specification.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element applyStyles(object styles){return null;}
        /// <summary>
        /// Selects a single direct child based on the passed CSS selector (the selector should not contain an id).
        /// </summary>
        /// <param name="selector"><p>The CSS selector</p>
        /// </param>
        /// <param name="returnDom"><p>True to return the DOM node instead of <see cref="Ext.dom.Element">Ext.dom.Element</see>.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span>HTMLElement/<see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The child <see cref="Ext.dom.Element">Ext.dom.Element</see> (or DOM node if returnDom = true)</p>
        /// </div>
        /// </returns>
        public object child(JsString selector, object returnDom=null){return null;}
        /// <summary>
        /// Returns true if this element is an ancestor of the passed element
        /// </summary>
        /// <param name="el"><p>The element to check</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if this element is an ancestor of el, else false</p>
        /// </div>
        /// </returns>
        public bool contains(object el){return false;}
        /// <summary>
        /// Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
        /// </summary>
        /// <param name="config"><p>DomHelper element config object.  If no tag is specified (e.g., {tag:'input'}) then a div will be
        /// automatically generated with the specified attributes.</p>
        /// </param>
        /// <param name="insertBefore"><p>a child element of this element</p>
        /// </param>
        /// <param name="returnDom"><p>true to return the dom node instead of creating an Element</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>The new child element</p>
        /// </div>
        /// </returns>
        public AbstractElement createChild(object config, object insertBefore=null, object returnDom=null){return null;}
        /// <summary>
        /// Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
        /// </summary>
        /// <param name="selector"><p>The CSS selector</p>
        /// </param>
        /// <param name="returnDom"><p>True to return the DOM node instead of <see cref="Ext.dom.Element">Ext.dom.Element</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span>HTMLElement/<see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The child <see cref="Ext.dom.Element">Ext.dom.Element</see> (or DOM node if returnDom = true)</p>
        /// </div>
        /// </returns>
        public object down(JsString selector, object returnDom=null){return null;}
        /// <summary>
        /// Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
        /// </summary>
        /// <param name="selector"><p>The simple selector to test</p>
        /// </param>
        /// <param name="limit"><p>The max depth to search as a number or an element which causes the upward traversal to stop
        /// and is <b>not</b> considered for inclusion as the result. (defaults to 50 || document.documentElement)</p>
        /// </param>
        /// <param name="returnEl"><p>True to return a <see cref="Ext.dom.Element">Ext.Element</see> object instead of DOM node</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The matching DOM node (or null if no match was found)</p>
        /// </div>
        /// </returns>
        public JsObject findParent(JsString selector, object limit=null, object returnEl=null){return null;}
        /// <summary>
        /// Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
        /// </summary>
        /// <param name="selector"><p>The simple selector to test</p>
        /// </param>
        /// <param name="limit"><p>The max depth to search as a number or an element which causes the upward traversal to stop
        /// and is <b>not</b> considered for inclusion as the result. (defaults to 50 || document.documentElement)</p>
        /// </param>
        /// <param name="returnEl"><p>True to return a <see cref="Ext.dom.Element">Ext.Element</see> object instead of DOM node</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The matching DOM node (or null if no match was found)</p>
        /// </div>
        /// </returns>
        public JsObject findParentNode(JsString selector, object limit=null, object returnEl=null){return null;}
        /// <summary>
        /// Gets the first child, skipping text nodes
        /// </summary>
        /// <param name="selector"><p>Find the next sibling that matches the passed simple selector</p>
        /// </param>
        /// <param name="returnDom"><p>True to return a raw dom node instead of an <see cref="Ext.dom.Element">Ext.dom.Element</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see>/HTMLElement</span><div><p>The first child or null</p>
        /// </div>
        /// </returns>
        public object first(object selector=null, object returnDom=null){return null;}
        /// <summary>
        /// Returns the active element in the DOM. If the browser supports activeElement
        /// on the document, this is returned. If not, the focus is tracked and the active
        /// element is maintained internally.
        /// </summary>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The active (focused) element in the document.</p>
        /// </div>
        /// </returns>
        public JsObject getActiveElement(){return null;}
        /// <summary>
        /// Gets the x,y coordinates to align this element with another element. See Ext.dom.Element.alignTo for more info on the
        /// supported position values.
        /// </summary>
        /// <param name="element"><p>The element to align to.</p>
        /// </param>
        /// <param name="position"><p>The position to align to.</p>
        /// <p>Defaults to: <c>&quot;tl-bl?&quot;</c></p></param>
        /// <param name="offsets"><p>Offset the positioning by [x, y]</p>
        /// <p>Defaults to: <c>[0, 0]</c></p></param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>[x, y]</p>
        /// </div>
        /// </returns>
        public JsArray getAlignToXY(object element, object position=null, object offsets=null){return null;}
        /// <summary>
        /// Gets the x,y coordinates specified by the anchor position on the element.
        /// </summary>
        /// <param name="anchor"><p>The specified anchor position (defaults to "c").  See <see cref="Ext.dom.Element.alignTo">Ext.dom.Element.alignTo</see>
        /// for details on supported anchor positions.</p>
        /// </param>
        /// <param name="local"><p>True to get the local (element top/left-relative) anchor position instead
        /// of page coordinates</p>
        /// </param>
        /// <param name="size"><p>An object containing the size to use for calculating anchor position
        /// {width: (target width), height: (target height)} (defaults to the element's current size)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>[x, y] An array containing the element's x and y coordinates</p>
        /// </div>
        /// </returns>
        public JsArray getAnchorXY(object anchor=null, object local=null, object size=null){return null;}
        /// <summary>
        /// Returns the value of an attribute from the element's underlying DOM node.
        /// </summary>
        /// <param name="name"><p>The attribute name</p>
        /// </param>
        /// <param name="namespace"><p>The namespace in which to look for the attribute</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The attribute value</p>
        /// </div>
        /// </returns>
        public JsString getAttribute(JsString name, object @namespace=null){return null;}
        /// <summary>
        /// Gets the width of the border(s) for the specified side(s)
        /// </summary>
        /// <param name="side"><p>Can be t, l, r, b or any combination of those to add multiple values. For example,
        /// passing <c>'lr'</c> would get the border <strong>l</strong>eft width + the border <strong>r</strong>ight width.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The width of the sides passed added together</p>
        /// </div>
        /// </returns>
        public JsNumber getBorderWidth(JsString side){return null;}
        /// <summary>
        /// Gets the bottom Y coordinate of the element (element Y position + element height)
        /// </summary>
        /// <param name="local"><p>True to get the local css position instead of page coordinate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getBottom(bool local){return null;}
        /// <summary>
        /// Return an object defining the area of this Element which can be passed to setBox to
        /// set another Element's size/location to match this element.
        /// </summary>
        /// <param name="contentBox"><p>If true a box for the content of the element is returned.</p>
        /// </param>
        /// <param name="local"><p>If true the element's left and top are returned instead of page x/y.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>box An object in the format:</p>
        /// <pre><code>{
        /// x: &lt;Element's X position&gt;,
        /// y: &lt;Element's Y position&gt;,
        /// width: &lt;Element's width&gt;,
        /// height: &lt;Element's height&gt;,
        /// bottom: &lt;Element's lower bound&gt;,
        /// right: &lt;Element's rightmost bound&gt;
        /// }
        /// </code></pre>
        /// <p>The returned object may also be addressed as an Array where index 0 contains the X position
        /// and index 1 contains the Y position. So the result may also be used for <see cref="Ext.dom.AbstractElement.setXY">setXY</see></p>
        /// </div>
        /// </returns>
        public object getBox(object contentBox=null, object local=null){return null;}
        /// <summary>
        /// Returns a child element of this element given its id.
        /// </summary>
        /// <param name="id"><p>The id of the desired child element.</p>
        /// </param>
        /// <param name="asDom"><p>True to return the DOM element, false to return a
        /// wrapped Element object.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public void getById(JsString id, object asDom=null){}
        /// <summary>
        /// Returns the innerHTML of an Element or an empty string if the element's
        /// dom no longer exists.
        /// </summary>
        public void getHTML(){}
        /// <summary>
        /// Returns the offset height of the element
        /// </summary>
        /// <param name="contentHeight"><p>true to get the height minus borders and padding</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The element's height</p>
        /// </div>
        /// </returns>
        public JsNumber getHeight(object contentHeight=null){return null;}
        /// <summary>
        /// Gets the left X coordinate
        /// </summary>
        /// <param name="local"><p>True to get the local css position instead of page coordinate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getLeft(bool local){return null;}
        /// <summary>
        /// Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
        /// then it returns the calculated width of the sides (see getPadding)
        /// </summary>
        /// <param name="sides"><p>Any combination of l, r, t, b to get the sum of those sides</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see>/<see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public object getMargin(object sides=null){return null;}
        /// <summary>
        /// Returns the offsets of this element from the passed element. Both element must be part of the DOM
        /// tree and not have display:none to have page coordinates.
        /// </summary>
        /// <param name="element"><p>The element to get the offsets from.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The XY page offsets (e.g. [100, -200])</p>
        /// </div>
        /// </returns>
        public JsArray getOffsetsTo(object element){return null;}
        /// <summary>
        /// Gets the width of the padding(s) for the specified side(s)
        /// </summary>
        /// <param name="side"><p>Can be t, l, r, b or any combination of those to add multiple values. For example,
        /// passing <c>'lr'</c> would get the padding <strong>l</strong>eft + the padding <strong>r</strong>ight.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The padding of the sides passed added together</p>
        /// </div>
        /// </returns>
        public JsNumber getPadding(JsString side){return null;}
        /// <summary>
        /// Return an object defining the area of this Element which can be passed to setBox to
        /// set another Element's size/location to match this element.
        /// </summary>
        /// <param name="asRegion"><p>If true an <see cref="Ext.util.Region">Ext.util.Region</see> will be returned</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>box An object in the format</p>
        /// <pre><code>{
        /// left: &lt;Element's X position&gt;,
        /// top: &lt;Element's Y position&gt;,
        /// width: &lt;Element's width&gt;,
        /// height: &lt;Element's height&gt;,
        /// bottom: &lt;Element's lower bound&gt;,
        /// right: &lt;Element's rightmost bound&gt;
        /// }
        /// </code></pre>
        /// <p>The returned object may also be addressed as an Array where index 0 contains the X position
        /// and index 1 contains the Y position. So the result may also be used for <see cref="Ext.dom.AbstractElement.setXY">setXY</see></p>
        /// </div>
        /// </returns>
        public object getPageBox(object asRegion=null){return null;}
        /// <summary>
        /// Gets the right X coordinate of the element (element X position + element width)
        /// </summary>
        /// <param name="local"><p>True to get the local css position instead of page coordinate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getRight(bool local){return null;}
        /// <summary>
        /// Creates a function to call to clean up problems with the work-around for the
        /// WebKit RightMargin bug. The work-around is to add "display: 'inline-block'" to
        /// the element before calling getComputedStyle and then to restore its original
        /// display value. The problem with this is that it corrupts the selection of an
        /// INPUT or TEXTAREA element (as in the "I-beam" goes away but ths focus remains).
        /// To cleanup after this, we need to capture the selection of any such element and
        /// then restore it after we have restored the display style.
        /// </summary>
        /// <param name="target"><p>The top-most element being adjusted.</p>
        /// </param>
        private void getRightMarginFixCleaner(Ext.dom.Element target){}
        /// <summary>
        /// Returns the size of the element.
        /// </summary>
        /// <param name="contentSize"><p>true to get the width/size minus borders and padding</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>An object containing the element's size:</p>
        /// <ul><li><span>width</span> : <see cref="Number">Number</see><div></div></li><li><span>height</span> : <see cref="Number">Number</see><div></div></li></ul></div>
        /// </returns>
        public object getSize(object contentSize=null){return null;}
        /// <summary>
        /// Returns a named style property based on computed/currentStyle (primary) and
        /// inline-style if primary is not available.
        /// </summary>
        /// <param name="property"><p>The style property (or multiple property names
        /// in an array) whose value is returned.</p>
        /// </param>
        /// <param name="inline"><p>if <c>true</c> only inline styles will be returned.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="String">String</see>/<see cref="Object">Object</see></span><div><p>The current value of the style property for this element
        /// (or a hash of named style values if multiple property arguments are requested).</p>
        /// </div>
        /// </returns>
        public object getStyle(object property, object inline=null){return null;}
        /// <summary>
        /// Gets the top Y coordinate
        /// </summary>
        /// <param name="local"><p>True to get the local css position instead of page coordinate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getTop(bool local){return null;}
        /// <summary>
        /// Returns the value of the "value" attribute
        /// </summary>
        /// <param name="asNumber"><p>true to parse the value as a number</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see>/<see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public object getValue(bool asNumber){return null;}
        /// <summary>
        /// Returns the dimensions of the element available to lay content out in.
        /// If the element (or any ancestor element) has CSS style <c>display: none</c>, the dimensions will be zero.
        /// Example:
        /// <code>var vpSize = <see cref="Ext.ExtContext.getBody">Ext.getBody</see>().getViewSize();
        /// // all Windows created afterwards will have a default value of 90% height and 95% width
        /// <see cref="Ext.window.Window.override">Ext.Window.override</see>({
        /// width: vpSize.width * 0.9,
        /// height: vpSize.height * 0.95
        /// });
        /// // To handle window resizing you would have to hook onto onWindowResize.
        /// </code>
        /// getViewSize utilizes clientHeight/clientWidth which excludes sizing of scrollbars.
        /// To obtain the size including scrollbars, use getStyleSize
        /// Sizing of the document body is handled at the adapter level which handles special cases for IE and strict modes, etc.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Object describing width and height.</p>
        /// <ul><li><span>width</span> : <see cref="Number">Number</see><div></div></li><li><span>height</span> : <see cref="Number">Number</see><div></div></li></ul></div>
        /// </returns>
        public object getViewSize(){return null;}
        /// <summary>
        /// Returns the offset width of the element
        /// </summary>
        /// <param name="contentWidth"><p>true to get the width minus borders and padding</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The element's width</p>
        /// </div>
        /// </returns>
        public JsNumber getWidth(object contentWidth=null){return null;}
        /// <summary>
        /// Gets the current X position of the element based on page coordinates.  Element must be part of the DOM
        /// tree to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        /// <param name="el">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The X position of the element</p>
        /// </div>
        /// </returns>
        public JsNumber getX(object el){return null;}
        /// <summary>
        /// Gets the current position of the element based on page coordinates.  Element must be part of the DOM
        /// tree to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The XY position of the element</p>
        /// </div>
        /// </returns>
        public JsArray getXY(){return null;}
        /// <summary>
        /// Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM
        /// tree to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        /// <param name="el">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The Y position of the element</p>
        /// </div>
        /// </returns>
        public JsNumber getY(object el){return null;}
        /// <summary>
        /// Checks if the specified CSS class exists on this element's DOM node.
        /// </summary>
        /// <param name="className"><p>The CSS class to check for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the class exists, else false</p>
        /// </div>
        /// </returns>
        public bool hasCls(JsString className){return false;}
        /// <summary>
        /// Hide this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.
        /// </summary>
        /// <param name="animate"><p>true for the default animation or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element hide(object animate=null){return null;}
        /// <summary>
        /// Inserts this element after the passed element in the DOM
        /// </summary>
        /// <param name="el"><p>The element to insert after.
        /// The id of the node, a DOM Node or an existing Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>This element</p>
        /// </div>
        /// </returns>
        public AbstractElement insertAfter(object el){return null;}
        /// <summary>
        /// Inserts this element before the passed element in the DOM
        /// </summary>
        /// <param name="el"><p>The element before which this element will be inserted.
        /// The id of the node, a DOM Node or an existing Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>This element</p>
        /// </div>
        /// </returns>
        public AbstractElement insertBefore(object el){return null;}
        /// <summary>
        /// Inserts (or creates) an element (or DomHelper config) as the first child of this element
        /// </summary>
        /// <param name="el"><p>The id or element to insert or a DomHelper config
        /// to create and insert</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>The new child</p>
        /// </div>
        /// </returns>
        public AbstractElement insertFirst(object el){return null;}
        /// <summary>
        /// Inserts an html fragment into this element
        /// </summary>
        /// <param name="where"><p>Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
        /// See <see cref="Ext.dom.Helper.insertHtml">Ext.dom.Helper.insertHtml</see> for details.</p>
        /// </param>
        /// <param name="html"><p>The HTML fragment</p>
        /// </param>
        /// <param name="returnEl"><p>True to return an <see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span>HTMLElement/<see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>The inserted node (or nearest related if more than 1 inserted)</p>
        /// </div>
        /// </returns>
        public object insertHtml(JsString where, JsString html, object returnEl=null){return null;}
        /// <summary>
        /// Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
        /// </summary>
        /// <param name="el"><p>The id, element to insert or a DomHelper config
        /// to create and insert <em>or</em> an array of any of those.</p>
        /// </param>
        /// <param name="where"><p>'before' or 'after'</p>
        /// <p>Defaults to: <c>&quot;before&quot;</c></p></param>
        /// <param name="returnDom"><p>True to return the .;ll;l,raw DOM element instead of <see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>The inserted Element. If an array is passed, the last inserted element is returned.</p>
        /// </div>
        /// </returns>
        public AbstractElement insertSibling(object el, object where=null, object returnDom=null){return null;}
        /// <summary>
        /// Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)
        /// </summary>
        /// <param name="selector"><p>The simple selector to test</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if this element matches the selector, else false</p>
        /// </div>
        /// </returns>
        public bool @is(JsString selector){return false;}
        /// <summary>
        /// Checks if the current value of a style is equal to a given value.
        /// </summary>
        /// <param name="style"><p>property whose value is returned.</p>
        /// </param>
        /// <param name="value"><p>to check against.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true for when the current value equals the given value.</p>
        /// </div>
        /// </returns>
        public bool isStyle(JsString style, JsString value){return false;}
        /// <summary>
        /// Returns true if the value of the given property is visually transparent. This
        /// may be due to a 'transparent' style value or an rgba value with 0 in the alpha
        /// component.
        /// </summary>
        /// <param name="prop"><p>The style property whose value is to be tested.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the style property is visually transparent.</p>
        /// </div>
        /// </returns>
        public bool isTransparent(JsString prop){return false;}
        /// <summary>
        /// Gets the last child, skipping text nodes
        /// </summary>
        /// <param name="selector"><p>Find the previous sibling that matches the passed simple selector</p>
        /// </param>
        /// <param name="returnDom"><p>True to return a raw dom node instead of an <see cref="Ext.dom.Element">Ext.dom.Element</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see>/HTMLElement</span><div><p>The last child or null</p>
        /// </div>
        /// </returns>
        public object last(object selector=null, object returnDom=null){return null;}
        /// <summary>
        /// Puts a mask over this element to disable user interaction. Requires core.css.
        /// This method can only be applied to elements which accept child nodes.
        /// </summary>
        /// <param name="msg"><p>A message to display in the mask</p>
        /// </param>
        /// <param name="msgCls"><p>A css class to apply to the msg element</p>
        /// </param>
        public void mask(object msg=null, object msgCls=null){}
        /// <summary>
        /// Gets the next sibling, skipping text nodes
        /// </summary>
        /// <param name="selector"><p>Find the next sibling that matches the passed simple selector</p>
        /// </param>
        /// <param name="returnDom"><p>True to return a raw dom node instead of an <see cref="Ext.dom.Element">Ext.dom.Element</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see>/HTMLElement</span><div><p>The next sibling or null</p>
        /// </div>
        /// </returns>
        public object next(object selector=null, object returnDom=null){return null;}
        /// <summary>
        /// Gets the parent node for this element, optionally chaining up trying to match a selector
        /// </summary>
        /// <param name="selector"><p>Find a parent node that matches the passed simple selector</p>
        /// </param>
        /// <param name="returnDom"><p>True to return a raw dom node instead of an <see cref="Ext.dom.Element">Ext.dom.Element</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see>/HTMLElement</span><div><p>The parent node or null</p>
        /// </div>
        /// </returns>
        public object parent(object selector=null, object returnDom=null){return null;}
        /// <summary>
        /// Creates mappings for 'margin-before' to 'marginLeft' (etc.) given the output
        /// map and an ordering pair (e.g., ['left', 'right']). The ordering pair is in
        /// before/after order.
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="order">
        /// </param>
        public void populateStyleMap(object map, object order){}
        /// <summary>
        /// Gets the previous sibling, skipping text nodes
        /// </summary>
        /// <param name="selector"><p>Find the previous sibling that matches the passed simple selector</p>
        /// </param>
        /// <param name="returnDom"><p>True to return a raw dom node instead of an <see cref="Ext.dom.Element">Ext.dom.Element</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see>/HTMLElement</span><div><p>The previous sibling or null</p>
        /// </div>
        /// </returns>
        public object prev(object selector=null, object returnDom=null){return null;}
        /// <summary>
        /// Selects child nodes based on the passed CSS selector (the selector should not contain an id).
        /// </summary>
        /// <param name="selector"><p>The CSS selector</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement[]</span><div><p>An array of the matched nodes</p>
        /// </div>
        /// </returns>
        public JsObject[] query(JsString selector){return null;}
        /// <summary>
        /// Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
        /// </summary>
        /// <param name="className"><p>The CSS class to add, or an array of classes</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element radioCls(object className){return null;}
        /// <summary>
        /// Removes this element's dom reference. Note that event and cache removal is handled at Ext.removeNode
        /// </summary>
        public void remove(){}
        /// <summary>
        /// Removes one or more CSS classes from the element.
        /// </summary>
        /// <param name="className"><p>The CSS classes to remove separated by space, or an array of classes</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element removeCls(object className){return null;}
        /// <summary>
        /// Forces the browser to repaint this element
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element repaint(){return null;}
        /// <summary>
        /// Replaces the passed element with this element
        /// </summary>
        /// <param name="el"><p>The element to replace.
        /// The id of the node, a DOM Node or an existing Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>This element</p>
        /// </div>
        /// </returns>
        public AbstractElement replace(object el){return null;}
        /// <summary>
        /// Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.
        /// </summary>
        /// <param name="oldClassName"><p>The CSS class to replace</p>
        /// </param>
        /// <param name="newClassName"><p>The replacement CSS class</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element replaceCls(JsString oldClassName, JsString newClassName){return null;}
        /// <summary>
        /// Replaces this element with the passed element
        /// </summary>
        /// <param name="el"><p>The new element (id of the node, a DOM Node
        /// or an existing Element) or a DomHelper config of an element to create</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>This element</p>
        /// </div>
        /// </returns>
        public AbstractElement replaceWith(object el){return null;}
        /// <summary>
        /// Creates a Ext.CompositeElement for child nodes based on the passed CSS selector (the selector should not contain an id).
        /// </summary>
        /// <param name="selector"><p>The CSS selector</p>
        /// </param>
        /// <param name="unique"><p>True to create a unique <see cref="Ext.dom.Element">Ext.Element</see> for each element. Defaults to a shared flyweight object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.CompositeElement">Ext.CompositeElement</see></span><div><p>The composite element</p>
        /// </div>
        /// </returns>
        public Ext.dom.CompositeElement select(JsString selector, object unique=null){return null;}
        /// <summary>
        /// Serializes a DOM form into a url encoded string
        /// </summary>
        /// <param name="form"><p>The form</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The url encoded form</p>
        /// </div>
        /// </returns>
        public JsString serializeForm(object form){return null;}
        /// <summary>
        /// Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
        /// </summary>
        /// <param name="o"><p>The object with the attributes</p>
        /// </param>
        /// <param name="useSet"><p>false to override the default setAttribute to use expandos.</p>
        /// <p>Defaults to: <c>true</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element set(object o, object useSet=null){return null;}
        /// <summary>
        /// Sets the element's CSS bottom style.
        /// </summary>
        /// <param name="bottom"><p>The bottom CSS property value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setBottom(JsString bottom){return null;}
        /// <summary>
        /// Sets the element's box. Use getBox() on another element to get a box obj.
        /// If animate is true then width, height, x and y will be animated concurrently.
        /// </summary>
        /// <param name="box"><p>The box to fill {x, y, width, height}</p>
        /// </param>
        /// <param name="adjust"><p>Whether to adjust for box-model issues automatically</p>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard
        /// Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setBox(object box, object adjust=null, object animate=null){return null;}
        /// <summary>
        /// Set the innerHTML of this element
        /// </summary>
        /// <param name="html"><p>The new HTML</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setHTML(JsString html){return null;}
        /// <summary>
        /// Set the height of this Element.
        /// <code>// change the height to 200px and animate with default configuration
        /// <see cref="Ext.ExtContext.fly">Ext.fly</see>('elementId').setHeight(200, true);
        /// // change the height to 150px and animate with a custom configuration
        /// <see cref="Ext.ExtContext.fly">Ext.fly</see>('elId').setHeight(150, {
        /// duration : 500, // animation will have a duration of .5 seconds
        /// // will change the content to "finished"
        /// callback: function(){ this.<see cref="Ext.dom.AbstractElement.update">update</see>("finished"); }
        /// });
        /// </code>
        /// </summary>
        /// <param name="height"><p>The new height. This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new height in this Element's <see cref="Ext.dom.AbstractElement.defaultUnit">defaultUnit</see>s (by default, pixels.)</li>
        /// <li>A String used to set the CSS height style. Animation may <strong>not</strong> be used.</li>
        /// </ul>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setHeight(object height, object animate=null){return null;}
        /// <summary>
        /// Sets the element's left position directly using CSS style (instead of setX).
        /// </summary>
        /// <param name="left"><p>The left CSS property value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setLeft(JsString left){return null;}
        /// <summary>
        /// Sets the element's CSS right style.
        /// </summary>
        /// <param name="right"><p>The right CSS property value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setRight(JsString right){return null;}
        /// <summary>
        /// Set the size of this Element. If animation is true, both width and height will be animated concurrently.
        /// </summary>
        /// <param name="width"><p>The new width. This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new width in this Element's <see cref="Ext.dom.AbstractElement.defaultUnit">defaultUnit</see>s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style. Animation may <strong>not</strong> be used.</li>
        /// <li>A size object in the format <c>{width: widthValue, height: heightValue}</c>.</li>
        /// </ul>
        /// </param>
        /// <param name="height"><p>The new height. This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new height in this Element's <see cref="Ext.dom.AbstractElement.defaultUnit">defaultUnit</see>s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style. Animation may <strong>not</strong> be used.</li>
        /// </ul>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setSize(object width, object height, object animate=null){return null;}
        /// <summary>
        /// Wrapper for setting style properties, also takes single object parameter of multiple styles.
        /// </summary>
        /// <param name="property"><p>The style property to be set, or an object of multiple styles.</p>
        /// </param>
        /// <param name="value"><p>The value to apply to the given property, or null if an object was passed.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setStyle(object property, object value=null){return null;}
        /// <summary>
        /// Sets the element's top position directly using CSS style (instead of setY).
        /// </summary>
        /// <param name="top"><p>The top CSS property value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setTop(JsString top){return null;}
        /// <summary>
        /// Use this to change the visibility mode between VISIBILITY, DISPLAY, OFFSETS or ASCLASS.
        /// </summary>
        /// <param name="mode">
        /// </param>
        public void setVisibilityMode(object mode){}
        /// <summary>
        /// Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
        /// the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.
        /// </summary>
        /// <param name="visible"><p>Whether the element is visible</p>
        /// </param>
        /// <param name="animate"><p>True for the default animation, or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setVisible(bool visible, object animate=null){return null;}
        /// <summary>
        /// Set the width of this Element.
        /// </summary>
        /// <param name="width"><p>The new width. This may be one of:</p>
        /// <ul>
        /// <li>A Number specifying the new width in this Element's <see cref="Ext.dom.AbstractElement.defaultUnit">defaultUnit</see>s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style. Animation may <strong>not</strong> be used.</li>
        /// </ul>
        /// </param>
        /// <param name="animate"><p>true for the default animation or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element setWidth(object width, object animate=null){return null;}
        /// <summary>
        /// Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree
        /// to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        /// <param name="The"><p>X position of the element</p>
        /// </param>
        /// <param name="animate"><p>True for the default animation, or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setX(JsNumber The, object animate=null){return null;}
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned.
        /// The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        /// <param name="pos"><p>Contains X &amp; Y [x, y] values for new position (coordinates are page-based)</p>
        /// </param>
        /// <param name="animate"><p>True for the default animation, or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setXY(JsArray<Array> pos, object animate=null){return null;}
        /// <summary>
        /// Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree
        /// to have page coordinates (display:none or elements not appended return false).
        /// </summary>
        /// <param name="The"><p>Y position of the element</p>
        /// </param>
        /// <param name="animate"><p>True for the default animation, or a standard Element
        /// animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public AbstractElement setY(JsNumber The, object animate=null){return null;}
        /// <summary>
        /// Show this element - Uses display mode to determine whether to use "display" or "visibility". See setVisible.
        /// </summary>
        /// <param name="animate"><p>true for the default animation or a standard Element animation config object</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element show(object animate=null){return null;}
        /// <summary>
        /// Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
        /// </summary>
        /// <param name="className"><p>The CSS class to toggle</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element toggleCls(JsString className){return null;}
        /// <summary>
        /// Translates the passed page coordinates into left/top css values for this element
        /// </summary>
        /// <param name="x"><p>The page x or an array containing [x, y]</p>
        /// </param>
        /// <param name="y"><p>The page y, required if x is not an array</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>An object with left and top properties. e.g. {left: (value), top: (value)}</p>
        /// </div>
        /// </returns>
        public object translatePoints(object x, object y=null){return null;}
        /// <summary>
        /// Removes a previously applied mask.
        /// </summary>
        public void unmask(){}
        /// <summary>
        /// Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
        /// This is a shortcut for findParentNode() that always returns an Ext.dom.Element.
        /// </summary>
        /// <param name="selector"><p>The simple selector to test</p>
        /// </param>
        /// <param name="limit"><p>The max depth to search as a number or an element which causes the upward traversal to stop
        /// and is <b>not</b> considered for inclusion as the result. (defaults to 50 || document.documentElement)</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.Element</see></span><div><p>The matching DOM node (or null if no match was found)</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element up(JsString selector, object limit=null){return null;}
        /// <summary>
        /// Update the innerHTML of this element
        /// </summary>
        /// <param name="html"><p>The new HTML</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.dom.Element update(JsString html){return null;}
        /// <summary>
        /// Creates and wraps this element with another element
        /// </summary>
        /// <param name="config"><p>DomHelper element config object for the wrapper element or null for an empty div</p>
        /// </param>
        /// <param name="returnDom"><p>True to return the raw DOM element instead of <see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="selector"><p>A <see cref="Ext.dom.Query">DomQuery</see> selector to select a descendant node within the created element to use as the wrapping element.</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement/<see cref="Ext.dom.AbstractElement">Ext.dom.AbstractElement</see></span><div><p>The newly created wrapper element</p>
        /// </div>
        /// </returns>
        public object wrap(object config=null, object returnDom=null, object selector=null){return null;}
        /// <summary>
        /// Visibility mode constant for use with Ext.dom.Element.setVisibilityMode.
        /// Add or remove the Ext.Layer.visibilityCls class to hide the element.
        /// Defaults to: <c>4</c>
        /// </summary>
        public static JsNumber ASCLASS{get;set;}
        /// <summary>
        /// Visibility mode constant for use with Ext.dom.Element.setVisibilityMode.
        /// Use the CSS 'display' property to hide the element.
        /// Defaults to: <c>2</c>
        /// </summary>
        public static JsNumber DISPLAY{get;set;}
        /// <summary>
        /// Visibility mode constant for use with Ext.dom.Element.setVisibilityMode.
        /// Use CSS absolute positioning and top/left offsets to hide the element.
        /// Defaults to: <c>3</c>
        /// </summary>
        public static JsNumber OFFSETS{get;set;}
        /// <summary>
        /// Visibility mode constant for use with Ext.dom.Element.setVisibilityMode.
        /// Use the CSS 'visibility' property to hide the element.
        /// Note that in this mode, <see cref="Ext.dom.Element.isVisible">isVisible</see> may return true
        /// for an element even though it actually has a parent element that is hidden. For this
        /// reason, and in most cases, using the <see cref="Ext.dom.AbstractElement.OFFSETS">OFFSETS</see> mode is a better choice.
        /// Defaults to: <c>1</c>
        /// </summary>
        public static JsNumber VISIBILITY{get;set;}
        /// <summary>
        /// Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.
        /// </summary>
        /// <param name="size"><p>{Object} The size to set</p>
        /// </param>
        /// <param name="units"><p>{String} The units to append to a numeric size value</p>
        /// </param>
        private static void addUnits(object size, object units){}
        /// <summary>
        /// Gets the singleton flyweight element, with the passed node as the active element.
        /// Because it is a singleton, this Flyweight does not have an ID, and must be used and discarded in a single line.
        /// You may not keep and use the reference to this singleton over multiple lines because methods that you call
        /// may themselves make use of <see cref="Ext.ExtContext.fly">Ext.fly</see> and may change the DOM element to which the instance refers.
        /// <see cref="Ext.ExtContext.fly">Ext.fly</see> is alias for <see cref="Ext.dom.AbstractElement.fly">fly</see>.
        /// Use this to make one-time references to DOM elements which are not going to be accessed again either by
        /// application code, or by Ext's classes. If accessing an element which will be processed regularly, then <see cref="Ext.ExtContext.get">Ext.get</see> will be more appropriate to take advantage of the caching provided by the <see cref="Ext.dom.Element">Ext.dom.Element</see>
        /// class.
        /// </summary>
        /// <param name="dom"><p>The dom node or id</p>
        /// </param>
        /// <param name="named"><p>Allows for creation of named reusable flyweights to prevent conflicts (e.g.
        /// internally Ext uses "_global")</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.AbstractElement.Fly">Ext.dom.AbstractElement.Fly</see></span><div><p>The singleton flyweight object (or null if no matching element was found)</p>
        /// </div>
        /// </returns>
        public static Ext.dom.AbstractElement.Fly fly(object dom, object named=null){return null;}
        /// <summary>
        /// Returns the top Element that is located at the passed coordinates
        /// </summary>
        /// <param name="x"><p>The x coordinate</p>
        /// </param>
        /// <param name="y"><p>The y coordinate</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The found Element</p>
        /// </div>
        /// </returns>
        public static JsString fromPoint(JsNumber x, JsNumber y){return null;}
        /// <summary>
        /// Retrieves Ext.dom.Element objects. Ext.get is alias for Ext.dom.Element.get.
        /// <strong>This method does not retrieve <see cref="Ext.Component">Component</see>s.</strong> This method retrieves <see cref="Ext.dom.Element">Ext.dom.Element</see>
        /// objects which encapsulate DOM elements. To retrieve a Component by its ID, use <see cref="Ext.ComponentManager.get">Ext.ComponentManager.get</see>.
        /// Uses simple caching to consistently return the same object. Automatically fixes if an object was recreated with
        /// the same id via AJAX or DOM.
        /// </summary>
        /// <param name="el"><p>The id of the node, a DOM Node or an existing Element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.dom.Element">Ext.dom.Element</see></span><div><p>The Element object (or null if no matching element was found)</p>
        /// </div>
        /// </returns>
        public static Ext.dom.Element get(object el){return null;}
        /// <summary>
        /// Retrieves the document height
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>documentHeight</p>
        /// </div>
        /// </returns>
        public static JsNumber getDocumentHeight(){return null;}
        /// <summary>
        /// Retrieves the document width
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>documentWidth</p>
        /// </div>
        /// </returns>
        public static JsNumber getDocumentWidth(){return null;}
        /// <summary>
        /// Retrieves the current orientation of the window. This is calculated by
        /// determing if the height is greater than the width.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>Orientation of window: 'portrait' or 'landscape'</p>
        /// </div>
        /// </returns>
        public static JsString getOrientation(){return null;}
        /// <summary>
        /// Retrieves the viewport height of the window.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>viewportHeight</p>
        /// </div>
        /// </returns>
        public static JsNumber getViewportHeight(){return null;}
        /// <summary>
        /// Retrieves the viewport width of the window.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>viewportWidth</p>
        /// </div>
        /// </returns>
        public static JsNumber getViewportWidth(){return null;}
        /// <summary>
        /// Parameters<li><span>p</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>c</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="p">
        /// </param>
        /// <param name="c">
        /// </param>
        private static void isAncestor(object p, object c){}
        /// <summary>
        /// Returns an array of unique class names based upon the input strings, or string arrays.
        /// The number of parameters is unlimited.
        /// Example
        /// <code><p>
        /// <pre>// Add x-invalid and x-mandatory classes, do not duplicate
        /// myElement.dom.className = <see cref="Ext.dom.Element.mergeClsList">Ext.core.Element.mergeClsList</see>(this.initialClasses, 'x-invalid x-mandatory');
        /// </pre>
        /// <p></code>
        /// </summary>
        /// <param name="clsList1"><p>A string of class names, or an array of class names.</p>
        /// </param>
        /// <param name="clsList2"><p>A string of class names, or an array of class names.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>An array of strings representing remaining unique, merged class names. If class names were added to the first list, the <c>changed</c> property will be <c>true</c>.</p>
        /// </div>
        /// </returns>
        public static JsArray mergeClsList(object clsList1, object clsList2){return null;}
        /// <summary>
        /// Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
        /// For example:
        /// <li>border-width -> borderWidth</li>
        /// <li>padding-top -> paddingTop</li>
        /// </summary>
        /// <param name="prop"><p>The property to normalize</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The normalized string</p>
        /// </div>
        /// </returns>
        public static JsString normalize(JsString prop){return null;}
        /// <summary>
        /// Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
        /// (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
        /// </summary>
        /// <param name="box"><p>The encoded margins</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>An object with margin sizes for top, right, bottom and left</p>
        /// </div>
        /// </returns>
        public static object parseBox(object box){return null;}
        /// <summary>
        /// Converts a CSS string into an object with a property for each style.
        /// The sample code below would return an object with 2 properties, one
        /// for background-color and one for color.
        /// <code>var css = 'background-color: red;color: blue; ';
        /// console.log(Ext.dom.Element.parseStyles(css));
        /// </code>
        /// </summary>
        /// <param name="styles"><p>A CSS string</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>styles</p>
        /// </div>
        /// </returns>
        public static object parseStyles(JsString styles){return null;}
        /// <summary>
        /// Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
        /// (e.g. 10, "10", "10 10", "10 10 10" and "10 10 10 10" are all valid options and would return the same result)
        /// </summary>
        /// <param name="box"><p>The encoded margins</p>
        /// </param>
        /// <param name="units"><p>The type of units to add</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>An string with unitized (px if units is not specified) metrics for top, right, bottom and left</p>
        /// </div>
        /// </returns>
        public static JsString unitizeBox(object box, JsString units){return null;}
        public AbstractElement(AbstractElementConfig config){}
        public AbstractElement(){}
        public AbstractElement(params object[] args){}
        /// <inheritdocs />
        /// <summary>
        /// <p>A non-persistent wrapper for a DOM element which may be used to execute methods of <see cref="Ext.dom.Element">Ext.dom.Element</see>
        /// upon a DOM element without creating an instance of <see cref="Ext.dom.Element">Ext.dom.Element</see>.</p>
        /// <p>A <strong>singleton</strong> instance of this class is returned when you use <see cref="Ext.ExtContext.fly">Ext.fly</see></p>
        /// <p>Because it is a singleton, this Flyweight does not have an ID, and must be used and discarded in a single line.
        /// You should not keep and use the reference to this singleton over multiple lines because methods that you call
        /// may themselves make use of <see cref="Ext.ExtContext.fly">Ext.fly</see> and may change the DOM element to which the instance refers.</p>
        /// </summary>
        [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
        public partial class Fly : AbstractElement
        {
            /// <summary>
            /// This is true to identify Element flyweights
            /// Defaults to: <c>true</c>
            /// </summary>
            public bool isFly{get;set;}
            /// <summary>
            /// Attach this fliyweight instance to the passed DOM element.
            /// Note that a flightweight does <strong>not</strong> have an ID, and does not acquire the ID of the DOM element.
            /// </summary>
            /// <param name="dom">
            /// </param>
            private void attach(object dom){}
            public Fly(FlyConfig config){}
            public Fly(){}
            public Fly(params object[] args){}
        }
        /// <inheritdocs />
        [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
        public partial class FlyConfig : AbstractElementConfig
        {
            public FlyConfig(params object[] args){}
        }
        /// <inheritdocs />
        [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
        public partial class FlyEvents : AbstractElementEvents
        {
            public FlyEvents(params object[] args){}
        }
    }
    #endregion
    #region AbstractElementConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractElementConfig : Ext.BaseConfig
    {
        public AbstractElementConfig(params object[] args){}
    }
    #endregion
    #region AbstractElementEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AbstractElementEvents : Ext.BaseEvents
    {
        public AbstractElementEvents(params object[] args){}
    }
    #endregion
}
