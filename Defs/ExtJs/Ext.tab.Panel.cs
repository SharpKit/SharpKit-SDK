//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.tab
{
    #region Panel
    /// <inheritdocs />
    /// <summary>
    /// <p>A basic tab container. TabPanels can be used exactly like a standard <see cref="Ext.panel.Panel">Ext.panel.Panel</see> for
    /// layout purposes, but also have special support for containing child Components
    /// (<c><see cref="Ext.container.ContainerConfig.items">items</see></c>) that are managed using a
    /// <see cref="Ext.layout.container.Card">CardLayout layout manager</see>, and displayed as separate tabs.</p>
    /// <p><strong>Note:</strong> By default, a tab's close tool <em>destroys</em> the child tab Component and all its descendants.
    /// This makes the child tab Component, and all its descendants <strong>unusable</strong>.  To enable re-use of a tab,
    /// configure the TabPanel with <c><see cref="Ext.tab.PanelConfig.autoDestroy">autoDestroy: false</see></c>.</p>
    /// <h2>TabPanel's layout</h2>
    /// <p>TabPanels use a Dock layout to position the <see cref="Ext.tab.Bar">TabBar</see> at the top of the widget.
    /// Panels added to the TabPanel will have their header hidden by default because the Tab will
    /// automatically take the Panel's configured title and icon.</p>
    /// <p>TabPanels use their <see cref="Ext.panel.Header">header</see> or <see cref="Ext.panel.PanelConfig.fbar">footer</see>
    /// element (depending on the <see cref="Ext.tab.PanelConfig.tabPosition">tabPosition</see> configuration) to accommodate the tab selector buttons.
    /// This means that a TabPanel will not display any configured title, and will not display any configured
    /// header <see cref="Ext.panel.PanelConfig.tools">tools</see>.</p>
    /// <p>To display a header, embed the TabPanel in a <see cref="Ext.panel.Panel">Panel</see> which uses
    /// <c><see cref="Ext.container.ContainerConfig.layout">layout: 'fit'</see></c>.</p>
    /// <h2>Controlling tabs</h2>
    /// <p>Configuration options for the <see cref="Ext.tab.Tab">Ext.tab.Tab</see> that represents the component can be passed in
    /// by specifying the tabConfig option:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// width: 400,
    /// height: 400,
    /// renderTo: document.body,
    /// items: [{
    /// title: 'Foo'
    /// }, {
    /// title: 'Bar',
    /// tabConfig: {
    /// title: 'Custom Title',
    /// tooltip: 'A button tooltip'
    /// }
    /// }]
    /// });
    /// </code></pre>
    /// <h1>Examples</h1>
    /// <p>Here is a basic TabPanel rendered to the body. This also shows the useful configuration <see cref="Ext.tab.PanelConfig.activeTab">activeTab</see>,
    /// which allows you to set the active tab on render. If you do not set an <see cref="Ext.tab.PanelConfig.activeTab">activeTab</see>, no tabs will be
    /// active by default.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// width: 300,
    /// height: 200,
    /// activeTab: 0,
    /// items: [
    /// {
    /// title: 'Tab 1',
    /// bodyPadding: 10,
    /// html : 'A simple tab'
    /// },
    /// {
    /// title: 'Tab 2',
    /// html : 'Another one'
    /// }
    /// ],
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>It is easy to control the visibility of items in the tab bar. Specify hidden: true to have the
    /// tab button hidden initially. Items can be subsequently hidden and show by accessing the
    /// tab property on the child item.</p>
    /// <pre><code>var tabs = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// width: 400,
    /// height: 400,
    /// renderTo: document.body,
    /// items: [{
    /// title: 'Home',
    /// html: 'Home',
    /// itemId: 'home'
    /// }, {
    /// title: 'Users',
    /// html: 'Users',
    /// itemId: 'users',
    /// hidden: true
    /// }, {
    /// title: 'Tickets',
    /// html: 'Tickets',
    /// itemId: 'tickets'
    /// }]
    /// });
    /// setTimeout(function(){
    /// tabs.child('#home').tab.hide();
    /// var users = tabs.child('#users');
    /// users.tab.show();
    /// tabs.setActiveTab(users);
    /// }, 1000);
    /// </code></pre>
    /// <p>You can remove the background of the TabBar by setting the <see cref="Ext.tab.PanelConfig.plain">plain</see> property to <c>true</c>.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// width: 300,
    /// height: 200,
    /// activeTab: 0,
    /// plain: true,
    /// items: [
    /// {
    /// title: 'Tab 1',
    /// bodyPadding: 10,
    /// html : 'A simple tab'
    /// },
    /// {
    /// title: 'Tab 2',
    /// html : 'Another one'
    /// }
    /// ],
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>Another useful configuration of TabPanel is <see cref="Ext.tab.PanelConfig.tabPosition">tabPosition</see>. This allows you to change the
    /// position where the tabs are displayed. The available options for this are <c>'top'</c> (default) and
    /// <c>'bottom'</c>.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// width: 300,
    /// height: 200,
    /// activeTab: 0,
    /// bodyPadding: 10,
    /// tabPosition: 'bottom',
    /// items: [
    /// {
    /// title: 'Tab 1',
    /// html : 'A simple tab'
    /// },
    /// {
    /// title: 'Tab 2',
    /// html : 'Another one'
    /// }
    /// ],
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>The <see cref="Ext.tab.Panel.setActiveTab">setActiveTab</see> is a very useful method in TabPanel which will allow you to change the
    /// current active tab. You can either give it an index or an instance of a tab. For example:</p>
    /// <pre><code>var tabs = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// items: [
    /// {
    /// id   : 'my-tab',
    /// title: 'Tab 1',
    /// html : 'A simple tab'
    /// },
    /// {
    /// title: 'Tab 2',
    /// html : 'Another one'
    /// }
    /// ],
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// var tab = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('my-tab');
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.button.Button</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// text    : 'Select the first tab',
    /// scope   : this,
    /// handler : function() {
    /// tabs.setActiveTab(tab);
    /// }
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.button.Button</see>', {
    /// text    : 'Select the second tab',
    /// scope   : this,
    /// handler : function() {
    /// tabs.setActiveTab(1);
    /// },
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>The <see cref="Ext.tab.Panel.getActiveTab">getActiveTab</see> is a another useful method in TabPanel which will return the current active tab.</p>
    /// <pre><code>var tabs = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// items: [
    /// {
    /// title: 'Tab 1',
    /// html : 'A simple tab'
    /// },
    /// {
    /// title: 'Tab 2',
    /// html : 'Another one'
    /// }
    /// ],
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.button.Button</see>', {
    /// text    : 'Get active tab',
    /// scope   : this,
    /// handler : function() {
    /// var tab = tabs.getActiveTab();
    /// alert('Current tab: ' + tab.title);
    /// },
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>Adding a new tab is very simple with a TabPanel. You simple call the <see cref="Ext.tab.Panel.add">add</see> method with an config
    /// object for a panel.</p>
    /// <pre><code>var tabs = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// items: [
    /// {
    /// title: 'Tab 1',
    /// html : 'A simple tab'
    /// },
    /// {
    /// title: 'Tab 2',
    /// html : 'Another one'
    /// }
    /// ],
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.button.Button</see>', {
    /// text    : 'New tab',
    /// scope   : this,
    /// handler : function() {
    /// var tab = tabs.add({
    /// // we use the tabs.items property to get the length of current items/tabs
    /// title: 'Tab ' + (tabs.items.length + 1),
    /// html : 'Another one'
    /// });
    /// tabs.setActiveTab(tab);
    /// },
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>Additionally, removing a tab is very also simple with a TabPanel. You simple call the <see cref="Ext.tab.Panel.remove">remove</see> method
    /// with an config object for a panel.</p>
    /// <pre><code>var tabs = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tab.Panel">Ext.tab.Panel</see>', {
    /// items: [
    /// {
    /// title: 'Tab 1',
    /// html : 'A simple tab'
    /// },
    /// {
    /// id   : 'remove-this-tab',
    /// title: 'Tab 2',
    /// html : 'Another one'
    /// }
    /// ],
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.button.Button</see>', {
    /// text    : 'Remove tab',
    /// scope   : this,
    /// handler : function() {
    /// var tab = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('remove-this-tab');
    /// tabs.remove(tab);
    /// },
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Panel : Ext.panel.Panel
    {
        /// <summary>
        /// The tab to activate initially. Either an ID, index or the tab component itself.
        /// </summary>
        public object activeTab;
        /// <summary>
        /// True by default to defer the rendering of child items to the browsers DOM
        /// until a tab is activated. False will render all contained items as soon as
        /// the layout is rendered. If there is a significant amount of content or a lot of
        /// heavy controls being rendered into panels that are not displayed by default, setting this to true might improve
        /// performance.
        /// The deferredRender property is internally passed to the layout manager for TabPanels (<see cref="Ext.layout.container.Card">Ext.layout.container.Card</see>) as its <see cref="Ext.layout.container.CardConfig.deferredRender">Ext.layout.container.Card.deferredRender</see> configuration value.
        /// <strong>Note</strong>: leaving deferredRender as true means that the content within an unactivated tab will not be available
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool deferredRender;
        /// <summary>
        /// The class added to each child item of this TabPanel.
        /// Defaults to: <c>&quot;x-tabpanel-child&quot;</c>
        /// </summary>
        public JsString itemCls;
        /// <summary>
        /// The maximum width for each tab.
        /// </summary>
        public JsNumber maxTabWidth;
        /// <summary>
        /// The minimum width for a tab in the tabBar.
        /// </summary>
        public JsNumber minTabWidth;
        /// <summary>
        /// True to not show the full background on the TabBar.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool plain;
        /// <summary>
        /// True to instruct each Panel added to the TabContainer to not render its header element.
        /// This is to ensure that the title of the panel does not appear twice.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool removePanelHeader;
        /// <summary>
        /// The position where the tab strip should be rendered. Can be top or bottom.
        /// Defaults to: <c>&quot;top&quot;</c>
        /// </summary>
        public JsString tabPosition;
        /// <summary>
        /// Internal reference to the docked TabBar
        /// </summary>
        public Ext.tab.Bar tabBar{get;set;}
        /// <summary>
        /// Unlink the removed child item from its (@link Ext.tab.Tab Tab}.
        /// If we're removing the currently active tab, activate the nearest one. The item is removed when we call super,
        /// so we can do preprocessing before then to find the card's index
        /// </summary>
        /// <param name="item">
        /// </param>
        /// <param name="autoDestroy">
        /// </param>
        private void doRemove(object item, object autoDestroy){}
        /// <summary>
        /// Returns the item that is currently active inside this TabPanel.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The currently active item.</p>
        /// </div>
        /// </returns>
        public Ext.Component getActiveTab(){return null;}
        /// <summary>
        /// Returns the Ext.tab.Bar currently used in this TabPanel
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.tab.Bar">Ext.tab.Bar</see></span><div><p>The TabBar</p>
        /// </div>
        /// </returns>
        public Ext.tab.Bar getTabBar(){return null;}
        /// <summary>
        /// Sets activeTab before item is shown.
        /// </summary>
        /// <param name="item">
        /// </param>
        private void onItemBeforeShow(object item){}
        /// <summary>
        /// Disable corresponding tab when item is enabled.
        /// </summary>
        /// <param name="item">
        /// </param>
        private void onItemDisable(object item){}
        /// <summary>
        /// Enable corresponding tab when item is enabled.
        /// </summary>
        /// <param name="item">
        /// </param>
        private void onItemEnable(object item){}
        /// <summary>
        /// Update the tab icon when panel icon has been set or changed.
        /// </summary>
        /// <param name="item">
        /// </param>
        /// <param name="newIcon">
        /// </param>
        private void onItemIconChange(object item, object newIcon){}
        /// <summary>
        /// Update the tab iconCls when panel iconCls has been set or changed.
        /// </summary>
        /// <param name="item">
        /// </param>
        /// <param name="newIconCls">
        /// </param>
        private void onItemIconClsChange(object item, object newIconCls){}
        /// <summary>
        /// Update the tab title when panel title has been set or changed.
        /// </summary>
        /// <param name="item">
        /// </param>
        /// <param name="newTitle">
        /// </param>
        private void onItemTitleChange(object item, object newTitle){}
        /// <summary>
        /// Makes the given card active. Makes it the visible card in the TabPanel's CardLayout and highlights the Tab.
        /// </summary>
        /// <param name="card"><p>The card to make active. Either an ID, index or the component itself.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The resulting active child Component. The call may have been vetoed, or otherwise
        /// modified by an event listener.</p>
        /// </div>
        /// </returns>
        public Ext.Component setActiveTab(object card){return null;}
        public Panel(Ext.tab.PanelConfig config){}
        public Panel(){}
        public Panel(params object[] args){}
    }
    #endregion
    #region PanelConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PanelConfig : Ext.panel.PanelConfig
    {
        /// <summary>
        /// The tab to activate initially. Either an ID, index or the tab component itself.
        /// </summary>
        public object activeTab;
        /// <summary>
        /// True by default to defer the rendering of child items to the browsers DOM
        /// until a tab is activated. False will render all contained items as soon as
        /// the layout is rendered. If there is a significant amount of content or a lot of
        /// heavy controls being rendered into panels that are not displayed by default, setting this to true might improve
        /// performance.
        /// The deferredRender property is internally passed to the layout manager for TabPanels (<see cref="Ext.layout.container.Card">Ext.layout.container.Card</see>) as its <see cref="Ext.layout.container.CardConfig.deferredRender">Ext.layout.container.Card.deferredRender</see> configuration value.
        /// <strong>Note</strong>: leaving deferredRender as true means that the content within an unactivated tab will not be available
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool deferredRender;
        /// <summary>
        /// The class added to each child item of this TabPanel.
        /// Defaults to: <c>&quot;x-tabpanel-child&quot;</c>
        /// </summary>
        public JsString itemCls;
        /// <summary>
        /// The maximum width for each tab.
        /// </summary>
        public JsNumber maxTabWidth;
        /// <summary>
        /// The minimum width for a tab in the tabBar.
        /// </summary>
        public JsNumber minTabWidth;
        /// <summary>
        /// True to not show the full background on the TabBar.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool plain;
        /// <summary>
        /// True to instruct each Panel added to the TabContainer to not render its header element.
        /// This is to ensure that the title of the panel does not appear twice.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool removePanelHeader;
        /// <summary>
        /// Optional configuration object for the internal Ext.tab.Bar.
        /// If present, this is passed straight through to the TabBar's constructor
        /// </summary>
        public JsObject tabBar;
        /// <summary>
        /// The position where the tab strip should be rendered. Can be top or bottom.
        /// Defaults to: <c>&quot;top&quot;</c>
        /// </summary>
        public JsString tabPosition;
        public PanelConfig(params object[] args){}
    }
    #endregion
    #region PanelEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PanelEvents : Ext.panel.PanelEvents
    {
        /// <summary>
        /// Fires before a tab change (activated by setActiveTab). Return false in any listener to cancel
        /// the tabchange
        /// </summary>
        /// <param name="tabPanel"><p>The TabPanel</p>
        /// </param>
        /// <param name="newCard"><p>The card that is about to be activated</p>
        /// </param>
        /// <param name="oldCard"><p>The card that is currently active</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforetabchange(Ext.tab.Panel tabPanel, Ext.Component newCard, Ext.Component oldCard, object eOpts){}
        /// <summary>
        /// Fires when a new tab has been activated (activated by setActiveTab).
        /// </summary>
        /// <param name="tabPanel"><p>The TabPanel</p>
        /// </param>
        /// <param name="newCard"><p>The newly activated item</p>
        /// </param>
        /// <param name="oldCard"><p>The previously active item</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void tabchange(Ext.tab.Panel tabPanel, Ext.Component newCard, Ext.Component oldCard, object eOpts){}
        public PanelEvents(params object[] args){}
    }
    #endregion
}
