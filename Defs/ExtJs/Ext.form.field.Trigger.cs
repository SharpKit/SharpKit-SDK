//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region Trigger
    /// <inheritdocs />
    /// <summary>
    /// <p>Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
    /// The trigger has no default action, so you must assign a function to implement the trigger click handler by overriding
    /// <see cref="Ext.form.field.Trigger.onTriggerClick">onTriggerClick</see>. You can create a Trigger field directly, as it renders exactly like a combobox for which you
    /// can provide a custom implementation.</p>
    /// <p>For example:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('Ext.ux.CustomTrigger', {
    /// extend: '<see cref="Ext.form.field.Trigger">Ext.form.field.Trigger</see>',
    /// alias: 'widget.customtrigger',
    /// // override onTriggerClick
    /// onTriggerClick: function() {
    /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Status', 'You clicked my trigger!');
    /// }
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.FormPanel</see>', {
    /// title: 'Form with TriggerField',
    /// bodyPadding: 5,
    /// width: 350,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// items:[{
    /// xtype: 'customtrigger',
    /// fieldLabel: 'Sample Trigger',
    /// emptyText: 'click the trigger'
    /// }]
    /// });
    /// </code></pre>
    /// <p>However, in general you will most likely want to use Trigger as the base class for a reusable component.
    /// <see cref="Ext.form.field.Date">Ext.form.field.Date</see> and <see cref="Ext.form.field.ComboBox">Ext.form.field.ComboBox</see> are perfect examples of this.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Trigger : Ext.form.field.Text
    {
        /// <summary>
        /// false to prevent the user from typing text directly into the field; the field can only have its value set via an
        /// action invoked by the trigger.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool editable;
        /// <summary>
        /// true to hide the trigger element and display only the base text field
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideTrigger;
        /// <summary>
        /// true to attach a click repeater to the trigger.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool repeatTriggerClick;
        /// <summary>
        /// The base CSS class that is always added to the trigger button. The triggerCls will be appended in
        /// addition to this class.
        /// Defaults to: <c>&quot;x-form-trigger&quot;</c>
        /// </summary>
        public JsString triggerBaseCls;
        /// <summary>
        /// An additional CSS class used to style the trigger button. The trigger will always get the triggerBaseCls
        /// by default and triggerCls will be appended if specified.
        /// </summary>
        public JsString triggerCls;
        /// <summary>
        /// The CSS class that is added to the text field when component is read-only or not editable.
        /// Defaults to: <c>&quot;x-trigger-noedit&quot;</c>
        /// </summary>
        public JsString triggerNoEditCls;
        /// <summary>
        /// The CSS class that is added to the div wrapping the trigger button(s).
        /// Defaults to: <c>&quot;x-form-trigger-wrap&quot;</c>
        /// </summary>
        public JsString triggerWrapCls;
        /// <summary>
        /// A reference to the TD element wrapping the input element. Only set after the field has been rendered.
        /// </summary>
        public Ext.dom.Element inputCell{get;set;}
        /// <summary>
        /// A composite of all the trigger button elements. Only set after the field has been rendered.
        /// </summary>
        public Ext.dom.CompositeElement triggerEl{get;set;}
        /// <summary>
        /// Width of the trigger element. Unless set explicitly, it will be
        /// automatically calculated through creating a temporary element
        /// on page. (That will be done just once per app run.)
        /// </summary>
        private JsNumber triggerWidth{get;set;}
        /// <summary>
        /// A reference to the TABLE element which encapsulates the input field and all trigger button(s). Only set after the field has been rendered.
        /// </summary>
        public Ext.dom.Element triggerWrap{get;set;}
        /// <summary>
        /// Returns a set of flags that describe the trigger state. These are just used to easily
        /// determine if the DOM is out-of-sync with the component's properties.
        /// </summary>
        private void getTriggerStateFlags(){}
        /// <summary>
        /// Get the total width of the trigger button area.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The total trigger width</p>
        /// </div>
        /// </returns>
        public JsNumber getTriggerWidth(){return null;}
        /// <summary>
        /// The default blur handling must not occur for a TriggerField, implementing this template method as emptyFn disables that.
        /// Instead the tab key is monitored, and the superclass's onBlur is called when tab is detected
        /// </summary>
        protected virtual void onBlur(){}
        /// <summary>
        /// The function that should handle the trigger's click event. This method does nothing by default until overridden
        /// by an implementing function. See Ext.form.field.ComboBox and Ext.form.field.Date for sample implementations.
        /// </summary>
        /// <param name="e">
        /// </param>
        protected void onTriggerClick(EventObject e){}
        /// <summary>
        /// Sets the editable state of this field. This method is the runtime equivalent of setting the 'editable' config
        /// option at config time.
        /// </summary>
        /// <param name="editable"><p>True to allow the user to directly edit the field text. If false is passed, the user
        /// will only be able to modify the field using the trigger. Will also add a click event to the text field which
        /// will call the trigger.</p>
        /// </param>
        public void setEditable(bool editable){}
        public Trigger(Ext.form.field.TriggerConfig config){}
        public Trigger(){}
        public Trigger(params object[] args){}
    }
    #endregion
    #region TriggerConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TriggerConfig : Ext.form.field.TextConfig
    {
        /// <summary>
        /// false to prevent the user from typing text directly into the field; the field can only have its value set via an
        /// action invoked by the trigger.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool editable;
        /// <summary>
        /// true to hide the trigger element and display only the base text field
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideTrigger;
        /// <summary>
        /// true to attach a click repeater to the trigger.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool repeatTriggerClick;
        /// <summary>
        /// The base CSS class that is always added to the trigger button. The triggerCls will be appended in
        /// addition to this class.
        /// Defaults to: <c>&quot;x-form-trigger&quot;</c>
        /// </summary>
        public JsString triggerBaseCls;
        /// <summary>
        /// An additional CSS class used to style the trigger button. The trigger will always get the triggerBaseCls
        /// by default and triggerCls will be appended if specified.
        /// </summary>
        public JsString triggerCls;
        /// <summary>
        /// The CSS class that is added to the text field when component is read-only or not editable.
        /// Defaults to: <c>&quot;x-trigger-noedit&quot;</c>
        /// </summary>
        public JsString triggerNoEditCls;
        /// <summary>
        /// The CSS class that is added to the div wrapping the trigger button(s).
        /// Defaults to: <c>&quot;x-form-trigger-wrap&quot;</c>
        /// </summary>
        public JsString triggerWrapCls;
        public TriggerConfig(params object[] args){}
    }
    #endregion
    #region TriggerEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TriggerEvents : Ext.form.field.TextEvents
    {
        public TriggerEvents(params object[] args){}
    }
    #endregion
}
