//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.tip
{
    #region ToolTip
    /// <inheritdocs />
    /// <summary>
    /// <p>ToolTip is a <see cref="Ext.tip.Tip">Ext.tip.Tip</see> implementation that handles the common case of displaying a
    /// tooltip when hovering over a certain element or elements on the page. It allows fine-grained
    /// control over the tooltip's alignment relative to the target element or mouse, and the timing
    /// of when it is automatically shown and hidden.</p>
    /// <p>This implementation does <strong>not</strong> have a built-in method of automatically populating the tooltip's
    /// text based on the target element; you must either configure a fixed <see cref="Ext.tip.ToolTipConfig.html">html</see> value for each
    /// ToolTip instance, or implement custom logic (e.g. in a <see cref="Ext.tip.ToolTipEvents.beforeshow">beforeshow</see> event listener) to
    /// generate the appropriate tooltip content on the fly. See <see cref="Ext.tip.QuickTip">Ext.tip.QuickTip</see> for a more
    /// convenient way of automatically populating and configuring a tooltip based on specific DOM
    /// attributes of each target element.</p>
    /// <h1>Basic Example</h1>
    /// <pre><code>var tip = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tip.ToolTip">Ext.tip.ToolTip</see>', {
    /// target: 'clearButton',
    /// html: 'Press this button to clear the form'
    /// });
    /// </code></pre>
    /// <p><p><i></i></p></p>
    /// <h1>Delegation</h1>
    /// <p>In addition to attaching a ToolTip to a single element, you can also use delegation to attach
    /// one ToolTip to many elements under a common parent. This is more efficient than creating many
    /// ToolTip instances. To do this, point the <see cref="Ext.tip.ToolTipConfig.target">target</see> config to a common ancestor of all the
    /// elements, and then set the <see cref="Ext.tip.ToolTipConfig.delegate">delegate</see> config to a CSS selector that will select all the
    /// appropriate sub-elements.</p>
    /// <p>When using delegation, it is likely that you will want to programmatically change the content
    /// of the ToolTip based on each delegate element; you can do this by implementing a custom
    /// listener for the <see cref="Ext.tip.ToolTipEvents.beforeshow">beforeshow</see> event. Example:</p>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.ArrayStore">Ext.data.ArrayStore</see>', {
    /// fields: ['company', 'price', 'change'],
    /// data: [
    /// ['3m Co',                               71.72, 0.02],
    /// ['Alcoa Inc',                           29.01, 0.42],
    /// ['Altria Group Inc',                    83.81, 0.28],
    /// ['American Express Company',            52.55, 0.01],
    /// ['American International Group, Inc.',  64.13, 0.31],
    /// ['AT&amp;T Inc.',                           31.61, -0.48]
    /// ]
    /// });
    /// var grid = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
    /// title: 'Array Grid',
    /// store: store,
    /// columns: [
    /// {text: 'Company', flex: 1, dataIndex: 'company'},
    /// {text: 'Price', width: 75, dataIndex: 'price'},
    /// {text: 'Change', width: 75, dataIndex: 'change'}
    /// ],
    /// height: 200,
    /// width: 400,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// grid.getView().on('render', function(view) {
    /// view.tip = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.tip.ToolTip">Ext.tip.ToolTip</see>', {
    /// // The overall target element.
    /// target: view.el,
    /// // Each grid row causes its own separate show and hide.
    /// delegate: view.itemSelector,
    /// // Moving within the row should not hide the tip.
    /// trackMouse: true,
    /// // Render immediately so that tip.body can be referenced prior to the first show.
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// listeners: {
    /// // Change content dynamically depending on which element triggered the show.
    /// beforeshow: function updateTipBody(tip) {
    /// tip.update('Over company "' + view.getRecord(tip.triggerElement).get('company') + '"');
    /// }
    /// }
    /// });
    /// });
    /// </code></pre>
    /// <p><p><i></i></p></p>
    /// <h1>Alignment</h1>
    /// <p>The following configuration properties allow control over how the ToolTip is aligned relative to
    /// the target element and/or mouse pointer:</p>
    /// <ul>
    /// <li><see cref="Ext.tip.ToolTipConfig.anchor">anchor</see></li>
    /// <li><see cref="Ext.tip.ToolTipConfig.anchorToTarget">anchorToTarget</see></li>
    /// <li><see cref="Ext.tip.ToolTipConfig.anchorOffset">anchorOffset</see></li>
    /// <li><see cref="Ext.tip.ToolTipConfig.trackMouse">trackMouse</see></li>
    /// <li><see cref="Ext.tip.ToolTipConfig.mouseOffset">mouseOffset</see></li>
    /// </ul>
    /// <h1>Showing/Hiding</h1>
    /// <p>The following configuration properties allow control over how and when the ToolTip is automatically
    /// shown and hidden:</p>
    /// <ul>
    /// <li><see cref="Ext.tip.ToolTipConfig.autoHide">autoHide</see></li>
    /// <li><see cref="Ext.tip.ToolTipConfig.showDelay">showDelay</see></li>
    /// <li><see cref="Ext.tip.ToolTipConfig.hideDelay">hideDelay</see></li>
    /// <li><see cref="Ext.tip.ToolTipConfig.dismissDelay">dismissDelay</see></li>
    /// </ul>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class ToolTip : Ext.tip.Tip
    {
        /// <summary>
        /// If specified, indicates that the tip should be anchored to a
        /// particular side of the target element or mouse pointer ("top", "right", "bottom",
        /// or "left"), with an arrow pointing back at the target or mouse pointer. If
        /// constrainPosition is enabled, this will be used as a preferred value
        /// only and may be flipped as needed.
        /// </summary>
        public JsString anchor;
        /// <summary>
        /// A numeric pixel value used to offset the default position of the anchor arrow.  When the anchor
        /// position is on the top or bottom of the tooltip, anchorOffset will be used as a horizontal offset.
        /// Likewise, when the anchor position is on the left or right side, anchorOffset will be used as
        /// a vertical offset.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber anchorOffset;
        /// <summary>
        /// True to anchor the tooltip to the target element, false to anchor it relative to the mouse coordinates.
        /// When anchorToTarget is true, use defaultAlign to control tooltip alignment to the
        /// target element.  When anchorToTarget is false, use anchor instead to control alignment.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool anchorToTarget;
        /// <summary>
        /// True to automatically hide the tooltip after the
        /// mouse exits the target element or after the dismissDelay
        /// has expired if set.  If closable = true
        /// a close tool button will be rendered into the tooltip header.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoHide;
        /// <summary>
        /// A DomQuery selector which allows selection of individual elements within the
        /// target element to trigger showing and hiding the ToolTip as the mouse moves within the
        /// target.
        /// When specified, the child element of the target which caused a show event is placed into the
        /// <c><see cref="Ext.tip.ToolTip.triggerElement">triggerElement</see></c> property before the ToolTip is shown.
        /// This may be useful when a Component has regular, repeating elements in it, each of which need a
        /// ToolTip which contains information specific to that element.
        /// See the delegate example in class documentation of <see cref="Ext.tip.ToolTip">Ext.tip.ToolTip</see>.
        /// </summary>
        public JsString @delegate;
        /// <summary>
        /// Delay in milliseconds before the tooltip automatically hides. To disable automatic hiding, set
        /// dismissDelay = 0.
        /// Defaults to: <c>5000</c>
        /// </summary>
        public JsNumber dismissDelay;
        /// <summary>
        /// Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides.
        /// Set to 0 for the tooltip to hide immediately.
        /// Defaults to: <c>200</c>
        /// </summary>
        public JsNumber hideDelay;
        /// <summary>
        /// An XY offset from the mouse position where the tooltip should be shown.
        /// Defaults to: <c>[15, 18]</c>
        /// </summary>
        public JsNumber mouseOffset;
        /// <summary>
        /// Delay in milliseconds before the tooltip displays after the mouse enters the target element.
        /// Defaults to: <c>500</c>
        /// </summary>
        public JsNumber showDelay;
        /// <summary>
        /// The target element or string id to monitor for mouseover events to trigger
        /// showing this ToolTip.
        /// </summary>
        public object target;
        /// <summary>
        /// True to have the tooltip follow the mouse as it moves over the target element.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool trackMouse;
        /// <summary>
        /// When a ToolTip is configured with the delegate
        /// option to cause selected child elements of the target
        /// Element to each trigger a separate show event, this property is set to
        /// the DOM element which triggered the show.
        /// </summary>
        public object triggerElement{get;set;}
        /// <summary>
        /// Hides this tooltip if visible.
        /// Overrides: <see cref="Ext.Component.hide">Ext.Component.hide</see>
        /// </summary>
        public void hide(){}
        /// <summary>
        /// Binds this ToolTip to the specified element. The tooltip will be displayed when the mouse moves over the element.
        /// </summary>
        /// <param name="t"><p>The Element, HtmlElement, or ID of an element to bind to</p>
        /// </param>
        public void setTarget(object t){}
        /// <summary>
        /// Shows this tooltip at the current event target XY position.
        /// Overrides: <see cref="Ext.Component.show">Ext.Component.show</see>
        /// </summary>
        public void show(){}
        public ToolTip(ToolTipConfig config){}
        public ToolTip(){}
        public ToolTip(params object[] args){}
    }
    #endregion
    #region ToolTipConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ToolTipConfig : Ext.tip.TipConfig
    {
        /// <summary>
        /// If specified, indicates that the tip should be anchored to a
        /// particular side of the target element or mouse pointer ("top", "right", "bottom",
        /// or "left"), with an arrow pointing back at the target or mouse pointer. If
        /// constrainPosition is enabled, this will be used as a preferred value
        /// only and may be flipped as needed.
        /// </summary>
        public JsString anchor;
        /// <summary>
        /// A numeric pixel value used to offset the default position of the anchor arrow.  When the anchor
        /// position is on the top or bottom of the tooltip, anchorOffset will be used as a horizontal offset.
        /// Likewise, when the anchor position is on the left or right side, anchorOffset will be used as
        /// a vertical offset.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber anchorOffset;
        /// <summary>
        /// True to anchor the tooltip to the target element, false to anchor it relative to the mouse coordinates.
        /// When anchorToTarget is true, use defaultAlign to control tooltip alignment to the
        /// target element.  When anchorToTarget is false, use anchor instead to control alignment.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool anchorToTarget;
        /// <summary>
        /// True to automatically hide the tooltip after the
        /// mouse exits the target element or after the dismissDelay
        /// has expired if set.  If closable = true
        /// a close tool button will be rendered into the tooltip header.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool autoHide;
        /// <summary>
        /// A DomQuery selector which allows selection of individual elements within the
        /// target element to trigger showing and hiding the ToolTip as the mouse moves within the
        /// target.
        /// When specified, the child element of the target which caused a show event is placed into the
        /// <c><see cref="Ext.tip.ToolTip.triggerElement">triggerElement</see></c> property before the ToolTip is shown.
        /// This may be useful when a Component has regular, repeating elements in it, each of which need a
        /// ToolTip which contains information specific to that element.
        /// See the delegate example in class documentation of <see cref="Ext.tip.ToolTip">Ext.tip.ToolTip</see>.
        /// </summary>
        public JsString @delegate;
        /// <summary>
        /// Delay in milliseconds before the tooltip automatically hides. To disable automatic hiding, set
        /// dismissDelay = 0.
        /// Defaults to: <c>5000</c>
        /// </summary>
        public JsNumber dismissDelay;
        /// <summary>
        /// Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides.
        /// Set to 0 for the tooltip to hide immediately.
        /// Defaults to: <c>200</c>
        /// </summary>
        public JsNumber hideDelay;
        /// <summary>
        /// An XY offset from the mouse position where the tooltip should be shown.
        /// Defaults to: <c>[15, 18]</c>
        /// </summary>
        public JsNumber mouseOffset;
        /// <summary>
        /// Delay in milliseconds before the tooltip displays after the mouse enters the target element.
        /// Defaults to: <c>500</c>
        /// </summary>
        public JsNumber showDelay;
        /// <summary>
        /// The target element or string id to monitor for mouseover events to trigger
        /// showing this ToolTip.
        /// </summary>
        public object target;
        /// <summary>
        /// True to have the tooltip follow the mouse as it moves over the target element.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool trackMouse;
        public ToolTipConfig(params object[] args){}
    }
    #endregion
    #region ToolTipEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ToolTipEvents : Ext.tip.TipEvents
    {
        public ToolTipEvents(params object[] args){}
    }
    #endregion
}
