//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.grid.column
{
    #region Column
    /// <inheritdocs />
    /// <summary>
    /// <p>This class specifies the definition for a column inside a <see cref="Ext.grid.Panel">Ext.grid.Panel</see>. It encompasses
    /// both the grid header configuration as well as displaying data within the grid itself. If the
    /// <see cref="Ext.grid.column.ColumnConfig.columns">columns</see> configuration is specified, this column will become a column group and can
    /// contain other columns inside. In general, this class will not be created directly, rather
    /// an array of column configurations will be passed to the grid:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// storeId:'employeeStore',
    /// fields:['firstname', 'lastname', 'seniority', 'dep', 'hired'],
    /// data:[
    /// {firstname:"Michael", lastname:"Scott", seniority:7, dep:"Management", hired:"01/10/2004"},
    /// {firstname:"Dwight", lastname:"Schrute", seniority:2, dep:"Sales", hired:"04/01/2004"},
    /// {firstname:"Jim", lastname:"Halpert", seniority:3, dep:"Sales", hired:"02/22/2006"},
    /// {firstname:"Kevin", lastname:"Malone", seniority:4, dep:"Accounting", hired:"06/10/2007"},
    /// {firstname:"Angela", lastname:"Martin", seniority:5, dep:"Accounting", hired:"10/21/2008"}
    /// ]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
    /// title: 'Column Demo',
    /// store: <see cref="Ext.data.StoreManager.lookup">Ext.data.StoreManager.lookup</see>('employeeStore'),
    /// columns: [
    /// {text: 'First Name',  dataIndex:'firstname'},
    /// {text: 'Last Name',  dataIndex:'lastname'},
    /// {text: 'Hired Month',  dataIndex:'hired', xtype:'datecolumn', format:'M'},
    /// {text: 'Department (Yrs)', xtype:'templatecolumn', tpl:'{dep} ({seniority})'}
    /// ],
    /// width: 400,
    /// forceFit: true,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <h1>Convenience Subclasses</h1>
    /// <p>There are several column subclasses that provide default rendering for various data types</p>
    /// <ul>
    /// <li><see cref="Ext.grid.column.Action">Ext.grid.column.Action</see>: Renders icons that can respond to click events inline</li>
    /// <li><see cref="Ext.grid.column.bool">Ext.grid.column.Boolean</see>: Renders for boolean values</li>
    /// <li><see cref="Ext.grid.column.Date">Ext.grid.column.Date</see>: Renders for date values</li>
    /// <li><see cref="Ext.grid.column.Number">Ext.grid.column.Number</see>: Renders for numeric values</li>
    /// <li><see cref="Ext.grid.column.Template">Ext.grid.column.Template</see>: Renders a value using an <see cref="Ext.XTemplate">Ext.XTemplate</see> using the record data</li>
    /// </ul>
    /// <h1>Setting Sizes</h1>
    /// <p>The columns are laid out by a <see cref="Ext.layout.container.HBox">Ext.layout.container.HBox</see> layout, so a column can either
    /// be given an explicit width value or a flex configuration. If no width is specified the grid will
    /// automatically the size the column to 100px. For column groups, the size is calculated by measuring
    /// the width of the child columns, so a width option should not be specified in that case.</p>
    /// <h1>Header Options</h1>
    /// <ul>
    /// <li><see cref="Ext.grid.column.ColumnConfig.text">text</see>: Sets the header text for the column</li>
    /// <li><see cref="Ext.grid.column.ColumnConfig.sortable">sortable</see>: Specifies whether the column can be sorted by clicking the header or using the column menu</li>
    /// <li><see cref="Ext.grid.column.ColumnConfig.hideable">hideable</see>: Specifies whether the column can be hidden using the column menu</li>
    /// <li><see cref="Ext.grid.column.ColumnConfig.menuDisabled">menuDisabled</see>: Disables the column header menu</li>
    /// <li><see cref="Ext.grid.column.ColumnConfig.draggable">draggable</see>: Specifies whether the column header can be reordered by dragging</li>
    /// <li><see cref="Ext.grid.column.ColumnConfig.groupable">groupable</see>: Specifies whether the grid can be grouped by the column dataIndex. See also <see cref="Ext.grid.feature.Grouping">Ext.grid.feature.Grouping</see></li>
    /// </ul>
    /// <h1>Data Options</h1>
    /// <ul>
    /// <li><see cref="Ext.grid.column.ColumnConfig.dataIndex">dataIndex</see>: The dataIndex is the field in the underlying <see cref="Ext.data.Store">Ext.data.Store</see> to use as the value for the column.</li>
    /// <li><see cref="Ext.grid.column.ColumnConfig.renderer">renderer</see>: Allows the underlying store value to be transformed before being displayed in the grid</li>
    /// </ul>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Column : Ext.grid.header.Container
    {
        /// <summary>
        /// Sets the alignment of the header and rendered columns.
        /// Possible values are: 'left', 'center', and 'right'.
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString align;
        /// <summary>
        /// An optional array of sub-column definitions. This column becomes a group, and houses the columns defined in the
        /// columns config.
        /// Group columns may not be sortable. But they may be hideable and moveable. And you may move headers into and out
        /// of a group. Note that if all sub columns are dragged out of a group, the group is destroyed.
        /// </summary>
        public JsObject columns;
        /// <summary>
        /// The name of the field in the grid's Ext.data.Store's Ext.data.Model definition from
        /// which to draw the column's value. Required.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString dataIndex;
        /// <summary>
        /// A renderer to be used in conjunction with RowEditing. This renderer is used to
        /// display a custom value for non-editable fields.
        /// Defaults to: <c>false</c>
        /// </summary>
        public System.Delegate editRenderer;
        /// <summary>
        /// An optional xtype or config object for a Field to use for editing.
        /// Only applicable if the grid is using an Editing plugin.
        /// </summary>
        public object editor;
        /// <summary>
        /// The text to diplay in empty cells (cells with a value of undefined, null, or '').
        /// Defaults to <c>&amp;#160;</c> aka <c>&amp;nbsp;</c>.
        /// </summary>
        public JsString emptyCellText;
        /// <summary>
        /// Alias for editor.
        /// <p>This cfg has been <strong>deprecated</strong> since 4.0.5</p>
        /// <p>Use <see cref="Ext.grid.column.ColumnConfig.editor">editor</see> instead.</p>
        /// </summary>
        public object field;
        /// <summary>
        /// True to prevent the column from being resizable.
        /// <p>This cfg has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use <see cref="Ext.grid.column.ColumnConfig.resizable">resizable</see> instead.</p>
        /// </summary>
        public bool @fixed;
        /// <summary>
        /// If the grid uses a Ext.grid.feature.Grouping, this option may be used to disable the header menu
        /// item to group by the column selected. By default, the header menu group option is enabled. Set to false to
        /// disable (but still show) the group option in the header menu for the column.
        /// </summary>
        public bool groupable;
        /// <summary>
        /// The header text.
        /// <p>This cfg has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use <see cref="Ext.grid.column.ColumnConfig.text">text</see> instead.</p>
        /// </summary>
        public JsString header;
        /// <summary>
        /// False to prevent the user from hiding this column.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool hideable;
        /// <summary>
        /// True to lock this column in place.  Implicitly enables locking on the grid.
        /// See also Ext.grid.Panel.enableLocking.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool locked;
        /// <summary>
        /// True to disable the column header menu containing sort/hide options.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool menuDisabled;
        /// <summary>
        /// The text to render in the column visibility selection menu for this column.  If not
        /// specified, will default to the text value.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString menuText;
        /// <summary>
        /// A renderer is an 'interceptor' method which can be used to transform data (value, appearance, etc.)
        /// before it is rendered. Example:
        /// <code>{
        /// renderer: function(value){
        /// if (value === 1) {
        /// return '1 person';
        /// }
        /// return value + ' people';
        /// }
        /// }
        /// </code>
        /// Additionally a string naming an <see cref="Ext.util.Format">Ext.util.Format</see> method can be passed:
        /// <code>{
        /// renderer: 'uppercase'
        /// }
        /// </code>
        /// Defaults to: <c>false</c><li><span>value</span> : <see cref="Object">Object</see><div><p>The data value for the current cell</p>
        /// </div></li><li><span>metaData</span> : <see cref="Object">Object</see><div><p>A collection of metadata about the current cell; can be used or modified
        /// by the renderer. Recognized properties are: tdCls, tdAttr, and style.</p>
        /// </div></li><li><span>record</span> : <see cref="Ext.data.Model">Ext.data.Model</see><div><p>The record for the current row</p>
        /// </div></li><li><span>rowIndex</span> : <see cref="Number">Number</see><div><p>The index of the current row</p>
        /// </div></li><li><span>colIndex</span> : <see cref="Number">Number</see><div><p>The index of the current column</p>
        /// </div></li><li><span>store</span> : <see cref="Ext.data.Store">Ext.data.Store</see><div><p>The data store</p>
        /// </div></li><li><span>view</span> : <see cref="Ext.view.View">Ext.view.View</see><div><p>The current view</p>
        /// </div></li>
        /// </summary>
        public object renderer;
        /// <summary>
        /// The scope to use when calling the renderer function.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// A CSS class names to apply to the table cells for this column.
        /// </summary>
        public JsString tdCls;
        /// <summary>
        /// The header text to be used as innerHTML (html tags are accepted) to display in the Grid.
        /// Note: to have a clickable header with no text displayed you can use the default of &amp;#160; aka &amp;nbsp;.
        /// Defaults to: <c>&quot;&amp;#160;&quot;</c>
        /// </summary>
        public JsString text;
        /// <summary>
        /// A tooltip to display for this column header
        /// </summary>
        public JsString tooltip;
        /// <summary>
        /// The type of tooltip to use. Either 'qtip' for QuickTips or 'title' for title attribute.
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString tooltipType;
        /// <summary>
        /// Set in this class to identify, at runtime, instances which are not instances of the
        /// HeaderContainer base class, but are in fact, the subclass: Header.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isHeader{get;set;}
        /// <summary>
        /// Element that contains the text in column header.
        /// </summary>
        public Ext.dom.Element textEl{get;set;}
        /// <summary>
        /// Element that acts as button for column header dropdown menu.
        /// </summary>
        public Ext.dom.Element triggerEl{get;set;}
        /// <summary>
        /// When defined this will take precedence over the renderer config.
        /// This is meant to be defined in subclasses that wish to supply their own renderer.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected virtual void defaultRenderer(){}
        /// <summary>
        /// Retrieves the editing field for editing associated with this header. Returns false if there is no field
        /// associated with the Header the method will return false. If the field has not been instantiated it will be
        /// created. Note: These methods only has an implementation if a Editing plugin has been enabled on the grid.
        /// </summary>
        /// <param name="record"><p>The <see cref="Ext.data.Model">Model</see> instance being edited.</p>
        /// </param>
        /// <param name="defaultField"><p>An object representing a default field to be created</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.field.Field">Ext.form.field.Field</see></span><div><p>field</p>
        /// </div>
        /// </returns>
        public Ext.form.field.Field getEditor(object record, object defaultField){return null;}
        /// <summary>
        /// Returns the index of this column only if this column is a base level Column. If it
        /// is a group column, it returns false.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getIndex(){return null;}
        /// <summary>
        /// Returns the parameter to sort upon when sorting this header. By default this returns the dataIndex and will not
        /// need to be overriden in most cases.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public JsString getSortParam(){return null;}
        /// <summary>
        /// Returns the index of this column in the list of visible columns only if this column is a base level Column. If it
        /// is a group column, it returns false.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div>
        /// </div>
        /// </returns>
        public JsNumber getVisibleIndex(){return null;}
        /// <summary>
        /// Double click
        /// </summary>
        /// <param name="e">
        /// </param>
        /// <param name="t">
        /// </param>
        private void onElDblClick(object e, object t){}
        /// <summary>
        /// Process UI events from the view. The owning TablePanel calls this method, relaying events from the TableView
        /// </summary>
        /// <param name="type"><p>Event type, eg 'click'</p>
        /// </param>
        /// <param name="view"><p>TableView Component</p>
        /// </param>
        /// <param name="cell"><p>Cell HtmlElement the event took place within</p>
        /// </param>
        /// <param name="recordIndex"><p>Index of the associated Store Model (-1 if none)</p>
        /// </param>
        /// <param name="cellIndex"><p>Cell index within the row</p>
        /// </param>
        /// <param name="e"><p>Original event</p>
        /// </param>
        private void processEvent(JsString type, Ext.view.Table view, object cell, JsNumber recordIndex, JsNumber cellIndex, EventObject e){}
        /// <summary>
        /// Sets the form field to be used for editing. Note: This method only has an implementation if an Editing plugin has
        /// been enabled on the grid.
        /// </summary>
        /// <param name="field"><p>An object representing a field to be created. If no xtype is specified a 'textfield' is
        /// assumed.</p>
        /// </param>
        public void setEditor(object field){}
        /// <summary>
        /// Sets the header text for this Column.
        /// </summary>
        /// <param name="text"><p>The header to display on this Column.</p>
        /// </param>
        public void setText(JsString text){}
        public Column(Ext.grid.column.ColumnConfig config){}
        public Column(){}
        public Column(params object[] args){}
    }
    #endregion
    #region ColumnConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ColumnConfig : Ext.grid.header.ContainerConfig
    {
        /// <summary>
        /// Sets the alignment of the header and rendered columns.
        /// Possible values are: 'left', 'center', and 'right'.
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString align;
        /// <summary>
        /// An optional array of sub-column definitions. This column becomes a group, and houses the columns defined in the
        /// columns config.
        /// Group columns may not be sortable. But they may be hideable and moveable. And you may move headers into and out
        /// of a group. Note that if all sub columns are dragged out of a group, the group is destroyed.
        /// </summary>
        public JsObject columns;
        /// <summary>
        /// The name of the field in the grid's Ext.data.Store's Ext.data.Model definition from
        /// which to draw the column's value. Required.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString dataIndex;
        /// <summary>
        /// A renderer to be used in conjunction with RowEditing. This renderer is used to
        /// display a custom value for non-editable fields.
        /// Defaults to: <c>false</c>
        /// </summary>
        public System.Delegate editRenderer;
        /// <summary>
        /// An optional xtype or config object for a Field to use for editing.
        /// Only applicable if the grid is using an Editing plugin.
        /// </summary>
        public object editor;
        /// <summary>
        /// The text to diplay in empty cells (cells with a value of undefined, null, or '').
        /// Defaults to <c>&amp;#160;</c> aka <c>&amp;nbsp;</c>.
        /// </summary>
        public JsString emptyCellText;
        /// <summary>
        /// Alias for editor.
        /// <p>This cfg has been <strong>deprecated</strong> since 4.0.5</p>
        /// <p>Use <see cref="Ext.grid.column.ColumnConfig.editor">editor</see> instead.</p>
        /// </summary>
        public object field;
        /// <summary>
        /// True to prevent the column from being resizable.
        /// <p>This cfg has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use <see cref="Ext.grid.column.ColumnConfig.resizable">resizable</see> instead.</p>
        /// </summary>
        public bool @fixed;
        /// <summary>
        /// If the grid uses a Ext.grid.feature.Grouping, this option may be used to disable the header menu
        /// item to group by the column selected. By default, the header menu group option is enabled. Set to false to
        /// disable (but still show) the group option in the header menu for the column.
        /// </summary>
        public bool groupable;
        /// <summary>
        /// The header text.
        /// <p>This cfg has been <strong>deprecated</strong> since 4.0</p>
        /// <p>Use <see cref="Ext.grid.column.ColumnConfig.text">text</see> instead.</p>
        /// </summary>
        public JsString header;
        /// <summary>
        /// False to prevent the user from hiding this column.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool hideable;
        /// <summary>
        /// True to lock this column in place.  Implicitly enables locking on the grid.
        /// See also Ext.grid.Panel.enableLocking.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool locked;
        /// <summary>
        /// True to disable the column header menu containing sort/hide options.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool menuDisabled;
        /// <summary>
        /// The text to render in the column visibility selection menu for this column.  If not
        /// specified, will default to the text value.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString menuText;
        /// <summary>
        /// A renderer is an 'interceptor' method which can be used to transform data (value, appearance, etc.)
        /// before it is rendered. Example:
        /// <code>{
        /// renderer: function(value){
        /// if (value === 1) {
        /// return '1 person';
        /// }
        /// return value + ' people';
        /// }
        /// }
        /// </code>
        /// Additionally a string naming an <see cref="Ext.util.Format">Ext.util.Format</see> method can be passed:
        /// <code>{
        /// renderer: 'uppercase'
        /// }
        /// </code>
        /// Defaults to: <c>false</c><li><span>value</span> : <see cref="Object">Object</see><div><p>The data value for the current cell</p>
        /// </div></li><li><span>metaData</span> : <see cref="Object">Object</see><div><p>A collection of metadata about the current cell; can be used or modified
        /// by the renderer. Recognized properties are: tdCls, tdAttr, and style.</p>
        /// </div></li><li><span>record</span> : <see cref="Ext.data.Model">Ext.data.Model</see><div><p>The record for the current row</p>
        /// </div></li><li><span>rowIndex</span> : <see cref="Number">Number</see><div><p>The index of the current row</p>
        /// </div></li><li><span>colIndex</span> : <see cref="Number">Number</see><div><p>The index of the current column</p>
        /// </div></li><li><span>store</span> : <see cref="Ext.data.Store">Ext.data.Store</see><div><p>The data store</p>
        /// </div></li><li><span>view</span> : <see cref="Ext.view.View">Ext.view.View</see><div><p>The current view</p>
        /// </div></li>
        /// </summary>
        public object renderer;
        /// <summary>
        /// The scope to use when calling the renderer function.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// A CSS class names to apply to the table cells for this column.
        /// </summary>
        public JsString tdCls;
        /// <summary>
        /// The header text to be used as innerHTML (html tags are accepted) to display in the Grid.
        /// Note: to have a clickable header with no text displayed you can use the default of &amp;#160; aka &amp;nbsp;.
        /// Defaults to: <c>&quot;&amp;#160;&quot;</c>
        /// </summary>
        public JsString text;
        /// <summary>
        /// A tooltip to display for this column header
        /// </summary>
        public JsString tooltip;
        /// <summary>
        /// The type of tooltip to use. Either 'qtip' for QuickTips or 'title' for title attribute.
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString tooltipType;
        public ColumnConfig(params object[] args){}
    }
    #endregion
    #region ColumnEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ColumnEvents : Ext.grid.header.ContainerEvents
    {
        public ColumnEvents(params object[] args){}
    }
    #endregion
}
