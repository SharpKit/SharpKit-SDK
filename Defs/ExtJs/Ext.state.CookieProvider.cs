//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.state
{
    #region CookieProvider
    /// <inheritdocs />
    /// <summary>
    /// <p>A Provider implementation which saves and retrieves state via cookies. The CookieProvider supports the usual cookie
    /// options, such as:</p>
    /// <ul>
    /// <li><see cref="Ext.state.CookieProviderConfig.path">path</see></li>
    /// <li><see cref="Ext.state.CookieProviderConfig.expires">expires</see></li>
    /// <li><see cref="Ext.state.CookieProviderConfig.domain">domain</see></li>
    /// <li><see cref="Ext.state.CookieProviderConfig.secure">secure</see></li>
    /// </ul>
    /// <p>Example:</p>
    /// <pre><code>var cp = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.state.CookieProvider">Ext.state.CookieProvider</see>', {
    /// path: "/cgi-bin/",
    /// expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days
    /// domain: "sencha.com"
    /// });
    /// <see cref="Ext.state.Manager.setProvider">Ext.state.Manager.setProvider</see>(cp);
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class CookieProvider : Ext.state.Provider
    {
        /// <summary>
        /// The domain to save the cookie for. Note that you cannot specify a different domain than your page is on, but you can
        /// specify a sub-domain, or simply the domain itself like 'sencha.com' to include all sub-domains if you need to access
        /// cookies across different sub-domains. Defaults to null which uses the same domain the page is running on including
        /// the 'www' like 'www.sencha.com'.
        /// </summary>
        public JsString domain;
        /// <summary>
        /// The cookie expiration date. Defaults to 7 days from now.
        /// </summary>
        public JsDate expires;
        /// <summary>
        /// The path for which the cookie is active. Defaults to root '/' which makes it active for all pages in the site.
        /// </summary>
        public JsString path;
        /// <summary>
        /// True if the site is using SSL
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool secure;
        /// <summary>
        /// Creates a new CookieProvider.
        /// </summary>
        /// <param name="config"><p>Config object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public CookieProvider(object config=null){}
        public CookieProvider(CookieProviderConfig config){}
        public CookieProvider(params object[] args){}
    }
    #endregion
    #region CookieProviderConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CookieProviderConfig : Ext.state.ProviderConfig
    {
        /// <summary>
        /// The domain to save the cookie for. Note that you cannot specify a different domain than your page is on, but you can
        /// specify a sub-domain, or simply the domain itself like 'sencha.com' to include all sub-domains if you need to access
        /// cookies across different sub-domains. Defaults to null which uses the same domain the page is running on including
        /// the 'www' like 'www.sencha.com'.
        /// </summary>
        public JsString domain;
        /// <summary>
        /// The cookie expiration date. Defaults to 7 days from now.
        /// </summary>
        public JsDate expires;
        /// <summary>
        /// The path for which the cookie is active. Defaults to root '/' which makes it active for all pages in the site.
        /// </summary>
        public JsString path;
        /// <summary>
        /// True if the site is using SSL
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool secure;
        public CookieProviderConfig(params object[] args){}
    }
    #endregion
    #region CookieProviderEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CookieProviderEvents : Ext.state.ProviderEvents
    {
        public CookieProviderEvents(params object[] args){}
    }
    #endregion
}
