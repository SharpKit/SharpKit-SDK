//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region Action
    /// <inheritdocs />
    /// <summary>
    /// <p>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it
    /// can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI
    /// updates across any components that support the Action interface (primarily <see cref="Ext.toolbar.Toolbar">Ext.toolbar.Toolbar</see>,
    /// <see cref="Ext.button.Button">Ext.button.Button</see> and <see cref="Ext.menu.Menu">Ext.menu.Menu</see> components).</p>
    /// <p>Use a single Action instance as the config object for any number of UI Components which share the same configuration. The
    /// Action not only supplies the configuration, but allows all Components based upon it to have a common set of methods
    /// called at once through a single call to the Action.</p>
    /// <p>Any Component that is to be configured with an Action must also support
    /// the following methods:</p>
    /// <ul>
    /// <li>setText(string)</li>
    /// <li>setIconCls(string)</li>
    /// <li>setDisabled(boolean)</li>
    /// <li>setVisible(boolean)</li>
    /// <li>setHandler(function)</li>
    /// </ul>
    /// <p>This allows the Action to control its associated Components.</p>
    /// <p>Example usage:</p>
    /// <pre><code>// Define the shared Action.  Each Component below will have the same
    /// // display text and icon, and will display the same message on click.
    /// var action = new <see cref="Ext.Action">Ext.Action</see>({
    /// <see cref="Ext.ActionConfig.text">text</see>: 'Do something',
    /// <see cref="Ext.ActionConfig.handler">handler</see>: function(){
    /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Click', 'You did something.');
    /// },
    /// <see cref="Ext.ActionConfig.iconCls">iconCls</see>: 'do-something',
    /// <see cref="Ext.ActionConfig.itemId">itemId</see>: 'myAction'
    /// });
    /// var panel = new <see cref="Ext.panel.Panel">Ext.panel.Panel</see>({
    /// title: 'Actions',
    /// width: 500,
    /// height: 300,
    /// tbar: [
    /// // Add the Action directly to a toolbar as a menu button
    /// action,
    /// {
    /// text: 'Action Menu',
    /// // Add the Action to a menu as a text item
    /// menu: [action]
    /// }
    /// ],
    /// items: [
    /// // Add the Action to the panel body as a standard button
    /// new <see cref="Ext.button.Button">Ext.button.Button</see>(action)
    /// ],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// // Change the text for all components using the Action
    /// action.setText('Something else');
    /// // Reference an Action through a container using the itemId
    /// var btn = panel.getComponent('myAction');
    /// var aRef = btn.baseAction;
    /// aRef.setText('New text');
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Action : Ext.Base
    {
        /// <summary>
        /// True to disable all components configured by this Action, false to enable them.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool disabled;
        /// <summary>
        /// The function that will be invoked by each component tied to this Action
        /// when the component's primary event is triggered.
        /// </summary>
        public System.Delegate handler;
        /// <summary>
        /// True to hide all components configured by this Action, false to show them.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hidden;
        /// <summary>
        /// The CSS class selector that specifies a background image to be used as the header icon for
        /// all components configured by this Action.
        /// An example of specifying a custom icon class would be something like:
        /// <code>// specify the property in the config for the class:
        /// ...
        /// iconCls: 'do-something'
        /// // css class that specifies background image to be used as the icon image:
        /// .do-something { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }
        /// </code>
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString iconCls;
        /// <summary>
        /// See Ext.Component.itemId.
        /// </summary>
        public JsString itemId;
        /// <summary>
        /// The scope (this reference) in which the handler is executed.
        /// Defaults to the browser window.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// The text to set for all components configured by this Action.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString text;
        /// <summary>
        /// Creates new Action.
        /// </summary>
        /// <param name="config"><p>Config object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public Action(object config){}
        /// <summary>
        /// Disables all components configured by this Action.
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Executes the specified function once for each Component currently tied to this Action.  The function passed
        /// in should accept a single argument that will be an object that supports the basic Action config/method interface.
        /// </summary>
        /// <param name="fn"><p>The function to execute for each component</p>
        /// </param>
        /// <param name="scope"><p>The scope (this reference) in which the function is executed.
        /// Defaults to the Component.</p>
        /// </param>
        public void each(System.Delegate fn, object scope){}
        /// <summary>
        /// Enables all components configured by this Action.
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Executes this Action manually using the handler function specified in the original config object
        /// or the handler function set with setHandler.  Any arguments passed to this
        /// function will be passed on to the handler function.
        /// </summary>
        /// <param name="args"><p>Variable number of arguments passed to the handler function</p>
        /// </param>
        public void execute(params object[] args){}
        /// <summary>
        /// Gets the icon CSS class currently used by all components configured by this Action.
        /// </summary>
        public JsString getIconCls(){return null;}
        /// <summary>
        /// Gets the text currently displayed by all components configured by this Action.
        /// </summary>
        public JsString getText(){return null;}
        /// <summary>
        /// Hides all components configured by this Action.
        /// </summary>
        public void hide(){}
        /// <summary>
        /// Returns true if the components using this Action are currently disabled, else returns false.
        /// </summary>
        public void isDisabled(){}
        /// <summary>
        /// Returns true if the components configured by this Action are currently hidden, else returns false.
        /// </summary>
        public void isHidden(){}
        /// <summary>
        /// Sets the disabled state of all components configured by this Action.  Shortcut method
        /// for enable and disable.
        /// </summary>
        /// <param name="disabled"><p>True to disable the component, false to enable it</p>
        /// </param>
        public void setDisabled(bool disabled){}
        /// <summary>
        /// Sets the function that will be called by each Component using this action when its primary event is triggered.
        /// </summary>
        /// <param name="fn"><p>The function that will be invoked by the action's components.  The function
        /// will be called with no arguments.</p>
        /// </param>
        /// <param name="scope"><p>The scope (this reference) in which the function is executed. Defaults to the Component
        /// firing the event.</p>
        /// </param>
        public void setHandler(System.Delegate fn, object scope){}
        /// <summary>
        /// Sets the hidden state of all components configured by this Action.  Shortcut method
        /// for hide and show.
        /// </summary>
        /// <param name="hidden"><p>True to hide the component, false to show it.</p>
        /// </param>
        public void setHidden(bool hidden){}
        /// <summary>
        /// Sets the icon CSS class for all components configured by this Action.  The class should supply
        /// a background image that will be used as the icon image.
        /// </summary>
        /// <param name="cls"><p>The CSS class supplying the icon image</p>
        /// </param>
        public void setIconCls(JsString cls){}
        /// <summary>
        /// Sets the text to be displayed by all components configured by this Action.
        /// </summary>
        /// <param name="text"><p>The text to display</p>
        /// </param>
        public void setText(JsString text){}
        /// <summary>
        /// Shows all components configured by this Action.
        /// </summary>
        public void show(){}
        public Action(Ext.ActionConfig config){}
        public Action(){}
        public Action(params object[] args){}
    }
    #endregion
    #region ActionConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ActionConfig : Ext.BaseConfig
    {
        /// <summary>
        /// True to disable all components configured by this Action, false to enable them.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool disabled;
        /// <summary>
        /// The function that will be invoked by each component tied to this Action
        /// when the component's primary event is triggered.
        /// </summary>
        public System.Delegate handler;
        /// <summary>
        /// True to hide all components configured by this Action, false to show them.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hidden;
        /// <summary>
        /// The CSS class selector that specifies a background image to be used as the header icon for
        /// all components configured by this Action.
        /// An example of specifying a custom icon class would be something like:
        /// <code>// specify the property in the config for the class:
        /// ...
        /// iconCls: 'do-something'
        /// // css class that specifies background image to be used as the icon image:
        /// .do-something { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }
        /// </code>
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString iconCls;
        /// <summary>
        /// See Ext.Component.itemId.
        /// </summary>
        public JsString itemId;
        /// <summary>
        /// The scope (this reference) in which the handler is executed.
        /// Defaults to the browser window.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// The text to set for all components configured by this Action.
        /// Defaults to: <c>&quot;&quot;</c>
        /// </summary>
        public JsString text;
        public ActionConfig(params object[] args){}
    }
    #endregion
    #region ActionEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ActionEvents : Ext.BaseEvents
    {
        public ActionEvents(params object[] args){}
    }
    #endregion
}
