//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region XTemplate
    /// <inheritdocs />
    /// <summary>
    /// <p>A template class that supports advanced functionality like:</p>
    /// <ul>
    /// <li>Autofilling arrays using templates and sub-templates</li>
    /// <li>Conditional processing with basic comparison operators</li>
    /// <li>Basic math function support</li>
    /// <li>Execute arbitrary inline code with special built-in template variables</li>
    /// <li>Custom member functions</li>
    /// <li>Many special tags and built-in operators that aren't defined as part of the API, but are supported in the templates that can be created</li>
    /// </ul>
    /// <p>XTemplate provides the templating mechanism built into <see cref="Ext.view.View">Ext.view.View</see>.</p>
    /// <p>The <see cref="Ext.Template">Ext.Template</see> describes the acceptable parameters to pass to the constructor. The following examples
    /// demonstrate all of the supported features.</p>
    /// <h1>Sample Data</h1>
    /// <p>This is the data object used for reference in each code example:</p>
    /// <pre><code>var data = {
    /// name: 'Don Griffin',
    /// title: 'Senior Technomage',
    /// company: 'Sencha Inc.',
    /// drinks: ['Coffee', 'Water', 'More Coffee'],
    /// kids: [
    /// { name: 'Aubrey',  age: 17 },
    /// { name: 'Joshua',  age: 13 },
    /// { name: 'Cale',    age: 10 },
    /// { name: 'Nikol',   age: 5 },
    /// { name: 'Solomon', age: 0 }
    /// ]
    /// };
    /// </code></pre>
    /// <h1>Auto filling of arrays</h1>
    /// <p>The <strong>tpl</strong> tag and the <strong>for</strong> operator are used to process the provided data object:</p>
    /// <ul>
    /// <li>If the value specified in for is an array, it will auto-fill, repeating the template block inside the tpl
    /// tag for each item in the array.</li>
    /// <li>If for="." is specified, the data object provided is examined.</li>
    /// <li>While processing an array, the special variable {#} will provide the current array index + 1 (starts at 1, not 0).</li>
    /// </ul>
    /// <p>Examples:</p>
    /// <pre><code>&lt;tpl for="."&gt;...&lt;/tpl&gt;       // loop through array at root node
    /// &lt;tpl for="foo"&gt;...&lt;/tpl&gt;     // loop through array at foo node
    /// &lt;tpl for="foo.bar"&gt;...&lt;/tpl&gt; // loop through array at foo.bar node
    /// </code></pre>
    /// <p>Using the sample data above:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="."&gt;',       // process the data.kids node
    /// '&lt;p&gt;{#}. {name}&lt;/p&gt;',  // use current array index to autonumber
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
    /// </code></pre>
    /// <p>An example illustrating how the <strong>for</strong> property can be leveraged to access specified members of the provided data
    /// object to populate the template:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Title: {title}&lt;/p&gt;',
    /// '&lt;p&gt;Company: {company}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',     // interrogate the kids property within the data
    /// '&lt;p&gt;{name}&lt;/p&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// tpl.overwrite(panel.body, data);  // pass the root node of the data object
    /// </code></pre>
    /// <p>Flat arrays that contain values (and not objects) can be auto-rendered using the special <strong><c>{.}</c></strong> variable inside a
    /// loop. This variable will represent the value of the array at the current index:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;{name}\'s favorite beverages:&lt;/p&gt;',
    /// '&lt;tpl for="drinks"&gt;',
    /// '&lt;div&gt; - {.}&lt;/div&gt;',
    /// '&lt;/tpl&gt;'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// <p>When processing a sub-template, for example while looping through a child array, you can access the parent object's
    /// members via the <strong>parent</strong> object:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',
    /// '&lt;tpl if="age &amp;gt; 1"&gt;',
    /// '&lt;p&gt;{name}&lt;/p&gt;',
    /// '&lt;p&gt;Dad: {parent.name}&lt;/p&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// <h1>Conditional processing with basic comparison operators</h1>
    /// <p>The <strong>tpl</strong> tag and the <strong>if</strong> operator are used to provide conditional checks for deciding whether or not to render
    /// specific parts of the template.</p>
    /// <p>Using the sample data above:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',
    /// '&lt;tpl if="age &amp;gt; 1"&gt;',
    /// '&lt;p&gt;{name}&lt;/p&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// <p>More advanced conditionals are also supported:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',
    /// '&lt;p&gt;{name} is a ',
    /// '&lt;tpl if="age &amp;gt;= 13"&gt;',
    /// '&lt;p&gt;teenager&lt;/p&gt;',
    /// '&lt;tpl elseif="age &amp;gt;= 2"&gt;',
    /// '&lt;p&gt;kid&lt;/p&gt;',
    /// '&lt;tpl else&gt;',
    /// '&lt;p&gt;baby&lt;/p&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',
    /// '&lt;p&gt;{name} is a ',
    /// '&lt;tpl switch="name"&gt;',
    /// '&lt;tpl case="Aubrey" case="Nikol"&gt;',
    /// '&lt;p&gt;girl&lt;/p&gt;',
    /// '&lt;tpl default&gt;',
    /// '&lt;p&gt;boy&lt;/p&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// </code></pre>
    /// <p>A <c>break</c> is implied between each case and default, however, multiple cases can be listed
    /// in a single &lt;tpl&gt; tag.</p>
    /// <h1>Using double quotes</h1>
    /// <p>Examples:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// "&lt;tpl if='age &amp;gt; 1 &amp;&amp; age &amp;lt; 10'&gt;Child&lt;/tpl&gt;",
    /// "&lt;tpl if='age &amp;gt;= 10 &amp;&amp; age &amp;lt; 18'&gt;Teenager&lt;/tpl&gt;",
    /// "&lt;tpl if='this.isGirl(name)'&gt;...&lt;/tpl&gt;",
    /// '&lt;tpl if="id == \'download\'"&gt;...&lt;/tpl&gt;',
    /// "&lt;tpl if='needsIcon'&gt;&lt;img src='{icon}' class='{iconCls}'/&gt;&lt;/tpl&gt;",
    /// "&lt;tpl if='name == \"Don\"'&gt;Hello&lt;/tpl&gt;"
    /// );
    /// </code></pre>
    /// <h1>Basic math support</h1>
    /// <p>The following basic math operators may be applied directly on numeric data values:</p>
    /// <pre><code>+ - * /
    /// </code></pre>
    /// <p>For example:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',
    /// '&lt;tpl if="age &amp;gt; 1"&gt;',  // &lt;-- Note that the &gt; is encoded
    /// '&lt;p&gt;{#}: {name}&lt;/p&gt;',  // &lt;-- Auto-number each item
    /// '&lt;p&gt;In 5 Years: {age+5}&lt;/p&gt;',  // &lt;-- Basic math
    /// '&lt;p&gt;Dad: {parent.name}&lt;/p&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// <h1>Execute arbitrary inline code with special built-in template variables</h1>
    /// <p>Anything between <c>{[ ... ]}</c> is considered code to be executed in the scope of the template.
    /// The expression is evaluated and the result is included in the generated result. There are
    /// some special variables available in that code:</p>
    /// <ul>
    /// <li><strong>out</strong>: The output array into which the template is being appended (using <c>push</c> to later
    /// <c>join</c>).</li>
    /// <li><strong>values</strong>: The values in the current scope. If you are using scope changing sub-templates,
    /// you can change what values is.</li>
    /// <li><strong>parent</strong>: The scope (values) of the ancestor template.</li>
    /// <li><strong>xindex</strong>: If you are in a looping template, the index of the loop you are in (1-based).</li>
    /// <li><strong>xcount</strong>: If you are in a looping template, the total length of the array you are looping.</li>
    /// </ul>
    /// <p>This example demonstrates basic row striping using an inline code block and the xindex variable:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Company: {[values.company.toUpperCase() + ", " + values.title]}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',
    /// '&lt;div class="{[xindex % 2 === 0 ? "even" : "odd"]}"&gt;',
    /// '{name}',
    /// '&lt;/div&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// </code></pre>
    /// <p>Any code contained in "verbatim" blocks (using "{% ... %}") will be inserted directly in
    /// the generated code for the template. These blocks are not included in the output. This
    /// can be used for simple things like break/continue in a loop, or control structures or
    /// method calls (when they don't produce output). The <c>this</c> references the template instance.</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Company: {[values.company.toUpperCase() + ", " + values.title]}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',
    /// '{% if (xindex % 2 === 0) continue; %}',
    /// '{name}',
    /// '{% if (xindex &gt; 100) break; %}',
    /// '&lt;/div&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;'
    /// );
    /// </code></pre>
    /// <h1>Template member functions</h1>
    /// <p>One or more member functions can be specified in a configuration object passed into the XTemplate constructor for
    /// more complex processing:</p>
    /// <pre><code>var tpl = new <see cref="Ext.XTemplate">Ext.XTemplate</see>(
    /// '&lt;p&gt;Name: {name}&lt;/p&gt;',
    /// '&lt;p&gt;Kids: ',
    /// '&lt;tpl for="kids"&gt;',
    /// '&lt;tpl if="this.isGirl(name)"&gt;',
    /// '&lt;p&gt;Girl: {name} - {age}&lt;/p&gt;',
    /// '&lt;tpl else&gt;',
    /// '&lt;p&gt;Boy: {name} - {age}&lt;/p&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;tpl if="this.isBaby(age)"&gt;',
    /// '&lt;p&gt;{name} is a baby!&lt;/p&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;/tpl&gt;&lt;/p&gt;',
    /// {
    /// // XTemplate configuration:
    /// disableFormats: true,
    /// // member functions:
    /// isGirl: function(name){
    /// return name == 'Aubrey' || name == 'Nikol';
    /// },
    /// isBaby: function(age){
    /// return age &lt; 1;
    /// }
    /// }
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class XTemplate : Ext.Template
    {
        /// <summary>
        /// Optional. A statement, or array of statements which set up vars which may then
        /// be accessed within the scope of the generated function.
        /// </summary>
        public object definitions;
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private JsObject emptyObj{get;set;}
        /// <summary>
        /// Gets an XTemplate from an object (an instance of an Ext.define'd class).
        /// Many times, templates are configured high in the class hierarchy and are to be
        /// shared by all classes that derive from that base. To further complicate matters,
        /// these templates are seldom actual instances but are rather configurations. For
        /// example:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.Class', {
        /// someTpl: [
        /// 'tpl text here'
        /// ]
        /// });
        /// </code>
        /// The goal being to share that template definition with all instances and even
        /// instances of derived classes, until <c>someTpl</c> is overridden. This method will
        /// "upgrade" these configurations to be real <c>XTemplate</c> instances <em>in place</em> (to
        /// avoid creating one instance per object).
        /// </summary>
        /// <param name="instance"><p>The object from which to get the <c>XTemplate</c> (must be
        /// an instance of an <see cref="Ext.ExtContext.define">Ext.define</see>'d class).</p>
        /// </param>
        /// <param name="name"><p>The name of the property by which to get the <c>XTemplate</c>.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.XTemplate">Ext.XTemplate</see></span><div><p>The <c>XTemplate</c> instance or null if not found.</p>
        /// </div>
        /// </returns>
        protected XTemplate getTpl(object instance, JsString name){return null;}
        public XTemplate(XTemplateConfig config){}
        public XTemplate(){}
        public XTemplate(params object[] args){}
    }
    #endregion
    #region XTemplateConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class XTemplateConfig : Ext.TemplateConfig
    {
        /// <summary>
        /// Optional. A statement, or array of statements which set up vars which may then
        /// be accessed within the scope of the generated function.
        /// </summary>
        public object definitions;
        public XTemplateConfig(params object[] args){}
    }
    #endregion
    #region XTemplateEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class XTemplateEvents : Ext.TemplateEvents
    {
        public XTemplateEvents(params object[] args){}
    }
    #endregion
}
