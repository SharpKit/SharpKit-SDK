//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.proxy
{
    #region Rest
    /// <inheritdocs />
    /// <summary>
    /// <p>The Rest proxy is a specialization of the <see cref="Ext.data.proxy.Ajax">AjaxProxy</see> which simply maps the four actions
    /// (create, read, update and destroy) to RESTful HTTP verbs. For example, let's set up a <see cref="Ext.data.Model">Model</see>
    /// with an inline Rest proxy</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['id', 'name', 'email'],
    /// proxy: {
    /// type: 'rest',
    /// url : '/users'
    /// }
    /// });
    /// </code></pre>
    /// <p>Now we can create a new User instance and save it via the Rest proxy. Doing this will cause the Proxy to send a POST
    /// request to '/users':</p>
    /// <pre><code>var user = <see cref="Ext.ExtContext.create">Ext.create</see>('User', {name: 'Ed Spencer', email: 'ed@sencha.com'});
    /// user.save(); //POST /users
    /// </code></pre>
    /// <p>Let's expand this a little and provide a callback for the <see cref="Ext.data.Model.save">Ext.data.Model.save</see> call to update the Model once
    /// it has been created. We'll assume the creation went successfully and that the server gave this user an ID of 123:</p>
    /// <pre><code>user.save({
    /// success: function(user) {
    /// user.set('name', 'Khan Noonien Singh');
    /// user.save(); //PUT /users/123
    /// }
    /// });
    /// </code></pre>
    /// <p>Now that we're no longer creating a new Model instance, the request method is changed to an HTTP PUT, targeting the
    /// relevant url for that user. Now let's delete this user, which will use the DELETE method:</p>
    /// <pre><code>    user.destroy(); //DELETE /users/123
    /// </code></pre>
    /// <p>Finally, when we perform a load of a Model or Store, Rest proxy will use the GET method:</p>
    /// <pre><code>//1. Load via Store
    /// //the Store automatically picks up the Proxy from the User model
    /// var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// model: 'User'
    /// });
    /// store.load(); //GET /users
    /// //2. Load directly from the Model
    /// //GET /users/123
    /// <see cref="Ext.ModelManager.getModel">Ext.ModelManager.getModel</see>('User').load(123, {
    /// success: function(user) {
    /// console.log(user.getId()); //outputs 123
    /// }
    /// });
    /// </code></pre>
    /// <h1>Url generation</h1>
    /// <p>The Rest proxy is able to automatically generate the urls above based on two configuration options - <see cref="Ext.data.proxy.RestConfig.appendId">appendId</see> and
    /// <see cref="Ext.data.proxy.RestConfig.format">format</see>. If appendId is true (it is by default) then Rest proxy will automatically append the ID of the Model
    /// instance in question to the configured url, resulting in the '/users/123' that we saw above.</p>
    /// <p>If the request is not for a specific Model instance (e.g. loading a Store), the url is not appended with an id.
    /// The Rest proxy will automatically insert a '/' before the ID if one is not already present.</p>
    /// <pre><code>new <see cref="Ext.data.proxy.Rest">Ext.data.proxy.Rest</see>({
    /// url: '/users',
    /// appendId: true //default
    /// });
    /// // Collection url: /users
    /// // Instance url  : /users/123
    /// </code></pre>
    /// <p>The Rest proxy can also optionally append a format string to the end of any generated url:</p>
    /// <pre><code>new <see cref="Ext.data.proxy.Rest">Ext.data.proxy.Rest</see>({
    /// url: '/users',
    /// format: 'json'
    /// });
    /// // Collection url: /users.json
    /// // Instance url  : /users/123.json
    /// </code></pre>
    /// <p>If further customization is needed, simply implement the <see cref="Ext.data.proxy.Rest.buildUrl">buildUrl</see> method and add your custom generated url
    /// onto the <see cref="Ext.data.Request">Request</see> object that is passed to buildUrl. See <i>Rest proxy's implementation</i> for
    /// an example of how to achieve this.</p>
    /// <p>Note that Rest proxy inherits from <see cref="Ext.data.proxy.Ajax">AjaxProxy</see>, which already injects all of the sorter,
    /// filter, group and paging options into the generated url. See the <see cref="Ext.data.proxy.Ajax">AjaxProxy docs</see> for more
    /// details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Rest : Ext.data.proxy.Ajax
    {
        /// <summary>
        /// True to automatically append the ID of a Model instance when performing a request based on that single instance.
        /// See Rest proxy intro docs for more details. Defaults to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool appendId;
        /// <summary>
        /// Optional data format to send to the server when making any request (e.g. 'json'). See the Rest proxy intro docs
        /// for full details. Defaults to undefined.
        /// </summary>
        public JsString format;
        public Rest(RestConfig config){}
        public Rest(){}
        public Rest(params object[] args){}
    }
    #endregion
    #region RestConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class RestConfig : Ext.data.proxy.AjaxConfig
    {
        /// <summary>
        /// True to automatically append the ID of a Model instance when performing a request based on that single instance.
        /// See Rest proxy intro docs for more details. Defaults to true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool appendId;
        /// <summary>
        /// Optional data format to send to the server when making any request (e.g. 'json'). See the Rest proxy intro docs
        /// for full details. Defaults to undefined.
        /// </summary>
        public JsString format;
        public RestConfig(params object[] args){}
    }
    #endregion
    #region RestEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class RestEvents : Ext.data.proxy.AjaxEvents
    {
        public RestEvents(params object[] args){}
    }
    #endregion
}
