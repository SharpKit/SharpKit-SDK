//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.layout.container
{
    #region Fit
    /// <inheritdocs />
    /// <summary>
    /// <p>This is a base class for layouts that contain a single item that automatically expands to fill the layout's
    /// container. This class is intended to be extended or created via the layout:'fit'
    /// <see cref="Ext.container.ContainerConfig.layout">Ext.container.Container.layout</see> config, and should generally not need to be created directly via the new keyword.</p>
    /// <p>Fit layout does not have any direct config options (other than inherited ones). To fit a panel to a container using
    /// Fit layout, simply set <c>layout: 'fit'</c> on the container and add a single panel to it.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// title: 'Fit Layout',
    /// width: 300,
    /// height: 150,
    /// layout:'fit',
    /// items: {
    /// title: 'Inner Panel',
    /// html: 'This is the inner panel content',
    /// bodyPadding: 20,
    /// border: false
    /// },
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>If the container has multiple items, all of the items will all be equally sized. This is usually not
    /// desired, so to avoid this, place only a <strong>single</strong> item in the container. This sizing of all items
    /// can be used to provide a background <see cref="Ext.Img">image</see> that is "behind" another item
    /// such as a <see cref="Ext.view.View">dataview</see> if you also absolutely position the items.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Fit : Ext.layout.container.Container
    {
        /// <summary>
        /// If the individual contained items do not have a margins property specified or margin specified via CSS, the
        /// default margins from this property will be applied to each item.
        /// This property may be specified as an object containing margins to apply in the format:
        /// <code>{
        /// top: (top margin),
        /// right: (right margin),
        /// bottom: (bottom margin),
        /// left: (left margin)
        /// }
        /// </code>
        /// This property may also be specified as a string containing space-separated, numeric margin values. The order of
        /// the sides associated with each value matches the way CSS processes margin values:
        /// <li>If there is only one value, it applies to all sides.</li>
        /// <li>If there are two values, the top and bottom borders are set to the first value and the right and left are
        /// set to the second.</li>
        /// <li>If there are three values, the top is set to the first value, the left and right are set to the second,
        /// and the bottom is set to the third.</li>
        /// <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
        /// Defaults to: <c>{top: 0, right: 0, bottom: 0, left: 0}</c>
        /// </summary>
        public JsObject defaultMargins;
        public Fit(FitConfig config){}
        public Fit(){}
        public Fit(params object[] args){}
    }
    #endregion
    #region FitConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FitConfig : Ext.layout.container.ContainerConfig
    {
        /// <summary>
        /// If the individual contained items do not have a margins property specified or margin specified via CSS, the
        /// default margins from this property will be applied to each item.
        /// This property may be specified as an object containing margins to apply in the format:
        /// <code>{
        /// top: (top margin),
        /// right: (right margin),
        /// bottom: (bottom margin),
        /// left: (left margin)
        /// }
        /// </code>
        /// This property may also be specified as a string containing space-separated, numeric margin values. The order of
        /// the sides associated with each value matches the way CSS processes margin values:
        /// <li>If there is only one value, it applies to all sides.</li>
        /// <li>If there are two values, the top and bottom borders are set to the first value and the right and left are
        /// set to the second.</li>
        /// <li>If there are three values, the top is set to the first value, the left and right are set to the second,
        /// and the bottom is set to the third.</li>
        /// <li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
        /// Defaults to: <c>{top: 0, right: 0, bottom: 0, left: 0}</c>
        /// </summary>
        public JsObject defaultMargins;
        public FitConfig(params object[] args){}
    }
    #endregion
    #region FitEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FitEvents : Ext.layout.container.ContainerEvents
    {
        public FitEvents(params object[] args){}
    }
    #endregion
}
