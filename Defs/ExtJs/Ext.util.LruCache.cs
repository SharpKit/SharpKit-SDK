//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region LruCache
    /// <inheritdocs />
    /// <summary>
    /// <p><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>A linked <see cref="Ext.util.HashMap">HashMap</see> implementation which maintains most recently accessed
    /// items at the end of the list, and purges the cache down to the most recently accessed <see cref="Ext.util.LruCacheConfig.maxSize">maxSize</see> items
    /// upon add.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class LruCache : HashMap
    {
        /// <summary>
        /// The maximum size the cache is allowed to grow to before further additions cause
        /// removal of the least recently used entry.
        /// </summary>
        public JsNumber maxSize;
        /// <summary>
        /// Overrides: <see cref="Ext.util.HashMap.contains">Ext.util.HashMap.contains</see>
        /// </summary>
        private void contains(){}
        /// <summary>
        /// Overrides: <see cref="Ext.util.HashMap.containsKey">Ext.util.HashMap.containsKey</see>
        /// </summary>
        private void containsKey(){}
        /// <summary>
        /// Executes the specified function once for each item in the cache.
        /// Returning false from the function will cease iteration.
        /// By default, iteration is from least recently used to most recent.
        /// The paramaters passed to the function are:
        /// <ul>
        /// <li><b>key</b> : String<p>The key of the item</p></li>
        /// <li><b>value</b> : Number<p>The value of the item</p></li>
        /// <li><b>length</b> : Number<p>The total number of items in the hash</p></li>
        /// </ul>
        /// </summary>
        /// <param name="fn"><p>The function to execute.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) to execute in. Defaults to this LruCache.</p>
        /// </param>
        /// <param name="reverse"><p>Pass <c>true</c> to iterate the list in reverse (most recent first) order.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.util.LruCache">Ext.util.LruCache</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public LruCache each(System.Delegate fn, object scope, object reverse=null){return null;}
        /// <summary>
        /// Purge the least recently used entries if the maxSize has been exceeded.
        /// </summary>
        public void prune(){}
        public LruCache(LruCacheConfig config){}
        public LruCache(){}
        public LruCache(params object[] args){}
    }
    #endregion
    #region LruCacheConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LruCacheConfig : HashMapConfig
    {
        /// <summary>
        /// The maximum size the cache is allowed to grow to before further additions cause
        /// removal of the least recently used entry.
        /// </summary>
        public JsNumber maxSize;
        public LruCacheConfig(params object[] args){}
    }
    #endregion
    #region LruCacheEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LruCacheEvents : HashMapEvents
    {
        public LruCacheEvents(params object[] args){}
    }
    #endregion
}
