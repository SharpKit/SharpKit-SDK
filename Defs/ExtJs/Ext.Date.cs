//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region Date
    /// <summary>
    /// <p>A set of useful static methods to deal with date
    /// Note that if <see cref="Ext.Date">Ext.Date</see> is required and loaded, it will copy all methods / properties to
    /// this object for convenience</p>
    /// <p>The date parsing and formatting syntax contains a subset of
    /// <i>PHP's date() function</i>, and the formats that are
    /// supported will provide results equivalent to their PHP versions.</p>
    /// <p>The following is a list of all currently supported formats:</p>
    /// <pre>
    /// Format  Description                                                               Example returned values
    /// ------  -----------------------------------------------------------------------   -----------------------
    /// d     Day of the month, 2 digits with leading zeros                             01 to 31
    /// D     A short textual representation of the day of the week                     Mon to Sun
    /// j     Day of the month without leading zeros                                    1 to 31
    /// l     A full textual representation of the day of the week                      Sunday to Saturday
    /// N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
    /// S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
    /// w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
    /// z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
    /// W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53
    /// F     A full textual representation of a month, such as January or March        January to December
    /// m     Numeric representation of a month, with leading zeros                     01 to 12
    /// M     A short textual representation of a month                                 Jan to Dec
    /// n     Numeric representation of a month, without leading zeros                  1 to 12
    /// t     Number of days in the given month                                         28 to 31
    /// L     Whether it&#39;s a leap year                                                  1 if it is a leap year, 0 otherwise.
    /// o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
    /// belongs to the previous or next year, that year is used instead)
    /// Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
    /// y     A two digit representation of a year                                      Examples: 99 or 03
    /// a     Lowercase Ante meridiem and Post meridiem                                 am or pm
    /// A     Uppercase Ante meridiem and Post meridiem                                 AM or PM
    /// g     12-hour format of an hour without leading zeros                           1 to 12
    /// G     24-hour format of an hour without leading zeros                           0 to 23
    /// h     12-hour format of an hour with leading zeros                              01 to 12
    /// H     24-hour format of an hour with leading zeros                              00 to 23
    /// i     Minutes, with leading zeros                                               00 to 59
    /// s     Seconds, with leading zeros                                               00 to 59
    /// u     Decimal fraction of a second                                              Examples:
    /// (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or
    /// 100 (i.e. 0.100s) or
    /// 999 (i.e. 0.999s) or
    /// 999876543210 (i.e. 0.999876543210s)
    /// O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
    /// P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
    /// T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
    /// Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
    /// c     ISO 8601 date
    /// Notes:                                                                    Examples:
    /// 1) If unspecified, the month / day defaults to the current month / day,   1991 or
    /// the time defaults to midnight, while the timezone defaults to the      1992-10 or
    /// browser's timezone. If a time is specified, it must include both hours 1993-09-20 or
    /// and minutes. The "T" delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or
    /// are optional.                                                          1995-07-18T17:21:28-02:00 or
    /// 2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or
    /// least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or
    /// of digits allowed), and may be delimited by either a '.' or a ','      1998-04-15T20:24:31.2468Z or
    /// Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or
    /// date-time granularity which are supported, or see                         2000-02-13T21:25:33
    /// http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34
    /// U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463
    /// MS    Microsoft AJAX serialized dates                                           \/Date(1238606590509)\/ (i.e. UTC milliseconds since epoch) or
    /// \/Date(1238606590509+0800)\/
    /// </pre>
    /// <p>Example usage (note that you must escape format specifiers with '\' to render them as character literals):</p>
    /// <pre><code>// Sample date:
    /// // 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'
    /// var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
    /// console.log(<see cref="Ext.Date.format">Ext.Date.format</see>(dt, 'Y-m-d'));                          // 2007-01-10
    /// console.log(<see cref="Ext.Date.format">Ext.Date.format</see>(dt, 'F j, Y, g:i a'));                  // January 10, 2007, 3:05 pm
    /// console.log(<see cref="Ext.Date.format">Ext.Date.format</see>(dt, 'l, \\t\\he jS \\of F Y h:i:s A')); // Wednesday, the 10th of January 2007 03:05:01 PM
    /// </code></pre>
    /// <p>Here are some standard date/time patterns that you might find helpful.  They
    /// are not part of the source of <see cref="Ext.Date">Ext.Date</see>, but to use them you can simply copy this
    /// block of code into any script that is included after <see cref="Ext.Date">Ext.Date</see> and they will also become
    /// globally available on the Date object.  Feel free to add or remove patterns as needed in your code.</p>
    /// <pre><code>Ext.Date.patterns = {
    /// ISO8601Long:"Y-m-d H:i:s",
    /// ISO8601Short:"Y-m-d",
    /// ShortDate: "n/j/Y",
    /// LongDate: "l, F d, Y",
    /// FullDateTime: "l, F d, Y g:i:s A",
    /// MonthDay: "F d",
    /// ShortTime: "g:i A",
    /// LongTime: "g:i:s A",
    /// SortableDateTime: "Y-m-d\\TH:i:s",
    /// UniversalSortableDateTime: "Y-m-d H:i:sO",
    /// YearMonth: "F, Y"
    /// };
    /// </code></pre>
    /// <p>Example usage:</p>
    /// <pre><code>var dt = new Date();
    /// console.log(<see cref="Ext.Date.format">Ext.Date.format</see>(dt, Ext.Date.patterns.ShortDate));
    /// </code></pre>
    /// <p>Developer-written, custom formats may be used by supplying both a formatting and a parsing function
    /// which perform to specialized requirements. The functions are stored in <see cref="Ext.Date.parseFunctions">parseFunctions</see> and <see cref="Ext.Date.formatFunctions">formatFunctions</see>.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Date
    {
        /// <summary>
        /// Date interval constant
        /// Defaults to: <c>&quot;d&quot;</c>
        /// </summary>
        public static JsString DAY{get;set;}
        /// <summary>
        /// Date interval constant
        /// Defaults to: <c>&quot;h&quot;</c>
        /// </summary>
        public static JsString HOUR{get;set;}
        /// <summary>
        /// Date interval constant
        /// Defaults to: <c>&quot;ms&quot;</c>
        /// </summary>
        public static JsString MILLI{get;set;}
        /// <summary>
        /// Date interval constant
        /// Defaults to: <c>&quot;mi&quot;</c>
        /// </summary>
        public static JsString MINUTE{get;set;}
        /// <summary>
        /// Date interval constant
        /// Defaults to: <c>&quot;mo&quot;</c>
        /// </summary>
        public static JsString MONTH{get;set;}
        /// <summary>
        /// Date interval constant
        /// Defaults to: <c>&quot;s&quot;</c>
        /// </summary>
        public static JsString SECOND{get;set;}
        /// <summary>
        /// Date interval constant
        /// Defaults to: <c>&quot;y&quot;</c>
        /// </summary>
        public static JsString YEAR{get;set;}
        /// <summary>
        /// An array of textual day names.
        /// Override these values for international dates.
        /// Example:
        /// <code><see cref="Ext.Date.dayNames">Ext.Date.dayNames</see> = [
        /// 'SundayInYourLang',
        /// 'MondayInYourLang',
        /// ...
        /// ];
        /// </code>
        /// Defaults to: <c>[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]</c>
        /// </summary>
        public static JsString dayNames{get;set;}
        /// <summary>
        /// The date format string that the Ext.util.Format.dateRenderer
        /// and Ext.util.Format.date functions use.  See Ext.Date for details.
        /// This may be overridden in a locale file.
        /// Defaults to: <c>&quot;m/d/Y&quot;</c>
        /// </summary>
        public static JsString defaultFormat{get;set;}
        /// <summary>
        /// An object hash containing default date values used during date parsing.
        /// The following properties are available:<div><ul>
        /// <li><c>y</c> : Number<div>The default year value. (defaults to undefined)</div></li>
        /// <li><c>m</c> : Number<div>The default 1-based month value. (defaults to undefined)</div></li>
        /// <li><c>d</c> : Number<div>The default day value. (defaults to undefined)</div></li>
        /// <li><c>h</c> : Number<div>The default hour value. (defaults to undefined)</div></li>
        /// <li><c>i</c> : Number<div>The default minute value. (defaults to undefined)</div></li>
        /// <li><c>s</c> : Number<div>The default second value. (defaults to undefined)</div></li>
        /// <li><c>ms</c> : Number<div>The default millisecond value. (defaults to undefined)</div></li>
        /// </ul></div>
        /// Override these properties to customize the default date values used by the <see cref="Ext.Date.parse">parse</see> method.
        /// <b>Note: In countries which experience Daylight Saving Time (i.e. DST), the <tt>h</tt>, <tt>i</tt>, <tt>s</tt>
        /// and <tt>ms</tt> properties may coincide with the exact time in which DST takes effect.
        /// It is the responsiblity of the developer to account for this.</b>
        /// Example Usage:
        /// <code>// set default day value to the first day of the month
        /// Ext.Date.defaults.d = 1;
        /// // parse a February date string containing only year and month values.
        /// // setting the default day value to 1 prevents weird date rollover issues
        /// // when attempting to parse the following date string on, for example, March 31st 2009.
        /// <see cref="Ext.Date.parse">Ext.Date.parse</see>('2009-02', 'Y-m'); // returns a Date object representing February 1st 2009
        /// </code>
        /// Defaults to: <c>{}</c>
        /// </summary>
        public static JsObject defaults{get;set;}
        /// <summary>
        /// The base format-code to formatting-function hashmap used by the format method.
        /// Formatting functions are strings (or functions which return strings) which
        /// will return the appropriate value when evaluated in the context of the Date object
        /// from which the format method is called.
        /// Add to / override these mappings for custom date formatting.
        /// Note: Ext.Date.format() treats characters as literals if an appropriate mapping cannot be found.
        /// Example:
        /// <code>Ext.Date.formatCodes.x = "<see cref="Ext.util.Format.leftPad">Ext.util.Format.leftPad</see>(this.getDate(), 2, '0')";
        /// console.log(<see cref="Ext.Date.format">Ext.Date.format</see>(new Date(), 'X'); // returns the current day of the month
        /// </code>
        /// </summary>
        public static JsObject formatCodes{get;set;}
        /// <summary>
        /// An object hash in which each property is a date formatting function. The property name is the
        /// format string which corresponds to the produced formatted date string.
        /// This object is automatically populated with date formatting functions as
        /// date formats are requested for Ext standard formatting strings.
        /// Custom formatting functions may be inserted into this object, keyed by a name which from then on
        /// may be used as a format string to <see cref="Ext.Date.format">format</see>. Example:
        /// <code><see cref="Ext.Date.formatFunctions">Ext.Date.formatFunctions</see>['x-date-format'] = myDateFormatter;
        /// </code>
        /// A formatting function should return a string representation of the passed Date object, and is passed the following parameters:<div><ul>
        /// <li><c>date</c> : Date<div>The Date to format.</div></li>
        /// </ul></div>
        /// To enable date strings to also be parsed according to that format, a corresponding
        /// parsing function must be placed into the parseFunctions property.
        /// </summary>
        public static JsObject formatFunctions{get;set;}
        /// <summary>
        /// An array of textual month names.
        /// Override these values for international dates.
        /// Example:
        /// <code><see cref="Ext.Date.monthNames">Ext.Date.monthNames</see> = [
        /// 'JanInYourLang',
        /// 'FebInYourLang',
        /// ...
        /// ];
        /// </code>
        /// Defaults to: <c>[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]</c>
        /// </summary>
        public static JsString monthNames{get;set;}
        /// <summary>
        /// An object hash of zero-based javascript month numbers (with short month names as keys. note: keys are case-sensitive).
        /// Override these values for international dates.
        /// Example:
        /// <code><see cref="Ext.Date.monthNumbers">Ext.Date.monthNumbers</see> = {
        /// 'LongJanNameInYourLang': 0,
        /// 'ShortJanNameInYourLang':0,
        /// 'LongFebNameInYourLang':1,
        /// 'ShortFebNameInYourLang':1,
        /// ...
        /// };
        /// </code>
        /// Defaults to: <c>{January: 0, Jan: 0, February: 1, Feb: 1, March: 2, Mar: 2, April: 3, Apr: 3, May: 4, June: 5, Jun: 5, July: 6, Jul: 6, August: 7, Aug: 7, September: 8, Sep: 8, October: 9, Oct: 9, November: 10, Nov: 10, December: 11, Dec: 11}</c>
        /// </summary>
        public static JsObject monthNumbers{get;set;}
        /// <summary>
        /// An object hash in which each property is a date parsing function. The property name is the
        /// format string which that function parses.
        /// This object is automatically populated with date parsing functions as
        /// date formats are requested for Ext standard formatting strings.
        /// Custom parsing functions may be inserted into this object, keyed by a name which from then on
        /// may be used as a format string to parse.
        /// Example:
        /// <code><see cref="Ext.Date.parseFunctions">Ext.Date.parseFunctions</see>['x-date-format'] = myDateParser;
        /// </code>
        /// A parsing function should return a Date object, and is passed the following parameters:<div><ul>
        /// <li><c>date</c> : String<div>The date string to parse.</div></li>
        /// <li><c>strict</c> : Boolean<div>True to validate date strings while parsing
        /// (i.e. prevent javascript Date "rollover") (The default must be false).
        /// Invalid date strings should return null when parsed.</div></li>
        /// </ul></div>
        /// To enable Dates to also be formatted according to that format, a corresponding
        /// formatting function must be placed into the formatFunctions property.
        /// </summary>
        public static JsObject parseFunctions{get;set;}
        /// <summary>
        /// Global flag which determines if strict date parsing should be used.
        /// Strict date parsing will not roll-over invalid dates, which is the
        /// default behaviour of javascript Date objects.
        /// (see parse for more information)
        /// Defaults to false.
        /// Defaults to: <c>false</c>
        /// </summary>
        public static bool useStrict{get;set;}
        /// <summary>
        /// Provides a convenient method for performing basic date arithmetic. This method
        /// does not modify the Date instance being called - it creates and returns
        /// a new Date instance containing the resulting date value.
        /// Examples:
        /// <code>// Basic usage:
        /// var dt = <see cref="Ext.Date.add">Ext.Date.add</see>(new Date('10/29/2006'), <see cref="Ext.Date.DAY">Ext.Date.DAY</see>, 5);
        /// console.log(dt); //returns 'Fri Nov 03 2006 00:00:00'
        /// // Negative values will be subtracted:
        /// var dt2 = <see cref="Ext.Date.add">Ext.Date.add</see>(new Date('10/1/2006'), <see cref="Ext.Date.DAY">Ext.Date.DAY</see>, -5);
        /// console.log(dt2); //returns 'Tue Sep 26 2006 00:00:00'
        /// </code>
        /// </summary>
        /// <param name="date"><p>The date to modify</p>
        /// </param>
        /// <param name="interval"><p>A valid date interval enum value.</p>
        /// </param>
        /// <param name="value"><p>The amount to add to the current date.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Date">Date</see></span><div><p>The new Date instance.</p>
        /// </div>
        /// </returns>
        public static JsDate add(JsDate date, JsString interval, JsNumber value){return null;}
        /// <summary>
        /// Checks if a date falls on or between the given start and end dates.
        /// </summary>
        /// <param name="date"><p>The date to check</p>
        /// </param>
        /// <param name="start"><p>Start date</p>
        /// </param>
        /// <param name="end"><p>End date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if this date falls on or between the given start and end dates.</p>
        /// </div>
        /// </returns>
        public static bool between(JsDate date, JsDate start, JsDate end){return false;}
        /// <summary>
        /// Attempts to clear all time information from this Date by setting the time to midnight of the same day,
        /// automatically adjusting for Daylight Saving Time (DST) where applicable.
        /// (note: DST timezone information for the browser's host operating system is assumed to be up-to-date)
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <param name="clone"><p>true to create a clone of this date, clear the time and return it (defaults to false).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Date">Date</see></span><div><p>this or the clone.</p>
        /// </div>
        /// </returns>
        public static JsDate clearTime(JsDate date, object clone=null){return null;}
        /// <summary>
        /// Creates and returns a new Date instance with the exact same date value as the called instance.
        /// Dates are copied and passed by reference, so if a copied date variable is modified later, the original
        /// variable will also be changed.  When the intention is to create a new variable that will not
        /// modify the original instance, you should create a clone.
        /// Example of correctly cloning a date:
        /// <code>//wrong way:
        /// var orig = new Date('10/1/2006');
        /// var copy = orig;
        /// copy.setDate(5);
        /// console.log(orig);  //returns 'Thu Oct 05 2006'!
        /// //correct way:
        /// var orig = new Date('10/1/2006'),
        /// copy = <see cref="Ext.Date.clone">Ext.Date.clone</see>(orig);
        /// copy.setDate(5);
        /// console.log(orig);  //returns 'Thu Oct 01 2006'
        /// </code>
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Date">Date</see></span><div><p>The new Date instance.</p>
        /// </div>
        /// </returns>
        public static JsDate clone(JsDate date){return null;}
        /// <summary>
        /// Formats a date given the supplied format string.
        /// </summary>
        /// <param name="date"><p>The date to format</p>
        /// </param>
        /// <param name="format"><p>The format string</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The formatted date or an empty string if date parameter is not a JavaScript Date object</p>
        /// </div>
        /// </returns>
        public static JsString format(JsDate date, JsString format){return null;}
        /// <summary>
        /// Checks if the specified format contains information about
        /// anything other than the time.
        /// </summary>
        /// <param name="format"><p>The format to check</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the format contains information about
        /// date/day information.</p>
        /// </div>
        /// </returns>
        public static bool formatContainsDateInfo(JsString format){return false;}
        /// <summary>
        /// Checks if the specified format contains hour information
        /// </summary>
        /// <param name="format"><p>The format to check</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the format contains hour information</p>
        /// </div>
        /// </returns>
        public static bool formatContainsHourInfo(JsString format){return false;}
        /// <summary>
        /// Get the numeric day number of the year, adjusted for leap year.
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>0 to 364 (365 in leap years).</p>
        /// </div>
        /// </returns>
        public static JsNumber getDayOfYear(JsDate date){return null;}
        /// <summary>
        /// Get the number of days in the current month, adjusted for leap year.
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The number of days in the month.</p>
        /// </div>
        /// </returns>
        public static JsNumber getDaysInMonth(JsDate date){return null;}
        /// <summary>
        /// Returns the number of milliseconds between two dates
        /// </summary>
        /// <param name="dateA"><p>The first date</p>
        /// </param>
        /// <param name="dateB"><p>The second date, defaults to now</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The difference in milliseconds</p>
        /// </div>
        /// </returns>
        public static JsNumber getElapsed(JsDate dateA, object dateB=null){return null;}
        /// <summary>
        /// Get the date of the first day of the month in which this date resides.
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Date">Date</see></span><div>
        /// </div>
        /// </returns>
        public static JsDate getFirstDateOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the first day of the current month, adjusted for leap year.  The returned value
        /// is the numeric day index within the week (0-6) which can be used in conjunction with
        /// the monthNames array to retrieve the textual day name.
        /// Example:
        /// <code>var dt = new Date('1/10/2007'),
        /// firstDay = <see cref="Ext.Date.getFirstDayOfMonth">Ext.Date.getFirstDayOfMonth</see>(dt);
        /// console.log(<see cref="Ext.Date.dayNames">Ext.Date.dayNames</see>[firstDay]); //output: 'Monday'
        /// </code>
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The day number (0-6).</p>
        /// </div>
        /// </returns>
        public static JsNumber getFirstDayOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the offset from GMT of the current date (equivalent to the format specifier 'O').
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <param name="colon"><p>true to separate the hours and minutes with a colon (defaults to false).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The 4-character offset string prefixed with + or - (e.g. '-0600').</p>
        /// </div>
        /// </returns>
        public static JsString getGMTOffset(JsDate date, object colon=null){return null;}
        /// <summary>
        /// Get the date of the last day of the month in which this date resides.
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Date">Date</see></span><div>
        /// </div>
        /// </returns>
        public static JsDate getLastDateOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the last day of the current month, adjusted for leap year.  The returned value
        /// is the numeric day index within the week (0-6) which can be used in conjunction with
        /// the monthNames array to retrieve the textual day name.
        /// Example:
        /// <code>var dt = new Date('1/10/2007'),
        /// lastDay = <see cref="Ext.Date.getLastDayOfMonth">Ext.Date.getLastDayOfMonth</see>(dt);
        /// console.log(<see cref="Ext.Date.dayNames">Ext.Date.dayNames</see>[lastDay]); //output: 'Wednesday'
        /// </code>
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The day number (0-6).</p>
        /// </div>
        /// </returns>
        public static JsNumber getLastDayOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the zero-based javascript month number for the given short/full month name.
        /// Override this function for international dates.
        /// </summary>
        /// <param name="name"><p>The short/full month name.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The zero-based javascript month number.</p>
        /// </div>
        /// </returns>
        public static JsNumber getMonthNumber(object name){return null;}
        /// <summary>
        /// Get the short day name for the given day number.
        /// Override this function for international dates.
        /// </summary>
        /// <param name="day"><p>A zero-based javascript day number.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The short day name.</p>
        /// </div>
        /// </returns>
        public static JsString getShortDayName(JsNumber day){return null;}
        /// <summary>
        /// Get the short month name for the given month number.
        /// Override this function for international dates.
        /// </summary>
        /// <param name="month"><p>A zero-based javascript month number.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The short month name.</p>
        /// </div>
        /// </returns>
        public static JsString getShortMonthName(JsNumber month){return null;}
        /// <summary>
        /// Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>'st, 'nd', 'rd' or 'th'.</p>
        /// </div>
        /// </returns>
        public static JsString getSuffix(JsDate date){return null;}
        /// <summary>
        /// Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').
        /// Note: The date string returned by the javascript Date object's toString() method varies
        /// between browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).
        /// For a given date string e.g. "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)",
        /// getTimezone() first tries to get the timezone abbreviation from between a pair of parentheses
        /// (which may or may not be present), failing which it proceeds to get the timezone abbreviation
        /// from the GMT offset portion of the date string.
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The abbreviated timezone name (e.g. 'CST', 'PDT', 'EDT', 'MPST' ...).</p>
        /// </div>
        /// </returns>
        public static JsString getTimezone(JsDate date){return null;}
        /// <summary>
        /// Get the numeric ISO-8601 week number of the year.
        /// (equivalent to the format specifier 'W', but without a leading zero).
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>1 to 53</p>
        /// </div>
        /// </returns>
        public static JsNumber getWeekOfYear(JsDate date){return null;}
        /// <summary>
        /// Checks if the current date is affected by Daylight Saving Time (DST).
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the current date is affected by DST.</p>
        /// </div>
        /// </returns>
        public static bool isDST(JsDate date){return false;}
        /// <summary>
        /// Compares if two dates are equal by comparing their values.
        /// </summary>
        /// <param name="date1">
        /// </param>
        /// <param name="date2">
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the date values are equal</p>
        /// </div>
        /// </returns>
        public static bool isEqual(JsDate date1, JsDate date2){return false;}
        /// <summary>
        /// Checks if the current date falls within a leap year.
        /// </summary>
        /// <param name="date"><p>The date</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the current date falls within a leap year, false otherwise.</p>
        /// </div>
        /// </returns>
        public static bool isLeapYear(JsDate date){return false;}
        /// <summary>
        /// Checks if the passed Date parameters will cause a javascript Date "rollover".
        /// </summary>
        /// <param name="year"><p>4-digit year</p>
        /// </param>
        /// <param name="month"><p>1-based month-of-year</p>
        /// </param>
        /// <param name="day"><p>Day of month</p>
        /// </param>
        /// <param name="hour"><p>Hour</p>
        /// </param>
        /// <param name="minute"><p>Minute</p>
        /// </param>
        /// <param name="second"><p>Second</p>
        /// </param>
        /// <param name="millisecond"><p>Millisecond</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if the passed parameters do not cause a Date "rollover", false otherwise.</p>
        /// </div>
        /// </returns>
        public static bool isValid(JsNumber year, JsNumber month, JsNumber day, object hour=null, object minute=null, object second=null, object millisecond=null){return false;}
        /// <summary>
        /// Returns the current timestamp.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>Milliseconds since UNIX epoch.</p>
        /// </div>
        /// </returns>
        public static JsNumber now(){return null;}
        /// <summary>
        /// Parses the passed string using the specified date format.
        /// Note that this function expects normal calendar dates, meaning that months are 1-based (i.e. 1 = January).
        /// The defaults hash will be used for any date value (i.e. year, month, day, hour, minute, second or millisecond)
        /// which cannot be found in the passed string. If a corresponding default date value has not been specified in the defaults hash,
        /// the current date's year, month, day or DST-adjusted zero-hour time value will be used instead.
        /// Keep in mind that the input date string must precisely match the specified format string
        /// in order for the parse operation to be successful (failed parse operations return a null value).
        /// Example:
        /// <code>//dt = Fri May 25 2007 (current date)
        /// var dt = new Date();
        /// //dt = Thu May 25 2006 (today&#39;s month/day in 2006)
        /// dt = <see cref="Ext.Date.parse">Ext.Date.parse</see>("2006", "Y");
        /// //dt = Sun Jan 15 2006 (all date parts specified)
        /// dt = <see cref="Ext.Date.parse">Ext.Date.parse</see>("2006-01-15", "Y-m-d");
        /// //dt = Sun Jan 15 2006 15:20:01
        /// dt = <see cref="Ext.Date.parse">Ext.Date.parse</see>("2006-01-15 3:20:01 PM", "Y-m-d g:i:s A");
        /// // attempt to parse Sun Feb 29 2006 03:20:01 in strict mode
        /// dt = <see cref="Ext.Date.parse">Ext.Date.parse</see>("2006-02-29 03:20:01", "Y-m-d H:i:s", true); // returns null
        /// </code>
        /// </summary>
        /// <param name="input"><p>The raw date string.</p>
        /// </param>
        /// <param name="format"><p>The expected date string format.</p>
        /// </param>
        /// <param name="strict"><p>True to validate date strings while parsing (i.e. prevents javascript Date "rollover")</p>
        /// <pre><code>                    (defaults to false). Invalid date strings will return null when parsed.
        /// </code></pre>
        /// </param>
        /// <returns>
        /// <span><see cref="Date">Date</see></span><div><p>The parsed Date.</p>
        /// </div>
        /// </returns>
        public static JsDate parse(JsString input, JsString format, object strict=null){return null;}
        /// <summary>
        /// Private for now
        /// </summary>
        /// <param name="date">
        /// </param>
        private static void toString(object date){}
        /// <summary>
        /// Removes all escaping for a date format string. In date formats,
        /// using a '\' can be used to escape special characters.
        /// </summary>
        /// <param name="format"><p>The format to unescape</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The unescaped format</p>
        /// </div>
        /// </returns>
        public static JsString unescapeFormat(JsString format){return null;}
        public Date(Ext.DateConfig config){}
        public Date(){}
        public Date(params object[] args){}
    }
    #endregion
    #region DateConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DateConfig
    {
        public DateConfig(params object[] args){}
    }
    #endregion
    #region DateEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DateEvents
    {
        public DateEvents(params object[] args){}
    }
    #endregion
}
