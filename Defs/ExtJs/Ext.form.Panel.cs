//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form
{
    #region Panel
    /// <inheritdocs />
    /// <summary>
    /// <p>FormPanel provides a standard container for forms. It is essentially a standard <see cref="Ext.panel.Panel">Ext.panel.Panel</see> which
    /// automatically creates a <see cref="Ext.form.Basic">BasicForm</see> for managing any <see cref="Ext.form.field.Field">Ext.form.field.Field</see>
    /// objects that are added as descendants of the panel. It also includes conveniences for configuring and
    /// working with the BasicForm and the collection of Fields.</p>
    /// <h1>Layout</h1>
    /// <p>By default, FormPanel is configured with <c><see cref="Ext.layout.container.Anchor">layout:'anchor'</see></c> for
    /// the layout of its immediate child items. This can be changed to any of the supported container layouts.
    /// The layout of sub-containers is configured in <see cref="Ext.container.ContainerConfig.layout">the standard way</see>.</p>
    /// <h1>BasicForm</h1>
    /// <p>Although <strong>not listed</strong> as configuration options of FormPanel, the FormPanel class accepts all
    /// of the config options supported by the <see cref="Ext.form.Basic">Ext.form.Basic</see> class, and will pass them along to
    /// the internal BasicForm when it is created.</p>
    /// <p>The following events fired by the BasicForm will be re-fired by the FormPanel and can therefore be
    /// listened for on the FormPanel itself:</p>
    /// <ul>
    /// <li><see cref="Ext.form.BasicEvents.beforeaction">beforeaction</see></li>
    /// <li><see cref="Ext.form.BasicEvents.actionfailed">actionfailed</see></li>
    /// <li><see cref="Ext.form.BasicEvents.actioncomplete">actioncomplete</see></li>
    /// <li><see cref="Ext.form.BasicEvents.validitychange">validitychange</see></li>
    /// <li><see cref="Ext.form.BasicEvents.dirtychange">dirtychange</see></li>
    /// </ul>
    /// <h1>Field Defaults</h1>
    /// <p>The <see cref="Ext.form.PanelConfig.fieldDefaults">fieldDefaults</see> config option conveniently allows centralized configuration of default values
    /// for all fields added as descendants of the FormPanel. Any config option recognized by implementations
    /// of <see cref="Ext.form.Labelable">Ext.form.Labelable</see> may be included in this object. See the <see cref="Ext.form.PanelConfig.fieldDefaults">fieldDefaults</see> documentation
    /// for details of how the defaults are applied.</p>
    /// <h1>Form Validation</h1>
    /// <p>With the default configuration, form fields are validated on-the-fly while the user edits their values.
    /// This can be controlled on a per-field basis (or via the <see cref="Ext.form.PanelConfig.fieldDefaults">fieldDefaults</see> config) with the field
    /// config properties <see cref="Ext.form.field.FieldConfig.validateOnChange">Ext.form.field.Field.validateOnChange</see> and <see cref="Ext.form.field.BaseConfig.checkChangeEvents">Ext.form.field.Base.checkChangeEvents</see>,
    /// and the FormPanel's config properties <see cref="Ext.form.PanelConfig.pollForChanges">pollForChanges</see> and <see cref="Ext.form.PanelConfig.pollInterval">pollInterval</see>.</p>
    /// <p>Any component within the FormPanel can be configured with <c>formBind: true</c>. This will cause that
    /// component to be automatically disabled when the form is invalid, and enabled when it is valid. This is most
    /// commonly used for Button components to prevent submitting the form in an invalid state, but can be used on
    /// any component type.</p>
    /// <p>For more information on form validation see the following:</p>
    /// <ul>
    /// <li><see cref="Ext.form.field.FieldConfig.validateOnChange">Ext.form.field.Field.validateOnChange</see></li>
    /// <li><see cref="Ext.form.PanelConfig.pollForChanges">pollForChanges</see> and <see cref="Ext.form.PanelConfig.pollInterval">pollInterval</see></li>
    /// <li><see cref="Ext.form.field.VTypes">Ext.form.field.VTypes</see></li>
    /// <li><see cref="Ext.form.Basic.doAction">BasicForm.doAction clientValidation notes</see></li>
    /// </ul>
    /// <h1>Form Submission</h1>
    /// <p>By default, Ext Forms are submitted through Ajax, using <see cref="Ext.form.action.Action">Ext.form.action.Action</see>. See the documentation for
    /// <see cref="Ext.form.Basic">Ext.form.Basic</see> for details.</p>
    /// <h1>Example usage</h1>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title: 'Simple Form',
    /// bodyPadding: 5,
    /// width: 350,
    /// // The form will submit an AJAX request to this URL when submitted
    /// url: 'save-form.php',
    /// // Fields will be arranged vertically, stretched to full width
    /// layout: 'anchor',
    /// defaults: {
    /// anchor: '100%'
    /// },
    /// // The fields
    /// defaultType: 'textfield',
    /// items: [{
    /// fieldLabel: 'First Name',
    /// name: 'first',
    /// allowBlank: false
    /// },{
    /// fieldLabel: 'Last Name',
    /// name: 'last',
    /// allowBlank: false
    /// }],
    /// // Reset and Submit buttons
    /// buttons: [{
    /// text: 'Reset',
    /// handler: function() {
    /// this.up('form').getForm().reset();
    /// }
    /// }, {
    /// text: 'Submit',
    /// formBind: true, //only enabled once the form is valid
    /// disabled: true,
    /// handler: function() {
    /// var form = this.up('form').getForm();
    /// if (form.isValid()) {
    /// form.submit({
    /// success: function(form, action) {
    /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Success', action.result.msg);
    /// },
    /// failure: function(form, action) {
    /// <see cref="Ext.MessageBox.alert">Ext.Msg.alert</see>('Failed', action.result.msg);
    /// }
    /// });
    /// }
    /// }
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Panel : Ext.panel.Panel, FieldAncestor
    {
        /// <summary>
        /// If specified, the properties in this object are used as default config values for each Ext.form.Labelable
        /// instance (e.g. Ext.form.field.Base or Ext.form.FieldContainer) that is added as a descendant of
        /// this container. Corresponding values specified in an individual field's own configuration, or from the defaults config of its parent container, will take precedence. See the
        /// documentation for Ext.form.Labelable to see what config options may be specified in the fieldDefaults.
        /// Example:
        /// <code>new <see cref="Ext.form.Panel">Ext.form.Panel</see>({
        /// fieldDefaults: {
        /// labelAlign: 'left',
        /// labelWidth: 100
        /// },
        /// items: [{
        /// xtype: 'fieldset',
        /// defaults: {
        /// labelAlign: 'top'
        /// },
        /// items: [{
        /// name: 'field1'
        /// }, {
        /// name: 'field2'
        /// }]
        /// }, {
        /// xtype: 'fieldset',
        /// items: [{
        /// name: 'field3',
        /// labelWidth: 150
        /// }, {
        /// name: 'field4'
        /// }]
        /// }]
        /// });
        /// </code>
        /// In this example, field1 and field2 will get labelAlign:'top' (from the fieldset's defaults) and labelWidth:100
        /// (from fieldDefaults), field3 and field4 will both get labelAlign:'left' (from fieldDefaults and field3 will use
        /// the labelWidth:150 from its own config.
        /// </summary>
        public JsObject fieldDefaults;
        /// <summary>
        /// If set to true, sets up an interval task (using the pollInterval) in which the
        /// panel's fields are repeatedly checked for changes in their values. This is in addition to the normal detection
        /// each field does on its own input element, and is not needed in most cases. It does, however, provide a
        /// means to absolutely guarantee detection of all changes including some edge cases in some browsers which
        /// do not fire native events. Defaults to false.
        /// </summary>
        public bool pollForChanges;
        /// <summary>
        /// Interval in milliseconds at which the form's fields are checked for value changes. Only used if
        /// the pollForChanges option is set to true. Defaults to 500 milliseconds.
        /// </summary>
        public JsNumber pollInterval;
        /// <summary>
        /// Forces each field within the form panel to
        /// check if its value has changed.
        /// </summary>
        public void checkChange(){}
        /// <summary>
        /// </summary>
        private void createForm(){}
        /// <summary>
        /// Provides access to the Form which this Panel contains.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>The <see cref="Ext.form.Basic">Form</see> which this Panel contains.</p>
        /// </div>
        /// </returns>
        public Basic getForm(){return null;}
        /// <summary>
        /// Returns the currently loaded Ext.data.Model instance if one was loaded via loadRecord.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see></span><div><p>The loaded instance</p>
        /// </div>
        /// </returns>
        public Ext.data.Model getRecord(){return null;}
        /// <summary>
        /// Convenience function for fetching the current value of each field in the form. This is the same as calling
        /// this.getForm().getValues().
        /// Retrieves the fields in the form as a set of key/value pairs, using their
        /// <see cref="Ext.form.field.Field.getSubmitData">getSubmitData()</see> method to collect the values.
        /// If multiple fields return values under the same name those values will be combined into an Array.
        /// This is similar to <see cref="Ext.form.Basic.getFieldValues">getFieldValues</see> except that this method
        /// collects only String values for submission, while getFieldValues collects type-specific data
        /// values (e.g. Date objects for date fields.)
        /// </summary>
        /// <param name="asString"><p>If true, will return the key/value collection as a single
        /// URL-encoded param string.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="dirtyOnly"><p>If true, only fields that are dirty will be included in the result.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="includeEmptyText"><p>If true, the configured emptyText of empty fields will be used.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="useDataValues"><p>If true, the <see cref="Ext.form.field.Field.getModelData">getModelData</see>
        /// method is used to retrieve values from fields, otherwise the <see cref="Ext.form.field.Field.getSubmitData">getSubmitData</see>
        /// method is used.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="String">String</see>/<see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public object getValues(object asString=null, object dirtyOnly=null, object includeEmptyText=null, object useDataValues=null){return null;}
        /// <summary>
        /// Handle errorchange events on sub-fields; invoke the aggregated event and method
        /// </summary>
        /// <param name="labelable">
        /// </param>
        /// <param name="activeError">
        /// </param>
        public virtual void handleFieldErrorChange(object labelable, object activeError){}
        /// <summary>
        /// Handle validitychange events on sub-fields; invoke the aggregated event and method
        /// </summary>
        /// <param name="field">
        /// </param>
        /// <param name="isValid">
        /// </param>
        public virtual void handleFieldValidityChange(object field, object isValid){}
        /// <summary>
        /// Initializes the FieldAncestor's state; this must be called from the initComponent method of any components
        /// importing this mixin.
        /// </summary>
        public virtual void initFieldAncestor(){}
        /// <summary>
        /// Initialize the fieldDefaults object
        /// </summary>
        public virtual void initFieldDefaults(){}
        /// <summary>
        /// This is a proxy for the underlying BasicForm's Ext.form.Basic.load call.
        /// </summary>
        /// <param name="options"><p>The options to pass to the action (see <see cref="Ext.form.Basic.load">Ext.form.Basic.load</see> and
        /// <see cref="Ext.form.Basic.doAction">Ext.form.Basic.doAction</see> for details)</p>
        /// </param>
        public void load(object options){}
        /// <summary>
        /// Loads an Ext.data.Model into this form (internally just calls Ext.form.Basic.loadRecord)
        /// See also trackResetOnLoad.
        /// </summary>
        /// <param name="record"><p>The record to load</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.form.Basic">Ext.form.Basic</see></span><div><p>The <see cref="Ext.form.Basic">Ext.form.Basic</see> attached to this FormPanel</p>
        /// </div>
        /// </returns>
        public Basic loadRecord(Ext.data.Model record){return null;}
        /// <summary>
        /// Called when a Ext.form.field.Field instance is added to the container's subtree.
        /// </summary>
        /// <param name="field"><p>The field which was added</p>
        /// </param>
        public virtual void onFieldAdded(Ext.form.field.Field field){}
        /// <summary>
        /// Handle the addition and removal of components in the FieldAncestor component's child tree.
        /// </summary>
        /// <param name="parent">
        /// </param>
        /// <param name="child">
        /// </param>
        public virtual void onFieldAncestorSubtreeChange(object parent, object child){}
        /// <summary>
        /// Fired when the error message of any field within the container changes.
        /// </summary>
        /// <param name="field"><p>The sub-field whose active error changed</p>
        /// </param>
        /// <param name="error"><p>The new active error message</p>
        /// </param>
        public virtual void onFieldErrorChange(Labelable field, JsString error){}
        /// <summary>
        /// Called when a Ext.form.field.Field instance is removed from the container's subtree.
        /// </summary>
        /// <param name="field"><p>The field which was removed</p>
        /// </param>
        public virtual void onFieldRemoved(Ext.form.field.Field field){}
        /// <summary>
        /// Fired when the validity of any field within the container changes.
        /// </summary>
        /// <param name="field"><p>The sub-field whose validity changed</p>
        /// </param>
        /// <param name="valid"><p>The new validity state</p>
        /// </param>
        public virtual void onFieldValidityChange(Ext.form.field.Field field, bool valid){}
        /// <summary>
        /// Called when a Ext.form.Labelable instance is added to the container's subtree.
        /// </summary>
        /// <param name="labelable"><p>The instance that was added</p>
        /// </param>
        public virtual void onLabelableAdded(Labelable labelable){}
        /// <summary>
        /// Called when a Ext.form.Labelable instance is removed from the container's subtree.
        /// </summary>
        /// <param name="labelable"><p>The instance that was removed</p>
        /// </param>
        public virtual void onLabelableRemoved(Labelable labelable){}
        /// <summary>
        /// Start an interval task to continuously poll all the fields in the form for changes in their
        /// values. This is normally started automatically by setting the pollForChanges config.
        /// </summary>
        /// <param name="interval"><p>The interval in milliseconds at which the check should run.</p>
        /// </param>
        public void startPolling(JsNumber interval){}
        /// <summary>
        /// Stop a running interval task that was started by startPolling.
        /// </summary>
        public void stopPolling(){}
        /// <summary>
        /// This is a proxy for the underlying BasicForm's Ext.form.Basic.submit call.
        /// </summary>
        /// <param name="options"><p>The options to pass to the action (see <see cref="Ext.form.Basic.submit">Ext.form.Basic.submit</see> and
        /// <see cref="Ext.form.Basic.doAction">Ext.form.Basic.doAction</see> for details)</p>
        /// </param>
        public void submit(object options){}
        public Panel(Ext.form.PanelConfig config){}
        public Panel(){}
        public Panel(params object[] args){}
    }
    #endregion
    #region PanelConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PanelConfig : Ext.panel.PanelConfig
    {
        /// <summary>
        /// If specified, the properties in this object are used as default config values for each Ext.form.Labelable
        /// instance (e.g. Ext.form.field.Base or Ext.form.FieldContainer) that is added as a descendant of
        /// this container. Corresponding values specified in an individual field's own configuration, or from the defaults config of its parent container, will take precedence. See the
        /// documentation for Ext.form.Labelable to see what config options may be specified in the fieldDefaults.
        /// Example:
        /// <code>new <see cref="Ext.form.Panel">Ext.form.Panel</see>({
        /// fieldDefaults: {
        /// labelAlign: 'left',
        /// labelWidth: 100
        /// },
        /// items: [{
        /// xtype: 'fieldset',
        /// defaults: {
        /// labelAlign: 'top'
        /// },
        /// items: [{
        /// name: 'field1'
        /// }, {
        /// name: 'field2'
        /// }]
        /// }, {
        /// xtype: 'fieldset',
        /// items: [{
        /// name: 'field3',
        /// labelWidth: 150
        /// }, {
        /// name: 'field4'
        /// }]
        /// }]
        /// });
        /// </code>
        /// In this example, field1 and field2 will get labelAlign:'top' (from the fieldset's defaults) and labelWidth:100
        /// (from fieldDefaults), field3 and field4 will both get labelAlign:'left' (from fieldDefaults and field3 will use
        /// the labelWidth:150 from its own config.
        /// </summary>
        public JsObject fieldDefaults;
        /// <summary>
        /// If set to true, sets up an interval task (using the pollInterval) in which the
        /// panel's fields are repeatedly checked for changes in their values. This is in addition to the normal detection
        /// each field does on its own input element, and is not needed in most cases. It does, however, provide a
        /// means to absolutely guarantee detection of all changes including some edge cases in some browsers which
        /// do not fire native events. Defaults to false.
        /// </summary>
        public bool pollForChanges;
        /// <summary>
        /// Interval in milliseconds at which the form's fields are checked for value changes. Only used if
        /// the pollForChanges option is set to true. Defaults to 500 milliseconds.
        /// </summary>
        public JsNumber pollInterval;
        public PanelConfig(params object[] args){}
    }
    #endregion
    #region PanelEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class PanelEvents : Ext.panel.PanelEvents
    {
        /// <summary>
        /// Fires when an action is completed.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="action"><p>The <see cref="Ext.form.action.Action">Ext.form.action.Action</see> that completed</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void actioncomplete(Basic @this, Ext.form.action.Action action, object eOpts){}
        /// <summary>
        /// Fires when an action fails.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="action"><p>The <see cref="Ext.form.action.Action">Ext.form.action.Action</see> that failed</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void actionfailed(Basic @this, Ext.form.action.Action action, object eOpts){}
        /// <summary>
        /// Fires before any action is performed. Return false to cancel the action.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="action"><p>The <see cref="Ext.form.action.Action">Ext.form.action.Action</see> to be performed</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforeaction(Basic @this, Ext.form.action.Action action, object eOpts){}
        /// <summary>
        /// Fires when the dirty state of the entire form changes.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="dirty"><p><c>true</c> if the form is now dirty, <c>false</c> if it is no longer dirty.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void dirtychange(Basic @this, bool dirty, object eOpts){}
        /// <summary>
        /// Fires when the active error message is changed for any one of the Ext.form.Labelable instances
        /// within this container.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="The"><p>Labelable instance whose active error was changed</p>
        /// </param>
        /// <param name="error"><p>The active error message</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void fielderrorchange(FieldAncestor @this, Labelable The, JsString error, object eOpts){}
        /// <summary>
        /// Fires when the validity state of any one of the Ext.form.field.Field instances within this
        /// container changes.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="The"><p>Field instance whose validity changed</p>
        /// </param>
        /// <param name="isValid"><p>The field's new validity state</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void fieldvaliditychange(FieldAncestor @this, Labelable The, JsString isValid, object eOpts){}
        /// <summary>
        /// Fires when the validity of the entire form changes.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="valid"><p><c>true</c> if the form is now valid, <c>false</c> if it is now invalid.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void validitychange(Basic @this, bool valid, object eOpts){}
        public PanelEvents(params object[] args){}
    }
    #endregion
}
