//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region Radio
    /// <inheritdocs />
    /// <summary>
    /// <p>Single radio field. Similar to checkbox, but automatically handles making sure only one radio is checked
    /// at a time within a group of radios with the same name.</p>
    /// <h1>Labeling</h1>
    /// <p>In addition to the <see cref="Ext.form.Labelable">standard field labeling options</see>, radio buttons
    /// may be given an optional <see cref="Ext.form.field.RadioConfig.boxLabel">boxLabel</see> which will be displayed immediately to the right of the input. Also
    /// see <see cref="Ext.form.RadioGroup">Ext.form.RadioGroup</see> for a convenient method of grouping related radio buttons.</p>
    /// <h1>Values</h1>
    /// <p>The main value of a Radio field is a boolean, indicating whether or not the radio is checked.</p>
    /// <p>The following values will check the radio:</p>
    /// <ul>
    /// <li><c>true</c></li>
    /// <li><c>'true'</c></li>
    /// <li><c>'1'</c></li>
    /// <li><c>'on'</c></li>
    /// </ul>
    /// <p>Any other value will uncheck it.</p>
    /// <p>In addition to the main boolean value, you may also specify a separate <see cref="Ext.form.field.RadioConfig.inputValue">inputValue</see>. This will be sent
    /// as the parameter value when the form is <see cref="Ext.form.Basic.submit">submitted</see>. You will want to set this
    /// value if you have multiple radio buttons with the same <see cref="Ext.form.field.RadioConfig.name">name</see>, as is almost always the case.</p>
    /// <h1>Example usage</h1>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.Panel">Ext.form.Panel</see>', {
    /// title      : 'Order Form',
    /// width      : 300,
    /// bodyPadding: 10,
    /// renderTo   : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// items: [
    /// {
    /// xtype      : 'fieldcontainer',
    /// fieldLabel : 'Size',
    /// defaultType: 'radiofield',
    /// defaults: {
    /// flex: 1
    /// },
    /// layout: 'hbox',
    /// items: [
    /// {
    /// boxLabel  : 'M',
    /// name      : 'size',
    /// inputValue: 'm',
    /// id        : 'radio1'
    /// }, {
    /// boxLabel  : 'L',
    /// name      : 'size',
    /// inputValue: 'l',
    /// id        : 'radio2'
    /// }, {
    /// boxLabel  : 'XL',
    /// name      : 'size',
    /// inputValue: 'xl',
    /// id        : 'radio3'
    /// }
    /// ]
    /// },
    /// {
    /// xtype      : 'fieldcontainer',
    /// fieldLabel : 'Color',
    /// defaultType: 'radiofield',
    /// defaults: {
    /// flex: 1
    /// },
    /// layout: 'hbox',
    /// items: [
    /// {
    /// boxLabel  : 'Blue',
    /// name      : 'color',
    /// inputValue: 'blue',
    /// id        : 'radio4'
    /// }, {
    /// boxLabel  : 'Grey',
    /// name      : 'color',
    /// inputValue: 'grey',
    /// id        : 'radio5'
    /// }, {
    /// boxLabel  : 'Black',
    /// name      : 'color',
    /// inputValue: 'black',
    /// id        : 'radio6'
    /// }
    /// ]
    /// }
    /// ],
    /// bbar: [
    /// {
    /// text: 'Smaller Size',
    /// handler: function() {
    /// var radio1 = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio1'),
    /// radio2 = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio2'),
    /// radio3 = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio3');
    /// //if L is selected, change to M
    /// if (radio2.getValue()) {
    /// radio1.setValue(true);
    /// return;
    /// }
    /// //if XL is selected, change to L
    /// if (radio3.getValue()) {
    /// radio2.setValue(true);
    /// return;
    /// }
    /// //if nothing is set, set size to S
    /// radio1.setValue(true);
    /// }
    /// },
    /// {
    /// text: 'Larger Size',
    /// handler: function() {
    /// var radio1 = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio1'),
    /// radio2 = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio2'),
    /// radio3 = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio3');
    /// //if M is selected, change to L
    /// if (radio1.getValue()) {
    /// radio2.setValue(true);
    /// return;
    /// }
    /// //if L is selected, change to XL
    /// if (radio2.getValue()) {
    /// radio3.setValue(true);
    /// return;
    /// }
    /// //if nothing is set, set size to XL
    /// radio3.setValue(true);
    /// }
    /// },
    /// '-',
    /// {
    /// text: 'Select color',
    /// menu: {
    /// indent: false,
    /// items: [
    /// {
    /// text: 'Blue',
    /// handler: function() {
    /// var radio = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio4');
    /// radio.setValue(true);
    /// }
    /// },
    /// {
    /// text: 'Grey',
    /// handler: function() {
    /// var radio = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio5');
    /// radio.setValue(true);
    /// }
    /// },
    /// {
    /// text: 'Black',
    /// handler: function() {
    /// var radio = <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>('radio6');
    /// radio.setValue(true);
    /// }
    /// }
    /// ]
    /// }
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Radio : Checkbox
    {
        /// <summary>
        /// true in this class to identify an object as an instantiated Radio, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isRadio{get;set;}
        /// <summary>
        /// If this radio is part of a group, it will return the selected value
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div>
        /// </div>
        /// </returns>
        public JsString getGroupValue(){return null;}
        public Radio(RadioConfig config){}
        public Radio(){}
        public Radio(params object[] args){}
    }
    #endregion
    #region RadioConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class RadioConfig : CheckboxConfig
    {
        public RadioConfig(params object[] args){}
    }
    #endregion
    #region RadioEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class RadioEvents : CheckboxEvents
    {
        public RadioEvents(params object[] args){}
    }
    #endregion
}
