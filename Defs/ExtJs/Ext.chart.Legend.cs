//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.chart
{
    #region Legend
    /// <inheritdocs />
    /// <summary>
    /// <p>Defines a legend for a chart's series.
    /// The 'chart' member must be set prior to rendering.
    /// The legend class displays a list of legend items each of them related with a
    /// series being rendered. In order to render the legend item of the proper series
    /// the series configuration object must have <c>showInLegend</c> set to true.</p>
    /// <p>The legend configuration object accepts a <c>position</c> as parameter.
    /// The <c>position</c> parameter can be <c>left</c>, <c>right</c>
    /// <c>top</c> or <c>bottom</c>. For example:</p>
    /// <pre><code>legend: {
    /// position: 'right'
    /// },
    /// </code></pre>
    /// <h2>Example</h2>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.JsonStore">Ext.data.JsonStore</see>', {
    /// fields: ['name', 'data1', 'data2', 'data3', 'data4', 'data5'],
    /// data: [
    /// { 'name': 'metric one',   'data1': 10, 'data2': 12, 'data3': 14, 'data4': 8,  'data5': 13 },
    /// { 'name': 'metric two',   'data1': 7,  'data2': 8,  'data3': 16, 'data4': 10, 'data5': 3  },
    /// { 'name': 'metric three', 'data1': 5,  'data2': 2,  'data3': 14, 'data4': 12, 'data5': 7  },
    /// { 'name': 'metric four',  'data1': 2,  'data2': 14, 'data3': 6,  'data4': 1,  'data5': 23 },
    /// { 'name': 'metric five',  'data1': 27, 'data2': 38, 'data3': 36, 'data4': 13, 'data5': 33 }
    /// ]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.chart.Chart">Ext.chart.Chart</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// width: 500,
    /// height: 300,
    /// animate: true,
    /// store: store,
    /// shadow: true,
    /// theme: 'Category1',
    /// legend: {
    /// position: 'top'
    /// },
    /// axes: [
    /// {
    /// type: 'Numeric',
    /// grid: true,
    /// position: 'left',
    /// fields: ['data1', 'data2', 'data3', 'data4', 'data5'],
    /// title: 'Sample Values',
    /// grid: {
    /// odd: {
    /// opacity: 1,
    /// fill: '#ddd',
    /// stroke: '#bbb',
    /// 'stroke-width': 1
    /// }
    /// },
    /// minimum: 0,
    /// adjustMinimumByMajorUnit: 0
    /// },
    /// {
    /// type: 'Category',
    /// position: 'bottom',
    /// fields: ['name'],
    /// title: 'Sample Metrics',
    /// grid: true,
    /// label: {
    /// rotate: {
    /// degrees: 315
    /// }
    /// }
    /// }
    /// ],
    /// series: [{
    /// type: 'area',
    /// highlight: false,
    /// axis: 'left',
    /// xField: 'name',
    /// yField: ['data1', 'data2', 'data3', 'data4', 'data5'],
    /// style: {
    /// opacity: 0.93
    /// }
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Legend : Ext.Base
    {
        /// <summary>
        /// Fill style for the legend box
        /// Defaults to: <c>&quot;#FFF&quot;</c>
        /// </summary>
        public JsString boxFill;
        /// <summary>
        /// Style of the stroke for the legend box
        /// Defaults to: <c>&quot;#000&quot;</c>
        /// </summary>
        public JsString boxStroke;
        /// <summary>
        /// Width of the stroke for the legend box
        /// Defaults to: <c>1</c>
        /// </summary>
        public JsString boxStrokeWidth;
        /// <summary>
        /// Sets the z-index for the legend. Defaults to 100.
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber boxZIndex;
        /// <summary>
        /// Amount of space between legend items
        /// Defaults to: <c>10</c>
        /// </summary>
        public JsNumber itemSpacing;
        /// <summary>
        /// Color to be used for the legend labels, eg '#000'
        /// Defaults to: <c>&quot;#000&quot;</c>
        /// </summary>
        public JsString labelColor;
        /// <summary>
        /// Font to be used for the legend labels, eg '12px Helvetica'
        /// Defaults to: <c>&quot;12px Helvetica, sans-serif&quot;</c>
        /// </summary>
        public JsString labelFont;
        /// <summary>
        /// Amount of padding between the legend box's border and its items
        /// Defaults to: <c>5</c>
        /// </summary>
        public JsNumber padding;
        /// <summary>
        /// The position of the legend in relation to the chart. One of: "top",
        /// "bottom", "left", "right", or "float". If set to "float", then the legend
        /// box will be positioned at the point denoted by the x and y parameters.
        /// Defaults to: <c>&quot;bottom&quot;</c>
        /// </summary>
        public JsString position;
        /// <summary>
        /// If set to true the legend will be refreshed when the chart is.
        /// This is useful to update the legend items if series are
        /// added/removed/updated from the chart. Default is true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool update;
        /// <summary>
        /// Whether or not the legend should be displayed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool visible;
        /// <summary>
        /// X-position of the legend box. Used directly if position is set to "float", otherwise
        /// it will be calculated dynamically.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber x;
        /// <summary>
        /// Y-position of the legend box. Used directly if position is set to "float", otherwise
        /// it will be calculated dynamically.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber y;
        /// <summary>
        /// Whether the legend box is oriented vertically, i.e. if it is on the left or right side or floating.
        /// </summary>
        public bool isVertical{get;set;}
        /// <summary>
        /// Creates new Legend.
        /// </summary>
        /// <param name="config"><p>Config object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public Legend(object config=null){}
        /// <summary>
        /// Create all the sprites for the legend
        /// </summary>
        private void create(){}
        /// <summary>
        /// Create the box around the legend items
        /// </summary>
        private void createBox(){}
        /// <summary>
        /// Create the series markers and labels
        /// </summary>
        private void createItems(){}
        /// <summary>
        /// Get the bounds for the legend's outer box
        /// </summary>
        private void getBBox(){}
        /// <summary>
        /// Determine whether the legend should be displayed. Looks at the legend's 'visible' config,
        /// and also the 'showInLegend' config for each of the series.
        /// </summary>
        private void isDisplayed(){}
        /// <summary>
        /// toggle
        /// </summary>
        /// <param name="Whether"><p>to show or hide the legend.</p>
        /// </param>
        public void toggle(bool Whether){}
        /// <summary>
        /// Update the position of all the legend's sprites to match its current x/y values
        /// </summary>
        private void updatePosition(){}
        public Legend(LegendConfig config){}
        public Legend(params object[] args){}
    }
    #endregion
    #region LegendConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LegendConfig : Ext.BaseConfig
    {
        /// <summary>
        /// Fill style for the legend box
        /// Defaults to: <c>&quot;#FFF&quot;</c>
        /// </summary>
        public JsString boxFill;
        /// <summary>
        /// Style of the stroke for the legend box
        /// Defaults to: <c>&quot;#000&quot;</c>
        /// </summary>
        public JsString boxStroke;
        /// <summary>
        /// Width of the stroke for the legend box
        /// Defaults to: <c>1</c>
        /// </summary>
        public JsString boxStrokeWidth;
        /// <summary>
        /// Sets the z-index for the legend. Defaults to 100.
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber boxZIndex;
        /// <summary>
        /// Amount of space between legend items
        /// Defaults to: <c>10</c>
        /// </summary>
        public JsNumber itemSpacing;
        /// <summary>
        /// Color to be used for the legend labels, eg '#000'
        /// Defaults to: <c>&quot;#000&quot;</c>
        /// </summary>
        public JsString labelColor;
        /// <summary>
        /// Font to be used for the legend labels, eg '12px Helvetica'
        /// Defaults to: <c>&quot;12px Helvetica, sans-serif&quot;</c>
        /// </summary>
        public JsString labelFont;
        /// <summary>
        /// Amount of padding between the legend box's border and its items
        /// Defaults to: <c>5</c>
        /// </summary>
        public JsNumber padding;
        /// <summary>
        /// The position of the legend in relation to the chart. One of: "top",
        /// "bottom", "left", "right", or "float". If set to "float", then the legend
        /// box will be positioned at the point denoted by the x and y parameters.
        /// Defaults to: <c>&quot;bottom&quot;</c>
        /// </summary>
        public JsString position;
        /// <summary>
        /// If set to true the legend will be refreshed when the chart is.
        /// This is useful to update the legend items if series are
        /// added/removed/updated from the chart. Default is true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool update;
        /// <summary>
        /// Whether or not the legend should be displayed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool visible;
        /// <summary>
        /// X-position of the legend box. Used directly if position is set to "float", otherwise
        /// it will be calculated dynamically.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber x;
        /// <summary>
        /// Y-position of the legend box. Used directly if position is set to "float", otherwise
        /// it will be calculated dynamically.
        /// Defaults to: <c>0</c>
        /// </summary>
        public JsNumber y;
        public LegendConfig(params object[] args){}
    }
    #endregion
    #region LegendEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class LegendEvents : Ext.BaseEvents
    {
        public LegendEvents(params object[] args){}
    }
    #endregion
}
