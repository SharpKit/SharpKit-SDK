//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.association
{
    #region Association
    /// <inheritdocs />
    /// <summary>
    /// <p>Associations enable you to express relationships between different <see cref="Ext.data.Model">Models</see>. Let's say we're
    /// writing an ecommerce system where Users can make Orders - there's a relationship between these Models that we can
    /// express like this:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['id', 'name', 'email'],
    /// hasMany: {model: 'Order', name: 'orders'}
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('Order', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['id', 'user_id', 'status', 'price'],
    /// belongsTo: 'User'
    /// });
    /// </code></pre>
    /// <p>We've set up two models - User and Order - and told them about each other. You can set up as many associations on
    /// each Model as you need using the two default types - <see cref="Ext.data.association.HasMany">hasMany</see> and <see cref="Ext.data.association.BelongsTo">belongsTo</see>. There's much more detail on the usage of each of those inside their
    /// documentation pages. If you're not familiar with Models already, <see cref="Ext.data.Model">there is plenty on those too</see>.</p>
    /// <p><strong>Further Reading</strong></p>
    /// <ul>
    /// <li><see cref="Ext.data.association.HasMany">hasMany associations</see></li>
    /// <li><see cref="Ext.data.association.BelongsTo">belongsTo associations</see></li>
    /// <li><see cref="Ext.data.association.HasOne">hasOne associations</see></li>
    /// <li><see cref="Ext.data.Model">using Models</see></li>
    /// </ul>
    /// <h1>Self association models</h1>
    /// <p>We can also have models that create parent/child associations between the same type. Below is an example, where
    /// groups can be nested inside other groups:</p>
    /// <pre><code>// Server Data
    /// {
    /// "groups": {
    /// "id": 10,
    /// "parent_id": 100,
    /// "name": "Main Group",
    /// "parent_group": {
    /// "id": 100,
    /// "parent_id": null,
    /// "name": "Parent Group"
    /// },
    /// "child_groups": [{
    /// "id": 2,
    /// "parent_id": 10,
    /// "name": "Child Group 1"
    /// },{
    /// "id": 3,
    /// "parent_id": 10,
    /// "name": "Child Group 2"
    /// },{
    /// "id": 4,
    /// "parent_id": 10,
    /// "name": "Child Group 3"
    /// }]
    /// }
    /// }
    /// // Client code
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('Group', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['id', 'parent_id', 'name'],
    /// proxy: {
    /// type: 'ajax',
    /// url: 'data.json',
    /// reader: {
    /// type: 'json',
    /// root: 'groups'
    /// }
    /// },
    /// associations: [{
    /// type: 'hasMany',
    /// model: 'Group',
    /// primaryKey: 'id',
    /// foreignKey: 'parent_id',
    /// autoLoad: true,
    /// associationKey: 'child_groups' // read child data from child_groups
    /// }, {
    /// type: 'belongsTo',
    /// model: 'Group',
    /// primaryKey: 'id',
    /// foreignKey: 'parent_id',
    /// associationKey: 'parent_group' // read parent data from parent_group
    /// }]
    /// });
    /// <see cref="Ext.ExtContext.onReady">Ext.onReady</see>(function(){
    /// Group.load(10, {
    /// success: function(group){
    /// console.log(group.getGroup().get('name'));
    /// group.groups().each(function(rec){
    /// console.log(rec.get('name'));
    /// });
    /// }
    /// });
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Association : Ext.Base
    {
        /// <summary>
        /// The string name of the model that is being associated with.
        /// <strong>NB!</strong> This config is required when instantiating the Association directly.
        /// When defining the association as a config object inside Model, the <see cref="Ext.data.association.AssociationConfig.model">model</see>
        /// configuration will shadow this config.
        /// </summary>
        public JsString associatedModel;
        /// <summary>
        /// The name of the property in the data to read the association from. Defaults to the name of the associated model.
        /// </summary>
        public JsString associationKey;
        /// <summary>
        /// The string name of the model that is being associated with.
        /// This config option is to be used when defining the association as a config
        /// object within Model.  The value is then mapped to <see cref="Ext.data.association.AssociationConfig.associatedModel">associatedModel</see> when
        /// Association is instantiated inside Model.
        /// </summary>
        public JsString model;
        /// <summary>
        /// The string name of the model that owns the association.
        /// <strong>NB!</strong> This config is required when instantiating the Association directly.
        /// However, it cannot be used at all when defining the association as a config
        /// object inside Model, because the name of the model itself will be supplied
        /// automatically as the value of this config.
        /// </summary>
        public JsString ownerModel;
        /// <summary>
        /// The name of the primary key on the associated model. In general this will be the
        /// Ext.data.Model.idProperty of the Model.
        /// Defaults to: <c>&quot;id&quot;</c>
        /// </summary>
        public JsString primaryKey;
        /// <summary>
        /// A special reader to read associated data
        /// </summary>
        public Ext.data.reader.Reader reader;
        /// <summary>
        /// The name of the model is on the other end of the association (e.g. if a User model hasMany Orders, this is
        /// 'Order')
        /// </summary>
        public JsString associatedName{get;set;}
        /// <summary>
        /// The name of the model that 'owns' the association
        /// </summary>
        public JsString ownerName{get;set;}
        /// <summary>
        /// Creates the Association object.
        /// </summary>
        /// <param name="config"><p>Config object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public Association(object config=null){}
        /// <summary>
        /// Get a specialized reader for reading associated data
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.reader.Reader">Ext.data.reader.Reader</see></span><div><p>The reader, null if not supplied</p>
        /// </div>
        /// </returns>
        public Ext.data.reader.Reader getReader(){return null;}
        public Association(AssociationConfig config){}
        public Association(params object[] args){}
    }
    #endregion
    #region AssociationConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AssociationConfig : Ext.BaseConfig
    {
        /// <summary>
        /// The string name of the model that is being associated with.
        /// <strong>NB!</strong> This config is required when instantiating the Association directly.
        /// When defining the association as a config object inside Model, the <see cref="Ext.data.association.AssociationConfig.model">model</see>
        /// configuration will shadow this config.
        /// </summary>
        public JsString associatedModel;
        /// <summary>
        /// The name of the property in the data to read the association from. Defaults to the name of the associated model.
        /// </summary>
        public JsString associationKey;
        /// <summary>
        /// The string name of the model that is being associated with.
        /// This config option is to be used when defining the association as a config
        /// object within Model.  The value is then mapped to <see cref="Ext.data.association.AssociationConfig.associatedModel">associatedModel</see> when
        /// Association is instantiated inside Model.
        /// </summary>
        public JsString model;
        /// <summary>
        /// The string name of the model that owns the association.
        /// <strong>NB!</strong> This config is required when instantiating the Association directly.
        /// However, it cannot be used at all when defining the association as a config
        /// object inside Model, because the name of the model itself will be supplied
        /// automatically as the value of this config.
        /// </summary>
        public JsString ownerModel;
        /// <summary>
        /// The name of the primary key on the associated model. In general this will be the
        /// Ext.data.Model.idProperty of the Model.
        /// Defaults to: <c>&quot;id&quot;</c>
        /// </summary>
        public JsString primaryKey;
        /// <summary>
        /// A special reader to read associated data
        /// </summary>
        public Ext.data.reader.Reader reader;
        public AssociationConfig(params object[] args){}
    }
    #endregion
    #region AssociationEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class AssociationEvents : Ext.BaseEvents
    {
        public AssociationEvents(params object[] args){}
    }
    #endregion
}
