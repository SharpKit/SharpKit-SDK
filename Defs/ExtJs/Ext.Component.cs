//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region Component
    /// <inheritdocs />
    /// <summary>
    /// <p>Base class for all Ext components.</p>
    /// <p>The Component base class has built-in support for basic hide/show and enable/disable and size control behavior.</p>
    /// <h2>xtypes</h2>
    /// <p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the xtype
    /// like <see cref="Ext.Component.getXType">getXType</see> and <see cref="Ext.Component.isXType">isXType</see>. See the <i>Component Guide</i> for more information on xtypes and the
    /// Component hierarchy.</p>
    /// <h2>Finding components</h2>
    /// <p>All Components are registered with the <see cref="Ext.ComponentManager">Ext.ComponentManager</see> on construction so that they can be referenced at
    /// any time via <see cref="Ext.ExtContext.getCmp">Ext.getCmp</see>, passing the <see cref="Ext.ComponentConfig.id">id</see>.</p>
    /// <p>Additionally the <see cref="Ext.ComponentQuery">Ext.ComponentQuery</see> provides a CSS-selectors-like way to look up components by their xtype
    /// and many other attributes.  For example the following code will find all textfield components inside component with
    /// <c>id: 'myform'</c>:</p>
    /// <pre><code><see cref="Ext.ComponentQuery.query">Ext.ComponentQuery.query</see>('#myform textfield');
    /// </code></pre>
    /// <h2>Extending <see cref="Ext.Component">Ext.Component</see></h2>
    /// <p>All subclasses of Component may participate in the automated Ext component
    /// lifecycle of creation, rendering and destruction which is provided by the <see cref="Ext.container.Container">Container</see>
    /// class. Components may be added to a Container through the <see cref="Ext.container.ContainerConfig.items">items</see> config option
    /// at the time the Container is created, or they may be added dynamically via the
    /// <see cref="Ext.container.Container.add">add</see> method.</p>
    /// <p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should
    /// subclass Component.</p>
    /// <p>See the Creating new UI controls chapter in <i>Component Guide</i> for details on how and to either extend
    /// or augment Ext JS base classes to create custom Components.</p>
    /// <h2>The <see cref="Ext.Component">Ext.Component</see> class by itself</h2>
    /// <p>Usually one doesn't need to instantiate the <see cref="Ext.Component">Ext.Component</see> class. There are subclasses which implement
    /// specialized use cases, covering most application needs. However it is possible to instantiate a base
    /// Component, and it can be rendered to document, or handled by layouts as the child item of a Container:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.Component">Ext.Component</see>', {
    /// html: 'Hello world!',
    /// width: 300,
    /// height: 200,
    /// padding: 20,
    /// style: {
    /// color: '#FFFFFF',
    /// backgroundColor:'#000000'
    /// },
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p>The Component above creates its encapsulating <c>div</c> upon render, and use the configured HTML as content. More complex
    /// internal structure may be created using the <see cref="Ext.ComponentConfig.renderTpl">renderTpl</see> configuration, although to display database-derived
    /// mass data, it is recommended that an ExtJS data-backed Component such as a <see cref="Ext.view.View">View</see>,
    /// <see cref="Ext.grid.Panel">GridPanel</see>, or <see cref="Ext.tree.Panel">TreePanel</see> be used.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Component : AbstractComponent, Ext.util.Floating
    {
        /// <summary>
        /// true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary,
        /// false to clip any overflowing content.
        /// This should not be combined with overflowX or  overflowY.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool autoScroll;
        /// <summary>
        /// Defines the column width inside column layout.
        /// Can be specified as a number or as a percentage.
        /// </summary>
        public object columnWidth;
        /// <summary>
        /// Specifies whether the floated component should be automatically focused when
        /// it is brought to the front.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool focusOnToFront;
        /// <summary>
        /// When inside FormPanel, any component configured with formBind: true will
        /// be enabled/disabled depending on the validity state of the form.
        /// See Ext.form.Panel for more information and example.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool formBind;
        /// <summary>
        /// Possible values are:
        /// * 'auto' to enable automatic horizontal scrollbar (overflow-x: 'auto').
        /// * 'scroll' to always enable horizontal scrollbar (overflow-x: 'scroll').
        /// The default is overflow-x: 'hidden'. This should not be combined with autoScroll.
        /// </summary>
        public JsString overflowX;
        /// <summary>
        /// Possible values are:
        /// * 'auto' to enable automatic vertical scrollbar (overflow-y: 'auto').
        /// * 'scroll' to always enable vertical scrollbar (overflow-y: 'scroll').
        /// The default is overflow-y: 'hidden'. This should not be combined with autoScroll.
        /// </summary>
        public JsString overflowY;
        /// <summary>
        /// Defines the region inside border layout.
        /// Possible values:
        /// <li>center</li>
        /// <li>north</li>
        /// <li>south</li>
        /// <li>east</li>
        /// <li>west</li>
        /// </summary>
        public JsString region;
        /// <summary>
        /// Specify as true to apply a Resizer to this Component after rendering.
        /// May also be specified as a config object to be passed to the constructor of <see cref="Ext.resizer.Resizer">Resizer</see>
        /// to override any defaults. By default the Component passes its minimum and maximum size, and uses
        /// <c><see cref="Ext.resizer.ResizerConfig.dynamic">Ext.resizer.Resizer.dynamic</see>: false</c>
        /// </summary>
        public object resizable;
        /// <summary>
        /// A valid Ext.resizer.Resizer handles config string. Only applies when resizable = true.
        /// Defaults to: <c>&quot;all&quot;</c>
        /// </summary>
        public JsString resizeHandles;
        /// <summary>
        /// Specifies whether the floating component should be given a shadow. Set to true to automatically create an
        /// Ext.Shadow, or a string indicating the shadow's display Ext.Shadow.mode. Set to false to
        /// disable the shadow.
        /// Defaults to: <c>&quot;sides&quot;</c>
        /// </summary>
        public object shadow;
        /// <summary>
        /// Number of pixels to offset the shadow.
        /// </summary>
        public object shadowOffset;
        /// <summary>
        /// True to automatically call toFront when the show method is called on an already visible,
        /// floating component.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool toFrontOnShow;
        /// <summary>
        /// Only present for floating Components which were inserted as child items of Containers.
        /// Floating Components that are programatically <see cref="Ext.Component.render">rendered</see> will not have a <c>floatParent</c>
        /// property.
        /// For <see cref="Ext.ComponentConfig.floating">floating</see> Components which are child items of a Container, the floatParent will be the owning Container.
        /// For example, the dropdown <see cref="Ext.view.BoundList">BoundList</see> of a ComboBox which is in a Window will have the
        /// Window as its <c>floatParent</c>
        /// See <see cref="Ext.ComponentConfig.floating">floating</see> and <see cref="Ext.Component.zIndexManager">zIndexManager</see>
        /// </summary>
        public Ext.container.Container floatParent{get;set;}
        /// <summary>
        /// Only present for floating Components after they have been rendered.
        /// A reference to the ZIndexManager which is managing this Component's z-index.
        /// The <see cref="Ext.ZIndexManager">ZIndexManager</see> maintains a stack of floating Component z-indices, and also provides
        /// a single modal mask which is insert just beneath the topmost visible modal floating Component.
        /// Floating Components may be <see cref="Ext.Component.toFront">brought to the front</see> or <see cref="Ext.Component.toBack">sent to the back</see> of the
        /// z-index stack.
        /// This defaults to the global <see cref="Ext.WindowManager">ZIndexManager</see> for floating Components that are
        /// programatically <see cref="Ext.Component.render">rendered</see>.
        /// For <see cref="Ext.ComponentConfig.floating">floating</see> Components which are added to a Container, the ZIndexManager is acquired from the first
        /// ancestor Container found which is floating. If no floating ancestor is found, the global <see cref="Ext.WindowManager">ZIndexManager</see> is
        /// used.
        /// See <see cref="Ext.ComponentConfig.floating">floating</see> and <see cref="Ext.Component.zIndexParent">zIndexParent</see>
        /// </summary>
        public ZIndexManager zIndexManager{get;set;}
        /// <summary>
        /// Only present for floating Components which were inserted as child items of Containers, and which have a floating
        /// Container in their containment ancestry.
        /// For <see cref="Ext.ComponentConfig.floating">floating</see> Components which are child items of a Container, the zIndexParent will be a floating
        /// ancestor Container which is responsible for the base z-index value of all its floating descendants. It provides
        /// a <see cref="Ext.ZIndexManager">ZIndexManager</see> which provides z-indexing services for all its descendant floating
        /// Components.
        /// Floating Components that are programatically <see cref="Ext.Component.render">rendered</see> will not have a <c>zIndexParent</c>
        /// property.
        /// For example, the dropdown <see cref="Ext.view.BoundList">BoundList</see> of a ComboBox which is in a Window will have the
        /// Window as its <c>zIndexParent</c>, and will always show above that Window, wherever the Window is placed in the z-index stack.
        /// See <see cref="Ext.ComponentConfig.floating">floating</see> and <see cref="Ext.Component.zIndexManager">zIndexManager</see>
        /// </summary>
        public Ext.container.Container zIndexParent{get;set;}
        /// <summary>
        /// Adds each argument passed to this method to the childEls array.
        /// </summary>
        public override void addChildEls(){}
        /// <summary>
        /// Invoked after the Component has been hidden.
        /// Gets passed the same <c>callback</c> and <c>scope</c> parameters that <see cref="Ext.Component.onHide">onHide</see> received.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected virtual void afterHide(object callback=null, object scope=null){}
        /// <summary>
        /// Invoked after the Component is shown (after onShow is called).
        /// Gets passed the same parameters as <see cref="Ext.ComponentEvents.show">show</see>.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animateTarget">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected virtual void afterShow(object animateTarget=null, object callback=null, object scope=null){}
        /// <summary>
        /// Aligns this floating Component to the specified element
        /// </summary>
        /// <param name="element"><p>The element or <see cref="Ext.Component">Ext.Component</see> to align to. If passing a component, it must be a
        /// component instance. If a string id is passed, it will be used as an element id.</p>
        /// </param>
        /// <param name="position"><p>The position to align to
        /// (see <see cref="Ext.dom.Element.alignTo">Ext.Element.alignTo</see> for more details).</p>
        /// <p>Defaults to: <c>&quot;tl-bl?&quot;</c></p></param>
        /// <param name="offsets"><p>Offset the positioning by [x, y]</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public virtual Ext.Component alignTo(object element, object position=null, object offsets=null){return null;}
        /// <summary>
        /// Invoked before the Component is shown.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected virtual void beforeShow(){}
        /// <summary>
        /// Bubbles up the component/container heirarchy, calling the specified function with each component. The scope
        /// (this) of function call will be the scope provided or the current component. The arguments to the function will
        /// be the args provided or the current component. If the function returns false at any point, the bubble is stopped.
        /// </summary>
        /// <param name="fn"><p>The function to call</p>
        /// </param>
        /// <param name="scope"><p>The scope of the function. Defaults to current node.</p>
        /// </param>
        /// <param name="args"><p>The args to call the function with. Defaults to passing the current component.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.Component bubble(System.Delegate fn, object scope=null, object args=null){return null;}
        /// <summary>
        /// Cancel any deferred focus on this component
        /// </summary>
        protected void cancelFocus(){}
        /// <summary>
        /// Center this Component in its container.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public virtual Ext.Component center(){return null;}
        /// <summary>
        /// Clone the current component using the original config values passed into this instance by default.
        /// </summary>
        /// <param name="overrides"><p>A new config containing any properties to override in the cloned version.
        /// An id property can be passed on this object, otherwise one will be generated to avoid duplicates.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>clone The cloned copy of this component</p>
        /// </div>
        /// </returns>
        public Ext.Component cloneConfig(object overrides){return null;}
        /// <summary>
        /// Moves this floating Component into a constrain region.
        /// By default, this Component is constrained to be within the container it was added to, or the element it was
        /// rendered to.
        /// An alternative constraint may be passed.
        /// </summary>
        /// <param name="constrainTo"><p>The Element or <see cref="Ext.util.Region">Region</see>
        /// into which this Component is to be constrained. Defaults to the element into which this floating Component
        /// was rendered.</p>
        /// </param>
        public virtual void doConstrain(object constrainTo=null){}
        /// <summary>
        /// Find a container above this component at any level by a custom function. If the passed function returns true, the
        /// container will be returned.
        /// See also the <see cref="Ext.Component.up">up</see> method.
        /// </summary>
        /// <param name="fn"><p>The custom function to call with the arguments (container, this component).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.container.Container</see></span><div><p>The first Container for which the custom function returns true</p>
        /// </div>
        /// </returns>
        public Ext.container.Container findParentBy(System.Delegate fn){return null;}
        /// <summary>
        /// Find a container above this component at any level by xtype or class
        /// See also the <see cref="Ext.Component.up">up</see> method.
        /// </summary>
        /// <param name="xtype"><p>The xtype string for a component, or the class of the component directly</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.container.Container">Ext.container.Container</see></span><div><p>The first Container which matches the given xtype or class</p>
        /// </div>
        /// </returns>
        public Ext.container.Container findParentByType(object xtype){return null;}
        /// <summary>
        /// Try to focus this component.
        /// </summary>
        /// <param name="selectText"><p>If applicable, true to also select the text in this component</p>
        /// </param>
        /// <param name="delay"><p>Delay the focus this number of milliseconds (true for 10 milliseconds).</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>The focused Component. Usually <c>this</c> Component. Some Containers may
        /// delegate focus to a descendant Component (<see cref="Ext.window.Window">Window</see>s can do this through their
        /// <see cref="Ext.window.WindowConfig.defaultFocus">defaultFocus</see> config option.</p>
        /// </div>
        /// </returns>
        public Ext.Component focus(object selectText=null, object delay=null){return null;}
        /// <summary>
        /// Gets the current box measurements of the component's underlying element.
        /// </summary>
        /// <param name="local"><p>If true the element's left and top are returned instead of page XY.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>box An object in the format {x, y, width, height}</p>
        /// </div>
        /// </returns>
        public object getBox(object local=null){return null;}
        /// <summary>
        /// Gets the x/y offsets to constrain this float
        /// </summary>
        /// <param name="constrainTo"><p>The Element or <see cref="Ext.util.Region">Region</see>
        /// into which this Component is to be constrained.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The x/y constraints</p>
        /// </div>
        /// </returns>
        public virtual JsNumber[] getConstrainVector(object constrainTo=null){return null;}
        /// <summary>
        /// Gets the current XY position of the component's underlying element.
        /// </summary>
        /// <param name="local"><p>If true the element's left and top are returned instead of page XY.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The XY position of the element (e.g., [100, 200])</p>
        /// </div>
        /// </returns>
        public JsNumber[] getPosition(object local=null){return null;}
        /// <summary>
        /// Gets the xtype for this component as registered with Ext.ComponentManager. For a list of all available
        /// xtypes, see the Ext.Component header. Example usage:
        /// <code>var t = new <see cref="Ext.form.field.Text">Ext.form.field.Text</see>();
        /// alert(t.getXType());  // alerts 'textfield'
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The xtype</p>
        /// </div>
        /// </returns>
        public JsString getXType(){return null;}
        /// <summary>
        /// Hides this Component, setting it to invisible using the configured hideMode.
        /// </summary>
        /// <param name="animateTarget"><p><strong>only valid for <see cref="Ext.ComponentConfig.floating">floating</see> Components
        /// such as <see cref="Ext.window.Window">Window</see>s or <see cref="Ext.tip.ToolTip">ToolTip</see>s, or regular Components which have
        /// been configured with <c>floating: true</c>.</strong>. The target to which the Component should animate while hiding.</p>
        /// <p>Defaults to: <c>null</c></p></param>
        /// <param name="callback"><p>A callback function to call after the Component is hidden.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the callback is executed.
        /// Defaults to this Component.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.Component hide(object animateTarget=null, object callback=null, object scope=null){return null;}
        /// <summary>
        /// The initComponent template method is an important initialization step for a Component. It is intended to be
        /// implemented by each subclass of Ext.Component to provide any needed constructor logic. The
        /// initComponent method of the class being created is called first, with each initComponent method
        /// up the hierarchy to Ext.Component being called thereafter. This makes it easy to implement and,
        /// if needed, override the constructor logic of the Component at any step in the hierarchy.
        /// The initComponent method <strong>must</strong> contain a call to <see cref="Ext.Base.callParent">callParent</see> in order
        /// to ensure that the parent class' initComponent method is also called.
        /// All config options passed to the constructor are applied to <c>this</c> before initComponent is called,
        /// so you can simply access them with <c>this.someOption</c>.
        /// The following example demonstrates using a dynamic string for the text of a button at the time of
        /// instantiation of the class.
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('DynamicButtonText', {
        /// extend: '<see cref="Ext.button.Button">Ext.button.Button</see>',
        /// initComponent: function() {
        /// this.text = new Date();
        /// this.renderTo = <see cref="Ext.ExtContext.getBody">Ext.getBody</see>();
        /// this.callParent();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.onReady">Ext.onReady</see>(function() {
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('DynamicButtonText');
        /// });
        /// </code>
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected virtual void initComponent(){}
        /// <summary>
        /// Allows addition of behavior to the destroy operation.
        /// After calling the superclass’s onDestroy, the Component will be destroyed.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        protected virtual void onDestroy(){}
        /// <summary>
        /// Possibly animates down to a target element.
        /// Allows addition of behavior to the hide operation. After
        /// calling the superclass’s onHide, the Component will be hidden.
        /// Gets passed the same parameters as <see cref="Ext.ComponentEvents.hide">hide</see>.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animateTarget">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected virtual void onHide(object animateTarget=null, object callback=null, object scope=null){}
        /// <summary>
        /// Allows addition of behavior to the show operation. After
        /// calling the superclass's onShow, the Component will be visible.
        /// Override in subclasses where more complex behaviour is needed.
        /// Gets passed the same parameters as <see cref="Ext.ComponentEvents.show">show</see>.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="animateTarget">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected virtual void onShow(object animateTarget=null, object callback=null, object scope=null){}
        /// <summary>
        /// Invoked after the afterShow method is complete.
        /// Gets passed the same <c>callback</c> and <c>scope</c> parameters that <see cref="Ext.Component.afterShow">afterShow</see> received.
        /// <p>This is a <i>template method</i>.
        /// a hook into the functionality of this class.
        /// Feel free to override it in child classes.</p>
        /// </summary>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        protected virtual void onShowComplete(object callback=null, object scope=null){}
        /// <summary>
        /// Scrolls this Component's target element by the passed delta values, optionally animating.
        /// All of the following are equivalent:
        /// <code> comp.scrollBy(10, 10, true);
        /// comp.scrollBy([10, 10], true);
        /// comp.scrollBy({ x: 10, y: 10 }, true);
        /// </code>
        /// </summary>
        /// <param name="deltaX"><p>Either the x delta, an Array specifying x and y deltas or
        /// an object with "x" and "y" properties.</p>
        /// </param>
        /// <param name="deltaY"><p>Either the y delta, or an animate flag or config object.</p>
        /// </param>
        /// <param name="animate"><p>Animate flag/config object if the delta values were passed separately.</p>
        /// </param>
        public void scrollBy(object deltaX, object deltaY, object animate){}
        /// <summary>
        /// This method is called internally by Ext.ZIndexManager to signal that a floating Component has either been
        /// moved to the top of its zIndex stack, or pushed from the top of its zIndex stack.
        /// If a <em>Window</em> is superceded by another Window, deactivating it hides its shadow.
        /// This method also fires the <see cref="Ext.ComponentEvents.activate">activate</see> or
        /// <see cref="Ext.ComponentEvents.deactivate">deactivate</see> event depending on which action occurred.
        /// </summary>
        /// <param name="active"><p>True to activate the Component, false to deactivate it.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <param name="newActive"><p>The newly active Component which is taking over topmost zIndex position.</p>
        /// </param>
        public virtual void setActive(object active=null, object newActive=null){}
        /// <summary>
        /// Sets the overflow on the content element of the component.
        /// </summary>
        /// <param name="scroll"><p>True to allow the Component to auto scroll.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.Component setAutoScroll(bool scroll){return null;}
        /// <summary>
        /// This method allows you to show or hide a LoadMask on top of this component.
        /// </summary>
        /// <param name="load"><p>True to show the default LoadMask, a config object that will be passed to the
        /// LoadMask constructor, or a message String to show. False to hide the current LoadMask.</p>
        /// </param>
        /// <param name="targetEl"><p>True to mask the targetEl of this Component instead of the <c>this.el</c>. For example,
        /// setting this to true on a Panel will cause only the body to be masked.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.LoadMask">Ext.LoadMask</see></span><div><p>The LoadMask instance that has just been shown.</p>
        /// </div>
        /// </returns>
        public LoadMask setLoading(object load, object targetEl=null){return null;}
        /// <summary>
        /// Sets the overflow x/y on the content element of the component. The x/y overflow
        /// values can be any valid CSS overflow (e.g., 'auto' or 'scroll'). By default, the
        /// value is 'hidden'. Passing null for one of the values will erase the inline style.
        /// Passing undefined will preserve the current value.
        /// </summary>
        /// <param name="overflowX"><p>The overflow-x value.</p>
        /// </param>
        /// <param name="overflowY"><p>The overflow-y value.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.Component setOverflowXY(JsString overflowX, JsString overflowY){return null;}
        /// <summary>
        /// Sets the page XY position of the component. To set the left and top instead, use setPosition.
        /// This method fires the move event.
        /// </summary>
        /// <param name="x"><p>The new x position</p>
        /// </param>
        /// <param name="y"><p>The new y position</p>
        /// </param>
        /// <param name="animate"><p>True to animate the Component into its new position. You may also pass an
        /// animation configuration.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.Component setPagePosition(JsNumber x, JsNumber y, object animate=null){return null;}
        /// <summary>
        /// Shows this Component, rendering it first if autoRender or floating are true.
        /// After being shown, a <see cref="Ext.ComponentConfig.floating">floating</see> Component (such as a <see cref="Ext.window.Window">Ext.window.Window</see>), is activated it and
        /// brought to the front of its <see cref="Ext.Component.zIndexManager">z-index stack</see>.
        /// </summary>
        /// <param name="animateTarget"><p><strong>only valid for <see cref="Ext.ComponentConfig.floating">floating</see> Components such as <see cref="Ext.window.Window">Window</see>s or <see cref="Ext.tip.ToolTip">ToolTip</see>s, or regular Components which have been configured
        /// with <c>floating: true</c>.</strong> The target from which the Component should animate from while opening.</p>
        /// <p>Defaults to: <c>null</c></p></param>
        /// <param name="callback"><p>A callback function to call after the Component is displayed.
        /// Only necessary if animation was specified.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the callback is executed.
        /// Defaults to this Component.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.Component show(object animateTarget=null, object callback=null, object scope=null){return null;}
        /// <summary>
        /// Displays component at specific xy position.
        /// A floating component (like a menu) is positioned relative to its ownerCt if any.
        /// Useful for popping up a context menu:
        /// <code>listeners: {
        /// itemcontextmenu: function(view, record, item, index, event, options) {
        /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.menu.Menu">Ext.menu.Menu</see>', {
        /// width: 100,
        /// height: 100,
        /// margin: '0 0 10 0',
        /// items: [{
        /// text: 'regular item 1'
        /// },{
        /// text: 'regular item 2'
        /// },{
        /// text: 'regular item 3'
        /// }]
        /// }).showAt(event.getXY());
        /// }
        /// }
        /// </code>
        /// </summary>
        /// <param name="x"><p>The new x position</p>
        /// </param>
        /// <param name="y"><p>The new y position</p>
        /// </param>
        /// <param name="animate"><p>True to animate the Component into its new position. You may also pass an
        /// animation configuration.</p>
        /// </param>
        public void showAt(JsNumber x, JsNumber y, object animate=null){}
        /// <summary>
        /// Sends this Component to the back of (lower z-index than) any other visible windows
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public virtual Ext.Component toBack(){return null;}
        /// <summary>
        /// Brings this floating Component to the front of any other visible, floating Components managed by the same
        /// ZIndexManager
        /// If this Component is modal, inserts the modal mask just below this Component in the z-index stack.
        /// </summary>
        /// <param name="preventFocus"><p>Specify <c>true</c> to prevent the Component from being focused.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public virtual Ext.Component toFront(object preventFocus=null){return null;}
        /// <summary>
        /// Sets the current box measurements of the component's underlying element.
        /// </summary>
        /// <param name="box"><p>An object in the format {x, y, width, height}</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Component">Ext.Component</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.Component updateBox(object box){return null;}
        public Component(Ext.ComponentConfig config){}
        public Component(){}
        public Component(params object[] args){}
    }
    #endregion
    #region ComponentConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ComponentConfig : AbstractComponentConfig
    {
        /// <summary>
        /// true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary,
        /// false to clip any overflowing content.
        /// This should not be combined with overflowX or  overflowY.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool autoScroll;
        /// <summary>
        /// Defines the column width inside column layout.
        /// Can be specified as a number or as a percentage.
        /// </summary>
        public object columnWidth;
        /// <summary>
        /// Specifies whether the floated component should be automatically focused when
        /// it is brought to the front.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool focusOnToFront;
        /// <summary>
        /// When inside FormPanel, any component configured with formBind: true will
        /// be enabled/disabled depending on the validity state of the form.
        /// See Ext.form.Panel for more information and example.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool formBind;
        /// <summary>
        /// Possible values are:
        /// * 'auto' to enable automatic horizontal scrollbar (overflow-x: 'auto').
        /// * 'scroll' to always enable horizontal scrollbar (overflow-x: 'scroll').
        /// The default is overflow-x: 'hidden'. This should not be combined with autoScroll.
        /// </summary>
        public JsString overflowX;
        /// <summary>
        /// Possible values are:
        /// * 'auto' to enable automatic vertical scrollbar (overflow-y: 'auto').
        /// * 'scroll' to always enable vertical scrollbar (overflow-y: 'scroll').
        /// The default is overflow-y: 'hidden'. This should not be combined with autoScroll.
        /// </summary>
        public JsString overflowY;
        /// <summary>
        /// Defines the region inside border layout.
        /// Possible values:
        /// <li>center</li>
        /// <li>north</li>
        /// <li>south</li>
        /// <li>east</li>
        /// <li>west</li>
        /// </summary>
        public JsString region;
        /// <summary>
        /// Specify as true to apply a Resizer to this Component after rendering.
        /// May also be specified as a config object to be passed to the constructor of <see cref="Ext.resizer.Resizer">Resizer</see>
        /// to override any defaults. By default the Component passes its minimum and maximum size, and uses
        /// <c><see cref="Ext.resizer.ResizerConfig.dynamic">Ext.resizer.Resizer.dynamic</see>: false</c>
        /// </summary>
        public object resizable;
        /// <summary>
        /// A valid Ext.resizer.Resizer handles config string. Only applies when resizable = true.
        /// Defaults to: <c>&quot;all&quot;</c>
        /// </summary>
        public JsString resizeHandles;
        /// <summary>
        /// Specifies whether the floating component should be given a shadow. Set to true to automatically create an
        /// Ext.Shadow, or a string indicating the shadow's display Ext.Shadow.mode. Set to false to
        /// disable the shadow.
        /// Defaults to: <c>&quot;sides&quot;</c>
        /// </summary>
        public object shadow;
        /// <summary>
        /// Number of pixels to offset the shadow.
        /// </summary>
        public object shadowOffset;
        /// <summary>
        /// True to automatically call toFront when the show method is called on an already visible,
        /// floating component.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool toFrontOnShow;
        public ComponentConfig(params object[] args){}
    }
    #endregion
    #region ComponentEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ComponentEvents : AbstractComponentEvents
    {
        public ComponentEvents(params object[] args){}
    }
    #endregion
}
