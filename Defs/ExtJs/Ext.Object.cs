//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region Object
    /// <summary>
    /// <p>A collection of useful static methods to deal with objects.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Object
    {
        /// <summary>
        /// Returns a new object with the given object as the prototype chain.
        /// </summary>
        /// <param name="object"><p>The prototype chain for the new object.</p>
        /// </param>
        public static void chain(object @object){}
        /// <summary>
        /// Parameters<li><span>object</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="object">
        /// </param>
        private static void classify(object @object){}
        /// <summary>
        /// Iterates through an object and invokes the given callback function for each iteration.
        /// The iteration can be stopped by returning false in the callback function. For example:
        /// <code>var person = {
        /// name: 'Jacky'
        /// hairColor: 'black'
        /// loves: ['food', 'sleeping', 'wife']
        /// };
        /// <see cref="Ext.Object.each">Ext.Object.each</see>(person, function(key, value, myself) {
        /// console.log(key + ":" + value);
        /// if (key === 'hairColor') {
        /// return false; // stop the iteration
        /// }
        /// });
        /// </code>
        /// </summary>
        /// <param name="object"><p>The object to iterate</p>
        /// </param>
        /// <param name="fn"><p>The callback function.</p>
        /// <h3>Parameters</h3><ul><li><span>key</span> : <see cref="String">String</see><div></div></li><li><span>value</span> : <see cref="Object">Object</see><div></div></li><li><span>object</span> : <see cref="Object">Object</see><div><p>The object itself</p>
        /// </div></li></ul></param>
        /// <param name="scope"><p>The execution scope (<c>this</c>) of the callback function</p>
        /// </param>
        public static void each(object @object, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Converts a query string back into an object.
        /// Non-recursive:
        /// <code><see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>("foo=1&amp;bar=2"); // returns {foo: 1, bar: 2}
        /// <see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>("foo=&amp;bar=2"); // returns {foo: null, bar: 2}
        /// <see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>("some%20price=%24300"); // returns {'some price': '$300'}
        /// <see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>("colors=red&amp;colors=green&amp;colors=blue"); // returns {colors: ['red', 'green', 'blue']}
        /// </code>
        /// Recursive:
        /// <code><see cref="Ext.Object.fromQueryString">Ext.Object.fromQueryString</see>(
        /// "username=Jacky&amp;"+
        /// "dateOfBirth[day]=1&amp;dateOfBirth[month]=2&amp;dateOfBirth[year]=1911&amp;"+
        /// "hobbies[0]=coding&amp;hobbies[1]=eating&amp;hobbies[2]=sleeping&amp;"+
        /// "hobbies[3][0]=nested&amp;hobbies[3][1]=stuff", true);
        /// // returns
        /// {
        /// username: 'Jacky',
        /// dateOfBirth: {
        /// day: '1',
        /// month: '2',
        /// year: '1911'
        /// },
        /// hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]
        /// }
        /// </code>
        /// </summary>
        /// <param name="queryString"><p>The query string to decode</p>
        /// </param>
        /// <param name="recursive"><p>Whether or not to recursively decode the string. This format is supported by
        /// PHP / Ruby on Rails servers and similar.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public static object fromQueryString(JsString queryString, object recursive=null){return null;}
        /// <summary>
        /// Returns the first matching key corresponding to the given value.
        /// If no matching value is found, null is returned.
        /// <code>var person = {
        /// name: 'Jacky',
        /// loves: 'food'
        /// };
        /// alert(<see cref="Ext.Object.getKey">Ext.Object.getKey</see>(person, 'food')); // alerts 'loves'
        /// </code>
        /// </summary>
        /// <param name="object">
        /// </param>
        /// <param name="value"><p>The value to find</p>
        /// </param>
        public static void getKey(object @object, object value){}
        /// <summary>
        /// Gets all keys of the given object as an array.
        /// <code>var values = <see cref="Ext.Object.getKeys">Ext.Object.getKeys</see>({
        /// name: 'Jacky',
        /// loves: 'food'
        /// }); // ['name', 'loves']
        /// </code>
        /// </summary>
        /// <param name="object">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see>[]</span><div><p>An array of keys from the object</p>
        /// </div>
        /// </returns>
        public static JsString[] getKeys(object @object){return null;}
        /// <summary>
        /// Gets the total number of this object's own properties
        /// <code>var size = <see cref="Ext.Object.getSize">Ext.Object.getSize</see>({
        /// name: 'Jacky',
        /// loves: 'food'
        /// }); // size equals 2
        /// </code>
        /// </summary>
        /// <param name="object">
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>size</p>
        /// </div>
        /// </returns>
        public static JsNumber getSize(object @object){return null;}
        /// <summary>
        /// Gets all values of the given object as an array.
        /// <code>var values = <see cref="Ext.Object.getValues">Ext.Object.getValues</see>({
        /// name: 'Jacky',
        /// loves: 'food'
        /// }); // ['Jacky', 'food']
        /// </code>
        /// </summary>
        /// <param name="object">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>An array of values from the object</p>
        /// </div>
        /// </returns>
        public static JsArray getValues(object @object){return null;}
        /// <summary>
        /// Merges any number of objects recursively without referencing them or their children.
        /// <code>var extjs = {
        /// companyName: 'Ext JS',
        /// products: ['Ext JS', 'Ext GWT', 'Ext Designer'],
        /// isSuperCool: true,
        /// office: {
        /// size: 2000,
        /// location: 'Palo Alto',
        /// isFun: true
        /// }
        /// };
        /// var newStuff = {
        /// companyName: 'Sencha Inc.',
        /// products: ['Ext JS', 'Ext GWT', 'Ext Designer', 'Sencha Touch', 'Sencha Animator'],
        /// office: {
        /// size: 40000,
        /// location: 'Redwood City'
        /// }
        /// };
        /// var sencha = <see cref="Ext.Object.merge">Ext.Object.merge</see>(extjs, newStuff);
        /// // extjs and sencha then equals to
        /// {
        /// companyName: 'Sencha Inc.',
        /// products: ['Ext JS', 'Ext GWT', 'Ext Designer', 'Sencha Touch', 'Sencha Animator'],
        /// isSuperCool: true,
        /// office: {
        /// size: 40000,
        /// location: 'Redwood City',
        /// isFun: true
        /// }
        /// }
        /// </code>
        /// </summary>
        /// <param name="destination"><p>The object into which all subsequent objects are merged.</p>
        /// </param>
        /// <param name="object"><p>Any number of objects to merge into the destination.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>merged The destination object with all passed objects merged in.</p>
        /// </div>
        /// </returns>
        public static object merge(object destination, object @object){return null;}
        /// <summary>
        /// Parameters<li><span>destination</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="destination">
        /// </param>
        private static void mergeIf(object destination){}
        /// <summary>
        /// Converts a name - value pair to an array of objects with support for nested structures. Useful to construct
        /// query strings. For example:
        /// <code>var objects = <see cref="Ext.Object.toQueryObjects">Ext.Object.toQueryObjects</see>('hobbies', ['reading', 'cooking', 'swimming']);
        /// // objects then equals:
        /// [
        /// { name: 'hobbies', value: 'reading' },
        /// { name: 'hobbies', value: 'cooking' },
        /// { name: 'hobbies', value: 'swimming' },
        /// ];
        /// var objects = <see cref="Ext.Object.toQueryObjects">Ext.Object.toQueryObjects</see>('dateOfBirth', {
        /// day: 3,
        /// month: 8,
        /// year: 1987,
        /// extra: {
        /// hour: 4
        /// minute: 30
        /// }
        /// }, true); // Recursive
        /// // objects then equals:
        /// [
        /// { name: 'dateOfBirth[day]', value: 3 },
        /// { name: 'dateOfBirth[month]', value: 8 },
        /// { name: 'dateOfBirth[year]', value: 1987 },
        /// { name: 'dateOfBirth[extra][hour]', value: 4 },
        /// { name: 'dateOfBirth[extra][minute]', value: 30 },
        /// ];
        /// </code>
        /// </summary>
        /// <param name="name">
        /// </param>
        /// <param name="value">
        /// </param>
        /// <param name="recursive"><p>True to traverse object recursively</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div>
        /// </div>
        /// </returns>
        public static JsArray toQueryObjects(JsString name, object value, object recursive=null){return null;}
        /// <summary>
        /// Takes an object and converts it to an encoded query string.
        /// Non-recursive:
        /// <code><see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({foo: 1, bar: 2}); // returns "foo=1&amp;bar=2"
        /// <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({foo: null, bar: 2}); // returns "foo=&amp;bar=2"
        /// <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({'some price': '$300'}); // returns "some%20price=%24300"
        /// <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({date: new Date(2011, 0, 1)}); // returns "date=%222011-01-01T00%3A00%3A00%22"
        /// <see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({colors: ['red', 'green', 'blue']}); // returns "colors=red&amp;colors=green&amp;colors=blue"
        /// </code>
        /// Recursive:
        /// <code><see cref="Ext.Object.toQueryString">Ext.Object.toQueryString</see>({
        /// username: 'Jacky',
        /// dateOfBirth: {
        /// day: 1,
        /// month: 2,
        /// year: 1911
        /// },
        /// hobbies: ['coding', 'eating', 'sleeping', ['nested', 'stuff']]
        /// }, true); // returns the following string (broken down and url-decoded for ease of reading purpose):
        /// // username=Jacky
        /// //    &amp;dateOfBirth[day]=1&amp;dateOfBirth[month]=2&amp;dateOfBirth[year]=1911
        /// //    &amp;hobbies[0]=coding&amp;hobbies[1]=eating&amp;hobbies[2]=sleeping&amp;hobbies[3][0]=nested&amp;hobbies[3][1]=stuff
        /// </code>
        /// </summary>
        /// <param name="object"><p>The object to encode</p>
        /// </param>
        /// <param name="recursive"><p>Whether or not to interpret the object in recursive format.
        /// (PHP / Ruby on Rails servers and similar).</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>queryString</p>
        /// </div>
        /// </returns>
        public static JsString toQueryString(object @object, object recursive=null){return null;}
        public Object(ObjectConfig config){}
        public Object(){}
        public Object(params object[] args){}
    }
    #endregion
    #region ObjectConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ObjectConfig
    {
        public ObjectConfig(params object[] args){}
    }
    #endregion
    #region ObjectEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ObjectEvents
    {
        public ObjectEvents(params object[] args){}
    }
    #endregion
}
