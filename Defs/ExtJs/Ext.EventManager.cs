//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region EventManager
    /// <summary>
    /// <p>Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
    /// several useful events directly.
    /// See <see cref="Ext.EventObject">Ext.EventObject</see> for more details on normalized event objects.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class EventManager
    {
        /// <summary>
        /// Additionally, allow the 'DOM' listener thread to complete (usually desirable with mobWebkit, Gecko)
        /// before firing the entire onReady chain (high stack load on Loader) by specifying a delay value
        /// @default 1ms
        /// Defaults to: <c>1</c>
        /// </summary>
        private static JsNumber deferReadyEvent{get;set;}
        /// <summary>
        /// Check if we have bound our global onReady listener
        /// Defaults to: <c>false</c>
        /// </summary>
        private static bool hasBoundOnReady{get;set;}
        /// <summary>
        /// Check if fireDocReady has been called
        /// Defaults to: <c>false</c>
        /// </summary>
        private static bool hasFiredReady{get;set;}
        /// <summary>
        /// Fires when a DOM event handler finishes its run, just before returning to browser control.
        /// This can be useful for performing cleanup, or upfdate tasks which need to happen only
        /// after all code in an event handler has been run, but which should not be executed in a timer
        /// due to the intervening browser reflow/repaint which would take place.
        /// </summary>
        public static JsObject idleEvent{get;set;}
        /// <summary>
        /// Options to parse for the 4th argument to addListener.
        /// Defaults to: <c>/^(?:scope|delay|buffer|single|stopEvent|preventDefault|stopPropagation|normalized|args|delegate|freezeEvent)$/</c>
        /// </summary>
        private static JsRegExp propRe{get;set;}
        /// <summary>
        /// Holds references to any onReady functions
        /// </summary>
        private static JsObject readyEvent{get;set;}
        /// <summary>
        /// Timer for doScroll polling
        /// Defaults to: <c>null</c>
        /// </summary>
        private static JsObject scrollTimeout{get;set;}
        /// <summary>
        /// Contains a list of all document mouse downs, so we can ensure they fire even when stopEvent is called.
        /// </summary>
        private static JsObject stoppedMouseDownEvent{get;set;}
        /// <summary>
        /// note 1: IE fires ONLY the keydown event on specialkey autorepeat
        /// note 2: Safari &lt; 3.1, Gecko (Mac/Linux) &amp; Opera fire only the keypress event on specialkey autorepeat
        /// (research done by Jan Wolter at http://unixpapa.com/js/key.html)
        /// </summary>
        private static JsObject useKeyDown{get;set;}
        /// <summary>
        /// Appends an event handler to an element.  The shorthand version on is equivalent.  Typically you will
        /// use Ext.Element.addListener directly on an Element in favor of calling this version.
        /// </summary>
        /// <param name="el"><p>The html element or id to assign the event handler to.</p>
        /// </param>
        /// <param name="eventName"><p>The name of the event to listen for.</p>
        /// </param>
        /// <param name="handler"><p>The handler function the event invokes. This function is passed
        /// the following parameters:<ul>
        /// <li>evt : EventObject<div>The <see cref="Ext.EventObject">EventObject</see> describing the event.</div></li>
        /// <li>t : Element<div>The <see cref="Ext.dom.Element">Element</see> which was the target of the event.
        /// Note that this may be filtered by using the <tt>delegate</tt> option.</div></li>
        /// <li>o : Object<div>The options object from the addListener call.</div></li>
        /// </ul></p>
        /// </param>
        /// <param name="scope"><p>The scope (<b><c>this</c></b> reference) in which the handler function is executed. <b>Defaults to the Element</b>.</p>
        /// </param>
        /// <param name="options"><p>An object containing handler configuration properties.
        /// This may contain any of the following properties:<ul>
        /// <li>scope : Object<div>The scope (<b><c>this</c></b> reference) in which the handler function is executed. <b>Defaults to the Element</b>.</div></li>
        /// <li>delegate : String<div>A simple selector to filter the target or look for a descendant of the target</div></li>
        /// <li>stopEvent : Boolean<div>True to stop the event. That is stop propagation, and prevent the default action.</div></li>
        /// <li>preventDefault : Boolean<div>True to prevent the default action</div></li>
        /// <li>stopPropagation : Boolean<div>True to prevent event propagation</div></li>
        /// <li>normalized : Boolean<div>False to pass a browser event to the handler function instead of an <see cref="Ext.EventObject">Ext.EventObject</see></div></li>
        /// <li>delay : Number<div>The number of milliseconds to delay the invocation of the handler after te event fires.</div></li>
        /// <li>single : Boolean<div>True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>
        /// <li>buffer : Number<div>Causes the handler to be scheduled to run in an <see cref="Ext.util.DelayedTask">Ext.util.DelayedTask</see> delayed
        /// by the specified number of milliseconds. If the event fires again within that time, the original
        /// handler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>
        /// <li>target : Element<div>Only call the handler if the event was fired on the target Element, <i>not</i> if the event was bubbled up from a child node.</div></li>
        /// </ul><br></p>
        /// <p>See <see cref="Ext.dom.Element.addListener">Ext.Element.addListener</see> for examples of how to use these options.</p>
        /// </param>
        public static void addListener(object el, JsString eventName, System.Delegate handler, object scope=null, object options=null){}
        /// <summary>
        /// Binds the appropriate browser event for checking if the DOM has loaded.
        /// </summary>
        private static void bindReadyEvent(){}
        /// <summary>
        /// Checks whether the event's relatedTarget is contained inside (or is) the element.
        /// </summary>
        /// <param name="event">
        /// </param>
        private static void contains(object @event){}
        /// <summary>
        /// Create the wrapper function for the event
        /// </summary>
        /// <param name="dom"><p>The dom element</p>
        /// </param>
        /// <param name="ename"><p>The event name</p>
        /// </param>
        /// <param name="fn"><p>The function to execute</p>
        /// </param>
        /// <param name="scope"><p>The scope to execute callback in</p>
        /// </param>
        /// <param name="options"><p>The options</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Function">Function</see></span><div><p>the wrapper function</p>
        /// </div>
        /// </returns>
        private static System.Delegate createListenerWrap(object dom, JsString ename, System.Delegate fn, object scope, object options){return null;}
        /// <summary>
        /// We know the document is loaded, so trigger any onReady events.
        /// </summary>
        private static void fireDocReady(){}
        /// <summary>
        /// Fires the ready event
        /// </summary>
        private static void fireReadyEvent(){}
        /// <summary>
        /// Fire the resize event.
        /// </summary>
        private static void fireResize(){}
        /// <summary>
        /// Fires the unload event for items bound with onWindowUnload
        /// </summary>
        private static void fireUnload(){}
        /// <summary>
        /// Get the event cache for a particular element for a particular event
        /// </summary>
        /// <param name="element"><p>The element</p>
        /// </param>
        /// <param name="eventName"><p>The event name</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The events for the element</p>
        /// </div>
        /// </returns>
        private static JsArray getEventListenerCache(object element, object eventName){return null;}
        /// <summary>
        /// Get the id of the element. If one has not been assigned, automatically assign it.
        /// </summary>
        /// <param name="element"><p>The element to get the id for.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>id</p>
        /// </div>
        /// </returns>
        public static JsString getId(object element){return null;}
        /// <summary>
        /// Indicates which event to use for getting key presses.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The appropriate event name.</p>
        /// </div>
        /// </returns>
        public static JsString getKeyEvent(){return null;}
        /// <summary>
        /// Gets the x coordinate from the event
        /// </summary>
        /// <param name="event"><p>The event</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The x coordinate</p>
        /// </div>
        /// </returns>
        public static JsNumber getPageX(object @event){return null;}
        /// <summary>
        /// Gets the x &amp; y coordinate from the event
        /// </summary>
        /// <param name="event"><p>The event</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>The x/y coordinate</p>
        /// </div>
        /// </returns>
        public static JsNumber[] getPageXY(object @event){return null;}
        /// <summary>
        /// Gets the y coordinate from the event
        /// </summary>
        /// <param name="event"><p>The event</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The y coordinate</p>
        /// </div>
        /// </returns>
        public static JsNumber getPageY(object @event){return null;}
        /// <summary>
        /// Gets the related target from the event.
        /// </summary>
        /// <param name="event"><p>The event</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The related target.</p>
        /// </div>
        /// </returns>
        public static JsObject getRelatedTarget(object @event){return null;}
        /// <summary>
        /// Gets the target of the event.
        /// </summary>
        /// <param name="event"><p>The event</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>target</p>
        /// </div>
        /// </returns>
        public static JsObject getTarget(object @event){return null;}
        /// <summary>
        /// detects whether the EventManager has been placed in a paused state for synchronization
        /// with external debugging / perf tools (PageAnalyzer)
        /// </summary>
        private static void isReadyPaused(){}
        /// <summary>
        /// Normalize cross browser event differences
        /// </summary>
        /// <param name="eventName"><p>The event name</p>
        /// </param>
        /// <param name="fn"><p>The function to execute</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The new event name/function</p>
        /// </div>
        /// </returns>
        private static object normalizeEvent(object eventName, System.Delegate fn){return null;}
        /// <summary>
        /// Alias for Ext.EventManager.addListener
        /// </summary>
        public static void on(){}
        /// <summary>
        /// Adds a listener to be notified when the document is ready (before onload and before images are loaded).
        /// </summary>
        /// <param name="fn"><p>The method the event invokes.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function executes.
        /// Defaults to the browser window.</p>
        /// </param>
        /// <param name="options"><p>Options object as passed to <see cref="Ext.dom.Element.addListener">Ext.Element.addListener</see>.</p>
        /// </param>
        public static void onDocumentReady(System.Delegate fn, object scope=null, object options=null){}
        /// <summary>
        /// Adds a listener to be notified when the browser window is resized and provides resize event buffering (100 milliseconds),
        /// passes new viewport width and height to handlers.
        /// </summary>
        /// <param name="fn"><p>The handler function the window resize event invokes.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function executes. Defaults to the browser window.</p>
        /// </param>
        /// <param name="options"><p>Options object as passed to <see cref="Ext.dom.Element.addListener">Ext.Element.addListener</see></p>
        /// </param>
        public static void onWindowResize(System.Delegate fn, object scope, bool options){}
        /// <summary>
        /// Adds a listener to be notified when the browser window is unloaded.
        /// </summary>
        /// <param name="fn"><p>The handler function the window unload event invokes.</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function executes. Defaults to the browser window.</p>
        /// </param>
        /// <param name="options"><p>Options object as passed to <see cref="Ext.dom.Element.addListener">Ext.Element.addListener</see></p>
        /// </param>
        public static void onWindowUnload(System.Delegate fn, object scope, bool options){}
        /// <summary>
        /// This strategy has minimal benefits for Sencha solutions that build themselves (ie. minimal initial page markup).
        /// However, progressively-enhanced pages (with image content and/or embedded frames) will benefit the most from it.
        /// Browser timer resolution is too poor to ensure a doScroll check more than once on a page loaded with minimal
        /// assets (the readystatechange event 'complete' usually beats the doScroll timer on a 'lightly-loaded' initial document).
        /// </summary>
        public static void pollScroll(){}
        /// <summary>
        /// Convert a "config style" listener into a set of flat arguments so they can be passed to addListener
        /// </summary>
        /// <param name="element"><p>The element the event is for</p>
        /// </param>
        /// <param name="event"><p>The event configuration</p>
        /// </param>
        /// <param name="isRemove"><p>True if a removal should be performed, otherwise an add will be done.</p>
        /// </param>
        private static void prepareListenerConfig(object element, object @event, object isRemove){}
        /// <summary>
        /// Prevents the browsers default handling of the event.
        /// </summary>
        /// <param name="The"><p>event to prevent the default</p>
        /// </param>
        public static void preventDefault(object The){}
        /// <summary>
        /// Recursively removes all previous added listeners from an element and its children. Typically you will use Ext.Element.purgeAllListeners
        /// directly on an Element in favor of calling this version.
        /// </summary>
        /// <param name="el"><p>The id or html element from which to remove all event handlers.</p>
        /// </param>
        /// <param name="eventName"><p>The name of the event.</p>
        /// </param>
        public static void purgeElement(object el, object eventName=null){}
        /// <summary>
        /// Removes all event handers from an element.  Typically you will use Ext.Element.removeAllListeners
        /// directly on an Element in favor of calling this version.
        /// </summary>
        /// <param name="el"><p>The id or html element from which to remove all event handlers.</p>
        /// </param>
        public static void removeAll(object el){}
        /// <summary>
        /// Removes an event handler from an element.  The shorthand version un is equivalent.  Typically
        /// you will use Ext.Element.removeListener directly on an Element in favor of calling this version.
        /// </summary>
        /// <param name="el"><p>The id or html element from which to remove the listener.</p>
        /// </param>
        /// <param name="eventName"><p>The name of the event.</p>
        /// </param>
        /// <param name="fn"><p>The handler function to remove. <b>This must be a reference to the function passed into the <see cref="Ext.EventManager.addListener">addListener</see> call.</b></p>
        /// </param>
        /// <param name="scope"><p>If a scope (<b><c>this</c></b> reference) was specified when the listener was added,
        /// then this must refer to the same object.</p>
        /// </param>
        public static void removeListener(object el, JsString eventName, System.Delegate fn, object scope){}
        /// <summary>
        /// Removes the passed window resize listener.
        /// </summary>
        /// <param name="fn"><p>The method the event invokes</p>
        /// </param>
        /// <param name="scope"><p>The scope of handler</p>
        /// </param>
        public static void removeResizeListener(System.Delegate fn, object scope){}
        /// <summary>
        /// Removes the passed window unload listener.
        /// </summary>
        /// <param name="fn"><p>The method the event invokes</p>
        /// </param>
        /// <param name="scope"><p>The scope of handler</p>
        /// </param>
        public static void removeUnloadListener(System.Delegate fn, object scope){}
        /// <summary>
        /// Resolve any text nodes accounting for browser differences.
        /// </summary>
        /// <param name="node"><p>The node</p>
        /// </param>
        /// <returns>
        /// <span>HTMLElement</span><div><p>The resolved node</p>
        /// </div>
        /// </returns>
        private static JsObject resolveTextNode(object node){return null;}
        /// <summary>
        /// Stop the event (preventDefault and stopPropagation)
        /// </summary>
        /// <param name="The"><p>event to stop</p>
        /// </param>
        public static void stopEvent(object The){}
        /// <summary>
        /// Cancels bubbling of the event.
        /// </summary>
        /// <param name="The"><p>event to stop bubbling.</p>
        /// </param>
        public static void stopPropagation(object The){}
        /// <summary>
        /// Alias for Ext.EventManager.removeListener
        /// </summary>
        public static void un(){}
        public EventManager(EventManagerConfig config){}
        public EventManager(){}
        public EventManager(params object[] args){}
    }
    #endregion
    #region EventManagerConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class EventManagerConfig
    {
        public EventManagerConfig(params object[] args){}
    }
    #endregion
    #region EventManagerEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class EventManagerEvents
    {
        public EventManagerEvents(params object[] args){}
    }
    #endregion
}
