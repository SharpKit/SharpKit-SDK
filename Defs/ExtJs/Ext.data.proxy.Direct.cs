//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.proxy
{
    #region Direct
    /// <inheritdocs />
    /// <summary>
    /// <p>This class is used to send requests to the server using <see cref="Ext.direct.Manager">Ext.Direct</see>. When a
    /// request is made, the transport mechanism is handed off to the appropriate
    /// <see cref="Ext.direct.RemotingProvider">Provider</see> to complete the call.</p>
    /// <h1>Specifying the function</h1>
    /// <p>This proxy expects a Direct remoting method to be passed in order to be able to complete requests.
    /// This can be done by specifying the <see cref="Ext.data.proxy.DirectConfig.directFn">directFn</see> configuration. This will use the same direct
    /// method for all requests. Alternatively, you can provide an <see cref="Ext.data.proxy.DirectConfig.api">api</see> configuration. This
    /// allows you to specify a different remoting method for each CRUD action.</p>
    /// <h1>Parameters</h1>
    /// <p>This proxy provides options to help configure which parameters will be sent to the server.
    /// By specifying the <see cref="Ext.data.proxy.DirectConfig.paramsAsHash">paramsAsHash</see> option, it will send an object literal containing each
    /// of the passed parameters. The <see cref="Ext.data.proxy.DirectConfig.paramOrder">paramOrder</see> option can be used to specify the order in which
    /// the remoting method parameters are passed.</p>
    /// <h1>Example Usage</h1>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('User', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// fields: ['firstName', 'lastName'],
    /// proxy: {
    /// type: 'direct',
    /// directFn: MyApp.getUsers,
    /// paramOrder: 'id' // Tells the proxy to pass the id as the first parameter to the remoting method.
    /// }
    /// });
    /// User.load(1);
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Direct : Server
    {
        /// <summary>
        /// Function to call when executing a request. directFn is a simple alternative to defining the api configuration-parameter
        /// for Store's which will not implement a full CRUD api. The directFn may also be a string reference to the fully qualified
        /// name of the function, for example: 'MyApp.company.GetProfile'. This can be useful when using dynamic loading. The string
        /// will be looked up when the proxy is created.
        /// </summary>
        public object directFn;
        /// <summary>
        /// Defaults to undefined. A list of params to be executed server side.  Specify the params in the order in
        /// which they must be executed on the server-side as either (1) an Array of String values, or (2) a String
        /// of params delimited by either whitespace, comma, or pipe. For example, any of the following would be
        /// acceptable:
        /// <code>paramOrder: ['param1','param2','param3']
        /// paramOrder: 'param1 param2 param3'
        /// paramOrder: 'param1,param2,param3'
        /// paramOrder: 'param1|param2|param'
        /// </code>
        /// </summary>
        public object paramOrder;
        /// <summary>
        /// Send parameters as a collection of named arguments.
        /// Providing a paramOrder nullifies this configuration.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool paramsAsHash;
        public Direct(DirectConfig config){}
        public Direct(){}
        public Direct(params object[] args){}
    }
    #endregion
    #region DirectConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DirectConfig : ServerConfig
    {
        /// <summary>
        /// Function to call when executing a request. directFn is a simple alternative to defining the api configuration-parameter
        /// for Store's which will not implement a full CRUD api. The directFn may also be a string reference to the fully qualified
        /// name of the function, for example: 'MyApp.company.GetProfile'. This can be useful when using dynamic loading. The string
        /// will be looked up when the proxy is created.
        /// </summary>
        public object directFn;
        /// <summary>
        /// Defaults to undefined. A list of params to be executed server side.  Specify the params in the order in
        /// which they must be executed on the server-side as either (1) an Array of String values, or (2) a String
        /// of params delimited by either whitespace, comma, or pipe. For example, any of the following would be
        /// acceptable:
        /// <code>paramOrder: ['param1','param2','param3']
        /// paramOrder: 'param1 param2 param3'
        /// paramOrder: 'param1,param2,param3'
        /// paramOrder: 'param1|param2|param'
        /// </code>
        /// </summary>
        public object paramOrder;
        /// <summary>
        /// Send parameters as a collection of named arguments.
        /// Providing a paramOrder nullifies this configuration.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool paramsAsHash;
        public DirectConfig(params object[] args){}
    }
    #endregion
    #region DirectEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DirectEvents : ServerEvents
    {
        public DirectEvents(params object[] args){}
    }
    #endregion
}
