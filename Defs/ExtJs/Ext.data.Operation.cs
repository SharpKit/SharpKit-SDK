//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data
{
    #region Operation
    /// <inheritdocs />
    /// <summary>
    /// <p>Represents a single read or write operation performed by a <see cref="Ext.data.proxy.Proxy">Proxy</see>. Operation objects are
    /// used to enable communication between Stores and Proxies. Application developers should rarely need to interact with
    /// Operation objects directly.</p>
    /// <p>Several Operations can be batched together in a <see cref="Ext.data.Batch">batch</see>.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Operation : Ext.Base
    {
        /// <summary>
        /// The action being performed by this Operation. Should be one of 'create', 'read', 'update' or 'destroy'.
        /// </summary>
        public JsString action;
        /// <summary>
        /// The batch that this Operation is a part of.
        /// </summary>
        public Batch batch;
        /// <summary>
        /// Function to execute when operation completed.
        /// </summary>
        public System.Delegate callback;
        /// <summary>
        /// Optional array of filter objects. Only applies to 'read' actions.
        /// </summary>
        public Ext.util.Filter filters;
        /// <summary>
        /// Optional grouping configuration. Only applies to 'read' actions where grouping is desired.
        /// </summary>
        public Ext.util.Grouper groupers;
        /// <summary>
        /// The number of records to load. Used on 'read' actions when paging is being used.
        /// </summary>
        public JsNumber limit;
        /// <summary>
        /// Parameters to pass along with the request when performing the operation.
        /// </summary>
        public JsObject @params;
        /// <summary>
        /// Scope for the callback function.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// Optional array of sorter objects. Only applies to 'read' actions.
        /// </summary>
        public Ext.util.Sorter sorters;
        /// <summary>
        /// The start index (offset), used in paging when running a 'read' action.
        /// </summary>
        public JsNumber start;
        /// <summary>
        /// True if this Operation is to be executed synchronously. This property is inspected by a
        /// Batch to see if a series of Operations can be executed in parallel or not.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool synchronous;
        /// <summary>
        /// The RegExp used to categorize actions that require record commits.
        /// Defaults to: <c>/^(?:create|update)$/i</c>
        /// </summary>
        public JsRegExp actionCommitRecordsRe{get;set;}
        /// <summary>
        /// The RegExp used to categorize actions that skip local record synchronization. This defaults
        /// to match 'destroy'.
        /// Defaults to: <c>/^destroy$/i</c>
        /// </summary>
        public JsRegExp actionSkipSyncRe{get;set;}
        /// <summary>
        /// The completion status of this Operation. Use isComplete.
        /// Defaults to: <c>false</c>
        /// </summary>
        private bool complete{get;set;}
        /// <summary>
        /// The error object passed when setException was called. This could be any object or primitive.
        /// </summary>
        private object error{get;set;}
        /// <summary>
        /// The exception status of this Operation. Use hasException and see getError.
        /// Defaults to: <c>false</c>
        /// </summary>
        private bool exception{get;set;}
        /// <summary>
        /// The run status of this Operation. Use isRunning.
        /// Defaults to: <c>false</c>
        /// </summary>
        private bool running{get;set;}
        /// <summary>
        /// The start status of this Operation. Use isStarted.
        /// Defaults to: <c>false</c>
        /// </summary>
        private bool started{get;set;}
        /// <summary>
        /// Whether the Operation was successful or not. This starts as undefined and is set to true
        /// or false by the Proxy that is executing the Operation. It is also set to false by setException. Use
        /// wasSuccessful to query success status.
        /// </summary>
        private bool success{get;set;}
        /// <summary>
        /// Creates new Operation object.
        /// </summary>
        /// <param name="config"><p>Config object.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public Operation(object config=null){}
        /// <summary>
        /// Checks whether this operation should cause writing to occur.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>Whether the operation should cause a write to occur.</p>
        /// </div>
        /// </returns>
        public bool allowWrite(){return false;}
        /// <summary>
        /// This method is called to commit data to this instance's records given the records in
        /// the server response. This is followed by calling Ext.data.Model.commit on all
        /// those records (for 'create' and 'update' actions).
        /// If this <see cref="Ext.data.OperationConfig.action">action</see> is 'destroy', any server records are ignored and the
        /// <see cref="Ext.data.Model.commit">Ext.data.Model.commit</see> method is not called.
        /// </summary>
        /// <param name="serverRecords"><p>An array of <see cref="Ext.data.Model">Ext.data.Model</see> objects returned by
        /// the server.</p>
        /// </param>
        public void commitRecords(JsArray<Ext.data.Model> serverRecords){}
        /// <summary>
        /// Returns the error string or object that was set using setException
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see>/<see cref="Object">Object</see></span><div><p>The error object</p>
        /// </div>
        /// </returns>
        public object getError(){return null;}
        /// <summary>
        /// Returns the records associated with this operation.  For read operations the records as set by the Proxy will be returned (returns null if the proxy has not yet set the records).
        /// For create, update, and destroy operations the operation's initially configured records will be returned, although the proxy may modify these records' data at some point after the operation is initialized.
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.Model">Ext.data.Model</see>[]</span><div>
        /// </div>
        /// </returns>
        public Ext.data.Model[] getRecords(){return null;}
        /// <summary>
        /// Returns the ResultSet object (if set by the Proxy). This object will contain the model
        /// instances as well as meta data such as number of instances fetched, number available etc
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.data.ResultSet">Ext.data.ResultSet</see></span><div><p>The ResultSet object</p>
        /// </div>
        /// </returns>
        public ResultSet getResultSet(){return null;}
        /// <summary>
        /// Returns true if this Operation encountered an exception (see also getError)
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if there was an exception</p>
        /// </div>
        /// </returns>
        public bool hasException(){return false;}
        /// <summary>
        /// Returns true if the Operation has been completed
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the Operation is complete</p>
        /// </div>
        /// </returns>
        public bool isComplete(){return false;}
        /// <summary>
        /// Returns true if the Operation has been started but has not yet completed.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the Operation is currently running</p>
        /// </div>
        /// </returns>
        public bool isRunning(){return false;}
        /// <summary>
        /// Returns true if the Operation has been started. Note that the Operation may have started AND completed, see
        /// isRunning to test if the Operation is currently running.
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the Operation has started</p>
        /// </div>
        /// </returns>
        public bool isStarted(){return false;}
        /// <summary>
        /// Associates this Operation with a Batch
        /// </summary>
        /// <param name="batch"><p>The batch</p>
        /// </param>
        private void setBatch(Batch batch){}
        /// <summary>
        /// Marks the Operation as completed.
        /// </summary>
        public void setCompleted(){}
        /// <summary>
        /// Marks the Operation as having experienced an exception. Can be supplied with an option error message/object.
        /// </summary>
        /// <param name="error"><p>error string/object</p>
        /// </param>
        public void setException(object error=null){}
        /// <summary>
        /// Marks the Operation as started.
        /// </summary>
        public void setStarted(){}
        /// <summary>
        /// Marks the Operation as successful.
        /// </summary>
        public void setSuccessful(){}
        /// <summary>
        /// Returns true if the Operation has completed and was successful
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if successful</p>
        /// </div>
        /// </returns>
        public bool wasSuccessful(){return false;}
        public Operation(OperationConfig config){}
        public Operation(params object[] args){}
    }
    #endregion
    #region OperationConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class OperationConfig : Ext.BaseConfig
    {
        /// <summary>
        /// The action being performed by this Operation. Should be one of 'create', 'read', 'update' or 'destroy'.
        /// </summary>
        public JsString action;
        /// <summary>
        /// The batch that this Operation is a part of.
        /// </summary>
        public Batch batch;
        /// <summary>
        /// Function to execute when operation completed.
        /// </summary>
        public System.Delegate callback;
        /// <summary>
        /// Optional array of filter objects. Only applies to 'read' actions.
        /// </summary>
        public Ext.util.Filter filters;
        /// <summary>
        /// Optional grouping configuration. Only applies to 'read' actions where grouping is desired.
        /// </summary>
        public Ext.util.Grouper groupers;
        /// <summary>
        /// The number of records to load. Used on 'read' actions when paging is being used.
        /// </summary>
        public JsNumber limit;
        /// <summary>
        /// Parameters to pass along with the request when performing the operation.
        /// </summary>
        public JsObject @params;
        /// <summary>
        /// Scope for the callback function.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// Optional array of sorter objects. Only applies to 'read' actions.
        /// </summary>
        public Ext.util.Sorter sorters;
        /// <summary>
        /// The start index (offset), used in paging when running a 'read' action.
        /// </summary>
        public JsNumber start;
        /// <summary>
        /// True if this Operation is to be executed synchronously. This property is inspected by a
        /// Batch to see if a series of Operations can be executed in parallel or not.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool synchronous;
        public OperationConfig(params object[] args){}
    }
    #endregion
    #region OperationEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class OperationEvents : Ext.BaseEvents
    {
        public OperationEvents(params object[] args){}
    }
    #endregion
}
