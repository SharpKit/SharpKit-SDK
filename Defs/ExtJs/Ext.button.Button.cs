//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.button
{
    #region Button
    /// <inheritdocs />
    /// <summary>
    /// <p>Create simple buttons with this component. Customisations include <see cref="Ext.button.ButtonConfig.iconAlign">aligned</see>
    /// <see cref="Ext.button.ButtonConfig.iconCls">icons</see>, <see cref="Ext.button.ButtonConfig.menu">dropdown menus</see>, <see cref="Ext.button.ButtonConfig.tooltip">tooltips</see>
    /// and <see cref="Ext.button.ButtonConfig.scale">sizing options</see>. Specify a <see cref="Ext.button.ButtonConfig.handler">handler</see> to run code when
    /// a user clicks the button, or use <see cref="Ext.button.ButtonConfig.listeners">listeners</see> for other events such as
    /// <see cref="Ext.button.ButtonEvents.mouseover">mouseover</see>. Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.Button</see>', {
    /// text: 'Click me',
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// handler: function() {
    /// alert('You clicked the button!');
    /// }
    /// });
    /// </code></pre>
    /// <p>The <see cref="Ext.button.ButtonConfig.handler">handler</see> configuration can also be updated dynamically using the <see cref="Ext.button.Button.setHandler">setHandler</see>
    /// method.  Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.Button</see>', {
    /// text    : 'Dynamic Handler Button',
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// handler : function() {
    /// // this button will spit out a different number every time you click it.
    /// // so firstly we must check if that number is already set:
    /// if (this.clickCount) {
    /// // looks like the property is already set, so lets just add 1 to that number and alert the user
    /// this.clickCount++;
    /// alert('You have clicked the button "' + this.clickCount + '" times.\n\nTry clicking it again..');
    /// } else {
    /// // if the clickCount property is not set, we will set it and alert the user
    /// this.clickCount = 1;
    /// alert('You just clicked the button for the first time!\n\nTry pressing it again..');
    /// }
    /// }
    /// });
    /// </code></pre>
    /// <p>A button within a container:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.container.Container">Ext.Container</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// items   : [
    /// {
    /// xtype: 'button',
    /// text : 'My Button'
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>A useful option of Button is the <see cref="Ext.button.ButtonConfig.scale">scale</see> configuration. This configuration has three different options:</p>
    /// <ul>
    /// <li><c>'small'</c></li>
    /// <li><c>'medium'</c></li>
    /// <li><c>'large'</c></li>
    /// </ul>
    /// <p>Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.Button</see>', {
    /// renderTo: document.body,
    /// text    : 'Click me',
    /// scale   : 'large'
    /// });
    /// </code></pre>
    /// <p>Buttons can also be toggled. To enable this, you simple set the <see cref="Ext.button.ButtonConfig.enableToggle">enableToggle</see> property to <c>true</c>.
    /// Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.Button</see>', {
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// text: 'Click Me',
    /// enableToggle: true
    /// });
    /// </code></pre>
    /// <p>You can assign a menu to a button by using the <see cref="Ext.button.ButtonConfig.menu">menu</see> configuration. This standard configuration
    /// can either be a reference to a <see cref="Ext.menu.Menu">menu</see> object, a <see cref="Ext.menu.Menu">menu</see> id or a
    /// <see cref="Ext.menu.Menu">menu</see> config blob. When assigning a menu to a button, an arrow is automatically
    /// added to the button.  You can change the alignment of the arrow using the <see cref="Ext.button.ButtonConfig.arrowAlign">arrowAlign</see> configuration
    /// on button.  Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.Button</see>', {
    /// text      : 'Menu button',
    /// renderTo  : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// arrowAlign: 'bottom',
    /// menu      : [
    /// {text: 'Item 1'},
    /// {text: 'Item 2'},
    /// {text: 'Item 3'},
    /// {text: 'Item 4'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>Using listeners, you can easily listen to events fired by any component, using the <see cref="Ext.button.ButtonConfig.listeners">listeners</see>
    /// configuration or using the <see cref="Ext.button.Button.addListener">addListener</see> method.  Button has a variety of different listeners:</p>
    /// <ul>
    /// <li><c>click</c></li>
    /// <li><c>toggle</c></li>
    /// <li><c>mouseover</c></li>
    /// <li><c>mouseout</c></li>
    /// <li><c>mouseshow</c></li>
    /// <li><c>menuhide</c></li>
    /// <li><c>menutriggerover</c></li>
    /// <li><c>menutriggerout</c></li>
    /// </ul>
    /// <p>Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.button.Button">Ext.Button</see>', {
    /// text     : 'Button',
    /// renderTo : <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// listeners: {
    /// click: function() {
    /// // this == the button, as we are in the local scope
    /// this.setText('I was clicked!');
    /// },
    /// mouseover: function() {
    /// // set a new config which says we moused over, if not already set
    /// if (!this.mousedOver) {
    /// this.mousedOver = true;
    /// alert('You moused over a button!\n\nI wont do this again.');
    /// }
    /// }
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Button : Ext.Component
    {
        /// <summary>
        /// False to not allow a pressed Button to be depressed. Only valid when enableToggle is true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowDepress;
        /// <summary>
        /// The side of the Button box to render the arrow if the button has an associated menu. Two
        /// values are allowed:
        /// <li>'right'</li>
        /// <li>'bottom'</li>
        /// Defaults to: <c>&quot;right&quot;</c>
        /// </summary>
        public JsString arrowAlign;
        /// <summary>
        /// The className used for the inner arrow element if the button has a menu.
        /// Defaults to: <c>&quot;arrow&quot;</c>
        /// </summary>
        public JsString arrowCls;
        /// <summary>
        /// An object literal of parameters to pass to the url when the href property is specified.
        /// </summary>
        public JsObject baseParams;
        /// <summary>
        /// The DOM event that will fire the handler of the button. This can be any valid event name (dblclick, contextmenu).
        /// Defaults to: <c>&quot;click&quot;</c>
        /// </summary>
        public JsString clickEvent;
        /// <summary>
        /// True to enable pressed/not pressed toggling. If a toggleGroup is specified, this
        /// option will be set to true.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool enableToggle;
        /// <summary>
        /// The CSS class to add to a button when it is in the focussed state.
        /// Defaults to: <c>&quot;focus&quot;</c>
        /// </summary>
        public JsString focusCls;
        /// <summary>
        /// False to disable visual cues on mouseover, mouseout and mousedown.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool handleMouseEvents;
        /// <summary>
        /// A function called when the button is clicked (can be used instead of click event).
        /// </summary>
        public System.Delegate handler;
        /// <summary>
        /// The URL to open when the button is clicked. Specifying this config causes the Button to be
        /// rendered with an anchor (An &lt;a&gt; element) as its active element, referencing the specified URL.
        /// This is better than specifying a click handler of
        /// <code>function() { window.location = "http://www.sencha.com" }
        /// </code>
        /// because the UI will provide meaningful hints to the user as to what to expect upon clicking
        /// the button, and will also allow the user to open in a new tab or window, bookmark or drag the URL, or directly save
        /// the URL stream to disk.
        /// See also the <see cref="Ext.button.ButtonConfig.hrefTarget">hrefTarget</see> config.
        /// </summary>
        public JsString href;
        /// <summary>
        /// The target attribute to use for the underlying anchor. Only used if the href
        /// property is specified.
        /// Defaults to: <c>&quot;_blank&quot;</c>
        /// </summary>
        public JsString hrefTarget;
        /// <summary>
        /// The path to an image to display in the button.
        /// </summary>
        public JsString icon;
        /// <summary>
        /// The side of the Button box to render the icon. Four values are allowed:
        /// <li>'top'</li>
        /// <li>'right'</li>
        /// <li>'bottom'</li>
        /// <li>'left'</li>
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString iconAlign;
        /// <summary>
        /// A css class which sets a background image to be used as the icon for this button.
        /// </summary>
        public JsString iconCls;
        /// <summary>
        /// The CSS class to add to a button when it's menu is active.
        /// Defaults to: <c>&quot;menu-active&quot;</c>
        /// </summary>
        public JsString menuActiveCls;
        /// <summary>
        /// The position to align the menu to (see Ext.Element.alignTo for more details).
        /// Defaults to: <c>&quot;tl-bl?&quot;</c>
        /// </summary>
        public JsString menuAlign;
        /// <summary>
        /// If used in a Toolbar, the text to be used if this item is shown in the overflow menu.
        /// See also Ext.toolbar.Item.overflowText.
        /// </summary>
        public JsString overflowText;
        /// <summary>
        /// An object literal of parameters to pass to the url when the href property is specified. Any params
        /// override baseParams. New params can be set using the setParams method.
        /// </summary>
        public JsObject @params;
        /// <summary>
        /// The CSS class to add to a button when it is in the pressed state.
        /// Defaults to: <c>&quot;pressed&quot;</c>
        /// </summary>
        public JsString pressedCls;
        /// <summary>
        /// True to prevent the default action when the clickEvent is processed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool preventDefault;
        /// <summary>
        /// True to repeat fire the click event while the mouse is down. This can also be a
        /// ClickRepeater config object.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object repeat;
        /// <summary>
        /// The size of the Button. Three values are allowed:
        /// <li>'small' - Results in the button element being 16px high.</li>
        /// <li>'medium' - Results in the button element being 24px high.</li>
        /// <li>'large' - Results in the button element being 32px high.</li>
        /// Defaults to: <c>&quot;small&quot;</c>
        /// </summary>
        public JsString scale;
        /// <summary>
        /// The scope (this reference) in which the handler and toggleHandler is executed.
        /// Defaults to this Button.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// Set a DOM tabIndex for this button.
        /// </summary>
        public JsNumber tabIndex;
        /// <summary>
        /// The button text to be used as innerHTML (html tags are accepted).
        /// </summary>
        public JsString text;
        /// <summary>
        /// The text alignment for this button (center, left, right).
        /// Defaults to: <c>&quot;center&quot;</c>
        /// </summary>
        public JsString textAlign;
        /// <summary>
        /// The group this toggle button is a member of (only 1 per group can be pressed). If a toggleGroup
        /// is specified, the enableToggle configuration will automatically be set to true.
        /// </summary>
        public JsString toggleGroup;
        /// <summary>
        /// Function called when a Button with enableToggle set to true is clicked.
        /// </summary>
        public System.Delegate toggleHandler;
        /// <summary>
        /// The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or
        /// QuickTips config object.
        /// </summary>
        public object tooltip;
        /// <summary>
        /// The type of tooltip to use. Either 'qtip' for QuickTips or 'title' for title attribute.
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString tooltipType;
        /// <summary>
        /// The type of &lt;input&gt; to create: submit, reset or button.
        /// Defaults to: <c>&quot;button&quot;</c>
        /// </summary>
        public JsString type;
        /// <summary>
        /// An array of allowed scales.
        /// Defaults to: <c>[&quot;small&quot;, &quot;medium&quot;, &quot;large&quot;]</c>
        /// </summary>
        private JsArray allowedScales{get;set;}
        /// <summary>
        /// The Menu object associated with this Button when configured with the menu config
        /// option.
        /// </summary>
        public Ext.menu.Menu menu{get;set;}
        /// <summary>
        /// The padding spuriously added to a &lt;button> element which must be accounted for in the margins of the innerEl.
        /// This is calculated at first render time by creating a hidden button and measuring its insides.
        /// </summary>
        private JsObject persistentPadding{get;set;}
        /// <summary>
        /// True if this button is pressed (only if enableToggle = true).
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool pressed{get;set;}
        /// <summary>
        /// A Template used to create the Button's DOM structure.
        /// Instances, or subclasses which need a different DOM structure may provide a different template layout in
        /// conjunction with an implementation of <see cref="Ext.button.Button.getTemplateArgs">getTemplateArgs</see>.
        /// </summary>
        public Ext.Template template{get;set;}
        /// <summary>
        /// Checks if the icon/iconCls changed from being empty to having a value, or having a value to being empty.
        /// </summary>
        /// <param name="old"><p>The old icon/iconCls</p>
        /// </param>
        /// <param name="current"><p>The current icon/iconCls</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the icon state changed</p>
        /// </div>
        /// </returns>
        private bool didIconStateChange(object old, object current){return false;}
        /// <summary>
        /// If there is a configured href for this Button, returns the href with parameters appended.
        /// </summary>
        private void getHref(){}
        /// <summary>
        /// Some browsers (notably Safari and older Chromes on Windows) add extra "padding" inside the button
        /// element that cannot be removed. This method returns the size of that padding with a one-time detection.
        /// </summary>
        /// <returns>
        /// <span><see cref="Number">Number</see>[]</span><div><p>[top, right, bottom, left]</p>
        /// </div>
        /// </returns>
        private JsNumber[] getPersistentPadding(){return null;}
        /// <summary>
        /// This method returns an object which provides substitution parameters for the XTemplate used to
        /// create this Button's DOM structure.
        /// Instances or subclasses which use a different Template to create a different DOM structure may need to provide
        /// their own implementation of this method.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Substitution data for a Template. The default implementation which provides data for the default
        /// <see cref="Ext.button.Button.template">template</see> returns an Object containing the following properties:</p>
        /// <ul><li><span>type</span> : <see cref="String">String</see><div><p>The <c>&lt;button&gt;</c>'s <see cref="Ext.button.ButtonConfig.type">type</see></p>
        /// </div></li><li><span>splitCls</span> : <see cref="String">String</see><div><p>A CSS class to determine the presence and position of an arrow icon.
        /// (<c>'x-btn-arrow'</c> or <c>'x-btn-arrow-bottom'</c> or <c>''</c>)</p>
        /// </div></li><li><span>cls</span> : <see cref="String">String</see><div><p>A CSS class name applied to the Button's main <c>&lt;tbody&gt;</c> element which determines the
        /// button's scale and icon alignment.</p>
        /// </div></li><li><span>text</span> : <see cref="String">String</see><div><p>The <see cref="Ext.button.ButtonConfig.text">text</see> to display ion the Button.</p>
        /// </div></li><li><span>tabIndex</span> : <see cref="Number">Number</see><div><p>The tab index within the input flow.</p>
        /// </div></li></ul></div>
        /// </returns>
        public object getTemplateArgs(){return null;}
        /// <summary>
        /// Gets the text for this Button
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The button text</p>
        /// </div>
        /// </returns>
        public JsString getText(){return null;}
        /// <summary>
        /// Measures the size of the trigger area for menu and split buttons. Will be a width for
        /// a right-aligned trigger and a height for a bottom-aligned trigger. Cached after first measurement.
        /// </summary>
        private void getTriggerSize(){}
        /// <summary>
        /// Returns true if the button has a menu and it is visible
        /// </summary>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool hasVisibleMenu(){return false;}
        /// <summary>
        /// Hides this button's menu (if it has one)
        /// </summary>
        public void hideMenu(){}
        /// <summary>
        /// virtual mouseleave handler called when it is detected that the mouseout event
        /// signified the mouse leaving the arrow area of the button - the &lt;em&gt;.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void onMenuTriggerOut(object e){}
        /// <summary>
        /// virtual mouseenter handler called when it is detected that the mouseover event
        /// signified the mouse entering the arrow area of the button - the &lt;em&gt;.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void onMenuTriggerOver(object e){}
        /// <summary>
        /// virtual mouseenter handler called when it is detected that the mouseout event
        /// signified the mouse entering the encapsulating element.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void onMouseEnter(object e){}
        /// <summary>
        /// virtual mouseleave handler called when it is detected that the mouseover event
        /// signified the mouse entering the encapsulating element.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void onMouseLeave(object e){}
        /// <summary>
        /// mousemove handler called when the mouse moves anywhere within the encapsulating element.
        /// The position is checked to determine if the mouse is entering or leaving the trigger area. Using
        /// mousemove to check this is more resource intensive than we'd like, but it is necessary because
        /// the trigger area does not line up exactly with sub-elements so we don't always get mouseover/out
        /// events when needed. In the future we should consider making the trigger a separate element that
        /// is absolutely positioned and sized over the trigger area.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void onMouseMove(object e){}
        /// <summary>
        /// mouseout handler called when a mouseout event occurs anywhere within the encapsulating element -
        /// or the mouse leaves the encapsulating element.
        /// The targets are interrogated to see what is being exited to where.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void onMouseOut(object e){}
        /// <summary>
        /// mouseover handler called when a mouseover event occurs anywhere within the encapsulating element.
        /// The targets are interrogated to see what is being entered from where.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void onMouseOver(object e){}
        /// <summary>
        /// Assigns this Button's click handler
        /// </summary>
        /// <param name="handler"><p>The function to call when the button is clicked</p>
        /// </param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the handler function is executed.
        /// Defaults to this Button.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.button.Button">Ext.button.Button</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.button.Button setHandler(System.Delegate handler, object scope=null){return null;}
        /// <summary>
        /// Sets the background image (inline style) of the button. This method also changes the value of the icon
        /// config internally.
        /// </summary>
        /// <param name="icon"><p>The path to an image to display in the button</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.button.Button">Ext.button.Button</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.button.Button setIcon(JsString icon){return null;}
        /// <summary>
        /// Sets the CSS class that provides a background image to use as the button's icon. This method also changes the
        /// value of the iconCls config internally.
        /// </summary>
        /// <param name="cls"><p>The CSS class providing the icon image</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.button.Button">Ext.button.Button</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.button.Button setIconCls(JsString cls){return null;}
        /// <summary>
        /// Sets the href of the link dynamically according to the params passed, and any baseParams configured.
        /// <strong>Only valid if the Button was originally configured with a <see cref="Ext.button.ButtonConfig.href">href</see></strong>
        /// </summary>
        /// <param name="params"><p>Parameters to use in the href URL.</p>
        /// </param>
        public void setParams(object @params){}
        /// <summary>
        /// Method to change the scale of the button. See scale for allowed configurations.
        /// </summary>
        /// <param name="scale"><p>The scale to change to.</p>
        /// </param>
        public void setScale(JsString scale){}
        /// <summary>
        /// Sets this Button's text
        /// </summary>
        /// <param name="text"><p>The button text</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.button.Button">Ext.button.Button</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.button.Button setText(JsString text){return null;}
        /// <summary>
        /// Sets the text alignment for this button.
        /// </summary>
        /// <param name="align"><p>The new alignment of the button text. See <see cref="Ext.button.ButtonConfig.textAlign">textAlign</see>.</p>
        /// </param>
        public void setTextAlign(JsString align){}
        /// <summary>
        /// Sets the tooltip for this Button.
        /// </summary>
        /// <param name="tooltip"><p>This may be:</p>
        /// <ul>
        /// <li><strong>String</strong> : A string to be used as innerHTML (html tags are accepted) to show in a tooltip</li>
        /// <li><strong>Object</strong> : A configuration object for <see cref="Ext.tip.QuickTipManager.register">Ext.tip.QuickTipManager.register</see>.</li>
        /// </ul>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.button.Button">Ext.button.Button</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.button.Button setTooltip(object tooltip){return null;}
        /// <summary>
        /// Shows this button's menu (if it has one)
        /// </summary>
        public void showMenu(){}
        /// <summary>
        /// If a state it passed, it becomes the pressed state otherwise the current state is toggled.
        /// </summary>
        /// <param name="state"><p>Force a particular state</p>
        /// </param>
        /// <param name="suppressEvent"><p>True to stop events being fired when calling this method.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        /// <returns>
        /// <span><see cref="Ext.button.Button">Ext.button.Button</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        public Ext.button.Button toggle(object state=null, object suppressEvent=null){return null;}
        public Button(Ext.button.ButtonConfig config){}
        public Button(){}
        public Button(params object[] args){}
    }
    #endregion
    #region ButtonConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ButtonConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// False to not allow a pressed Button to be depressed. Only valid when enableToggle is true.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowDepress;
        /// <summary>
        /// The side of the Button box to render the arrow if the button has an associated menu. Two
        /// values are allowed:
        /// <li>'right'</li>
        /// <li>'bottom'</li>
        /// Defaults to: <c>&quot;right&quot;</c>
        /// </summary>
        public JsString arrowAlign;
        /// <summary>
        /// The className used for the inner arrow element if the button has a menu.
        /// Defaults to: <c>&quot;arrow&quot;</c>
        /// </summary>
        public JsString arrowCls;
        /// <summary>
        /// An object literal of parameters to pass to the url when the href property is specified.
        /// </summary>
        public JsObject baseParams;
        /// <summary>
        /// The DOM event that will fire the handler of the button. This can be any valid event name (dblclick, contextmenu).
        /// Defaults to: <c>&quot;click&quot;</c>
        /// </summary>
        public JsString clickEvent;
        /// <summary>
        /// True to enable pressed/not pressed toggling. If a toggleGroup is specified, this
        /// option will be set to true.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool enableToggle;
        /// <summary>
        /// The CSS class to add to a button when it is in the focussed state.
        /// Defaults to: <c>&quot;focus&quot;</c>
        /// </summary>
        public JsString focusCls;
        /// <summary>
        /// False to disable visual cues on mouseover, mouseout and mousedown.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool handleMouseEvents;
        /// <summary>
        /// A function called when the button is clicked (can be used instead of click event).
        /// </summary>
        public System.Delegate handler;
        /// <summary>
        /// The URL to open when the button is clicked. Specifying this config causes the Button to be
        /// rendered with an anchor (An &lt;a&gt; element) as its active element, referencing the specified URL.
        /// This is better than specifying a click handler of
        /// <code>function() { window.location = "http://www.sencha.com" }
        /// </code>
        /// because the UI will provide meaningful hints to the user as to what to expect upon clicking
        /// the button, and will also allow the user to open in a new tab or window, bookmark or drag the URL, or directly save
        /// the URL stream to disk.
        /// See also the <see cref="Ext.button.ButtonConfig.hrefTarget">hrefTarget</see> config.
        /// </summary>
        public JsString href;
        /// <summary>
        /// The target attribute to use for the underlying anchor. Only used if the href
        /// property is specified.
        /// Defaults to: <c>&quot;_blank&quot;</c>
        /// </summary>
        public JsString hrefTarget;
        /// <summary>
        /// The path to an image to display in the button.
        /// </summary>
        public JsString icon;
        /// <summary>
        /// The side of the Button box to render the icon. Four values are allowed:
        /// <li>'top'</li>
        /// <li>'right'</li>
        /// <li>'bottom'</li>
        /// <li>'left'</li>
        /// Defaults to: <c>&quot;left&quot;</c>
        /// </summary>
        public JsString iconAlign;
        /// <summary>
        /// A css class which sets a background image to be used as the icon for this button.
        /// </summary>
        public JsString iconCls;
        /// <summary>
        /// Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob.
        /// </summary>
        public object menu;
        /// <summary>
        /// The CSS class to add to a button when it's menu is active.
        /// Defaults to: <c>&quot;menu-active&quot;</c>
        /// </summary>
        public JsString menuActiveCls;
        /// <summary>
        /// The position to align the menu to (see Ext.Element.alignTo for more details).
        /// Defaults to: <c>&quot;tl-bl?&quot;</c>
        /// </summary>
        public JsString menuAlign;
        /// <summary>
        /// If used in a Toolbar, the text to be used if this item is shown in the overflow menu.
        /// See also Ext.toolbar.Item.overflowText.
        /// </summary>
        public JsString overflowText;
        /// <summary>
        /// An object literal of parameters to pass to the url when the href property is specified. Any params
        /// override baseParams. New params can be set using the setParams method.
        /// </summary>
        public JsObject @params;
        /// <summary>
        /// True to start pressed (only if enableToggle = true)
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool pressed;
        /// <summary>
        /// The CSS class to add to a button when it is in the pressed state.
        /// Defaults to: <c>&quot;pressed&quot;</c>
        /// </summary>
        public JsString pressedCls;
        /// <summary>
        /// True to prevent the default action when the clickEvent is processed.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool preventDefault;
        /// <summary>
        /// True to repeat fire the click event while the mouse is down. This can also be a
        /// ClickRepeater config object.
        /// Defaults to: <c>false</c>
        /// </summary>
        public object repeat;
        /// <summary>
        /// The size of the Button. Three values are allowed:
        /// <li>'small' - Results in the button element being 16px high.</li>
        /// <li>'medium' - Results in the button element being 24px high.</li>
        /// <li>'large' - Results in the button element being 32px high.</li>
        /// Defaults to: <c>&quot;small&quot;</c>
        /// </summary>
        public JsString scale;
        /// <summary>
        /// The scope (this reference) in which the handler and toggleHandler is executed.
        /// Defaults to this Button.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// Set a DOM tabIndex for this button.
        /// </summary>
        public JsNumber tabIndex;
        /// <summary>
        /// The button text to be used as innerHTML (html tags are accepted).
        /// </summary>
        public JsString text;
        /// <summary>
        /// The text alignment for this button (center, left, right).
        /// Defaults to: <c>&quot;center&quot;</c>
        /// </summary>
        public JsString textAlign;
        /// <summary>
        /// The group this toggle button is a member of (only 1 per group can be pressed). If a toggleGroup
        /// is specified, the enableToggle configuration will automatically be set to true.
        /// </summary>
        public JsString toggleGroup;
        /// <summary>
        /// Function called when a Button with enableToggle set to true is clicked.
        /// </summary>
        public System.Delegate toggleHandler;
        /// <summary>
        /// The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or
        /// QuickTips config object.
        /// </summary>
        public object tooltip;
        /// <summary>
        /// The type of tooltip to use. Either 'qtip' for QuickTips or 'title' for title attribute.
        /// Defaults to: <c>&quot;qtip&quot;</c>
        /// </summary>
        public JsString tooltipType;
        /// <summary>
        /// The type of &lt;input&gt; to create: submit, reset or button.
        /// Defaults to: <c>&quot;button&quot;</c>
        /// </summary>
        public JsString type;
        public ButtonConfig(params object[] args){}
    }
    #endregion
    #region ButtonEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ButtonEvents : Ext.ComponentEvents
    {
        /// <summary>
        /// Fires when this button is clicked, before the configured handler is invoked. Execution of the
        /// handler may be vetoed by returning false to this event.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The click event</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void click(Ext.button.Button @this, object e, object eOpts){}
        /// <summary>
        /// If this button has a menu, this event fires when it is hidden
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="menu">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void menuhide(Ext.button.Button @this, Ext.menu.Menu menu, object eOpts){}
        /// <summary>
        /// If this button has a menu, this event fires when it is shown
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="menu">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void menushow(Ext.button.Button @this, Ext.menu.Menu menu, object eOpts){}
        /// <summary>
        /// If this button has a menu, this event fires when the mouse leaves the menu triggering element
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="menu">
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void menutriggerout(Ext.button.Button @this, Ext.menu.Menu menu, object e, object eOpts){}
        /// <summary>
        /// If this button has a menu, this event fires when the mouse enters the menu triggering element
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="menu">
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void menutriggerover(Ext.button.Button @this, Ext.menu.Menu menu, object e, object eOpts){}
        /// <summary>
        /// Fires when the mouse exits the button
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseout(Ext.button.Button @this, object e, object eOpts){}
        /// <summary>
        /// Fires when the mouse hovers over the button
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="e"><p>The event object</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseover(Ext.button.Button @this, object e, object eOpts){}
        /// <summary>
        /// Fires when the 'pressed' state of this button changes (only if enableToggle = true)
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="pressed">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void toggle(Ext.button.Button @this, bool pressed, object eOpts){}
        public ButtonEvents(params object[] args){}
    }
    #endregion
}
