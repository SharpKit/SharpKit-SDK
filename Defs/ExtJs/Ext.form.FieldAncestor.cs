//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form
{
    #region FieldAncestor
    /// <summary>
    /// <p>A mixin for <see cref="Ext.container.Container">Ext.container.Container</see> components that are likely to have form fields in their
    /// items subtree. Adds the following capabilities:</p>
    /// <ul>
    /// <li>Methods for handling the addition and removal of <see cref="Ext.form.Labelable">Ext.form.Labelable</see> and <see cref="Ext.form.field.Field">Ext.form.field.Field</see>
    /// instances at any depth within the container.</li>
    /// <li>Events (<see cref="Ext.form.FieldAncestorEvents.fieldvaliditychange">fieldvaliditychange</see> and <see cref="Ext.form.FieldAncestorEvents.fielderrorchange">fielderrorchange</see>) for handling changes to the state
    /// of individual fields at the container level.</li>
    /// <li>Automatic application of <see cref="Ext.form.FieldAncestorConfig.fieldDefaults">fieldDefaults</see> config properties to each field added within the
    /// container, to facilitate uniform configuration of all fields.</li>
    /// </ul>
    /// <p>This mixin is primarily for internal use by <see cref="Ext.form.Panel">Ext.form.Panel</see> and <see cref="Ext.form.FieldContainer">Ext.form.FieldContainer</see>,
    /// and should not normally need to be used directly.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial interface FieldAncestor
    {
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        JsString @className{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject configMap{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        bool isInstance{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        Class self{get;set;}
        /// <summary>
        /// Handle errorchange events on sub-fields; invoke the aggregated event and method
        /// </summary>
        /// <param name="labelable">
        /// </param>
        /// <param name="activeError">
        /// </param>
        void handleFieldErrorChange(object labelable, object activeError);
        /// <summary>
        /// Handle validitychange events on sub-fields; invoke the aggregated event and method
        /// </summary>
        /// <param name="field">
        /// </param>
        /// <param name="isValid">
        /// </param>
        void handleFieldValidityChange(object field, object isValid);
        /// <summary>
        /// Initializes the FieldAncestor's state; this must be called from the initComponent method of any components
        /// importing this mixin.
        /// </summary>
        void initFieldAncestor();
        /// <summary>
        /// Initialize the fieldDefaults object
        /// </summary>
        void initFieldDefaults();
        /// <summary>
        /// Called when a Ext.form.field.Field instance is added to the container's subtree.
        /// </summary>
        /// <param name="field"><p>The field which was added</p>
        /// </param>
        void onFieldAdded(Ext.form.field.Field field);
        /// <summary>
        /// Handle the addition and removal of components in the FieldAncestor component's child tree.
        /// </summary>
        /// <param name="parent">
        /// </param>
        /// <param name="child">
        /// </param>
        void onFieldAncestorSubtreeChange(object parent, object child);
        /// <summary>
        /// Fired when the error message of any field within the container changes.
        /// </summary>
        /// <param name="field"><p>The sub-field whose active error changed</p>
        /// </param>
        /// <param name="error"><p>The new active error message</p>
        /// </param>
        void onFieldErrorChange(Labelable field, JsString error);
        /// <summary>
        /// Called when a Ext.form.field.Field instance is removed from the container's subtree.
        /// </summary>
        /// <param name="field"><p>The field which was removed</p>
        /// </param>
        void onFieldRemoved(Ext.form.field.Field field);
        /// <summary>
        /// Fired when the validity of any field within the container changes.
        /// </summary>
        /// <param name="field"><p>The sub-field whose validity changed</p>
        /// </param>
        /// <param name="valid"><p>The new validity state</p>
        /// </param>
        void onFieldValidityChange(Ext.form.field.Field field, bool valid);
        /// <summary>
        /// Called when a Ext.form.Labelable instance is added to the container's subtree.
        /// </summary>
        /// <param name="labelable"><p>The instance that was added</p>
        /// </param>
        void onLabelableAdded(Labelable labelable);
        /// <summary>
        /// Called when a Ext.form.Labelable instance is removed from the container's subtree.
        /// </summary>
        /// <param name="labelable"><p>The instance that was removed</p>
        /// </param>
        void onLabelableRemoved(Labelable labelable);
    }
    #endregion
    #region FieldAncestorConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FieldAncestorConfig : Ext.BaseConfig
    {
        /// <summary>
        /// If specified, the properties in this object are used as default config values for each Ext.form.Labelable
        /// instance (e.g. Ext.form.field.Base or Ext.form.FieldContainer) that is added as a descendant of
        /// this container. Corresponding values specified in an individual field's own configuration, or from the defaults config of its parent container, will take precedence. See the
        /// documentation for Ext.form.Labelable to see what config options may be specified in the fieldDefaults.
        /// Example:
        /// <code>new <see cref="Ext.form.Panel">Ext.form.Panel</see>({
        /// fieldDefaults: {
        /// labelAlign: 'left',
        /// labelWidth: 100
        /// },
        /// items: [{
        /// xtype: 'fieldset',
        /// defaults: {
        /// labelAlign: 'top'
        /// },
        /// items: [{
        /// name: 'field1'
        /// }, {
        /// name: 'field2'
        /// }]
        /// }, {
        /// xtype: 'fieldset',
        /// items: [{
        /// name: 'field3',
        /// labelWidth: 150
        /// }, {
        /// name: 'field4'
        /// }]
        /// }]
        /// });
        /// </code>
        /// In this example, field1 and field2 will get labelAlign:'top' (from the fieldset's defaults) and labelWidth:100
        /// (from fieldDefaults), field3 and field4 will both get labelAlign:'left' (from fieldDefaults and field3 will use
        /// the labelWidth:150 from its own config.
        /// </summary>
        public JsObject fieldDefaults;
        public FieldAncestorConfig(params object[] args){}
    }
    #endregion
    #region FieldAncestorEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class FieldAncestorEvents : Ext.BaseEvents
    {
        /// <summary>
        /// Fires when the active error message is changed for any one of the Ext.form.Labelable instances
        /// within this container.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="The"><p>Labelable instance whose active error was changed</p>
        /// </param>
        /// <param name="error"><p>The active error message</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void fielderrorchange(FieldAncestor @this, Labelable The, JsString error, object eOpts){}
        /// <summary>
        /// Fires when the validity state of any one of the Ext.form.field.Field instances within this
        /// container changes.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="The"><p>Field instance whose validity changed</p>
        /// </param>
        /// <param name="isValid"><p>The field's new validity state</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void fieldvaliditychange(FieldAncestor @this, Labelable The, JsString isValid, object eOpts){}
        public FieldAncestorEvents(params object[] args){}
    }
    #endregion
}
