//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.util
{
    #region KeyNav
    /// <inheritdocs />
    /// <summary>
    /// <p>Provides a convenient wrapper for normalized keyboard navigation. KeyNav allows you to bind navigation keys to
    /// function calls that will get called when the keys are pressed, providing an easy way to implement custom navigation
    /// schemes for any UI component.</p>
    /// <p>The following are all of the possible keys that can be implemented: enter, space, left, right, up, down, tab, esc,
    /// pageUp, pageDown, del, backspace, home, end.</p>
    /// <p>Usage:</p>
    /// <pre><code>var nav = new <see cref="Ext.util.KeyNav">Ext.util.KeyNav</see>({
    /// target : "my-element",
    /// left   : function(e){
    /// this.moveLeft(e.ctrlKey);
    /// },
    /// right  : function(e){
    /// this.moveRight(e.ctrlKey);
    /// },
    /// enter  : function(e){
    /// this.save();
    /// },
    /// // Binding may be a function specifiying fn, scope and defaultAction
    /// esc: {
    /// fn: this.onEsc,
    /// defaultEventAction: false
    /// },
    /// scope : this
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class KeyNav : Ext.Base
    {
        /// <summary>
        /// The method to call on the Ext.EventObject after this KeyNav intercepts a key. Valid values are Ext.EventObject.stopEvent, Ext.EventObject.preventDefault and Ext.EventObject.stopPropagation.
        /// If a falsy value is specified, no method is called on the key event.
        /// Defaults to: <c>&quot;stopEvent&quot;</c>
        /// </summary>
        public JsString defaultEventAction;
        /// <summary>
        /// True to disable this KeyNav instance.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool disabled;
        /// <summary>
        /// The event to listen for to pick up key events.
        /// Defaults to: <c>&quot;keypress&quot;</c>
        /// </summary>
        public JsString eventName;
        /// <summary>
        /// Handle the keydown event instead of keypress. KeyNav automatically does this for IE since IE does not propagate
        /// special keys on keypress, but setting this to true will force other browsers to also handle keydown instead of
        /// keypress.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool forceKeyDown;
        /// <summary>
        /// Configure this as true if there are any input fields within the target, and this KeyNav
        /// should not process events from input fields, (&amp;lt;input&gt;, &amp;lt;textarea&gt; and elements withcontentEditable="true"`)
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool ignoreInputFields;
        /// <summary>
        /// An optional event processor function which accepts the argument list provided by the configured
        /// event of the target, and returns a keyEvent for processing by the KeyMap.
        /// This may be useful when the <see cref="Ext.util.KeyNavConfig.target">target</see> is a Component with s complex event signature. Extra information from
        /// the event arguments may be injected into the event for use by the handler functions before returning it.
        /// </summary>
        public System.Delegate processEvent;
        /// <summary>
        /// The scope (this context) in which the processEvent method is executed.
        /// Defaults to: <c>this</c>
        /// </summary>
        public JsObject processEventScope;
        /// <summary>
        /// The object on which to listen for the event specified by the eventName config option.
        /// </summary>
        public object target;
        /// <summary>
        /// Destroy this KeyNav (this is the same as calling disable).
        /// </summary>
        /// <param name="removeEl"><p>True to remove the element associated with this KeyNav.</p>
        /// </param>
        public void destroy(bool removeEl){}
        /// <summary>
        /// Disables this KeyNav.
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enables this KeyNav.
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Determines the event to bind to listen for keys. Defaults to the eventName value, but
        /// may be overridden the forceKeyDown setting.
        /// The useKeyDown option on the EventManager modifies the default <see cref="Ext.util.KeyNavConfig.eventName">eventName</see> to be <c>keydown</c>,
        /// but a configured <see cref="Ext.util.KeyNavConfig.eventName">eventName</see> takes priority over this.
        /// </summary>
        /// <param name="forceKeyDown">
        /// </param>
        /// <param name="configuredEventName">
        /// </param>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The type of event to listen for.</p>
        /// </div>
        /// </returns>
        private JsString getKeyEvent(object forceKeyDown, object configuredEventName){return null;}
        /// <summary>
        /// Method for filtering out the map argument
        /// </summary>
        /// <param name="keyCode">
        /// </param>
        /// <param name="event">
        /// </param>
        /// <param name="options"><p>Contains the handler to call</p>
        /// </param>
        private void handleEvent(JsNumber keyCode, EventObject @event, object options){}
        /// <summary>
        /// Old constructor signature.
        /// </summary>
        /// <param name="el"><p>The element or its ID to bind to</p>
        /// </param>
        /// <param name="config"><p>The config</p>
        /// </param>
        private void legacyConstructor(object el, object config){}
        /// <summary>
        /// Convenience function for setting disabled/enabled by boolean.
        /// </summary>
        /// <param name="disabled">
        /// </param>
        public void setDisabled(bool disabled){}
        public KeyNav(Ext.util.KeyNavConfig config){}
        public KeyNav(){}
        public KeyNav(params object[] args){}
    }
    #endregion
    #region KeyNavConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class KeyNavConfig : Ext.BaseConfig
    {
        /// <summary>
        /// The method to call on the Ext.EventObject after this KeyNav intercepts a key. Valid values are Ext.EventObject.stopEvent, Ext.EventObject.preventDefault and Ext.EventObject.stopPropagation.
        /// If a falsy value is specified, no method is called on the key event.
        /// Defaults to: <c>&quot;stopEvent&quot;</c>
        /// </summary>
        public JsString defaultEventAction;
        /// <summary>
        /// True to disable this KeyNav instance.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool disabled;
        /// <summary>
        /// The event to listen for to pick up key events.
        /// Defaults to: <c>&quot;keypress&quot;</c>
        /// </summary>
        public JsString eventName;
        /// <summary>
        /// Handle the keydown event instead of keypress. KeyNav automatically does this for IE since IE does not propagate
        /// special keys on keypress, but setting this to true will force other browsers to also handle keydown instead of
        /// keypress.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool forceKeyDown;
        /// <summary>
        /// Configure this as true if there are any input fields within the target, and this KeyNav
        /// should not process events from input fields, (&amp;lt;input&gt;, &amp;lt;textarea&gt; and elements withcontentEditable="true"`)
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool ignoreInputFields;
        /// <summary>
        /// An optional event processor function which accepts the argument list provided by the configured
        /// event of the target, and returns a keyEvent for processing by the KeyMap.
        /// This may be useful when the <see cref="Ext.util.KeyNavConfig.target">target</see> is a Component with s complex event signature. Extra information from
        /// the event arguments may be injected into the event for use by the handler functions before returning it.
        /// </summary>
        public System.Delegate processEvent;
        /// <summary>
        /// The scope (this context) in which the processEvent method is executed.
        /// Defaults to: <c>this</c>
        /// </summary>
        public JsObject processEventScope;
        /// <summary>
        /// The object on which to listen for the event specified by the eventName config option.
        /// </summary>
        public object target;
        public KeyNavConfig(params object[] args){}
    }
    #endregion
    #region KeyNavEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class KeyNavEvents : Ext.BaseEvents
    {
        public KeyNavEvents(params object[] args){}
    }
    #endregion
}
