//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data
{
    #region IdGenerator
    /// <inheritdocs />
    /// <summary>
    /// <p>This class is a base for all id generators. It also provides lookup of id generators by
    /// their id.</p>
    /// <p>Generally, id generators are used to generate a primary key for new model instances. There
    /// are different approaches to solving this problem, so this mechanism has both simple use
    /// cases and is open to custom implementations. A <see cref="Ext.data.Model">Ext.data.Model</see> requests id generation
    /// using the <see cref="Ext.data.ModelConfig.idgen">Ext.data.Model.idgen</see> property.</p>
    /// <h1>Identity, Type and Shared IdGenerators</h1>
    /// <p>It is often desirable to share IdGenerators to ensure uniqueness or common configuration.
    /// This is done by giving IdGenerator instances an id property by which they can be looked
    /// up using the <see cref="Ext.data.IdGenerator.get">get</see> method. To configure two <see cref="Ext.data.Model">Model</see> classes
    /// to share one <see cref="Ext.data.SequentialIdGenerator">sequential</see> id generator, you simply
    /// assign them the same id:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModelA', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: {
    /// type: 'sequential',
    /// id: 'foo'
    /// }
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModelB', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: {
    /// type: 'sequential',
    /// id: 'foo'
    /// }
    /// });
    /// </code></pre>
    /// <p>To make this as simple as possible for generator types that are shared by many (or all)
    /// Models, the IdGenerator types (such as 'sequential' or 'uuid') are also reserved as
    /// generator id's. This is used by the <see cref="Ext.data.UuidGenerator">Ext.data.UuidGenerator</see> which has an id equal
    /// to its type ('uuid'). In other words, the following Models share the same generator:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModelX', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: 'uuid'
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModelY', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: 'uuid'
    /// });
    /// </code></pre>
    /// <p>This can be overridden (by specifying the id explicitly), but there is no particularly
    /// good reason to do so for this generator type.</p>
    /// <h1>Creating Custom Generators</h1>
    /// <p>An id generator should derive from this class and implement the <see cref="Ext.data.IdGenerator.generate">generate</see> method.
    /// The constructor will apply config properties on new instances, so a constructor is often
    /// not necessary.</p>
    /// <p>To register an id generator type, a derived class should provide an <c>alias</c> like so:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.CustomIdGenerator', {
    /// extend: '<see cref="Ext.data.IdGenerator">Ext.data.IdGenerator</see>',
    /// alias: 'idgen.custom',
    /// configProp: 42, // some config property w/default value
    /// generate: function () {
    /// return ... // a new id
    /// }
    /// });
    /// </code></pre>
    /// <p>Using the custom id generator is then straightforward:</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModel', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: 'custom'
    /// });
    /// // or...
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModel', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: {
    /// type: 'custom',
    /// configProp: value
    /// }
    /// });
    /// </code></pre>
    /// <p>It is not recommended to mix shared generators with generator configuration. This leads
    /// to unpredictable results unless all configurations match (which is also redundant). In
    /// such cases, a custom generator with a default id is the best approach.</p>
    /// <pre><code><see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.CustomIdGenerator', {
    /// extend: '<see cref="Ext.data.SequentialIdGenerator">Ext.data.SequentialIdGenerator</see>',
    /// alias: 'idgen.custom',
    /// id: 'custom', // shared by default
    /// prefix: 'ID_',
    /// seed: 1000
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModelX', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: 'custom'
    /// });
    /// <see cref="Ext.ExtContext.define">Ext.define</see>('MyApp.data.MyModelY', {
    /// extend: '<see cref="Ext.data.Model">Ext.data.Model</see>',
    /// idgen: 'custom'
    /// });
    /// // the above models share a generator that produces ID_1000, ID_1001, etc..
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class IdGenerator : Ext.Base
    {
        /// <summary>
        /// The id by which to register a new instance. This instance can be found using the
        /// get static method.
        /// </summary>
        public JsString id;
        /// <summary>
        /// true in this class to identify an object as an instantiated IdGenerator, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isGenerator{get;set;}
        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="config"><p>Configuration object to be applied to the new instance.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div>
        /// </div>
        /// </returns>
        public IdGenerator(object config=null){}
        /// <summary>
        /// Generates and returns the next id. This method must be implemented by the derived
        /// class.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The next id.</p>
        /// </div>
        /// </returns>
        public JsString generate(){return null;}
        /// <summary>
        /// This object is keyed by id to lookup instances.
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject all{get;set;}
        /// <summary>
        /// Returns the IdGenerator given its config description.
        /// </summary>
        /// <param name="config"><p>If this parameter is an IdGenerator instance, it is
        /// simply returned. If this is a string, it is first used as an id for lookup and
        /// then, if there is no match, as a type to create a new instance. This parameter
        /// can also be a config object that contains a <c>type</c> property (among others) that
        /// are used to create and configure the instance.</p>
        /// </param>
        public static void get(object config){}
        public IdGenerator(IdGeneratorConfig config){}
        public IdGenerator(params object[] args){}
    }
    #endregion
    #region IdGeneratorConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class IdGeneratorConfig : Ext.BaseConfig
    {
        /// <summary>
        /// The id by which to register a new instance. This instance can be found using the
        /// get static method.
        /// </summary>
        public JsString id;
        public IdGeneratorConfig(params object[] args){}
    }
    #endregion
    #region IdGeneratorEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class IdGeneratorEvents : Ext.BaseEvents
    {
        public IdGeneratorEvents(params object[] args){}
    }
    #endregion
}
