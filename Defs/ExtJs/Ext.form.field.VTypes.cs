//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.form.field
{
    #region VTypes
    /// <inheritdocs />
    /// <summary>
    /// <p>This is a singleton object which contains a set of commonly used field validation functions
    /// and provides a mechanism for creating reusable custom field validations.
    /// The following field validation functions are provided out of the box:</p>
    /// <ul>
    /// <li><see cref="Ext.form.field.VTypes.alpha">alpha</see></li>
    /// <li><see cref="Ext.form.field.VTypes.alphanum">alphanum</see></li>
    /// <li><see cref="Ext.form.field.VTypes.email">email</see></li>
    /// <li><see cref="Ext.form.field.VTypes.url">url</see></li>
    /// </ul>
    /// <p>VTypes can be applied to a <see cref="Ext.form.field.Text">Text Field</see> using the <c><see cref="Ext.form.field.TextConfig.vtype">vtype</see></c> configuration:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.Text">Ext.form.field.Text</see>', {
    /// fieldLabel: 'Email Address',
    /// name: 'email',
    /// vtype: 'email' // applies email validation rules to this field
    /// });
    /// </code></pre>
    /// <p>To create custom VTypes:</p>
    /// <pre><code>// custom Vtype for vtype:'time'
    /// var timeTest = /^([1-9]|1[0-9]):([0-5][0-9])(\s[a|p]m)$/i;
    /// <see cref="Ext.ExtContext.apply">Ext.apply</see>(<see cref="Ext.form.field.VTypes">Ext.form.field.VTypes</see>, {
    /// //  vtype validation function
    /// time: function(val, field) {
    /// return timeTest.test(val);
    /// },
    /// // vtype Text property: The error text to display when the validation function returns false
    /// timeText: 'Not a valid time.  Must be in the format "12:34 PM".',
    /// // vtype Mask property: The keystroke filter mask
    /// timeMask: /[\d\s:amp]/i
    /// });
    /// </code></pre>
    /// <p>In the above example the <c>time</c> function is the validator that will run when field validation occurs,
    /// <c>timeText</c> is the error message, and <c>timeMask</c> limits what characters can be typed into the field.
    /// Note that the <c>Text</c> and <c>Mask</c> functions must begin with the same name as the validator function.</p>
    /// <p>Using a custom validator is the same as using one of the build-in validators - just use the name of the validator function
    /// as the <c><see cref="Ext.form.field.TextConfig.vtype">vtype</see></c> configuration on a <see cref="Ext.form.field.Text">Text Field</see>:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.form.field.Text">Ext.form.field.Text</see>', {
    /// fieldLabel: 'Departure Time',
    /// name: 'departureTime',
    /// vtype: 'time' // applies custom time validation rules to this field
    /// });
    /// </code></pre>
    /// <p>Another example of a custom validator:</p>
    /// <pre><code>// custom Vtype for vtype:'IPAddress'
    /// <see cref="Ext.ExtContext.apply">Ext.apply</see>(<see cref="Ext.form.field.VTypes">Ext.form.field.VTypes</see>, {
    /// IPAddress:  function(v) {
    /// return /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(v);
    /// },
    /// IPAddressText: 'Must be a numeric IP address',
    /// IPAddressMask: /[\d\.]/i
    /// });
    /// </code></pre>
    /// <p>It's important to note that using <see cref="Ext.ExtContext.apply">Ext.apply()</see> means that the custom validator function
    /// as well as <c>Text</c> and <c>Mask</c> fields are added as properties of the <c><see cref="Ext.form.field.VTypes">Ext.form.field.VTypes</see></c> singleton.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class VTypes : Ext.Base
    {
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        private static JsString @className{get;set;}
        /// <summary>
        /// The keystroke filter mask to be applied on alpha input. Defaults to: /[a-z_]/i
        /// Defaults to: <c>/[a-z_]/i</c>
        /// </summary>
        public static JsRegExp alphaMask{get;set;}
        /// <summary>
        /// The error text to display when the alpha validation function returns false.
        /// Defaults to: 'This field should only contain letters and _'
        /// Defaults to: <c>&quot;This field should only contain letters and _&quot;</c>
        /// </summary>
        public static JsString alphaText{get;set;}
        /// <summary>
        /// The keystroke filter mask to be applied on alphanumeric input. Defaults to: /[a-z0-9_]/i
        /// Defaults to: <c>/[a-z0-9_]/i</c>
        /// </summary>
        public static JsRegExp alphanumMask{get;set;}
        /// <summary>
        /// The error text to display when the alphanumeric validation function returns false.
        /// Defaults to: 'This field should only contain letters, numbers and _'
        /// Defaults to: <c>&quot;This field should only contain letters, numbers and _&quot;</c>
        /// </summary>
        public static JsString alphanumText{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject configMap{get;set;}
        /// <summary>
        /// The keystroke filter mask to be applied on email input. See the email method for information about
        /// more complex email validation. Defaults to: /[a-z0-9_.-@]/i
        /// Defaults to: <c>/[a-z0-9_\.\-@\+]/i</c>
        /// </summary>
        public static JsRegExp emailMask{get;set;}
        /// <summary>
        /// The error text to display when the email validation function returns false.
        /// Defaults to: 'This field should be an e-mail address in the format "user@example.com"'
        /// Defaults to: <c>&quot;This field should be an e-mail address in the format &quot;user@example.com&quot;&quot;</c>
        /// </summary>
        public static JsString emailText{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        private static JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        private static JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        private static bool isInstance{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        protected static Class self{get;set;}
        /// <summary>
        /// The error text to display when the url validation function returns false.
        /// Defaults to: 'This field should be a URL in the format "http:/'+'/www.example.com"'
        /// </summary>
        public static JsString urlText{get;set;}
        /// <summary>
        /// The function used to validate alpha values
        /// </summary>
        /// <param name="value"><p>The value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if the RegExp test passed, and false if not.</p>
        /// </div>
        /// </returns>
        public static bool alpha(JsString value){return false;}
        /// <summary>
        /// The function used to validate alphanumeric values
        /// </summary>
        /// <param name="value"><p>The value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if the RegExp test passed, and false if not.</p>
        /// </div>
        /// </returns>
        public static bool alphanum(JsString value){return false;}
        /// <summary>
        /// Call the original method that was previously overridden with override
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// constructor: function() {
        /// alert("I'm a cat!");
        /// }
        /// });
        /// My.Cat.override({
        /// constructor: function() {
        /// alert("I'm going to be a cat!");
        /// this.callOverridden();
        /// alert("Meeeeoooowwww");
        /// }
        /// });
        /// var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
        /// // alerts "I'm a cat!"
        /// // alerts "Meeeeoooowwww"
        /// </code>
        /// <p>This method has been <strong>deprecated</strong> </p>
        /// <p>as of 4.1. Use <see cref="Ext.Base.callParent">callParent</see> instead.</p>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callOverridden(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the overridden method</p>
        /// </div>
        /// </returns>
        protected static object callOverridden(object args=null){return null;}
        /// <summary>
        /// Call the "parent" method of the current method. That is the method previously
        /// overridden by derivation or by an override (see Ext.define).
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Base', {
        /// constructor: function (x) {
        /// this.x = x;
        /// },
        /// statics: {
        /// method: function (x) {
        /// return x;
        /// }
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived', {
        /// extend: 'My.Base',
        /// constructor: function () {
        /// this.callParent([21]);
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // alerts 21
        /// </code>
        /// This can be used with an override as follows:
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.DerivedOverride', {
        /// override: 'My.Derived',
        /// constructor: function (x) {
        /// this.callParent([x*2]); // calls original My.Derived constructor
        /// }
        /// });
        /// var obj = new My.Derived();
        /// alert(obj.x);  // now alerts 42
        /// </code>
        /// This also works with static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2', {
        /// extend: 'My.Base',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Base.method
        /// }
        /// }
        /// });
        /// alert(My.Base.method(10);     // alerts 10
        /// alert(My.Derived2.method(10); // alerts 20
        /// </code>
        /// Lastly, it also works with overridden static methods.
        /// <code> <see cref="Ext.ExtContext.define">Ext.define</see>('My.Derived2Override', {
        /// override: 'My.Derived2',
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x*2]); // calls My.Derived2.method
        /// }
        /// }
        /// });
        /// alert(My.Derived2.method(10); // now alerts 40
        /// </code>
        /// </summary>
        /// <param name="args"><p>The arguments, either an array or the <c>arguments</c> object
        /// from the current method, for example: <c>this.callParent(arguments)</c></p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>Returns the result of calling the parent method</p>
        /// </div>
        /// </returns>
        protected static object callParent(object args=null){return null;}
        /// <summary>
        /// </summary>
        private static void configClass(){}
        /// <summary>
        /// Overrides: <see cref="Ext.AbstractComponent.destroy">Ext.AbstractComponent.destroy</see>, <see cref="Ext.AbstractPlugin.destroy">Ext.AbstractPlugin.destroy</see>, <see cref="Ext.layout.Layout.destroy">Ext.layout.Layout.destroy</see>
        /// </summary>
        private static void destroy(){}
        /// <summary>
        /// The function used to validate email addresses. Note that this is a very basic validation - complete
        /// validation per the email RFC specifications is very complex and beyond the scope of this class, although this
        /// function can be overridden if a more comprehensive validation scheme is desired. See the validation section
        /// of the Wikipedia article on email addresses for additional information. This implementation is intended
        /// to validate the following emails:
        /// <li><c>barney@example.de</c></li>
        /// <li><c>barney.rubble@example.com</c></li>
        /// <li><c>barney-rubble@example.coop</c></li>
        /// <li><c>barney+rubble@example.com</c></li>
        /// </summary>
        /// <param name="value"><p>The email address</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if the RegExp test passed, and false if not.</p>
        /// </div>
        /// </returns>
        public static bool email(JsString value){return false;}
        /// <summary>
        /// Parameters<li><span>name</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="name">
        /// </param>
        private static void getConfig(object name){}
        /// <summary>
        /// Returns the initial configuration passed to constructor when instantiating
        /// this class.
        /// </summary>
        /// <param name="name"><p>Name of the config option to return.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see>/Mixed</span><div><p>The full config object or a single config value
        /// when <c>name</c> parameter specified.</p>
        /// </div>
        /// </returns>
        public static object getInitialConfig(object name=null){return null;}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        private static void hasConfig(object config){}
        /// <summary>
        /// Initialize configuration for this class. a typical example:
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.awesome.Class', {
        /// // The default config
        /// config: {
        /// name: 'Awesome',
        /// isAwesome: true
        /// },
        /// constructor: function(config) {
        /// this.initConfig(config);
        /// }
        /// });
        /// var awesome = new My.awesome.Class({
        /// name: 'Super Awesome'
        /// });
        /// alert(awesome.getName()); // 'Super Awesome'
        /// </code>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.Base">Ext.Base</see></span><div><p>this</p>
        /// </div>
        /// </returns>
        protected static Ext.Base initConfig(object config){return null;}
        /// <summary>
        /// Parameters<li><span>names</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>callback</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>scope</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="names">
        /// </param>
        /// <param name="callback">
        /// </param>
        /// <param name="scope">
        /// </param>
        private static void onConfigUpdate(object names, object callback, object scope){}
        /// <summary>
        /// Parameters<li><span>config</span> : <see cref="Object">Object</see><div>
        /// </div></li><li><span>applyIfNotSet</span> : <see cref="Object">Object</see><div>
        /// </div></li>
        /// </summary>
        /// <param name="config">
        /// </param>
        /// <param name="applyIfNotSet">
        /// </param>
        private static void setConfig(object config, object applyIfNotSet){}
        /// <summary>
        /// Get the reference to the class from which this object was instantiated. Note that unlike self,
        /// this.statics() is scope-independent and it always returns the class from which it was called, regardless of what
        /// this points to during run-time
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// totalCreated: 0,
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// var statics = this.statics();
        /// alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to
        /// // equivalent to: My.Cat.speciesName
        /// alert(this.self.speciesName);   // dependent on 'this'
        /// statics.totalCreated++;
        /// },
        /// clone: function() {
        /// var cloned = new this.self;                      // dependent on 'this'
        /// cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName
        /// return cloned;
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// },
        /// constructor: function() {
        /// this.callParent();
        /// }
        /// });
        /// var cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));         // alerts 'My.SnowLeopard'
        /// alert(clone.groupName);                 // alerts 'Cat'
        /// alert(My.Cat.totalCreated);             // alerts 3
        /// </code>
        /// </summary>
        /// <returns>
        /// <span><see cref="Ext.Class">Ext.Class</see></span><div>
        /// </div>
        /// </returns>
        protected static Class statics(){return null;}
        /// <summary>
        /// The function used to validate URLs
        /// </summary>
        /// <param name="value"><p>The URL</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>true if the RegExp test passed, and false if not.</p>
        /// </div>
        /// </returns>
        public static bool url(JsString value){return false;}
        public VTypes(VTypesConfig config){}
        public VTypes(){}
        public VTypes(params object[] args){}
    }
    #endregion
    #region VTypesConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class VTypesConfig : Ext.BaseConfig
    {
        public VTypesConfig(params object[] args){}
    }
    #endregion
    #region VTypesEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class VTypesEvents : Ext.BaseEvents
    {
        public VTypesEvents(params object[] args){}
    }
    #endregion
}
