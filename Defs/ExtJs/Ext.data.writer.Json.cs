//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:40 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.data.writer
{
    #region Json
    /// <inheritdocs />
    /// <summary>
    /// <p>This class is used to write <see cref="Ext.data.Model">Ext.data.Model</see> data to the server in a JSON format.
    /// The <see cref="Ext.data.writer.JsonConfig.allowSingle">allowSingle</see> configuration can be set to false to force the records to always be
    /// encoded in an array, even if there is only a single record being sent.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Json : Writer
    {
        /// <summary>
        /// False to ensure that records are always wrapped in an array, even if there is only
        /// one record being sent. When there is more than one record, they will always be encoded into an array.
        /// Defaults to true. Example:
        /// <code>// with allowSingle: true
        /// "root": {
        /// "first": "Mark",
        /// "last": "Corrigan"
        /// }
        /// // with allowSingle: false
        /// "root": [{
        /// "first": "Mark",
        /// "last": "Corrigan"
        /// }]
        /// </code>
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowSingle;
        /// <summary>
        /// True to use Ext.encode() on the data before sending. Defaults to false.
        /// The encode option should only be set to true when a root is defined, because the values will be
        /// sent as part of the request parameters as opposed to a raw post. The root will be the name of the parameter
        /// sent to the server.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool encode;
        /// <summary>
        /// The key under which the records in this Writer will be placed. Defaults to undefined.
        /// Example generated request, using root: 'records':
        /// <code>{'records': [{name: 'my record'}, {name: 'another record'}]}
        /// </code>
        /// </summary>
        public JsString root;
        public Json(Ext.data.writer.JsonConfig config){}
        public Json(){}
        public Json(params object[] args){}
    }
    #endregion
    #region JsonConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class JsonConfig : WriterConfig
    {
        /// <summary>
        /// False to ensure that records are always wrapped in an array, even if there is only
        /// one record being sent. When there is more than one record, they will always be encoded into an array.
        /// Defaults to true. Example:
        /// <code>// with allowSingle: true
        /// "root": {
        /// "first": "Mark",
        /// "last": "Corrigan"
        /// }
        /// // with allowSingle: false
        /// "root": [{
        /// "first": "Mark",
        /// "last": "Corrigan"
        /// }]
        /// </code>
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool allowSingle;
        /// <summary>
        /// True to use Ext.encode() on the data before sending. Defaults to false.
        /// The encode option should only be set to true when a root is defined, because the values will be
        /// sent as part of the request parameters as opposed to a raw post. The root will be the name of the parameter
        /// sent to the server.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool encode;
        /// <summary>
        /// The key under which the records in this Writer will be placed. Defaults to undefined.
        /// Example generated request, using root: 'records':
        /// <code>{'records': [{name: 'my record'}, {name: 'another record'}]}
        /// </code>
        /// </summary>
        public JsString root;
        public JsonConfig(params object[] args){}
    }
    #endregion
    #region JsonEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class JsonEvents : WriterEvents
    {
        public JsonEvents(params object[] args){}
    }
    #endregion
}
