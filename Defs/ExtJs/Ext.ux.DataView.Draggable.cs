//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:42 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.ux.DataView
{
    #region Draggable
    /// <summary>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.view.View">Ext.view.View</see>', {
    /// mixins: {
    /// draggable: '<see cref="Ext.ux.DataView.Draggable">Ext.ux.DataView.Draggable</see>'
    /// },
    /// initComponent: function() {
    /// this.mixins.draggable.init(this, {
    /// ddConfig: {
    /// ddGroup: 'someGroup'
    /// }
    /// });
    /// this.callParent(arguments);
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Draggable
    {
        /// <summary>
        /// Config object that is applied to the internally created DragZone
        /// </summary>
        public JsObject ddConfig;
        /// <summary>
        /// The CSS class added to the outermost element of the created ghost proxy
        /// (defaults to 'x-dataview-draggable-ghost')
        /// Defaults to: <c>&quot;x-dataview-draggable-ghost&quot;</c>
        /// </summary>
        public JsString ghostCls;
        /// <summary>
        /// Config object that is used to configure the internally created DataView
        /// </summary>
        public JsString ghostConfig;
        /// <summary>
        /// The template used in the ghost DataView
        /// Defaults to: <c>[&quot;&lt;tpl for=&quot;.&quot;&gt;&quot;, &quot;{title}&quot;, &quot;&lt;/tpl&gt;&quot;]</c>
        /// </summary>
        public object ghostTpl;
        /// <summary>
        /// The Ext.view.View instance that this DragZone is attached to
        /// </summary>
        public Ext.view.View dataview{get;set;}
        /// <summary>
        /// The attached DragZone instane
        /// </summary>
        public Ext.dd.DragZone dragZone{get;set;}
        /// <summary>
        /// Creates the 'ghost' DataView that follows the mouse cursor during the drag operation. This div is usually a
        /// lighter-weight representation of just the nodes that are selected in the parent DataView.
        /// </summary>
        /// <param name="records">
        /// </param>
        private void createGhost(object records){}
        /// <summary>
        /// Returns the x and y co-ordinates that the dragged item should be animated back to if it was dropped on an
        /// invalid drop target. If we're dragging more than one item we don't animate back and just allow afterRepair
        /// to frame each dropped item.
        /// </summary>
        /// <param name="e">
        /// </param>
        private void getRepairXY(object e){}
        /// <summary>
        /// Called when the attached DataView is rendered. Sets up the internal DragZone
        /// </summary>
        private void onRender(){}
        /// <summary>
        /// Updates the internal ghost DataView by ensuring it is rendered and contains the correct records
        /// </summary>
        /// <param name="records"><p>The set of records that is currently selected in the parent DataView</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.view.View">Ext.view.View</see></span><div><p>The Ghost DataView</p>
        /// </div>
        /// </returns>
        public Ext.view.View prepareGhost(JsArray records){return null;}
        public Draggable(DraggableConfig config){}
        public Draggable(){}
        public Draggable(params object[] args){}
    }
    #endregion
    #region DraggableConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DraggableConfig
    {
        /// <summary>
        /// Config object that is applied to the internally created DragZone
        /// </summary>
        public JsObject ddConfig;
        /// <summary>
        /// The CSS class added to the outermost element of the created ghost proxy
        /// (defaults to 'x-dataview-draggable-ghost')
        /// Defaults to: <c>&quot;x-dataview-draggable-ghost&quot;</c>
        /// </summary>
        public JsString ghostCls;
        /// <summary>
        /// Config object that is used to configure the internally created DataView
        /// </summary>
        public JsString ghostConfig;
        /// <summary>
        /// The template used in the ghost DataView
        /// Defaults to: <c>[&quot;&lt;tpl for=&quot;.&quot;&gt;&quot;, &quot;{title}&quot;, &quot;&lt;/tpl&gt;&quot;]</c>
        /// </summary>
        public object ghostTpl;
        public DraggableConfig(params object[] args){}
    }
    #endregion
    #region DraggableEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class DraggableEvents
    {
        public DraggableEvents(params object[] args){}
    }
    #endregion
}
