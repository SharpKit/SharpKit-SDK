//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:39 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext
{
    #region Array
    /// <summary>
    /// <p>A set of useful static methods to deal with arrays; provide missing methods for older browsers.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Array
    {
        /// <summary>
        /// Filter through an array and remove empty item as defined in Ext.isEmpty
        /// See <see cref="Ext.Array.filter">filter</see>
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>results</p>
        /// </div>
        /// </returns>
        public static JsArray clean(JsArray array){return null;}
        /// <summary>
        /// Clone a flat array without referencing the previous one. Note that this is different
        /// from Ext.clone since it doesn't handle recursive cloning. It's simply a convenient, easy-to-remember method
        /// for Array.prototype.slice.call(array)
        /// </summary>
        /// <param name="array"><p>The array</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The clone array</p>
        /// </div>
        /// </returns>
        public static JsArray clone(JsArray array){return null;}
        /// <summary>
        /// Checks whether or not the given array contains the specified item
        /// </summary>
        /// <param name="array"><p>The array to check</p>
        /// </param>
        /// <param name="item"><p>The item to look for</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the array contains the item, false otherwise</p>
        /// </div>
        /// </returns>
        public static bool contains(JsArray array, object item){return false;}
        /// <summary>
        /// Perform a set difference A-B by subtracting all items in array B from array A.
        /// </summary>
        /// <param name="arrayA">
        /// </param>
        /// <param name="arrayB">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>difference</p>
        /// </div>
        /// </returns>
        public static JsArray difference(JsArray arrayA, JsArray arrayB){return null;}
        /// <summary>
        /// Iterates an array or an iterable value and invoke the given callback function for each item.
        /// <code>var countries = ['Vietnam', 'Singapore', 'United States', 'Russia'];
        /// <see cref="Ext.Array.each">Ext.Array.each</see>(countries, function(name, index, countriesItSelf) {
        /// console.log(name);
        /// });
        /// var sum = function() {
        /// var sum = 0;
        /// <see cref="Ext.Array.each">Ext.Array.each</see>(arguments, function(value) {
        /// sum += value;
        /// });
        /// return sum;
        /// };
        /// sum(1, 2, 3); // returns 6
        /// </code>
        /// The iteration can be stopped by returning false in the function callback.
        /// <code><see cref="Ext.Array.each">Ext.Array.each</see>(countries, function(name, index, countriesItSelf) {
        /// if (name === 'Singapore') {
        /// return false; // break here
        /// }
        /// });
        /// </code>
        /// <see cref="Ext.ExtContext.each">Ext.each</see> is alias for <see cref="Ext.Array.each">Ext.Array.each</see>
        /// </summary>
        /// <param name="iterable"><p>The value to be iterated. If this
        /// argument is not iterable, the callback function is called once.</p>
        /// </param>
        /// <param name="fn"><p>The callback function. If it returns false, the iteration stops and this method returns
        /// the current <c>index</c>.</p>
        /// <h3>Parameters</h3><ul><li><span>item</span> : <see cref="Object">Object</see><div><p>The item at the current <c>index</c> in the passed <c>array</c></p>
        /// </div></li><li><span>index</span> : <see cref="Number">Number</see><div><p>The current <c>index</c> within the <c>array</c></p>
        /// </div></li><li><span>allItems</span> : <see cref="Array">Array</see><div><p>The <c>array</c> itself which was passed as the first argument</p>
        /// </div></li></ul><h3>Returns</h3><ul><li><span><see cref="bool">Boolean</see></span><div><p>Return false to stop iteration.</p>
        /// </div></li></ul></param>
        /// <param name="scope"><p>The scope (<c>this</c> reference) in which the specified function is executed.</p>
        /// </param>
        /// <param name="reverse"><p>Reverse the iteration order (loop from the end to the beginning)
        /// Defaults false</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>See description for the <c>fn</c> parameter.</p>
        /// </div>
        /// </returns>
        public static bool each(object iterable, System.Delegate fn, object scope=null, object reverse=null){return false;}
        /// <summary>
        /// Removes items from an array. This is functionally equivalent to the splice method
        /// of Array, but works around bugs in IE8's splice method and does not copy the
        /// removed elements in order to return them (because very often they are ignored).
        /// </summary>
        /// <param name="array"><p>The Array on which to replace.</p>
        /// </param>
        /// <param name="index"><p>The index in the array at which to operate.</p>
        /// </param>
        /// <param name="removeCount"><p>The number of items to remove at index.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The array passed.</p>
        /// </div>
        /// </returns>
        public static JsArray erase(JsArray array, JsNumber index, JsNumber removeCount){return null;}
        /// <summary>
        /// Executes the specified function for each array element until the function returns a falsy value.
        /// If such an item is found, the function will return false immediately.
        /// Otherwise, it will return true.
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <param name="fn"><p>Callback function for each item</p>
        /// </param>
        /// <param name="scope"><p>Callback function scope</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if no false value is returned by the callback function.</p>
        /// </div>
        /// </returns>
        public static bool every(JsArray array, System.Delegate fn, object scope){return false;}
        /// <summary>
        /// Creates a new array with all of the elements of this array for which
        /// the provided filtering function returns true.
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <param name="fn"><p>Callback function for each item</p>
        /// </param>
        /// <param name="scope"><p>Callback function scope</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>results</p>
        /// </div>
        /// </returns>
        public static JsArray filter(JsArray array, System.Delegate fn, object scope){return null;}
        /// <summary>
        /// Recursively flattens into 1-d Array. Injects Arrays inline.
        /// </summary>
        /// <param name="array"><p>The array to flatten</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The 1-d array.</p>
        /// </div>
        /// </returns>
        public static JsArray flatten(JsArray array){return null;}
        /// <summary>
        /// Iterates an array and invoke the given callback function for each item. Note that this will simply
        /// delegate to the native Array.prototype.forEach method if supported. It doesn't support stopping the
        /// iteration by returning false in the callback function like each. However, performance
        /// could be much better in modern browsers comparing with each
        /// </summary>
        /// <param name="array"><p>The array to iterate</p>
        /// </param>
        /// <param name="fn"><p>The callback function.</p>
        /// <h3>Parameters</h3><ul><li><span>item</span> : <see cref="Object">Object</see><div><p>The item at the current <c>index</c> in the passed <c>array</c></p>
        /// </div></li><li><span>index</span> : <see cref="Number">Number</see><div><p>The current <c>index</c> within the <c>array</c></p>
        /// </div></li><li><span>allItems</span> : <see cref="Array">Array</see><div><p>The <c>array</c> itself which was passed as the first argument</p>
        /// </div></li></ul></param>
        /// <param name="scope"><p>The execution scope (<c>this</c>) in which the specified function is executed.</p>
        /// </param>
        public static void forEach(JsArray array, System.Delegate fn, object scope=null){}
        /// <summary>
        /// Converts a value to an array if it's not already an array; returns:
        /// <li>An empty array if given value is <c>undefined</c> or <c>null</c></li>
        /// <li>Itself if given value is already an array</li>
        /// <li>An array copy if given value is <see cref="Ext.ExtContext.isIterable">iterable</see> (arguments, NodeList and alike)</li>
        /// <li>An array with one item which is the given value, otherwise</li>
        /// </summary>
        /// <param name="value"><p>The value to convert to an array if it's not already is an array</p>
        /// </param>
        /// <param name="newReference"><p>True to clone the given array and return a new reference if necessary,
        /// defaults to false</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>array</p>
        /// </div>
        /// </returns>
        public static JsArray from(object value, object newReference=null){return null;}
        /// <summary>
        /// Push an item into the array only if the array doesn't contain it yet
        /// </summary>
        /// <param name="array"><p>The array</p>
        /// </param>
        /// <param name="item"><p>The item to include</p>
        /// </param>
        public static void include(JsArray array, object item){}
        /// <summary>
        /// Get the index of the provided item in the given array, a supplement for the
        /// missing arrayPrototype.indexOf in Internet Explorer.
        /// </summary>
        /// <param name="array"><p>The array to check</p>
        /// </param>
        /// <param name="item"><p>The item to look for</p>
        /// </param>
        /// <param name="from"><p>The index at which to begin the search</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The index of item in the array (or -1 if it is not found)</p>
        /// </div>
        /// </returns>
        public static JsNumber indexOf(JsArray array, object item, object from=null){return null;}
        /// <summary>
        /// Inserts items in to an array.
        /// </summary>
        /// <param name="array"><p>The Array in which to insert.</p>
        /// </param>
        /// <param name="index"><p>The index in the array at which to operate.</p>
        /// </param>
        /// <param name="items"><p>The array of items to insert at index.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The array passed.</p>
        /// </div>
        /// </returns>
        public static JsArray insert(JsArray array, JsNumber index, JsArray items){return null;}
        /// <summary>
        /// Merge multiple arrays into one with unique items that exist in all of the arrays.
        /// </summary>
        /// <param name="array1">
        /// </param>
        /// <param name="array2">
        /// </param>
        /// <param name="etc">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>intersect</p>
        /// </div>
        /// </returns>
        public static JsArray intersect(JsArray array1, JsArray array2, object etc=null){return null;}
        /// <summary>
        /// Creates a new array with the results of calling a provided function on every element in this array.
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <param name="fn"><p>Callback function for each item</p>
        /// </param>
        /// <param name="scope"><p>Callback function scope</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>results</p>
        /// </div>
        /// </returns>
        public static JsArray map(JsArray array, System.Delegate fn, object scope){return null;}
        /// <summary>
        /// Returns the maximum value in the Array.
        /// </summary>
        /// <param name="array"><p>The Array from which to select the maximum value.</p>
        /// </param>
        /// <param name="comparisonFn"><p>a function to perform the comparision which determines maximization.
        /// If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>maxValue The maximum value</p>
        /// </div>
        /// </returns>
        public static object max(object array, object comparisonFn=null){return null;}
        /// <summary>
        /// Calculates the mean of all items in the array.
        /// </summary>
        /// <param name="array"><p>The Array to calculate the mean value of.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The mean.</p>
        /// </div>
        /// </returns>
        public static JsNumber mean(JsArray array){return null;}
        /// <summary>
        /// Merge multiple arrays into one with unique items.
        /// <see cref="Ext.Array.union">union</see> is alias for <see cref="Ext.Array.merge">merge</see>
        /// </summary>
        /// <param name="array1">
        /// </param>
        /// <param name="array2">
        /// </param>
        /// <param name="etc">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>merged</p>
        /// </div>
        /// </returns>
        public static JsArray merge(JsArray array1, JsArray array2, object etc=null){return null;}
        /// <summary>
        /// Returns the minimum value in the Array.
        /// </summary>
        /// <param name="array"><p>The Array from which to select the minimum value.</p>
        /// </param>
        /// <param name="comparisonFn"><p>a function to perform the comparision which determines minimization.
        /// If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>minValue The minimum value</p>
        /// </div>
        /// </returns>
        public static object min(object array, object comparisonFn=null){return null;}
        /// <summary>
        /// Plucks the value of a property from each item in the Array. Example:
        /// <code><see cref="Ext.Array.pluck">Ext.Array.pluck</see>(<see cref="Ext.ExtContext.query">Ext.query</see>("p"), "className"); // [el1.className, el2.className, ..., elN.className]
        /// </code>
        /// </summary>
        /// <param name="array"><p>The Array of items to pluck the value from.</p>
        /// </param>
        /// <param name="propertyName"><p>The property name to pluck from each element.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The value from each item in the Array.</p>
        /// </div>
        /// </returns>
        public static JsArray pluck(object array, JsString propertyName){return null;}
        /// <summary>
        /// Pushes new items onto the end of an Array.
        /// Passed parameters may be single items, or arrays of items. If an Array is found in the argument list, all its
        /// elements are pushed into the end of the target Array.
        /// </summary>
        /// <param name="target"><p>The Array onto which to push new items</p>
        /// </param>
        /// <param name="elements"><p>The elements to add to the array. Each parameter may
        /// be an Array, in which case all the elements of that Array will be pushed into the end of the
        /// destination Array.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>An array containing all the new items push onto the end.</p>
        /// </div>
        /// </returns>
        public static JsArray push(JsArray target, object elements){return null;}
        /// <summary>
        /// Removes the specified item from the array if it exists
        /// </summary>
        /// <param name="array"><p>The array</p>
        /// </param>
        /// <param name="item"><p>The item to remove</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The passed array itself</p>
        /// </div>
        /// </returns>
        public static JsArray remove(JsArray array, object item){return null;}
        /// <summary>
        /// Replaces items in an array. This is functionally equivalent to the splice method
        /// of Array, but works around bugs in IE8's splice method and is often more convenient
        /// to call because it accepts an array of items to insert rather than use a variadic
        /// argument list.
        /// </summary>
        /// <param name="array"><p>The Array on which to replace.</p>
        /// </param>
        /// <param name="index"><p>The index in the array at which to operate.</p>
        /// </param>
        /// <param name="removeCount"><p>The number of items to remove at index (can be 0).</p>
        /// </param>
        /// <param name="insert"><p>An array of items to insert at index.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The array passed.</p>
        /// </div>
        /// </returns>
        public static JsArray replace(JsArray array, JsNumber index, JsNumber removeCount, object insert=null){return null;}
        /// <summary>
        /// Returns a shallow copy of a part of an array. This is equivalent to the native
        /// call "Array.prototype.slice.call(array, begin, end)". This is often used when "array"
        /// is "arguments" since the arguments object does not supply a slice method but can
        /// be the context object to Array.prototype.slice.
        /// </summary>
        /// <param name="array"><p>The array (or arguments object).</p>
        /// </param>
        /// <param name="begin"><p>The index at which to begin. Negative values are offsets from
        /// the end of the array.</p>
        /// </param>
        /// <param name="end"><p>The index at which to end. The copied items do not include
        /// end. Negative values are offsets from the end of the array. If end is omitted,
        /// all items up to the end of the array are copied.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The copied piece of the array.</p>
        /// </div>
        /// </returns>
        public static JsArray slice(JsArray array, JsNumber begin, JsNumber end){return null;}
        /// <summary>
        /// Executes the specified function for each array element until the function returns a truthy value.
        /// If such an item is found, the function will return true immediately. Otherwise, it will return false.
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <param name="fn"><p>Callback function for each item</p>
        /// </param>
        /// <param name="scope"><p>Callback function scope</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the callback function returns a truthy value.</p>
        /// </div>
        /// </returns>
        public static bool some(JsArray array, System.Delegate fn, object scope){return false;}
        /// <summary>
        /// Sorts the elements of an Array.
        /// By default, this method sorts the elements alphabetically and ascending.
        /// </summary>
        /// <param name="array"><p>The array to sort.</p>
        /// </param>
        /// <param name="sortFn"><p>The comparison function.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>The sorted array.</p>
        /// </div>
        /// </returns>
        public static JsArray sort(JsArray array, object sortFn=null){return null;}
        /// <summary>
        /// Replaces items in an array. This is equivalent to the splice method of Array, but
        /// works around bugs in IE8's splice method. The signature is exactly the same as the
        /// splice method except that the array is the first argument. All arguments following
        /// removeCount are inserted in the array at index.
        /// </summary>
        /// <param name="array"><p>The Array on which to replace.</p>
        /// </param>
        /// <param name="index"><p>The index in the array at which to operate.</p>
        /// </param>
        /// <param name="removeCount"><p>The number of items to remove at index (can be 0).</p>
        /// </param>
        /// <param name="elements"><p>The elements to add to the array. If you don't specify
        /// any elements, splice simply removes elements from the array.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>An array containing the removed items.</p>
        /// </div>
        /// </returns>
        public static JsArray splice(JsArray array, JsNumber index, JsNumber removeCount, object elements){return null;}
        /// <summary>
        /// Calculates the sum of all items in the given array.
        /// </summary>
        /// <param name="array"><p>The Array to calculate the sum value of.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Number">Number</see></span><div><p>The sum.</p>
        /// </div>
        /// </returns>
        public static JsNumber sum(JsArray array){return null;}
        /// <summary>
        /// Converts any iterable (numeric indices and a length property) into a true array.
        /// <code>function test() {
        /// var args = <see cref="Ext.Array.toArray">Ext.Array.toArray</see>(arguments),
        /// fromSecondToLastArgs = <see cref="Ext.Array.toArray">Ext.Array.toArray</see>(arguments, 1);
        /// alert(args.join(' '));
        /// alert(fromSecondToLastArgs.join(' '));
        /// }
        /// test('just', 'testing', 'here'); // alerts 'just testing here';
        /// // alerts 'testing here';
        /// <see cref="Ext.Array.toArray">Ext.Array.toArray</see>(document.getElementsByTagName('div')); // will convert the NodeList into an array
        /// <see cref="Ext.Array.toArray">Ext.Array.toArray</see>('splitted'); // returns ['s', 'p', 'l', 'i', 't', 't', 'e', 'd']
        /// <see cref="Ext.Array.toArray">Ext.Array.toArray</see>('splitted', 0, 3); // returns ['s', 'p', 'l']
        /// </code>
        /// <see cref="Ext.ExtContext.toArray">Ext.toArray</see> is alias for <see cref="Ext.Array.toArray">Ext.Array.toArray</see>
        /// </summary>
        /// <param name="iterable"><p>the iterable object to be turned into a true Array.</p>
        /// </param>
        /// <param name="start"><p>a zero-based index that specifies the start of extraction. Defaults to 0</p>
        /// </param>
        /// <param name="end"><p>a 1-based index that specifies the end of extraction. Defaults to the last
        /// index of the iterable value</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>array</p>
        /// </div>
        /// </returns>
        public static JsArray toArray(object iterable, object start=null, object end=null){return null;}
        /// <summary>
        /// Creates a map (object) keyed by the elements of the given array. The values in
        /// the map are the index+1 of the array element. For example:
        /// <code> var map = <see cref="Ext.Array.toMap">Ext.Array.toMap</see>(['a','b','c']);
        /// // map = { a: 1, b: 2, c: 3 };
        /// </code>
        /// Or a key property can be specified:
        /// <code> var map = <see cref="Ext.Array.toMap">Ext.Array.toMap</see>([
        /// { name: 'a' },
        /// { name: 'b' },
        /// { name: 'c' }
        /// ], 'name');
        /// // map = { a: 1, b: 2, c: 3 };
        /// </code>
        /// Lastly, a key extractor can be provided:
        /// <code> var map = <see cref="Ext.Array.toMap">Ext.Array.toMap</see>([
        /// { name: 'a' },
        /// { name: 'b' },
        /// { name: 'c' }
        /// ], function (obj) { return obj.name.toUpperCase(); });
        /// // map = { A: 1, B: 2, C: 3 };
        /// </code>
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <param name="getKey">
        /// </param>
        /// <param name="scope">
        /// </param>
        public static void toMap(object array, object getKey, object scope){}
        /// <summary>
        /// Merge multiple arrays into one with unique items.
        /// <see cref="Ext.Array.union">union</see> is alias for <see cref="Ext.Array.merge">merge</see>
        /// </summary>
        /// <param name="array1">
        /// </param>
        /// <param name="array2">
        /// </param>
        /// <param name="etc">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>merged</p>
        /// </div>
        /// </returns>
        public static JsArray union(JsArray array1, JsArray array2, object etc=null){return null;}
        /// <summary>
        /// Returns a new array with unique items
        /// </summary>
        /// <param name="array">
        /// </param>
        /// <returns>
        /// <span><see cref="Array">Array</see></span><div><p>results</p>
        /// </div>
        /// </returns>
        public static JsArray unique(JsArray array){return null;}
        public Array(Ext.ArrayConfig config){}
        public Array(){}
        public Array(params object[] args){}
    }
    #endregion
    #region ArrayConfig
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ArrayConfig
    {
        public ArrayConfig(params object[] args){}
    }
    #endregion
    #region ArrayEvents
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ArrayEvents
    {
        public ArrayEvents(params object[] args){}
    }
    #endregion
}
