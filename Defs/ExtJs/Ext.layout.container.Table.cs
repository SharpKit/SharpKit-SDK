//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.layout.container
{
    #region Table
    /// <inheritdocs />
    /// <summary>
    /// <p>This layout allows you to easily render content into an HTML table. The total number of columns can be specified, and
    /// rowspan and colspan can be used to create complex layouts within the table. This class is intended to be extended or
    /// created via the <c>layout: {type: 'table'}</c> <see cref="Ext.container.ContainerConfig.layout">Ext.container.Container.layout</see> config, and should generally not
    /// need to be created directly via the new keyword.</p>
    /// <p>Note that when creating a layout via config, the layout-specific config properties must be passed in via the <see cref="Ext.container.ContainerConfig.layout">Ext.container.Container.layout</see> object which will then be applied internally to the layout. In the case of
    /// TableLayout, the only valid layout config properties are <see cref="Ext.layout.container.TableConfig.columns">columns</see> and <see cref="Ext.layout.container.TableConfig.tableAttrs">tableAttrs</see>. However, the items
    /// added to a TableLayout can supply the following table-specific config properties:</p>
    /// <ul>
    /// <li><strong>rowspan</strong> Applied to the table cell containing the item.</li>
    /// <li><strong>colspan</strong> Applied to the table cell containing the item.</li>
    /// <li><strong>cellId</strong> An id applied to the table cell containing the item.</li>
    /// <li><strong>cellCls</strong> A CSS class name added to the table cell containing the item.</li>
    /// </ul>
    /// <p>The basic concept of building up a TableLayout is conceptually very similar to building up a standard HTML table. You
    /// simply add each panel (or "cell") that you want to include along with any span attributes specified as the special
    /// config properties of rowspan and colspan which work exactly like their HTML counterparts. Rather than explicitly
    /// creating and nesting rows and columns as you would in HTML, you simply specify the total column count in the
    /// layout config and start adding panels in their natural order from left to right, top to bottom. The layout will
    /// automatically figure out, based on the column count, rowspans and colspans, how to position each panel within the
    /// table. Just like with HTML tables, your rowspans and colspans must add up correctly in your overall layout or you'll
    /// end up with missing and/or extra cells! Example usage:</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.panel.Panel">Ext.panel.Panel</see>', {
    /// title: 'Table Layout',
    /// width: 300,
    /// height: 150,
    /// layout: {
    /// type: 'table',
    /// // The total column count must be specified here
    /// columns: 3
    /// },
    /// defaults: {
    /// // applied to each contained panel
    /// bodyStyle: 'padding:20px'
    /// },
    /// items: [{
    /// html: 'Cell A content',
    /// rowspan: 2
    /// },{
    /// html: 'Cell B content',
    /// colspan: 2
    /// },{
    /// html: 'Cell C content',
    /// cellCls: 'highlight'
    /// },{
    /// html: 'Cell D content'
    /// }],
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Table : Ext.layout.container.Container
    {
        /// <summary>
        /// The total number of columns to create in the table for this layout. If not specified, all Components added to
        /// this layout will be rendered into a single row using one column per Component.
        /// </summary>
        public JsNumber columns;
        /// <summary>
        /// An object containing properties which are added to the DomHelper specification used to
        /// create the layout's &lt;table&gt; element. Example:
        /// <code>{
        /// xtype: 'panel',
        /// layout: {
        /// type: 'table',
        /// columns: 3,
        /// tableAttrs: {
        /// style: {
        /// width: '100%'
        /// }
        /// }
        /// }
        /// }
        /// </code>
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsObject tableAttrs;
        /// <summary>
        /// An object containing properties which are added to the DomHelper specification used to
        /// create the layout's &lt;td&gt; elements.
        /// </summary>
        public JsObject tdAttrs;
        /// <summary>
        /// An object containing properties which are added to the DomHelper specification used to
        /// create the layout's &lt;tr&gt; elements.
        /// </summary>
        public JsObject trAttrs;
        /// <summary>
        /// Determine the row and cell indexes for each component, taking into consideration
        /// the number of columns and each item's configured colspan/rowspan values.
        /// </summary>
        /// <param name="items"><p>The layout components</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see>[]</span><div><p>List of row and cell indexes for each of the components</p>
        /// </div>
        /// </returns>
        private object[] calculateCells(JsArray items){return null;}
        /// <summary>
        /// Opera 10.5 has a bug where if a table cell's child has box-sizing:border-box and padding, it
        /// will include that padding in the size of the cell, making it always larger than the
        /// shrink-wrapped size of its contents. To get around this we have to wrap the contents in a div
        /// and then set that div's width to match the item rendered within it afterLayout. This method
        /// determines whether we need the wrapper div; it currently does a straight UA sniff as this bug
        /// seems isolated to just Opera 10.5, but feature detection could be added here if needed.
        /// </summary>
        private void needsDivWrap(){}
        /// <summary>
        /// Iterates over all passed items, ensuring they are rendered in a cell in the proper
        /// location in the table structure.
        /// </summary>
        private void renderChildren(){}
        public Table(Ext.layout.container.TableConfig config){}
        public Table(){}
        public Table(params object[] args){}
    }
    #endregion
    #region TableConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TableConfig : Ext.layout.container.ContainerConfig
    {
        /// <summary>
        /// The total number of columns to create in the table for this layout. If not specified, all Components added to
        /// this layout will be rendered into a single row using one column per Component.
        /// </summary>
        public JsNumber columns;
        /// <summary>
        /// An object containing properties which are added to the DomHelper specification used to
        /// create the layout's &lt;table&gt; element. Example:
        /// <code>{
        /// xtype: 'panel',
        /// layout: {
        /// type: 'table',
        /// columns: 3,
        /// tableAttrs: {
        /// style: {
        /// width: '100%'
        /// }
        /// }
        /// }
        /// }
        /// </code>
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsObject tableAttrs;
        /// <summary>
        /// An object containing properties which are added to the DomHelper specification used to
        /// create the layout's &lt;td&gt; elements.
        /// </summary>
        public JsObject tdAttrs;
        /// <summary>
        /// An object containing properties which are added to the DomHelper specification used to
        /// create the layout's &lt;tr&gt; elements.
        /// </summary>
        public JsObject trAttrs;
        public TableConfig(params object[] args){}
    }
    #endregion
    #region TableEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class TableEvents : Ext.layout.container.ContainerEvents
    {
        public TableEvents(params object[] args){}
    }
    #endregion
}
