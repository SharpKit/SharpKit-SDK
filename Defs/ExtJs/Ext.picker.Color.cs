//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.picker
{
    #region Color
    /// <inheritdocs />
    /// <summary>
    /// <p>Color picker provides a simple color palette for choosing colors. The picker can be rendered to any container. The
    /// available default to a standard 40-color palette; this can be customized with the <see cref="Ext.picker.Color.colors">colors</see> config.</p>
    /// <p>Typically you will need to implement a handler function to be notified when the user chooses a color from the picker;
    /// you can register the handler using the <see cref="Ext.picker.ColorEvents.select">select</see> event, or by implementing the <see cref="Ext.picker.ColorConfig.handler">handler</see> method.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.picker.Color">Ext.picker.Color</see>', {
    /// value: '993300',  // initial selected color
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),
    /// listeners: {
    /// select: function(picker, selColor) {
    /// alert(selColor);
    /// }
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Color : Ext.Component
    {
        /// <summary>
        /// If set to true then reselecting a color that is already selected fires the select event
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool allowReselect;
        /// <summary>
        /// The DOM event that will cause a color to be selected. This can be any valid event name (dblclick, contextmenu).
        /// Defaults to: <c>&quot;click&quot;</c>
        /// </summary>
        public JsString clickEvent;
        /// <summary>
        /// A function that will handle the select event of this picker. The handler is passed the following parameters:
        /// <li><p><c>picker</c> : ColorPicker</p>
        /// <p>The <see cref="Ext.picker.Color">picker</see>.</p></li>
        /// <li><p><c>color</c> : String</p>
        /// <p>The 6-digit color hex code (without the # symbol).</p></li>
        /// </summary>
        public System.Delegate handler;
        /// <summary>
        /// The scope (this reference) in which the handler function will be called.
        /// Defaults to this Color picker instance.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// The CSS class to apply to the selected element
        /// Defaults to: <c>&quot;x-color-picker-selected&quot;</c>
        /// </summary>
        public JsString selectedCls;
        /// <summary>
        /// The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex
        /// codes are case-sensitive.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString value;
        /// <summary>
        /// An array of 6-digit color hex code strings (without the # symbol). This array can contain any number of colors,
        /// and each hex code should be unique. The width of the picker is controlled via CSS by adjusting the width property
        /// of the 'x-color-picker' class (or assigning a custom class), so you can balance the number of colors with the
        /// width setting until the box is symmetrical.
        /// You can override individual colors if needed:
        /// <code>var cp = new <see cref="Ext.picker.Color">Ext.picker.Color</see>();
        /// cp.colors[0] = 'FF0000';  // change the first box to red
        /// </code>
        /// Or you can provide a custom array of your own for complete control:
        /// <code>var cp = new <see cref="Ext.picker.Color">Ext.picker.Color</see>();
        /// cp.colors = ['000000', '993300', '333300'];
        /// </code>
        /// Defaults to: <c>[&quot;000000&quot;, &quot;993300&quot;, &quot;333300&quot;, &quot;003300&quot;, &quot;003366&quot;, &quot;000080&quot;, &quot;333399&quot;, &quot;333333&quot;, &quot;800000&quot;, &quot;FF6600&quot;, &quot;808000&quot;, &quot;008000&quot;, &quot;008080&quot;, &quot;0000FF&quot;, &quot;666699&quot;, &quot;808080&quot;, &quot;FF0000&quot;, &quot;FF9900&quot;, &quot;99CC00&quot;, &quot;339966&quot;, &quot;33CCCC&quot;, &quot;3366FF&quot;, &quot;800080&quot;, &quot;969696&quot;, &quot;FF00FF&quot;, &quot;FFCC00&quot;, &quot;FFFF00&quot;, &quot;00FF00&quot;, &quot;00FFFF&quot;, &quot;00CCFF&quot;, &quot;993366&quot;, &quot;C0C0C0&quot;, &quot;FF99CC&quot;, &quot;FFCC99&quot;, &quot;FFFF99&quot;, &quot;CCFFCC&quot;, &quot;CCFFFF&quot;, &quot;99CCFF&quot;, &quot;CC99FF&quot;, &quot;FFFFFF&quot;]</c>
        /// </summary>
        public JsString colors{get;set;}
        /// <summary>
        /// Get the currently selected color value.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>value The selected value. Null if nothing is selected.</p>
        /// </div>
        /// </returns>
        public JsString getValue(){return null;}
        /// <summary>
        /// Selects the specified color in the picker (fires the select event)
        /// </summary>
        /// <param name="color"><p>A valid 6-digit color hex code (# will be stripped if included)</p>
        /// </param>
        /// <param name="suppressEvent"><p>True to stop the select event from firing.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public void select(JsString color, object suppressEvent=null){}
        public Color(Ext.picker.ColorConfig config){}
        public Color(){}
        public Color(params object[] args){}
    }
    #endregion
    #region ColorConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ColorConfig : Ext.ComponentConfig
    {
        /// <summary>
        /// If set to true then reselecting a color that is already selected fires the select event
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool allowReselect;
        /// <summary>
        /// The DOM event that will cause a color to be selected. This can be any valid event name (dblclick, contextmenu).
        /// Defaults to: <c>&quot;click&quot;</c>
        /// </summary>
        public JsString clickEvent;
        /// <summary>
        /// A function that will handle the select event of this picker. The handler is passed the following parameters:
        /// <li><p><c>picker</c> : ColorPicker</p>
        /// <p>The <see cref="Ext.picker.Color">picker</see>.</p></li>
        /// <li><p><c>color</c> : String</p>
        /// <p>The 6-digit color hex code (without the # symbol).</p></li>
        /// </summary>
        public System.Delegate handler;
        /// <summary>
        /// The scope (this reference) in which the handler function will be called.
        /// Defaults to this Color picker instance.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// The CSS class to apply to the selected element
        /// Defaults to: <c>&quot;x-color-picker-selected&quot;</c>
        /// </summary>
        public JsString selectedCls;
        /// <summary>
        /// The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex
        /// codes are case-sensitive.
        /// Defaults to: <c>null</c>
        /// </summary>
        public JsString value;
        public ColorConfig(params object[] args){}
    }
    #endregion
    #region ColorEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class ColorEvents : Ext.ComponentEvents
    {
        /// <summary>
        /// Fires when a color is selected
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="color"><p>The 6-digit color hex code (without the # symbol)</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void select(Ext.picker.Color @this, JsString color, object eOpts){}
        public ColorEvents(params object[] args){}
    }
    #endregion
}
