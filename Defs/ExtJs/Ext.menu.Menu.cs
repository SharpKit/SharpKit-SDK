//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.menu
{
    #region Menu
    /// <inheritdocs />
    /// <summary>
    /// <p>A menu object. This is the container to which you may add <see cref="Ext.menu.Item">menu items</see>.</p>
    /// <p>Menus may contain either <see cref="Ext.menu.Item">menu items</see>, or general <see cref="Ext.Component">Components</see>.
    /// Menus may also contain <see cref="Ext.panel.AbstractPanelConfig.dockedItems">docked items</see> because it extends <see cref="Ext.panel.Panel">Ext.panel.Panel</see>.</p>
    /// <p>To make a contained general <see cref="Ext.Component">Component</see> line up with other <see cref="Ext.menu.Item">menu items</see>,
    /// specify <c><see cref="Ext.menu.ItemConfig.plain">plain</see>: true</c>. This reserves a space for an icon, and indents the Component
    /// in line with the other menu items.</p>
    /// <p>By default, Menus are absolutely positioned, floating Components. By configuring a Menu with <c><see cref="Ext.menu.MenuConfig.floating">floating</see>: false</c>,
    /// a Menu may be used as a child of a <see cref="Ext.container.Container">Container</see>.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.menu.Menu">Ext.menu.Menu</see>', {
    /// width: 100,
    /// margin: '0 0 10 0',
    /// floating: false,  // usually you want this set to True (default)
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),  // usually rendered by it's containing component
    /// items: [{
    /// text: 'regular item 1'
    /// },{
    /// text: 'regular item 2'
    /// },{
    /// text: 'regular item 3'
    /// }]
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.menu.Menu">Ext.menu.Menu</see>', {
    /// width: 100,
    /// plain: true,
    /// floating: false,  // usually you want this set to True (default)
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),  // usually rendered by it's containing component
    /// items: [{
    /// text: 'plain item 1'
    /// },{
    /// text: 'plain item 2'
    /// },{
    /// text: 'plain item 3'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Menu : Ext.panel.Panel
    {
        /// <summary>
        /// True to allow multiple menus to be displayed at the same time.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool allowOtherMenus;
        /// <summary>
        /// Defaults to: <c>&quot;menu&quot;</c>
        /// </summary>
        public JsString ariaRole;
        /// <summary>
        /// Menus are constrained to the document body by default.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool constrain;
        /// <summary>
        /// The default Ext.Element#getAlignToXY anchor position value for this menu
        /// relative to its element of origin.
        /// Defaults to: <c>&quot;tl-bl?&quot;</c>
        /// </summary>
        public JsString defaultAlign;
        /// <summary>
        /// True to enable keyboard navigation for controlling the menu.
        /// This option should generally be disabled when form fields are
        /// being used inside the menu.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableKeyNav;
        /// <summary>
        /// True to ignore clicks on any item in this menu that is a parent item (displays a submenu)
        /// so that the submenu is not dismissed when clicking the parent item.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool ignoreParentClicks;
        /// <summary>
        /// True to remove the incised line down the left side of the menu and to not indent general Component items.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool plain;
        /// <summary>
        /// True to show the icon separator.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showSeparator;
        /// <summary>
        /// true in this class to identify an object as an instantiated Menu, or subclass thereof.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool isMenu{get;set;}
        /// <summary>
        /// The parent Menu of this Menu.
        /// </summary>
        public Ext.menu.Menu parentMenu{get;set;}
        /// <summary>
        /// Returns whether a menu item can be activated or not.
        /// </summary>
        /// <param name="item">
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div>
        /// </div>
        /// </returns>
        public bool canActivateItem(object item){return false;}
        /// <summary>
        /// Deactivates the current active item on the menu, if one exists.
        /// </summary>
        /// <param name="andBlurFocusedItem">
        /// </param>
        public void deactivateActiveItem(object andBlurFocusedItem){}
        /// <summary>
        /// Shows the floating menu by the specified Component or Element.
        /// </summary>
        /// <param name="component"><p>The <see cref="Ext.Component">Ext.Component</see> or <see cref="Ext.dom.Element">Ext.Element</see> to show the menu by.</p>
        /// </param>
        /// <param name="position"><p>Alignment position as used by <see cref="Ext.dom.Element.getAlignToXY">Ext.Element.getAlignToXY</see>.
        /// Defaults to <c><see cref="Ext.menu.MenuConfig.defaultAlign">defaultAlign</see></c>.</p>
        /// </param>
        /// <param name="offsets"><p>Alignment offsets as used by <see cref="Ext.dom.Element.getAlignToXY">Ext.Element.getAlignToXY</see>.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.menu.Menu">Ext.menu.Menu</see></span><div><p>This Menu.</p>
        /// </div>
        /// </returns>
        public Ext.menu.Menu showBy(object component, object position=null, object offsets=null){return null;}
        public Menu(Ext.menu.MenuConfig config){}
        public Menu(){}
        public Menu(params object[] args){}
    }
    #endregion
    #region MenuConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MenuConfig : Ext.panel.PanelConfig
    {
        /// <summary>
        /// True to allow multiple menus to be displayed at the same time.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool allowOtherMenus;
        /// <summary>
        /// Defaults to: <c>&quot;menu&quot;</c>
        /// </summary>
        public JsString ariaRole;
        /// <summary>
        /// Menus are constrained to the document body by default.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool constrain;
        /// <summary>
        /// The default Ext.Element#getAlignToXY anchor position value for this menu
        /// relative to its element of origin.
        /// Defaults to: <c>&quot;tl-bl?&quot;</c>
        /// </summary>
        public JsString defaultAlign;
        /// <summary>
        /// True to enable keyboard navigation for controlling the menu.
        /// This option should generally be disabled when form fields are
        /// being used inside the menu.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableKeyNav;
        /// <summary>
        /// True to ignore clicks on any item in this menu that is a parent item (displays a submenu)
        /// so that the submenu is not dismissed when clicking the parent item.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool ignoreParentClicks;
        /// <summary>
        /// True to remove the incised line down the left side of the menu and to not indent general Component items.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool plain;
        /// <summary>
        /// True to show the icon separator.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool showSeparator;
        public MenuConfig(params object[] args){}
    }
    #endregion
    #region MenuEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class MenuEvents : Ext.panel.PanelEvents
    {
        /// <summary>
        /// Fires when this menu is clicked
        /// </summary>
        /// <param name="menu"><p>The menu which has been clicked</p>
        /// </param>
        /// <param name="item"><p>The menu item that was clicked. <c>undefined</c> if not applicable.</p>
        /// </param>
        /// <param name="e"><p>The underlying <see cref="Ext.EventObject">Ext.EventObject</see>.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void click(Ext.menu.Menu menu, Ext.Component item, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when the mouse enters this menu
        /// </summary>
        /// <param name="menu"><p>The menu</p>
        /// </param>
        /// <param name="e"><p>The underlying <see cref="Ext.EventObject">Ext.EventObject</see></p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseenter(Ext.menu.Menu menu, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when the mouse leaves this menu
        /// </summary>
        /// <param name="menu"><p>The menu</p>
        /// </param>
        /// <param name="e"><p>The underlying <see cref="Ext.EventObject">Ext.EventObject</see></p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseleave(Ext.menu.Menu menu, EventObject e, object eOpts){}
        /// <summary>
        /// Fires when the mouse is hovering over this menu
        /// </summary>
        /// <param name="menu"><p>The menu</p>
        /// </param>
        /// <param name="item"><p>The menu item that the mouse is over. <c>undefined</c> if not applicable.</p>
        /// </param>
        /// <param name="e"><p>The underlying <see cref="Ext.EventObject">Ext.EventObject</see></p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void mouseover(Ext.menu.Menu menu, Ext.Component item, EventObject e, object eOpts){}
        public MenuEvents(params object[] args){}
    }
    #endregion
}
