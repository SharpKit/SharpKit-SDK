//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.state
{
    #region Stateful
    /// <summary>
    /// <p>A mixin for being able to save the state of an object to an underlying
    /// <see cref="Ext.state.Provider">Ext.state.Provider</see>.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial interface Stateful : Ext.util.Observable
    {
        /// <summary>
        /// Defaults to: <c>&quot;Ext.Base&quot;</c>
        /// </summary>
        [JsProperty(Name="$className")]
        JsString @className{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject configMap{get;set;}
        /// <summary>
        /// Defaults to: <c>[]</c>
        /// </summary>
        JsArray initConfigList{get;set;}
        /// <summary>
        /// Defaults to: <c>{}</c>
        /// </summary>
        JsObject initConfigMap{get;set;}
        /// <summary>
        /// Defaults to: <c>true</c>
        /// </summary>
        bool isInstance{get;set;}
        /// <summary>
        /// Get the reference to the current class from which this object was instantiated. Unlike statics,
        /// this.self is scope-dependent and it's meant to be used for dynamic inheritance. See statics
        /// for a detailed comparison
        /// <code><see cref="Ext.ExtContext.define">Ext.define</see>('My.Cat', {
        /// statics: {
        /// speciesName: 'Cat' // My.Cat.speciesName = 'Cat'
        /// },
        /// constructor: function() {
        /// alert(this.self.speciesName); // dependent on 'this'
        /// },
        /// clone: function() {
        /// return new this.self();
        /// }
        /// });
        /// <see cref="Ext.ExtContext.define">Ext.define</see>('My.SnowLeopard', {
        /// extend: 'My.Cat',
        /// statics: {
        /// speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'
        /// }
        /// });
        /// var cat = new My.Cat();                     // alerts 'Cat'
        /// var snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'
        /// var clone = snowLeopard.clone();
        /// alert(<see cref="Ext.ExtContext.getClassName">Ext.getClassName</see>(clone));             // alerts 'My.SnowLeopard'
        /// </code>
        /// </summary>
        Class self{get;set;}
        /// <summary>
        /// Add events that will trigger the state to be saved. If the first argument is an
        /// array, each element of that array is the name of a state event. Otherwise, each
        /// argument passed to this method is the name of a state event.
        /// </summary>
        /// <param name="events"><p>The event name or an array of event names.</p>
        /// </param>
        void addStateEvents(object events);
        /// <summary>
        /// Applies the state to the object. This should be overridden in subclasses to do
        /// more complex state operations. By default it applies the state properties onto
        /// the current object.
        /// </summary>
        /// <param name="state"><p>The state</p>
        /// </param>
        void applyState(object state);
        /// <summary>
        /// Destroys this stateful object.
        /// Overrides: <see cref="Ext.Base.destroy">Ext.Base.destroy</see>
        /// </summary>
        void destroy();
        /// <summary>
        /// Gets the current state of the object. By default this function returns null,
        /// it should be overridden in subclasses to implement methods for getting the state.
        /// </summary>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>The current state</p>
        /// </div>
        /// </returns>
        object getState();
        /// <summary>
        /// Gets the state id for this object.
        /// </summary>
        /// <returns>
        /// <span><see cref="String">String</see></span><div><p>The 'stateId' or the implicit 'id' specified by component configuration.</p>
        /// </div>
        /// </returns>
        JsString getStateId();
        /// <summary>
        /// Initializes the state of the object upon construction.
        /// </summary>
        void initState();
        /// <summary>
        /// This method is called when any of the stateEvents are fired.
        /// </summary>
        void onStateChange();
        /// <summary>
        /// Conditionally saves a single property from this object to the given state object.
        /// The idea is to only save state which has changed from the initial state so that
        /// current software settings do not override future software settings. Only those
        /// values that are user-changed state should be saved.
        /// </summary>
        /// <param name="propName"><p>The name of the property to save.</p>
        /// </param>
        /// <param name="state"><p>The state object in to which to save the property.</p>
        /// </param>
        /// <param name="stateName"><p>The name to use for the property in state.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p>True if the property was saved, false if not.</p>
        /// </div>
        /// </returns>
        bool savePropToState(JsString propName, object state, object stateName=null);
        /// <summary>
        /// Gathers additional named properties of the instance and adds their current values
        /// to the passed state object.
        /// </summary>
        /// <param name="propNames"><p>The name (or array of names) of the property to save.</p>
        /// </param>
        /// <param name="state"><p>The state object in to which to save the property values.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="Object">Object</see></span><div><p>state</p>
        /// </div>
        /// </returns>
        object savePropsToState(object propNames, object state);
        /// <summary>
        /// Saves the state of the object to the persistence store.
        /// </summary>
        void saveState();
    }
    #endregion
    #region StatefulConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class StatefulConfig : Ext.BaseConfig
    {
        /// <summary>
        /// A buffer to be applied if many state events are fired within a short period.
        /// Defaults to: <c>100</c>
        /// </summary>
        public JsNumber saveDelay;
        /// <summary>
        /// An array of events that, when fired, should trigger this object to
        /// save its state. Defaults to none. stateEvents may be any type
        /// of event supported by this object, including browser or custom events
        /// (e.g., ['click', 'customerchange']).
        /// See <c><see cref="Ext.state.StatefulConfig.stateful">stateful</see></c> for an explanation of saving and
        /// restoring object state.
        /// </summary>
        public JsString stateEvents;
        /// <summary>
        /// The unique id for this object to use for state management purposes.
        /// See <see cref="Ext.state.StatefulConfig.stateful">stateful</see> for an explanation of saving and restoring state.
        /// </summary>
        public JsString stateId;
        /// <summary>
        /// A flag which causes the object to attempt to restore the state of
        /// internal properties from a saved state on startup. The object must have
        /// a stateId for state to be managed.
        /// Auto-generated ids are not guaranteed to be stable across page loads and
        /// cannot be relied upon to save and restore the same state for a object.
        /// For state saving to work, the state manager's provider must have been
        /// set to an implementation of <see cref="Ext.state.Provider">Ext.state.Provider</see> which overrides the
        /// <see cref="Ext.state.Provider.set">set</see> and <see cref="Ext.state.Provider.get">get</see>
        /// methods to save and recall name/value pairs. A built-in implementation,
        /// <see cref="Ext.state.CookieProvider">Ext.state.CookieProvider</see> is available.
        /// To set the state provider for the current page:
        /// <see cref="Ext.state.Manager.setProvider">Ext.state.Manager.setProvider</see>(new <see cref="Ext.state.CookieProvider">Ext.state.CookieProvider</see>({
        /// <code>   expires: new Date(new Date().getTime()+(1000*60*60*24*7)), //7 days from now
        /// </code>
        /// }));
        /// A stateful object attempts to save state when one of the events
        /// listed in the <see cref="Ext.state.StatefulConfig.stateEvents">stateEvents</see> configuration fires.
        /// To save state, a stateful object first serializes its state by
        /// calling <em><see cref="Ext.state.Stateful.getState">getState</see></em>.
        /// The Component base class implements <see cref="Ext.state.Stateful.getState">getState</see> to save its width and height within the state
        /// only if they were initially configured, and have changed from the configured value.
        /// The Panel class saves its collapsed state in addition to that.
        /// The Grid class saves its column state in addition to its superclass state.
        /// If there is more application state to be save, the developer must provide an implementation which
        /// first calls the superclass method to inherit the above behaviour, and then injects new properties
        /// into the returned object.
        /// The value yielded by getState is passed to <see cref="Ext.state.Manager.set">Ext.state.Manager.set</see>
        /// which uses the configured <see cref="Ext.state.Provider">Ext.state.Provider</see> to save the object
        /// keyed by the <see cref="Ext.state.StatefulConfig.stateId">stateId</see>.
        /// During construction, a stateful object attempts to <em>restore</em> its state by calling
        /// <see cref="Ext.state.Manager.get">Ext.state.Manager.get</see> passing the <see cref="Ext.state.StatefulConfig.stateId">stateId</see>
        /// The resulting object is passed to <see cref="Ext.state.Stateful.applyState">applyState</see>*. The default implementation of
        /// <see cref="Ext.state.Stateful.applyState">applyState</see> simply copies properties into the object, but a developer may
        /// override this to support restoration of more complex application state.
        /// You can perform extra processing on state save and restore by attaching
        /// handlers to the <see cref="Ext.state.StatefulEvents.beforestaterestore">beforestaterestore</see>, <see cref="Ext.state.StatefulEvents.staterestore">staterestore</see>,
        /// <see cref="Ext.state.StatefulEvents.beforestatesave">beforestatesave</see> and <see cref="Ext.state.StatefulEvents.statesave">statesave</see> events.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool stateful;
        public StatefulConfig(params object[] args){}
    }
    #endregion
    #region StatefulEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class StatefulEvents : Ext.BaseEvents
    {
        /// <summary>
        /// Fires before the state of the object is restored. Return false from an event handler to stop the restore.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="state"><p>The hash of state values returned from the StateProvider. If this
        /// event is not vetoed, then the state object is passed to <b><tt>applyState</tt></b>. By default,
        /// that simply copies property values into this object. The method maybe overriden to
        /// provide custom state restoration.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforestaterestore(Stateful @this, object state, object eOpts){}
        /// <summary>
        /// Fires before the state of the object is saved to the configured state provider. Return false to stop the save.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="state"><p>The hash of state values. This is determined by calling
        /// <b><tt>getState()</tt></b> on the object. This method must be provided by the
        /// developer to return whetever representation of state is required, by default, <see cref="Ext.state.Stateful">Ext.state.Stateful</see>
        /// has a null implementation.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforestatesave(Stateful @this, object state, object eOpts){}
        /// <summary>
        /// Fires after the state of the object is restored.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="state"><p>The hash of state values returned from the StateProvider. This is passed
        /// to <b><tt>applyState</tt></b>. By default, that simply copies property values into this
        /// object. The method maybe overriden to provide custom state restoration.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void staterestore(Stateful @this, object state, object eOpts){}
        /// <summary>
        /// Fires after the state of the object is saved to the configured state provider.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="state"><p>The hash of state values. This is determined by calling
        /// <b><tt>getState()</tt></b> on the object. This method must be provided by the
        /// developer to return whetever representation of state is required, by default, <see cref="Ext.state.Stateful">Ext.state.Stateful</see>
        /// has a null implementation.</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void statesave(Stateful @this, object state, object eOpts){}
        public StatefulEvents(params object[] args){}
    }
    #endregion
}
