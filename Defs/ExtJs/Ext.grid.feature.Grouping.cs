//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.grid.feature
{
    #region Grouping
    /// <inheritdocs />
    /// <summary>
    /// <p>This feature allows to display the grid rows aggregated into groups as specified by the <see cref="Ext.data.Store.groupers">Ext.data.Store.groupers</see>
    /// specified on the Store. The group will show the title for the group name and then the appropriate records for the group
    /// underneath. The groups can also be expanded and collapsed.</p>
    /// <h2>Extra Events</h2>
    /// <p>This feature adds several extra events that will be fired on the grid to interact with the groups:</p>
    /// <ul>
    /// <li><see cref="Ext.grid.feature.GroupingEvents.groupclick">groupclick</see></li>
    /// <li><see cref="Ext.grid.feature.GroupingEvents.groupdblclick">groupdblclick</see></li>
    /// <li><see cref="Ext.grid.feature.GroupingEvents.groupcontextmenu">groupcontextmenu</see></li>
    /// <li><see cref="Ext.grid.feature.GroupingEvents.groupexpand">groupexpand</see></li>
    /// <li><see cref="Ext.grid.feature.GroupingEvents.groupcollapse">groupcollapse</see></li>
    /// </ul>
    /// <h2>Menu Augmentation</h2>
    /// <p>This feature adds extra options to the grid column menu to provide the user with functionality to modify the grouping.
    /// This can be disabled by setting the <see cref="Ext.grid.feature.GroupingConfig.enableGroupingMenu">enableGroupingMenu</see> option. The option to disallow grouping from being turned off
    /// by the user is <see cref="Ext.grid.feature.GroupingConfig.enableNoGroups">enableNoGroups</see>.</p>
    /// <h2>Controlling Group Text</h2>
    /// <p>The <see cref="Ext.grid.feature.GroupingConfig.groupHeaderTpl">groupHeaderTpl</see> is used to control the rendered title for each group. It can modified to customized
    /// the default display.</p>
    /// <h2>Example Usage</h2>
    /// <pre><code>var store = <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.data.Store">Ext.data.Store</see>', {
    /// storeId:'employeeStore',
    /// fields:['name', 'seniority', 'department'],
    /// groupField: 'department',
    /// data: {'employees':[
    /// { "name": "Michael Scott",  "seniority": 7, "department": "Management" },
    /// { "name": "Dwight Schrute", "seniority": 2, "department": "Sales" },
    /// { "name": "Jim Halpert",    "seniority": 3, "department": "Sales" },
    /// { "name": "Kevin Malone",   "seniority": 4, "department": "Accounting" },
    /// { "name": "Angela Martin",  "seniority": 5, "department": "Accounting" }
    /// ]},
    /// proxy: {
    /// type: 'memory',
    /// reader: {
    /// type: 'json',
    /// root: 'employees'
    /// }
    /// }
    /// });
    /// <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.grid.Panel">Ext.grid.Panel</see>', {
    /// title: 'Employees',
    /// store: <see cref="Ext.data.StoreManager.lookup">Ext.data.StoreManager.lookup</see>('employeeStore'),
    /// columns: [
    /// { text: 'Name',     dataIndex: 'name' },
    /// { text: 'Seniority', dataIndex: 'seniority' }
    /// ],
    /// features: [{ftype:'grouping'}],
    /// width: 200,
    /// height: 275,
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>()
    /// });
    /// </code></pre>
    /// <p><strong>Note:</strong> To use grouping with a grid that has <see cref="Ext.grid.column.ColumnConfig.locked">locked columns</see>, you need to supply
    /// the grouping feature as a config object - so the grid can create two instances of the grouping feature.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class Grouping : Feature
    {
        /// <summary>
        /// Set to falsee to disable collapsing groups from the UI.
        /// This is set to <c>false</c> when the associated <see cref="Ext.data.Store">store</see> is
        /// <see cref="Ext.data.StoreConfig.buffered">buffered</see>.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool collapsible;
        /// <summary>
        /// Number of pixels to indent per grouping level
        /// Defaults to: <c>17</c>
        /// </summary>
        public JsNumber depthToIndent;
        /// <summary>
        /// True to enable the grouping control in the header menu.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableGroupingMenu;
        /// <summary>
        /// True to allow the user to turn off grouping.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableNoGroups;
        /// <summary>
        /// Text displayed in the grid header menu for grouping by header.
        /// Defaults to: <c>&quot;Group by this field&quot;</c>
        /// </summary>
        public JsString groupByText;
        /// <summary>
        /// A string Template snippet, an array of strings (optionally followed by an object containing Template methods) to be used to construct a Template, or a Template instance.
        /// <li><p>Example 1 (Template snippet):</p>
        /// <pre><code>groupHeaderTpl: 'Group: {name}'
        /// </code></pre></li>
        /// <li><p>Example 2 (Array):</p>
        /// <pre><code>groupHeaderTpl: [
        /// 'Group: ',
        /// '&lt;div&gt;{name:this.formatName}&lt;/div&gt;',
        /// {
        /// formatName: function(name) {
        /// return <see cref="Ext.String.trim">Ext.String.trim</see>(name);
        /// }
        /// }
        /// ]
        /// </code></pre></li>
        /// <li><p>Example 3 (Template Instance):</p>
        /// <pre><code>groupHeaderTpl: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.XTemplate">Ext.XTemplate</see>',
        /// 'Group: ',
        /// '&lt;div&gt;{name:this.formatName}&lt;/div&gt;',
        /// {
        /// formatName: function(name) {
        /// return <see cref="Ext.String.trim">Ext.String.trim</see>(name);
        /// }
        /// }
        /// )
        /// </code></pre></li>
        /// Defaults to: <c>&quot;{columnName}: {name}&quot;</c><li><span>groupField</span> : <see cref="String">String</see><div><p>The field name being grouped by.</p>
        /// </div></li><li><span>columnName</span> : <see cref="String">String</see><div><p>The column header associated with the field being grouped by <em>if there is a column for the field</em>, falls back to the groupField name.</p>
        /// </div></li><li><span>groupValue</span> : Mixed<div><p>The value of the <see cref="Ext.data.StoreConfig.groupField">groupField</see> for the group header being rendered.</p>
        /// </div></li><li><span>renderedGroupValue</span> : <see cref="String">String</see><div><p>The rendered value of the <see cref="Ext.data.StoreConfig.groupField">groupField</see> for the group header being rendered, as produced by the column renderer.</p>
        /// </div></li><li><span>name</span> : <see cref="String">String</see><div><p>An alias for renderedGroupValue</p>
        /// </div></li><li><span>rows</span> : <see cref="Object">Object</see>[]<div><p>An array of child row data objects as returned by the View's <see cref="Ext.view.AbstractView.prepareData">prepareData</see> method.</p>
        /// </div></li><li><span>children</span> : <see cref="Ext.data.Model">Ext.data.Model</see>[]<div><p>An array containing the child records for the group being rendered.</p>
        /// </div></li>
        /// </summary>
        public object groupHeaderTpl;
        /// <summary>
        /// True to hide the header that is currently grouped.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideGroupedHeader;
        /// <summary>
        /// Text displayed in the grid header for enabling/disabling grouping.
        /// Defaults to: <c>&quot;Show in groups&quot;</c>
        /// </summary>
        public JsString showGroupsText;
        /// <summary>
        /// True to start all groups collapsed.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool startCollapsed;
        /// <summary>
        /// Collapse a group
        /// </summary>
        /// <param name="groupName"><p>The group name, or the element that contains group body</p>
        /// </param>
        /// <param name="focus"><p>Pass <c>true</c> to focus the group after expand.</p>
        /// </param>
        public void collapse(object groupName, bool focus){}
        /// <summary>
        /// Collapse all groups
        /// </summary>
        public void collapseAll(){}
        /// <summary>
        /// Expand a group
        /// </summary>
        /// <param name="groupName"><p>The group name, or the element that contains the group body</p>
        /// </param>
        /// <param name="focus"><p>Pass <c>true</c> to focus the group after expand.</p>
        /// </param>
        public void expand(object groupName, bool focus){}
        /// <summary>
        /// Expand all groups
        /// </summary>
        public void expandAll(){}
        /// <summary>
        /// Gets the related menu item for a dataIndex
        /// </summary>
        /// <param name="dataIndex">
        /// </param>
        /// <returns>
        /// <span><see cref="Ext.grid.header.Container">Ext.grid.header.Container</see></span><div><p>The header</p>
        /// </div>
        /// </returns>
        private Ext.grid.header.Container getMenuItem(object dataIndex){return null;}
        /// <summary>
        /// Returns true if the named group is expanded.
        /// </summary>
        /// <param name="groupName"><p>The group name as returned from <see cref="Ext.data.Store.getGroupString">getGroupString</see>. This is usually the value of
        /// the <see cref="Ext.data.StoreConfig.groupField">groupField</see>.</p>
        /// </param>
        /// <returns>
        /// <span><see cref="bool">Boolean</see></span><div><p><c>true</c> if the group defined by that value is expanded.</p>
        /// </div>
        /// </returns>
        public bool isExpanded(JsString groupName){return false;}
        /// <summary>
        /// Toggle between expanded/collapsed state when clicking on
        /// the group.
        /// </summary>
        /// <param name="view">
        /// </param>
        /// <param name="rowElement">
        /// </param>
        /// <param name="groupName">
        /// </param>
        /// <param name="e">
        /// </param>
        private void onGroupClick(object view, object rowElement, object groupName, object e){}
        /// <summary>
        /// Group by the header the user has clicked on.
        /// </summary>
        /// <param name="menuItem">
        /// </param>
        /// <param name="e">
        /// </param>
        private void onGroupMenuItemClick(object menuItem, object e){}
        /// <summary>
        /// Turn on and off grouping via the menu
        /// </summary>
        /// <param name="menuItem">
        /// </param>
        /// <param name="checked">
        /// </param>
        private void onGroupToggleMenuItemClick(object menuItem, object @checked){}
        /// <summary>
        /// When a row gains focus, expand the groups above it
        /// </summary>
        /// <param name="rowIdx">
        /// </param>
        private void onRowFocus(object rowIdx){}
        /// <summary>
        /// Prunes the grouped header from the header container
        /// </summary>
        private void pruneGroupedHeader(){}
        public Grouping(GroupingConfig config){}
        public Grouping(){}
        public Grouping(params object[] args){}
    }
    #endregion
    #region GroupingConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class GroupingConfig : FeatureConfig
    {
        /// <summary>
        /// Set to falsee to disable collapsing groups from the UI.
        /// This is set to <c>false</c> when the associated <see cref="Ext.data.Store">store</see> is
        /// <see cref="Ext.data.StoreConfig.buffered">buffered</see>.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool collapsible;
        /// <summary>
        /// Number of pixels to indent per grouping level
        /// Defaults to: <c>17</c>
        /// </summary>
        public JsNumber depthToIndent;
        /// <summary>
        /// True to enable the grouping control in the header menu.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableGroupingMenu;
        /// <summary>
        /// True to allow the user to turn off grouping.
        /// Defaults to: <c>true</c>
        /// </summary>
        public bool enableNoGroups;
        /// <summary>
        /// Text displayed in the grid header menu for grouping by header.
        /// Defaults to: <c>&quot;Group by this field&quot;</c>
        /// </summary>
        public JsString groupByText;
        /// <summary>
        /// A string Template snippet, an array of strings (optionally followed by an object containing Template methods) to be used to construct a Template, or a Template instance.
        /// <li><p>Example 1 (Template snippet):</p>
        /// <pre><code>groupHeaderTpl: 'Group: {name}'
        /// </code></pre></li>
        /// <li><p>Example 2 (Array):</p>
        /// <pre><code>groupHeaderTpl: [
        /// 'Group: ',
        /// '&lt;div&gt;{name:this.formatName}&lt;/div&gt;',
        /// {
        /// formatName: function(name) {
        /// return <see cref="Ext.String.trim">Ext.String.trim</see>(name);
        /// }
        /// }
        /// ]
        /// </code></pre></li>
        /// <li><p>Example 3 (Template Instance):</p>
        /// <pre><code>groupHeaderTpl: <see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.XTemplate">Ext.XTemplate</see>',
        /// 'Group: ',
        /// '&lt;div&gt;{name:this.formatName}&lt;/div&gt;',
        /// {
        /// formatName: function(name) {
        /// return <see cref="Ext.String.trim">Ext.String.trim</see>(name);
        /// }
        /// }
        /// )
        /// </code></pre></li>
        /// Defaults to: <c>&quot;{columnName}: {name}&quot;</c><li><span>groupField</span> : <see cref="String">String</see><div><p>The field name being grouped by.</p>
        /// </div></li><li><span>columnName</span> : <see cref="String">String</see><div><p>The column header associated with the field being grouped by <em>if there is a column for the field</em>, falls back to the groupField name.</p>
        /// </div></li><li><span>groupValue</span> : Mixed<div><p>The value of the <see cref="Ext.data.StoreConfig.groupField">groupField</see> for the group header being rendered.</p>
        /// </div></li><li><span>renderedGroupValue</span> : <see cref="String">String</see><div><p>The rendered value of the <see cref="Ext.data.StoreConfig.groupField">groupField</see> for the group header being rendered, as produced by the column renderer.</p>
        /// </div></li><li><span>name</span> : <see cref="String">String</see><div><p>An alias for renderedGroupValue</p>
        /// </div></li><li><span>rows</span> : <see cref="Object">Object</see>[]<div><p>An array of child row data objects as returned by the View's <see cref="Ext.view.AbstractView.prepareData">prepareData</see> method.</p>
        /// </div></li><li><span>children</span> : <see cref="Ext.data.Model">Ext.data.Model</see>[]<div><p>An array containing the child records for the group being rendered.</p>
        /// </div></li>
        /// </summary>
        public object groupHeaderTpl;
        /// <summary>
        /// True to hide the header that is currently grouped.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool hideGroupedHeader;
        /// <summary>
        /// Text displayed in the grid header for enabling/disabling grouping.
        /// Defaults to: <c>&quot;Show in groups&quot;</c>
        /// </summary>
        public JsString showGroupsText;
        /// <summary>
        /// True to start all groups collapsed.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool startCollapsed;
        public GroupingConfig(params object[] args){}
    }
    #endregion
    #region GroupingEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class GroupingEvents : FeatureEvents
    {
        /// <summary>
        /// Parameters<li><span>view</span> : <see cref="Ext.view.Table">Ext.view.Table</see><div>
        /// </div></li><li><span>node</span> : HTMLElement<div>
        /// </div></li><li><span>group</span> : <see cref="String">String</see><div><p>The name of the group</p>
        /// </div></li><li><span>e</span> : <see cref="Ext.EventObject">Ext.EventObject</see><div>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="view">
        /// </param>
        /// <param name="node">
        /// </param>
        /// <param name="group"><p>The name of the group</p>
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void groupclick(Ext.view.Table view, object node, JsString group, EventObject e, object eOpts){}
        /// <summary>
        /// Parameters<li><span>view</span> : <see cref="Ext.view.Table">Ext.view.Table</see><div>
        /// </div></li><li><span>node</span> : HTMLElement<div>
        /// </div></li><li><span>group</span> : <see cref="String">String</see><div><p>The name of the group</p>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="view">
        /// </param>
        /// <param name="node">
        /// </param>
        /// <param name="group"><p>The name of the group</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void groupcollapse(Ext.view.Table view, object node, JsString group, object eOpts){}
        /// <summary>
        /// Parameters<li><span>view</span> : <see cref="Ext.view.Table">Ext.view.Table</see><div>
        /// </div></li><li><span>node</span> : HTMLElement<div>
        /// </div></li><li><span>group</span> : <see cref="String">String</see><div><p>The name of the group</p>
        /// </div></li><li><span>e</span> : <see cref="Ext.EventObject">Ext.EventObject</see><div>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="view">
        /// </param>
        /// <param name="node">
        /// </param>
        /// <param name="group"><p>The name of the group</p>
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void groupcontextmenu(Ext.view.Table view, object node, JsString group, EventObject e, object eOpts){}
        /// <summary>
        /// Parameters<li><span>view</span> : <see cref="Ext.view.Table">Ext.view.Table</see><div>
        /// </div></li><li><span>node</span> : HTMLElement<div>
        /// </div></li><li><span>group</span> : <see cref="String">String</see><div><p>The name of the group</p>
        /// </div></li><li><span>e</span> : <see cref="Ext.EventObject">Ext.EventObject</see><div>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="view">
        /// </param>
        /// <param name="node">
        /// </param>
        /// <param name="group"><p>The name of the group</p>
        /// </param>
        /// <param name="e">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void groupdblclick(Ext.view.Table view, object node, JsString group, EventObject e, object eOpts){}
        /// <summary>
        /// Parameters<li><span>view</span> : <see cref="Ext.view.Table">Ext.view.Table</see><div>
        /// </div></li><li><span>node</span> : HTMLElement<div>
        /// </div></li><li><span>group</span> : <see cref="String">String</see><div><p>The name of the group</p>
        /// </div></li><li><span>eOpts</span> : <see cref="Object">Object</see><div><p>The options object passed to <see>Ext.util.Observable.addListener</see>.</p>
        /// </div></li>
        /// </summary>
        /// <param name="view">
        /// </param>
        /// <param name="node">
        /// </param>
        /// <param name="group"><p>The name of the group</p>
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void groupexpand(Ext.view.Table view, object node, JsString group, object eOpts){}
        public GroupingEvents(params object[] args){}
    }
    #endregion
}
