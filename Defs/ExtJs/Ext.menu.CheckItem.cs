//***************************************************
//* This file was generated by tool
//* SharpKit
//* At: 29/08/2012 03:59:41 p.m.
//***************************************************
using SharpKit.JavaScript;
namespace Ext.menu
{
    #region CheckItem
    /// <inheritdocs />
    /// <summary>
    /// <p>A menu item that contains a togglable checkbox by default, but that can also be a part of a radio group.</p>
    /// <pre><code><see cref="Ext.ExtContext.create">Ext.create</see>('<see cref="Ext.menu.Menu">Ext.menu.Menu</see>', {
    /// width: 100,
    /// height: 110,
    /// floating: false,  // usually you want this set to True (default)
    /// renderTo: <see cref="Ext.ExtContext.getBody">Ext.getBody</see>(),  // usually rendered by it's containing component
    /// items: [{
    /// xtype: 'menucheckitem',
    /// text: 'select all'
    /// },{
    /// xtype: 'menucheckitem',
    /// text: 'select specific'
    /// },{
    /// iconCls: 'add16',
    /// text: 'icon item'
    /// },{
    /// text: 'regular item'
    /// }]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false, OmitOptionalParameters=true)]
    public partial class CheckItem : Ext.menu.Item
    {
        /// <summary>
        /// True to prevent the checked item from being toggled. Any submenu will still be accessible.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool checkChangeDisabled;
        /// <summary>
        /// Alternative for the checkchange event.  Gets called with the same parameters.
        /// </summary>
        public System.Delegate checkHandler;
        /// <summary>
        /// True to render the menuitem initially checked.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool @checked;
        /// <summary>
        /// The CSS class used by cls to show the checked state.
        /// Defaults to Ext.baseCSSPrefix + 'menu-item-checked'.
        /// Defaults to: <c>&quot;x-menu-item-checked&quot;</c>
        /// </summary>
        public JsString checkedCls;
        /// <summary>
        /// Name of a radio group that the item belongs.
        /// Specifying this option will turn check item into a radio item.
        /// Note that the group name must be globally unique.
        /// </summary>
        public JsString group;
        /// <summary>
        /// The CSS class applied to this item's icon image to denote being a part of a radio group.
        /// Defaults to Ext.baseCSSClass + 'menu-group-icon'.
        /// Any specified iconCls overrides this.
        /// Defaults to: <c>&quot;x-menu-group-icon&quot;</c>
        /// </summary>
        public JsString groupCls;
        /// <summary>
        /// Scope for the checkHandler callback.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// The CSS class used by cls to show the unchecked state.
        /// Defaults to Ext.baseCSSPrefix + 'menu-item-unchecked'.
        /// Defaults to: <c>&quot;x-menu-item-unchecked&quot;</c>
        /// </summary>
        public JsString uncheckedCls;
        /// <summary>
        /// Disables just the checkbox functionality of this menu Item. If this menu item has a submenu, that submenu
        /// will still be accessible
        /// </summary>
        public void disableCheckChange(){}
        /// <summary>
        /// Reenables the checkbox functionality of this menu item after having been disabled by disableCheckChange
        /// </summary>
        public void enableCheckChange(){}
        /// <summary>
        /// Sets the checked state of the item
        /// </summary>
        /// <param name="checked"><p>True to check, false to uncheck</p>
        /// </param>
        /// <param name="suppressEvents"><p>True to prevent firing the checkchange events.</p>
        /// <p>Defaults to: <c>false</c></p></param>
        public void setChecked(bool @checked, object suppressEvents=null){}
        public CheckItem(CheckItemConfig config){}
        public CheckItem(){}
        public CheckItem(params object[] args){}
    }
    #endregion
    #region CheckItemConfig
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CheckItemConfig : Ext.menu.ItemConfig
    {
        /// <summary>
        /// True to prevent the checked item from being toggled. Any submenu will still be accessible.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool checkChangeDisabled;
        /// <summary>
        /// Alternative for the checkchange event.  Gets called with the same parameters.
        /// </summary>
        public System.Delegate checkHandler;
        /// <summary>
        /// True to render the menuitem initially checked.
        /// Defaults to: <c>false</c>
        /// </summary>
        public bool @checked;
        /// <summary>
        /// The CSS class used by cls to show the checked state.
        /// Defaults to Ext.baseCSSPrefix + 'menu-item-checked'.
        /// Defaults to: <c>&quot;x-menu-item-checked&quot;</c>
        /// </summary>
        public JsString checkedCls;
        /// <summary>
        /// Name of a radio group that the item belongs.
        /// Specifying this option will turn check item into a radio item.
        /// Note that the group name must be globally unique.
        /// </summary>
        public JsString group;
        /// <summary>
        /// The CSS class applied to this item's icon image to denote being a part of a radio group.
        /// Defaults to Ext.baseCSSClass + 'menu-group-icon'.
        /// Any specified iconCls overrides this.
        /// Defaults to: <c>&quot;x-menu-group-icon&quot;</c>
        /// </summary>
        public JsString groupCls;
        /// <summary>
        /// Scope for the checkHandler callback.
        /// </summary>
        public JsObject scope;
        /// <summary>
        /// The CSS class used by cls to show the unchecked state.
        /// Defaults to Ext.baseCSSPrefix + 'menu-item-unchecked'.
        /// Defaults to: <c>&quot;x-menu-item-unchecked&quot;</c>
        /// </summary>
        public JsString uncheckedCls;
        public CheckItemConfig(params object[] args){}
    }
    #endregion
    #region CheckItemEvents
    /// <inheritdocs />
    [JsType(JsMode.Json, Export=false, OmitOptionalParameters=true)]
    public partial class CheckItemEvents : Ext.menu.ItemEvents
    {
        /// <summary>
        /// Fires before a change event. Return false to cancel.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="checked">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void beforecheckchange(CheckItem @this, bool @checked, object eOpts){}
        /// <summary>
        /// Fires after a change event.
        /// </summary>
        /// <param name="this">
        /// </param>
        /// <param name="checked">
        /// </param>
        /// <param name="eOpts"><p>The options object passed to <see cref="Ext.util.Observable.addListener">Ext.util.Observable.addListener</see>.</p>
        /// </param>
        public void checkchange(CheckItem @this, bool @checked, object eOpts){}
        public CheckItemEvents(params object[] args){}
    }
    #endregion
}
