//***************************************************
//* This file was generated by tool
//* 14/10/2011 20:45:14
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
using SharpKit.Html;
using Ext.data;
using Ext.util;
using Ext.data.association;
using Ext.data.proxy;
using Ext.data.reader;
using Ext.field.slider;
#region 
#region Base
[JsType(JsMode.Prototype, Export=false)]
public partial class Base
{
    public Base(){}
    /// <summary>
    /// @private
    /// @param config
    /// </summary>
    public static void addConfig(object config, object fullMerge){}
    /// <summary>
    /// @private
    /// @param {Object} members
    /// </summary>
    public static void addInheritableStatics(object members){}
    /// <summary>
    /// @private
    /// @param name
    /// @param member
    /// </summary>
    public static void addMember(object name, object member){}
    /// <summary>
    /// Add methods / properties to the prototype of this class.
    /// *
    /// Ext.define('My.awesome.Cat', {
    /// constructor: function() {
    /// ...
    /// }
    /// });
    /// *
    /// My.awesome.Cat.implement({
    /// meow: function() {
    /// alert('Meowww...');
    /// }
    /// });
    /// *
    /// var kitty = new My.awesome.Cat;
    /// kitty.meow();
    /// *
    /// @param {Object} members
    /// @static
    /// @inheritable
    /// </summary>
    public static void addMembers(object members){}
    /// <summary>
    /// Add / override static properties of this class.
    /// *
    /// Ext.define('My.cool.Class', {
    /// ...
    /// });
    /// *
    /// My.cool.Class.addStatics({
    /// someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'
    /// method1: function() { ... },    // My.cool.Class.method1 = function() { ... };
    /// method2: function() { ... }     // My.cool.Class.method2 = function() { ... };
    /// });
    /// *
    /// @param {Object} members
    /// @return {Ext.Base} this
    /// @static
    /// @inheritable
    /// </summary>
    public static void addStatics(object members){}
    /// <summary>
    /// @private
    /// </summary>
    public static void addXtype(object xtype){}
    /// <summary>
    /// Borrow another class' members to the prototype of this class.
    /// *
    /// Ext.define('Bank', {
    /// money: '$$$',
    /// printMoney: function() {
    /// alert('$$$$$$$');
    /// }
    /// });
    /// *
    /// Ext.define('Thief', {
    /// ...
    /// });
    /// *
    /// Thief.borrow(Bank, ['money', 'printMoney']);
    /// *
    /// var steve = new Thief();
    /// *
    /// alert(steve.money); // alerts '$$$'
    /// steve.printMoney(); // alerts '$$$$$$$'
    /// *
    /// @param {Ext.Base} fromClass The class to borrow members from
    /// @param {Array/String} members The names of the members to borrow
    /// @return {Ext.Base} this
    /// @static
    /// @inheritable
    /// @private
    /// </summary>
    public static void borrow(object fromClass, object members){}
    /// <summary>
    /// @private
    /// </summary>
    public static void callParent(object args){}
    /// <summary>
    /// Create a new instance of this Class.
    /// *
    /// Ext.define('My.cool.Class', {
    /// ...
    /// });
    /// *
    /// My.cool.Class.create({
    /// someConfig: true
    /// });
    /// *
    /// All parameters are passed to the constructor of the class.
    /// *
    /// @return {Object} the created instance.
    /// @static
    /// @inheritable
    /// </summary>
    public static object create(){return null;}
    /// <summary>
    /// @private
    /// @param config
    /// </summary>
    public static void extend(object parent){}
    /// <summary>
    /// Get the current class' name in string format.
    /// *
    /// Ext.define('My.cool.Class', {
    /// constructor: function() {
    /// alert(this.self.getName()); // alerts 'My.cool.Class'
    /// }
    /// });
    /// *
    /// My.cool.Class.getName(); // 'My.cool.Class'
    /// *
    /// @return {String} className
    /// @static
    /// @inheritable
    /// </summary>
    public static JsString getName(){return null;}
    /// <summary>
    /// @private
    /// </summary>
    public static void implement(){}
    /// <summary>
    /// Used internally by the mixins pre-processor
    /// @private
    /// @inheritable
    /// </summary>
    public static void mixin(object name, object mixinClass){}
    /// <summary>
    /// @private
    /// @param config
    /// </summary>
    public static void onExtended(object fn, object scope){}
    /// <summary>
    /// Override members of this class. Overridden methods can be invoked via
    /// {@link Ext.Base#callParent}.
    /// *
    /// Ext.define('My.Cat', {
    /// constructor: function() {
    /// alert("I'm a cat!");
    /// *
    /// return this;
    /// }
    /// });
    /// *
    /// My.Cat.override({
    /// constructor: function() {
    /// alert("I'm going to be a cat!");
    /// *
    /// var instance = this.callParent(arguments);
    /// *
    /// alert("Meeeeoooowwww");
    /// *
    /// return instance;
    /// }
    /// });
    /// *
    /// var kitty = new My.Cat(); // alerts "I'm going to be a cat!"
    /// // alerts "I'm a cat!"
    /// // alerts "Meeeeoooowwww"
    /// *
    /// As of 4.1, direct use of this method is deprecated. Use {@link Ext#define Ext.define}
    /// instead:
    /// *
    /// Ext.define('My.CatOverride', {
    /// override: 'My.Cat',
    /// constructor: function() {
    /// alert("I'm going to be a cat!");
    /// *
    /// var instance = this.callParent(arguments);
    /// *
    /// alert("Meeeeoooowwww");
    /// *
    /// return instance;
    /// }
    /// });
    /// *
    /// The above accomplishes the same result but can be managed by the {@link Ext.Loader}
    /// which can properly order the override and its target class and the build process
    /// can determine whether the override is needed based on the required state of the
    /// target class (My.Cat).
    /// *
    /// @param {Object} members The properties to add to this class. This should be
    /// specified as an object literal containing one or more properties.
    /// @return {Ext.Base} this class
    /// @static
    /// @inheritable
    /// @markdown
    /// @deprecated 4.1.0 Use {@link Ext#define Ext.define} instead
    /// </summary>
    public static void @override(object members){}
    /// <summary>
    /// @private
    /// @param config
    /// </summary>
    public static void triggerExtended(){}
    public static JsString _className{get;set;}
    public static bool _isClass{get;set;}
    /// <summary>
    /// Get the current class' name in string format.
    /// *
    /// Ext.define('My.cool.Class', {
    /// constructor: function() {
    /// alert(this.self.getName()); // alerts 'My.cool.Class'
    /// }
    /// });
    /// *
    /// My.cool.Class.getName(); // 'My.cool.Class'
    /// *
    /// @return {String} className
    /// @static
    /// @inheritable
    /// </summary>
    [JsProperty]
    public JsString Name{[JsMethod(Name="getName")]get;private set;}
}
#endregion
#region ExtClass
namespace Ext
{
    [JsType(JsMode.Prototype, Export = false)]
    public partial class ExtClass
    {
        public ExtClass() { }
        /// <summary>
        /// @private
        /// @param Class
        /// @param classData
        /// @param onClassCreated
        /// </summary>
        public static void create(object Class) { }
        public static void getConfigNameMap(object name) { }
        /// <summary>
        /// Retrieve the array stack of default pre-processors
        /// @private
        /// @return {Function} defaultPreprocessors
        /// </summary>
        public static JsAction getDefaultPreprocessors() { return null; }
        /// <summary>
        /// Retrieve a pre-processor callback function by its name, which has been registered before
        /// *
        /// @private
        /// @param {String} name
        /// @return {Function} preprocessor
        /// </summary>
        public static JsAction getPreprocessor(JsString name) { return null; }
        /// <summary>
        /// @private
        /// </summary>
        public static void getPreprocessors() { }
        /// <summary>
        /// @private
        /// @param Class
        /// @param data
        /// @param hooks
        /// </summary>
        public static void onBeforeCreated(object Class, object data, object hooks) { }
        /// <summary>
        /// @private
        /// @param Class
        /// @param data
        /// @param onCreated
        /// </summary>
        public static void process(object Class, object data, object onCreated) { }
        /// <summary>
        /// Register a new pre-processor to be used during the class creation process
        /// *
        /// @member Ext.Class registerPreprocessor
        /// @param {String} name The pre-processor's name
        /// @param {Function} fn The callback function to be executed. Typical format:
        /// function(cls, data, fn) {
        /// // Your code here
        /// // Execute this when the processing is finished.
        /// // Asynchronous processing is perfectly ok
        /// if (fn) {
        /// fn.call(this, cls, data);
        /// }
        /// });
        /// Passed arguments for this function are:
        /// *
        /// - `{Function} cls`: The created class
        /// - `{Object} data`: The set of properties passed in {@link Ext.Class} constructor
        /// - `{Function} fn`: The callback function that <b>must</b> to be executed when this pre-processor finishes,
        /// regardless of whether the processing is synchronous or aynchronous
        /// *
        /// @private
        /// @return {Ext.Class} this
        /// @markdown
        /// </summary>
        public static void registerPreprocessor(JsString name, JsAction fn, object properties, object position, object relativeTo) { }
        /// <summary>
        /// Insert this pre-processor at a specific position in the stack, optionally relative to
        /// any existing pre-processor. For example:
        /// Ext.Class.registerPreprocessor('debug', function(cls, data, fn) {
        /// // Your code here
        /// if (fn) {
        /// fn.call(this, cls, data);
        /// }
        /// }).insertDefaultPreprocessor('debug', 'last');
        /// @private
        /// @param {String} name The pre-processor name. Note that it needs to be registered with
        /// {@link Ext#registerPreprocessor registerPreprocessor} before this
        /// @param {String} offset The insertion position. Four possible values are:
        /// 'first', 'last', or: 'before', 'after' (relative to the name provided in the third argument)
        /// @param {String} relativeName
        /// @return {Ext.Class} this
        /// @markdown
        /// </summary>
        public static void setDefaultPreprocessorPosition(JsString name, JsString offset, JsString relativeName) { }
        /// <summary>
        /// Set the default array stack of default pre-processors
        /// *
        /// @private
        /// @param {Array} preprocessors
        /// @return {Ext.Class} this
        /// </summary>
        public static void setDefaultPreprocessors(JsArray preprocessors) { }
        /// <summary>
        /// Retrieve the array stack of default pre-processors
        /// @private
        /// @return {Function} defaultPreprocessors
        /// Set the default array stack of default pre-processors
        /// *
        /// @private
        /// @param {Array} preprocessors
        /// @return {Ext.Class} this
        /// </summary>
        [JsProperty]
        public JsAction DefaultPreprocessors { [JsMethod(Name = "getDefaultPreprocessors")]get; [JsMethod(Name = "setDefaultPreprocessors")]set; }
    }
}
#endregion
#region Loader
[JsType(JsMode.Prototype, Export=false)]
public partial class Loader
{
    public Loader(){}
    /// <summary>
    /// @private
    /// </summary>
    public static void addOptionalRequires(object requires){}
    /// <summary>
    /// @private
    /// </summary>
    public static void cleanupScriptElement(object script, object remove){}
    /// <summary>
    /// @private
    /// @param {String} className
    /// </summary>
    public static void historyPush(JsString className){}
    /// <summary>
    /// Inject a script element to document's head, call onLoad and onError accordingly
    /// @private
    /// </summary>
    public static void injectScriptElement(object url, object onLoad, object onError, object scope){}
    /// <summary>
    /// Load a script file, supports both asynchronous and synchronous approaches
    /// *
    /// @param {String} url
    /// @param {Function} onLoad
    /// @param {Scope} scope
    /// @param {Boolean} synchronous
    /// @private
    /// </summary>
    public static void loadScriptFile(JsString url, JsAction onLoad, object onError, object scope, bool synchronous){}
    /// <summary>
    /// @private
    /// @param {String} className
    /// @param {String} filePath
    /// </summary>
    public static void onFileLoaded(JsString className, JsString filePath){}
    /// <summary>
    /// @private
    /// </summary>
    public static void onFileLoadError(object className, object filePath, object errorMessage, object isSynchronous){}
    /// <summary>
    /// @ignore
    /// </summary>
    public static void onReady(object fn, object scope, object withDomReady, object options){}
    /// <summary>
    /// Refresh all items in the queue. If all dependencies for an item exist during looping,
    /// it will execute the callback and call refreshQueue again. Triggers onReady when the queue is
    /// empty
    /// @private
    /// </summary>
    public static void refreshQueue(){}
    public static void removeScriptElement(object url){}
    /// <summary>
    /// @ignore
    /// </summary>
    public static void require_(object expressions, object fn, object scope, object excludes){}
    /// <summary>
    /// @ignore
    /// </summary>
    public static void syncRequire(){}
    /// <summary>
    /// @private
    /// </summary>
    public static void triggerReady(object force){}
    /// <summary>
    /// * @private
    /// </summary>
    public static bool hasFileLoadError{get;set;}
    /// <summary>
    /// Flag indicating whether there are still files being loaded
    /// @private
    /// </summary>
    public static bool isLoading{get;set;}
    /// <summary>
    /// @private
    /// </summary>
    public static object numLoadedFiles{get;set;}
    /// <summary>
    /// @private
    /// </summary>
    public static object numPendingFiles{get;set;}
    /// <summary>
    /// @private
    /// </summary>
    public static bool syncModeEnabled{get;set;}
}
#endregion
#region Version
[JsType(JsMode.Prototype, Export=false)]
public partial class Version
{
    public Version(){}
    /// <summary>
    /// Compare 2 specified versions, starting from left to right. If a part contains special version strings,
    /// they are handled in the following order:
    /// 'dev' < 'alpha' = 'a' < 'beta' = 'b' < 'RC' = 'rc' < '#' < 'pl' = 'p' < 'anything else'
    /// *
    /// @static
    /// @param {String} current The current version to compare to
    /// @param {String} target The target version to compare to
    /// @return {Number} Returns -1 if the current version is smaller than the target version, 1 if greater, and 0 if they're equivalent
    /// </summary>
    public static JsNumber compare(JsString current, JsString target){return null;}
    /// <summary>
    /// Converts a version component to a comparable value
    /// *
    /// @static
    /// @param {Object} value The value to convert
    /// @return {Object}
    /// </summary>
    public static void getComponentValue(object value){}
}
#endregion
#endregion
#region Element
namespace Element
{
    #region populateStyleMap
    /// <summary>
    /// Creates mappings for 'margin-before' to 'marginLeft' (etc.) given the output
    /// map and an ordering pair (e.g., ['left', 'right']). The ordering pair is in
    /// before/after order.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class populateStyleMap
    {
        public populateStyleMap(){}
        /// <summary>
        /// Creates mappings for 'margin-before' to 'marginLeft' (etc.) given the output
        /// map and an ordering pair (e.g., ['left', 'right']). The ordering pair is in
        /// before/after order.
        /// </summary>
        public populateStyleMap(object map, object order){}
    }
    #endregion
}
#endregion
#region Ext
namespace Ext
{
    #region AbstractComponent
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractComponent : EventedBase
    {
        public AbstractComponent(){}
        /// <summary>
        /// @private
        /// Significantly improve instantiation time for Component with multiple references
        /// Ext.Element instance of the reference domNode is only created the very first time
        /// it's ever used
        /// </summary>
        public void addReferenceNode(object name, object domNode){}
        public AbstractComponent(object config){}
        public void initElement(){}
        public void onClassExtended(object Class, object members){}
        /// <summary>
        /// *
        /// </summary>
        public JsString extend{get;set;}
        public JsString referenceAttributeName{get;set;}
        public JsString referenceSelector{get;set;}
    }
    #endregion
    #region AbstractManager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractManager
    {
        public AbstractManager(){}
        public AbstractManager(object config){}
        /// <summary>
        /// Creates and returns an instance of whatever this manager manages, based on the supplied type and
        /// config object.
        /// @param {Object} config The config object
        /// @param {String} defaultType If no type is discovered in the config object, we fall back to this type
        /// @return {Object} The instance of whatever this manager is managing
        /// </summary>
        public object create(object config, JsString defaultType){return null;}
        /// <summary>
        /// Executes the specified function once for each item in the collection.
        /// @param {Function} fn The function to execute.
        /// @param {String} fn.key The key of the item
        /// @param {Number} fn.value The value of the item
        /// @param {Number} fn.length The total number of items in the collection
        /// @param {Boolean} fn.return False to cease iteration.
        /// @param {Object} scope The scope to execute in. Defaults to `this`.
        /// </summary>
        public void each(JsAction fn, object scope){}
        /// <summary>
        /// Returns an item by id.
        /// For additional details see {@link Ext.util.HashMap#get}.
        /// @param {String} id The id of the item
        /// @return {Object} The item, undefined if not found.
        /// </summary>
        public object get(JsString id){return null;}
        /// <summary>
        /// Gets the number of items in the collection.
        /// @return {Number} The number of items in the collection.
        /// </summary>
        public JsNumber getCount(){return null;}
        /// <summary>
        /// Checks if an item type is registered.
        /// @param {String} type The mnemonic string by which the class may be looked up
        /// @return {Boolean} Whether the type is registered.
        /// </summary>
        public bool isRegistered(JsString type){return false;}
        /// <summary>
        /// Registers a function that will be called when an item with the specified id is added to the manager.
        /// This will happen on instantiation.
        /// @param {String} id The item id
        /// @param {Function} fn The callback function. Called with a single parameter, the item.
        /// @param {Object} scope The scope (this reference) in which the callback is executed.
        /// Defaults to the item.
        /// </summary>
        public void onAvailable(JsString id, JsAction fn, object scope){}
        /// <summary>
        /// Registers an item to be managed
        /// @param {Object} item The item to register
        /// </summary>
        public void register(object item){}
        /// <summary>
        /// Registers a new item constructor, keyed by a type key.
        /// @param {String} type The mnemonic string by which the class may be looked up.
        /// @param {Function} cls The new instance class.
        /// </summary>
        public void registerType(JsString type, JsAction cls){}
        /// <summary>
        /// Unregisters an item by removing it from this manager
        /// @param {Object} item The item to unregister
        /// </summary>
        public void unregister(object item){}
        /// <summary>
        /// Gets the number of items in the collection.
        /// @return {Number} The number of items in the collection.
        /// </summary>
        [JsProperty]
        public JsNumber Count{[JsMethod(Name="getCount")]get;private set;}
        /// <summary>
        /// End Definitions
        /// </summary>
        public JsString typeName{get;set;}
    }
    #endregion
    #region AbstractPlugin
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractPlugin
    {
        public AbstractPlugin(){}
        public AbstractPlugin(object config){}
        /// <summary>
        /// <p>The base implementation just sets the plugin's <code>disabled</code> flag to <code>true</code></p>
        /// <p>Plugin subclasses which need more complex processing may implement an overriding implementation.</p>
        /// </summary>
        public void disable(){}
        /// <summary>
        /// <p>The base implementation just sets the plugin's <code>disabled</code> flag to <code>false</code></p>
        /// <p>Plugin subclasses which need more complex processing may implement an overriding implementation.</p>
        /// </summary>
        public void enable(){}
        public void getCmp(){}
        /// <summary>
        /// @class Ext.AbstractPlugin
        /// @extends Object
        /// *
        /// <p>The AbstractPlugin class is the base class from which user-implemented plugins should inherit.</p>
        /// <p>This class defines the essential API of plugins as used by Components by defining the following methods:</p>
        /// <ul>
        /// <li><code>init</code> : The plugin initialization method which the owning Component calls at Component initialization
        /// time.<div class="sub-desc"><p>The Component passes itself as the sole parameter.</p><p>Subclasses should set up bidirectional
        /// links between the plugin and its client Component here.</p></div></li>
        /// <li><code>destroy</code> : The plugin cleanup method which the owning Component calls at Component destruction time.<div class="sub-desc">Use
        /// this method to break links between the plugin and the Component and to free any allocated resources.</div></li>
        /// <li><code>enable</code> : The base implementation just sets the plugin's <code>disabled</code> flag to <code>false</code><div class="sub-desc"></div></li>
        /// <li><code>disable</code> : The base implementation just sets the plugin's <code>disabled</code> flag to <code>true</code><div class="sub-desc"></div></li>
        /// </ul>
        /// </summary>
        public bool disabled{get;set;}
    }
    #endregion
    #region ActionSheet
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ActionSheet
    {
        public ActionSheet(){}
        /// <summary>
        /// A button {@link Ext.Sheet} class designed to popup or slide/anchor a series of {@link Ext.Button}s.
        /// *
        /// # Example
        /// *
        /// @example preview
        /// var actionSheet = Ext.create('Ext.ActionSheet', {
        /// items: [
        /// {
        /// text: 'Delete draft',
        /// ui  : 'decline'
        /// },
        /// {
        /// text: 'Save draft'
        /// },
        /// {
        /// text: 'Cancel',
        /// ui  : 'confirm'
        /// }
        /// ]
        /// });
        /// actionSheet.show();
        /// *
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// A button {@link Ext.Sheet} class designed to popup or slide/anchor a series of {@link Ext.Button}s.
        /// *
        /// # Example
        /// *
        /// @example preview
        /// var actionSheet = Ext.create('Ext.ActionSheet', {
        /// items: [
        /// {
        /// text: 'Delete draft',
        /// ui  : 'decline'
        /// },
        /// {
        /// text: 'Save draft'
        /// },
        /// {
        /// text: 'Cancel',
        /// ui  : 'confirm'
        /// }
        /// ]
        /// });
        /// actionSheet.show();
        /// *
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Ajax
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Ajax
    {
        public Ajax(Ext.AjaxConfig config){}
        public Ajax(){}
        /// <summary>
        /// @property  autoAbort
        /// Whether a new request should abort any pending requests. (defaults to false)
        /// @type Boolean
        /// </summary>
        public bool autoAbort{get;set;}
        /// <summary>
        /// A singleton instance of an {@link Ext.data.Connection}. This class
        /// is used to communicate with your server side code. It can be used as follows:
        /// *
        /// Ext.Ajax.request({
        /// url: 'page.php',
        /// params: {
        /// id: 1
        /// },
        /// success: function(response){
        /// var text = response.responseText;
        /// // process server response here
        /// }
        /// });
        /// *
        /// Default options for all requests can be set by changing a property on the Ext.Ajax class:
        /// *
        /// Ext.Ajax.timeout = 60000; // 60 seconds
        /// *
        /// Any options specified in the request method for the Ajax request will override any
        /// defaults set on the Ext.Ajax class. In the code sample below, the timeout for the
        /// request will be 60 seconds.
        /// Ext.Ajax.timeout = 120000; // 120 seconds
        /// Ext.Ajax.request({
        /// url: 'page.aspx',
        /// timeout: 60000
        /// });
        /// *
        /// In general, this class will be used for all Ajax requests in your application.
        /// The main reason for creating a separate {@link Ext.data.Connection} is for a
        /// series of requests that share common settings that are different to all other
        /// requests in the application.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// A singleton instance of an {@link Ext.data.Connection}. This class
        /// is used to communicate with your server side code. It can be used as follows:
        /// *
        /// Ext.Ajax.request({
        /// url: 'page.php',
        /// params: {
        /// id: 1
        /// },
        /// success: function(response){
        /// var text = response.responseText;
        /// // process server response here
        /// }
        /// });
        /// *
        /// Default options for all requests can be set by changing a property on the Ext.Ajax class:
        /// *
        /// Ext.Ajax.timeout = 60000; // 60 seconds
        /// *
        /// Any options specified in the request method for the Ajax request will override any
        /// defaults set on the Ext.Ajax class. In the code sample below, the timeout for the
        /// request will be 60 seconds.
        /// Ext.Ajax.timeout = 120000; // 120 seconds
        /// Ext.Ajax.request({
        /// url: 'page.aspx',
        /// timeout: 60000
        /// });
        /// *
        /// In general, this class will be used for all Ajax requests in your application.
        /// The main reason for creating a separate {@link Ext.data.Connection} is for a
        /// series of requests that share common settings that are different to all other
        /// requests in the application.
        /// </summary>
        public bool singleton{get;set;}
    }
    #endregion
    #region AjaxConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AjaxConfig
    {
        public AjaxConfig(){}
        /// <summary>
        /// (Optional) @hide
        /// </summary>
        public bool autoAbort{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public object defaultHeaders{get;set;}
        /// <summary>
        /// (Optional) @hide
        /// </summary>
        public bool disableCaching{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public object extraParams{get;set;}
        /// <summary>
        /// (Optional) @hide
        /// </summary>
        public JsString method{get;set;}
        /// <summary>
        /// (Optional) @hide
        /// </summary>
        public JsNumber timeout{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region Anim
    /// <summary>
    /// <p>Ext.Anim is used to excute animations defined in {@link Ext.anims}. The {@link #run} method can take any of the
    /// properties defined below.</p>
    /// *
    /// <h2>Example usage:</h2>
    /// <code><pre>
    /// Ext.Anim.run(this, 'fade', {
    /// out: false,
    /// autoClear: true
    /// });
    /// </pre></code>
    /// *
    /// <p>Animations are disabled on Android and Blackberry by default using the {@link #disableAnimations} property.</p>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Anim
    {
        public Anim(){}
        public Anim(AnimConfig config){}
        public Anim(object config){}
        public void initConfig(object el, object runConfig){}
        public void onTransitionEnd(object ev, object el, object o){}
        public void run(object el, object config){}
        /// <summary>
        /// Used to run an animation on a specific element. Use the config argument to customize the animation
        /// @param {Ext.Element/HTMLElement} el The element to animate
        /// @param {String} anim The animation type, defined in {@link Ext.anims}
        /// @param {Object} config The config object for the animation
        /// @method run
        /// </summary>
        public static void run(object el, JsString anim, object config){}
        /// <summary>
        /// @cfg {Boolean} disableAnimations
        /// True to disable animations. By default, animations are disabled on Android and Blackberry
        /// </summary>
        public bool disableAnimations{get;set;}
        /// <summary>
        /// <p>Ext.Anim is used to excute animations defined in {@link Ext.anims}. The {@link #run} method can take any of the
        /// properties defined below.</p>
        /// *
        /// <h2>Example usage:</h2>
        /// <code><pre>
        /// Ext.Anim.run(this, 'fade', {
        /// out: false,
        /// autoClear: true
        /// });
        /// </pre></code>
        /// *
        /// <p>Animations are disabled on Android and Blackberry by default using the {@link #disableAnimations} property.</p>
        /// @singleton
        /// </summary>
        public bool isAnim{get;set;}
    }
    #endregion
    #region AnimConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AnimConfig
    {
        public AnimConfig(){}
        /// <summary>
        /// True to remove all custom CSS defined in the {@link #to} config when the animation is over.
        /// </summary>
        public bool autoClear{get;set;}
        /// <summary>
        /// Code to execute before starting the animation.
        /// </summary>
        public JsAction before{get;set;}
        /// <summary>
        /// Time to delay before starting the animation.
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// Valid values are 'left', 'right', 'up', 'down' and null.
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// True to disable animations. By default, animations are disabled on Android and Blackberry
        /// </summary>
        public bool disableAnimations{get;set;}
        /// <summary>
        /// Time in milliseconds for the animation to last.
        /// </summary>
        public JsNumber duration{get;set;}
        /// <summary>
        /// Valid values are 'ease', 'linear', ease-in', 'ease-out', 'ease-in-out' or a cubic-bezier curve as defined by CSS.
        /// </summary>
        public JsString easing{get;set;}
        /// <summary>
        /// An object of CSS values which the animation begins with. If you define a CSS property here, you must also
        /// define it in the {@link #to} config.
        /// </summary>
        public object from{get;set;}
        /// <summary>
        /// True if you want the animation to slide out of the screen.
        /// </summary>
        public bool @out{get;set;}
        /// <summary>
        /// True to reverse the animation direction. For example, if the animation direction was set to 'left', it would
        /// then use 'right'.
        /// </summary>
        public bool reverse{get;set;}
        /// <summary>
        /// Scope to run the {@link #before} function in.
        /// </summary>
        public object scope{get;set;}
        /// <summary>
        /// An object of CSS values which the animation ends with. If you define a CSS property here, you must also
        /// define it in the {@link #from} config.
        /// </summary>
        public object to{get;set;}
    }
    #endregion
    #region anims
    [JsType(JsMode.Prototype, Export=false)]
    public partial class anims
    {
        public anims(){}
    }
    #endregion
    #region apply
    /// <summary>
    /// Copies all the properties of config to the specified object.
    /// Note that if recursive merging and cloning without referencing the original objects / arrays is needed, use
    /// {@link Ext.Object#merge} instead.
    /// @param {Object} object The receiver of the properties
    /// @param {Object} config The source of the properties
    /// @param {Object} defaults A different object that will also be applied for default values
    /// @return {Object} returns obj
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class apply
    {
        public apply(){}
        /// <summary>
        /// Copies all the properties of config to the specified object.
        /// Note that if recursive merging and cloning without referencing the original objects / arrays is needed, use
        /// {@link Ext.Object#merge} instead.
        /// @param {Object} object The receiver of the properties
        /// @param {Object} config The source of the properties
        /// @param {Object} defaults A different object that will also be applied for default values
        /// @return {Object} returns obj
        /// </summary>
        public apply(object @object, object config, object defaults){}
    }
    #endregion
    #region Audio
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Audio
    {
        public Audio(AudioConfig config){}
        public Audio(){}
        public void getTemplate(){}
        public void onActivate(){}
        public void onDeactivate(){}
        /// <summary>
        /// {@link Ext.Audio} is a simple class which provides a container for the [HTML5 Audio element](http://www.w3schools.com/html5/tag_audio.asp).
        /// ## Recommended File Types/Compression:
        /// * Uncompressed WAV and AIF audio
        /// * MP3 audio
        /// * AAC-LC
        /// * HE-AAC audio
        /// *
        /// ## Notes
        /// On Android devices, the audio tags controls do not show. You must use the {@link #play}, {@link #pause} and
        /// {@link #toggle} methods to control the audio (example below).
        /// ## Examples
        /// Here is an example of the {@link Ext.Audio} component in a fullscreen container:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: {
        /// type : 'vbox',
        /// pack : 'center',
        /// align: 'stretch'
        /// },
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// title : 'Ext.Audio'
        /// },
        /// {
        /// xtype: 'audio',
        /// url  : 'touch/examples/audio/crash.mp3'
        /// }
        /// ]
        /// });
        /// You can also set the {@link #hidden} configuration of the {@link Ext.Audio} component to true by default, and then control the audio by using the {@link #play}, {@link #pause} and {@link #toggle} methods:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: {
        /// type: 'vbox',
        /// pack: 'center'
        /// },
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// title : 'Ext.Audio'
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// defaults: {
        /// xtype: 'button',
        /// handler: function() {
        /// var container = this.getParent().getParent(),
        /// // use ComponentQuery to get the audio component (using its xtype)
        /// audio = container.down('audio');
        /// audio.toggle();
        /// this.setText(audio.isPlaying() ? 'Pause' : 'Play');
        /// }
        /// },
        /// items: [
        /// { text: 'Play', flex: 1 }
        /// ]
        /// },
        /// {
        /// html: 'Hidden audio!',
        /// styleHtmlContent: true
        /// },
        /// {
        /// xtype : 'audio',
        /// hidden: true,
        /// url   : 'touch/examples/audio/crash.mp3'
        /// }
        /// ]
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// {@link Ext.Audio} is a simple class which provides a container for the [HTML5 Audio element](http://www.w3schools.com/html5/tag_audio.asp).
        /// ## Recommended File Types/Compression:
        /// * Uncompressed WAV and AIF audio
        /// * MP3 audio
        /// * AAC-LC
        /// * HE-AAC audio
        /// *
        /// ## Notes
        /// On Android devices, the audio tags controls do not show. You must use the {@link #play}, {@link #pause} and
        /// {@link #toggle} methods to control the audio (example below).
        /// ## Examples
        /// Here is an example of the {@link Ext.Audio} component in a fullscreen container:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: {
        /// type : 'vbox',
        /// pack : 'center',
        /// align: 'stretch'
        /// },
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// title : 'Ext.Audio'
        /// },
        /// {
        /// xtype: 'audio',
        /// url  : 'touch/examples/audio/crash.mp3'
        /// }
        /// ]
        /// });
        /// You can also set the {@link #hidden} configuration of the {@link Ext.Audio} component to true by default, and then control the audio by using the {@link #play}, {@link #pause} and {@link #toggle} methods:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: {
        /// type: 'vbox',
        /// pack: 'center'
        /// },
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// title : 'Ext.Audio'
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// defaults: {
        /// xtype: 'button',
        /// handler: function() {
        /// var container = this.getParent().getParent(),
        /// // use ComponentQuery to get the audio component (using its xtype)
        /// audio = container.down('audio');
        /// audio.toggle();
        /// this.setText(audio.isPlaying() ? 'Pause' : 'Play');
        /// }
        /// },
        /// items: [
        /// { text: 'Play', flex: 1 }
        /// ]
        /// },
        /// {
        /// html: 'Hidden audio!',
        /// styleHtmlContent: true
        /// },
        /// {
        /// xtype : 'audio',
        /// hidden: true,
        /// url   : 'touch/examples/audio/crash.mp3'
        /// }
        /// ]
        /// });
        /// *
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region AudioConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AudioConfig
    {
        public AudioConfig(){}
        /// <summary>
        /// The location of the audio to play.
        /// ### Recommended file types are:
        /// * Uncompressed WAV and AIF audio
        /// * MP3 audio
        /// * AAC-LC
        /// * HE-AAC audio
        /// @accessor
        /// @markdown
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region bind
    /// <summary>
    /// @method
    /// @member Ext
    /// @alias Ext.Function#bind
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class bind
    {
        public bind(){}
    }
    #endregion
    #region buildSettings
    [JsType(JsMode.Prototype, Export=false)]
    public partial class buildSettings
    {
        public buildSettings(){}
    }
    #endregion
    #region Button
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Button
    {
        public Button(ButtonConfig config){}
        public Button(){}
        public void applyAutoEvent(object autoEvent){}
        public void applyPressedDelay(object delay){}
        public void doRelease(object e){}
        /// <summary>
        /// @private
        /// </summary>
        public void doTap(){}
        public void initialize(){}
        public void onPress(){}
        public void onRelease(object e){}
        public void onTap(object e){}
        public void refreshIconAlign(){}
        public void refreshIconMask(){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateAutoEvent(object autoEvent){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateBadgeCls(object badgeCls, object oldBadgeCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateBadgeText(object badgeText){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateHasBadgeCls(object hasBadgeCls, object oldHasBadgeCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateIcon(object icon){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateIconAlign(object alignment, object oldAlignment){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateIconCls(object iconCls, object oldIconCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateIconMask(object iconMask){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateIconMaskCls(object iconMaskCls, object oldIconMaskCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateLabelCls(object labelCls, object oldLabelCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updatePressedCls(object pressedCls, object oldPressedCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateText(object text){}
        /// <summary>
        /// {@link Ext.Button} is a simple class to display a button in Sencha Touch. There are various different styles of {@link Ext.Button} you can create
        /// by using the {@link #icon}, {@link #iconCls}, {@link #iconAlign}, {@link #iconMask}, {@link #ui}, and {@link #text} configurations.
        /// ### Simple Button
        /// Here is an {@link Ext.Button} is it's simplist form:
        /// var button = Ext.create('Ext.Button', {
        /// text: 'Button'
        /// });
        /// ### Icons
        /// You can also create a {@link Ext.Button} with just an icon using the {@link #iconCls}: configuration:
        /// var iconButton = Ext.create('Ext.Button', {
        /// iconCls: 'refresh',
        /// iconMask: true
        /// });
        /// Note that the {@link #iconMask} configuration is required when you want to use any of the bundled Pictos icons.
        /// Here are the included icons available (if {@link Global_CSS#$include-default-icons $include-default-icons} is set to true):
        /// - action
        /// - add
        /// - arrow_down
        /// - arrow_left
        /// - arrow_right
        /// - arrow_up
        /// - compose
        /// - delete
        /// - organize
        /// - refresh
        /// - reply
        /// - search
        /// - settings
        /// - star
        /// - trash
        /// - maps
        /// - locate
        /// - home
        /// ### Badges
        /// Buttons can also have a badge on them, by using the {@link #badgeText} configuration:
        /// var badgedButton = Ext.create('Ext.Button', {
        /// text: 'My Button',
        /// badgeText: '2'
        /// });
        /// ### UI
        /// Buttons also come with a range of different default UIs. Here are the included UIs
        /// available (if {@link #$include-button-uis $include-button-uis} is set to true):
        /// - **normal** a basic gray button
        /// - **back** a back button
        /// - **forward** a forward button
        /// - **round** a round button
        /// - **action** shaded using the {@link Global_CSS#$base-color $base-color} (dark blue by default)
        /// - **decline** red
        /// - **confirm** green
        /// And setting them is very simple:
        /// var uiButton = Ext.create('Ext.Button', {
        /// text: 'My Button',
        /// ui: 'action'
        /// });
        /// And how they look:
        /// @example miniphone preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// padding: 4,
        /// defaults: {
        /// xtype: 'button',
        /// margin: 5
        /// },
        /// layout: {
        /// type: 'vbox',
        /// align: 'center'
        /// },
        /// items: [
        /// { ui: 'normal', text: 'normal' },
        /// { ui: 'round', text: 'round' },
        /// { ui: 'action', text: 'action' },
        /// { ui: 'decline', text: 'decline' },
        /// { ui: 'confirm', text: 'confirm' }
        /// ]
        /// });
        /// Note that the default {@link #ui} is **normal**.
        /// You can also use the {@link #sencha-button-ui sencha-button-ui} CSS Mixin to create your own UIs.
        /// ## Examples
        /// This example shows a bunch of icons on the screen in two toolbars. When you click on the center button, it switches the iconCls on every button
        /// on the page.
        /// @example preview
        /// Ext.createWidget('container', {
        /// fullscreen: true,
        /// layout: {
        /// type: 'vbox',
        /// pack:'center',
        /// align: 'center'
        /// },
        /// items: [
        /// {
        /// xtype: 'button',
        /// text: 'Change iconCls',
        /// handler: function() {
        /// var text = this.getText(), // get the texf this button (change iconCls button), so we know which button we don't want to change
        /// buttons = Ext.ComponentQuery.query('button'), // use ComponentQuery to find all buttons on the page
        /// availableIconCls = ['action', 'add', 'arrow_down', 'arrow_left', 'arrow_right', 'arrow_up', 'compose', 'delete', 'organize', 'refresh', 'reply', 'search', 'settings', 'star', 'trash', 'maps', 'locate', 'home'],
        /// ln = buttons.length,
        /// i, button, index;
        /// // loop through all buttons on the page
        /// for (i = 0; i < ln; i++) {
        /// button = buttons[i];
        /// // if the button is the change iconCls button, continue
        /// if (button.getText() == text) {
        /// continue;
        /// }
        /// // get the index of the new available iconCls
        /// index = availableIconCls.indexOf(button.getIconCls()) + 1;
        /// // update the iconCls of the button with the next iconCls, if one exists. if not, use the first one
        /// button.setIconCls(availableIconCls[(index == availableIconCls.length) ? 0 : index]);
        /// }
        /// }
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'top',
        /// defaults: {
        /// iconMask: true
        /// },
        /// items: [
        /// { xtype: 'spacer' },
        /// { iconCls: 'action' },
        /// { iconCls: 'add' },
        /// { iconCls: 'arrow_down' },
        /// { iconCls: 'arrow_left' },
        /// { iconCls: 'arrow_up' },
        /// { iconCls: 'compose' },
        /// { iconCls: 'delete' },
        /// { iconCls: 'organize' },
        /// { iconCls: 'refresh' },
        /// { xtype: 'spacer' }
        /// ]
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// ui: 'light',
        /// defaults: {
        /// iconMask: true
        /// },
        /// items: [
        /// { xtype: 'spacer' },
        /// { iconCls: 'reply' },
        /// { iconCls: 'search' },
        /// { iconCls: 'settings' },
        /// { iconCls: 'star' },
        /// { iconCls: 'trash' },
        /// { iconCls: 'maps' },
        /// { iconCls: 'locate' },
        /// { iconCls: 'home' },
        /// { xtype: 'spacer' }
        /// ]
        /// }
        /// ]
        /// });
        /// </summary>
        public JsString extend{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region ButtonConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ButtonConfig
    {
        public ButtonConfig(){}
        /// <summary>
        /// Optional event name that will be fired instead of 'tap' when the Button is tapped on
        /// @accessor
        /// </summary>
        public JsString autoEvent{get;set;}
        /// <summary>
        /// The CSS class to add to the Button's badge, if it has one
        /// @accessor
        /// </summary>
        public JsString badgeCls{get;set;}
        /// <summary>
        /// Optional badge text
        /// @accessor
        /// </summary>
        public JsString badgeText{get;set;}
        /// <summary>
        /// The handler function to run when the Button is tapped on
        /// @accessor
        /// </summary>
        public JsAction handler{get;set;}
        /// <summary>
        /// The CSS class to add to the Button if it has a badge (note that this goes on the
        /// Button element itself, not on the badge element)
        /// @private
        /// @accessor
        /// </summary>
        public JsString hasBadgeCls{get;set;}
        /// <summary>
        /// Url to the icon image to use if you want an icon to appear on your button
        /// @accessor
        /// </summary>
        public JsString icon{get;set;}
        /// <summary>
        /// The position within the Button to render the icon
        /// @accessor
        /// </summary>
        public JsString iconAlign{get;set;}
        /// <summary>
        /// Optional CSS class to add to the icon element. This is useful if you want to use a CSS
        /// background image to create your Button icon
        /// @accessor
        /// </summary>
        public JsString iconCls{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool iconMask{get;set;}
        /// <summary>
        /// The CSS class to add to the icon element as allowed by {@link #iconMask}
        /// @accessor
        /// </summary>
        public JsString iconMaskCls{get;set;}
        /// <summary>
        /// The CSS class to add to the field's label element
        /// @accessor
        /// </summary>
        public JsString labelCls{get;set;}
        /// <summary>
        /// The CSS class to add to the Button when it is pressed
        /// @accessor
        /// </summary>
        public JsString pressedCls{get;set;}
        /// <summary>
        /// The scope to fire the configured {@link #handler} in. Optional
        /// @accessor
        /// </summary>
        public object scope{get;set;}
        /// <summary>
        /// The Button text
        /// @accessor
        /// </summary>
        public JsString text{get;set;}
        /// <summary>
        /// The ui style to render this button with. The valid default options are:  'normal', 'back', 'round', 'action', and 'forward'.
        /// @accessor
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region Component
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Component : AbstractComponent
    {
        public Component(){}
        public Component(ComponentConfig config){}
        /// <summary>
        /// Adds a CSS class (or classes) to this Component's rendered element
        /// @param {String} cls The CSS class to add
        /// @param {String} prefix Optional prefix to add to each class
        /// @param {String} suffix Optional suffix to add to each class
        /// </summary>
        public void addCls(JsString cls, JsString prefix, JsString suffix){}
        public void alignTo(object alignTo, object anchor, object offset){}
        public void applyBaseCls(object baseCls){}
        public void applyBottom(object bottom){}
        public void applyCentered(object centered){}
        public void applyDisabled(object disabled){}
        public void applyDocked(object docked){}
        public void applyDraggable(object config){}
        public void applyHidden(object hidden){}
        public void applyLeft(object left){}
        public void applyRight(object right){}
        public void applyTop(object top){}
        /// <summary>
        /// @private
        /// </summary>
        public void applyTpl(object config){}
        /// <summary>
        /// Creates new Component.
        /// @param {Object} config The standard configuration object.
        /// </summary>
        public Component(object config){}
        /// <summary>
        /// Destroys this Component. If it is currently added to a Container it will first be removed from that Container.
        /// All Ext.Element references are also deleted and the Component is de-registered from Ext.ComponentManager
        /// </summary>
        public void destroy(){}
        /// <summary>
        /// Disables this Component
        /// </summary>
        public void disable(){}
        public void doAnchorXY(object anchor, object box, object toBox, object constrainBox){}
        public void doSetBottom(object bottom){}
        public void doSetDisabled(object disabled){}
        public void doSetHeight(object height){}
        public void doSetHidden(object hidden){}
        public void doSetLeft(object left){}
        public void doSetRight(object right){}
        public void doSetTop(object top){}
        public void doSetWidth(object width){}
        /// <summary>
        /// Enables this Component
        /// </summary>
        public void enable(){}
        public void filterPositionValue(object value){}
        public void getDraggable(){}
        public void getDraggableBehavior(){}
        /// <summary>
        /// Retrieves the top level element representing this component.
        /// @return {Ext.dom.Element}
        /// </summary>
        public void getEl(){}
        public void getElementConfig(){}
        public void getInnerHtmlElement(){}
        public void getItemId(){}
        /// <summary>
        /// Returns the height and width of the Component
        /// @return {Object} The current height and width of the Component
        /// </summary>
        public object getSize(){return null;}
        public void getTemplate(){}
        /// <summary>
        /// <p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
        /// available xtypes, see the {@link Ext.Component} header.</p>
        /// <p><b>If using your own subclasses, be aware that a Component must register its own xtype
        /// to participate in determination of inherited xtypes.</b></p>
        /// <p>Example usage:</p>
        /// <pre><code>
        /// var t = new Ext.field.Text();
        /// alert(t.getXTypes());  // alerts 'component/field/textfield'
        /// </code></pre>
        /// @return {String} The xtype hierarchy string
        /// </summary>
        public JsString getXTypes(){return null;}
        /// <summary>
        /// Hides this Component
        /// </summary>
        public void hide(){}
        public void isCentered(){}
        /// <summary>
        /// Returns true if this Component is currently disabled
        /// @return {Boolean} True if currently disabled
        /// </summary>
        public bool isDisabled(){return false;}
        public void isDocked(){}
        public void isFloating(){}
        /// <summary>
        /// Returns true if this Component is currently hidden
        /// @return {Boolean} True if currently hidden
        /// </summary>
        public bool isHidden(){return false;}
        public void isInnerItem(){}
        /// <summary>
        /// @private
        /// </summary>
        public void isPainted(){}
        /// <summary>
        /// @private
        /// </summary>
        public void isRendered(){}
        /// <summary>
        /// <p>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
        /// from the xtype (default) or whether it is directly of the xtype specified (shallow = true).</p>
        /// <p><b>If using your own subclasses, be aware that a Component must register its own xtype
        /// to participate in determination of inherited xtypes.</b></p>
        /// <p>For a list of all available xtypes, see the {@link Ext.Component} header.</p>
        /// <p>Example usage:</p>
        /// <pre><code>
        /// var t = new Ext.field.Text();
        /// var isText = t.isXType('textfield');        // true
        /// var isBoxSubclass = t.isXType('field');       // true, descended from Ext.field.Field
        /// var isBoxInstance = t.isXType('field', true); // false, not a direct Ext.field.Field instance
        /// </code></pre>
        /// @param {String} xtype The xtype to check for this Component
        /// @param {Boolean} shallow (optional) False to check whether this Component is descended from the xtype (this is
        /// the default), or true to check whether this Component is directly of the specified xtype.
        /// @return {Boolean} True if this component descends from the specified xtype, false otherwise.
        /// </summary>
        public bool isXType(JsString xtype, bool shallow){return false;}
        public void mask(object msg, object msgCls, object loadingMask){}
        /// <summary>
        /// Removes the given CSS class(es) from this Component's rendered element
        /// @param {String} cls The class(es) to remove
        /// @param {String} prefix Optional prefix to prepend before each class
        /// @param {String} suffix Optional suffix to append to each class
        /// </summary>
        public void removeCls(JsString cls, JsString prefix, JsString suffix){}
        public void renderTo(object container, object insertBeforeElement){}
        public void replaceCls(object oldCls, object newCls, object prefix, object suffix){}
        public void resetFloating(){}
        public void setParent(object parent){}
        public void setRendered(object rendered){}
        /// <summary>
        /// Sets the size of the Component
        /// @param {Number} width The new width for the Component
        /// @param {Number} height The new height for the Component
        /// </summary>
        public void setSize(JsNumber width, JsNumber height){}
        /// <summary>
        /// Shows this component
        /// </summary>
        public void show(){}
        /// <summary>
        /// Shows this Component next to another Component or Element
        /// @param {Ext.Component/Ext.Element} alignTo The Element or Component to align to
        /// </summary>
        public void showBy(object alignTo, object animation, object anchor){}
        public void unmask(){}
        /// <summary>
        /// <p>Walks up the <code>ownerCt</code> axis looking for an ancestor Container which matches
        /// the passed simple selector.</p>
        /// <p>Example:<pre><code>
        /// var owningTabPanel = grid.up('tabpanel');
        /// </code></pre>
        /// @param {String} selector Optional. The simple selector to test.
        /// @return {Ext.Container} The matching ancestor Container (or <code>undefined</code> if no match was found).
        /// </summary>
        public Container up(JsString selector){return null;}
        public void updateBaseCls(object newBaseCls, object oldBaseCls){}
        public void updateBorder(object border){}
        public void updateCls(object cls, object oldCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateData(object newData){}
        public void updateFloating(){}
        public void updateHtml(object html){}
        public void updateLoadingMask(object newLoadingMask){}
        public void updateMargin(object margin){}
        public void updateMasked(object newMasked){}
        public void updateMaskText(object newMaskText){}
        public void updatePadding(object padding){}
        public void updateRenderTo(object newContainer){}
        public void updateStyle(object style){}
        /// <summary>
        /// Updates the {@link #styleHtmlCls} configuration
        /// </summary>
        public void updateStyleHtmlCls(object newHtmlCls, object oldHtmlCls){}
        public void updateStyleHtmlContent(object styleHtmlContent){}
        public void updateUi(object newUi, object oldUi){}
        public void updateZIndex(object zIndex){}
        public JsString alternateClassName{get;set;}
        public JsRegExp anchorRe{get;set;}
        public object element{get;set;}
        /// <summary>
        /// Most of the visual classes you interact with in Sencha Touch are Components. Every Component in Sencha Touch is a
        /// subclass of Ext.Component, which means they can all:
        /// * Render themselves onto the page using a template
        /// * Show and hide themselves at any time
        /// * Center themselves on the screen
        /// * Enable and disable themselves
        /// They can also do a few more advanced things:
        /// * Float above other components (windows, message boxes and overlays)
        /// * Change size and position on the screen with animation
        /// * Dock other Components inside itself (useful for toolbars)
        /// * Align to other components, allow themselves to be dragged around, make their content scrollable & more
        /// ## Available Components
        /// There are many components available in Sencha Touch, separated into 4 main groups:
        /// ### Navigation components
        /// * {@link Ext.Toolbar}
        /// * {@link Ext.Button}
        /// * {@link Ext.NavigationBar}
        /// * {@link Ext.SegmentedButton}
        /// * {@link Ext.Title}
        /// * {@link Ext.Spacer}
        /// *
        /// ### Store-bound components
        /// * {@link Ext.dataview.DataView}
        /// * {@link Ext.dataview.ComponentView}
        /// * {@link Ext.Carousel}
        /// * {@link Ext.List}
        /// * {@link Ext.NestedList}
        /// *
        /// ### Form components
        /// * {@link Ext.form.Panel}
        /// * {@link Ext.form.FieldSet}
        /// * {@link Ext.field.Checkbox}
        /// * {@link Ext.field.Hidden}
        /// * {@link Ext.field.Slider}
        /// * {@link Ext.field.Text}
        /// * {@link Ext.form.Label}
        /// * {@link Ext.picker.Picker}
        /// * {@link Ext.picker.Date}
        /// *
        /// ### General components
        /// * {@link Ext.Panel}
        /// * {@link Ext.tab.Panel}
        /// * {@link Ext.viewport.Viewport Ext.Viewport}
        /// * {@link Ext.Img}
        /// * {@link Ext.Map}
        /// * {@link Ext.Audio}
        /// * {@link Ext.Video}
        /// * {@link Ext.Sheet}
        /// * {@link Ext.ActionSheet}
        /// * {@link Ext.MessageBox}
        /// ## Instantiating Components
        /// Components are created the same way as all other classes in Sencha Touch - using Ext.create. Here's how we can
        /// create a Text field:
        /// var panel = Ext.create('Ext.Panel', {
        /// html: 'This is my panel'
        /// });
        /// This will create a {@link Ext.Panel Panel} instance, configured with some basic HTML content. A Panel is just a
        /// simple Component that can render HTML and also contain other items. In this case we've created a Panel instance but
        /// it won't show up on the screen yet because items are not rendered immediately after being instantiated. This allows
        /// us to create some components and move them around before rendering and laying them out, which is a good deal faster
        /// than moving them after rendering.
        /// To show this panel on the screen now we can simply add it to the global Viewport:
        /// Ext.Viewport.add(panel);
        /// Panels are also Containers, which means they can contain other Components, arranged by a layout. Let's revisit the
        /// above example now, this time creating a panel with two child Components and a hbox layout:
        /// @example
        /// var panel = Ext.create('Ext.Panel', {
        /// layout: 'hbox',
        /// items: [
        /// {
        /// xtype: 'panel',
        /// flex: 1,
        /// html: 'Left Panel, 1/3rd of total size',
        /// style: 'background-color: #5E99CC;'
        /// },
        /// {
        /// xtype: 'panel',
        /// flex: 2,
        /// html: 'Right Panel, 2/3rds of total size',
        /// style: 'background-color: #759E60;'
        /// }
        /// ]
        /// });
        /// Ext.Viewport.add(panel);
        /// This time we created 3 Panels - the first one is created just as before but the inner two are declared inline using
        /// an xtype. Xtype is a convenient way of creating Components without having to go through the process of using
        /// Ext.create and specifying the full class name, instead you can just provide the xtype for the class inside an object
        /// and the framework will create the components for you.
        /// We also specified a layout for the top level panel - in this case hbox, which splits the horizontal width of the
        /// parent panel based on the 'flex' of each child. For example, if the parent Panel above is 300px wide then the first
        /// child will be flexed to 100px wide and the second to 200px because the first one was given flex: 1 and the second
        /// flex: 2.
        /// ## Configuring Components
        /// Whenever you create a new Component you can pass in configuration options. All of the configurations for a given
        /// Component are listed in the "Config options" section of its class docs page. You can pass in any number of
        /// configuration options when you instantiate the Component, and modify any of them at any point later. For example, we
        /// can easily modify the {@link Ext.Panel#html html content} of a Panel after creating it:
        /// @example miniphone
        /// //we can configure the HTML when we instantiate the Component
        /// var panel = Ext.create('Ext.Panel', {
        /// fullscreen: true,
        /// html: 'This is a Panel'
        /// });
        /// //we can update the HTML later using the setHtml method:
        /// panel.setHtml('Some new HTML');
        /// //we can retrieve the current HTML using the getHtml method:
        /// alert(panel.getHtml()); //alerts "Some new HTML"
        /// Every config has a getter method and a setter method - these are automatically generated and always follow the same
        /// pattern. For example, a config called 'html' will receive getHtml and setHtml methods, a config called defaultType
        /// will receive getDefaultType and setDefaultType methods, and so on.
        /// ## Further Reading
        /// See the [Component & Container Guide](#!/guide/components) for more information, and check out the
        /// {@link Ext.Container} class docs also.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public bool floating{get;set;}
        public object innerElement{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public bool isComponent{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public bool loadingMask{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public object maskText{get;set;}
        public JsString observableType{get;set;}
        [JsProperty]
        public object Parent{private get;[JsMethod(Name="setParent")]set;}
        /// <summary>
        /// @private
        /// </summary>
        public bool rendered{get;set;}
        [JsProperty]
        public object Rendered{private get;[JsMethod(Name="setRendered")]set;}
        /// <summary>
        /// Returns the height and width of the Component
        /// @return {Object} The current height and width of the Component
        /// </summary>
        [JsProperty]
        public object Size{[JsMethod(Name="getSize")]get;private set;}
        public JsString xtype{get;set;}
        /// <summary>
        /// <p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
        /// available xtypes, see the {@link Ext.Component} header.</p>
        /// <p><b>If using your own subclasses, be aware that a Component must register its own xtype
        /// to participate in determination of inherited xtypes.</b></p>
        /// <p>Example usage:</p>
        /// <pre><code>
        /// var t = new Ext.field.Text();
        /// alert(t.getXTypes());  // alerts 'component/field/textfield'
        /// </code></pre>
        /// @return {String} The xtype hierarchy string
        /// </summary>
        [JsProperty]
        public JsString XTypes{[JsMethod(Name="getXTypes")]get;private set;}
    }
    #endregion
    #region ComponentConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ComponentConfig
    {
        public ComponentConfig(){}
        /// <summary>
        /// The base CSS class to apply to this components's element. This will also be prepended to
        /// other elements within this component. To add specific styling for sub-classes, use the `cls` config.
        /// @accessor
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// The border to use on this Component. Can be specified as a number (in which
        /// case all edges get the same border width) or a CSS string like '5 10 10 10'
        /// @accessor
        /// </summary>
        public object border{get;set;}
        /// <summary>
        /// @accessor
        /// @evented
        /// </summary>
        public object bottom{get;set;}
        /// <summary>
        /// Whether or not this component is absolutely centered inside its container
        /// @accessor
        /// @evented
        /// </summary>
        public bool centered{get;set;}
        /// <summary>
        /// the CSS class to add to this component's element, in addition to the `baseCls`
        /// @accessor
        /// </summary>
        public JsString cls{get;set;}
        /// <summary>
        /// The initial set of data to apply to the <code>{@link #tpl}</code> to
        /// update the content area of the Component.
        /// @accessor
        /// </summary>
        public object data{get;set;}
        /// <summary>
        /// Whether or not this component is disabled
        /// @accessor
        /// @evented
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// The CSS class to add to the component when it is disabled
        /// @accessor
        /// </summary>
        public JsString disabledCls{get;set;}
        /// <summary>
        /// The dock position of this component in its container. Can be 'left', 'top', 'right' or 'bottom'.
        /// @accessor
        /// @evented
        /// </summary>
        public JsString docked{get;set;}
        /// <summary>
        /// Configuration options to make this Component draggable
        /// @accessor
        /// </summary>
        public object draggable{get;set;}
        /// <summary>
        /// Configuration options to make this Component droppable
        /// @accessor
        /// </summary>
        public object droppable{get;set;}
        /// <summary>
        /// </summary>
        public JsNumber flex{get;set;}
        /// <summary>
        /// @deprecated 2.0.0 Please use Ext.Viewport.add instead
        /// </summary>
        public bool fullscreen{get;set;}
        /// <summary>
        /// The height of this component in pixels.
        /// @accessor
        /// @evented
        /// </summary>
        public JsNumber height{get;set;}
        /// <summary>
        /// True to hide this component
        /// @accessor
        /// </summary>
        public bool hidden{get;set;}
        /// <summary>
        /// When using a {@link #modal} Component, setting this to true (the default) will
        /// hide the modal mask and the Component when the mask is tapped on
        /// @accessor
        /// </summary>
        public bool hideOnMaskTap{get;set;}
        /// <summary>
        /// Optional HTML content to render inside this Component
        /// @accessor
        /// </summary>
        public JsString html{get;set;}
        /// <summary>
        /// @accessor
        /// @evented
        /// </summary>
        public object left{get;set;}
        /// <summary>
        /// The margin to use on this Component. Can be specified as a number (in which case
        /// all edges get the same margin) or a CSS string like '5 10 10 10'
        /// @accessor
        /// </summary>
        public object margin{get;set;}
        /// <summary>
        /// True to mask this component.
        /// @accessor
        /// </summary>
        public bool masked{get;set;}
        /// <summary>
        /// True to make this Component modal. This will create a mask underneath the Component
        /// that covers the whole page and does not allow the user to interact with any other Components until this
        /// Component is dismissed
        /// @accessor
        /// </summary>
        public bool modal{get;set;}
        /// <summary>
        /// The padding to use on this Component. Can be specified as a number (in which
        /// case all edges get the same padding) or a CSS string like '5 10 10 10'
        /// @accessor
        /// </summary>
        public object padding{get;set;}
        /// <summary>
        /// Optional element to render this Component to. Usually this is not needed because
        /// a Component is normally full screen or automatically rendered inside another {@link Ext.Container Container}
        /// @accessor
        /// </summary>
        public object renderTo{get;set;}
        /// <summary>
        /// <p>An {@link Ext.XTemplate XTemplate} used to create the internal structure inside this Component's
        /// encapsulating Element.</p>
        /// <p>You do not normally need to specify this. For the base classes {@link Ext.Component}
        /// and {@link Ext.Container}, this defaults to <b><code>null</code></b> which means that they will be initially rendered
        /// with no internal structure; they render their {@link #getEl Element} empty. The more specialized ExtJS and Touch classes
        /// which use a more complex DOM structure, provide their own template definitions.</p>
        /// <p>This is intended to allow the developer to create application-specific utility Components with customized
        /// internal structure.</p>
        /// @accessor
        /// </summary>
        public object renderTpl{get;set;}
        /// <summary>
        /// @accessor
        /// @evented
        /// </summary>
        public object right{get;set;}
        /// <summary>
        /// Optional CSS styles that will be rendered into an inline style attribute when the
        /// Component is rendered
        /// @accessor
        /// </summary>
        public object style{get;set;}
        /// <summary>
        /// The class that is added to the content target when you set styleHtmlContent to true.
        /// @accessor
        /// </summary>
        public JsString styleHtmlCls{get;set;}
        /// <summary>
        /// True to automatically style the html inside the content target of this component (body for panels).
        /// @accessor
        /// </summary>
        public bool styleHtmlContent{get;set;}
        /// <summary>
        /// @accessor
        /// @evented
        /// </summary>
        public object top{get;set;}
        /// <summary>
        /// An <bold>{@link Ext.Template}</bold>, <bold>{@link Ext.XTemplate}</bold>
        /// or an array of strings to form an Ext.XTemplate.
        /// Used in conjunction with the <code>{@link #data}</code> and
        /// <code>{@link #tplWriteMode}</code> configurations.
        /// @accessor
        /// </summary>
        public object tpl{get;set;}
        /// <summary>
        /// The Ext.(X)Template method to use when
        /// updating the content area of the Component. Defaults to <code>'overwrite'</code>
        /// (see <code>{@link Ext.XTemplate#overwrite}</code>).
        /// @accessor
        /// </summary>
        public JsString tplWriteMode{get;set;}
        /// <summary>
        /// The ui to be used on this Component
        /// </summary>
        public JsString ui{get;set;}
        /// <summary>
        /// The width of this component in pixels.
        /// @accessor
        /// @evented
        /// </summary>
        public JsNumber width{get;set;}
        /// <summary>
        /// The z-index to give this Component when it is rendered
        /// @accessor
        /// </summary>
        public JsNumber zIndex{get;set;}
    }
    #endregion
    #region ComponentManager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentManager
    {
        public ComponentManager(){}
        /// <summary>
        /// Creates a new Component from the specified config object using the
        /// config object's xtype to determine the class to instantiate.
        /// @param {Object} config A configuration object for the Component you wish to create.
        /// @param {Function} defaultType (optional) The constructor to provide the default Component type if
        /// the config object does not contain a <code>xtype</code>. (Optional if the config contains a <code>xtype</code>).
        /// @return {Ext.Component} The newly instantiated Component.
        /// </summary>
        public Component create(object component, JsAction defaultType){return null;}
        /// <summary>
        /// Returns an item by id.
        /// For additional details see {@link Ext.util.HashMap#get}.
        /// @param {String} id The id of the item
        /// @return {Object} The item, undefined if not found.
        /// </summary>
        public object get(JsString id){return null;}
        /// <summary>
        /// Checks if an item type is registered.
        /// @param {String} component The mnemonic string by which the class may be looked up
        /// @return {Boolean} Whether the type is registered.
        /// </summary>
        public bool isRegistered(JsString component){return false;}
        /// <summary>
        /// Registers an item to be managed
        /// @param {Object} component The item to register
        /// </summary>
        public void register(object component){}
        /// <summary>
        /// Unregisters an item by removing it from this manager
        /// @param {Object} component The item to unregister
        /// </summary>
        public void unregister(object component){}
        /// <summary>
        /// @private
        /// *
        /// <p>Provides a registry of all Components (instances of {@link Ext.Component} or any subclass
        /// thereof) on a page so that they can be easily accessed by {@link Ext.Component component}
        /// {@link Ext.Component#getId id} (see {@link #get}, or the convenience method {@link Ext#getCmp Ext.getCmp}).</p>
        /// <p>This object also provides a registry of available Component <i>classes</i>
        /// indexed by a mnemonic code known as the Component's `xtype`.
        /// The <code>xtype</code> provides a way to avoid instantiating child Components
        /// when creating a full, nested config object for a complete Ext page.</p>
        /// <p>A child Component may be specified simply as a <i>config object</i>
        /// as long as the correct `xtype` is specified so that if and when the Component
        /// needs rendering, the correct type can be looked up for lazy instantiation.</p>
        /// <p>For a list of all available `xtype`, see {@link Ext.Component}.</p>
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @private
        /// *
        /// <p>Provides a registry of all Components (instances of {@link Ext.Component} or any subclass
        /// thereof) on a page so that they can be easily accessed by {@link Ext.Component component}
        /// {@link Ext.Component#getId id} (see {@link #get}, or the convenience method {@link Ext#getCmp Ext.getCmp}).</p>
        /// <p>This object also provides a registry of available Component <i>classes</i>
        /// indexed by a mnemonic code known as the Component's `xtype`.
        /// The <code>xtype</code> provides a way to avoid instantiating child Components
        /// when creating a full, nested config object for a complete Ext page.</p>
        /// <p>A child Component may be specified simply as a <i>config object</i>
        /// as long as the correct `xtype` is specified so that if and when the Component
        /// needs rendering, the correct type can be looked up for lazy instantiation.</p>
        /// <p>For a list of all available `xtype`, see {@link Ext.Component}.</p>
        /// </summary>
        public bool singleton{get;set;}
    }
    #endregion
    #region ComponentQuery
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentQuery
    {
        public ComponentQuery(){}
        /// <summary>
        /// @class Ext.ComponentQuery
        /// @extends Object
        /// @singleton
        /// *
        /// Provides searching of Components within Ext.ComponentManager (globally) or a specific
        /// Ext.container.Container on the document with a similar syntax to a CSS selector.
        /// *
        /// Components can be retrieved by using their {@link Ext.Component xtype} with an optional . prefix
        /// *
        /// - `component` or `.component`
        /// - `gridpanel` or `.gridpanel`
        /// *
        /// An itemId or id must be prefixed with a #
        /// *
        /// - `#myContainer`
        /// *
        /// Attributes must be wrapped in brackets
        /// *
        /// - `component[autoScroll]`
        /// - `panel[title="Test"]`
        /// *
        /// Member expressions from candidate Components may be tested. If the expression returns a *truthy* value,
        /// the candidate Component will be included in the query:
        /// *
        /// var disabledFields = myFormPanel.query("{isDisabled()}");
        /// *
        /// Pseudo classes may be used to filter results in the same way as in {@link Ext.DomQuery DomQuery}:
        /// *
        /// // Function receives array and returns a filtered array.
        /// Ext.ComponentQuery.pseudos.invalid = function(items) {
        /// var i = 0, l = items.length, c, result = [];
        /// for (; i < l; i++) {
        /// if (!(c = items[i]).isValid()) {
        /// result.push(c);
        /// }
        /// }
        /// return result;
        /// };
        /// var invalidFields = myFormPanel.query('field:invalid');
        /// if (invalidFields.length) {
        /// invalidFields[0].getEl().scrollIntoView(myFormPanel.body);
        /// for (var i = 0, l = invalidFields.length; i < l; i++) {
        /// invalidFields[i].getEl().frame("red");
        /// }
        /// }
        /// *
        /// Default pseudos include:
        /// *
        /// - not
        /// *
        /// Queries return an array of components.
        /// Here are some example queries.
        /// *
        /// // retrieve all Ext.Panels in the document by xtype
        /// var panelsArray = Ext.ComponentQuery.query('panel');
        /// *
        /// // retrieve all Ext.Panels within the container with an id myCt
        /// var panelsWithinmyCt = Ext.ComponentQuery.query('#myCt panel');
        /// *
        /// // retrieve all direct children which are Ext.Panels within myCt
        /// var directChildPanel = Ext.ComponentQuery.query('#myCt > panel');
        /// *
        /// // retrieve all grids and trees
        /// var gridsAndTrees = Ext.ComponentQuery.query('gridpanel, treepanel');
        /// *
        /// For easy access to queries based from a particular Container see the {@link Ext.Container#query},
        /// {@link Ext.Container#down} and {@link Ext.Container#child} methods. Also see
        /// {@link Ext.Component#up}.
        /// </summary>
        public bool singleton{get;set;}
    }
    #endregion
    #region Container
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Container : Component
    {
        public Container(){}
        public Container(ContainerConfig config){}
        /// <summary>
        /// Adds one or more Components to this Container. Example:
        /// *
        /// var myPanel = Ext.create('Ext.Panel', {
        /// html: 'This will be added to a Container'
        /// });
        /// *
        /// myContainer.add([myPanel])
        /// *
        /// @param {Array} newItems The new items to add to the Container
        /// </summary>
        public void add(JsArray newItems){}
        /// <summary>
        /// @private
        /// </summary>
        public void applyActiveItem(object item){}
        public void applyDefaults(object defaults){}
        public void applyItems(object items){}
        /// <summary>
        /// @private
        /// </summary>
        public void applyScrollable(object config){}
        /// <summary>
        /// Retrieves the first direct child of this container which matches the passed selector.
        /// The passed in selector must comply with an Ext.ComponentQuery selector.
        /// @param {String} selector An Ext.ComponentQuery selector
        /// @return Ext.Component
        /// </summary>
        public void child(JsString selector){}
        public Container(object config){}
        public void destroy(){}
        /// <summary>
        /// @private
        /// @param item
        /// </summary>
        public void doAdd(object item){}
        /// <summary>
        /// @private
        /// @param index
        /// @param item
        /// </summary>
        public void doInsert(object index, object item){}
        /// <summary>
        /// @private
        /// </summary>
        public void doSetActiveItem(object newActiveItem, object oldActiveItem){}
        /// <summary>
        /// Retrieves the first descendant of this container which matches the passed selector.
        /// The passed in selector must comply with an Ext.ComponentQuery selector.
        /// @param {String} selector An Ext.ComponentQuery selector
        /// @return Ext.Component
        /// </summary>
        public void down(JsString selector){}
        public void factoryItem(object item){}
        public void factoryItemWithDefaults(object item){}
        /// <summary>
        /// Returns the Component for a given index in the Container's {@link #items}
        /// @param {Number} index The index of the Component to return
        /// @return {Ext.Component} The item at the specified index, if found
        /// </summary>
        public Component getAt(JsNumber index){return null;}
        /// <summary>
        /// Examines this container's <code>{@link #items}</code> <b>property</b>
        /// and gets a direct child component of this container.
        /// @param {String/Number} component This parameter may be any of the following:
        /// <div><ul class="mdetail-params">
        /// <li>a <b><code>String</code></b> : representing the <code>itemId</code>
        /// or <code>{@link Ext.Component#getId id}</code> of the child component </li>
        /// <li>a <b><code>Number</code></b> : representing the position of the child component
        /// within the <code>{@link #items}</code> <b>property</b></li>
        /// </ul></div>
        /// <p>For additional information see {@link Ext.util.MixedCollection#get}.
        /// @return Ext.Component The component (if found).
        /// </summary>
        public void getComponent(object component){}
        public void getElementConfig(){}
        /// <summary>
        /// @private
        /// </summary>
        public void getInnerItems(){}
        public void getRefItems(object deep){}
        /// <summary>
        /// @private
        /// </summary>
        public void getScrollable(){}
        /// <summary>
        /// @private
        /// </summary>
        public void getScrollableBehavior(){}
        /// <summary>
        /// @private
        /// </summary>
        public void has(object item){}
        /// <summary>
        /// @private
        /// </summary>
        public void hasInnerItem(object item){}
        /// <summary>
        /// @private
        /// </summary>
        public void indexOf(object item){}
        /// <summary>
        /// Adds a child Component at the given index. For example, here's how we can add a new item, making it the first
        /// child Component of this Container:
        /// *
        /// myContainer.insert(0, {xtype: 'panel', html: 'new item'});
        /// *
        /// @param {Number} index The index to insert the Component at
        /// @param {Object} item The Component to insert
        /// </summary>
        public void insert(JsNumber index, object item){}
        /// <summary>
        /// @private
        /// </summary>
        public void insertAfter(object item, object relativeToItem){}
        /// <summary>
        /// @private
        /// </summary>
        public void insertBefore(object item, object relativeToItem){}
        /// <summary>
        /// @private
        /// </summary>
        public void insertFirst(object item){}
        /// <summary>
        /// @private
        /// @param item
        /// @param index
        /// </summary>
        public void insertInner(object item, object index){}
        /// <summary>
        /// @private
        /// </summary>
        public void insertLast(object item){}
        /// <summary>
        /// @private
        /// </summary>
        public void onAdd(object item, object index){}
        public void onClassExtended(object Class, object members){}
        /// <summary>
        /// Initialize layout and event listeners the very first time an item is added
        /// @private
        /// </summary>
        public void onFirstAdd(){}
        /// <summary>
        /// @private
        /// </summary>
        public void onItemCenteredChange(object item, object centered){}
        /// <summary>
        /// @private
        /// </summary>
        public void onItemDockedChange(object item, object docked, object oldDocked){}
        /// <summary>
        /// @private
        /// </summary>
        public void onItemFloatingChange(object item, object floating){}
        /// <summary>
        /// @private
        /// </summary>
        public void onMove(object item, object toIndex, object fromIndex){}
        /// <summary>
        /// @private
        /// </summary>
        public void onRemove(object item, object index){}
        /// <summary>
        /// Retrieves all descendant components which match the passed selector.
        /// Executes an Ext.ComponentQuery.query using this container as its root.
        /// @param {String} selector Selector complying to an Ext.ComponentQuery selector
        /// @return {Array} Ext.Component's which matched the selector
        /// </summary>
        public JsArray query(JsString selector){return null;}
        /// <summary>
        /// Removes an item from this Container, optionally destroying it
        /// @param {Object} item The item to remove
        /// @param {Boolean} destroy Calls the Component's {@link Ext.Component#destroy destroy} method if true
        /// @return {Ext.Component} this
        /// </summary>
        public Component remove(object item, bool destroy){return null;}
        /// <summary>
        /// Removes all items currently in the Container, optionally destroying them all
        /// @param {Boolean} destroy If true, {@link Ext.Component#destroy destroys} each removed Component
        /// @return {Ext.Component} this
        /// </summary>
        public Component removeAll(bool destroy){return null;}
        /// <summary>
        /// Removes the Component at the specified index:
        /// *
        /// myContainer.removeAt(0); //removes the first item
        /// *
        /// @param {Number} index The index of the Component to remove
        /// </summary>
        public void removeAt(JsNumber index){}
        /// <summary>
        /// @private
        /// @param item
        /// </summary>
        public void removeInner(object item){}
        /// <summary>
        /// @private
        /// </summary>
        public void setRendered(object rendered){}
        public void updateBaseCls(object newBaseCls, object oldBaseCls){}
        public void updateDefaultType(object defaultType){}
        public void updateUseBodyElement(object useBodyElement){}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @class Ext.Container
        /// @extend Ext.Component
        /// A Container has all of the abilities of {@link Ext.Component Component}, but lets you nest other Components inside
        /// it. Applications are made up of lots of components, usually nested inside one another. Containers allow you to
        /// render and arrange child Components inside them. Most apps have a single top-level Container called a Viewport,
        /// which takes up the entire screen. Inside of this are child components, for example in a mail app the Viewport
        /// Container's two children might be a message List and an email preview pane.
        /// Containers give the following extra functionality:
        /// * Adding child Components at instantiation and run time
        /// * Removing child Components
        /// * Specifying a [Layout](#!/guide/layouts)
        /// Layouts determine how the child Components should be laid out on the screen. In our mail app example we'd use an
        /// HBox layout so that we can pin the email list to the left hand edge of the screen and allow the preview pane to
        /// occupy the rest. There are several layouts in Sencha Touch 2, each of which help you achieve your desired
        /// application structure, further explained in the [Layout guide](#!/guide/layouts).
        /// ## Adding Components to Containers
        /// As we mentioned above, Containers are special Components that can have child Components arranged by a Layout. One of
        /// the code samples above showed how to create a Panel with 2 child Panels already defined inside it but it's easy to
        /// do this at run time too:
        /// @example
        /// //this is the Panel we'll be adding below
        /// var aboutPanel = Ext.create('Ext.Panel', {
        /// html: 'About this app'
        /// });
        /// //this is the Panel we'll be adding to
        /// var mainPanel = Ext.create('Ext.Panel', {
        /// fullscreen: true,
        /// layout: 'hbox',
        /// defaults: {
        /// flex: 1
        /// },
        /// items: {
        /// html: 'First Panel',
        /// style: 'background-color: #5E99CC;'
        /// }
        /// });
        /// //now we add the first panel inside the second
        /// mainPanel.add(aboutPanel);
        /// Here we created three Panels in total. First we made the aboutPanel, which we might use to tell the user a little
        /// about the app. Then we create one called mainPanel, which already contains a third Panel in its
        /// {@link Ext.Container#items items} configuration, with some dummy text ("First Panel"). Finally, we add the first
        /// panel to the second by calling the {@link Ext.Container#add add} method on mainPanel.
        /// In this case we gave our mainPanel another hbox layout, but we also introduced some
        /// {@link Ext.Container#defaults defaults}. These are applied to every item in the Panel, so in this case every child
        /// inside mainPanel will be given a flex: 1 configuration. The effect of this is that when we first render the screen
        /// only a single child is present inside mainPanel, so that child takes up the full width available to it. Once the
        /// mainPanel.add line is called though, the aboutPanel is rendered inside of it and also given a flex of 1, which will
        /// cause it and the first panel to both receive half the full width of the mainPanel.
        /// Likewise, it's easy to remove items from a Container:
        /// mainPanel.remove(aboutPanel);
        /// After this line is run everything is back to how it was, with the first child panel once again taking up the full
        /// width inside mainPanel.
        /// ## Further Reading
        /// See the [Component & Container Guide](#!/guide/components) for more information, and check out the
        /// {@link Ext.Container} class docs also.
        /// </summary>
        public JsString extend{get;set;}
        public bool isContainer{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        [JsProperty]
        public object Rendered{private get;[JsMethod(Name="setRendered")]set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region ContainerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ContainerConfig : ComponentConfig
    {
        public ContainerConfig(){}
        /// <summary>
        /// The item from the {@link #items} collection that will be active first. This is
        /// usually only meaningful in a {@link Ext.layout.Card card layout}, where only one item can be active at a
        /// time
        /// @accessor
        /// @evented
        /// </summary>
        public object activeItem{get;set;}
        /// <summary>
        /// If true, child items will be destroyed as soon as they are {@link #remove removed}
        /// from this container
        /// @accessor
        /// </summary>
        public bool autoDestroy{get;set;}
        /// <summary>
        /// A set of default configurations to apply to all child Components in this Container.
        /// It's often useful to specify defaults when creating more than one items with similar configurations. For example here we can
        /// specify that each child is a panel and avoid repeating the xtype declaration for each one:
        /// *
        /// Ext.create('Ext.Container', {
        /// defaults: {
        /// xtype: 'panel'
        /// },
        /// items: [
        /// {
        /// html: 'Panel 1'
        /// },
        /// {
        /// html: 'Panel 2'
        /// }
        /// ]
        /// });
        /// *
        /// @accessor
        /// </summary>
        public object defaults{get;set;}
        /// <summary>
        /// The child items to add to this Container. This is usually an array of Component
        /// configurations or instances, for example:
        /// *
        /// Ext.create('Ext.Container', {
        /// items: [
        /// {
        /// xtype: 'panel',
        /// html: 'This is an item'
        /// }
        /// ]
        /// });
        /// @accessor
        /// </summary>
        public object items{get;set;}
        /// <summary>
        /// Configuration for this Container's layout. Example:
        /// *
        /// Ext.create('Ext.Container', {
        /// layout: {
        /// type: 'hbox',
        /// align: 'middle'
        /// },
        /// items: [
        /// {
        /// xtype: 'panel',
        /// flex: 1,
        /// style: 'background-color: red;'
        /// },
        /// {
        /// xtype: 'panel',
        /// flex: 2,
        /// style: 'background-color: green'
        /// }
        /// ]
        /// });
        /// *
        /// See the layouts guide for more information
        /// *
        /// @accessor
        /// </summary>
        public object layout{get;set;}
        /// <summary>
        /// Configuration options to make this Container scrollable
        /// @accessor
        /// </summary>
        public object scrollable{get;set;}
    }
    #endregion
    #region Date
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Date
    {
        public Date(){}
        /// <summary>
        /// @private
        /// Private for now
        /// </summary>
        public static void toString(object date){}
    }
    #endregion
    #region DateExtras
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DateExtras
    {
        public DateExtras(){}
        /// <summary>
        /// Provides a convenient method for performing basic date arithmetic. This method
        /// does not modify the Date instance being called - it creates and returns
        /// a new Date instance containing the resulting date value.
        /// *
        /// Examples:
        /// <pre><code>
        /// // Basic usage:
        /// var dt = Ext.Date.add(new Date('10/29/2006'), Ext.Date.DAY, 5);
        /// console.log(dt); //returns 'Fri Nov 03 2006 00:00:00'
        /// // Negative values will be subtracted:
        /// var dt2 = Ext.Date.add(new Date('10/1/2006'), Ext.Date.DAY, -5);
        /// console.log(dt2); //returns 'Tue Sep 26 2006 00:00:00'
        /// </code></pre>
        /// *
        /// @param {Date} date The date to modify
        /// @param {String} interval A valid date interval enum value.
        /// @param {Number} value The amount to add to the current date.
        /// @return {Date} The new Date instance.
        /// </summary>
        public static JsDate add(JsDate date, JsString interval, JsNumber value){return null;}
        /// <summary>
        /// Checks if a date falls on or between the given start and end dates.
        /// @param {Date} date The date to check
        /// @param {Date} start Start date
        /// @param {Date} end End date
        /// @return {Boolean} true if this date falls on or between the given start and end dates.
        /// </summary>
        public static bool between(JsDate date, JsDate start, JsDate end){return false;}
        /// <summary>
        /// Attempts to clear all time information from this Date by setting the time to midnight of the same day,
        /// automatically adjusting for Daylight Saving Time (DST) where applicable.
        /// (note: DST timezone information for the browser's host operating system is assumed to be up-to-date)
        /// @param {Date} date The date
        /// @param {Boolean} clone true to create a clone of this date, clear the time and return it (defaults to false).
        /// @return {Date} this or the clone.
        /// </summary>
        public static JsDate clearTime(JsDate date, bool clone){return null;}
        /// <summary>
        /// Creates and returns a new Date instance with the exact same date value as the called instance.
        /// Dates are copied and passed by reference, so if a copied date variable is modified later, the original
        /// variable will also be changed.  When the intention is to create a new variable that will not
        /// modify the original instance, you should create a clone.
        /// *
        /// Example of correctly cloning a date:
        /// <pre><code>
        /// //wrong way:
        /// var orig = new Date('10/1/2006');
        /// var copy = orig;
        /// copy.setDate(5);
        /// console.log(orig);  //returns 'Thu Oct 05 2006'!
        /// //correct way:
        /// var orig = new Date('10/1/2006'),
        /// copy = Ext.Date.clone(orig);
        /// copy.setDate(5);
        /// console.log(orig);  //returns 'Thu Oct 01 2006'
        /// </code></pre>
        /// @param {Date} date The date
        /// @return {Date} The new Date instance.
        /// </summary>
        public static JsDate clone(JsDate date){return null;}
        public static void createFormat(object format){}
        public static void dateFormat(object date, object format){}
        /// <summary>
        /// Formats a date given the supplied format string.
        /// @param {Date} date The date to format
        /// @param {String} format The format string
        /// @return {String} The formatted date
        /// </summary>
        public static JsString format(JsDate date, JsString format){return null;}
        public static void formatCodeToRegex(object character, object currentGroup){}
        /// <summary>
        /// Get the numeric day number of the year, adjusted for leap year.
        /// @param {Date} date The date
        /// @return {Number} 0 to 364 (365 in leap years).
        /// </summary>
        public static JsNumber getDayOfYear(JsDate date){return null;}
        /// <summary>
        /// Returns the number of milliseconds between two dates
        /// @param {Date} dateA The first date
        /// @param {Date} dateB (optional) The second date, defaults to now
        /// @return {Number} The difference in milliseconds
        /// </summary>
        public static JsNumber getElapsed(JsDate dateA, JsDate dateB){return null;}
        /// <summary>
        /// Get the date of the first day of the month in which this date resides.
        /// @param {Date} date The date
        /// @return {Date}
        /// </summary>
        public static void getFirstDateOfMonth(JsDate date){}
        /// <summary>
        /// Get the first day of the current month, adjusted for leap year.  The returned value
        /// is the numeric day index within the week (0-6) which can be used in conjunction with
        /// the {@link #monthNames} array to retrieve the textual day name.
        /// Example:
        /// <pre><code>
        /// var dt = new Date('1/10/2007'),
        /// firstDay = Ext.Date.getFirstDayOfMonth(dt);
        /// console.log(Ext.Date.dayNames[firstDay]); //output: 'Monday'
        /// </code></pre>
        /// @param {Date} date The date
        /// @return {Number} The day number (0-6).
        /// </summary>
        public static JsNumber getFirstDayOfMonth(JsDate date){return null;}
        public static void getFormatCode(object character){}
        /// <summary>
        /// Get the offset from GMT of the current date (equivalent to the format specifier 'O').
        /// @param {Date} date The date
        /// @param {Boolean} colon (optional) true to separate the hours and minutes with a colon (defaults to false).
        /// @return {String} The 4-character offset string prefixed with + or - (e.g. '-0600').
        /// </summary>
        public static JsString getGMTOffset(JsDate date, bool colon){return null;}
        /// <summary>
        /// Get the date of the last day of the month in which this date resides.
        /// @param {Date} date The date
        /// @return {Date}
        /// </summary>
        public static void getLastDateOfMonth(JsDate date){}
        /// <summary>
        /// Get the last day of the current month, adjusted for leap year.  The returned value
        /// is the numeric day index within the week (0-6) which can be used in conjunction with
        /// the {@link #monthNames} array to retrieve the textual day name.
        /// Example:
        /// <pre><code>
        /// var dt = new Date('1/10/2007'),
        /// lastDay = Ext.Date.getLastDayOfMonth(dt);
        /// console.log(Ext.Date.dayNames[lastDay]); //output: 'Wednesday'
        /// </code></pre>
        /// @param {Date} date The date
        /// @return {Number} The day number (0-6).
        /// </summary>
        public static JsNumber getLastDayOfMonth(JsDate date){return null;}
        /// <summary>
        /// Get the zero-based javascript month number for the given short/full month name.
        /// Override this function for international dates.
        /// @param {String} name The short/full month name.
        /// @return {Number} The zero-based javascript month number.
        /// </summary>
        public static JsNumber getMonthNumber(JsString name){return null;}
        /// <summary>
        /// Get the short day name for the given day number.
        /// Override this function for international dates.
        /// @param {Number} day A zero-based javascript day number.
        /// @return {String} The short day name.
        /// </summary>
        public static JsString getShortDayName(JsNumber day){return null;}
        /// <summary>
        /// Get the short month name for the given month number.
        /// Override this function for international dates.
        /// @param {Number} month A zero-based javascript month number.
        /// @return {String} The short month name.
        /// </summary>
        public static JsString getShortMonthName(JsNumber month){return null;}
        /// <summary>
        /// Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').
        /// @param {Date} date The date
        /// @return {String} 'st, 'nd', 'rd' or 'th'.
        /// </summary>
        public static JsString getSuffix(JsDate date){return null;}
        /// <summary>
        /// Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').
        /// *
        /// Note: The date string returned by the javascript Date object's toString() method varies
        /// between browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).
        /// For a given date string e.g. "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)",
        /// getTimezone() first tries to get the timezone abbreviation from between a pair of parentheses
        /// (which may or may not be present), failing which it proceeds to get the timezone abbreviation
        /// from the GMT offset portion of the date string.
        /// @param {Date} date The date
        /// @return {String} The abbreviated timezone name (e.g. 'CST', 'PDT', 'EDT', 'MPST' ...).
        /// </summary>
        public static JsString getTimezone(JsDate date){return null;}
        /// <summary>
        /// Checks if the current date is affected by Daylight Saving Time (DST).
        /// @param {Date} date The date
        /// @return {Boolean} True if the current date is affected by DST.
        /// </summary>
        public static bool isDST(JsDate date){return false;}
        /// <summary>
        /// Checks if the current date falls within a leap year.
        /// @param {Date} date The date
        /// @return {Boolean} True if the current date falls within a leap year, false otherwise.
        /// </summary>
        public static bool isLeapYear(JsDate date){return false;}
        /// <summary>
        /// Checks if the passed Date parameters will cause a javascript Date "rollover".
        /// @param {Number} year 4-digit year
        /// @param {Number} month 1-based month-of-year
        /// @param {Number} day Day of month
        /// @param {Number} hour (optional) Hour
        /// @param {Number} minute (optional) Minute
        /// @param {Number} second (optional) Second
        /// @param {Number} millisecond (optional) Millisecond
        /// @return {Boolean} true if the passed parameters do not cause a Date "rollover", false otherwise.
        /// </summary>
        public static bool isValid(JsNumber y, JsNumber m, JsNumber d, JsNumber h, JsNumber i, JsNumber s, JsNumber ms){return false;}
        /// <summary>
        /// Parses the passed string using the specified date format.
        /// Note that this function expects normal calendar dates, meaning that months are 1-based (i.e. 1 = January).
        /// The {@link #defaults} hash will be used for any date value (i.e. year, month, day, hour, minute, second or millisecond)
        /// which cannot be found in the passed string. If a corresponding default date value has not been specified in the {@link #defaults} hash,
        /// the current date's year, month, day or DST-adjusted zero-hour time value will be used instead.
        /// Keep in mind that the input date string must precisely match the specified format string
        /// in order for the parse operation to be successful (failed parse operations return a null value).
        /// <p>Example:</p><pre><code>
        /// //dt = Fri May 25 2007 (current date)
        /// var dt = new Date();
        /// //dt = Thu May 25 2006 (today&#39;s month/day in 2006)
        /// dt = Ext.Date.parse("2006", "Y");
        /// //dt = Sun Jan 15 2006 (all date parts specified)
        /// dt = Ext.Date.parse("2006-01-15", "Y-m-d");
        /// //dt = Sun Jan 15 2006 15:20:01
        /// dt = Ext.Date.parse("2006-01-15 3:20:01 PM", "Y-m-d g:i:s A");
        /// // attempt to parse Sun Feb 29 2006 03:20:01 in strict mode
        /// dt = Ext.Date.parse("2006-02-29 03:20:01", "Y-m-d H:i:s", true); // returns null
        /// </code></pre>
        /// @param {String} input The raw date string.
        /// @param {String} format The expected date string format.
        /// @param {Boolean} strict (optional) True to validate date strings while parsing (i.e. prevents javascript Date "rollover")
        /// (defaults to false). Invalid date strings will return null when parsed.
        /// @return {Date} The parsed Date.
        /// </summary>
        public static JsDate parse(JsString input, JsString format, bool strict){return null;}
        public static void parseDate(object input, object format, object strict){}
        /// <summary>
        /// Date interval constant
        /// @type String
        /// </summary>
        public static JsString DAY{get;set;}
        /// <summary>
        /// <p>The date format string that the {@link Ext.util.Format#date} function uses.
        /// See {@link Ext.Date} for details.</p>
        /// <p>This defaults to <code>m/d/Y</code>, but may be overridden in a locale file.</p>
        /// @property defaultFormat
        /// @type String
        /// </summary>
        public static JsString defaultFormat{get;set;}
        /// <summary>
        /// @type String
        /// </summary>
        public static JsString HOUR{get;set;}
        /// <summary>
        /// Date interval constant
        /// @type String
        /// </summary>
        public static JsString MILLI{get;set;}
        /// <summary>
        /// Date interval constant
        /// @type String
        /// </summary>
        public static JsString MINUTE{get;set;}
        /// <summary>
        /// Date interval constant
        /// @type String
        /// </summary>
        public static JsString MONTH{get;set;}
        /// <summary>
        /// Date interval constant
        /// @type String
        /// </summary>
        public static JsString SECOND{get;set;}
        /// <summary>
        /// Global flag which determines if strict date parsing should be used.
        /// Strict date parsing will not roll-over invalid dates, which is the
        /// default behaviour of javascript Date objects.
        /// (see {@link #parse} for more information)
        /// Defaults to <tt>false</tt>.
        /// @type Boolean
        /// </summary>
        public static bool useStrict{get;set;}
        public static object y2kYear{get;set;}
        /// <summary>
        /// Date interval constant
        /// @type String
        /// </summary>
        public static JsString YEAR{get;set;}
    }
    #endregion
    #region defer
    /// <summary>
    /// @method
    /// @member Ext
    /// @alias Ext.Function#defer
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class defer
    {
        public defer(){}
    }
    #endregion
    #region Error
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Error
    {
        public Error(){}
        public static void raise(object error){}
    }
    #endregion
    #region EventedBase
    [JsType(JsMode.Prototype, Export=false)]
    public partial class EventedBase : Base
    {
        public EventedBase(){}
        public EventedBase(object config){}
        public void doSet(object me, object value, object oldValue, object options){}
        public void isInitialized(){}
        public void onClassExtended(object Class, object data){}
        public bool initialized{get;set;}
    }
    #endregion
    #region ExtClass
    [JsType(JsMode.Prototype, Export=false, Name="Ext")]
    public partial class ExtClass
    {
        /// <summary>
        /// Loads Ext.app.Application class and starts it up with given configuration after the page is ready.
        /// See Ext.app.Application for details.
        /// @param {Object} config
        /// </summary>
        public static void application(object config){}
        /// <summary>
        /// Copies all the properties of config to object if they don't already exist.
        /// @param {Object} object The receiver of the properties
        /// @param {Object} config The source of the properties
        /// @return {Object} returns obj
        /// </summary>
        public static object applyIf(object @object, object config){return null;}
        /// <summary>
        /// @param {Function} callback The callback to execute
        /// @param {Object} scope (optional) The scope to execute in
        /// @param {Array} args (optional) The arguments to pass to the function
        /// @param {Number} delay (optional) Pass a number to delay the call by a number of milliseconds.
        /// </summary>
        public static void callback(JsAction callback, object scope, JsArray args, JsNumber delay){}
        /// <summary>
        /// Clone almost any type of variable including array, object, DOM nodes and Date without keeping the old reference
        /// @param {Object} item The variable to clone
        /// @return {Object} clone
        /// </summary>
        public static object clone(object item){return null;}
        /// <summary>
        /// Instantiate a class by either full name, alias or alternate name. ...
        /// </summary>
        public static object create(JsString name, object args) { return null; }
        /// <summary>
        /// @method
        /// Defines a class or override. A basic class is defined like this:
        /// *
        /// Ext.define('My.awesome.Class', {
        /// someProperty: 'something',
        /// *
        /// someMethod: function() {
        /// alert(s + this.someProperty);
        /// }
        /// *
        /// ...
        /// });
        /// *
        /// var obj = new My.awesome.Class();
        /// *
        /// obj.someMethod('Say '); // alerts 'Say something'
        /// *
        /// To defines an override, include the `override` property. The content of an
        /// override is aggregated with the specified class in order to extend or modify
        /// that class. This can be as simple as setting default property values or it can
        /// extend and/or replace methods. This can also extend the statics of the class.
        /// *
        /// One use for an override is to break a large class into manageable pieces.
        /// *
        /// // File: /src/app/Panel.js
        /// *
        /// Ext.define('My.app.Panel', {
        /// extend: 'Ext.panel.Panel',
        /// requires: [
        /// 'My.app.PanelPart2',
        /// 'My.app.PanelPart3'
        /// ]
        /// *
        /// constructor: function (config) {
        /// this.callParent(arguments); // calls Ext.panel.Panel's constructor
        /// //...
        /// },
        /// *
        /// statics: {
        /// method: function () {
        /// return 'abc';
        /// }
        /// }
        /// });
        /// *
        /// // File: /src/app/PanelPart2.js
        /// Ext.define('My.app.PanelPart2', {
        /// override: 'My.app.Panel',
        /// *
        /// constructor: function (config) {
        /// this.callParent(arguments); // calls My.app.Panel's constructor
        /// //...
        /// }
        /// });
        /// *
        /// Another use for an override is to provide optional parts of classes that can be
        /// independently required. In this case, the class may even be unaware of the
        /// override altogether.
        /// *
        /// Ext.define('My.ux.CoolTip', {
        /// override: 'Ext.tip.ToolTip',
        /// *
        /// constructor: function (config) {
        /// this.callParent(arguments); // calls Ext.tip.ToolTip's constructor
        /// //...
        /// }
        /// });
        /// *
        /// The above override can now be required as normal.
        /// *
        /// Ext.define('My.app.App', {
        /// requires: [
        /// 'My.ux.CoolTip'
        /// ]
        /// });
        /// *
        /// Overrides can also contain statics:
        /// *
        /// Ext.define('My.app.BarMod', {
        /// override: 'Ext.foo.Bar',
        /// *
        /// statics: {
        /// method: function (x) {
        /// return this.callParent([x * 2]); // call Ext.foo.Bar.method
        /// }
        /// }
        /// });
        /// *
        /// IMPORTANT: An override is only included in a build if the class it overrides is
        /// required. Otherwise, the override, like the target class, is not included.
        /// *
        /// @param {String} className The class name to create in string dot-namespaced format, for example:
        /// 'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager'
        /// It is highly recommended to follow this simple convention:
        /// - The root and the class name are 'CamelCased'
        /// - Everything else is lower-cased
        /// @param {Object} data The key - value pairs of properties to apply to this class. Property names can be of any valid
        /// strings, except those in the reserved listed below:
        /// - `mixins`
        /// - `statics`
        /// - `config`
        /// - `alias`
        /// - `self`
        /// - `singleton`
        /// - `alternateClassName`
        /// - `override`
        /// *
        /// @param {Function} createdFn Optional callback to execute after the class (or override)
        /// is created. The execution scope (`this`) will be the newly created class itself.
        /// @return {Ext.Base}
        /// @markdown
        /// @member Ext
        /// @method define
        /// </summary>
        public static void define(JsString className, object data, JsAction createdFn){}
        /// <summary>
        /// Create a closure for deprecated code.
        /// *
        /// // This means Ext.oldMethod is only supported in 4.0.0beta and older.
        /// // If Ext.getVersion('extjs') returns a version that is later than '4.0.0beta', for example '4.0.0RC',
        /// // the closure will not be invoked
        /// Ext.deprecate('extjs', '4.0.0beta', function() {
        /// Ext.oldMethod = Ext.newMethod;
        /// ...
        /// });
        /// @param {String} packageName The package name
        /// @param {String} since The last version before it's deprecated
        /// @param {Function} closure The callback function to be executed with the specified version is less than the current version
        /// @param {Object} scope The execution scope (<tt>this</tt>) if the closure
        /// @markdown
        /// </summary>
        public static void deprecate(JsString packageName, JsString since, JsAction closure, object scope){}
        /// <summary>
        /// @private
        /// @param cls
        /// </summary>
        public static void deprecateClassConfigDirectAccess(object cls, object data){}
        /// <summary>
        /// @private
        /// </summary>
        public static void deprecateClassMember(object cls, object oldName, object newName, object message){}
        /// <summary>
        /// @private
        /// </summary>
        public static void deprecateClassMembers(object cls, object members){}
        /// <summary>
        /// @private
        /// </summary>
        public static void deprecateClassMethod(object cls, object name, object method, object message){}
        /// <summary>
        /// @private
        /// </summary>
        public static void deprecateMethod(object @object, object name, object method, object message){}
        /// <summary>
        /// @private
        /// </summary>
        public static void deprecateProperty(object @object, object oldName, object newName, object message){}
        /// <summary>
        /// Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
        /// DOM (if applicable) and calling their destroy functions (if available).  This method is primarily
        /// intended for arguments of type {@link Ext.Element} and {@link Ext.Component}, but any subclass of
        /// {@link Ext.util.Observable} can be passed in.  Any number of elements and/or components can be
        /// passed into this function in a single call as separate arguments.
        /// @param {Mixed...} args An {@link Ext.Element}, {@link Ext.Component}, or an Array of either of these to destroy
        /// </summary>
        public static void destroy(){}
        public static void extend(object Class, object Parent, object members){}
        /// <summary>
        /// @private
        /// @param config
        /// @param classReference
        /// @param instance
        /// </summary>
        public static void factory(object config, object classReference, object instance, object aliasNamespace){}
        /// <summary>
        /// @private
        /// @param config
        /// @param callback
        /// </summary>
        public static void factoryConfig(object config, object callback){}
        /// <summary>
        /// @private
        /// </summary>
        public static void functionFactory(){}
        /// <summary>
        /// Returns the current document body as an {@link Ext.Element}.
        /// @return Ext.Element The document body
        /// </summary>
        public static void getBody(){}
        /// <summary>
        /// This is shorthand reference to {@link Ext.ComponentMgr#get}.
        /// Looks up an existing {@link Ext.Component Component} by {@link Ext.Component#getId id}
        /// @param {String} id The component {@link Ext.Component#getId id}
        /// @return Ext.Component The Component, <tt>undefined</tt> if not found, or <tt>null</tt> if a
        /// Class was found.
        /// </summary>
        public static void getCmp(JsString id){}
        /// <summary>
        /// *
        /// @param {Mixed} object
        /// </summary>
        public static void getDisplayName(object @object){}
        /// <summary>
        /// Returns the current HTML document object as an {@link Ext.Element}.
        /// @return Ext.Element The document
        /// </summary>
        public static void getDoc(){}
        /// <summary>
        /// Return the dom node for the passed String (id), dom node, or Ext.Element.
        /// Here are some examples:
        /// <pre><code>
        /// // gets dom node based on id
        /// var elDom = Ext.getDom('elId');
        /// // gets dom node based on the dom node
        /// var elDom1 = Ext.getDom(elDom);
        /// // If we don&#39;t know if we are working with an
        /// // Ext.Element or a dom node use Ext.getDom
        /// function(el){
        /// var dom = Ext.getDom(el);
        /// // do something with the dom node
        /// }
        /// </code></pre>
        /// <b>Note</b>: the dom node to be found actually needs to exist (be rendered, etc)
        /// when this method is called to be successful.
        /// @param {Mixed} el
        /// @return HTMLElement
        /// </summary>
        public static void getDom(object el){}
        /// <summary>
        /// Returns the current document head as an {@link Ext.Element}.
        /// @return Ext.Element The document head
        /// </summary>
        public static void getHead(){}
        /// <summary>
        /// @private
        /// Generate a unique reference of Ext in the global scope, useful for sandboxing
        /// </summary>
        public static void getUniqueGlobalNamespace(){}
        /// <summary>
        /// Get the version number of the supplied package name; will return the last registered version
        /// (last Ext.setVersion call) if there's no package name given.
        /// *
        /// @param {String} packageName (Optional) The package name, for example: 'core', 'touch', 'extjs'
        /// @return {Ext.Version} The version
        /// </summary>
        public static void getVersion(JsString packageName){}
        /// <summary>
        /// Generates unique ids. If the element already has an id, it is unchanged
        /// @param {Mixed} el (optional) The element to generate an id for
        /// @param {String} prefix (optional) Id prefix (defaults "ext-gen")
        /// @return {String} The generated Id.
        /// </summary>
        public static JsString id(object el, JsString prefix){return null;}
        /// <summary>
        /// Returns true if the passed value is a boolean.
        /// *
        /// @param {Object} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isBoolean(object value){}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Date object, false otherwise.
        /// @param {Object} object The object to test
        /// @return {Boolean}
        /// </summary>
        public static void isDate(object value){}
        /// <summary>
        /// Returns true if the passed value is defined.
        /// @param {Object} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isDefined(object value){}
        /// <summary>
        /// Returns true if the passed value is an HTMLElement
        /// @param {Object} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isElement(object value){}
        /// <summary>
        /// Returns true if the passed value is empty, false otherwise. The value is deemed to be empty if it is either:
        /// *
        /// - `null`
        /// - `undefined`
        /// - a zero-length array
        /// - a zero-length string (Unless the `allowEmptyString` parameter is set to `true`)
        /// *
        /// @param {Object} value The value to test
        /// @param {Boolean} allowEmptyString (optional) true to allow empty strings (defaults to false)
        /// @return {Boolean}
        /// @markdown
        /// </summary>
        public static void isEmpty(object value, bool allowEmptyString){}
        /// <summary>
        /// Returns true if the passed value is iterable, false otherwise
        /// @param {Object} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isIterable(object value){}
        /// <summary>
        /// Returns true if the passed value is a number. Returns false for non-finite numbers.
        /// @param {Object} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isNumber(object value){}
        /// <summary>
        /// Validates that a value is numeric.
        /// @param {Object} value Examples: 1, '1', '2.34'
        /// @return {Boolean} True if numeric, false otherwise
        /// </summary>
        public static bool isNumeric(object value){return false;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.
        /// @param {Object} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isPrimitive(object value){}
        /// <summary>
        /// @private
        /// </summary>
        public static void isSimpleObject(object value){}
        /// <summary>
        /// Returns true if the passed value is a string.
        /// @param {Object} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isString(object value){}
        /// <summary>
        /// Returns true if the passed value is a TextNode
        /// @param {Object} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isTextNode(object value){}
        /// <summary>
        /// Iterates either an array or an object. This method delegates to
        /// {@link Ext.Array#each Ext.Array.each} if the given value is iterable, and {@link Ext.Object#each Ext.Object.each} otherwise.
        /// *
        /// @param {Object/Array} object The object or array to be iterated.
        /// @param {Function} fn The function to be called for each iteration. See and {@link Ext.Array#each Ext.Array.each} and
        /// {@link Ext.Object#each Ext.Object.each} for detailed lists of arguments passed to this function depending on the given object
        /// type that is being iterated.
        /// @param {Object} scope (Optional) The scope (`this` reference) in which the specified function is executed.
        /// Defaults to the object being iterated itself.
        /// @markdown
        /// </summary>
        public static void iterate(object @object, JsAction fn, object scope){}
        /// <summary>
        /// This method is deprecated, please use {@link Ext.Number#from Ext.Number.from} instead
        /// *
        /// @deprecated 4.0.0 Replaced by Ext.Number.from
        /// @member Ext
        /// @method num
        /// </summary>
        public static void num(){}
        /// <summary>
        /// @private
        /// </summary>
        public static void onDocumentReady(object fn, object scope){}
        /// <summary>
        /// @member Ext
        /// @method onReady
        /// </summary>
        public static void onReady(object fn, object scope, object options){}
        /// <summary>
        /// Proxy to {@link Ext.Base#override}. Please refer {@link Ext.Base#override} for further details.
        /// *
        /// @param {Object} cls The class to override
        /// @param {Object} overrides The properties to add to origClass. This should be specified as an object literal
        /// containing one or more properties.
        /// @method override
        /// @markdown
        /// @deprecated 4.1.0 Use {@link Ext#define Ext.define} instead
        /// </summary>
        public static void @override(object cls, object overrides){}
        /// <summary>
        /// <p>Removes this element from the document, removes all DOM event listeners, and deletes the cache reference.
        /// All DOM event listeners are removed from this element.
        /// @param {HTMLElement} node The node to remove
        /// </summary>
        public static void removeNode(HtmlElement node){}
        /// <summary>
        /// Repaints the whole page. This fixes frequently encountered painting issues in mobile Safari.
        /// </summary>
        public static void repaint(){}
        public static void setup(object config){}
        /// <summary>
        /// Set version number for the given package name.
        /// *
        /// @param {String} packageName The package name, for example: 'core', 'touch', 'extjs'
        /// @param {String/Ext.Version} version The version, for example: '1.2.3alpha', '2.4.0-dev'
        /// @return {Ext}
        /// </summary>
        public static void setVersion(JsString packageName, object version){}
        /// <summary>
        /// @method
        /// @member Ext
        /// @alias Ext.Array#toArray
        /// </summary>
        public static void toArray(){}
        /// <summary>
        /// @private
        /// </summary>
        public static void triggerReady(){}
        /// <summary>
        /// Returns the type of the given variable in string format. List of possible values are:
        /// *
        /// - `undefined`: If the given value is `undefined`
        /// - `null`: If the given value is `null`
        /// - `string`: If the given value is a string
        /// - `number`: If the given value is a number
        /// - `boolean`: If the given value is a boolean value
        /// - `date`: If the given value is a `Date` object
        /// - `function`: If the given value is a function reference
        /// - `object`: If the given value is an object
        /// - `array`: If the given value is an array
        /// - `regexp`: If the given value is a regular expression
        /// - `element`: If the given value is a DOM Element
        /// - `textnode`: If the given value is a DOM text node and contains something other than whitespace
        /// - `whitespace`: If the given value is a DOM text node and contains only whitespace
        /// *
        /// @param {Object} value
        /// @return {String}
        /// @markdown
        /// </summary>
        public static void typeOf(object value){}
        /// <summary>
        /// A convenient alias method for {@link Ext.Object#fromQueryString}
        /// *
        /// @member Ext
        /// @method urlDecode
        /// @deprecated 4.0.0 Use {@link Ext.Object#fromQueryString Ext.Object.fromQueryString} instead
        /// </summary>
        public static void urlDecode(){}
        /// <summary>
        /// A convenient alias method for {@link Ext.Object#toQueryString}
        /// *
        /// @member Ext
        /// @method urlEncode
        /// @deprecated 4.0.0 Use {@link Ext.Object#toQueryString Ext.Object.toQueryString} instead
        /// </summary>
        public static void urlEncode(){}
        /// <summary>
        /// Returns the given value itself if it's not empty, as described in {@link Ext#isEmpty}; returns the default
        /// value (second argument) otherwise.
        /// *
        /// @param {Object} value The value to test
        /// @param {Object} defaultValue The value to return if the original value is empty
        /// @param {Boolean} allowBlank (optional) true to allow zero length strings to qualify as non-empty (defaults to false)
        /// @return {Object} value, if non-empty, else defaultValue
        /// </summary>
        public static object valueFrom(object value, object defaultValue, bool allowBlank){return null;}
        /// <summary>
        /// Convenient shorthand to create a widget by its xtype, also see {@link Ext.ClassManager#instantiateByAlias}
        /// var button = Ext.widget('button'); // Equivalent to Ext.create('widget.button')
        /// var panel = Ext.widget('panel'); // Equivalent to Ext.create('widget.panel')
        /// @member Ext
        /// @method widget
        /// @markdown
        /// </summary>
        public static void widget(object name){}
        /// <summary>
        /// @private
        /// </summary>
        public static object idSeed{get;set;}
        /// <summary>
        /// True when the document is fully initialized and ready for action
        /// @type Boolean
        /// </summary>
        public static bool isReady{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public static object lastRegisteredVersion{get;set;}
        [JsProperty]
        public object up{private get;[JsMethod(Name="setup")]set;}
    }
    #endregion
    #region Function
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Function
    {
        public Function(){}
        /// <summary>
        /// Create an alias to the provided method property with name `methodName` of `object`.
        /// Note that the execution scope will still be bound to the provided `object` itself.
        /// *
        /// @param {Object/Function} object
        /// @param {String} methodName
        /// @return {Function} aliasFn
        /// </summary>
        public static JsAction alias(object @object, JsString methodName){return null;}
        /// <summary>
        /// Create a new function from the provided `fn`, change `this` to the provided scope, optionally
        /// overrides arguments for the call. (Defaults to the arguments passed by the caller)
        /// *
        /// {@link Ext#bind Ext.bind} is alias for {@link Ext.Function#bind Ext.Function.bind}
        /// *
        /// @param {Function} fn The function to delegate.
        /// @param {Object} scope (optional) The scope (`this` reference) in which the function is executed.
        /// **If omitted, defaults to the browser window.**
        /// @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
        /// @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position
        /// @return {Function} The new function
        /// </summary>
        public static JsAction bind(JsAction fn, object scope, JsArray args, object appendArgs){return null;}
        /// <summary>
        /// Create a "clone" of the provided method. The returned method will call the given
        /// method passing along all arguments and the "this" pointer and return its result.
        /// *
        /// @param {Function} method
        /// @return {Function} cloneFn
        /// </summary>
        public static JsAction clone(JsAction method){return null;}
        /// <summary>
        /// Creates a delegate function, optionally with a bound scope which, when called, buffers
        /// the execution of the passed function for the configured number of milliseconds.
        /// If called again within that period, the impending invocation will be canceled, and the
        /// timeout period will begin again.
        /// *
        /// @param {Function} fn The function to invoke on a buffered timer.
        /// @param {Number} buffer The number of milliseconds by which to buffer the invocation of the
        /// function.
        /// @param {Object} scope (optional) The scope (`this` reference) in which
        /// the passed function is executed. If omitted, defaults to the scope specified by the caller.
        /// @param {Array} args (optional) Override arguments for the call. Defaults to the arguments
        /// passed by the caller.
        /// @return {Function} A function which invokes the passed function after buffering for the specified time.
        /// </summary>
        public static JsAction createBuffered(JsAction fn, JsNumber buffer, object scope, JsArray args){return null;}
        /// <summary>
        /// Creates a delegate (callback) which, when called, executes after a specific delay.
        /// *
        /// @param {Function} fn The function which will be called on a delay when the returned function is called.
        /// Optionally, a replacement (or additional) argument list may be specified.
        /// @param {Number} delay The number of milliseconds to defer execution by whenever called.
        /// @param {Object} scope (optional) The scope (`this` reference) used by the function at execution time.
        /// @param {Array} args (optional) Override arguments for the call. (Defaults to the arguments passed by the caller)
        /// @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position.
        /// @return {Function} A function which, when called, executes the original function after the specified delay.
        /// </summary>
        public static JsAction createDelayed(JsAction fn, JsNumber delay, object scope, JsArray args, object appendArgs){return null;}
        /// <summary>
        /// Creates an interceptor function. The passed function is called before the original one. If it returns false,
        /// the original one is not called. The resulting function returns the results of the original function.
        /// The passed function is called with the parameters of the original function. Example usage:
        /// *
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// *
        /// sayHi('Fred'); // alerts "Hi, Fred"
        /// *
        /// // create a new function that validates input without
        /// // directly modifying the original function:
        /// var sayHiToFriend = Ext.Function.createInterceptor(sayHi, function(name){
        /// return name == 'Brian';
        /// });
        /// *
        /// sayHiToFriend('Fred');  // no alert
        /// sayHiToFriend('Brian'); // alerts "Hi, Brian"
        /// *
        /// @param {Function} origFn The original function.
        /// @param {Function} newFn The function to call before the original
        /// @param {Object} scope (optional) The scope (`this` reference) in which the passed function is executed.
        /// **If omitted, defaults to the scope in which the original function is called or the browser window.**
        /// @param {Object} returnValue (optional) The value to return if the passed function return false (defaults to null).
        /// @return {Function} The new function
        /// </summary>
        public static JsAction createInterceptor(JsAction origFn, JsAction newFn, object scope, object returnValue){return null;}
        /// <summary>
        /// Create a combined function call sequence of the original function + the passed function.
        /// The resulting function returns the results of the original function.
        /// The passed function is called with the parameters of the original function. Example usage:
        /// *
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// *
        /// sayHi('Fred'); // alerts "Hi, Fred"
        /// *
        /// var sayGoodbye = Ext.Function.createSequence(sayHi, function(name){
        /// alert('Bye, ' + name);
        /// });
        /// *
        /// sayGoodbye('Fred'); // both alerts show
        /// *
        /// @param {Function} originalFn The original function.
        /// @param {Function} newFn The function to sequence
        /// @param {Object} scope (optional) The scope (`this` reference) in which the passed function is executed.
        /// If omitted, defaults to the scope in which the original function is called or the browser window.
        /// @return {Function} The new function
        /// </summary>
        public static JsAction createSequence(JsAction originalFn, JsAction newFn, object scope){return null;}
        /// <summary>
        /// Creates a throttled version of the passed function which, when called repeatedly and
        /// rapidly, invokes the passed function only after a certain interval has elapsed since the
        /// previous invocation.
        /// *
        /// This is useful for wrapping functions which may be called repeatedly, such as
        /// a handler of a mouse move event when the processing is expensive.
        /// *
        /// @param {Function} fn The function to execute at a regular time interval.
        /// @param {Number} interval The interval **in milliseconds** on which the passed function is executed.
        /// @param {Object} scope (optional) The scope (`this` reference) in which
        /// the passed function is executed. If omitted, defaults to the scope specified by the caller.
        /// @returns {Function} A function which invokes the passed function at the specified interval.
        /// </summary>
        public static void createThrottled(JsAction fn, JsNumber interval, object scope){}
        /// <summary>
        /// Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
        /// *
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// *
        /// // executes immediately:
        /// sayHi('Fred');
        /// *
        /// // executes after 2 seconds:
        /// Ext.Function.defer(sayHi, 2000, this, ['Fred']);
        /// *
        /// // this syntax is sometimes useful for deferring
        /// // execution of an anonymous function:
        /// Ext.Function.defer(function(){
        /// alert('Anonymous');
        /// }, 100);
        /// *
        /// {@link Ext#defer Ext.defer} is alias for {@link Ext.Function#defer Ext.Function.defer}
        /// *
        /// @param {Function} fn The function to defer.
        /// @param {Number} millis The number of milliseconds for the setTimeout call
        /// (if less than or equal to 0 the function is executed immediately)
        /// @param {Object} scope (optional) The scope (`this` reference) in which the function is executed.
        /// **If omitted, defaults to the browser window.**
        /// @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
        /// @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position
        /// @return {Number} The timeout id that can be used with clearTimeout
        /// </summary>
        public static JsNumber defer(JsAction fn, JsNumber millis, object scope, JsArray args, object appendArgs){return null;}
        /// <summary>
        /// A very commonly used method throughout the framework. It acts as a wrapper around another method
        /// which originally accepts 2 arguments for `name` and `value`.
        /// The wrapped function then allows "flexible" value setting of either:
        /// *
        /// - `name` and `value` as 2 arguments
        /// - one single object argument with multiple key - value pairs
        /// *
        /// For example:
        /// *
        /// var setValue = Ext.Function.flexSetter(function(name, value) {
        /// this[name] = value;
        /// });
        /// *
        /// // Afterwards
        /// // Setting a single name - value
        /// setValue('name1', 'value1');
        /// *
        /// // Settings multiple name - value pairs
        /// setValue({
        /// name1: 'value1',
        /// name2: 'value2',
        /// name3: 'value3'
        /// });
        /// *
        /// @param {Function} setter
        /// @returns {Function} flexSetter
        /// </summary>
        public static void flexSetter(JsAction fn){}
        public static void interceptAfter(object @object, object methodName, object fn){}
        public static void interceptBefore(object @object, object methodName, object fn){}
        /// <summary>
        /// Create a new function from the provided `fn`, the arguments of which are pre-set to `args`.
        /// New arguments passed to the newly created callback when it's invoked are appended after the pre-set ones.
        /// This is especially useful when creating callbacks.
        /// *
        /// For example:
        /// *
        /// var originalFunction = function(){
        /// alert(Ext.Array.from(arguments).join(' '));
        /// };
        /// *
        /// var callback = Ext.Function.pass(originalFunction, ['Hello', 'World']);
        /// *
        /// callback(); // alerts 'Hello World'
        /// callback('by Me'); // alerts 'Hello World by Me'
        /// *
        /// {@link Ext#pass Ext.pass} is alias for {@link Ext.Function#pass Ext.Function.pass}
        /// *
        /// @param {Function} fn The original function
        /// @param {Array} args The arguments to pass to new callback
        /// @param {Object} scope (optional) The scope (`this` reference) in which the function is executed.
        /// @return {Function} The new callback function
        /// </summary>
        public static JsAction pass(JsAction fn, JsArray args, object scope){return null;}
    }
    #endregion
    #region Img
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Img
    {
        public Img(ImgConfig config){}
        public Img(){}
        public void initialize(){}
        public void onAfterRender(){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateSrc(object newSrc){}
        /// <summary>
        /// This is a simple way to add an image of any size to your application and have it participate in the layout system
        /// like any other component. This component typically takes between 1 and 3 configurations - a {@link #src}, and
        /// optionally a {@link #height} and a {@link #width}:
        /// Ext.create('Ext.Img', {
        /// src: 'path/to/my/image.jpg',
        /// height: 300,
        /// width: 400
        /// });
        /// It's also easy to add an image into a panel or other container using its xtype:
        /// Ext.create('Ext.Panel', {
        /// layout: '{@link Ext.layout.HBox hbox}',
        /// items: [
        /// {
        /// xtype: 'image',
        /// src: 'path/to/my/profilePicture.jpg',
        /// flex: 1
        /// },
        /// {
        /// xtype: 'textareafield',
        /// flex: 2,
        /// label: {
        /// text: 'My Profile',
        /// align: 'top'
        /// }
        /// }
        /// ]
        /// });
        /// Here we created a panel which contains an image (a profile picture in this case) and a text area to allow the user
        /// to enter profile information about themselves. In this case we used an {@link Ext.layout.HBox hbox layout} and
        /// flexed the image to take up one third of the width and the text area to take two thirds of the width. See the
        /// {@link Ext.layout.HBox hbox docs} for more information on flexing items.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// This is a simple way to add an image of any size to your application and have it participate in the layout system
        /// like any other component. This component typically takes between 1 and 3 configurations - a {@link #src}, and
        /// optionally a {@link #height} and a {@link #width}:
        /// Ext.create('Ext.Img', {
        /// src: 'path/to/my/image.jpg',
        /// height: 300,
        /// width: 400
        /// });
        /// It's also easy to add an image into a panel or other container using its xtype:
        /// Ext.create('Ext.Panel', {
        /// layout: '{@link Ext.layout.HBox hbox}',
        /// items: [
        /// {
        /// xtype: 'image',
        /// src: 'path/to/my/profilePicture.jpg',
        /// flex: 1
        /// },
        /// {
        /// xtype: 'textareafield',
        /// flex: 2,
        /// label: {
        /// text: 'My Profile',
        /// align: 'top'
        /// }
        /// }
        /// ]
        /// });
        /// Here we created a panel which contains an image (a profile picture in this case) and a text area to allow the user
        /// to enter profile information about themselves. In this case we used an {@link Ext.layout.HBox hbox layout} and
        /// flexed the image to take up one third of the width and the text area to take two thirds of the width. See the
        /// {@link Ext.layout.HBox hbox docs} for more information on flexing items.
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region ImgConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ImgConfig
    {
        public ImgConfig(){}
        /// <summary>
        /// The source of this image
        /// </summary>
        public JsString src{get;set;}
    }
    #endregion
    #region ItemCollection
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ItemCollection
    {
        public ItemCollection(){}
        public void getKey(object item){}
        public void has(object item){}
        public JsString extend{get;set;}
    }
    #endregion
    #region JSON
    /// <summary>
    /// @class Ext.JSON
    /// Modified version of Douglas Crockford"s json.js that doesn"t
    /// mess with the Object prototype
    /// http://www.json.org/js.html
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JSON
    {
        public JSON(){}
    }
    #endregion
    #region LoadMask
    [JsType(JsMode.Prototype, Export=false)]
    public partial class LoadMask
    {
        public LoadMask(){}
        public LoadMask(LoadMaskConfig config){}
        /// <summary>
        /// Sets the {@link #msg} configuration
        /// </summary>
        public void applyMsg(object msg){}
        /// <summary>
        /// Sets the {@link #msgCls} configuration
        /// </summary>
        public void applyMsgCls(object msgCls){}
        /// <summary>
        /// Changes the data store bound to this LoadMask.
        /// @param {Ext.data.Store} store The store to bind to this LoadMask
        /// </summary>
        public void bindStore(Store store, object initial){}
        /// <summary>
        /// Creates new LoadMask.
        /// @param {Mixed} el The element or DOM node, or its id
        /// @param {Object} config The config object
        /// </summary>
        public LoadMask(object el, object config){}
        public void destroy(){}
        /// <summary>
        /// Disables the mask to prevent it from being displayed
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enables the mask so that it can be displayed
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Hide this LoadMask.
        /// </summary>
        public void hide(){}
        /// <summary>
        /// Method to determine whether this LoadMask is currently disabled.
        /// @return {Boolean} the disabled state of this LoadMask.
        /// </summary>
        public bool isDisabled(){return false;}
        public void onBeforeLoad(){}
        public void onLoad(){}
        /// <summary>
        /// Show this LoadMask over the configured Element.
        /// </summary>
        public void show(){}
        /// <summary>
        /// Read-only. True if the mask is currently disabled so that it will not be displayed
        /// @type Boolean
        /// </summary>
        public bool disabled{get;set;}
    }
    #endregion
    #region LoadMaskConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class LoadMaskConfig
    {
        public LoadMaskConfig(){}
        /// <summary>
        /// The text to display in a centered loading message box (defaults to 'Loading...')
        /// @accessor
        /// </summary>
        public JsString msg{get;set;}
        /// <summary>
        /// The CSS class to apply to the loading message element (defaults to "x-mask-loading")
        /// @accessor
        /// </summary>
        public JsString msgCls{get;set;}
        /// <summary>
        /// Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and
        /// hidden on either load sucess, or load fail.
        /// </summary>
        public Store store{get;set;}
    }
    #endregion
    #region Map
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Map
    {
        public Map(MapConfig config){}
        public Map(){}
        public void onCenterChange(){}
        public void onDestroy(){}
        public void onGeoUpdate(object coords){}
        public void onTypeChange(){}
        public void onUpdate(object map, object e, object options){}
        public void onZoomChange(){}
        public void renderMap(){}
        /// <summary>
        /// Moves the map center to the designated coordinates hash of the form:
        /// *
        /// { latitude: 37.381592, longitude: -122.135672 }
        /// *
        /// or a google.maps.LatLng object representing to the target location.
        /// *
        /// @param {Object/google.maps.LatLng} coordinates Object representing the desired Latitude and
        /// longitude upon which to center the map.
        /// </summary>
        public void update(object coordinates){}
        /// <summary>
        /// Wraps a Google Map in an Ext.Component.
        /// *
        /// http://code.google.com/apis/maps/documentation/v3/introduction.html
        /// *
        /// To use this component you must include an additional JavaScript file from Google:
        /// *
        /// <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true">&lt/script>
        /// *
        /// {@img ../guildes/map/screenshot.png}
        /// *
        /// var panel = new Ext.Panel({
        /// fullscreen: true,
        /// items: [{
        /// xtype: 'map',
        /// useCurrentLocation: true
        /// }]
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Wraps a Google Map in an Ext.Component.
        /// *
        /// http://code.google.com/apis/maps/documentation/v3/introduction.html
        /// *
        /// To use this component you must include an additional JavaScript file from Google:
        /// *
        /// <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true">&lt/script>
        /// *
        /// {@img ../guildes/map/screenshot.png}
        /// *
        /// var panel = new Ext.Panel({
        /// fullscreen: true,
        /// items: [{
        /// xtype: 'map',
        /// useCurrentLocation: true
        /// }]
        /// });
        /// *
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region MapConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class MapConfig
    {
        public MapConfig(){}
        /// <summary>
        /// The base CSS class to apply to the Maps's element
        /// @accessor
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public GeoLocation geo{get;set;}
        /// <summary>
        /// The wrapped map.
        /// @accessor
        /// </summary>
        public object map{get;set;}
        /// <summary>
        /// MapOptions as specified by the Google Documentation:
        /// http://code.google.com/apis/maps/documentation/v3/reference.html
        /// @accessor
        /// </summary>
        public object mapOptions{get;set;}
        /// <summary>
        /// Masks the map (Defaults to false)
        /// @accessor
        /// </summary>
        public bool maskMap{get;set;}
        /// <summary>
        /// CSS class to add to the map when maskMap is set to true.
        /// @accessor
        /// </summary>
        public JsString maskMapCls{get;set;}
        /// <summary>
        /// Pass in true to center the map based on the geolocation coordinates.
        /// @accessor
        /// </summary>
        public bool useCurrentLocation{get;set;}
    }
    #endregion
    #region Mask
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Mask
    {
        public Mask(){}
        public JsString extend{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region Media
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Media
    {
        public Media(MediaConfig config){}
        public Media(){}
        public void initialize(){}
        /// <summary>
        /// Returns if the media is currently playing
        /// @return {Boolean} playing True if the media is playing
        /// </summary>
        public bool isPlaying(){return false;}
        public void onActivate(){}
        public void onDeactivate(){}
        /// <summary>
        /// Pauses media playback
        /// </summary>
        public void pause(){}
        /// <summary>
        /// Starts or resumes media playback
        /// </summary>
        public void play(){}
        /// <summary>
        /// Toggles the media playback state
        /// </summary>
        public void toggle(){}
        /// <summary>
        /// Updates the controls of the video element.
        /// </summary>
        public void updateEnableControls(object enableControls){}
        /// <summary>
        /// Updates the loop setting of the media element.
        /// </summary>
        public void updateLoop(object loop){}
        /// <summary>
        /// Sets the URL of the media element. If the media element already exists, it is update the src attribute of the
        /// element. If it is currently playing, it will start the new video.
        /// </summary>
        public void updateUrl(object newUrl){}
        /// <summary>
        /// Provides a base class for audio/visual controls. Should not be used directly.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Provides a base class for audio/visual controls. Should not be used directly.
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region MediaConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class MediaConfig
    {
        public MediaConfig(){}
        /// <summary>
        /// Will automatically pause the media when the container is deactivated.
        /// @accessor
        /// </summary>
        public bool autoPause{get;set;}
        /// <summary>
        /// Will automatically start playing the media when the container is activated.
        /// @accessor
        /// </summary>
        public bool autoResume{get;set;}
        /// <summary>
        /// Set this to false to turn off the native media controls.
        /// Defaults to false when you are on Android, as it doesnt support controls.
        /// @accessor
        /// </summary>
        public bool enableControls{get;set;}
        /// <summary>
        /// Will loop the media forever.
        /// @accessor
        /// </summary>
        public bool loop{get;set;}
        /// <summary>
        /// A reference to the underlying audio/video element.
        /// @accessor
        /// </summary>
        public object media{get;set;}
        /// <summary>
        /// Will begin preloading the media immediately.
        /// @accessor
        /// </summary>
        public bool preload{get;set;}
        /// <summary>
        /// Location of the media to play.
        /// @accessor
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region MessageBox
    [JsType(JsMode.Prototype, Export=false)]
    public partial class MessageBox
    {
        public MessageBox(){}
        public MessageBox(MessageBoxConfig config){}
        /// <summary>
        /// Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). If
        /// a callback function is passed it will be called after the user clicks the button, and the itemId of the button
        /// that was clicked will be passed as the only parameter to the callback.
        /// *
        /// @param {String} title The title bar text
        /// @param {String} msg The message box body text
        /// @param {Function} fn The callback function invoked after the message box is closed
        /// @param {Object} [scope] The scope (`this` reference) in which the callback is executed.
        /// Defaults to the browser window.
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox alert(JsString title, JsString msg, JsAction fn, object scope){return null;}
        /// <summary>
        /// @private
        /// </summary>
        public void applyMsg(object config){}
        /// <summary>
        /// @private
        /// </summary>
        public void applyPromptConfig(object prompt){}
        /// <summary>
        /// Creates a new {@link Ext.Toolbar} instance using {@link Ext.Factory}
        /// @private
        /// </summary>
        public void applyTitle(object config){}
        /// <summary>
        /// Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). If a callback
        /// function is passed it will be called after the user clicks either button, and the id of the button that was
        /// clicked will be passed as the only parameter to the callback (could also be the top-right close button).
        /// *
        /// @param {String} title The title bar text
        /// @param {String} msg The message box body text
        /// @param {Function} fn The callback function invoked when user taps on the OK/Cancel button.
        /// The button is passed as the first argument.
        /// @param {Object} [scope] The scope (`this` reference) in which the callback is executed.
        /// Defaults to the browser window.
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox confirm(JsString title, JsString msg, JsAction fn, object scope){return null;}
        public MessageBox(object config){}
        public void onClick(object button){}
        /// <summary>
        /// Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to
        /// JavaScript's prompt). The prompt can be a single-line or multi-line textbox. If a callback function is passed it
        /// will be called after the user clicks either button, and the id of the button that was clicked (could also be the
        /// top-right close button) and the text that was entered will be passed as the two parameters to the callback.
        /// *
        /// Example usage:
        /// *
        /// Ext.Msg.prompt(
        /// 'Welcome!',
        /// 'What\'s your name going to be today?',
        /// function(value){
        /// console.log(value)
        /// },
        /// null,
        /// false,
        /// null,
        /// { autocapitalize : true, placeholder : 'First-name please...' }
        /// );
        /// *
        /// @param {String} title The title bar text
        /// @param {String} msg The message box body text
        /// @param {Function} fn The callback function invoked when the user taps on the OK/Cancel button, the button is
        /// passed as the first argument, the entered string value is passed as the second argument
        /// @param {Object} [scope] The scope (`this` reference) in which the callback is executed.
        /// Defaults to the browser window.
        /// @param {Boolean/Number} [multiLine=false] True to create a multiline textbox using the defaultTextHeight property,
        /// or the height in pixels to create the textbox.
        /// @param {String} [value=''] Default value of the text input element.
        /// @param {Object} [promptConfig] A hash collection of input attribute values.
        /// *
        /// @param {Boolean} [promptConfig.focus=false]
        /// True to assert initial input focus.
        /// *
        /// @param {String} [promptConfig.placeholder='']
        /// String value rendered when the input field is empty.
        /// *
        /// @param {String/Boolean} [promptConfig.autocapitalize='off']
        /// True/on to capitalize the first letter of each word in the input value.
        /// *
        /// @param {String/Boolean} [promptConfig.autocorrect='off']
        /// True/on to enable spell-checking/autocorrect features if supported by the browser.
        /// *
        /// @param {String/Boolean} [promptConfig.autocomplete='off']
        /// True/on to enable autoCompletion of supplied text input values if supported by the browser.
        /// *
        /// @param {Number} [promptConfig.maxlength=0]
        /// Maximum number of characters allowed in the input if supported by the browser.
        /// *
        /// @param {String} [promptConfig.type='text']
        /// The type of input field. Possible values (if supported by the browser) may include (text, search, number, range,
        /// color, tel, url, email, date, month, week, time, datetime) (defaults to 'text')
        /// *
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox prompt(JsString title, JsString msg, JsAction fn, object scope, object multiLine, JsString value, object promptConfig){return null;}
        /// <summary>
        /// Displays a new message box, or reinitializes an existing message box, based on the config options passed in. All
        /// display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally, although those calls
        /// are basic shortcuts and do not support all of the config options allowed here.
        /// *
        /// Example usage:
        /// *
        /// Ext.Msg.show({
        /// title: 'Address',
        /// msg: 'Please enter your address:',
        /// width: 300,
        /// buttons: Ext.MessageBox.OKCANCEL,
        /// multiLine: true,
        /// prompt : { maxlength : 180, autocapitalize : true },
        /// fn: saveAddress,
        /// iconCls: Ext.MessageBox.INFO
        /// });
        /// *
        /// @param {Object} config An object with the following config options:
        /// *
        /// @param {Object/Array} [config.buttons=false]
        /// A button config object or Array of the same(e.g., `Ext.MessageBox.OKCANCEL` or `{text:'Foo', itemId:'cancel'}`),
        /// or false to not show any buttons.
        /// *
        /// @param {String} config.cls
        /// A custom CSS class to apply to the message box's container element.
        /// *
        /// @param {Number} [config.defaultTextHeight=75]
        /// The default height in pixels of the message box's multiline textarea if displayed.
        /// *
        /// @param {Function} config.fn
        /// A callback function which is called when the dialog is dismissed by clicking on the configured buttons.
        /// @param {String} config.fn.buttonId The itemId of the button pressed, one of: 'ok', 'yes', 'no', 'cancel'.
        /// @param {String} config.fn.value Value of the input field if either `prompt` or `multiline` option is true.
        /// @param {Object} config.fn.opt The config object passed to show.
        /// *
        /// @param {Number} [config.width='auto']
        /// A fixed width for the MessageBox.
        /// *
        /// @param {Number} [config.height='auto']
        /// A fixed height for the MessageBox.
        /// *
        /// @param {Object} config.scope
        /// The scope of the callback function
        /// *
        /// @param {String} [config.icon='']
        /// A CSS class that provides a background image to be used as the body icon for the dialog
        /// (e.g. Ext.MessageBox.WARNING or 'custom-class').
        /// *
        /// @param {Boolean} [config.modal=true]
        /// False to allow user interaction with the page while the message box is displayed.
        /// *
        /// @param {String} config.msg
        /// A string that will replace the existing message box body text.
        /// Defaults to the XHTML-compliant non-breaking space character `&#160;`.
        /// *
        /// @param {Boolean} [config.multiline=false]
        /// True to prompt the user to enter multi-line text.
        /// *
        /// @param {Boolean} [config.prompt=false]
        /// True to prompt the user to enter single-line text (defaults to false)
        /// *
        /// @param {String} config.title
        /// The title text.
        /// *
        /// @param {String} config.value
        /// The string value to set into the active textbox element if displayed.
        /// *
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox show(object initialConfig){return null;}
        /// <summary>
        /// Adds the new {@link Ext.Toolbar} instance into this container
        /// @private
        /// </summary>
        public void updateButtons(object newButtons){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateIconCls(object newIconCls, object oldIconCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateMsg(object newMsg){}
        /// <summary>
        /// @private
        /// </summary>
        public void updatePromptConfig(object newPrompt, object oldPrompt){}
        /// <summary>
        /// Adds the new {@link Ext.Toolbar} instance into this container
        /// @private
        /// </summary>
        public void updateTitle(object newTitle){}
        /// <summary>
        /// Utility class for generating different styles of message boxes. The framework provides a global singleton
        /// {@link Ext.Msg} for common usage.
        /// *
        /// Note that the MessageBox is asynchronous. Unlike a regular JavaScript `alert` (which will halt browser execution),
        /// showing a MessageBox will not cause the code to stop. For this reason, if you have code that should only run _after_
        /// some user feedback from the MessageBox, you must use a callback function (see the `fn` configuration option parameter
        /// for the {@link #show show} method for more details).
        /// *
        /// # Example usage:
        /// *
        /// Basic alert:
        /// *
        /// @example preview
        /// Ext.Msg.alert('Title', 'The quick brown fox jumped over the lazy dog.', Ext.emptyFn);
        /// *
        /// Prompt for user data and process the result using a callback:
        /// *
        /// @example preview
        /// Ext.Msg.prompt('Name', 'Please enter your name:', function(text) {
        /// // process text value and close...
        /// });
        /// *
        /// Confirmation alert:
        /// *
        /// @example preview
        /// Ext.Msg.confirm("Confirmation", "Are you sure you want to do that?", Ext.emptyFn);
        /// *
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region MessageBoxConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class MessageBoxConfig
    {
        public MessageBoxConfig(){}
        /// <summary>
        /// An array of buttons, or an object of a button to be displayed in the toolbar of this {@link Ext.MessageBox}.
        /// </summary>
        public object buttons{get;set;}
        /// <summary>
        /// The default height in pixels of the message box's multiline textarea if displayed.
        /// @accessor
        /// </summary>
        public JsNumber defaultTextHeight{get;set;}
        /// <summary>
        /// Effect when the message box is being displayed.
        /// @todo not implemented
        /// </summary>
        public object enterAnimation{get;set;}
        /// <summary>
        /// Effect when the message box is being hidden.
        /// @todo not implemented
        /// </summary>
        public object exitAnimation{get;set;}
        /// <summary>
        /// CSS class for the icon When null disables the icon.
        /// @accessor
        /// </summary>
        public JsString iconCls{get;set;}
        /// <summary>
        /// The message to be displayed in the {@link Ext.MessageBox}.
        /// @accessor
        /// </summary>
        public JsString msg{get;set;}
        /// <summary>
        /// The configuration to be passed if you want an {@link Ext.field.Text} or {@link Ext.field.TextArea} field
        /// in your {@link Ext.MessageBox}.
        /// Pass an object with the property "multiline" with a value of true, if you want the prompt to use a TextArea.
        /// @accessor
        /// </summary>
        public object promptConfig{get;set;}
        /// <summary>
        /// The title of this {@link Ext.MessageBox}.
        /// @accessor
        /// </summary>
        public JsString title{get;set;}
    }
    #endregion
    #region ModelManager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ModelManager
    {
        public ModelManager(){}
        /// <summary>
        /// Creates a new instance of a Model using the given data.
        /// *
        /// This method is deprecated.  Use {@link Ext#create Ext.create} instead.  For example:
        /// *
        /// Ext.create('User', {
        /// first: 'Ed',
        /// last: 'Spencer'
        /// });
        /// *
        /// @param {Object} data Data to initialize the Model's fields with
        /// @param {String} name The name of the model to create
        /// @param {Number} id (Optional) unique id of the Model instance (see {@link Ext.data.Model})
        /// </summary>
        public void create(object config, JsString name, JsNumber id){}
        /// <summary>
        /// Returns the {@link Ext.data.Model} for a given model name
        /// @param {String/Object} id The id of the model or the model instance.
        /// @return {Ext.data.Model} a model class.
        /// </summary>
        public Model getModel(object id){return null;}
        /// <summary>
        /// @private
        /// Private callback called whenever a model has just been defined. This sets up any associations
        /// that were waiting for the given model to be defined
        /// @param {Function} model The model that was just created
        /// </summary>
        public void onModelDefined(JsAction model){}
        /// <summary>
        /// Registers an association where one of the models defined doesn't exist yet.
        /// The ModelManager will check when new models are registered if it can link them
        /// together
        /// @private
        /// @param {Ext.data.association.Association} association The association
        /// </summary>
        public void registerDeferredAssociation(Association association){}
        /// <summary>
        /// Registers a model definition. All model plugins marked with isDefault: true are bootstrapped
        /// immediately, as are any addition plugins defined in the model config.
        /// @private
        /// </summary>
        public void registerType(object name, object config){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.ModelManager
        /// @extends Ext.AbstractManager
        /// The ModelManager keeps track of all {@link Ext.data.Model} types defined in your application.
        /// __Creating Model Instances__
        /// Model instances can be created by using the {@link Ext#create Ext.create} method. Ext.create replaces
        /// the deprecated {@link #create Ext.ModelManager.create} method. It is also possible to create a model instance
        /// this by using the Model type directly. The following 3 snippets are equivalent:
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['first', 'last']
        /// });
        /// // method 1, create using Ext.create (recommended)
        /// Ext.create('User', {
        /// first: 'Ed',
        /// last: 'Spencer'
        /// });
        /// // method 2, create through the manager (deprecated)
        /// Ext.ModelManager.create({
        /// first: 'Ed',
        /// last: 'Spencer'
        /// }, 'User');
        /// // method 3, create on the type directly
        /// new User({
        /// first: 'Ed',
        /// last: 'Spencer'
        /// });
        /// __Accessing Model Types__
        /// A reference to a Model type can be obtained by using the {@link #getModel} function. Since models types
        /// are normal classes, you can access the type directly. The following snippets are equivalent:
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['first', 'last']
        /// });
        /// // method 1, access model type through the manager
        /// var UserType = Ext.ModelManager.getModel('User');
        /// // method 2, reference the type directly
        /// var UserType = User;
        /// @markdown
        /// @singleton
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.ModelManager
        /// @extends Ext.AbstractManager
        /// The ModelManager keeps track of all {@link Ext.data.Model} types defined in your application.
        /// __Creating Model Instances__
        /// Model instances can be created by using the {@link Ext#create Ext.create} method. Ext.create replaces
        /// the deprecated {@link #create Ext.ModelManager.create} method. It is also possible to create a model instance
        /// this by using the Model type directly. The following 3 snippets are equivalent:
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['first', 'last']
        /// });
        /// // method 1, create using Ext.create (recommended)
        /// Ext.create('User', {
        /// first: 'Ed',
        /// last: 'Spencer'
        /// });
        /// // method 2, create through the manager (deprecated)
        /// Ext.ModelManager.create({
        /// first: 'Ed',
        /// last: 'Spencer'
        /// }, 'User');
        /// // method 3, create on the type directly
        /// new User({
        /// first: 'Ed',
        /// last: 'Spencer'
        /// });
        /// __Accessing Model Types__
        /// A reference to a Model type can be obtained by using the {@link #getModel} function. Since models types
        /// are normal classes, you can access the type directly. The following snippets are equivalent:
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['first', 'last']
        /// });
        /// // method 1, access model type through the manager
        /// var UserType = Ext.ModelManager.getModel('User');
        /// // method 2, reference the type directly
        /// var UserType = User;
        /// @markdown
        /// @singleton
        /// </summary>
        public JsString extend{get;set;}
        public bool singleton{get;set;}
        public JsString typeName{get;set;}
    }
    #endregion
    #region NavigationBar
    [JsType(JsMode.Prototype, Export=false)]
    public partial class NavigationBar
    {
        public NavigationBar(NavigationBarConfig config){}
        public void applyItems(object items){}
        public NavigationBar(){}
        public void destroy(){}
        public void doBoxAdd(object item){}
        public void doBoxInsert(object index, object item){}
        public void initialize(){}
        public void onErased(){}
        public void onPainted(){}
        public void refreshTitlePosition(){}
        public void updateTitle(object newTitle){}
        /// <summary>
        /// Navigation  are most commonly used as dockedItems within an Ext.Panel.
        /// They can be docked at the 'top' or 'bottom' of a Panel by specifying
        /// the dock config.
        /// *
        /// The {@link #defaultType} of Toolbar's is '{@link Ext.Button button}'.
        /// *
        /// # Example:
        /// *
        /// var myNavBar = new Ext.NavigationBar({
        /// dock : 'top',
        /// title: 'Navigation',
        /// items: [
        /// {
        /// text: 'My Button'
        /// }
        /// ]
        /// });
        /// *
        /// var myPanel = new Ext.Panel({
        /// dockedItems: [myNavBar],
        /// fullscreen : true,
        /// html       : 'Test Panel'
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
        public bool isToolbar{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region NavigationBarConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class NavigationBarConfig
    {
        public NavigationBarConfig(){}
        /// <summary>
        /// The default xtype to create.
        /// @accessor
        /// </summary>
        public JsString defaultType{get;set;}
        /// <summary>
        /// The title of the toolbar.
        /// @accessor
        /// </summary>
        public JsString title{get;set;}
        /// <summary>
        /// Style options for Toolbar. Either 'light' or 'dark'.
        /// @accessor
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region Number
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Number
    {
        public Number(){}
        /// <summary>
        /// Checks whether or not the passed number is within a desired range.  If the number is already within the
        /// range it is returned, otherwise the min or max value is returned depending on which side of the range is
        /// exceeded. Note that this method returns the constrained value but does not change the current number.
        /// @param {Number} number The number to check
        /// @param {Number} min The minimum number in the range
        /// @param {Number} max The maximum number in the range
        /// @return {Number} The constrained value if outside the range, otherwise the current value
        /// </summary>
        public static JsNumber constrain(JsNumber number, JsNumber min, JsNumber max){return null;}
        /// <summary>
        /// Validate that a value is numeric and convert it to a number if necessary. Returns the specified default value if
        /// it is not.
        /// Ext.Number.from('1.23', 1); // returns 1.23
        /// Ext.Number.from('abc', 1); // returns 1
        /// @param {Object} value
        /// @param {Number} defaultValue The value to return if the original value is non-numeric
        /// @return {Number} value, if numeric, defaultValue otherwise
        /// </summary>
        public static JsNumber from(object value, JsNumber defaultValue){return null;}
        /// <summary>
        /// Snaps the passed number between stopping points based upon a passed increment value.
        /// @param {Number} value The unsnapped value.
        /// @param {Number} increment The increment by which the value must move.
        /// @param {Number} minValue The minimum value to which the returned value must be constrained. Overrides the increment..
        /// @param {Number} maxValue The maximum value to which the returned value must be constrained. Overrides the increment..
        /// @return {Number} The value of the nearest snap target.
        /// </summary>
        public static JsNumber snap(JsNumber value, JsNumber increment, JsNumber minValue, JsNumber maxValue){return null;}
        /// <summary>
        /// Formats a number using fixed-point notation
        /// @param {Number} value The number to format
        /// @param {Number} precision The number of digits to show after the decimal point
        /// </summary>
        public static void toFixed(JsNumber value, JsNumber precision){}
    }
    #endregion
    #region Panel
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Panel
    {
        public Panel(){}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Panel is a container that has specific functionality and structural components that make it the perfect building
        /// block for application-oriented user interfaces.
        /// *
        /// Panels are, by virtue of their inheritance from {@link Ext.Container}, capable of being configured with a {@link
        /// Ext.Container#layout layout}, and containing child Components.
        /// *
        /// When either specifying child {@link Ext.Container#items items} of a Panel, or dynamically {@link Ext.Container#add
        /// adding} Components to a Panel, remember to consider how you wish the Panel to arrange those child elements, and
        /// whether those child elements need to be sized using one of Ext's built-in `**{@link Ext.Container#layout layout}**`
        /// schemes.
        /// *
        /// # Example:
        /// *
        /// @example preview
        /// var panel = Ext.create('Ext.Panel', {
        /// fullscreen: true,
        /// *
        /// items: [
        /// {
        /// dock : 'top',
        /// xtype: 'toolbar',
        /// title: 'Standard Titlebar'
        /// },
        /// {
        /// dock : 'top',
        /// xtype: 'toolbar',
        /// ui   : 'light',
        /// items: [
        /// {
        /// text: 'Test Button'
        /// }
        /// ]
        /// }
        /// ],
        /// *
        /// html: 'Testing'
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Panel is a container that has specific functionality and structural components that make it the perfect building
        /// block for application-oriented user interfaces.
        /// *
        /// Panels are, by virtue of their inheritance from {@link Ext.Container}, capable of being configured with a {@link
        /// Ext.Container#layout layout}, and containing child Components.
        /// *
        /// When either specifying child {@link Ext.Container#items items} of a Panel, or dynamically {@link Ext.Container#add
        /// adding} Components to a Panel, remember to consider how you wish the Panel to arrange those child elements, and
        /// whether those child elements need to be sized using one of Ext's built-in `**{@link Ext.Container#layout layout}**`
        /// schemes.
        /// *
        /// # Example:
        /// *
        /// @example preview
        /// var panel = Ext.create('Ext.Panel', {
        /// fullscreen: true,
        /// *
        /// items: [
        /// {
        /// dock : 'top',
        /// xtype: 'toolbar',
        /// title: 'Standard Titlebar'
        /// },
        /// {
        /// dock : 'top',
        /// xtype: 'toolbar',
        /// ui   : 'light',
        /// items: [
        /// {
        /// text: 'Test Button'
        /// }
        /// ]
        /// }
        /// ],
        /// *
        /// html: 'Testing'
        /// });
        /// *
        /// </summary>
        public bool isPanel{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region PanelConfig
    [JsType(JsMode.Json, Export = false)]
    public partial class PanelConfig : Ext.ContainerConfig
    {
        public PanelConfig() { }
    }
    #endregion
    #region pass
    /// <summary>
    /// @method
    /// @member Ext
    /// @alias Ext.Function#pass
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class pass
    {
        public pass(){}
    }
    #endregion
    #region PluginManager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class PluginManager
    {
        public PluginManager(){}
        public void create(object config, object defaultType){}
        /// <summary>
        /// Returns all plugins registered with the given type. Here, 'type' refers to the type of plugin, not its ptype.
        /// @param {String} type The type to search for
        /// @param {Boolean} defaultsOnly True to only return plugins of this type where the plugin's isDefault property is
        /// truthy
        /// @return {Ext.AbstractPlugin[]} All matching plugins
        /// </summary>
        public void findByType(JsString type, bool defaultsOnly){}
        /// <summary>
        /// @singleton
        /// *
        /// Provides a registry of available Plugin classes indexed by a mnemonic code known as the Plugin's ptype.
        /// *
        /// A plugin may be specified simply as a *config object* as long as the correct `ptype` is specified:
        /// *
        /// {
        /// ptype: 'gridviewdragdrop',
        /// dragText: 'Drag and drop to reorganize'
        /// }
        /// *
        /// Or just use the ptype on its own:
        /// *
        /// 'gridviewdragdrop'
        /// *
        /// Alternatively you can instantiate the plugin with Ext.create:
        /// *
        /// Ext.create('Ext.view.plugin.AutoComplete', {
        /// ptype: 'gridviewdragdrop',
        /// dragText: 'Drag and drop to reorganize'
        /// })
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @singleton
        /// *
        /// Provides a registry of available Plugin classes indexed by a mnemonic code known as the Plugin's ptype.
        /// *
        /// A plugin may be specified simply as a *config object* as long as the correct `ptype` is specified:
        /// *
        /// {
        /// ptype: 'gridviewdragdrop',
        /// dragText: 'Drag and drop to reorganize'
        /// }
        /// *
        /// Or just use the ptype on its own:
        /// *
        /// 'gridviewdragdrop'
        /// *
        /// Alternatively you can instantiate the plugin with Ext.create:
        /// *
        /// Ext.create('Ext.view.plugin.AutoComplete', {
        /// ptype: 'gridviewdragdrop',
        /// dragText: 'Drag and drop to reorganize'
        /// })
        /// </summary>
        public JsString extend{get;set;}
        public bool singleton{get;set;}
        public JsString typeName{get;set;}
    }
    #endregion
    #region SegmentedButton
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SegmentedButton
    {
        public SegmentedButton(SegmentedButtonConfig config){}
        /// <summary>
        /// We override initItems so we can check for the pressed config.
        /// </summary>
        public void applyItems(){}
        /// <summary>
        /// @private
        /// </summary>
        public void applyPressedButtons(object newButtons, object oldButtons){}
        /// <summary>
        /// @event toggle
        /// Fires when any child button's pressed state has changed.
        /// @param {Ext.SegmentedButton} this
        /// @param {Ext.Button[]} pressedButtons The new pressed buttons
        /// </summary>
        public SegmentedButton(){}
        /// <summary>
        /// Disables all buttons
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Updates the pressed buttons.
        /// @private
        /// </summary>
        public void doUpdatePressedButtons(object buttons){}
        /// <summary>
        /// Enables all buttons
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Button sets a timeout of 10ms to remove the {@link #pressedCls} on the release event.
        /// We don't want this to happen, so lets return false and cancel the event.
        /// @private
        /// </summary>
        public void onButtonRelease(){}
        /// <summary>
        /// Called when the button has been tapped.
        /// Checks for {@link #allowMultiple} + {@link #allowDepress} and delegates accordingly
        /// @private
        /// </summary>
        public void onButtonTap(object btn){}
        /// <summary>
        /// Called when the {@link #pressedButtons} config gets changed. Fires off the toggle event.
        /// @private
        /// </summary>
        public void updatePressedButtons(object newButtons, object oldButtons){}
        /// <summary>
        /// SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be
        /// a child of a {@link Ext.Toolbar} and would be used to switch between different views.
        /// # Useful Properties:
        /// *
        /// - {@link #allowMultiple}
        /// # Example usage:
        /// *
        /// var segmentedButton = new Ext.SegmentedButton({
        /// allowMultiple: true,
        /// items: [
        /// {
        /// text: 'Option 1'
        /// },
        /// {
        /// text   : 'Option 2',
        /// pressed: true,
        /// handler: tappedFn
        /// },
        /// {
        /// text: 'Option 3'
        /// }
        /// ],
        /// listeners: {
        /// toggle: function(container, button, pressed){
        /// console.log("User toggled the '" + button.text + "' button: " + (pressed ? 'on' : 'off'));
        /// }
        /// }
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be
        /// a child of a {@link Ext.Toolbar} and would be used to switch between different views.
        /// # Useful Properties:
        /// *
        /// - {@link #allowMultiple}
        /// # Example usage:
        /// *
        /// var segmentedButton = new Ext.SegmentedButton({
        /// allowMultiple: true,
        /// items: [
        /// {
        /// text: 'Option 1'
        /// },
        /// {
        /// text   : 'Option 2',
        /// pressed: true,
        /// handler: tappedFn
        /// },
        /// {
        /// text: 'Option 3'
        /// }
        /// ],
        /// listeners: {
        /// toggle: function(container, button, pressed){
        /// console.log("User toggled the '" + button.text + "' button: " + (pressed ? 'on' : 'off'));
        /// }
        /// }
        /// });
        /// *
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region SegmentedButtonConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SegmentedButtonConfig
    {
        public SegmentedButtonConfig(){}
        /// <summary>
        /// Allow toggling the pressed state of each button.
        /// Defaults to true when `allowMultiple` is true.
        /// @accessor
        /// </summary>
        public bool allowDepress{get;set;}
        /// <summary>
        /// Allow multiple pressed buttons.
        /// @accessor
        /// </summary>
        public bool allowMultiple{get;set;}
        /// <summary>
        /// The pressed buttons for this segmented button.
        /// @accessor
        /// </summary>
        public JsArray pressedButtons{get;set;}
        /// <summary>
        /// CSS class when a button is in pressed state.
        /// @accessor
        /// </summary>
        public JsString pressedCls{get;set;}
    }
    #endregion
    #region Sheet
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Sheet
    {
        public Sheet(SheetConfig config){}
        public Sheet(){}
        public void updateStretchX(object newStretchX){}
        public void updateStretchY(object newStretchY){}
        /// <summary>
        /// A general sheet class. This renderable container provides base support for orientation-aware transitions for popup or
        /// side-anchored sliding Panels. In most cases, you should use {@link Ext.ActionSheet}, {@link Ext.MessageBox}, {@link Ext.picker.Picker} or {@link Ext.picker.Date}.
        /// *
        /// ## Example
        /// *
        /// @example preview
        /// var sheet = Ext.create('Ext.Sheet', {
        /// items: [
        /// {
        /// dock : 'bottom',
        /// xtype: 'button',
        /// text : 'Click me'
        /// }
        /// ]
        /// });
        /// sheet.show();
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// A general sheet class. This renderable container provides base support for orientation-aware transitions for popup or
        /// side-anchored sliding Panels. In most cases, you should use {@link Ext.ActionSheet}, {@link Ext.MessageBox}, {@link Ext.picker.Picker} or {@link Ext.picker.Date}.
        /// *
        /// ## Example
        /// *
        /// @example preview
        /// var sheet = Ext.create('Ext.Sheet', {
        /// items: [
        /// {
        /// dock : 'bottom',
        /// xtype: 'button',
        /// text : 'Click me'
        /// }
        /// ]
        /// });
        /// sheet.show();
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region SheetConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SheetConfig
    {
        public SheetConfig(){}
        /// <summary>
        /// Whether or not this component is absolutely centered inside its container
        /// @accessor
        /// @evented
        /// </summary>
        public bool centered{get;set;}
        /// <summary>
        /// The viewport side used as the enter point when shown (top, bottom, left, right)
        /// Applies to sliding animation effects only. Defaults to 'bottom'
        /// </summary>
        public JsString enter{get;set;}
        /// <summary>
        /// the named Ext.anim effect or animation configuration object used for transitions
        /// when the component is shown. Defaults to 'slide'
        /// </summary>
        public object enterAnimation{get;set;}
        /// <summary>
        /// The viewport side used as the exit point when hidden (top, bottom, left, right)
        /// Applies to sliding animation effects only. Defaults to 'bottom'
        /// </summary>
        public JsString exit{get;set;}
        /// <summary>
        /// the named Ext.anim effect or animation configuration object used for transitions
        /// when the component is hidden. Defaults to 'slide'
        /// </summary>
        public object exitAnimation{get;set;}
        /// <summary>
        /// True to hide this component
        /// @accessor
        /// </summary>
        public bool hidden{get;set;}
        /// <summary>
        /// When using a {@link #modal} Component, setting this to true (the default) will
        /// hide the modal mask and the Component when the mask is tapped on
        /// @accessor
        /// </summary>
        public bool hideOnMaskTap{get;set;}
        /// <summary>
        /// True to make this Component modal. This will create a mask underneath the Component
        /// that covers the whole page and does not allow the user to interact with any other Components until this
        /// Component is dismissed
        /// @accessor
        /// </summary>
        public bool modal{get;set;}
        /// <summary>
        /// True to stretch this sheet horizontally.
        /// </summary>
        public bool stretchX{get;set;}
        /// <summary>
        /// True to stretch this sheet vertically.
        /// </summary>
        public bool stretchY{get;set;}
    }
    #endregion
    #region Sortable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Sortable
    {
        public Sortable(){}
        public Sortable(SortableConfig config){}
        public void calculateBoxes(){}
        /// <summary>
        /// Creates new Sortable.
        /// @param {Mixed} el
        /// @param {Object} config
        /// </summary>
        public Sortable(object el, object config){}
        /// <summary>
        /// Disables sorting for this Sortable.
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enables sorting for this Sortable.
        /// This method is invoked immediately after construction of a Sortable unless
        /// the disabled configuration is set to true.
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Method to determine whether this Sortable is currently disabled.
        /// @return {Boolean} the disabled state of this Sortable.
        /// </summary>
        public bool isDisabled(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently sorting.
        /// @return {Boolean} the sorting state of this Sortable.
        /// </summary>
        public bool isHorizontal(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently sorting.
        /// @return {Boolean} the sorting state of this Sortable.
        /// </summary>
        public bool isSorting(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently disabled.
        /// @return {Boolean} the disabled state of this Sortable.
        /// </summary>
        public bool isVertical(){return false;}
        public void onDrag(object draggable, object e){}
        public void onDragEnd(object draggable, object e){}
        public void onSortStart(object e, object t){}
        public void onStart(object e, object t){}
        /// <summary>
        /// @cfg {String} cancelSelector
        /// A simple CSS selector that represents elements within the draggable
        /// that should NOT initiate a drag.
        /// </summary>
        public JsString cancelSelector{get;set;}
        /// <summary>
        /// @cfg {String} direction
        /// Possible values: 'vertical', 'horizontal'
        /// Defaults to 'vertical'
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// @cfg {Boolean} disabled
        /// Passing in true will disable this Sortable.
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// @cfg {String} group
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting. Defaults to 'base'
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// @cfg {String} handleSelector
        /// A simple CSS selector to indicate what is the handle to drag the Sortable.
        /// </summary>
        public JsString handleSelector{get;set;}
        /// <summary>
        /// @cfg {String} itemSelector
        /// A simple CSS selector that represents individual items within the Sortable.
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// @cfg {Boolean} revert
        /// This should NOT be changed.
        /// @private
        /// </summary>
        public bool revert{get;set;}
        /// <summary>
        /// Read-only property that indicates whether a Sortable is currently sorting.
        /// @type Boolean
        /// @private
        /// </summary>
        public bool sorting{get;set;}
    }
    #endregion
    #region SortableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SortableConfig
    {
        public SortableConfig(){}
        /// <summary>
        /// A simple CSS selector that represents elements within the draggable
        /// that should NOT initiate a drag.
        /// </summary>
        public JsString cancelSelector{get;set;}
        /// <summary>
        /// An Element to constrain the Sortable dragging to. Defaults to <tt>window</tt>.
        /// If <tt>true</tt> is specified, the dragging will be constrained to the element
        /// of the sortable.
        /// </summary>
        public object constrain{get;set;}
        /// <summary>
        /// How many milliseconds a user must hold the draggable before starting a
        /// drag operation. Defaults to 0 or immediate.
        /// @private
        /// @accessor
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// Possible values: 'vertical', 'horizontal'
        /// Defaults to 'vertical'
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// Passing in true will disable this Sortable.
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting. Defaults to 'base'
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// A simple CSS selector to indicate what is the handle to drag the Sortable.
        /// </summary>
        public JsString handleSelector{get;set;}
        /// <summary>
        /// A simple CSS selector that represents individual items within the Sortable.
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// This should NOT be changed.
        /// @private
        /// </summary>
        public bool revert{get;set;}
    }
    #endregion
    #region Spacer
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Spacer
    {
        public Spacer(){}
        public Spacer(SpacerConfig config){}
        public Spacer(object config){}
        /// <summary>
        /// The {@link Ext.Spacer} component is generally used to put space between items in {@link Ext.Toolbar} components.
        /// ## Examples
        /// By default the {@link #flex} configuration is set to 1:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// items: [
        /// {
        /// xtype: 'button',
        /// text : 'Button One'
        /// },
        /// {
        /// xtype: 'spacer'
        /// },
        /// {
        /// xtype: 'button',
        /// text : 'Button Two'
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// Alternatively you can just set the {@link #width} configuration which will get the {@link Ext.Spacer} a fixed width:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: {
        /// type: 'vbox',
        /// pack: 'center',
        /// align: 'stretch'
        /// },
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// items: [
        /// {
        /// xtype: 'button',
        /// text : 'Button One'
        /// },
        /// {
        /// xtype: 'spacer',
        /// width: 50
        /// },
        /// {
        /// xtype: 'button',
        /// text : 'Button Two'
        /// }
        /// ]
        /// },
        /// {
        /// xtype: 'container',
        /// items: [
        /// {
        /// xtype: 'button',
        /// text : 'Change Ext.Spacer width',
        /// handler: function() {
        /// //get the spacer using ComponentQuery
        /// var spacer = Ext.ComponentQuery.query('spacer')[0],
        /// from = 10,
        /// to = 250;
        /// //set the width to a random number
        /// (to - from + 1) + from));
        /// }
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// You can also insert multiple {@link Ext.Spacer}'s:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// items: [
        /// {
        /// xtype: 'button',
        /// text : 'Button One'
        /// },
        /// {
        /// xtype: 'spacer'
        /// },
        /// {
        /// xtype: 'button',
        /// text : 'Button Two'
        /// },
        /// {
        /// xtype: 'spacer',
        /// width: 20
        /// },
        /// {
        /// xtype: 'button',
        /// text : 'Button Three'
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// The {@link Ext.Spacer} component is generally used to put space between items in {@link Ext.Toolbar} components.
        /// ## Examples
        /// By default the {@link #flex} configuration is set to 1:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// items: [
        /// {
        /// xtype: 'button',
        /// text : 'Button One'
        /// },
        /// {
        /// xtype: 'spacer'
        /// },
        /// {
        /// xtype: 'button',
        /// text : 'Button Two'
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// Alternatively you can just set the {@link #width} configuration which will get the {@link Ext.Spacer} a fixed width:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: {
        /// type: 'vbox',
        /// pack: 'center',
        /// align: 'stretch'
        /// },
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// items: [
        /// {
        /// xtype: 'button',
        /// text : 'Button One'
        /// },
        /// {
        /// xtype: 'spacer',
        /// width: 50
        /// },
        /// {
        /// xtype: 'button',
        /// text : 'Button Two'
        /// }
        /// ]
        /// },
        /// {
        /// xtype: 'container',
        /// items: [
        /// {
        /// xtype: 'button',
        /// text : 'Change Ext.Spacer width',
        /// handler: function() {
        /// //get the spacer using ComponentQuery
        /// var spacer = Ext.ComponentQuery.query('spacer')[0],
        /// from = 10,
        /// to = 250;
        /// //set the width to a random number
        /// (to - from + 1) + from));
        /// }
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// You can also insert multiple {@link Ext.Spacer}'s:
        /// @example preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// items: [
        /// {
        /// xtype: 'button',
        /// text : 'Button One'
        /// },
        /// {
        /// xtype: 'spacer'
        /// },
        /// {
        /// xtype: 'button',
        /// text : 'Button Two'
        /// },
        /// {
        /// xtype: 'spacer',
        /// width: 20
        /// },
        /// {
        /// xtype: 'button',
        /// text : 'Button Three'
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region SpacerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SpacerConfig
    {
        public SpacerConfig(){}
        /// <summary>
        /// The flex value of this spacer. This defaults to 1, if no width has been set.
        /// @accessor
        /// </summary>
        public JsNumber flex{get;set;}
        /// <summary>
        /// The width of this spacer. If this is set, the value of {@link #flex} will be ignored.
        /// @accessor
        /// </summary>
        public JsNumber width{get;set;}
    }
    #endregion
    #region String
    [JsType(JsMode.Prototype, Export=false)]
    public partial class String
    {
        public String(){}
        /// <summary>
        /// Capitalize the given string
        /// @param {String} string
        /// @return {String}
        /// </summary>
        public static void capitalize(JsString @string){}
        /// <summary>
        /// Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
        /// @param {String} value The string to truncate
        /// @param {Number} length The maximum length to allow before truncating
        /// @param {Boolean} word True to try to find a common word break
        /// @return {String} The converted text
        /// </summary>
        public static JsString ellipsis(JsString value, JsNumber len, bool word){return null;}
        /// <summary>
        /// Escapes the passed string for ' and \
        /// @param {String} string The string to escape
        /// @return {String} The escaped string
        /// </summary>
        public static JsString escape(JsString @string){return null;}
        /// <summary>
        /// Escapes the passed string for use in a regular expression
        /// @param {String} string
        /// @return {String}
        /// </summary>
        public static void escapeRegex(JsString @string){}
        /// <summary>
        /// Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
        /// token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
        /// <pre><code>
        /// var cls = 'my-class', text = 'Some text';
        /// var s = Ext.String.format('&lt;div class="{0}">{1}&lt;/div>', cls, text);
        /// // s now contains the string: '&lt;div class="my-class">Some text&lt;/div>'
        /// </code></pre>
        /// @param {String} string The tokenized string to be formatted
        /// @param {String} value1 The value to replace token {0}
        /// @param {String} value2 Etc...
        /// @return {String} The formatted string
        /// </summary>
        public static JsString format(JsString format){return null;}
        /// <summary>
        /// Pads the left side of a string with a specified character.  This is especially useful
        /// for normalizing number and date strings.  Example usage:
        /// *
        /// <pre><code>
        /// var s = Ext.String.leftPad('123', 5, '0');
        /// // s now contains the string: '00123'
        /// </code></pre>
        /// @param {String} string The original string
        /// @param {Number} size The total length of the output string
        /// @param {String} character (optional) The character with which to pad the original string (defaults to empty string " ")
        /// @return {String} The padded string
        /// </summary>
        public static JsString leftPad(JsString @string, JsNumber size, JsString character){return null;}
        /// <summary>
        /// Returns a string with a specified number of repititions a given string pattern.
        /// The pattern be separated by a different string.
        /// *
        /// var s = Ext.String.repeat('---', 4); // = '------------'
        /// var t = Ext.String.repeat('--', 3, '/'); // = '--/--/--'
        /// *
        /// @param {String} pattern The pattern to repeat.
        /// @param {Number} count The number of times to repeat the pattern (may be 0).
        /// @param {String} sep An option string to separate each pattern.
        /// </summary>
        public static void repeat(JsString pattern, JsNumber count, JsString sep){}
        /// <summary>
        /// Utility function that allows you to easily switch a string between two alternating values.  The passed value
        /// is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
        /// they are already different, the first value passed in is returned.  Note that this method returns the new value
        /// but does not change the current string.
        /// <pre><code>
        /// // alternate sort directions
        /// sort = Ext.String.toggle(sort, 'ASC', 'DESC');
        /// // instead of conditional logic:
        /// sort = (sort == 'ASC' ? 'DESC' : 'ASC');
        /// </code></pre>
        /// @param {String} string The current string
        /// @param {String} value The value to compare to the current string
        /// @param {String} other The new value to use if the string already equals the first value passed in
        /// @return {String} The new value
        /// </summary>
        public static JsString toggle(JsString @string, JsString value, JsString other){return null;}
        /// <summary>
        /// Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
        /// @example
        /// var s = '  foo bar  ';
        /// alert('-' + s + '-');         //alerts "- foo bar -"
        /// alert('-' + Ext.String.trim(s) + '-');  //alerts "-foo bar-"
        /// @param {String} string The string to escape
        /// @return {String} The trimmed string
        /// </summary>
        public static JsString trim(JsString @string){return null;}
        /// <summary>
        /// Appends content to the query string of a URL, handling logic for whether to place
        /// a question mark or ampersand.
        /// @param {String} url The URL to append to.
        /// @param {String} string The content to append to the URL.
        /// @return (String) The resulting URL
        /// </summary>
        public static void urlAppend(JsString url, JsString @string){}
        public JsRegExp escapeRe{get;set;}
        public JsRegExp escapeRegexRe{get;set;}
        public JsRegExp formatRe{get;set;}
        /// <summary>
        /// @class Ext.String
        /// *
        /// A collection of useful static methods to deal with strings
        /// @singleton
        /// </summary>
        public JsRegExp trimRegex{get;set;}
    }
    #endregion
    #region TaskQueue
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TaskQueue
    {
        public TaskQueue(){}
        public void queue(object fn, object scope, object args){}
        public void run(){}
        public void tick(){}
        public object delay{get;set;}
        public object lastTickTime{get;set;}
        public bool singleton{get;set;}
    }
    #endregion
    #region Template
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Template
    {
        public Template(){}
        public Template(TemplateConfig config){}
        /// <summary>
        /// Applies the supplied `values` to the template and appends the new node(s) to the specified `el`.
        /// *
        /// For example usage see {@link Ext.Template Ext.Template class docs}.
        /// *
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/Array} values The template values. See {@link #applyTemplate} for details.
        /// @param {Boolean} returnElement (optional) true to return an Ext.Element.
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object append(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Returns an HTML fragment of this template with the specified values applied.
        /// *
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric:
        /// *
        /// var tpl = new Ext.Template('Name: {0}, Age: {1}');
        /// tpl.apply(['John', 25]);
        /// *
        /// or an object:
        /// *
        /// var tpl = new Ext.Template('Name: {name}, Age: {age}');
        /// tpl.apply({name: 'John', age: 25});
        /// *
        /// @return {String} The HTML fragment
        /// </summary>
        public JsString apply(object values){return null;}
        /// <summary>
        /// Appends the result of this template to the provided output array.
        /// @param {Object/Array} values The template values. See {@link #apply}.
        /// @param {Array} out The array to which output is pushed.
        /// @return {Array} The given out array.
        /// </summary>
        public JsArray applyOut(object values, JsArray @out){return null;}
        /// <summary>
        /// @method applyTemplate
        /// @member Ext.Template
        /// Alias for {@link #apply}.
        /// @alias Ext.Template#apply
        /// </summary>
        public void applyTemplate(){}
        /// <summary>
        /// Compiles the template into an internal function, eliminating the RegEx overhead.
        /// @return {Ext.Template} this
        /// </summary>
        public Template compile(){return null;}
        /// <summary>
        /// Creates new template.
        /// @param {String...} html List of strings to be concatenated into template.
        /// Alternatively an array of strings can be given, but then no config object may be passed.
        /// @param {Object} config (optional) Config object
        /// </summary>
        public Template(object html){}
        public void doInsert(object where, object el, object values, object returnEl){}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) after el.
        /// *
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/Array} values The template values. See {@link #applyTemplate} for details.
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element.
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertAfter(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) before el.
        /// *
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/Array} values The template values. See {@link #applyTemplate} for details.
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element.
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertBefore(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) as the first child of el.
        /// *
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/Array} values The template values. See {@link #applyTemplate} for details.
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element.
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertFirst(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Applies the supplied values to the template and overwrites the content of el with the new node(s).
        /// *
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/Array} values The template values. See {@link #applyTemplate} for details.
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element.
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object overwrite(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Sets the HTML used as the template and optionally compiles it.
        /// @param {String} html
        /// @param {Boolean} compile (optional) True to compile the template.
        /// @return {Ext.Template} this
        /// </summary>
        public Template set(JsString html, bool compile){return null;}
        public JsRegExp compileARe{get;set;}
        public JsRegExp compileBRe{get;set;}
        public JsRegExp compileCRe{get;set;}
        /// <summary>
        /// @cfg {Boolean} disableFormats
        /// True to disable format functions in the template. If the template doesn't contain
        /// format functions, setting disableFormats to true will reduce apply time. Defaults to false.
        /// </summary>
        public bool disableFormats{get;set;}
        public bool isTemplate{get;set;}
        /// <summary>
        /// @cfg {Boolean} disableFormats
        /// True to disable format functions in the template. If the template doesn't contain
        /// format functions, setting disableFormats to true will reduce apply time. Defaults to false.
        /// </summary>
        public JsRegExp re{get;set;}
    }
    #endregion
    #region TemplateConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TemplateConfig
    {
        public TemplateConfig(){}
        /// <summary>
        /// True to immediately compile the template. Defaults to false.
        /// </summary>
        public bool compiled{get;set;}
    }
    #endregion
    #region Title
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Title
    {
        public Title(TitleConfig config){}
        public Title(){}
        public void updateTitle(object newTitle){}
        /// <summary>
        /// {@link Ext.Title} is used for the {@link Ext.Toolbar#title} configuration in the {@link Ext.Toolbar} component.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// {@link Ext.Title} is used for the {@link Ext.Toolbar#title} configuration in the {@link Ext.Toolbar} component.
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region TitleConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TitleConfig
    {
        public TitleConfig(){}
        /// <summary>
        /// The title text
        /// </summary>
        public JsString title{get;set;}
    }
    #endregion
    #region Toolbar
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Toolbar
    {
        public Toolbar(ToolbarConfig config){}
        public Toolbar(){}
        public void applyTitle(object title){}
        /// <summary>
        /// Hides the title if it exists.
        /// </summary>
        public void hideTitle(){}
        /// <summary>
        /// Shows the title if it exists.
        /// </summary>
        public void showTitle(){}
        public void updateTitle(object newTitle, object oldTitle){}
        /// <summary>
        /// {@link Ext.Toolbar}s are most commonly used as docked items as within a {@link Ext.Container}. They can be docked either `top` or `bottom` using the {@link #docked} configuration.
        /// The {@link #defaultType} of {@link Ext.Toolbar} is {@link Ext.Button}.
        /// ## Examples
        /// @example miniphone preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: {
        /// type: 'vbox',
        /// pack: 'center'
        /// },
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// title: 'My Toolbar'
        /// },
        /// {
        /// xtype: 'container',
        /// layout: {
        /// type: 'vbox',
        /// pack: 'center'
        /// },
        /// defaults: {
        /// xtype: 'button',
        /// margin: '10 10 0 10'
        /// },
        /// items: [
        /// {
        /// text: 'Toggle docked',
        /// handler: function() {
        /// var toolbar = Ext.ComponentQuery.query('toolbar')[0],
        /// newDocked = (toolbar.getDocked() == 'top') ? 'bottom' : 'top';
        /// toolbar.setDocked(newDocked);
        /// }
        /// },
        /// {
        /// text: 'Toggle UI',
        /// handler: function() {
        /// var toolbar = Ext.ComponentQuery.query('toolbar')[0],
        /// newUi = (toolbar.getUi() == 'light') ? 'dark' : 'light';
        /// toolbar.setUi(newUi);
        /// }
        /// },
        /// {
        /// text: 'Change title',
        /// handler: function() {
        /// var toolbar = Ext.ComponentQuery.query('toolbar')[0],
        /// titles = ['My Toolbar', 'Ext.Toolbar', 'Configurations are awesome!', 'Beautiful.'],
        /// //internally, the title configuration gets converted into a {@link Ext.Title} component,
        /// //so you must get the title configuration of that component
        /// title = toolbar.getTitle().getTitle(),
        /// newTitle = titles[titles.indexOf(title) + 1] || titles[0];
        /// toolbar.setTitle(newTitle);
        /// }
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// </summary>
        public JsString extend{get;set;}
        public bool isToolbar{get;set;}
        /// <summary>
        /// {@link Ext.Toolbar}s are most commonly used as docked items as within a {@link Ext.Container}. They can be docked either `top` or `bottom` using the {@link #docked} configuration.
        /// The {@link #defaultType} of {@link Ext.Toolbar} is {@link Ext.Button}.
        /// ## Examples
        /// @example miniphone preview
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: {
        /// type: 'vbox',
        /// pack: 'center'
        /// },
        /// items: [
        /// {
        /// xtype : 'toolbar',
        /// docked: 'top',
        /// title: 'My Toolbar'
        /// },
        /// {
        /// xtype: 'container',
        /// layout: {
        /// type: 'vbox',
        /// pack: 'center'
        /// },
        /// defaults: {
        /// xtype: 'button',
        /// margin: '10 10 0 10'
        /// },
        /// items: [
        /// {
        /// text: 'Toggle docked',
        /// handler: function() {
        /// var toolbar = Ext.ComponentQuery.query('toolbar')[0],
        /// newDocked = (toolbar.getDocked() == 'top') ? 'bottom' : 'top';
        /// toolbar.setDocked(newDocked);
        /// }
        /// },
        /// {
        /// text: 'Toggle UI',
        /// handler: function() {
        /// var toolbar = Ext.ComponentQuery.query('toolbar')[0],
        /// newUi = (toolbar.getUi() == 'light') ? 'dark' : 'light';
        /// toolbar.setUi(newUi);
        /// }
        /// },
        /// {
        /// text: 'Change title',
        /// handler: function() {
        /// var toolbar = Ext.ComponentQuery.query('toolbar')[0],
        /// titles = ['My Toolbar', 'Ext.Toolbar', 'Configurations are awesome!', 'Beautiful.'],
        /// //internally, the title configuration gets converted into a {@link Ext.Title} component,
        /// //so you must get the title configuration of that component
        /// title = toolbar.getTitle().getTitle(),
        /// newTitle = titles[titles.indexOf(title) + 1] || titles[0];
        /// toolbar.setTitle(newTitle);
        /// }
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region ToolbarConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ToolbarConfig
    {
        public ToolbarConfig(){}
        /// <summary>
        /// The default xtype to create.
        /// @accessor
        /// </summary>
        public JsString defaultType{get;set;}
        /// <summary>
        /// The docked position for this {@link Ext.Toolbar}. Must be either `top` or `bottom`.
        /// @accessor
        /// </summary>
        public JsString docked{get;set;}
        /// <summary>
        /// The title of the toolbar.
        /// @accessor
        /// </summary>
        public JsString title{get;set;}
        /// <summary>
        /// The ui for this {@link Ext.Toolbar}. Either 'light' or 'dark'. Cou can create more UIs by using using the CSS Mixin {@link #sencha-toolbar-ui}
        /// @accessor
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region Validator
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Validator
    {
        public Validator(){}
        public void among(object value, object values, object name){}
        public void element(object value, object name){}
        public void number(object value, object name){}
        public bool singleton{get;set;}
    }
    #endregion
    #region Video
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Video
    {
        public Video(VideoConfig config){}
        public Video(){}
        public void initialize(){}
        /// <summary>
        /// @private
        /// Called when the {@link #ghost} element is tapped.
        /// </summary>
        public void onGhostTap(){}
        /// <summary>
        /// Updates the URL to the poster, even if it is rendered.
        /// @param {Object} newUrl
        /// </summary>
        public void updatePosterUrl(object newUrl){}
        /// <summary>
        /// Provides a simple Container for HTML5 Video.
        /// *
        /// # Useful Properties
        /// *
        /// - {@link #url}
        /// - {@link #autoPause}
        /// - {@link #autoResume}
        /// *
        /// # Useful Methods
        /// *
        /// - {@link #pause}
        /// - {@link #play}
        /// - {@link #toggle}
        /// *
        /// # Example code:
        /// *
        /// var panel = new Ext.Panel({
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype    : 'video',
        /// x        : 600,
        /// y        : 300,
        /// width    : 175,
        /// height   : 98,
        /// url      : "porsche911.mov",
        /// posterUrl: 'porsche.png'
        /// }
        /// ]
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Provides a simple Container for HTML5 Video.
        /// *
        /// # Useful Properties
        /// *
        /// - {@link #url}
        /// - {@link #autoPause}
        /// - {@link #autoResume}
        /// *
        /// # Useful Methods
        /// *
        /// - {@link #pause}
        /// - {@link #play}
        /// - {@link #toggle}
        /// *
        /// # Example code:
        /// *
        /// var panel = new Ext.Panel({
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype    : 'video',
        /// x        : 600,
        /// y        : 300,
        /// width    : 175,
        /// height   : 98,
        /// url      : "porsche911.mov",
        /// posterUrl: 'porsche.png'
        /// }
        /// ]
        /// });
        /// *
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region VideoConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class VideoConfig
    {
        public VideoConfig(){}
        /// <summary>
        /// Location of a poster image to be shown before showing the video.
        /// @accessor
        /// </summary>
        public JsString posterUrl{get;set;}
        /// <summary>
        /// Location of the video to play. This should be in H.264 format and in a .mov file format.
        /// @accessor
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region XTemplate
    [JsType(JsMode.Prototype, Export=false)]
    public partial class XTemplate
    {
        public XTemplate(){}
        /// <summary>
        /// @cfg {Boolean} compiled
        /// Only applies to {@link Ext.Template}, XTemplates are compiled automatically on the
        /// first call to {@link #apply} or {@link #applyOut}.
        /// </summary>
        public void apply(object values){}
        public void applyOut(object values, object @out){}
        /// <summary>
        /// Does nothing. XTemplates are compiled automatically, so this function simply returns this.
        /// @return {Ext.XTemplate} this
        /// </summary>
        public XTemplate compile(){return null;}
        /// <summary>
        /// A template class that supports advanced functionality like:
        /// *
        /// - Autofilling arrays using templates and sub-templates
        /// - Conditional processing with basic comparison operators
        /// - Basic math function support
        /// - Execute arbitrary inline code with special built-in template variables
        /// - Custom member functions
        /// - Many special tags and built-in operators that aren't defined as part of the API, but are supported in the templates that can be created
        /// *
        /// XTemplate provides the templating mechanism built into {@link Ext.dataview.DataView}.
        /// *
        /// The {@link Ext.Template} describes the acceptable parameters to pass to the constructor. The following examples
        /// demonstrate all of the supported features.
        /// *
        /// # Sample Data
        /// *
        /// This is the data object used for reference in each code example:
        /// *
        /// var data = {
        /// name: 'Don Griffin',
        /// title: 'Senior Technomage',
        /// company: 'Sencha Inc.',
        /// drinks: ['Coffee', 'Water', 'More Coffee'],
        /// kids: [
        /// { name: 'Aubrey',  age: 17 },
        /// { name: 'Joshua',  age: 13 },
        /// { name: 'Cale',    age: 10 },
        /// { name: 'Nikol',   age: 5 },
        /// { name: 'Solomon', age: 0 }
        /// ]
        /// };
        /// *
        /// # Auto filling of arrays
        /// *
        /// The **tpl** tag and the **for** operator are used to process the provided data object:
        /// *
        /// - If the value specified in for is an array, it will auto-fill, repeating the template block inside the tpl
        /// tag for each item in the array.
        /// - If for="." is specified, the data object provided is examined.
        /// - While processing an array, the special variable {#} will provide the current array index + 1 (starts at 1, not 0).
        /// *
        /// Examples:
        /// *
        /// <tpl for=".">...</tpl>       // loop through array at root node
        /// <tpl for="foo">...</tpl>     // loop through array at foo node
        /// <tpl for="foo.bar">...</tpl> // loop through array at foo.bar node
        /// *
        /// Using the sample data above:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Kids: ',
        /// '<tpl for=".">',       // process the data.kids node
        /// '<p>{#}. {name}</p>',  // use current array index to autonumber
        /// '</tpl></p>'
        /// );
        /// tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
        /// *
        /// An example illustrating how the **for** property can be leveraged to access specified members of the provided data
        /// object to populate the template:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Title: {title}</p>',
        /// '<p>Company: {company}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',     // interrogate the kids property within the data
        /// '<p>{name}</p>',
        /// '</tpl></p>'
        /// );
        /// tpl.overwrite(panel.body, data);  // pass the root node of the data object
        /// *
        /// Flat arrays that contain values (and not objects) can be auto-rendered using the special **`{.}`** variable inside a
        /// loop. This variable will represent the value of the array at the current index:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>{name}\'s favorite beverages:</p>',
        /// '<tpl for="drinks">',
        /// '<div> - {.}</div>',
        /// '</tpl>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// *
        /// When processing a sub-template, for example while looping through a child array, you can access the parent object's
        /// members via the **parent** object:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',
        /// '<tpl if="age &gt; 1">',
        /// '<p>{name}</p>',
        /// '<p>Dad: {parent.name}</p>',
        /// '</tpl>',
        /// '</tpl></p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// *
        /// # Conditional processing with basic comparison operators
        /// *
        /// The **tpl** tag and the **if** operator are used to provide conditional checks for deciding whether or not to render
        /// specific parts of the template.
        /// *
        /// Using the sample data above:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',
        /// '<tpl if="age &gt; 1">',
        /// '<p>{name}</p>',
        /// '</tpl>',
        /// '</tpl></p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// *
        /// More advanced conditionals are also supported:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',
        /// '<p>{name} is a ',
        /// '<tpl if="age &gt;= 13">',
        /// '<p>teenager</p>',
        /// '<tpl elseif="age &gt;= 2">',
        /// '<p>kid</p>',
        /// '<tpl else">',
        /// '<p>baby</p>',
        /// '</tpl>',
        /// '</tpl></p>'
        /// );
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',
        /// '<p>{name} is a ',
        /// '<tpl switch="name">',
        /// '<tpl case="Aubrey" case="Nikol">',
        /// '<p>girl</p>',
        /// '<tpl default">',
        /// '<p>boy</p>',
        /// '</tpl>',
        /// '</tpl></p>'
        /// );
        /// *
        /// A `break` is implied between each case and default, however, multiple cases can be listed
        /// in a single &lt;tpl&gt; tag.
        /// *
        /// # Using double quotes
        /// *
        /// Examples:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// "<tpl if='age > 1 && age < 10'>Child</tpl>",
        /// "<tpl if='age >= 10 && age < 18'>Teenager</tpl>",
        /// "<tpl if='this.isGirl(name)'>...</tpl>",
        /// '<tpl if="id == \'download\'">...</tpl>',
        /// "<tpl if='needsIcon'><img src='{icon}' class='{iconCls}'/></tpl>",
        /// "<tpl if='name == \"Don\"'>Hello</tpl>"
        /// );
        /// *
        /// # Basic math support
        /// *
        /// The following basic math operators may be applied directly on numeric data values:
        /// *
        /// + - * /
        /// *
        /// For example:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',
        /// '<tpl if="age &gt; 1">',  // <-- Note that the > is encoded
        /// '<p>{#}: {name}</p>',  // <-- Auto-number each item
        /// '<p>In 5 Years: {age+5}</p>',  // <-- Basic math
        /// '<p>Dad: {parent.name}</p>',
        /// '</tpl>',
        /// '</tpl></p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// *
        /// # Execute arbitrary inline code with special built-in template variables
        /// *
        /// Anything between `{[ ... ]}` is considered code to be executed in the scope of the template.
        /// The expression is evaluated and the result is included in the generated result. There are
        /// some special variables available in that code:
        /// *
        /// - **out**: The output array into which the template is being appended (using `push` to later
        /// `join`).
        /// - **values**: The values in the current scope. If you are using scope changing sub-templates,
        /// you can change what values is.
        /// - **parent**: The scope (values) of the ancestor template.
        /// - **xindex**: If you are in a looping template, the index of the loop you are in (1-based).
        /// - **xcount**: If you are in a looping template, the total length of the array you are looping.
        /// *
        /// This example demonstrates basic row striping using an inline code block and the xindex variable:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Company: {[values.company.toUpperCase() + ", " + values.title]}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',
        /// '<div class="{[xindex % 2 === 0 ? "even" : "odd"]}">',
        /// '{name}',
        /// '</div>',
        /// '</tpl></p>'
        /// );
        /// *
        /// Any code contained in "verbatim" blocks (using "{% ... %}") will be inserted directly in
        /// the generated code for the template. These blocks are not included in the output. This
        /// can be used for simple things like break/continue in a loop, or control structures or
        /// method calls (when they don't produce output). The `this` references the template instance.
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Company: {[values.company.toUpperCase() + ", " + values.title]}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',
        /// '{% if (xindex % 2 === 0) continue; %}',
        /// '{name}',
        /// '{% if (xindex > 100) break; %}',
        /// '</div>',
        /// '</tpl></p>'
        /// );
        /// *
        /// # Template member functions
        /// *
        /// One or more member functions can be specified in a configuration object passed into the XTemplate constructor for
        /// more complex processing:
        /// *
        /// var tpl = new Ext.XTemplate(
        /// '<p>Name: {name}</p>',
        /// '<p>Kids: ',
        /// '<tpl for="kids">',
        /// '<tpl if="this.isGirl(name)">',
        /// '<p>Girl: {name} - {age}</p>',
        /// '<tpl else>',
        /// '<p>Boy: {name} - {age}</p>',
        /// '</tpl>',
        /// '<tpl if="this.isBaby(age)">',
        /// '<p>{name} is a baby!</p>',
        /// '</tpl>',
        /// '</tpl></p>',
        /// {
        /// // XTemplate configuration:
        /// disableFormats: true,
        /// // member functions:
        /// isGirl: function(name){
        /// return name == 'Sara Grace';
        /// },
        /// isBaby: function(age){
        /// return age < 1;
        /// }
        /// }
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </summary>
        public JsString extend{get;set;}
        public JsString requires{get;set;}
    }
    #endregion
    #region XTemplateCompiler
    [JsType(JsMode.Prototype, Export=false)]
    public partial class XTemplateCompiler
    {
        public XTemplateCompiler(){}
        public void addFn(object body){}
        public void compile(object tpl){}
        public void doCase(object action){}
        public void doDefault(){}
        public void doElse(){}
        public void doElseIf(object action, object actions){}
        public void doEnd(object type, object actions){}
        public void doEval(object text){}
        public void doExec(object action, object actions){}
        public void doExpr(object expr){}
        public void doFor(object action, object actions){}
        public void doIf(object action, object actions){}
        public void doSwitch(object action){}
        public void doTag(object tag){}
        public void doText(object text){}
        public void evalTpl(object fm){}
        public void generate(object tpl){}
        public void parseTag(object tag){}
        public JsRegExp aposRe{get;set;}
        /// <summary>
        /// This class compiles the XTemplate syntax into a function object. The function is used
        /// like so:
        /// function (out, values, parent, xindex, xcount) {
        /// // out is the output array to store results
        /// // values, parent, xindex and xcount have their historical meaning
        /// }
        /// *
        /// @markdown
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        public JsRegExp intRe{get;set;}
        public JsRegExp tagRe{get;set;}
        public bool useFormat{get;set;}
    }
    #endregion
    #region XTemplateParser
    [JsType(JsMode.Prototype, Export=false)]
    public partial class XTemplateParser
    {
        public XTemplateParser(){}
        /// <summary>
        /// This class parses the XTemplate syntax and calls abstract methods to process the parts.
        /// @private
        /// </summary>
        public XTemplateParser(object config){}
        /// <summary>
        /// This method is called to process an empty &lt;tpl>. This is unlikely to need to be
        /// implemented, so a default (do nothing) version is provided.
        /// @method doTpl
        /// </summary>
        public void parse(object str){}
        public JsRegExp actionsRe{get;set;}
        public JsRegExp defaultRe{get;set;}
        public JsRegExp elseRe{get;set;}
        public JsRegExp topRe{get;set;}
    }
    #endregion
}
#endregion
#region Ext.app
namespace Ext.app
{
    #region Application
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Application
    {
        public Application(){}
        public Application(ApplicationConfig config){}
        /// <summary>
        /// Creates new Application.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Application(object config){}
        public void control(object selectors, object listeners, object controller){}
        public void createViewInstance(object view){}
        public void getController(object name, object autoInit){}
        public void getModel(object model){}
        public void getModuleClassName(object name, object type){}
        public void getStore(object name){}
        public void getView(object view){}
        /// <summary>
        /// @private
        /// </summary>
        public void onBeforeLaunch(){}
        /// <summary>
        /// Represents a Sencha Touch application, which is typically a single page app using a
        /// {@link Ext.viewport.Viewport Viewport}. A typical Ext.app.Application might look like this:
        /// *
        /// Ext.application({
        /// name: 'MyApp',
        /// launch: function() {
        /// Ext.create('Ext.Panel', {
        /// fullscreen: true,
        /// html: 'Hello World'
        /// });
        /// }
        /// });
        /// *
        /// This does several things. First it creates a global variable called 'MyApp' - all of your Application's classes (such
        /// as its Models, Views and Controllers) will reside under this single namespace, which drastically lowers the chances
        /// of colliding global variables.
        /// *
        /// When the page is ready and all of your JavaScript has loaded, your Application's {@link #launch} function is called,
        /// at which time you can run the code that starts your app. Usually this consists of creating a Viewport, as we do in
        /// the example above.
        /// *
        /// ## Telling Application about the rest of the app
        /// *
        /// Because an Ext.app.Application represents an entire app, we should tell it about the other parts of the app - namely
        /// the Models, Views and Controllers that are bundled with the application. Let's say we have a blog management app; we
        /// might have Models and Controllers for Posts and Comments, and Views for listing, adding and editing Posts and Comments.
        /// Here's how we'd tell our Application about all these things:
        /// *
        /// Ext.application({
        /// name: 'Blog',
        /// models: ['Post', 'Comment'],
        /// controllers: ['Posts', 'Comments'],
        /// *
        /// launch: function() {
        /// ...
        /// }
        /// });
        /// *
        /// Note that we didn't actually list the Views directly in the Application itself. This is because Views are managed by
        /// Controllers, so it makes sense to keep those dependencies there. The Application will load each of the specified
        /// Controllers using the pathing conventions laid out in the upcoming application architecture guide - in this case
        /// expecting the controllers to reside in app/controller/Posts.js and app/controller/Comments.js. In turn, each
        /// Controller simply needs to list the Views it uses and they will be automatically loaded. Here's how our Posts
        /// controller like be defined:
        /// *
        /// Ext.define('MyApp.controller.Posts', {
        /// extend: 'Ext.app.Controller',
        /// views: ['posts.List', 'posts.Edit'],
        /// *
        /// //the rest of the Controller here
        /// });
        /// *
        /// Because we told our Application about our Models and Controllers, and our Controllers about their Views, Sencha
        /// Touch will automatically load all of our app files for us. This means we don't have to manually add script tags into
        /// our html files whenever we add a new class, but more importantly it enables us to create a minimized build of our
        /// entire application using the Ext JS 4 SDK Tools.
        /// ## Further Reading
        /// Applications are usually populated with Models, Views and Controllers. We're working on a set of guides around MVC
        /// but in the meantime you can find more background information at:
        /// * {@link Ext.app.Controller}
        /// * {@link Ext.data.Model}
        /// * [Component (View) Guide](#!/guide/components)
        /// *
        /// @docauthor Ed Spencer
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @cfg {String} appFolder The path to the directory which contains all application's classes.
        /// This path will be registered via {@link Ext.Loader#setPath} for the namespace specified in the {@link #name name} config.
        /// Defaults to 'app'
        /// </summary>
        public JsString appFolder{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoCreateViewport True to automatically load and instantiate AppName.view.Viewport
        /// before firing the launch function (defaults to false).
        /// </summary>
        public bool autoCreateViewport{get;set;}
        /// <summary>
        /// @cfg {Boolean} enableQuickTips True to automatically set up Ext.tip.QuickTip support (defaults to true)
        /// </summary>
        public bool enableQuickTips{get;set;}
        /// <summary>
        /// Represents a Sencha Touch application, which is typically a single page app using a
        /// {@link Ext.viewport.Viewport Viewport}. A typical Ext.app.Application might look like this:
        /// *
        /// Ext.application({
        /// name: 'MyApp',
        /// launch: function() {
        /// Ext.create('Ext.Panel', {
        /// fullscreen: true,
        /// html: 'Hello World'
        /// });
        /// }
        /// });
        /// *
        /// This does several things. First it creates a global variable called 'MyApp' - all of your Application's classes (such
        /// as its Models, Views and Controllers) will reside under this single namespace, which drastically lowers the chances
        /// of colliding global variables.
        /// *
        /// When the page is ready and all of your JavaScript has loaded, your Application's {@link #launch} function is called,
        /// at which time you can run the code that starts your app. Usually this consists of creating a Viewport, as we do in
        /// the example above.
        /// *
        /// ## Telling Application about the rest of the app
        /// *
        /// Because an Ext.app.Application represents an entire app, we should tell it about the other parts of the app - namely
        /// the Models, Views and Controllers that are bundled with the application. Let's say we have a blog management app; we
        /// might have Models and Controllers for Posts and Comments, and Views for listing, adding and editing Posts and Comments.
        /// Here's how we'd tell our Application about all these things:
        /// *
        /// Ext.application({
        /// name: 'Blog',
        /// models: ['Post', 'Comment'],
        /// controllers: ['Posts', 'Comments'],
        /// *
        /// launch: function() {
        /// ...
        /// }
        /// });
        /// *
        /// Note that we didn't actually list the Views directly in the Application itself. This is because Views are managed by
        /// Controllers, so it makes sense to keep those dependencies there. The Application will load each of the specified
        /// Controllers using the pathing conventions laid out in the upcoming application architecture guide - in this case
        /// expecting the controllers to reside in app/controller/Posts.js and app/controller/Comments.js. In turn, each
        /// Controller simply needs to list the Views it uses and they will be automatically loaded. Here's how our Posts
        /// controller like be defined:
        /// *
        /// Ext.define('MyApp.controller.Posts', {
        /// extend: 'Ext.app.Controller',
        /// views: ['posts.List', 'posts.Edit'],
        /// *
        /// //the rest of the Controller here
        /// });
        /// *
        /// Because we told our Application about our Models and Controllers, and our Controllers about their Views, Sencha
        /// Touch will automatically load all of our app files for us. This means we don't have to manually add script tags into
        /// our html files whenever we add a new class, but more importantly it enables us to create a minimized build of our
        /// entire application using the Ext JS 4 SDK Tools.
        /// ## Further Reading
        /// Applications are usually populated with Models, Views and Controllers. We're working on a set of guides around MVC
        /// but in the meantime you can find more background information at:
        /// * {@link Ext.app.Controller}
        /// * {@link Ext.data.Model}
        /// * [Component (View) Guide](#!/guide/components)
        /// *
        /// @docauthor Ed Spencer
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region ApplicationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ApplicationConfig
    {
        public ApplicationConfig(){}
        /// <summary>
        /// The path to the directory which contains all application's classes.
        /// This path will be registered via {@link Ext.Loader#setPath} for the namespace specified in the {@link #name name} config.
        /// Defaults to 'app'
        /// </summary>
        public JsString appFolder{get;set;}
        /// <summary>
        /// True to automatically load and instantiate AppName.view.Viewport
        /// before firing the launch function (defaults to false).
        /// </summary>
        public bool autoCreateViewport{get;set;}
        /// <summary>
        /// When the app is first loaded, this url will be redirected to. Defaults to undefined
        /// </summary>
        public JsString defaultUrl{get;set;}
        /// <summary>
        /// True to automatically set up Ext.tip.QuickTip support (defaults to true)
        /// </summary>
        public bool enableQuickTips{get;set;}
        /// <summary>
        /// The name of your application. This will also be the namespace for your views, controllers
        /// models and stores. Don't use spaces or special characters in the name.
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// The scope to execute the {@link #launch} function in. Defaults to the Application
        /// instance.
        /// </summary>
        public object scope{get;set;}
        public JsAction launch { get; set; }
    }
    #endregion
    #region Controller
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Controller
    {
        public Controller(){}
        public void addRef(object @ref){}
        /// <summary>
        /// Creates new Controller.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Controller(object config){}
        /// <summary>
        /// Adds listeners to components selected via {@link Ext.ComponentQuery}. Accepts an
        /// object containing component paths mapped to a hash of listener functions.
        /// *
        /// In the following example the `updateUser` function is mapped to to the `click`
        /// event on a button component, which is a child of the `useredit` component.
        /// *
        /// Ext.define('AM.controller.Users', {
        /// init: function() {
        /// this.control({
        /// 'useredit button[action=save]': {
        /// click: this.updateUser
        /// }
        /// });
        /// },
        /// *
        /// updateUser: function(button) {
        /// console.log('clicked the Save button');
        /// }
        /// });
        /// *
        /// See {@link Ext.ComponentQuery} for more information on component selectors.
        /// *
        /// @param {String/Object} selectors If a String, the second argument is used as the
        /// listeners, otherwise an object of selectors -> listeners is assumed
        /// @param {Object} listeners
        /// </summary>
        public void control(object selectors, object listeners){}
        /// <summary>
        /// A template method like {@link #init}, but called after the viewport is created.
        /// This is called after the {@link Ext.app.Application#launch launch} method of Application is executed.
        /// *
        /// @param {Ext.app.Application} application
        /// @protected
        /// </summary>
        public void createGetters(Application type, object refs){}
        /// <summary>
        /// Returns instance of a {@link Ext.app.Controller controller} with the given name.
        /// When controller doesn't exist yet, it's created.
        /// @param {String} name
        /// @return {Ext.app.Controller} a controller instance.
        /// </summary>
        public Ext.app.Controller getController(JsString name){return null;}
        /// <summary>
        /// Returns a {@link Ext.data.Model Model} class with the given name.
        /// A shorthand for using {@link Ext.ModelManager#getModel}.
        /// @param {String} name
        /// @return {Ext.data.Model} a model class.
        /// </summary>
        public Model getModel(JsString model){return null;}
        public void getRef(object @ref, object info, object config){}
        /// <summary>
        /// Returns instance of a {@link Ext.data.Store Store} with the given name.
        /// When store doesn't exist yet, it's created.
        /// @param {String} name
        /// @return {Ext.data.Store} a store instance.
        /// </summary>
        public Store getStore(JsString name){return null;}
        /// <summary>
        /// Returns a View class with the given name.  To create an instance of the view,
        /// you can use it like it's used by Application to create the Viewport:
        /// *
        /// this.getView('Viewport').create();
        /// *
        /// @param {String} name
        /// @return {Ext.Base} a view class.
        /// </summary>
        public void getView(JsString view){}
        public void hasRef(object @ref){}
        /// <summary>
        /// A template method that is called when your application boots. It is called before the
        /// {@link Ext.app.Application Application}'s launch function is executed so gives a hook point to run any code before
        /// your Viewport is created.
        /// *
        /// @param {Ext.app.Application} application
        /// @protected
        /// </summary>
        public void init(Application application){}
        /// <summary>
        /// A template method like {@link #init}, but called after the viewport is created.
        /// This is called after the {@link Ext.app.Application#launch launch} method of Application is executed.
        /// *
        /// @param {Ext.app.Application} application
        /// @protected
        /// </summary>
        public void launch(Application application){}
        /// <summary>
        /// @cfg {String} id The id of this controller. You can use this id when dispatching.
        /// </summary>
        public void onClassExtended(object cls, object data, object hooks){}
        public void @ref(object refs){}
        /// <summary>
        /// Controllers are the glue that binds an application together. All they really do is listen for events (usually from
        /// views) and take some action. Here's how we might create a Controller to manage Users:
        /// *
        /// Ext.define('MyApp.controller.Users', {
        /// extend: 'Ext.app.Controller',
        /// *
        /// init: function() {
        /// console.log('Initialized Users! This happens before the Application launch function is called');
        /// }
        /// });
        /// *
        /// The init function is a special method that is called when your application boots. It is called before the
        /// {@link Ext.app.Application Application}'s launch function is executed so gives a hook point to run any code before
        /// your Viewport is created.
        /// *
        /// The init function is a great place to set up how your controller interacts with the view, and is usually used in
        /// conjunction with another Controller function - {@link Ext.app.Controller#control control}. The control function
        /// makes it easy to listen to events on your view classes and take some action with a handler function. Let's update
        /// our Users controller to tell us when the panel is rendered:
        /// *
        /// Ext.define('MyApp.controller.Users', {
        /// extend: 'Ext.app.Controller',
        /// *
        /// init: function() {
        /// this.control({
        /// 'viewport > panel': {
        /// render: this.onPanelRendered
        /// }
        /// });
        /// },
        /// *
        /// onPanelRendered: function() {
        /// console.log('The panel was rendered');
        /// }
        /// });
        /// *
        /// We've updated the init function to use this.control to set up listeners on views in our application. The control
        /// function uses the new ComponentQuery engine to quickly and easily get references to components on the page. If you
        /// are not familiar with ComponentQuery yet, be sure to check out the {@link Ext.ComponentQuery documentation}. In brief though,
        /// it allows us to pass a CSS-like selector that will find every matching component on the page.
        /// *
        /// In our init function above we supplied 'viewport > panel', which translates to "find me every Panel that is a direct
        /// child of a Viewport". We then supplied an object that maps event names (just 'render' in this case) to handler
        /// functions. The overall effect is that whenever any component that matches our selector fires a 'render' event, our
        /// onPanelRendered function is called.
        /// *
        /// ## Using refs
        /// *
        /// One of the most useful parts of Controllers is the new ref system. These use the new {@link Ext.ComponentQuery} to
        /// make it really easy to get references to Views on your page. Let's look at an example of this now:
        /// *
        /// Ext.define('MyApp.controller.Users', {
        /// extend: 'Ext.app.Controller',
        /// *
        /// refs: [
        /// {
        /// ref: 'list',
        /// selector: 'grid'
        /// }
        /// ],
        /// *
        /// init: function() {
        /// this.control({
        /// 'button': {
        /// click: this.refreshGrid
        /// }
        /// });
        /// },
        /// *
        /// refreshGrid: function() {
        /// this.getList().store.load();
        /// }
        /// });
        /// *
        /// This example assumes the existence of a Grid on the page, which contains a single button to
        /// refresh the Grid when clicked. In our refs array, we set up a reference to the grid. There are two parts to this -
        /// the 'selector', which is a {@link Ext.ComponentQuery ComponentQuery} selector which finds any grid on the page and
        /// assigns it to the reference 'list'.
        /// *
        /// By giving the reference a name, we get a number of things for free. The first is the getList function that we use in
        /// the refreshGrid method above. This is generated automatically by the Controller based on the name of our ref, which
        /// was capitalized and prepended with get to go from 'list' to 'getList'.
        /// *
        /// The way this works is that the first time getList is called by your code, the ComponentQuery selector is run and the
        /// first component that matches the selector ('grid' in this case) will be returned. All future calls to getList will
        /// use a cached reference to that grid. Usually it is advised to use a specific ComponentQuery selector that will only
        /// match a single View in your application (in the case above our selector will match any grid on the page).
        /// *
        /// Bringing it all together, our init function is called when the application boots, at which time we call this.control
        /// to listen to any click on a {@link Ext.Button button} and call our refreshGrid function (again, this will
        /// match any button on the page so we advise a more specific selector than just 'button', but have left it this way for
        /// simplicity). When the button is clicked we use out getList function to refresh the grid.
        /// *
        /// You can create any number of refs and control any number of components this way, simply adding more functions to
        /// your Controller as you go. For an example of real-world usage of Controllers see the Feed Viewer example in the
        /// examples/app/feed-viewer folder in the SDK download.
        /// *
        /// ## Generated getter methods
        /// *
        /// Refs aren't the only thing that generate convenient getter methods. Controllers often have to deal with Models and
        /// Stores so the framework offers a couple of easy ways to get access to those too. Let's look at another example:
        /// *
        /// Ext.define('MyApp.controller.Users', {
        /// extend: 'Ext.app.Controller',
        /// *
        /// models: ['User'],
        /// stores: ['AllUsers', 'AdminUsers'],
        /// *
        /// init: function() {
        /// var User = this.getUserModel(),
        /// allUsers = this.getAllUsersStore();
        /// *
        /// var ed = new User({name: 'Ed'});
        /// allUsers.add(ed);
        /// }
        /// });
        /// *
        /// By specifying Models and Stores that the Controller cares about, it again dynamically loads them from the appropriate
        /// locations (app/model/User.js, app/store/AllUsers.js and app/store/AdminUsers.js in this case) and creates getter
        /// functions for them all. The example above will create a new User model instance and add it to the AllUsers Store.
        /// Of course, you could do anything in this function but in this case we just did something simple to demonstrate the
        /// functionality.
        /// *
        /// ## Further Reading
        /// *
        /// Controllers usually exist inside an {@link Ext.app.Application}.
        /// *
        /// @docauthor Ed Spencer
        /// </summary>
        public JsString alternateClassName{get;set;}
    }
    #endregion
}
#endregion
#region Ext.behavior
namespace Ext.behavior
{
    #region Behavior
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Behavior
    {
        public Behavior(){}
        public Behavior(object component){}
    }
    #endregion
    #region Draggable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Draggable
    {
        public Draggable(){}
        public void getDraggable(){}
        public void onComponentPainted(){}
        public void onDraggableDestroy(){}
        public void setConfig(object config){}
        [JsProperty]
        public object Config{private get;[JsMethod(Name="setConfig")]set;}
        public JsString extend{get;set;}
    }
    #endregion
    #region Scrollable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Scrollable
    {
        public Scrollable(){}
        public void getScrollView(){}
        public void onComponentDestroy(){}
        public void onComponentPainted(){}
        public void onScrollViewDestroy(){}
        public void setConfig(object config){}
        [JsProperty]
        public object Config{private get;[JsMethod(Name="setConfig")]set;}
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.carousel
namespace Ext.carousel
{
    #region Carousel
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Carousel
    {
        public Carousel(CarouselConfig config){}
        public Carousel(){}
        public void applyIndicator(object indicator){}
        public void destroy(){}
        /// <summary>
        /// Returns the index of the currently active card.
        /// @return {Number} The index of the currently active card.
        /// </summary>
        public JsNumber getActiveIndex(){return null;}
        /// <summary>
        /// Returns the difference between the index of the active card and the passed card.
        /// @private
        /// </summary>
        public void getCardIndexOffset(object card, object index, object activeIndex){}
        /// <summary>
        /// Returns the amount of pixels from the current drag to a card.
        /// @private
        /// </summary>
        public void getCardOffset(object card, object index, object activeIndex){}
        public void getCardTransform(object offset){}
        public void initialize(){}
        /// <summary>
        /// Returns true if the passed card is within 2 cards from the active card.
        /// @private
        /// </summary>
        public void isCardInRange(object card){}
        public void isIndexInRange(object index, object activeIndex){}
        /// <summary>
        /// Switches to the next card
        /// @return {Ext.carousel.Carousel} this
        /// </summary>
        public Carousel next(){return null;}
        public void onActiveItemChange(object carousel, object activeItem){}
        public void onAdd(object item, object index){}
        public void onDrag(object e, object t){}
        public void onDragEnd(object e, object t){}
        public void onDragStart(object e){}
        public void onPainted(){}
        public void onRemove(object item, object index){}
        /// <summary>
        /// Switches to the previous card
        /// @return {Ext.carousel.Carousel} this
        /// </summary>
        public Carousel previous(){return null;}
        public void updateCardPosition(object card, object index, object activeIndex){}
        public void updateCardSize(){}
        public void updateDirection(object direction){}
        public void updateIndicator(object indicator){}
        public void updateItemCls(object newItemCls, object oldItemCls){}
        /// <summary>
        /// Returns the index of the currently active card.
        /// @return {Number} The index of the currently active card.
        /// </summary>
        [JsProperty]
        public JsNumber ActiveIndex{[JsMethod(Name="getActiveIndex")]get;private set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @class Ext.carousel.Carousel
        /// @extends Ext.Panel
        /// *
        /// Carousels, like [tabs](#!/guide/tabs), are a great way to allow the user to swipe through multiple full-screen pages.
        /// A Carousel shows only one of its pages at a time but allows you to swipe through with your finger.
        /// Carousels can be oriented either horizontally or vertically and are easy to configure - they just work like any other
        /// Container. Here's how to set up a simple horizontal Carousel:
        /// @example
        /// Ext.create('Ext.Carousel', {
        /// fullscreen: true,
        /// defaults: {
        /// styleHtmlContent: true
        /// },
        /// items: [
        /// {
        /// html : 'Item 1',
        /// style: 'background-color: #5E99CC'
        /// },
        /// {
        /// html : 'Item 2',
        /// style: 'background-color: #759E60'
        /// },
        /// {
        /// html : 'Item 3'
        /// }
        /// ]
        /// });
        /// We can also make Carousels orient themselves vertically:
        /// *
        /// @example preview
        /// Ext.create('Ext.Carousel', {
        /// fullscreen: true,
        /// direction: 'vertical',
        /// defaults: {
        /// styleHtmlContent: true
        /// },
        /// items: [
        /// {
        /// html : 'Item 1',
        /// style: 'background-color: #759E60'
        /// },
        /// {
        /// html : 'Item 2',
        /// style: 'background-color: #5E99CC'
        /// }
        /// ]
        /// });
        /// ### Common Configurations
        /// * {@link #ui} defines the style of the carousel
        /// * {@link #direction} defines the direction of the carousel
        /// * {@link #indicator} defines if the indicator show be shown
        /// *
        /// ### Useful Methods
        /// * {@link #next} moves to the next card
        /// * {@link #previous} moves to the previous card
        /// * {@link #setActiveItem} moves to the passed card
        /// *
        /// ## Further Reading
        /// For more information about Carousels see the [Carousel guide](#!/guide/carousel).
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @class Ext.carousel.Carousel
        /// @extends Ext.Panel
        /// *
        /// Carousels, like [tabs](#!/guide/tabs), are a great way to allow the user to swipe through multiple full-screen pages.
        /// A Carousel shows only one of its pages at a time but allows you to swipe through with your finger.
        /// Carousels can be oriented either horizontally or vertically and are easy to configure - they just work like any other
        /// Container. Here's how to set up a simple horizontal Carousel:
        /// @example
        /// Ext.create('Ext.Carousel', {
        /// fullscreen: true,
        /// defaults: {
        /// styleHtmlContent: true
        /// },
        /// items: [
        /// {
        /// html : 'Item 1',
        /// style: 'background-color: #5E99CC'
        /// },
        /// {
        /// html : 'Item 2',
        /// style: 'background-color: #759E60'
        /// },
        /// {
        /// html : 'Item 3'
        /// }
        /// ]
        /// });
        /// We can also make Carousels orient themselves vertically:
        /// *
        /// @example preview
        /// Ext.create('Ext.Carousel', {
        /// fullscreen: true,
        /// direction: 'vertical',
        /// defaults: {
        /// styleHtmlContent: true
        /// },
        /// items: [
        /// {
        /// html : 'Item 1',
        /// style: 'background-color: #759E60'
        /// },
        /// {
        /// html : 'Item 2',
        /// style: 'background-color: #5E99CC'
        /// }
        /// ]
        /// });
        /// ### Common Configurations
        /// * {@link #ui} defines the style of the carousel
        /// * {@link #direction} defines the direction of the carousel
        /// * {@link #indicator} defines if the indicator show be shown
        /// *
        /// ### Useful Methods
        /// * {@link #next} moves to the next card
        /// * {@link #previous} moves to the previous card
        /// * {@link #setActiveItem} moves to the passed card
        /// *
        /// ## Further Reading
        /// For more information about Carousels see the [Carousel guide](#!/guide/carousel).
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region CarouselConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class CarouselConfig
    {
        public CarouselConfig(){}
        /// <summary>
        /// The base CSS class to apply to the Carousel's element
        /// @accessor
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// The direction of the Carousel. Default is 'horizontal'. 'vertical' also available.
        /// @accessor
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// Provides an indicator while toggling between child items to let the user
        /// know where they are in the card stack.
        /// @accessor
        /// </summary>
        public bool indicator{get;set;}
        /// <summary>
        /// The CSS class to apply each card in the carousel
        /// @accessor
        /// </summary>
        public JsString itemCls{get;set;}
        /// <summary>
        /// Style options for Carousel. Default is 'dark'. 'light' is also available.
        /// @accessor
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region Indicator
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Indicator
    {
        public Indicator(){}
        public void addIndicator(){}
        public void initialize(){}
        public void onTap(object e, object t){}
        public void removeIndicator(){}
        public void setActiveIndex(object index){}
        public void updateDirection(object newDirection, object oldDirection){}
        [JsProperty]
        public object ActiveIndex{private get;[JsMethod(Name="setActiveIndex")]set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// A private utility class used by Ext.Carousel to create indicators.
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// A private utility class used by Ext.Carousel to create indicators.
        /// @private
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
}
#endregion
#region Ext.data
namespace Ext.data
{
    #region AbstractStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractStore
    {
        public AbstractStore(){}
        public AbstractStore(AbstractStoreConfig config){}
        /// <summary>
        /// @private
        /// A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to.
        /// @param {Ext.data.Model} record The model instance that was edited
        /// </summary>
        public void afterCommit(Model record){}
        /// <summary>
        /// @private
        /// A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to.
        /// @param {Ext.data.Model} record The model instance that was edited
        /// @param {String[]} modifiedFieldNames Array of field names changed during edit.
        /// </summary>
        public void afterEdit(Model record, object modifiedFieldNames){}
        /// <summary>
        /// @private
        /// A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to..
        /// @param {Ext.data.Model} record The model instance that was edited
        /// </summary>
        public void afterReject(Model record){}
        public void clearFilter(object supressEvent){}
        public AbstractStore(object config){}
        public void create(object data, object options){}
        /// <summary>
        /// @private
        /// Normalizes an array of filter objects, ensuring that they are all Ext.util.Filter instances
        /// @param {Object[]} filters The filters array
        /// @return {Ext.util.Filter[]} Array of Ext.util.Filter objects
        /// </summary>
        public void decodeFilters(object filters){}
        public void destroy(object options){}
        public void destroyStore(){}
        public void doSort(object sorterFn){}
        public void filter(object filters, object value){}
        public void filterBy(object fn, object scope){}
        /// <summary>
        /// @private
        /// Filter function for new records.
        /// </summary>
        public void filterNew(object item){}
        /// <summary>
        /// @private
        /// Filter function for updated records.
        /// </summary>
        public void filterUpdated(object item){}
        /// <summary>
        /// @private
        /// Returns an object which is passed in as the listeners argument to proxy.batch inside this.sync.
        /// This is broken out into a separate function to allow for customisation of the listeners
        /// @return {Object} The listeners object
        /// </summary>
        public object getBatchListeners(){return null;}
        /// <summary>
        /// Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
        /// yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)
        /// @return {Ext.data.Model[]} The Model instances
        /// </summary>
        public void getNewRecords(){}
        /// <summary>
        /// Returns the proxy currently attached to this proxy instance
        /// @return {Ext.data.proxy.Proxy} The Proxy instance
        /// </summary>
        public Proxy getProxy(){return null;}
        /// <summary>
        /// Returns any records that have been removed from the store but not yet destroyed on the proxy.
        /// @return {Ext.data.Model[]} The removed Model instances
        /// </summary>
        public void getRemovedRecords(){}
        /// <summary>
        /// Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy
        /// @return {Ext.data.Model[]} The updated Model instances
        /// </summary>
        public void getUpdatedRecords(){}
        public void isFiltered(){}
        /// <summary>
        /// Returns true if the Store is currently performing a load operation
        /// @return {Boolean} True if the Store is currently loading
        /// </summary>
        public bool isLoading(){return false;}
        /// <summary>
        /// Loads the Store using its configured {@link #proxy}.
        /// @param {Object} options (optional) config object. This is passed into the {@link Ext.data.Operation Operation}
        /// object that is created and then sent to the proxy's {@link Ext.data.proxy.Proxy#read} function
        /// </summary>
        public void load(object options){}
        /// <summary>
        /// @private
        /// Attached as the 'complete' event listener to a proxy's Batch object. Iterates over the batch operations
        /// and updates the Store's internal data MixedCollection.
        /// </summary>
        public void onBatchComplete(object batch, object operation){}
        public void onBatchException(object batch, object operation){}
        /// <summary>
        /// @private
        /// Attached as the 'operationcomplete' event listener to a proxy's Batch object. By default just calls through
        /// to onProxyWrite.
        /// </summary>
        public void onBatchOperationComplete(object batch, object operation){}
        public void onMetaChange(object proxy, object meta){}
        /// <summary>
        /// @private
        /// Callback for any write Operation over the Proxy. Updates the Store's MixedCollection to reflect
        /// the updates provided by the Proxy
        /// </summary>
        public void onProxyWrite(object operation){}
        public void read(){}
        public void save(){}
        /// <summary>
        /// Sets the Store's Proxy by string, config object or Proxy instance
        /// @param {String/Object/Ext.data.proxy.Proxy} proxy The new Proxy, which can be either a type string, a configuration object
        /// or an Ext.data.proxy.Proxy instance
        /// @return {Ext.data.proxy.Proxy} The attached Proxy object
        /// </summary>
        public Proxy setProxy(object proxy){return null;}
        /// <summary>
        /// Synchronizes the Store with its Proxy. This asks the Proxy to batch together any new, updated
        /// and deleted records in the store, updating the Store's internal representation of the records
        /// as each operation completes.
        /// </summary>
        public void sync(){}
        public void update(object options){}
        /// <summary>
        /// @cfg {Boolean/Object} autoLoad
        /// If data is not specified, and if autoLoad is true or an Object, this store's load method is automatically called
        /// after creation. If the value of autoLoad is an Object, this Object will be passed to the store's load method.
        /// Defaults to false.
        /// </summary>
        public object autoLoad{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoSync
        /// True to automatically sync the Store with its Proxy after every edit to one of its Records. Defaults to false.
        /// </summary>
        public bool autoSync{get;set;}
        /// <summary>
        /// @private
        /// Returns an object which is passed in as the listeners argument to proxy.batch inside this.sync.
        /// This is broken out into a separate function to allow for customisation of the listeners
        /// @return {Object} The listeners object
        /// </summary>
        [JsProperty]
        public object BatchListeners{[JsMethod(Name="getBatchListeners")]get;private set;}
        /// <summary>
        /// @property {String} batchUpdateMode
        /// Sets the updating behavior based on batch synchronization. 'operation' (the default) will update the Store's
        /// internal representation of the data after each operation of the batch has completed, 'complete' will wait until
        /// the entire batch has been completed before updating the Store's data. 'complete' is a good choice for local
        /// storage proxies, 'operation' is better for remote proxies, where there is a comparatively high latency.
        /// </summary>
        public JsString batchUpdateMode{get;set;}
        /// <summary>
        /// @property {String} defaultProxyType
        /// The string type of the Proxy to create if none is specified. This defaults to creating a
        /// {@link Ext.data.proxy.Memory memory proxy}.
        /// </summary>
        public JsString defaultProxyType{get;set;}
        /// <summary>
        /// @property {Boolean} filterOnLoad
        /// If true, any filters attached to this Store will be run after loading data, before the datachanged event is fired.
        /// Defaults to true, ignored if {@link Ext.data.Store#remoteFilter remoteFilter} is true
        /// </summary>
        public bool filterOnLoad{get;set;}
        /// <summary>
        /// @property {Boolean} implicitModel
        /// True if a model was created implicitly for this Store. This happens if a fields array is passed to the Store's
        /// constructor instead of a model constructor or name.
        /// @private
        /// </summary>
        public bool implicitModel{get;set;}
        /// <summary>
        /// @property {Boolean} isDestroyed
        /// True if the Store has already been destroyed. If this is true, the reference to Store should be deleted
        /// as it will not function correctly any more.
        /// </summary>
        public bool isDestroyed{get;set;}
        /// <summary>
        /// @property {Boolean} isDestroyed
        /// True if the Store has already been destroyed. If this is true, the reference to Store should be deleted
        /// as it will not function correctly any more.
        /// </summary>
        public bool isStore{get;set;}
        /// <summary>
        /// Sets the Store's Proxy by string, config object or Proxy instance
        /// @param {String/Object/Ext.data.proxy.Proxy} proxy The new Proxy, which can be either a type string, a configuration object
        /// or an Ext.data.proxy.Proxy instance
        /// @return {Ext.data.proxy.Proxy} The attached Proxy object
        /// Returns the proxy currently attached to this proxy instance
        /// @return {Ext.data.proxy.Proxy} The Proxy instance
        /// </summary>
        [JsProperty]
        public object Proxy{[JsMethod(Name="getProxy")]get;[JsMethod(Name="setProxy")]set;}
        public bool remoteFilter{get;set;}
        public bool remoteSort{get;set;}
        /// <summary>
        /// @property {Boolean} sortOnLoad
        /// If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired.
        /// Defaults to true, igored if {@link Ext.data.Store#remoteSort remoteSort} is true
        /// </summary>
        public bool sortOnLoad{get;set;}
        /// <summary>
        /// @cfg {String} model
        /// Name of the {@link Ext.data.Model Model} associated with this store.
        /// The string is used as an argument for {@link Ext.ModelManager#getModel}.
        /// </summary>
        public JsString sortRoot{get;set;}
    }
    #endregion
    #region AbstractStoreConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractStoreConfig
    {
        public AbstractStoreConfig(){}
        /// <summary>
        /// If data is not specified, and if autoLoad is true or an Object, this store's load method is automatically called
        /// after creation. If the value of autoLoad is an Object, this Object will be passed to the store's load method.
        /// Defaults to false.
        /// </summary>
        public object autoLoad{get;set;}
        /// <summary>
        /// True to automatically sync the Store with its Proxy after every edit to one of its Records. Defaults to false.
        /// </summary>
        public bool autoSync{get;set;}
        /// <summary>
        /// This may be used in place of specifying a {@link #model} configuration. The fields should be a
        /// set of {@link Ext.data.Field} configuration objects. The store will automatically create a {@link Ext.data.Model}
        /// with these fields. In general this configuration option should be avoided, it exists for the purposes of
        /// backwards compatibility. For anything more complicated, such as specifying a particular id property or
        /// associations, a {@link Ext.data.Model} should be defined and specified for the {@link #model}
        /// config.
        /// </summary>
        public object fields{get;set;}
        /// <summary>
        /// Name of the {@link Ext.data.Model Model} associated with this store.
        /// The string is used as an argument for {@link Ext.ModelManager#getModel}.
        /// </summary>
        public JsString model{get;set;}
        /// <summary>
        /// The Proxy to use for this Store. This can be either a string, a config object or a Proxy instance -
        /// see {@link #setProxy} for details.
        /// </summary>
        public object proxy{get;set;}
        /// <summary>
        /// Unique identifier for this store. If present, this Store will be registered with the {@link Ext.data.StoreManager},
        /// making it easy to reuse elsewhere. Defaults to undefined.
        /// </summary>
        public JsString storeId{get;set;}
    }
    #endregion
    #region ArrayStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ArrayStore
    {
        public ArrayStore(){}
        public ArrayStore(object config){}
        public void loadData(object data, object append){}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// Small helper class to make creating {@link Ext.data.Store}s from Array data easier. An ArrayStore will be
        /// automatically configured with a {@link Ext.data.reader.Array}.
        /// *
        /// A store configuration would be something like:
        /// *
        /// var store = Ext.create('Ext.data.ArrayStore', {
        /// // store configs
        /// autoDestroy: true,
        /// storeId: 'myStore',
        /// // reader configs
        /// idIndex: 0,
        /// fields: [
        /// 'company',
        /// {name: 'price', type: 'float'},
        /// {name: 'change', type: 'float'},
        /// {name: 'pctChange', type: 'float'},
        /// {name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}
        /// ]
        /// });
        /// *
        /// This store is configured to consume a returned object of the form:
        /// *
        /// var myData = [
        /// ['3m Co',71.72,0.02,0.03,'9/1 12:00am'],
        /// ['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am'],
        /// ['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am'],
        /// ['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am'],
        /// ['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am']
        /// ];
        /// *
        /// An object literal of this form could also be used as the {@link #data} config option.
        /// *
        /// **Note:** Although not listed here, this class accepts all of the configuration options of
        /// **{@link Ext.data.reader.Array ArrayReader}**.
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// Small helper class to make creating {@link Ext.data.Store}s from Array data easier. An ArrayStore will be
        /// automatically configured with a {@link Ext.data.reader.Array}.
        /// *
        /// A store configuration would be something like:
        /// *
        /// var store = Ext.create('Ext.data.ArrayStore', {
        /// // store configs
        /// autoDestroy: true,
        /// storeId: 'myStore',
        /// // reader configs
        /// idIndex: 0,
        /// fields: [
        /// 'company',
        /// {name: 'price', type: 'float'},
        /// {name: 'change', type: 'float'},
        /// {name: 'pctChange', type: 'float'},
        /// {name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}
        /// ]
        /// });
        /// *
        /// This store is configured to consume a returned object of the form:
        /// *
        /// var myData = [
        /// ['3m Co',71.72,0.02,0.03,'9/1 12:00am'],
        /// ['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am'],
        /// ['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am'],
        /// ['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am'],
        /// ['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am']
        /// ];
        /// *
        /// An object literal of this form could also be used as the {@link #data} config option.
        /// *
        /// **Note:** Although not listed here, this class accepts all of the configuration options of
        /// **{@link Ext.data.reader.Array ArrayReader}**.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Batch
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Batch
    {
        public Batch(){}
        /// <summary>
        /// Adds a new operation to this batch
        /// @param {Object} operation The {@link Ext.data.Operation Operation} object
        /// </summary>
        public void add(object operation){}
        /// <summary>
        /// Creates new Batch object.
        /// @param {Object} config (optional) Config object
        /// </summary>
        public Batch(object config){}
        /// <summary>
        /// Pauses execution of the batch, but does not cancel the current operation
        /// </summary>
        public void pause(){}
        /// <summary>
        /// @private
        /// Runs the next operation, relative to this.current.
        /// </summary>
        public void runNextOperation(){}
        /// <summary>
        /// Executes a operation by its numeric index
        /// @param {Number} index The operation index to run
        /// </summary>
        public void runOperation(JsNumber index){}
        /// <summary>
        /// Kicks off the execution of the batch, continuing from the next operation if the previous
        /// operation encountered an exception, or if execution was paused
        /// </summary>
        public void start(){}
        /// <summary>
        /// True to immediately start processing the batch as soon as it is constructed (defaults to false)
        /// @property autoStart
        /// @type Boolean
        /// </summary>
        public bool autoStart{get;set;}
        /// <summary>
        /// True if this batch has encountered an exception. This is cleared at the start of each operation
        /// @property hasException
        /// @type Boolean
        /// </summary>
        public bool hasException{get;set;}
        /// <summary>
        /// True if this batch has been executed completely
        /// @property isComplete
        /// @type Boolean
        /// </summary>
        public bool isComplete{get;set;}
        /// <summary>
        /// True if the batch is currently running
        /// @property isRunning
        /// @type Boolean
        /// </summary>
        public bool isRunning{get;set;}
        /// <summary>
        /// True to automatically pause the execution of the batch if any operation encounters an exception (defaults to true)
        /// @property pauseOnException
        /// @type Boolean
        /// </summary>
        public bool pauseOnException{get;set;}
        /// <summary>
        /// The total number of operations in this batch. Read only
        /// @property total
        /// @type Number
        /// </summary>
        public object total{get;set;}
    }
    #endregion
    #region BufferStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class BufferStore
    {
        public BufferStore(){}
        /// <summary>
        /// @class Ext.data.BufferStore
        /// @extends Ext.data.Store
        /// @ignore
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @class Ext.data.BufferStore
        /// @extends Ext.data.Store
        /// @ignore
        /// </summary>
        public JsString extend{get;set;}
        public bool filterOnLoad{get;set;}
        public bool sortOnLoad{get;set;}
    }
    #endregion
    #region Connection
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Connection
    {
        public Connection(){}
        public Connection(ConnectionConfig config){}
        /// <summary>
        /// Aborts any outstanding request.
        /// @param {Object} request (Optional) defaults to the last request
        /// </summary>
        public void abort(object request){}
        /// <summary>
        /// Cleans up any left over information from the request
        /// @private
        /// @param {Object} The request
        /// </summary>
        public void cleanup(object request){}
        /// <summary>
        /// Clears the timeout on the request
        /// @private
        /// @param {Object} The request
        /// </summary>
        public void clearTimeout(object request){}
        public Connection(object config){}
        /// <summary>
        /// Creates the exception object
        /// @private
        /// @param {Object} request
        /// </summary>
        public void createException(object request){}
        /// <summary>
        /// Creates the response object
        /// @private
        /// @param {Object} request
        /// </summary>
        public void createResponse(object request){}
        /// <summary>
        /// Gets the form object from options.
        /// @private
        /// @param {Object} options The request options
        /// @return {HTMLElement} The form, null if not passed
        /// </summary>
        public HtmlElement getForm(object options){return null;}
        /// <summary>
        /// Detects whether the form is intended to be used for an upload.
        /// @private
        /// </summary>
        public void isFormUpload(object options){}
        /// <summary>
        /// Determines whether this object has a request outstanding.
        /// @param {Object} request (Optional) defaults to the last transaction
        /// @return {Boolean} True if there is an outstanding request.
        /// </summary>
        public bool isLoading(object request){return false;}
        /// <summary>
        /// To be called when the request has come back from the server
        /// @private
        /// @param {Object} request
        /// @return {Object} The response
        /// </summary>
        public object onComplete(object request){return null;}
        /// <summary>
        /// Fires when the state of the xhr changes
        /// @private
        /// @param {Object} request The request
        /// </summary>
        public void onStateChange(object request){}
        public void onUploadComplete(object frame, object options){}
        /// <summary>
        /// Checks if the response status was successful
        /// @param {Number} status The status code
        /// @return {Object} An object containing success/status state
        /// </summary>
        public object parseStatus(JsNumber status){return null;}
        /// <summary>
        /// Sends an HTTP request to a remote server.
        /// *
        /// **Important:** Ajax server requests are asynchronous, and this call will
        /// return before the response has been received. Process any returned data
        /// in a callback function.
        /// *
        /// Ext.Ajax.request({
        /// url: 'ajax_demo/sample.json',
        /// success: function(response, opts) {
        /// var obj = Ext.decode(response.responseText);
        /// console.dir(obj);
        /// },
        /// failure: function(response, opts) {
        /// console.log('server-side failure with status code ' + response.status);
        /// }
        /// });
        /// *
        /// To execute a callback function in the correct scope, use the `scope` option.
        /// *
        /// @param {Object} options An object which may contain the following properties:
        /// *
        /// (The options object may also contain any other property which might be needed to perform
        /// postprocessing in a callback because it is passed to callback functions.)
        /// *
        /// @param {String/Function} options.url The URL to which to send the request, or a function
        /// to call which returns a URL string. The scope of the function is specified by the `scope` option.
        /// Defaults to the configured `url`.
        /// *
        /// @param {Object/String/Function} options.params An object containing properties which are
        /// used as parameters to the request, a url encoded string or a function to call to get either. The scope
        /// of the function is specified by the `scope` option.
        /// *
        /// @param {String} options.method The HTTP method to use
        /// for the request. Defaults to the configured method, or if no method was configured,
        /// "GET" if no parameters are being sent, and "POST" if parameters are being sent.  Note that
        /// the method name is case-sensitive and should be all caps.
        /// *
        /// @param {Function} options.callback The function to be called upon receipt of the HTTP response.
        /// The callback is called regardless of success or failure and is passed the following parameters:
        /// @param {Object} options.callback.options The parameter to the request call.
        /// @param {Boolean} options.callback.success True if the request succeeded.
        /// @param {Object} options.callback.response The XMLHttpRequest object containing the response data.
        /// See [www.w3.org/TR/XMLHttpRequest/](http://www.w3.org/TR/XMLHttpRequest/) for details about
        /// accessing elements of the response.
        /// *
        /// @param {Function} options.success The function to be called upon success of the request.
        /// The callback is passed the following parameters:
        /// @param {Object} options.success.response The XMLHttpRequest object containing the response data.
        /// @param {Object} options.success.options The parameter to the request call.
        /// *
        /// @param {Function} options.failure The function to be called upon success of the request.
        /// The callback is passed the following parameters:
        /// @param {Object} options.failure.response The XMLHttpRequest object containing the response data.
        /// @param {Object} options.failure.options The parameter to the request call.
        /// *
        /// @param {Object} options.scope The scope in which to execute the callbacks: The "this" object for
        /// the callback function. If the `url`, or `params` options were specified as functions from which to
        /// draw values, then this also serves as the scope for those function calls. Defaults to the browser
        /// window.
        /// *
        /// @param {Number} options.timeout The timeout in milliseconds to be used for this request.
        /// Defaults to 30 seconds.
        /// *
        /// @param {HTMLElement/HTMLElement/String} options.form The `<form>` Element or the id of the `<form>`
        /// to pull parameters from.
        /// *
        /// @param {Boolean} options.isUpload **Only meaningful when used with the `form` option.**
        /// *
        /// True if the form object is a file upload (will be set automatically if the form was configured
        /// with **`enctype`** `"multipart/form-data"`).
        /// *
        /// File uploads are not performed using normal "Ajax" techniques, that is they are **not**
        /// performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
        /// DOM `<form>` element temporarily modified to have its [target][] set to refer to a dynamically
        /// generated, hidden `<iframe>` which is inserted into the document but removed after the return data
        /// has been gathered.
        /// *
        /// The server response is parsed by the browser to create the document for the IFRAME. If the
        /// server is using JSON to send the return object, then the [Content-Type][] header must be set to
        /// "text/html" in order to tell the browser to insert the text unchanged into the document body.
        /// *
        /// The response text is retrieved from the document, and a fake XMLHttpRequest object is created
        /// containing a `responseText` property in order to conform to the requirements of event handlers
        /// and callbacks.
        /// *
        /// Be aware that file upload packets are sent with the content type [multipart/form][] and some server
        /// technologies (notably JEE) may require_ some custom processing in order to retrieve parameter names
        /// and parameter values from the packet content.
        /// *
        /// [target]: http://www.w3.org/TR/REC-html40/present/frames.html#adef-target
        /// [Content-Type]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17
        /// [multipart/form]: http://www.faqs.org/rfcs/rfc2388.html
        /// *
        /// @param {Object} options.headers Request headers to set for the request.
        /// *
        /// @param {Object} options.xmlData XML document to use for the post. Note: This will be used instead
        /// of params for the post data. Any params will be appended to the URL.
        /// *
        /// @param {Object/String} options.jsonData JSON data to use as the post. Note: This will be used
        /// instead of params for the post data. Any params will be appended to the URL.
        /// *
        /// @param {Boolean} options.disableCaching True to add a unique cache-buster param to GET requests.
        /// *
        /// @return {Object} The request object. This may be used to cancel the request.
        /// </summary>
        public object request(object options){return null;}
        /// <summary>
        /// Sets various options such as the url, params for the request
        /// @param {Object} options The initial options
        /// @param {Object} scope The scope to execute in
        /// @return {Object} The params for the request
        /// </summary>
        public object setOptions(object options, object scope){return null;}
        /// <summary>
        /// Setup all the headers for the request
        /// @private
        /// @param {Object} xhr The xhr object
        /// @param {Object} options The options for the request
        /// @param {Object} data The data for the request
        /// @param {Object} params The params for the request
        /// </summary>
        public void setupHeaders(object xhr, object options, object data, object @params){}
        /// <summary>
        /// Template method for overriding method
        /// @private
        /// @param {Object} options
        /// @param {String} method
        /// @return {String} The modified method
        /// </summary>
        public JsString setupMethod(object options, JsString method){return null;}
        /// <summary>
        /// Template method for overriding params
        /// @private
        /// @param {Object} options
        /// @param {String} params
        /// @return {String} The modified params
        /// </summary>
        public JsString setupParams(object options, JsString @params){return null;}
        /// <summary>
        /// Template method for overriding url
        /// @private
        /// @param {Object} options
        /// @param {String} url
        /// @return {String} The modified url
        /// </summary>
        public JsString setupUrl(object options, JsString url){return null;}
        /// <summary>
        /// Uploads a form using a hidden iframe.
        /// @param {String/HTMLElement/Ext.Element} form The form to upload
        /// @param {String} url The url to post to
        /// @param {String} params Any extra parameters to pass
        /// @param {Object} options The initial options
        /// </summary>
        public void upload(object form, JsString url, JsString @params, object options){}
        public bool @async{get;set;}
        /// <summary>
        /// @cfg {Object} extraParams
        /// Any parameters to be appended to the request.
        /// </summary>
        public JsString defaultPostHeader{get;set;}
        public JsString defaultXhrHeader{get;set;}
        /// <summary>
        /// @cfg {Boolean} disableCaching
        /// True to add a unique cache-buster param to GET requests. (defaults to true)
        /// </summary>
        public bool disableCaching{get;set;}
        /// <summary>
        /// @cfg {String} disableCachingParam
        /// Change the parameter which is sent went disabling caching through a cache buster. Defaults to '_dc'
        /// </summary>
        public JsString disableCachingParam{get;set;}
        public object method{get;set;}
        public JsString password{get;set;}
        /// <summary>
        /// @cfg {Number} timeout
        /// The timeout in milliseconds to be used for requests. (defaults to 30000)
        /// </summary>
        public JsNumber timeout{get;set;}
        public object url{get;set;}
        /// <summary>
        /// @cfg {Object} extraParams
        /// Any parameters to be appended to the request.
        /// </summary>
        public bool useDefaultHeader{get;set;}
        public bool useDefaultXhrHeader{get;set;}
        public JsString username{get;set;}
    }
    #endregion
    #region ConnectionConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ConnectionConfig
    {
        public ConnectionConfig(){}
        /// <summary>
        /// True to add a unique cache-buster param to GET requests. (defaults to true)
        /// </summary>
        public bool disableCaching{get;set;}
        /// <summary>
        /// Change the parameter which is sent went disabling caching through a cache buster. Defaults to '_dc'
        /// </summary>
        public JsString disableCachingParam{get;set;}
        /// <summary>
        /// The timeout in milliseconds to be used for requests. (defaults to 30000)
        /// </summary>
        public JsNumber timeout{get;set;}
    }
    #endregion
    #region DirectStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DirectStore
    {
        public DirectStore(){}
        /// <summary>
        /// End Definitions
        /// </summary>
        public DirectStore(object config){}
        public JsString alias{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Errors
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Errors
    {
        public Errors(){}
        /// <summary>
        /// Returns all of the errors for the given field
        /// @param {String} fieldName The field to get errors for
        /// @return {Object[]} All errors for the given field
        /// </summary>
        public void getByField(JsString fieldName){}
        /// <summary>
        /// Returns true if there are no errors in the collection
        /// @return {Boolean}
        /// </summary>
        public void isValid(){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.Errors
        /// @extends Ext.util.MixedCollection
        /// *
        /// <p>Wraps a collection of validation error responses and provides convenient functions for
        /// accessing and errors for specific fields.</p>
        /// *
        /// <p>Usually this class does not need to be instantiated directly - instances are instead created
        /// automatically when {@link Ext.data.Model#validate validate} on a model instance:</p>
        /// *
        /// <pre><code>
        /// //validate some existing model instance - in this case it returned 2 failures messages
        /// var errors = myModel.validate();
        /// errors.isValid(); //false
        /// errors.length; //2
        /// errors.getByField('name');  // [{field: 'name',  message: 'must be present'}]
        /// errors.getByField('title'); // [{field: 'title', message: 'is too short'}]
        /// </code></pre>
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Field
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Field
    {
        public Field(){}
        public Field(Ext.data.FieldConfig config){}
        public Field(object config){}
        /// <summary>
        /// @extends Object
        /// @author Ed Spencer
        /// *
        /// Fields are used to define what a Model is. They aren't instantiated directly - instead, when we create a class that
        /// extends {@link Ext.data.Model}, it will automatically create a Field instance for each field configured in a {@link
        /// Ext.data.Model Model}. For example, we might set up a model like this:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// 'name', 'email',
        /// {name: 'age', type: 'int'},
        /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
        /// ]
        /// });
        /// *
        /// Four fields will have been created for the User Model - name, email, age and gender. Note that we specified a couple
        /// of different formats here; if we only pass in the string name of the field (as with name and email), the field is set
        /// up with the 'auto' type. It's as if we'd done this instead:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'name', type: 'auto'},
        /// {name: 'email', type: 'auto'},
        /// {name: 'age', type: 'int'},
        /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
        /// ]
        /// });
        /// *
        /// # Types and conversion
        /// *
        /// The {@link #type} is important - it's used to automatically convert data passed to the field into the correct format.
        /// In our example above, the name and email fields used the 'auto' type and will just accept anything that is passed
        /// into them. The 'age' field had an 'int' type however, so if we passed 25.4 this would be rounded to 25.
        /// *
        /// Sometimes a simple type isn't enough, or we want to perform some processing when we load a Field's data. We can do
        /// this using a {@link #convert} function. Here, we're going to create a new field based on another:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// 'name', 'email',
        /// {name: 'age', type: 'int'},
        /// {name: 'gender', type: 'string', defaultValue: 'Unknown'},
        /// *
        /// {
        /// name: 'firstName',
        /// convert: function(value, record) {
        /// var fullName  = record.get('name'),
        /// splits    = fullName.split(" "),
        /// firstName = splits[0];
        /// *
        /// return firstName;
        /// }
        /// }
        /// ]
        /// });
        /// *
        /// Now when we create a new User, the firstName is populated automatically based on the name:
        /// *
        /// var ed = Ext.create('User', {name: 'Ed Spencer'});
        /// *
        /// console.log(ed.get('firstName')); //logs 'Ed', based on our convert function
        /// *
        /// In fact, if we log out all of the data inside ed, we'll see this:
        /// *
        /// console.log(ed.data);
        /// *
        /// //outputs this:
        /// {
        /// age: 0,
        /// email: "",
        /// firstName: "Ed",
        /// gender: "Unknown",
        /// name: "Ed Spencer"
        /// }
        /// *
        /// The age field has been given a default of zero because we made it an int type. As an auto field, email has defaulted
        /// to an empty string. When we registered the User model we set gender's {@link #defaultValue} to 'Unknown' so we see
        /// that now. Let's correct that and satisfy ourselves that the types work as we expect:
        /// *
        /// ed.set('gender', 'Male');
        /// ed.get('gender'); //returns 'Male'
        /// *
        /// ed.set('age', 25.4);
        /// ed.get('age'); //returns 25 - we wanted an int, not a float, so no decimal places allowed
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @cfg {Boolean} allowBlank
        /// @private
        /// *
        /// Used for validating a {@link Ext.data.Model model}. Defaults to true. An empty value here will cause
        /// {@link Ext.data.Model}.{@link Ext.data.Model#isValid isValid} to evaluate to false.
        /// </summary>
        public bool allowBlank{get;set;}
        /// <summary>
        /// @cfg {String} dateFormat
        /// *
        /// Used when converting received data into a Date when the {@link #type} is specified as `"date"`.
        /// *
        /// A format string for the {@link Ext.Date#parse Ext.Date.parse} function, or "timestamp" if the value provided by
        /// the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a javascript millisecond
        /// timestamp. See {@link Ext.Date}.
        /// </summary>
        public JsString dateFormat{get;set;}
        /// <summary>
        /// @cfg {Object} defaultValue
        /// *
        /// The default value used **when a Model is being created by a {@link Ext.data.reader.Reader Reader}**
        /// when the item referenced by the `{@link Ext.data.Field#mapping mapping}` does not exist in the data object
        /// (i.e. undefined). Defaults to "".
        /// </summary>
        public object defaultValue{get;set;}
        /// <summary>
        /// @cfg {String/Number} mapping
        /// *
        /// (Optional) A path expression for use by the {@link Ext.data.reader.Reader} implementation that is creating the
        /// {@link Ext.data.Model Model} to extract the Field value from the data object. If the path expression is the same
        /// as the field name, the mapping may be omitted.
        /// *
        /// The form of the mapping expression depends on the Reader being used.
        /// *
        /// - {@link Ext.data.reader.Json}
        /// *
        /// The mapping is a string containing the javascript expression to reference the data from an element of the data
        /// item's {@link Ext.data.reader.Json#root root} Array. Defaults to the field name.
        /// *
        /// - {@link Ext.data.reader.Xml}
        /// *
        /// The mapping is an {@link Ext.DomQuery} path to the data item relative to the DOM element that represents the
        /// {@link Ext.data.reader.Xml#record record}. Defaults to the field name.
        /// *
        /// - {@link Ext.data.reader.Array}
        /// *
        /// The mapping is a number indicating the Array index of the field's value. Defaults to the field specification's
        /// Array position.
        /// *
        /// If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
        /// function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
        /// return the desired data.
        /// </summary>
        public object mapping{get;set;}
        /// <summary>
        /// @cfg {Boolean} persist
        /// *
        /// False to exclude this field from the {@link Ext.data.Model#modified} fields in a model. This will also exclude
        /// the field from being written using a {@link Ext.data.writer.Writer}. This option is useful when model fields are
        /// used to keep state on the client but do not need to be persisted to the server. Defaults to true.
        /// </summary>
        public bool persist{get;set;}
        /// <summary>
        /// @cfg {String} sortDir
        /// *
        /// Initial direction to sort (`"ASC"` or `"DESC"`). Defaults to `"ASC"`.
        /// </summary>
        public JsString sortDir{get;set;}
        /// <summary>
        /// @cfg {Function} sortType
        /// *
        /// A function which converts a Field's value to a comparable value in order to ensure correct sort ordering.
        /// Predefined functions are provided in {@link Ext.data.SortTypes}. A custom sort example:
        /// *
        /// // current sort     after sort we want
        /// // +-+------+          +-+------+
        /// // |1|First |          |1|First |
        /// // |2|Last  |          |3|Second|
        /// // |3|Second|          |2|Last  |
        /// // +-+------+          +-+------+
        /// *
        /// sortType: function(value) {
        /// switch (value.toLowerCase()) // native toLowerCase():
        /// {
        /// case 'first': return 1;
        /// case 'second': return 2;
        /// default: return 3;
        /// }
        /// }
        /// </summary>
        public JsAction sortType{get;set;}
        /// <summary>
        /// @cfg {Boolean} useNull
        /// *
        /// Use when converting received data into a Number type (either int or float). If the value cannot be
        /// parsed, null will be used if useNull is true, otherwise the value will be 0. Defaults to false.
        /// </summary>
        public bool useNull{get;set;}
    }
    #endregion
    #region FieldConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldConfig
    {
        public FieldConfig(){}
        /// <summary>
        /// @private
        /// *
        /// Used for validating a {@link Ext.data.Model model}. Defaults to true. An empty value here will cause
        /// {@link Ext.data.Model}.{@link Ext.data.Model#isValid isValid} to evaluate to false.
        /// </summary>
        public bool allowBlank{get;set;}
        /// <summary>
        /// *
        /// A function which converts the value provided by the Reader into an object that will be stored in the Model.
        /// It is passed the following parameters:
        /// *
        /// - **v** : Mixed
        /// *
        /// The data value as read by the Reader, if undefined will use the configured `{@link Ext.data.Field#defaultValue
        /// defaultValue}`.
        /// *
        /// - **rec** : Ext.data.Model
        /// *
        /// The data object containing the Model as read so far by the Reader. Note that the Model may not be fully populated
        /// at this point as the fields are read in the order that they are defined in your
        /// {@link Ext.data.Model#fields fields} array.
        /// *
        /// Example of convert functions:
        /// *
        /// function fullName(v, record){
        /// return record.name.last + ', ' + record.name.first;
        /// }
        /// *
        /// function location(v, record){
        /// return !record.city ? '' : (record.city + ', ' + record.state);
        /// }
        /// *
        /// Ext.define('Dude', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'fullname',  convert: fullName},
        /// {name: 'firstname', mapping: 'name.first'},
        /// {name: 'lastname',  mapping: 'name.last'},
        /// {name: 'city', defaultValue: 'homeless'},
        /// 'state',
        /// {name: 'location',  convert: location}
        /// ]
        /// });
        /// *
        /// // create the data store
        /// var store = Ext.create('Ext.data.Store', {
        /// reader: {
        /// type: 'json',
        /// model: 'Dude',
        /// idProperty: 'key',
        /// root: 'daRoot',
        /// totalProperty: 'total'
        /// }
        /// });
        /// *
        /// var myData = [
        /// { key: 1,
        /// name: { first: 'Fat',    last:  'Albert' }
        /// // notice no city, state provided in data object
        /// },
        /// { key: 2,
        /// name: { first: 'Barney', last:  'Rubble' },
        /// city: 'Bedrock', state: 'Stoneridge'
        /// },
        /// { key: 3,
        /// name: { first: 'Cliff',  last:  'Claven' },
        /// city: 'Boston',  state: 'MA'
        /// }
        /// ];
        /// </summary>
        public JsAction convert{get;set;}
        /// <summary>
        /// *
        /// Used when converting received data into a Date when the {@link #type} is specified as `"date"`.
        /// *
        /// A format string for the {@link Ext.Date#parse Ext.Date.parse} function, or "timestamp" if the value provided by
        /// the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a javascript millisecond
        /// timestamp. See {@link Ext.Date}.
        /// </summary>
        public JsString dateFormat{get;set;}
        /// <summary>
        /// *
        /// The default value used **when a Model is being created by a {@link Ext.data.reader.Reader Reader}**
        /// when the item referenced by the `{@link Ext.data.Field#mapping mapping}` does not exist in the data object
        /// (i.e. undefined). Defaults to "".
        /// </summary>
        public object defaultValue{get;set;}
        /// <summary>
        /// *
        /// (Optional) A path expression for use by the {@link Ext.data.reader.Reader} implementation that is creating the
        /// {@link Ext.data.Model Model} to extract the Field value from the data object. If the path expression is the same
        /// as the field name, the mapping may be omitted.
        /// *
        /// The form of the mapping expression depends on the Reader being used.
        /// *
        /// - {@link Ext.data.reader.Json}
        /// *
        /// The mapping is a string containing the javascript expression to reference the data from an element of the data
        /// item's {@link Ext.data.reader.Json#root root} Array. Defaults to the field name.
        /// *
        /// - {@link Ext.data.reader.Xml}
        /// *
        /// The mapping is an {@link Ext.DomQuery} path to the data item relative to the DOM element that represents the
        /// {@link Ext.data.reader.Xml#record record}. Defaults to the field name.
        /// *
        /// - {@link Ext.data.reader.Array}
        /// *
        /// The mapping is a number indicating the Array index of the field's value. Defaults to the field specification's
        /// Array position.
        /// *
        /// If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
        /// function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
        /// return the desired data.
        /// </summary>
        public object mapping{get;set;}
        /// <summary>
        /// *
        /// The name by which the field is referenced within the Model. This is referenced by, for example, the `dataIndex`
        /// property in column definition objects passed to Ext.grid.property.HeaderContainer.
        /// *
        /// Note: In the simplest case, if no properties other than `name` are required, a field definition may consist of
        /// just a String for the field name.
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// *
        /// False to exclude this field from the {@link Ext.data.Model#modified} fields in a model. This will also exclude
        /// the field from being written using a {@link Ext.data.writer.Writer}. This option is useful when model fields are
        /// used to keep state on the client but do not need to be persisted to the server. Defaults to true.
        /// </summary>
        public bool persist{get;set;}
        /// <summary>
        /// *
        /// Initial direction to sort (`"ASC"` or `"DESC"`). Defaults to `"ASC"`.
        /// </summary>
        public JsString sortDir{get;set;}
        /// <summary>
        /// *
        /// A function which converts a Field's value to a comparable value in order to ensure correct sort ordering.
        /// Predefined functions are provided in {@link Ext.data.SortTypes}. A custom sort example:
        /// *
        /// // current sort     after sort we want
        /// // +-+------+          +-+------+
        /// // |1|First |          |1|First |
        /// // |2|Last  |          |3|Second|
        /// // |3|Second|          |2|Last  |
        /// // +-+------+          +-+------+
        /// *
        /// sortType: function(value) {
        /// switch (value.toLowerCase()) // native toLowerCase():
        /// {
        /// case 'first': return 1;
        /// case 'second': return 2;
        /// default: return 3;
        /// }
        /// }
        /// </summary>
        public JsAction sortType{get;set;}
        /// <summary>
        /// *
        /// The data type for automatic conversion from received data to the *stored* value if
        /// `{@link Ext.data.Field#convert convert}` has not been specified. This may be specified as a string value.
        /// Possible values are
        /// *
        /// - auto (Default, implies no conversion)
        /// - string
        /// - int
        /// - float
        /// - boolean
        /// - date
        /// *
        /// This may also be specified by referencing a member of the {@link Ext.data.Types} class.
        /// *
        /// Developers may create their own application-specific data types by defining new members of the {@link
        /// Ext.data.Types} class.
        /// </summary>
        public object type{get;set;}
        /// <summary>
        /// *
        /// Use when converting received data into a Number type (either int or float). If the value cannot be
        /// parsed, null will be used if useNull is true, otherwise the value will be 0. Defaults to false.
        /// </summary>
        public bool useNull{get;set;}
    }
    #endregion
    #region IdGenerator
    [JsType(JsMode.Prototype, Export=false)]
    public partial class IdGenerator
    {
        public IdGenerator(){}
        /// <summary>
        /// Initializes a new instance.
        /// @param {Object} config (optional) Configuration object to be applied to the new instance.
        /// </summary>
        public IdGenerator(object config){}
        /// <summary>
        /// @cfg {String} id
        /// The id by which to register a new instance. This instance can be found using the
        /// {@link Ext.data.IdGenerator#get} static method.
        /// </summary>
        public void getRecId(object rec){}
        /// <summary>
        /// @author Don Griffin
        /// *
        /// This class is a base for all id generators. It also provides lookup of id generators by
        /// their id.
        /// Generally, id generators are used to generate a primary key for new model instances. There
        /// are different approaches to solving this problem, so this mechanism has both simple use
        /// cases and is open to custom implementations. A {@link Ext.data.Model} requests id generation
        /// using the {@link Ext.data.Model#idgen} property.
        /// *
        /// # Identity, Type and Shared IdGenerators
        /// *
        /// It is often desirable to share IdGenerators to ensure uniqueness or common configuration.
        /// This is done by giving IdGenerator instances an id property by which they can be looked
        /// up using the {@link #get} method. To configure two {@link Ext.data.Model Model} classes
        /// to share one {@link Ext.data.SequentialIdGenerator sequential} id generator, you simply
        /// assign them the same id:
        /// *
        /// Ext.define('MyApp.data.MyModelA', {
        /// extend: 'Ext.data.Model',
        /// idgen: {
        /// type: 'sequential',
        /// id: 'foo'
        /// }
        /// });
        /// *
        /// Ext.define('MyApp.data.MyModelB', {
        /// extend: 'Ext.data.Model',
        /// idgen: {
        /// type: 'sequential',
        /// id: 'foo'
        /// }
        /// });
        /// *
        /// To make this as simple as possible for generator types that are shared by many (or all)
        /// Models, the IdGenerator types (such as 'sequential' or 'uuid') are also reserved as
        /// generator id's. This is used by the {@link Ext.data.UuidGenerator} which has an id equal
        /// to its type ('uuid'). In other words, the following Models share the same generator:
        /// *
        /// Ext.define('MyApp.data.MyModelX', {
        /// extend: 'Ext.data.Model',
        /// idgen: 'uuid'
        /// });
        /// *
        /// Ext.define('MyApp.data.MyModelY', {
        /// extend: 'Ext.data.Model',
        /// idgen: 'uuid'
        /// });
        /// *
        /// This can be overridden (by specifying the id explicitly), but there is no particularly
        /// good reason to do so for this generator type.
        /// *
        /// # Creating Custom Generators
        /// An id generator should derive from this class and implement the {@link #generate} method.
        /// The constructor will apply config properties on new instances, so a constructor is often
        /// not necessary.
        /// *
        /// To register an id generator type, a derived class should provide an `alias` like so:
        /// *
        /// Ext.define('MyApp.data.CustomIdGenerator', {
        /// extend: 'Ext.data.IdGenerator',
        /// alias: 'idgen.custom',
        /// *
        /// configProp: 42, // some config property w/default value
        /// *
        /// generate: function () {
        /// return ... // a new id
        /// }
        /// });
        /// *
        /// Using the custom id generator is then straightforward:
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// idgen: 'custom'
        /// });
        /// // or...
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// idgen: {
        /// type: 'custom',
        /// configProp: value
        /// }
        /// });
        /// *
        /// It is not recommended to mix shared generators with generator configuration. This leads
        /// to unpredictable results unless all configurations match (which is also redundant). In
        /// such cases, a custom generator with a default id is the best approach.
        /// *
        /// Ext.define('MyApp.data.CustomIdGenerator', {
        /// extend: 'Ext.data.SequentialIdGenerator',
        /// alias: 'idgen.custom',
        /// *
        /// id: 'custom', // shared by default
        /// *
        /// prefix: 'ID_',
        /// seed: 1000
        /// });
        /// *
        /// Ext.define('MyApp.data.MyModelX', {
        /// extend: 'Ext.data.Model',
        /// idgen: 'custom'
        /// });
        /// *
        /// Ext.define('MyApp.data.MyModelY', {
        /// extend: 'Ext.data.Model',
        /// idgen: 'custom'
        /// });
        /// *
        /// // the above models share a generator that produces ID_1000, ID_1001, etc..
        /// *
        /// </summary>
        public bool isGenerator{get;set;}
    }
    #endregion
    #region JsonP
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonP
    {
        public JsonP(){}
        /// <summary>
        /// Abort a request. If the request parameter is not specified all open requests will
        /// be aborted.
        /// @param {Object/String} request (Optional) The request to abort
        /// </summary>
        public void abort(object request){}
        /// <summary>
        /// Cleans up anu script handling errors
        /// @private
        /// @param {Object} request The request
        /// </summary>
        public void cleanupErrorHandling(object request){}
        /// <summary>
        /// Create the script tag
        /// @private
        /// @param {String} url The url of the request
        /// @param {Object} params Any extra params to be sent
        /// </summary>
        public void createScript(JsString url, object @params){}
        /// <summary>
        /// Handles any aborts when loading the script
        /// @private
        /// @param {Object} request The request
        /// </summary>
        public void handleAbort(object request){}
        /// <summary>
        /// Handles any script errors when loading the script
        /// @private
        /// @param {Object} request The request
        /// </summary>
        public void handleError(object request){}
        /// <summary>
        /// Handle a successful response
        /// @private
        /// @param {Object} result The result from the request
        /// @param {Object} request The request
        /// </summary>
        public void handleResponse(object result, object request){}
        /// <summary>
        /// Handle any script timeouts
        /// @private
        /// @param {Object} request The request
        /// </summary>
        public void handleTimeout(object request){}
        /// <summary>
        /// Makes a JSONP request.
        /// @param {Object} options An object which may contain the following properties. Note that options will
        /// take priority over any defaults that are specified in the class.
        /// <ul>
        /// <li><b>url</b> : String <div class="sub-desc">The URL to request.</div></li>
        /// <li><b>params</b> : Object (Optional)<div class="sub-desc">An object containing a series of
        /// key value pairs that will be sent along with the request.</div></li>
        /// <li><b>timeout</b> : Number (Optional) <div class="sub-desc">See {@link #timeout}</div></li>
        /// <li><b>callbackKey</b> : String (Optional) <div class="sub-desc">See {@link #callbackKey}</div></li>
        /// <li><b>callbackName</b> : String (Optional) <div class="sub-desc">The function name to use for this request.
        /// By default this name will be auto-generated: Ext.data.JsonP.callback1, Ext.data.JsonP.callback2, etc.
        /// Setting this option to "my_name" will force the function name to be Ext.data.JsonP.my_name.
        /// Use this if you want deterministic behavior, but be careful - the callbackName should be different
        /// in each JsonP request that you make.</div></li>
        /// <li><b>disableCaching</b> : Boolean (Optional) <div class="sub-desc">See {@link #disableCaching}</div></li>
        /// <li><b>disableCachingParam</b> : String (Optional) <div class="sub-desc">See {@link #disableCachingParam}</div></li>
        /// <li><b>success</b> : Function (Optional) <div class="sub-desc">A function to execute if the request succeeds.</div></li>
        /// <li><b>failure</b> : Function (Optional) <div class="sub-desc">A function to execute if the request fails.</div></li>
        /// <li><b>callback</b> : Function (Optional) <div class="sub-desc">A function to execute when the request
        /// completes, whether it is a success or failure.</div></li>
        /// <li><b>scope</b> : Object (Optional)<div class="sub-desc">The scope in
        /// which to execute the callbacks: The "this" object for the callback function. Defaults to the browser window.</div></li>
        /// </ul>
        /// @return {Object} request An object containing the request details.
        /// </summary>
        public object request(object options){return null;}
        /// <summary>
        /// Sets up error handling for the script
        /// @private
        /// @param {Object} request The request
        /// </summary>
        public void setupErrorHandling(object request){}
        /// <summary>
        /// @property callbackKey
        /// @type String
        /// Specifies the GET parameter that will be sent to the server containing the function name to be executed when
        /// the request completes. Defaults to <tt>callback</tt>. Thus, a common request will be in the form of
        /// url?callback=Ext.data.JsonP.callback1
        /// </summary>
        public JsString callbackKey{get;set;}
        /// <summary>
        /// @property disableCaching
        /// @type Boolean
        /// True to add a unique cache-buster param to requests. Defaults to <tt>true</tt>.
        /// </summary>
        public bool disableCaching{get;set;}
        /// <summary>
        /// @property disableCachingParam
        /// @type String
        /// Change the parameter which is sent went disabling caching through a cache buster. Defaults to <tt>'_dc'</tt>.
        /// </summary>
        public JsString disableCachingParam{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public bool singleton{get;set;}
        /// <summary>
        /// @property timeout
        /// @type Number
        /// A default timeout for any JsonP requests. If the request has not completed in this time the
        /// failure callback will be fired. The timeout is in ms. Defaults to <tt>30000</tt>.
        /// </summary>
        public object timeout{get;set;}
        /// <summary>
        /// Sets up error handling for the script
        /// @private
        /// @param {Object} request The request
        /// </summary>
        [JsProperty]
        public object upErrorHandling{private get;[JsMethod(Name="setupErrorHandling")]set;}
    }
    #endregion
    #region JsonPStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonPStore
    {
        public JsonPStore(){}
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public JsonPStore(object config){}
        /// <summary>
        /// @class Ext.data.JsonPStore
        /// @extends Ext.data.Store
        /// @ignore
        /// @private
        /// <p><b>NOTE:</b> This class is in need of migration to the new API.</p>
        /// <p>Small helper class to make creating {@link Ext.data.Store}s from different domain JSON data easier.
        /// A JsonPStore will be automatically configured with a {@link Ext.data.reader.Json} and a {@link Ext.data.proxy.JsonP JsonPProxy}.</p>
        /// <p>A store configuration would be something like:<pre><code>
        /// var store = new Ext.data.JsonPStore({
        /// // store configs
        /// autoDestroy: true,
        /// storeId: 'myStore',
        /// // proxy configs
        /// url: 'get-images.php',
        /// // reader configs
        /// root: 'images',
        /// idProperty: 'name',
        /// fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
        /// });
        /// </code></pre></p>
        /// <p>This store is configured to consume a returned object of the form:<pre><code>
        /// stcCallback({
        /// images: [
        /// {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
        /// {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
        /// ]
        /// })
        /// </code></pre>
        /// <p>Where stcCallback is the callback name passed in the request to the remote domain. See {@link Ext.data.proxy.JsonP JsonPProxy}
        /// for details of how this works.</p>
        /// An object literal of this form could also be used as the {@link #data} config option.</p>
        /// <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
        /// <b>{@link Ext.data.reader.Json JsonReader}</b> and <b>{@link Ext.data.proxy.JsonP JsonPProxy}</b>.</p>
        /// @xtype jsonpstore
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @class Ext.data.JsonPStore
        /// @extends Ext.data.Store
        /// @ignore
        /// @private
        /// <p><b>NOTE:</b> This class is in need of migration to the new API.</p>
        /// <p>Small helper class to make creating {@link Ext.data.Store}s from different domain JSON data easier.
        /// A JsonPStore will be automatically configured with a {@link Ext.data.reader.Json} and a {@link Ext.data.proxy.JsonP JsonPProxy}.</p>
        /// <p>A store configuration would be something like:<pre><code>
        /// var store = new Ext.data.JsonPStore({
        /// // store configs
        /// autoDestroy: true,
        /// storeId: 'myStore',
        /// // proxy configs
        /// url: 'get-images.php',
        /// // reader configs
        /// root: 'images',
        /// idProperty: 'name',
        /// fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
        /// });
        /// </code></pre></p>
        /// <p>This store is configured to consume a returned object of the form:<pre><code>
        /// stcCallback({
        /// images: [
        /// {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
        /// {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
        /// ]
        /// })
        /// </code></pre>
        /// <p>Where stcCallback is the callback name passed in the request to the remote domain. See {@link Ext.data.proxy.JsonP JsonPProxy}
        /// for details of how this works.</p>
        /// An object literal of this form could also be used as the {@link #data} config option.</p>
        /// <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
        /// <b>{@link Ext.data.reader.Json JsonReader}</b> and <b>{@link Ext.data.proxy.JsonP JsonPProxy}</b>.</p>
        /// @xtype jsonpstore
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region JsonStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonStore
    {
        public JsonStore(){}
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public JsonStore(object config){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.JsonStore
        /// @extends Ext.data.Store
        /// @ignore
        /// *
        /// <p>Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.
        /// A JsonStore will be automatically configured with a {@link Ext.data.reader.Json}.</p>
        /// *
        /// <p>A store configuration would be something like:</p>
        /// *
        /// <pre><code>
        /// var store = new Ext.data.JsonStore({
        /// // store configs
        /// autoDestroy: true,
        /// storeId: 'myStore'
        /// proxy: {
        /// type: 'ajax',
        /// url: 'get-images.php',
        /// reader: {
        /// type: 'json',
        /// root: 'images',
        /// idProperty: 'name'
        /// }
        /// },
        /// //alternatively, a {@link Ext.data.Model} name can be given (see {@link Ext.data.Store} for an example)
        /// fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
        /// });
        /// </code></pre>
        /// *
        /// <p>This store is configured to consume a returned object of the form:<pre><code>
        /// {
        /// images: [
        /// {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
        /// {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>An object literal of this form could also be used as the {@link #data} config option.</p>
        /// *
        /// @xtype jsonstore
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.JsonStore
        /// @extends Ext.data.Store
        /// @ignore
        /// *
        /// <p>Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.
        /// A JsonStore will be automatically configured with a {@link Ext.data.reader.Json}.</p>
        /// *
        /// <p>A store configuration would be something like:</p>
        /// *
        /// <pre><code>
        /// var store = new Ext.data.JsonStore({
        /// // store configs
        /// autoDestroy: true,
        /// storeId: 'myStore'
        /// proxy: {
        /// type: 'ajax',
        /// url: 'get-images.php',
        /// reader: {
        /// type: 'json',
        /// root: 'images',
        /// idProperty: 'name'
        /// }
        /// },
        /// //alternatively, a {@link Ext.data.Model} name can be given (see {@link Ext.data.Store} for an example)
        /// fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
        /// });
        /// </code></pre>
        /// *
        /// <p>This store is configured to consume a returned object of the form:<pre><code>
        /// {
        /// images: [
        /// {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
        /// {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>An object literal of this form could also be used as the {@link #data} config option.</p>
        /// *
        /// @xtype jsonstore
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Model
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Model
    {
        public Model(){}
        public Model(ModelConfig config){}
        /// <summary>
        /// @private
        /// If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
        /// afterCommit method is called
        /// </summary>
        public void afterCommit(){}
        /// <summary>
        /// @private
        /// If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
        /// afterEdit method is called
        /// @param {String[]} modifiedFieldNames Array of field names changed during edit.
        /// </summary>
        public void afterEdit(object modifiedFieldNames){}
        /// <summary>
        /// @private
        /// If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
        /// afterReject method is called
        /// </summary>
        public void afterReject(){}
        /// <summary>
        /// Begins an edit. While in edit mode, no events (e.g.. the `update` event) are relayed to the containing store.
        /// When an edit has begun, it must be followed by either {@link #endEdit} or {@link #cancelEdit}.
        /// </summary>
        public void beginEdit(){}
        /// <summary>
        /// @private
        /// Helper function used by afterEdit, afterReject and afterCommit. Calls the given method on the
        /// {@link Ext.data.Store store} that this instance has {@link #join joined}, if any. The store function
        /// will always be called with the model instance as its single argument.
        /// @param {String} fn The function to call on the store
        /// </summary>
        public void callStore(JsString fn){}
        /// <summary>
        /// Cancels all changes made in the current edit operation.
        /// </summary>
        public void cancelEdit(){}
        /// <summary>
        /// Usually called by the {@link Ext.data.Store} which owns the model instance. Commits all changes made to the
        /// instance since either creation or the last commit operation.
        /// *
        /// Developers should subscribe to the {@link Ext.data.Store#update} event to have their code notified of commit
        /// operations.
        /// *
        /// @param {Boolean} silent (optional) True to skip notification of the owning store of the change.
        /// Defaults to false.
        /// </summary>
        public void commit(bool silent){}
        /// <summary>
        /// @cfg {String/Object/Ext.data.proxy.Proxy} proxy
        /// The {@link Ext.data.proxy.Proxy proxy} to use for this model.
        /// </summary>
        public Model(object data, object id, object raw){}
        /// <summary>
        /// Creates a copy (clone) of this Model instance.
        /// *
        /// @param {String} id (optional) A new id, defaults to the id of the instance being copied.
        /// See `{@link Ext.data.Model#id id}`. To generate a phantom instance with a new id use:
        /// *
        /// var rec = record.copy(); // clone the record
        /// Ext.data.Model.id(rec); // automatically generate a unique sequential id
        /// *
        /// @return {Ext.data.Model}
        /// </summary>
        public void copy(JsString newId){}
        /// <summary>
        /// Destroys the model using the configured proxy.
        /// @param {Object} options Options to pass to the proxy. Config object for {@link Ext.data.Operation}.
        /// @return {Ext.data.Model} The Model instance
        /// </summary>
        public Model destroy(object options){return null;}
        /// <summary>
        /// Ends an edit. If any data was modified, the containing store is notified (ie, the store's `update` event will
        /// fire).
        /// @param {Boolean} silent True to not notify the store of the change
        /// @param {String[]} modifiedFieldNames Array of field names changed during edit.
        /// </summary>
        public void endEdit(bool silent, object modifiedFieldNames){}
        /// <summary>
        /// Returns the value of the given field
        /// @param {String} fieldName The field to fetch the value for
        /// @return {Object} The value
        /// </summary>
        public object get(JsString field){return null;}
        /// <summary>
        /// Gets all of the data from this Models *loaded* associations. It does this recursively - for example if we have a
        /// User which hasMany Orders, and each Order hasMany OrderItems, it will return an object like this:
        /// *
        /// {
        /// orders: [
        /// {
        /// id: 123,
        /// status: 'shipped',
        /// orderItems: [
        /// ...
        /// ]
        /// }
        /// ]
        /// }
        /// *
        /// @return {Object} The nested data set for the Model's loaded associations
        /// </summary>
        public object getAssociatedData(){return null;}
        /// <summary>
        /// Gets a hash of only the fields that have been modified since this Model was created or commited.
        /// @return {Object}
        /// </summary>
        public void getChanges(){}
        /// <summary>
        /// Gets all values for each field in this model and returns an object
        /// containing the current data.
        /// @param {Boolean} includeAssociated True to also include associated data. Defaults to false.
        /// @return {Object} An object hash containing all the values in this model
        /// </summary>
        public object getData(bool includeAssociated){return null;}
        /// <summary>
        /// Returns the unique ID allocated to this model instance as defined by {@link #idProperty}.
        /// @return {Number} The id
        /// </summary>
        public JsNumber getId(){return null;}
        /// <summary>
        /// Returns the configured Proxy for this Model.
        /// @return {Ext.data.proxy.Proxy} The proxy
        /// </summary>
        public Proxy getProxy(){return null;}
        public void getUniqueId(){}
        /// <summary>
        /// Checks if two values are equal, taking into account certain
        /// special factors, for example dates.
        /// @private
        /// @param {Object} a The first value
        /// @param {Object} b The second value
        /// @return {Boolean} True if the values are equal
        /// </summary>
        public bool isEqual(object a, object b){return false;}
        /// <summary>
        /// Returns true if the passed field name has been `{@link #modified}` since the load or last commit.
        /// @param {String} fieldName {@link Ext.data.Field#name}
        /// @return {Boolean}
        /// </summary>
        public void isModified(JsString fieldName){}
        /// <summary>
        /// Checks if the model is valid. See {@link #validate}.
        /// @return {Boolean} True if the model is valid.
        /// </summary>
        public bool isValid(){return false;}
        /// <summary>
        /// Tells this model instance that it has been added to a store.
        /// @param {Ext.data.Store} store The store to which this model has been added.
        /// </summary>
        public void join(Store store){}
        public void markDirty(){}
        public void onClassExtended(object cls, object data, object hooks){}
        /// <summary>
        /// @private
        /// This complex-looking method takes a given Model instance and returns an object containing all data from
        /// all of that Model's *loaded* associations. See {@link #getAssociatedData}
        /// @param {Ext.data.Model} record The Model instance
        /// @param {String[]} ids PRIVATE. The set of Model instance internalIds that have already been loaded
        /// @param {String} associationType (optional) The name of the type of association to limit to.
        /// @return {Object} The nested data set for the Model's loaded associations
        /// </summary>
        public object prepareAssociatedData(Model record, object ids, JsString associationType){return null;}
        /// <summary>
        /// Usually called by the {@link Ext.data.Store} to which this model instance has been {@link #join joined}. Rejects
        /// all changes made to the model instance since either creation, or the last commit operation. Modified fields are
        /// reverted to their original values.
        /// *
        /// Developers should subscribe to the {@link Ext.data.Store#update} event to have their code notified of reject
        /// operations.
        /// *
        /// @param {Boolean} silent (optional) True to skip notification of the owning store of the change.
        /// Defaults to false.
        /// </summary>
        public void reject(bool silent){}
        /// <summary>
        /// Saves the model instance using the configured proxy.
        /// @param {Object} options Options to pass to the proxy. Config object for {@link Ext.data.Operation}.
        /// @return {Ext.data.Model} The Model instance
        /// </summary>
        public Model save(object options){return null;}
        /// <summary>
        /// Sets the given field to the given value, marks the instance as dirty
        /// @param {String/Object} fieldName The field to set, or an object containing key/value pairs
        /// @param {Object} value The value to set
        /// </summary>
        public void set(object fieldName, object value){}
        /// <summary>
        /// Marks this **Record** as `{@link #dirty}`. This method is used interally when adding `{@link #phantom}` records
        /// to a {@link Ext.data.proxy.Server#writer writer enabled store}.
        /// *
        /// Marking a record `{@link #dirty}` causes the phantom to be returned by {@link Ext.data.Store#getUpdatedRecords}
        /// where it will have a create action composed for it during {@link Ext.data.Model#save model save} operations.
        /// </summary>
        public void setDirty(){}
        /// <summary>
        /// Sets the model instance's id field to the given id.
        /// @param {Number} id The new id
        /// </summary>
        public void setId(JsNumber id){}
        /// <summary>
        /// Sets the Proxy to use for this model. Accepts any options that can be accepted by
        /// {@link Ext#createByAlias Ext.createByAlias}.
        /// *
        /// @param {String/Object/Ext.data.proxy.Proxy} proxy The proxy
        /// @return {Ext.data.proxy.Proxy}
        /// </summary>
        public void setProxy(object proxy){}
        /// <summary>
        /// Tells this model instance that it has been removed from the store.
        /// @param {Ext.data.Store} store The store from which this model has been removed.
        /// </summary>
        public void unjoin(Store store){}
        /// <summary>
        /// Validates the current data against all of its configured {@link #validations}.
        /// @return {Ext.data.Errors} The errors object
        /// </summary>
        public Errors validate(){return null;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// A Model represents some object that your application manages. For example, one might define a Model for Users,
        /// Products, Cars, or any other real-world object that we want to model in the system. Models are registered via the
        /// {@link Ext.ModelManager model manager}, and are used by {@link Ext.data.Store stores}, which are in turn used by many
        /// of the data-bound components in Ext.
        /// *
        /// Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'name',  type: 'string'},
        /// {name: 'age',   type: 'int'},
        /// {name: 'phone', type: 'string'},
        /// {name: 'alive', type: 'boolean', defaultValue: true}
        /// ],
        /// *
        /// changeName: function() {
        /// var oldName = this.get('name'),
        /// newName = oldName + " The Barbarian";
        /// *
        /// this.set('name', newName);
        /// }
        /// });
        /// *
        /// The fields array is turned into a {@link Ext.util.MixedCollection MixedCollection} automatically by the {@link
        /// Ext.ModelManager ModelManager}, and all other functions and properties are copied to the new Model's prototype.
        /// *
        /// Now we can create instances of our User model and call any model logic we defined:
        /// *
        /// var user = Ext.create('User', {
        /// name : 'Conan',
        /// age  : 24,
        /// phone: '555-555-5555'
        /// });
        /// *
        /// user.changeName();
        /// user.get('name'); //returns "Conan The Barbarian"
        /// *
        /// # Validations
        /// *
        /// Models have built-in support for validations, which are executed against the validator functions in {@link
        /// Ext.data.validations} ({@link Ext.data.validations see all validation functions}). Validations are easy to add to
        /// models:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'name',     type: 'string'},
        /// {name: 'age',      type: 'int'},
        /// {name: 'phone',    type: 'string'},
        /// {name: 'gender',   type: 'string'},
        /// {name: 'username', type: 'string'},
        /// {name: 'alive',    type: 'boolean', defaultValue: true}
        /// ],
        /// *
        /// validations: [
        /// {type: 'presence',  field: 'age'},
        /// {type: 'length',    field: 'name',     min: 2},
        /// {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
        /// {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
        /// {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
        /// ]
        /// });
        /// *
        /// The validations can be run by simply calling the {@link #validate} function, which returns a {@link Ext.data.Errors}
        /// object:
        /// *
        /// var instance = Ext.create('User', {
        /// name: 'Ed',
        /// gender: 'Male',
        /// username: 'edspencer'
        /// });
        /// *
        /// var errors = instance.validate();
        /// *
        /// # Associations
        /// *
        /// Models can have associations with other Models via {@link Ext.data.association.HasOne},
        /// {@link Ext.data.association.BelongsTo belongsTo} and {@link Ext.data.association.HasMany hasMany} associations.
        /// For example, let's say we're writing a blog administration application which deals with Users, Posts and Comments.
        /// We can express the relationships between these models like this:
        /// *
        /// Ext.define('Post', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'user_id'],
        /// *
        /// belongsTo: 'User',
        /// hasMany  : {model: 'Comment', name: 'comments'}
        /// });
        /// *
        /// Ext.define('Comment', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'user_id', 'post_id'],
        /// *
        /// belongsTo: 'Post'
        /// });
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id'],
        /// *
        /// hasMany: [
        /// 'Post',
        /// {model: 'Comment', name: 'comments'}
        /// ]
        /// });
        /// *
        /// See the docs for {@link Ext.data.association.HasOne}, {@link Ext.data.association.BelongsTo} and
        /// {@link Ext.data.association.HasMany} for details on the usage and configuration of associations.
        /// Note that associations can also be specified like this:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id'],
        /// *
        /// associations: [
        /// {type: 'hasMany', model: 'Post',    name: 'posts'},
        /// {type: 'hasMany', model: 'Comment', name: 'comments'}
        /// ]
        /// });
        /// *
        /// # Using a Proxy
        /// *
        /// Models are great for representing types of data and relationships, but sooner or later we're going to want to load or
        /// save that data somewhere. All loading and saving of data is handled via a {@link Ext.data.proxy.Proxy Proxy}, which
        /// can be set directly on the Model:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email'],
        /// *
        /// proxy: {
        /// type: 'rest',
        /// url : '/users'
        /// }
        /// });
        /// *
        /// Here we've set up a {@link Ext.data.proxy.Rest Rest Proxy}, which knows how to load and save data to and from a
        /// RESTful backend. Let's see how this works:
        /// *
        /// var user = Ext.create('User', {name: 'Ed Spencer', email: 'ed@sencha.com'});
        /// *
        /// user.save(); //POST /users
        /// *
        /// Calling {@link #save} on the new Model instance tells the configured RestProxy that we wish to persist this Model's
        /// data onto our server. RestProxy figures out that this Model hasn't been saved before because it doesn't have an id,
        /// and performs the appropriate action - in this case issuing a POST request to the url we configured (/users). We
        /// configure any Proxy on any Model and always follow this API - see {@link Ext.data.proxy.Proxy} for a full list.
        /// *
        /// Loading data via the Proxy is equally easy:
        /// *
        /// //get a reference to the User model class
        /// var User = Ext.ModelManager.getModel('User');
        /// *
        /// //Uses the configured RestProxy to make a GET request to /users/123
        /// User.load(123, {
        /// success: function(user) {
        /// console.log(user.getId()); //logs 123
        /// }
        /// });
        /// *
        /// Models can also be updated and destroyed easily:
        /// *
        /// //the user Model we loaded in the last snippet:
        /// user.set('name', 'Edward Spencer');
        /// *
        /// //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
        /// user.save({
        /// success: function() {
        /// console.log('The User was updated');
        /// }
        /// });
        /// *
        /// //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
        /// user.destroy({
        /// success: function() {
        /// console.log('The User was destroyed!');
        /// }
        /// });
        /// *
        /// # Usage in Stores
        /// *
        /// It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this by
        /// creating a {@link Ext.data.Store Store}:
        /// *
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User'
        /// });
        /// *
        /// //uses the Proxy we set up on Model to load the Store data
        /// store.load();
        /// *
        /// A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain a
        /// set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the {@link
        /// Ext.data.Store Store docs} for more information on Stores.
        /// *
        /// @constructor
        /// Creates new Model instance.
        /// @param {Object} data An object containing keys corresponding to this model's fields, and their associated values
        /// @param {Number} id (optional) Unique ID to assign to this model instance
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Gets all of the data from this Models *loaded* associations. It does this recursively - for example if we have a
        /// User which hasMany Orders, and each Order hasMany OrderItems, it will return an object like this:
        /// *
        /// {
        /// orders: [
        /// {
        /// id: 123,
        /// status: 'shipped',
        /// orderItems: [
        /// ...
        /// ]
        /// }
        /// ]
        /// }
        /// *
        /// @return {Object} The nested data set for the Model's loaded associations
        /// </summary>
        [JsProperty]
        public object AssociatedData{[JsMethod(Name="getAssociatedData")]get;private set;}
        /// <summary>
        /// @cfg {String} defaultProxyType
        /// The string type of the default Model Proxy. Defaults to 'ajax'.
        /// </summary>
        public JsString defaultProxyType{get;set;}
        /// <summary>
        /// @property {Boolean} dirty
        /// True if this Record has been modified. Read-only.
        /// </summary>
        public bool dirty{get;set;}
        /// <summary>
        /// @property {Boolean} editing
        /// Internal flag used to track whether or not the model instance is currently being edited. Read-only.
        /// </summary>
        public bool editing{get;set;}
        /// <summary>
        /// @cfg {String} persistenceProperty
        /// The property on this Persistable object that its data is saved to. Defaults to 'data'
        /// (e.g. all persistable data resides in this.data.)
        /// </summary>
        public bool evented{get;set;}
        /// <summary>
        /// Returns the unique ID allocated to this model instance as defined by {@link #idProperty}.
        /// @return {Number} The id
        /// Sets the model instance's id field to the given id.
        /// @param {Number} id The new id
        /// </summary>
        [JsProperty]
        public JsNumber Id{[JsMethod(Name="getId")]get;[JsMethod(Name="setId")]set;}
        /// <summary>
        /// @cfg {String} idProperty
        /// The name of the field treated as this Model's unique id. Defaults to 'id'.
        /// </summary>
        public JsString idProperty{get;set;}
        public bool isModel{get;set;}
        /// <summary>
        /// @cfg {String} persistenceProperty
        /// The property on this Persistable object that its data is saved to. Defaults to 'data'
        /// (e.g. all persistable data resides in this.data.)
        /// </summary>
        public JsString persistenceProperty{get;set;}
        /// <summary>
        /// @property {Boolean} phantom
        /// True when the record does not yet exist in a server-side database (see {@link #setDirty}).
        /// Any record which has a real database pk set as its id property is NOT a phantom -- it's real.
        /// </summary>
        public bool phantom{get;set;}
        /// <summary>
        /// Sets the Proxy to use for this model. Accepts any options that can be accepted by
        /// {@link Ext#createByAlias Ext.createByAlias}.
        /// *
        /// @param {String/Object/Ext.data.proxy.Proxy} proxy The proxy
        /// @return {Ext.data.proxy.Proxy}
        /// Returns the configured Proxy for this Model.
        /// @return {Ext.data.proxy.Proxy} The proxy
        /// </summary>
        [JsProperty]
        public object Proxy{[JsMethod(Name="getProxy")]get;[JsMethod(Name="setProxy")]set;}
    }
    #endregion
    #region ModelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ModelConfig
    {
        public ModelConfig(){}
        /// <summary>
        /// An array of {@link Ext.data.Association associations} for this model.
        /// </summary>
        public object associations{get;set;}
        /// <summary>
        /// One or more {@link Ext.data.BelongsToAssociation BelongsTo associations} for this model.
        /// </summary>
        public object belongsTo{get;set;}
        /// <summary>
        /// The string type of the default Model Proxy. Defaults to 'ajax'.
        /// </summary>
        public JsString defaultProxyType{get;set;}
        /// <summary>
        /// The fields for this model.
        /// </summary>
        public object fields{get;set;}
        /// <summary>
        /// One or more {@link Ext.data.HasManyAssociation HasMany associations} for this model.
        /// </summary>
        public object hasMany{get;set;}
        /// <summary>
        /// The id generator to use for this model. The default id generator does not generate
        /// values for the {@link #idProperty}.
        /// *
        /// This can be overridden at the model level to provide a custom generator for a model.
        /// The simplest form of this would be:
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// requires: ['Ext.data.SequentialIdGenerator'],
        /// idgen: 'sequential',
        /// ...
        /// });
        /// *
        /// The above would generate {@link Ext.data.SequentialIdGenerator sequential} id's such
        /// as 1, 2, 3 etc..
        /// *
        /// Another useful id generator is {@link Ext.data.UuidGenerator}:
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// requires: ['Ext.data.UuidGenerator'],
        /// idgen: 'uuid',
        /// ...
        /// });
        /// *
        /// An id generation can also be further configured:
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// idgen: {
        /// type: 'sequential',
        /// seed: 1000,
        /// prefix: 'ID_'
        /// }
        /// });
        /// *
        /// The above would generate id's such as ID_1000, ID_1001, ID_1002 etc..
        /// *
        /// If multiple models share an id space, a single generator can be shared:
        /// *
        /// Ext.define('MyApp.data.MyModelX', {
        /// extend: 'Ext.data.Model',
        /// idgen: {
        /// type: 'sequential',
        /// id: 'xy'
        /// }
        /// });
        /// *
        /// Ext.define('MyApp.data.MyModelY', {
        /// extend: 'Ext.data.Model',
        /// idgen: {
        /// type: 'sequential',
        /// id: 'xy'
        /// }
        /// });
        /// *
        /// For more complex, shared id generators, a custom generator is the best approach.
        /// See {@link Ext.data.IdGenerator} for details on creating custom id generators.
        /// *
        /// @markdown
        /// </summary>
        public object idgen{get;set;}
        /// <summary>
        /// The name of the field treated as this Model's unique id. Defaults to 'id'.
        /// </summary>
        public JsString idProperty{get;set;}
        /// <summary>
        /// An array of {@link Ext.data.validations validations} for this model.
        /// </summary>
        public object validations{get;set;}
    }
    #endregion
    #region NodeInterface
    [JsType(JsMode.Prototype, Export=false)]
    public partial class NodeInterface
    {
        public NodeInterface(){}
        public JsString alternateClassName{get;set;}
    }
    #endregion
    #region NodeStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class NodeStore
    {
        public NodeStore(){}
        public NodeStore(NodeStoreConfig config){}
        /// <summary>
        /// @cfg {Boolean} rootVisible <tt>false</tt> to not include the root node in this Stores collection (defaults to <tt>true</tt>)
        /// </summary>
        public NodeStore(object config){}
        public void isVisible(object node){}
        public void onNodeAppend(object parent, object node, object index){}
        public void onNodeCollapse(object parent, object records, object suppressEvent){}
        public void onNodeExpand(object parent, object records, object suppressEvent){}
        public void onNodeInsert(object parent, object node, object refNode){}
        public void onNodeRemove(object parent, object node, object index){}
        public void onNodeSort(object node, object childNodes){}
        public void setNode(object node){}
        /// <summary>
        /// @class Ext.data.NodeStore
        /// @extends Ext.data.AbstractStore
        /// Node Store
        /// @ignore
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @class Ext.data.NodeStore
        /// @extends Ext.data.AbstractStore
        /// Node Store
        /// @ignore
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {Ext.data.Model} node The Record you want to bind this Store to. Note that
        /// this record will be decorated with the Ext.data.NodeInterface if this is not the
        /// case yet.
        /// </summary>
        public Model node{get;set;}
        [JsProperty]
        public object Node{private get;[JsMethod(Name="setNode")]set;}
        /// <summary>
        /// @cfg {Boolean} recursive Set this to true if you want this NodeStore to represent
        /// all the descendents of the node in its flat data collection. This is useful for
        /// rendering a tree structure to a DataView and is being used internally by
        /// the TreeView. Any records that are moved, removed, inserted or appended to the
        /// node at any depth below the node this store is bound to will be automatically
        /// updated in this Store's internal flat data structure.
        /// </summary>
        public bool recursive{get;set;}
        /// <summary>
        /// @cfg {Boolean} rootVisible <tt>false</tt> to not include the root node in this Stores collection (defaults to <tt>true</tt>)
        /// </summary>
        public bool rootVisible{get;set;}
    }
    #endregion
    #region NodeStoreConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class NodeStoreConfig
    {
        public NodeStoreConfig(){}
        /// <summary>
        /// The Record you want to bind this Store to. Note that
        /// this record will be decorated with the Ext.data.NodeInterface if this is not the
        /// case yet.
        /// </summary>
        public Model node{get;set;}
        /// <summary>
        /// Set this to true if you want this NodeStore to represent
        /// all the descendents of the node in its flat data collection. This is useful for
        /// rendering a tree structure to a DataView and is being used internally by
        /// the TreeView. Any records that are moved, removed, inserted or appended to the
        /// node at any depth below the node this store is bound to will be automatically
        /// updated in this Store's internal flat data structure.
        /// </summary>
        public bool recursive{get;set;}
        /// <summary>
        /// <tt>false</tt> to not include the root node in this Stores collection (defaults to <tt>true</tt>)
        /// </summary>
        public bool rootVisible{get;set;}
    }
    #endregion
    #region Operation
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Operation
    {
        public Operation(){}
        public Operation(OperationConfig config){}
        /// <summary>
        /// Checks whether this operation should cause writing to occur.
        /// @return {Boolean} Whether the operation should cause a write to occur.
        /// </summary>
        public bool allowWrite(){return false;}
        /// <summary>
        /// This method is called to commit data to this instance's records given the records in
        /// the server response. This is followed by calling {@link Ext.data.Model#commit} on all
        /// those records (for 'create' and 'update' actions).
        /// *
        /// If this {@link #action} is 'destroy', any server records are ignored and the
        /// {@link Ext.data.Model#commit} method is not called.
        /// *
        /// @param {Ext.data.Model[]} serverRecords An array of {@link Ext.data.Model} objects returned by
        /// the server.
        /// @markdown
        /// </summary>
        public void commitRecords(object serverRecords){}
        /// <summary>
        /// Creates new Operation object.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Operation(object config){}
        /// <summary>
        /// Returns the error string or object that was set using {@link #setException}
        /// @return {String/Object} The error object
        /// </summary>
        public object getError(){return null;}
        /// <summary>
        /// Returns an array of Ext.data.Model instances as set by the Proxy.
        /// @return {Ext.data.Model[]} Any loaded Records
        /// </summary>
        public void getRecords(){}
        /// <summary>
        /// Returns the ResultSet object (if set by the Proxy). This object will contain the {@link Ext.data.Model model}
        /// instances as well as meta data such as number of instances fetched, number available etc
        /// @return {Ext.data.ResultSet} The ResultSet object
        /// </summary>
        public ResultSet getResultSet(){return null;}
        /// <summary>
        /// Returns true if this Operation encountered an exception (see also {@link #getError})
        /// @return {Boolean} True if there was an exception
        /// </summary>
        public bool hasException(){return false;}
        /// <summary>
        /// Returns true if the Operation has been completed
        /// @return {Boolean} True if the Operation is complete
        /// </summary>
        public bool isComplete(){return false;}
        /// <summary>
        /// Returns true if the Operation has been started but has not yet completed.
        /// @return {Boolean} True if the Operation is currently running
        /// </summary>
        public bool isRunning(){return false;}
        /// <summary>
        /// Returns true if the Operation has been started. Note that the Operation may have started AND completed, see
        /// {@link #isRunning} to test if the Operation is currently running.
        /// @return {Boolean} True if the Operation has started
        /// </summary>
        public bool isStarted(){return false;}
        /// <summary>
        /// @private
        /// Associates this Operation with a Batch
        /// @param {Ext.data.Batch} batch The batch
        /// </summary>
        public void setBatch(Batch batch){}
        /// <summary>
        /// Marks the Operation as completed.
        /// </summary>
        public void setCompleted(){}
        /// <summary>
        /// Marks the Operation as having experienced an exception. Can be supplied with an option error message/object.
        /// @param {String/Object} error (optional) error string/object
        /// </summary>
        public void setException(object error){}
        /// <summary>
        /// Marks the Operation as started.
        /// </summary>
        public void setStarted(){}
        /// <summary>
        /// Marks the Operation as successful.
        /// </summary>
        public void setSuccessful(){}
        /// <summary>
        /// Returns true if the Operation has completed and was successful
        /// @return {Boolean} True if successful
        /// </summary>
        public bool wasSuccessful(){return false;}
        /// <summary>
        /// @property {RegExp} actionCommitRecordsRe
        /// The RegExp used to categorize actions that require_ record commits. This defaults to
        /// match 'create' and 'update'.
        /// </summary>
        public JsRegExp actionCommitRecordsRe{get;set;}
        /// <summary>
        /// @property {RegExp} actionSkipSyncRe
        /// The RegExp used to categorize actions that skip local record synchronization. This defaults
        /// to match 'destroy'.
        /// </summary>
        public JsRegExp actionSkipSyncRe{get;set;}
        /// <summary>
        /// @private
        /// Associates this Operation with a Batch
        /// @param {Ext.data.Batch} batch The batch
        /// </summary>
        [JsProperty]
        public Batch Batch{private get;[JsMethod(Name="setBatch")]set;}
        /// <summary>
        /// @property {Boolean} complete
        /// Read-only property tracking the completion status of this Operation. Use {@link #isComplete}.
        /// @private
        /// </summary>
        public bool complete{get;set;}
        /// <summary>
        /// Returns the error string or object that was set using {@link #setException}
        /// @return {String/Object} The error object
        /// </summary>
        [JsProperty]
        public object Error{[JsMethod(Name="getError")]get;private set;}
        /// <summary>
        /// @property {Boolean} exception
        /// Read-only property tracking the exception status of this Operation. Use {@link #hasException} and see {@link #getError}.
        /// @private
        /// </summary>
        public bool exception{get;set;}
        /// <summary>
        /// Marks the Operation as having experienced an exception. Can be supplied with an option error message/object.
        /// @param {String/Object} error (optional) error string/object
        /// </summary>
        [JsProperty]
        public object Exception{private get;[JsMethod(Name="setException")]set;}
        /// <summary>
        /// Returns the ResultSet object (if set by the Proxy). This object will contain the {@link Ext.data.Model model}
        /// instances as well as meta data such as number of instances fetched, number available etc
        /// @return {Ext.data.ResultSet} The ResultSet object
        /// </summary>
        [JsProperty]
        public ResultSet ResultSet{[JsMethod(Name="getResultSet")]get;private set;}
        /// <summary>
        /// @property {Boolean} running
        /// Read-only property tracking the run status of this Operation. Use {@link #isRunning}.
        /// @private
        /// </summary>
        public bool running{get;set;}
        /// <summary>
        /// @property {Boolean} started
        /// Read-only property tracking the start status of this Operation. Use {@link #isStarted}.
        /// @private
        /// </summary>
        public bool started{get;set;}
        /// <summary>
        /// @cfg {Boolean} synchronous
        /// True if this Operation is to be executed synchronously (defaults to true). This property is inspected by a
        /// {@link Ext.data.Batch Batch} to see if a series of Operations can be executed in parallel or not.
        /// </summary>
        public bool synchronous{get;set;}
    }
    #endregion
    #region OperationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class OperationConfig
    {
        public OperationConfig(){}
        /// <summary>
        /// The action being performed by this Operation. Should be one of 'create', 'read', 'update' or 'destroy'.
        /// </summary>
        public JsString action{get;set;}
        /// <summary>
        /// The batch that this Operation is a part of.
        /// </summary>
        public Batch batch{get;set;}
        /// <summary>
        /// Function to execute when operation completed.  Will be called with the following parameters:
        /// *
        /// - records : Array of Ext.data.Model objects.
        /// - operation : The Ext.data.Operation itself.
        /// - success : True when operation completed successfully.
        /// </summary>
        public JsAction callback{get;set;}
        /// <summary>
        /// Optional array of filter objects. Only applies to 'read' actions.
        /// </summary>
        public object filters{get;set;}
        /// <summary>
        /// Optional grouping configuration. Only applies to 'read' actions where grouping is desired.
        /// </summary>
        public Grouper group{get;set;}
        /// <summary>
        /// The number of records to load. Used on 'read' actions when paging is being used.
        /// </summary>
        public JsNumber limit{get;set;}
        /// <summary>
        /// Scope for the {@link #callback} function.
        /// </summary>
        public object scope{get;set;}
        /// <summary>
        /// Optional array of sorter objects. Only applies to 'read' actions.
        /// </summary>
        public object sorters{get;set;}
        /// <summary>
        /// The start index (offset), used in paging when running a 'read' action.
        /// </summary>
        public JsNumber start{get;set;}
        /// <summary>
        /// True if this Operation is to be executed synchronously (defaults to true). This property is inspected by a
        /// {@link Ext.data.Batch Batch} to see if a series of Operations can be executed in parallel or not.
        /// </summary>
        public bool synchronous{get;set;}
    }
    #endregion
    #region Request
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Request
    {
        public Request(){}
        public Request(RequestConfig config){}
        /// <summary>
        /// Creates the Request object.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Request(object config){}
        /// <summary>
        /// @cfg {String} method The HTTP method to use on this Request (defaults to 'GET'). Should be one of 'GET', 'POST', 'PUT' or 'DELETE'
        /// </summary>
        public JsString method{get;set;}
    }
    #endregion
    #region RequestConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class RequestConfig
    {
        public RequestConfig(){}
        /// <summary>
        /// The name of the action this Request represents. Usually one of 'create', 'read', 'update' or 'destroy'
        /// </summary>
        public JsString action{get;set;}
        /// <summary>
        /// The HTTP method to use on this Request (defaults to 'GET'). Should be one of 'GET', 'POST', 'PUT' or 'DELETE'
        /// </summary>
        public JsString method{get;set;}
        /// <summary>
        /// HTTP request params. The Proxy and its Writer have access to and can modify this object.
        /// </summary>
        public object @params{get;set;}
        /// <summary>
        /// The url to access on this Request
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region ResultSet
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ResultSet
    {
        public ResultSet(){}
        public ResultSet(ResultSetConfig config){}
        /// <summary>
        /// Creates the resultSet
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public ResultSet(object config){}
        /// <summary>
        /// @cfg {Number} count
        /// The number of records in this ResultSet. Note that total may differ from this number
        /// </summary>
        public JsNumber count{get;set;}
        /// <summary>
        /// @cfg {Boolean} loaded
        /// True if the records have already been loaded. This is only meaningful when dealing with
        /// SQL-backed proxies
        /// </summary>
        public bool loaded{get;set;}
        /// <summary>
        /// @cfg {Boolean} success
        /// True if the ResultSet loaded successfully, false if any errors were encountered
        /// </summary>
        public bool success{get;set;}
        /// <summary>
        /// @cfg {Number} total
        /// The total number of records reported by the data source. This ResultSet may form a subset of
        /// those records (see count)
        /// </summary>
        public JsNumber total{get;set;}
    }
    #endregion
    #region ResultSetConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ResultSetConfig
    {
        public ResultSetConfig(){}
        /// <summary>
        /// The number of records in this ResultSet. Note that total may differ from this number
        /// </summary>
        public JsNumber count{get;set;}
        /// <summary>
        /// True if the records have already been loaded. This is only meaningful when dealing with
        /// SQL-backed proxies
        /// </summary>
        public bool loaded{get;set;}
        /// <summary>
        /// The array of record instances. Required
        /// </summary>
        public object records{get;set;}
        /// <summary>
        /// True if the ResultSet loaded successfully, false if any errors were encountered
        /// </summary>
        public bool success{get;set;}
        /// <summary>
        /// The total number of records reported by the data source. This ResultSet may form a subset of
        /// those records (see count)
        /// </summary>
        public JsNumber total{get;set;}
    }
    #endregion
    #region SequentialIdGenerator
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SequentialIdGenerator
    {
        public SequentialIdGenerator(SequentialIdGeneratorConfig config){}
        public SequentialIdGenerator(){}
        /// <summary>
        /// Generates and returns the next id.
        /// @return {String} The next id.
        /// </summary>
        public JsString generate(){return null;}
        /// <summary>
        /// @author Don Griffin
        /// *
        /// This class is a sequential id generator. A simple use of this class would be like so:
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// idgen: 'sequential'
        /// });
        /// // assign id's of 1, 2, 3, etc.
        /// *
        /// An example of a configured generator would be:
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// idgen: {
        /// type: 'sequential',
        /// prefix: 'ID_',
        /// seed: 1000
        /// }
        /// });
        /// // assign id's of ID_1000, ID_1001, ID_1002, etc.
        /// *
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @author Don Griffin
        /// *
        /// This class is a sequential id generator. A simple use of this class would be like so:
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// idgen: 'sequential'
        /// });
        /// // assign id's of 1, 2, 3, etc.
        /// *
        /// An example of a configured generator would be:
        /// *
        /// Ext.define('MyApp.data.MyModel', {
        /// extend: 'Ext.data.Model',
        /// idgen: {
        /// type: 'sequential',
        /// prefix: 'ID_',
        /// seed: 1000
        /// }
        /// });
        /// // assign id's of ID_1000, ID_1001, ID_1002, etc.
        /// *
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {String} prefix
        /// The string to place in front of the sequential number for each generated id. The
        /// default is blank.
        /// </summary>
        public JsString prefix{get;set;}
        /// <summary>
        /// @cfg {Number} seed
        /// The number at which to start generating sequential id's. The default is 1.
        /// </summary>
        public JsNumber seed{get;set;}
    }
    #endregion
    #region SequentialIdGeneratorConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SequentialIdGeneratorConfig
    {
        public SequentialIdGeneratorConfig(){}
        /// <summary>
        /// The string to place in front of the sequential number for each generated id. The
        /// default is blank.
        /// </summary>
        public JsString prefix{get;set;}
        /// <summary>
        /// The number at which to start generating sequential id's. The default is 1.
        /// </summary>
        public JsNumber seed{get;set;}
    }
    #endregion
    #region SortTypes
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SortTypes
    {
        public SortTypes(){}
        /// <summary>
        /// Date sorting
        /// @param {Object} s The value being converted
        /// @return {Number} The comparison value
        /// </summary>
        public JsNumber asDate(object s){return null;}
        /// <summary>
        /// Float sorting
        /// @param {Object} s The value being converted
        /// @return {Number} The comparison value
        /// </summary>
        public JsNumber asFloat(object s){return null;}
        /// <summary>
        /// Integer sorting
        /// @param {Object} s The value being converted
        /// @return {Number} The comparison value
        /// </summary>
        public JsNumber asInt(object s){return null;}
        /// <summary>
        /// Strips all HTML tags to sort on text only
        /// @param {Object} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public JsString asText(object s){return null;}
        /// <summary>
        /// Case insensitive string
        /// @param {Object} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public JsString asUCString(object s){return null;}
        /// <summary>
        /// Strips all HTML tags to sort on text only - Case insensitive
        /// @param {Object} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public JsString asUCText(object s){return null;}
        /// <summary>
        /// Default sort that does nothing
        /// @param {Object} s The value being converted
        /// @return {Object} The comparison value
        /// </summary>
        public object none(object s){return null;}
        /// <summary>
        /// @class Ext.data.SortTypes
        /// This class defines a series of static methods that are used on a
        /// {@link Ext.data.Field} for performing sorting. The methods cast the
        /// underlying values into a data type that is appropriate for sorting on
        /// that particular field.  If a {@link Ext.data.Field#type} is specified,
        /// the sortType will be set to a sane default if the sortType is not
        /// explicitly defined on the field. The sortType will make any necessary
        /// modifications to the value and return it.
        /// <ul>
        /// <li><b>asText</b> - Removes any tags and converts the value to a string</li>
        /// <li><b>asUCText</b> - Removes any tags and converts the value to an uppercase string</li>
        /// <li><b>asUCText</b> - Converts the value to an uppercase string</li>
        /// <li><b>asDate</b> - Converts the value into Unix epoch time</li>
        /// <li><b>asFloat</b> - Converts the value to a floating point number</li>
        /// <li><b>asInt</b> - Converts the value to an integer number</li>
        /// </ul>
        /// <p>
        /// It is also possible to create a custom sortType that can be used throughout
        /// an application.
        /// <pre><code>
        /// Ext.apply(Ext.data.SortTypes, {
        /// asPerson: function(person){
        /// // expects an object with a first and last name property
        /// return person.lastName.toUpperCase() + person.firstName.toLowerCase();
        /// }
        /// });
        /// Ext.define('Employee', {
        /// extend: 'Ext.data.Model',
        /// fields: [{
        /// name: 'person',
        /// sortType: 'asPerson'
        /// }, {
        /// name: 'salary',
        /// type: 'float' // sortType set to asFloat
        /// }]
        /// });
        /// </code></pre>
        /// </p>
        /// @singleton
        /// @docauthor Evan Trimboli <evan@sencha.com>
        /// </summary>
        public bool singleton{get;set;}
        /// <summary>
        /// The regular expression used to strip tags
        /// @type {RegExp}
        /// @property
        /// </summary>
        public JsRegExp stripTagsRE{get;set;}
    }
    #endregion
    #region Store
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Store
    {
        public Store(){}
        public Store(StoreConfig config){}
        /// <summary>
        /// Adds Model instance to the Store. This method accepts either:
        /// *
        /// - An array of Model instances or Model configuration objects.
        /// - Any number of Model instance or Model configuration object arguments.
        /// *
        /// The new Model instances will be added at the end of the existing collection.
        /// *
        /// Sample usage:
        /// *
        /// myStore.add({some: 'data'}, {some: 'other data'});
        /// *
        /// @param {Ext.data.Model[]/Ext.data.Model...} model An array of Model instances
        /// or Model configuration objects, or variable number of Model instance or config arguments.
        /// @return {Ext.data.Model[]} The model instances that were added
        /// </summary>
        public void add(object records){}
        /// <summary>
        /// Runs the aggregate function for all the records in the store.
        /// @param {Function} fn The function to execute. The function is called with a single parameter,
        /// an array of records for that group.
        /// @param {Object} scope (optional) The scope to execute the function in. Defaults to the store.
        /// @param {Boolean} grouped (Optional) True to perform the operation for each group
        /// in the store. The value returned will be an object literal with the key being the group
        /// name and the group average being the value. The grouped parameter is only honored if
        /// the store has a groupField.
        /// @param {Array} args (optional) Any arguments to append to the function call
        /// @return {Object} An object literal with the group names and their appropriate values.
        /// </summary>
        public object aggregate(JsAction fn, object scope, bool grouped, JsArray args){return null;}
        /// <summary>
        /// Gets the average value in the store.
        /// @param {String} field The field in each record
        /// @param {Boolean} grouped (Optional) True to perform the operation for each group
        /// in the store. The value returned will be an object literal with the key being the group
        /// name and the group average being the value. The grouped parameter is only honored if
        /// the store has a groupField.
        /// @return {Object} The average value, if no items exist, 0.
        /// </summary>
        public object average(JsString field, bool grouped){return null;}
        /// <summary>
        /// Caches the records in the prefetch and stripes them with their server-side
        /// index.
        /// @private
        /// @param {Ext.data.Model[]} records The records to cache
        /// @param {Ext.data.Operation} The associated operation
        /// </summary>
        public void cacheRecords(object records, Operation operation){}
        public void clearData(){}
        /// <summary>
        /// Revert to a view of the Record cache with no filtering applied.
        /// @param {Boolean} suppressEvent If <tt>true</tt> the filter is cleared silently without firing the
        /// {@link #datachanged} event.
        /// </summary>
        public void clearFilter(bool suppressEvent){}
        /// <summary>
        /// Clear any groupers in the store
        /// </summary>
        public void clearGrouping(){}
        /// <summary>
        /// Collects unique values for a particular dataIndex from this store.
        /// @param {String} dataIndex The property to collect
        /// @param {Boolean} allowNull (optional) Pass true to allow null, undefined or empty string values
        /// @param {Boolean} bypassFilter (optional) Pass true to collect from all records, even ones which are filtered
        /// @return {Object[]} An array of the unique values
        /// </summary>
        public void collect(JsString dataIndex, bool allowNull, bool bypassFilter){}
        /// <summary>
        /// Creates the store.
        /// @param {Object} config (optional) Config object
        /// </summary>
        public Store(object config){}
        /// <summary>
        /// Gets the count of items in the store.
        /// @param {Boolean} grouped (Optional) True to perform the operation for each group
        /// in the store. The value returned will be an object literal with the key being the group
        /// name and the count for each group being the value. The grouped parameter is only honored if
        /// the store has a groupField.
        /// @return {Number} the count
        /// </summary>
        public JsNumber count(bool grouped){return null;}
        /// <summary>
        /// @private
        /// Returns a filter function used to test a the given property's value. Defers most of the work to
        /// Ext.util.MixedCollection's createValueMatcher function
        /// @param {String} property The property to create the filter function for
        /// @param {String/RegExp} value The string/regex to compare the property value to
        /// @param {Boolean} anyMatch True if we don't care if the filter value is not the full value (defaults to false)
        /// @param {Boolean} caseSensitive True to create a case-sensitive regex (defaults to false)
        /// @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
        /// Ignored if anyMatch is true.
        /// </summary>
        public void createFilterFn(JsString property, object value, bool anyMatch, bool caseSensitive, bool exactMatch){}
        /// <summary>
        /// Converts a literal to a model, if it's not a model already
        /// @private
        /// @param record {Ext.data.Model/Object} The record to create
        /// @return {Ext.data.Model}
        /// </summary>
        public void createModel(object record){}
        /// <summary>
        /// @private
        /// Normalizes an array of grouper objects, ensuring that they are all Ext.util.Grouper instances
        /// @param {Object[]} groupers The groupers array
        /// @return {Ext.util.Grouper[]} Array of Ext.util.Grouper objects
        /// </summary>
        public void decodeGroupers(object groupers){}
        public void doSort(object sorterFn){}
        /// <summary>
        /// Calls the specified function for each of the {@link Ext.data.Model Records} in the cache.
        /// @param {Function} fn The function to call. The {@link Ext.data.Model Record} is passed as the first parameter.
        /// Returning <tt>false</tt> aborts and exits the iteration.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed.
        /// Defaults to the current {@link Ext.data.Model Record} in the iteration.
        /// </summary>
        public void each(JsAction fn, object scope){}
        /// <summary>
        /// Filters the loaded set of records by a given set of filters.
        /// *
        /// Filtering by single field:
        /// *
        /// store.filter("email", /\.com$/);
        /// *
        /// Using multiple filters:
        /// *
        /// store.filter([
        /// {property: "email", value: /\.com$/},
        /// {filterFn: function(item) { return item.get("age") > 10; }}
        /// ]);
        /// *
        /// Using Ext.util.Filter instances instead of config objects
        /// (note that we need to specify the {@link Ext.util.Filter#root root} config option in this case):
        /// *
        /// store.filter([
        /// Ext.create('Ext.util.Filter', {property: "email", value: /\.com$/, root: 'data'}),
        /// Ext.create('Ext.util.Filter', {filterFn: function(item) { return item.get("age") > 10; }, root: 'data'})
        /// ]);
        /// *
        /// @param {Object[]/Ext.util.Filter[]/String} filters The set of filters to apply to the data. These are stored internally on the store,
        /// but the filtering itself is done on the Store's {@link Ext.util.MixedCollection MixedCollection}. See
        /// MixedCollection's {@link Ext.util.MixedCollection#filter filter} method for filter syntax. Alternatively,
        /// pass in a property string
        /// @param {String} value (optional) value to filter by (only if using a property string as the first argument)
        /// </summary>
        public void filter(object filters, JsString value){}
        /// <summary>
        /// Filter by a function. The specified function will be called for each
        /// Record in this Store. If the function returns <tt>true</tt> the Record is included,
        /// otherwise it is filtered out.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Model<p class="sub-desc">The {@link Ext.data.Model record}
        /// to test for filtering. Access field values using {@link Ext.data.Model#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// </summary>
        public void filterBy(JsAction fn, object scope){}
        /// <summary>
        /// Finds the index of the first matching Record in this store by a specific field value.
        /// @param {String} fieldName The name of the Record field to test.
        /// @param {String/RegExp} value Either a string that the field value
        /// should begin with, or a RegExp to test against the field.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
        /// @param {Boolean} caseSensitive (optional) True for case sensitive comparison
        /// @param {Boolean} exactMatch (optional) True to force exact match (^ and $ characters added to the regex). Defaults to false.
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber find(JsString property, object value, JsNumber start, bool anyMatch, bool caseSensitive, bool exactMatch){return null;}
        /// <summary>
        /// Find the index of the first matching Record in this Store by a function.
        /// If the function returns <tt>true</tt> it is considered a match.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Model<p class="sub-desc">The {@link Ext.data.Model record}
        /// to test for filtering. Access field values using {@link Ext.data.Model#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber findBy(JsAction fn, object scope, JsNumber start){return null;}
        /// <summary>
        /// Finds the index of the first matching Record in this store by a specific field value.
        /// @param {String} fieldName The name of the Record field to test.
        /// @param {Object} value The value to match the field against.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber findExact(JsString property, object value, JsNumber start){return null;}
        /// <summary>
        /// Finds the first matching Record in this store by a specific field value.
        /// @param {String} fieldName The name of the Record field to test.
        /// @param {String/RegExp} value Either a string that the field value
        /// should begin with, or a RegExp to test against the field.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
        /// @param {Boolean} caseSensitive (optional) True for case sensitive comparison
        /// @param {Boolean} exactMatch (optional) True to force exact match (^ and $ characters added to the regex). Defaults to false.
        /// @return {Ext.data.Model} The matched record or null
        /// </summary>
        public Model findRecord(){return null;}
        /// <summary>
        /// Fires the groupchange event. Abstracted out so we can use it
        /// as a callback
        /// @private
        /// </summary>
        public void fireGroupChange(){}
        /// <summary>
        /// Convenience function for getting the first model instance in the store
        /// @param {Boolean} grouped (Optional) True to perform the operation for each group
        /// in the store. The value returned will be an object literal with the key being the group
        /// name and the first record being the value. The grouped parameter is only honored if
        /// the store has a groupField.
        /// @return {Ext.data.Model/undefined} The first model instance in the store, or undefined
        /// </summary>
        public object first(bool grouped){return null;}
        /// <summary>
        /// Get the Record at the specified index.
        /// @param {Number} index The index of the Record to find.
        /// @return {Ext.data.Model} The Record at the passed index. Returns undefined if not found.
        /// </summary>
        public Model getAt(JsNumber index){return null;}
        public void getAverage(object records, object field){}
        /// <summary>
        /// Get the Record with the specified id.
        /// @param {String} id The id of the Record to find.
        /// @return {Ext.data.Model} The Record with the passed id. Returns undefined if not found.
        /// </summary>
        public Model getById(JsString id){return null;}
        /// <summary>
        /// Gets the number of cached records.
        /// <p>If using paging, this may not be the total size of the dataset. If the data object
        /// used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns
        /// the dataset size.  <b>Note</b>: see the Important note in {@link #load}.</p>
        /// @return {Number} The number of Records in the Store's cache.
        /// </summary>
        public JsNumber getCount(){return null;}
        /// <summary>
        /// @private
        /// <p>Returns records grouped by the configured {@link #groupers grouper} configuration. Sample return value (in
        /// this case grouping by genre and then author in a fictional books dataset):</p>
        /// <pre><code>
        /// [
        /// {
        /// name: 'Fantasy',
        /// depth: 0,
        /// records: [
        /// //book1, book2, book3, book4
        /// ],
        /// children: [
        /// {
        /// name: 'Rowling',
        /// depth: 1,
        /// records: [
        /// //book1, book2
        /// ]
        /// },
        /// {
        /// name: 'Tolkein',
        /// depth: 1,
        /// records: [
        /// //book3, book4
        /// ]
        /// }
        /// ]
        /// }
        /// ]
        /// </code></pre>
        /// @param {Boolean} sort True to call {@link #sort} before finding groups. Sorting is required to make grouping
        /// function correctly so this should only be set to false if the Store is known to already be sorted correctly
        /// (defaults to true)
        /// @return {Object[]} The group data
        /// </summary>
        public void getGroupData(bool sort){}
        /// <summary>
        /// Returns an array containing the result of applying grouping to the records in this store. See {@link #groupField},
        /// {@link #groupDir} and {@link #getGroupString}. Example for a store containing records with a color field:
        /// <pre><code>
        /// var myStore = Ext.create('Ext.data.Store', {
        /// groupField: 'color',
        /// groupDir  : 'DESC'
        /// });
        /// myStore.getGroups(); //returns:
        /// [
        /// {
        /// name: 'yellow',
        /// children: [
        /// //all records where the color field is 'yellow'
        /// ]
        /// },
        /// {
        /// name: 'red',
        /// children: [
        /// //all records where the color field is 'red'
        /// ]
        /// }
        /// ]
        /// </code></pre>
        /// @param {String} groupName (Optional) Pass in an optional groupName argument to access a specific group as defined by {@link #getGroupString}
        /// @return {Object/Object[]} The grouped data
        /// </summary>
        public object getGroups(JsString requestGroupString){return null;}
        /// <summary>
        /// @private
        /// For a given set of records and a Grouper, returns an array of arrays - each of which is the set of records
        /// matching a certain group.
        /// </summary>
        public void getGroupsForGrouper(object records, object grouper){}
        /// <summary>
        /// @private
        /// This is used recursively to gather the records into the configured Groupers. The data MUST have been sorted for
        /// this to work properly (see {@link #getGroupData} and {@link #getGroupsForGrouper}) Most of the work is done by
        /// {@link #getGroupsForGrouper} - this function largely just handles the recursion.
        /// @param {Ext.data.Model[]} records The set or subset of records to group
        /// @param {Number} grouperIndex The grouper index to retrieve
        /// @return {Object[]} The grouped records
        /// </summary>
        public void getGroupsForGrouperIndex(object records, JsNumber grouperIndex){}
        /// <summary>
        /// <p>Returns the string to group on for a given model instance. The default implementation of this method returns
        /// the model's {@link #groupField}, but this can be overridden to group by an arbitrary string. For example, to
        /// group by the first letter of a model's 'name' field, use the following code:</p>
        /// <pre><code>
        /// Ext.create('Ext.data.Store', {
        /// groupDir: 'ASC',
        /// getGroupString: function(instance) {
        /// return instance.get('name')[0];
        /// }
        /// });
        /// </code></pre>
        /// @param {Ext.data.Model} instance The model instance
        /// @return {String} The string to compare when forming groups
        /// </summary>
        public JsString getGroupString(Model instance){return null;}
        public void getMax(object records, object field){}
        public void getMin(object records, object field){}
        public void getNewRecords(){}
        /// <summary>
        /// Determines the page from a record index
        /// @param {Number} index The record index
        /// @return {Number} The page the record belongs to
        /// </summary>
        public JsNumber getPageFromRecordIndex(JsNumber index){return null;}
        /// <summary>
        /// Returns a range of Records between specified indices.
        /// @param {Number} startIndex (optional) The starting index (defaults to 0)
        /// @param {Number} endIndex (optional) The ending index (defaults to the last Record in the Store)
        /// @return {Ext.data.Model[]} An array of Records
        /// </summary>
        public void getRange(JsNumber start, JsNumber end){}
        /// <summary>
        /// Returns a unique requestId to track requests.
        /// @private
        /// </summary>
        public void getRequestId(){}
        public void getSum(object records, object field){}
        /// <summary>
        /// Returns the total number of {@link Ext.data.Model Model} instances that the {@link Ext.data.proxy.Proxy Proxy}
        /// indicates exist. This will usually differ from {@link #getCount} when using paging - getCount returns the
        /// number of records loaded into the Store at the moment, getTotalCount returns the number of records that
        /// could be loaded into the Store if the Store contained all data
        /// @return {Number} The total number of Model instances available via the Proxy
        /// </summary>
        public JsNumber getTotalCount(){return null;}
        public void getUpdatedRecords(){}
        /// <summary>
        /// Group data in the store
        /// @param {String/Object[]} groupers Either a string name of one of the fields in this Store's configured {@link Ext.data.Model Model},
        /// or an Array of grouper configurations.
        /// @param {String} direction The overall direction to group the data by. Defaults to "ASC".
        /// </summary>
        public void group(object groupers, JsString direction){}
        /// <summary>
        /// Guarantee a specific range, this will load the store with a range (that
        /// must be the pageSize or smaller) and take care of any loading that may
        /// be necessary.
        /// </summary>
        public void guaranteeRange(object start, object end, object cb, object scope){}
        /// <summary>
        /// Returns the number of pending requests out.
        /// </summary>
        public void hasPendingRequests(){}
        /// <summary>
        /// Get the index within the cache of the passed Record.
        /// @param {Ext.data.Model} record The Ext.data.Model object to find.
        /// @return {Number} The index of the passed Record. Returns -1 if not found.
        /// </summary>
        public JsNumber indexOf(Model record){return null;}
        /// <summary>
        /// Get the index within the cache of the Record with the passed id.
        /// @param {String} id The id of the Record to find.
        /// @return {Number} The index of the Record. Returns -1 if not found.
        /// </summary>
        public JsNumber indexOfId(JsString id){return null;}
        /// <summary>
        /// Get the index within the entire dataset. From 0 to the totalCount.
        /// @param {Ext.data.Model} record The Ext.data.Model object to find.
        /// @return {Number} The index of the passed Record. Returns -1 if not found.
        /// </summary>
        public JsNumber indexOfTotal(Model record){return null;}
        /// <summary>
        /// Inserts Model instances into the Store at the given index and fires the {@link #add} event.
        /// See also <code>{@link #add}</code>.
        /// @param {Number} index The start index at which to insert the passed Records.
        /// @param {Ext.data.Model[]} records An Array of Ext.data.Model objects to add to the cache.
        /// </summary>
        public void insert(JsNumber index, object records){}
        /// <summary>
        /// Returns true if this store is currently filtered
        /// @return {Boolean}
        /// </summary>
        public void isFiltered(){}
        /// <summary>
        /// Checks if the store is currently grouped
        /// @return {Boolean} True if the store is grouped.
        /// </summary>
        public bool isGrouped(){return false;}
        /// <summary>
        /// Convenience function for getting the last model instance in the store
        /// @param {Boolean} grouped (Optional) True to perform the operation for each group
        /// in the store. The value returned will be an object literal with the key being the group
        /// name and the last record being the value. The grouped parameter is only honored if
        /// the store has a groupField.
        /// @return {Ext.data.Model/undefined} The last model instance in the store, or undefined
        /// </summary>
        public object last(bool grouped){return null;}
        /// <summary>
        /// <p>Loads data into the Store via the configured {@link #proxy}. This uses the Proxy to make an
        /// asynchronous call to whatever storage backend the Proxy uses, automatically adding the retrieved
        /// instances into the Store and calling an optional callback if required. Example usage:</p>
        /// *
        /// <pre><code>
        /// store.load({
        /// scope   : this,
        /// callback: function(records, operation, success) {
        /// //the {@link Ext.data.Operation operation} object contains all of the details of the load operation
        /// console.log(records);
        /// }
        /// });
        /// </code></pre>
        /// *
        /// <p>If the callback scope does not need to be set, a function can simply be passed:</p>
        /// *
        /// <pre><code>
        /// store.load(function(records, operation, success) {
        /// console.log('loaded records');
        /// });
        /// </code></pre>
        /// *
        /// @param {Object/Function} options (Optional) config object, passed into the Ext.data.Operation object before loading.
        /// </summary>
        public void load(object options){}
        /// <summary>
        /// Loads an array of data straight into the Store
        /// @param {Ext.data.Model[]/Object[]} data Array of data to load. Any non-model instances will be cast into model instances first
        /// @param {Boolean} append True to add the records to the existing records in the store, false to remove the old ones first
        /// </summary>
        public void loadData(object data, bool append){}
        /// <summary>
        /// Loads a given 'page' of data by setting the start and limit values appropriately. Internally this just causes a normal
        /// load operation, passing in calculated 'start' and 'limit' params
        /// @param {Number} page The number of the page to load
        /// @param {Object} options See options for {@link #load}
        /// </summary>
        public void loadPage(JsNumber page, object options){}
        /// <summary>
        /// Loads an array of {@Ext.data.Model model} instances into the store, fires the datachanged event. This should only usually
        /// be called internally when loading from the {@link Ext.data.proxy.Proxy Proxy}, when adding records manually use {@link #add} instead
        /// @param {Ext.data.Model[]} records The array of records to load
        /// @param {Object} options {addRecords: true} to add these records to the existing records, false to remove the Store's existing records first
        /// </summary>
        public void loadRecords(object records, object options){}
        public void mask(){}
        /// <summary>
        /// Gets the maximum value in the store.
        /// @param {String} field The field in each record
        /// @param {Boolean} grouped (Optional) True to perform the operation for each group
        /// in the store. The value returned will be an object literal with the key being the group
        /// name and the maximum in the group being the value. The grouped parameter is only honored if
        /// the store has a groupField.
        /// @return {Object} The maximum value, if no items exist, undefined.
        /// </summary>
        public object max(JsString field, bool grouped){return null;}
        /// <summary>
        /// Gets the minimum value in the store.
        /// @param {String} field The field in each record
        /// @param {Boolean} grouped (Optional) True to perform the operation for each group
        /// in the store. The value returned will be an object literal with the key being the group
        /// name and the minimum in the group being the value. The grouped parameter is only honored if
        /// the store has a groupField.
        /// @return {Object} The minimum value, if no items exist, undefined.
        /// </summary>
        public object min(JsString field, bool grouped){return null;}
        /// <summary>
        /// Loads the next 'page' in the current data set
        /// @param {Object} options See options for {@link #load}
        /// </summary>
        public void nextPage(object options){}
        public void onBeforeSort(){}
        public void onClassExtended(object cls, object data, object hooks){}
        /// <summary>
        /// Create any new records when a write is returned from the server.
        /// @private
        /// @param {Ext.data.Model[]} records The array of new records
        /// @param {Ext.data.Operation} operation The operation that just completed
        /// @param {Boolean} success True if the operation was successful
        /// </summary>
        public void onCreateRecords(object records, Operation operation, bool success){}
        /// <summary>
        /// Remove any records when a write is returned from the server.
        /// @private
        /// @param {Ext.data.Model[]} records The array of removed records
        /// @param {Ext.data.Operation} operation The operation that just completed
        /// @param {Boolean} success True if the operation was successful
        /// </summary>
        public void onDestroyRecords(object records, Operation operation, bool success){}
        /// <summary>
        /// Handles a guaranteed range being loaded
        /// @private
        /// </summary>
        public void onGuaranteedRange(){}
        /// <summary>
        /// @private
        /// Called internally when a Proxy has completed a load request
        /// </summary>
        public void onProxyLoad(object operation){}
        /// <summary>
        /// Called after the configured proxy completes a prefetch operation.
        /// @private
        /// @param {Ext.data.Operation} operation The operation that completed
        /// </summary>
        public void onProxyPrefetch(Operation operation){}
        /// <summary>
        /// Update any records when a write is returned from the server.
        /// @private
        /// @param {Ext.data.Model[]} records The array of updated records
        /// @param {Ext.data.Operation} operation The operation that just completed
        /// @param {Boolean} success True if the operation was successful
        /// </summary>
        public void onUpdateRecords(object records, Operation operation, bool success){}
        public void onWaitForGuarantee(){}
        /// <summary>
        /// Prefetches data into the store using its configured {@link #proxy}.
        /// @param {Object} options (Optional) config object, passed into the Ext.data.Operation object before loading.
        /// See {@link #load}
        /// </summary>
        public void prefetch(object options){}
        /// <summary>
        /// Prefetches a page of data.
        /// @param {Number} page The page to prefetch
        /// @param {Object} options (Optional) config object, passed into the Ext.data.Operation object before loading.
        /// See {@link #load}
        /// </summary>
        public void prefetchPage(JsNumber page, object options){}
        /// <summary>
        /// Loads the previous 'page' in the current data set
        /// @param {Object} options See options for {@link #load}
        /// </summary>
        public void previousPage(object options){}
        /// <summary>
        /// Purge the least recently used records in the prefetch if the purgeCount
        /// has been exceeded.
        /// </summary>
        public void purgeRecords(){}
        /// <summary>
        /// Query the cached records in this Store using a filtering function. The specified function
        /// will be called with each record in this Store. If the function returns <tt>true</tt> the record is
        /// included in the results.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Model<p class="sub-desc">The {@link Ext.data.Model record}
        /// to test for filtering. Access field values using {@link Ext.data.Model#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// @return {Ext.util.MixedCollection} Returns an Ext.util.MixedCollection of the matched records
        /// </summary>
        public MixedCollection queryBy(JsAction fn, object scope){return null;}
        /// <summary>
        /// Determines if the range has already been satisfied in the prefetchData.
        /// @private
        /// @param {Number} start The start index
        /// @param {Number} end The end index in the range
        /// </summary>
        public void rangeSatisfied(JsNumber start, JsNumber end){}
        /// <summary>
        /// private
        /// </summary>
        public void remove(object records, object isMove){}
        /// <summary>
        /// Remove all items from the store.
        /// @param {Boolean} silent Prevent the `clear` event from being fired.
        /// </summary>
        public void removeAll(bool silent){}
        /// <summary>
        /// Removes the model instance at the given index
        /// @param {Number} index The record index
        /// </summary>
        public void removeAt(JsNumber index){}
        public void sort(){}
        /// <summary>
        /// Sums the value of <tt>property</tt> for each {@link Ext.data.Model record} between <tt>start</tt>
        /// and <tt>end</tt> and returns the result.
        /// @param {String} field A field in each record
        /// @param {Boolean} grouped (Optional) True to perform the operation for each group
        /// in the store. The value returned will be an object literal with the key being the group
        /// name and the sum for that group being the value. The grouped parameter is only honored if
        /// the store has a groupField.
        /// @return {Number} The sum
        /// </summary>
        public JsNumber sum(JsString field, bool grouped){return null;}
        public void unmask(){}
        public JsString alias{get;set;}
        /// <summary>
        /// @cfg {Boolean} buffered
        /// Allow the store to buffer and pre-fetch pages of records. This is to be used in conjunction with a view will
        /// tell the store to pre-fetch records ahead of a time.
        /// </summary>
        public bool buffered{get;set;}
        /// <summary>
        /// @cfg {Boolean} clearOnPageLoad True to empty the store when loading another page via {@link #loadPage},
        /// {@link #nextPage} or {@link #previousPage} (defaults to true). Setting to false keeps existing records, allowing
        /// large data sets to be loaded one page at a time but rendered all together.
        /// </summary>
        public bool clearOnPageLoad{get;set;}
        /// <summary>
        /// Gets the number of cached records.
        /// <p>If using paging, this may not be the total size of the dataset. If the data object
        /// used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns
        /// the dataset size.  <b>Note</b>: see the Important note in {@link #load}.</p>
        /// @return {Number} The number of Records in the Store's cache.
        /// </summary>
        [JsProperty]
        public JsNumber Count{[JsMethod(Name="getCount")]get;private set;}
        /// <summary>
        /// The page that the Store has most recently loaded (see {@link #loadPage})
        /// @property currentPage
        /// @type Number
        /// </summary>
        public object currentPage{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.Store
        /// @extends Ext.data.AbstractStore
        /// *
        /// <p>The Store class encapsulates a client side cache of {@link Ext.data.Model Model} objects. Stores load
        /// data via a {@link Ext.data.proxy.Proxy Proxy}, and also provide functions for {@link #sort sorting},
        /// {@link #filter filtering} and querying the {@link Ext.data.Model model} instances contained within it.</p>
        /// *
        /// <p>Creating a Store is easy - we just tell it the Model and the Proxy to use to load and save its data:</p>
        /// *
        /// <pre><code>
        /// // Set up a {@link Ext.data.Model model} to use in our Store
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'firstName', type: 'string'},
        /// {name: 'lastName',  type: 'string'},
        /// {name: 'age',       type: 'int'},
        /// {name: 'eyeColor',  type: 'string'}
        /// ]
        /// });
        /// var myStore = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'ajax',
        /// url : '/users.json',
        /// reader: {
        /// type: 'json',
        /// root: 'users'
        /// }
        /// },
        /// autoLoad: true
        /// });
        /// </code></pre>
        /// <p>In the example above we configured an AJAX proxy to load data from the url '/users.json'. We told our Proxy
        /// to use a {@link Ext.data.reader.Json JsonReader} to parse the response from the server into Model object -
        /// {@link Ext.data.reader.Json see the docs on JsonReader} for details.</p>
        /// *
        /// <p><u>Inline data</u></p>
        /// *
        /// <p>Stores can also load data inline. Internally, Store converts each of the objects we pass in as {@link #data}
        /// into Model instances:</p>
        /// *
        /// <pre><code>
        /// Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// data : [
        /// {firstName: 'Ed',    lastName: 'Spencer'},
        /// {firstName: 'Tommy', lastName: 'Maintz'},
        /// {firstName: 'Aaron', lastName: 'Conran'},
        /// {firstName: 'Jamie', lastName: 'Avins'}
        /// ]
        /// });
        /// </code></pre>
        /// *
        /// <p>Loading inline data using the method above is great if the data is in the correct format already (e.g. it doesn't need
        /// to be processed by a {@link Ext.data.reader.Reader reader}). If your inline data requires processing to decode the data structure,
        /// use a {@link Ext.data.proxy.Memory MemoryProxy} instead (see the {@link Ext.data.proxy.Memory MemoryProxy} docs for an example).</p>
        /// *
        /// <p>Additional data can also be loaded locally using {@link #add}.</p>
        /// *
        /// <p><u>Loading Nested Data</u></p>
        /// *
        /// <p>Applications often need to load sets of associated data - for example a CRM system might load a User and her Orders.
        /// Instead of issuing an AJAX request for the User and a series of additional AJAX requests for each Order, we can load a nested dataset
        /// and allow the Reader to automatically populate the associated models. Below is a brief example, see the {@link Ext.data.reader.Reader} intro
        /// docs for a full explanation:</p>
        /// *
        /// <pre><code>
        /// var store = Ext.create('Ext.data.Store', {
        /// autoLoad: true,
        /// model: "User",
        /// proxy: {
        /// type: 'ajax',
        /// url : 'users.json',
        /// reader: {
        /// type: 'json',
        /// root: 'users'
        /// }
        /// }
        /// });
        /// </code></pre>
        /// *
        /// <p>Which would consume a response like this:</p>
        /// *
        /// <pre><code>
        /// {
        /// "users": [
        /// {
        /// "id": 1,
        /// "name": "Ed",
        /// "orders": [
        /// {
        /// "id": 10,
        /// "total": 10.76,
        /// "status": "invoiced"
        /// },
        /// {
        /// "id": 11,
        /// "total": 13.45,
        /// "status": "shipped"
        /// }
        /// ]
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>See the {@link Ext.data.reader.Reader} intro docs for a full explanation.</p>
        /// *
        /// <p><u>Filtering and Sorting</u></p>
        /// *
        /// <p>Stores can be sorted and filtered - in both cases either remotely or locally. The {@link #sorters} and {@link #filters} are
        /// held inside {@link Ext.util.MixedCollection MixedCollection} instances to make them easy to manage. Usually it is sufficient to
        /// either just specify sorters and filters in the Store configuration or call {@link #sort} or {@link #filter}:
        /// *
        /// <pre><code>
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// sorters: [
        /// {
        /// property : 'age',
        /// direction: 'DESC'
        /// },
        /// {
        /// property : 'firstName',
        /// direction: 'ASC'
        /// }
        /// ],
        /// filters: [
        /// {
        /// property: 'firstName',
        /// value   : /Ed/
        /// }
        /// ]
        /// });
        /// </code></pre>
        /// *
        /// <p>The new Store will keep the configured sorters and filters in the MixedCollection instances mentioned above. By default, sorting
        /// and filtering are both performed locally by the Store - see {@link #remoteSort} and {@link #remoteFilter} to allow the server to
        /// perform these operations instead.</p>
        /// *
        /// <p>Filtering and sorting after the Store has been instantiated is also easy. Calling {@link #filter} adds another filter to the Store
        /// and automatically filters the dataset (calling {@link #filter} with no arguments simply re-applies all existing filters). Note that by
        /// default {@link #sortOnFilter} is set to true, which means that your sorters are automatically reapplied if using local sorting.</p>
        /// *
        /// <pre><code>
        /// store.filter('eyeColor', 'Brown');
        /// </code></pre>
        /// *
        /// <p>Change the sorting at any time by calling {@link #sort}:</p>
        /// *
        /// <pre><code>
        /// store.sort('height', 'ASC');
        /// </code></pre>
        /// *
        /// <p>Note that all existing sorters will be removed in favor of the new sorter data (if {@link #sort} is called with no arguments,
        /// the existing sorters are just reapplied instead of being removed). To keep existing sorters and add new ones, just add them
        /// to the MixedCollection:</p>
        /// *
        /// <pre><code>
        /// store.sorters.add(new Ext.util.Sorter({
        /// property : 'shoeSize',
        /// direction: 'ASC'
        /// }));
        /// store.sort();
        /// </code></pre>
        /// *
        /// <p><u>Registering with StoreManager</u></p>
        /// *
        /// <p>Any Store that is instantiated with a {@link #storeId} will automatically be registed with the {@link Ext.data.StoreManager StoreManager}.
        /// This makes it easy to reuse the same store in multiple views:</p>
        /// *
        /// <pre><code>
        /// //this store can be used several times
        /// Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// storeId: 'usersStore'
        /// });
        /// new Ext.List({
        /// store: 'usersStore',
        /// //other config goes here
        /// });
        /// new Ext.view.View({
        /// store: 'usersStore',
        /// //other config goes here
        /// });
        /// </code></pre>
        /// *
        /// <p><u>Further Reading</u></p>
        /// *
        /// <p>Stores are backed up by an ecosystem of classes that enables their operation. To gain a full understanding of these
        /// pieces and how they fit together, see:</p>
        /// *
        /// <ul style="list-style-type: disc; padding-left: 25px">
        /// <li>{@link Ext.data.proxy.Proxy Proxy} - overview of what Proxies are and how they are used</li>
        /// <li>{@link Ext.data.Model Model} - the core class in the data package</li>
        /// <li>{@link Ext.data.reader.Reader Reader} - used by any subclass of {@link Ext.data.proxy.Server ServerProxy} to read a response</li>
        /// </ul>
        /// *
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// The direction in which sorting should be applied when grouping. Defaults to "ASC" - the other supported value is "DESC"
        /// @property groupDir
        /// @type String
        /// </summary>
        public JsString groupDir{get;set;}
        /// <summary>
        /// @cfg {Number} purgePageCount
        /// The number of pages to keep in the cache before purging additional records. A value of 0 indicates to never purge the prefetched data.
        /// This option is only relevant when the {@link #buffered} option is set to true.
        /// </summary>
        public bool isStore{get;set;}
        /// <summary>
        /// True if the Store is currently loading via its Proxy
        /// @property loading
        /// @type Boolean
        /// @private
        /// </summary>
        public bool loading{get;set;}
        /// <summary>
        /// @cfg {Number} pageSize
        /// The number of records considered to form a 'page'. This is used to power the built-in
        /// paging using the nextPage and previousPage functions. Defaults to 25.
        /// </summary>
        public JsNumber pageSize{get;set;}
        /// <summary>
        /// @cfg {Number} purgePageCount
        /// The number of pages to keep in the cache before purging additional records. A value of 0 indicates to never purge the prefetched data.
        /// This option is only relevant when the {@link #buffered} option is set to true.
        /// </summary>
        public JsNumber purgePageCount{get;set;}
        /// <summary>
        /// @cfg {Boolean} remoteFilter
        /// True to defer any filtering operation to the server. If false, filtering is done locally on the client. Defaults to <tt>false</tt>.
        /// </summary>
        public bool remoteFilter{get;set;}
        /// <summary>
        /// @cfg {Boolean} remoteGroup
        /// True if the grouping should apply on the server side, false if it is local only (defaults to false).  If the
        /// grouping is local, it can be applied immediately to the data.  If it is remote, then it will simply act as a
        /// helper, automatically sending the grouping information to the server.
        /// </summary>
        public bool remoteGroup{get;set;}
        /// <summary>
        /// @cfg {Boolean} remoteSort
        /// True to defer any sorting operation to the server. If false, sorting is done locally on the client. Defaults to <tt>false</tt>.
        /// </summary>
        public bool remoteSort{get;set;}
        /// <summary>
        /// @cfg {Boolean} sortOnFilter For local filtering only, causes {@link #sort} to be called whenever {@link #filter} is called,
        /// causing the sorters to be reapplied after filtering. Defaults to true
        /// </summary>
        public bool sortOnFilter{get;set;}
        /// <summary>
        /// Returns the total number of {@link Ext.data.Model Model} instances that the {@link Ext.data.proxy.Proxy Proxy}
        /// indicates exist. This will usually differ from {@link #getCount} when using paging - getCount returns the
        /// number of records loaded into the Store at the moment, getTotalCount returns the number of records that
        /// could be loaded into the Store if the Store contained all data
        /// @return {Number} The total number of Model instances available via the Proxy
        /// </summary>
        [JsProperty]
        public JsNumber TotalCount{[JsMethod(Name="getTotalCount")]get;private set;}
    }
    #endregion
    #region StoreConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class StoreConfig
    {
        public StoreConfig(){}
        /// <summary>
        /// Allow the store to buffer and pre-fetch pages of records. This is to be used in conjunction with a view will
        /// tell the store to pre-fetch records ahead of a time.
        /// </summary>
        public bool buffered{get;set;}
        /// <summary>
        /// True to empty the store when loading another page via {@link #loadPage},
        /// {@link #nextPage} or {@link #previousPage} (defaults to true). Setting to false keeps existing records, allowing
        /// large data sets to be loaded one page at a time but rendered all together.
        /// </summary>
        public bool clearOnPageLoad{get;set;}
        /// <summary>
        /// Optional array of Model instances or data objects to load locally. See "Inline data" above for details.
        /// </summary>
        public object data{get;set;}
        /// <summary>
        /// The number of records considered to form a 'page'. This is used to power the built-in
        /// paging using the nextPage and previousPage functions. Defaults to 25.
        /// </summary>
        public JsNumber pageSize{get;set;}
        /// <summary>
        /// The Proxy to use for this Store. This can be either a string, a config
        /// object or a Proxy instance - see {@link #setProxy} for details.
        /// </summary>
        public object proxy{get;set;}
        /// <summary>
        /// True to defer any filtering operation to the server. If false, filtering is done locally on the client. Defaults to <tt>false</tt>.
        /// </summary>
        public bool remoteFilter{get;set;}
        /// <summary>
        /// True if the grouping should apply on the server side, false if it is local only (defaults to false).  If the
        /// grouping is local, it can be applied immediately to the data.  If it is remote, then it will simply act as a
        /// helper, automatically sending the grouping information to the server.
        /// </summary>
        public bool remoteGroup{get;set;}
        /// <summary>
        /// True to defer any sorting operation to the server. If false, sorting is done locally on the client. Defaults to <tt>false</tt>.
        /// </summary>
        public bool remoteSort{get;set;}
        /// <summary>
        /// For local filtering only, causes {@link #sort} to be called whenever {@link #filter} is called,
        /// causing the sorters to be reapplied after filtering. Defaults to true
        /// </summary>
        public bool sortOnFilter{get;set;}
    }
    #endregion
    #region StoreManager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class StoreManager
    {
        public StoreManager(StoreManagerConfig config){}
        public StoreManager(){}
        public void getKey(object o){}
        /// <summary>
        /// Gets a registered Store by id
        /// @param {String/Object} store The id of the Store, or a Store instance, or a store configuration
        /// @return {Ext.data.Store}
        /// </summary>
        public void lookup(object store){}
        /// <summary>
        /// Registers one or more Stores with the StoreManager. You do not normally need to register stores manually. Any
        /// store initialized with a {@link Ext.data.Store#storeId} will be auto-registered.
        /// @param {Ext.data.Store...} stores Any number of Store instances
        /// </summary>
        public void register(){}
        /// <summary>
        /// Unregisters one or more Stores with the StoreManager
        /// @param {String/Object...} stores Any number of Store instances or ID-s
        /// </summary>
        public void unregister(){}
        /// <summary>
        /// @docauthor Evan Trimboli <evan@sencha.com>
        /// *
        /// Contains a collection of all stores that are created that have an identifier. An identifier can be assigned by
        /// setting the {@link Ext.data.AbstractStore#storeId storeId} property. When a store is in the StoreManager, it can be
        /// referred to via it's identifier:
        /// *
        /// Ext.create('Ext.data.Store', {
        /// model: 'SomeModel',
        /// storeId: 'myStore'
        /// });
        /// *
        /// var store = Ext.data.StoreManager.lookup('myStore');
        /// *
        /// Also note that the {@link #lookup} method is aliased to {@link Ext#getStore} for convenience.
        /// *
        /// If a store is registered with the StoreManager, you can also refer to the store by it's identifier when registering
        /// it with any Component that consumes data from a store:
        /// *
        /// Ext.create('Ext.data.Store', {
        /// model: 'SomeModel',
        /// storeId: 'myStore'
        /// });
        /// *
        /// Ext.create('Ext.view.View', {
        /// store: 'myStore',
        /// // other configuration here
        /// });
        /// *
        /// TODO: Make this an AbstractMgr
        /// </summary>
        public JsString extend{get;set;}
        public bool singleton{get;set;}
    }
    #endregion
    #region StoreManagerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class StoreManagerConfig
    {
        public StoreManagerConfig(){}
        /// <summary>
        /// @hide
        /// </summary>
        public object listeners{get;set;}
    }
    #endregion
    #region Tree
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Tree
    {
        public Tree(){}
        /// <summary>
        /// Creates new Tree object.
        /// @param {Ext.data.NodeInterface} root (optional) The root node
        /// </summary>
        public Tree(NodeInterface root){}
        /// <summary>
        /// Filters this tree
        /// @private
        /// @param {Function} sorterFn The function to use for filtering
        /// @param {Boolean} recursive True to perform recursive filtering
        /// </summary>
        public void filter(JsAction filters, bool recursive){}
        /// <summary>
        /// Flattens all the nodes in the tree into an array.
        /// @private
        /// @return {Ext.data.NodeInterface[]} The flattened nodes.
        /// </summary>
        public void flatten(){}
        /// <summary>
        /// Gets a node in this tree by its id.
        /// @param {String} id
        /// @return {Ext.data.NodeInterface} The match node.
        /// </summary>
        public NodeInterface getNodeById(JsString id){return null;}
        /// <summary>
        /// Returns the root node for this tree.
        /// @return {Ext.data.NodeInterface}
        /// </summary>
        public void getRootNode(){}
        /// <summary>
        /// Fired when a node is appended into the root or one of it's children
        /// @private
        /// @param {Ext.data.NodeInterface} parent The parent node
        /// @param {Ext.data.NodeInterface} node The appended node
        /// </summary>
        public void onNodeAppend(NodeInterface parent, NodeInterface node){}
        /// <summary>
        /// Fired when a node is inserted into the root or one of it's children
        /// @private
        /// @param {Ext.data.NodeInterface} parent The parent node
        /// @param {Ext.data.NodeInterface} node The inserted node
        /// </summary>
        public void onNodeInsert(NodeInterface parent, NodeInterface node){}
        /// <summary>
        /// Fired when a node is removed from the root or one of it's children
        /// @private
        /// @param {Ext.data.NodeInterface} parent The parent node
        /// @param {Ext.data.NodeInterface} node The removed node
        /// </summary>
        public void onNodeRemove(NodeInterface parent, NodeInterface node){}
        /// <summary>
        /// Registers a node with the tree
        /// @private
        /// @param {Ext.data.NodeInterface} The node to register
        /// </summary>
        public void registerNode(NodeInterface node){}
        /// <summary>
        /// Sets the root node for this tree.
        /// @param {Ext.data.NodeInterface} node
        /// @return {Ext.data.NodeInterface} The root node
        /// </summary>
        public NodeInterface setRootNode(NodeInterface node){return null;}
        /// <summary>
        /// Sorts this tree
        /// @private
        /// @param {Function} sorterFn The function to use for sorting
        /// @param {Boolean} recursive True to perform recursive sorting
        /// </summary>
        public void sort(JsAction sorterFn, bool recursive){}
        /// <summary>
        /// Unregisters a node with the tree
        /// @private
        /// @param {Ext.data.NodeInterface} The node to unregister
        /// </summary>
        public void unregisterNode(NodeInterface node){}
        /// <summary>
        /// @class Ext.data.Tree
        /// *
        /// This class is used as a container for a series of nodes. The nodes themselves maintain
        /// the relationship between parent/child. The tree itself acts as a manager. It gives functionality
        /// to retrieve a node by its identifier: {@link #getNodeById}.
        /// *
        /// The tree also relays events from any of it's child nodes, allowing them to be handled in a
        /// centralized fashion. In general this class is not used directly, rather used internally
        /// by other parts of the framework.
        /// *
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @property {Ext.data.NodeInterface}
        /// The root node for this tree
        /// </summary>
        public object root{get;set;}
        /// <summary>
        /// Sets the root node for this tree.
        /// @param {Ext.data.NodeInterface} node
        /// @return {Ext.data.NodeInterface} The root node
        /// </summary>
        [JsProperty]
        public NodeInterface RootNode{private get;[JsMethod(Name="setRootNode")]set;}
    }
    #endregion
    #region TreeStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TreeStore
    {
        public TreeStore(){}
        public TreeStore(TreeStoreConfig config){}
        /// <summary>
        /// @cfg {Boolean} folderSort
        /// Set to true to automatically prepend a leaf sorter. Defaults to `undefined`.
        /// </summary>
        public TreeStore(object config){}
        public void doSort(object sorterFn){}
        /// <summary>
        /// Fills a node with a series of child records.
        /// @private
        /// @param {Ext.data.NodeInterface} node The node to fill
        /// @param {Ext.data.Model[]} records The records to add
        /// </summary>
        public void fillNode(NodeInterface node, object records){}
        public void getNewRecords(){}
        /// <summary>
        /// Returns the record node by id
        /// @return {Ext.data.NodeInterface}
        /// </summary>
        public void getNodeById(object id){}
        /// <summary>
        /// Returns the root node for this tree.
        /// @return {Ext.data.NodeInterface}
        /// </summary>
        public void getRootNode(){}
        public void getUpdatedRecords(){}
        /// <summary>
        /// Loads the Store using its configured {@link #proxy}.
        /// @param {Object} options (Optional) config object. This is passed into the {@link Ext.data.Operation Operation}
        /// object that is created and then sent to the proxy's {@link Ext.data.proxy.Proxy#read} function.
        /// The options can also contain a node, which indicates which node is to be loaded. If not specified, it will
        /// default to the root node.
        /// </summary>
        public void load(object options){}
        /// <summary>
        /// Called before a node is collapsed.
        /// @private
        /// @param {Ext.data.NodeInterface} node The node being collapsed.
        /// @param {Function} callback The function to run after the collapse finishes
        /// @param {Object} scope The scope in which to run the callback function
        /// </summary>
        public void onBeforeNodeCollapse(NodeInterface node, JsAction callback, object scope){}
        /// <summary>
        /// Called before a node is expanded.
        /// @private
        /// @param {Ext.data.NodeInterface} node The node being expanded.
        /// @param {Function} callback The function to run after the expand finishes
        /// @param {Object} scope The scope in which to run the callback function
        /// </summary>
        public void onBeforeNodeExpand(NodeInterface node, JsAction callback, object scope){}
        public void onBeforeSort(){}
        /// <summary>
        /// Creates any new records when a write is returned from the server.
        /// @private
        /// @param {Ext.data.Model[]} records The array of new records
        /// @param {Ext.data.Operation} operation The operation that just completed
        /// @param {Boolean} success True if the operation was successful
        /// </summary>
        public void onCreateRecords(object records, Operation operation, bool success){}
        /// <summary>
        /// Removes any records when a write is returned from the server.
        /// @private
        /// @param {Ext.data.Model[]} records The array of removed records
        /// @param {Ext.data.Operation} operation The operation that just completed
        /// @param {Boolean} success True if the operation was successful
        /// </summary>
        public void onDestroyRecords(object records, Operation operation, bool success){}
        public void onNodeAdded(object parent, object node){}
        public void onNodeRemove(object parent, object node){}
        public void onProxyLoad(object operation){}
        /// <summary>
        /// Updates any records when a write is returned from the server.
        /// @private
        /// @param {Ext.data.Model[]} records The array of updated records
        /// @param {Ext.data.Operation} operation The operation that just completed
        /// @param {Boolean} success True if the operation was successful
        /// </summary>
        public void onUpdateRecords(object records, Operation operation, bool success){}
        public void removeAll(){}
        public void setProxy(object proxy){}
        /// <summary>
        /// Sets the root node for this store.  See also the {@link #root} config option.
        /// @param {Ext.data.Model/Ext.data.NodeInterface/Object} root
        /// @return {Ext.data.NodeInterface} The new root
        /// </summary>
        public NodeInterface setRootNode(object root){return null;}
        /// <summary>
        /// The TreeStore is a store implementation that is backed by by an {@link Ext.data.Tree}.
        /// It provides convenience methods for loading nodes, as well as the ability to use
        /// the hierarchical tree structure combined with a store. This class also relays many events from
        /// the Tree for convenience.
        /// *
        /// # Using Models
        /// *
        /// If no Model is specified, an implicit model will be created that implements {@link Ext.data.NodeInterface}.
        /// The standard Tree fields will also be copied onto the Model for maintaining their state. These fields are listed
        /// in the {@link Ext.data.NodeInterface} documentation.
        /// *
        /// # Reading Nested Data
        /// *
        /// For the tree to read nested data, the {@link Ext.data.reader.Reader} must be configured with a root property,
        /// so the reader can find nested data for each node. If a root is not specified, it will default to
        /// 'children'.
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @cfg {Boolean} clearOnLoad
        /// Remove previously existing child nodes before loading. Default to true.
        /// </summary>
        public bool clearOnLoad{get;set;}
        /// <summary>
        /// @cfg {String} defaultRootId
        /// The default root id. Defaults to 'root'
        /// </summary>
        public JsString defaultRootId{get;set;}
        /// <summary>
        /// @cfg {String} defaultRootProperty
        /// The root property to specify on the reader if one is not explicitly defined.
        /// </summary>
        public JsString defaultRootProperty{get;set;}
        /// <summary>
        /// The TreeStore is a store implementation that is backed by by an {@link Ext.data.Tree}.
        /// It provides convenience methods for loading nodes, as well as the ability to use
        /// the hierarchical tree structure combined with a store. This class also relays many events from
        /// the Tree for convenience.
        /// *
        /// # Using Models
        /// *
        /// If no Model is specified, an implicit model will be created that implements {@link Ext.data.NodeInterface}.
        /// The standard Tree fields will also be copied onto the Model for maintaining their state. These fields are listed
        /// in the {@link Ext.data.NodeInterface} documentation.
        /// *
        /// # Reading Nested Data
        /// *
        /// For the tree to read nested data, the {@link Ext.data.reader.Reader} must be configured with a root property,
        /// so the reader can find nested data for each node. If a root is not specified, it will default to
        /// 'children'.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {Boolean} folderSort
        /// Set to true to automatically prepend a leaf sorter. Defaults to `undefined`.
        /// </summary>
        public bool folderSort{get;set;}
        /// <summary>
        /// @cfg {String} nodeParam
        /// The name of the parameter sent to the server which contains the identifier of the node.
        /// Defaults to 'node'.
        /// </summary>
        public JsString nodeParam{get;set;}
        [JsProperty]
        public object Proxy{private get;[JsMethod(Name="setProxy")]set;}
        /// <summary>
        /// Sets the root node for this store.  See also the {@link #root} config option.
        /// @param {Ext.data.Model/Ext.data.NodeInterface/Object} root
        /// @return {Ext.data.NodeInterface} The new root
        /// </summary>
        [JsProperty]
        public object RootNode{private get;[JsMethod(Name="setRootNode")]set;}
    }
    #endregion
    #region TreeStoreConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TreeStoreConfig
    {
        public TreeStoreConfig(){}
        /// <summary>
        /// Remove previously existing child nodes before loading. Default to true.
        /// </summary>
        public bool clearOnLoad{get;set;}
        /// <summary>
        /// The default root id. Defaults to 'root'
        /// </summary>
        public JsString defaultRootId{get;set;}
        /// <summary>
        /// The root property to specify on the reader if one is not explicitly defined.
        /// </summary>
        public JsString defaultRootProperty{get;set;}
        /// <summary>
        /// Set to true to automatically prepend a leaf sorter. Defaults to `undefined`.
        /// </summary>
        public bool folderSort{get;set;}
        /// <summary>
        /// The name of the parameter sent to the server which contains the identifier of the node.
        /// Defaults to 'node'.
        /// </summary>
        public JsString nodeParam{get;set;}
        /// <summary>
        /// The root node for this store. For example:
        /// *
        /// root: {
        /// expanded: true,
        /// text: "My Root",
        /// children: [
        /// { text: "Child 1", leaf: true },
        /// { text: "Child 2", expanded: true, children: [
        /// { text: "GrandChild", leaf: true }
        /// ] }
        /// ]
        /// }
        /// *
        /// Setting the `root` config option is the same as calling {@link #setRootNode}.
        /// </summary>
        public object root{get;set;}
    }
    #endregion
    #region Types
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Types
    {
        public Types(){}
        /// <summary>
        /// @class Ext.data.Types
        /// <p>This is s static class containing the system-supplied data types which may be given to a {@link Ext.data.Field Field}.<p/>
        /// <p>The properties in this class are used as type indicators in the {@link Ext.data.Field Field} class, so to
        /// test whether a Field is of a certain type, compare the {@link Ext.data.Field#type type} property against properties
        /// of this class.</p>
        /// <p>Developers may add their own application-specific data types to this class. Definition names must be UPPERCASE.
        /// each type definition must contain three properties:</p>
        /// <div class="mdetail-params"><ul>
        /// <li><code>convert</code> : <i>Function</i><div class="sub-desc">A function to convert raw data values from a data block into the data
        /// to be stored in the Field. The function is passed the collowing parameters:
        /// <div class="mdetail-params"><ul>
        /// <li><b>v</b> : Mixed<div class="sub-desc">The data value as read by the Reader, if undefined will use
        /// the configured <tt>{@link Ext.data.Field#defaultValue defaultValue}</tt>.</div></li>
        /// <li><b>rec</b> : Mixed<div class="sub-desc">The data object containing the row as read by the Reader.
        /// Depending on the Reader type, this could be an Array ({@link Ext.data.reader.Array ArrayReader}), an object
        /// ({@link Ext.data.reader.Json JsonReader}), or an XML element.</div></li>
        /// </ul></div></div></li>
        /// <li><code>sortType</code> : <i>Function</i> <div class="sub-desc">A function to convert the stored data into comparable form, as defined by {@link Ext.data.SortTypes}.</div></li>
        /// <li><code>type</code> : <i>String</i> <div class="sub-desc">A textual data type name.</div></li>
        /// </ul></div>
        /// <p>For example, to create a VELatLong field (See the Microsoft Bing Mapping API) containing the latitude/longitude value of a datapoint on a map from a JsonReader data block
        /// which contained the properties <code>lat</code> and <code>long</code>, you would define a new data type like this:</p>
        /// *<pre><code>
        /// // Add a new Field data type which stores a VELatLong object in the Record.
        /// Ext.data.Types.VELATLONG = {
        /// convert: function(v, data) {
        /// return new VELatLong(data.lat, data.long);
        /// },
        /// sortType: function(v) {
        /// return v.Latitude;  // When sorting, order by latitude
        /// },
        /// type: 'VELatLong'
        /// };
        /// </code></pre>
        /// <p>Then, when declaring a Model, use <pre><code>
        /// var types = Ext.data.Types; // allow shorthand type access
        /// Ext.define('Unit',
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'unitName', mapping: 'UnitName' },
        /// { name: 'curSpeed', mapping: 'CurSpeed', type: types.INT },
        /// { name: 'latitude', mapping: 'lat', type: types.FLOAT },
        /// { name: 'position', type: types.VELATLONG }
        /// ]
        /// });
        /// </code></pre>
        /// @singleton
        /// </summary>
        public bool singleton{get;set;}
    }
    #endregion
    #region UuidGenerator
    [JsType(JsMode.Prototype, Export=false)]
    public partial class UuidGenerator
    {
        public UuidGenerator(UuidGeneratorConfig config){}
        /// <summary>
        /// @cfg {Number} version
        /// The Version of UUID. Supported values are:
        /// *
        /// * 1 : Time-based, "sequential" UUID.
        /// * 4 : Pseudo-random UUID.
        /// *
        /// The default is 4.
        /// </summary>
        public UuidGenerator(){}
        public void generate(){}
        public void getRecId(object rec){}
        /// <summary>
        /// @private
        /// </summary>
        public void init(){}
        /// <summary>
        /// Reconfigures this generator given new config properties.
        /// </summary>
        public void reconfigure(object config){}
        public JsString alias{get;set;}
        public JsString extend{get;set;}
        public JsString id{get;set;}
        /// <summary>
        /// @cfg {Number} version
        /// The Version of UUID. Supported values are:
        /// *
        /// * 1 : Time-based, "sequential" UUID.
        /// * 4 : Pseudo-random UUID.
        /// *
        /// The default is 4.
        /// </summary>
        public JsNumber version{get;set;}
    }
    #endregion
    #region UuidGeneratorConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class UuidGeneratorConfig
    {
        public UuidGeneratorConfig(){}
        /// <summary>
        /// The Version of UUID. Supported values are:
        /// *
        /// * 1 : Time-based, "sequential" UUID.
        /// * 4 : Pseudo-random UUID.
        /// *
        /// The default is 4.
        /// </summary>
        public JsNumber version{get;set;}
    }
    #endregion
    #region validations
    [JsType(JsMode.Prototype, Export=false)]
    public partial class validations
    {
        public validations(){}
        /// <summary>
        /// Validates that an email string is in the correct format
        /// @param {Object} config Config object
        /// @param {String} email The email address
        /// @return {Boolean} True if the value passes validation
        /// </summary>
        public bool email(object config, JsString email){return false;}
        /// <summary>
        /// Validates that the given value is present in the configured `list`.
        /// For example:
        /// *
        /// validations: [{type: 'exclusion', field: 'username', list: ['Admin', 'Operator']}]
        /// *
        /// @param {Object} config Config object
        /// @param {String} value The value to validate
        /// @return {Boolean} True if the value is not present in the list
        /// </summary>
        public bool exclusion(object config, JsString value){return false;}
        /// <summary>
        /// Returns true if the given value passes validation against the configured `matcher` regex.
        /// For example:
        /// *
        /// validations: [{type: 'format', field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}]
        /// *
        /// @param {Object} config Config object
        /// @param {String} value The value to validate
        /// @return {Boolean} True if the value passes the format validation
        /// </summary>
        public bool format(object config, JsString value){return false;}
        /// <summary>
        /// Validates that the given value is present in the configured `list`.
        /// For example:
        /// *
        /// validations: [{type: 'inclusion', field: 'gender', list: ['Male', 'Female']}]
        /// *
        /// @param {Object} config Config object
        /// @param {String} value The value to validate
        /// @return {Boolean} True if the value is present in the list
        /// </summary>
        public bool inclusion(object config, JsString value){return false;}
        /// <summary>
        /// Returns true if the given value is between the configured min and max values.
        /// For example:
        /// *
        /// validations: [{type: 'length', field: 'name', min: 2}]
        /// *
        /// @param {Object} config Config object
        /// @param {String} value The value to validate
        /// @return {Boolean} True if the value passes validation
        /// </summary>
        public bool length(object config, JsString value){return false;}
        /// <summary>
        /// Validates that the given value is present.
        /// For example:
        /// *
        /// validations: [{type: 'presence', field: 'age'}]
        /// *
        /// @param {Object} config Config object
        /// @param {Object} value The value to validate
        /// @return {Boolean} True if validation passed
        /// </summary>
        public bool presence(object config, object value){return false;}
        /// <summary>
        /// @property {String} emailMessage
        /// The default error message used when an email validation fails
        /// </summary>
        public JsString emailMessage{get;set;}
        /// <summary>
        /// The regular expression used to validate email addresses
        /// @property emailRe
        /// @type RegExp
        /// </summary>
        public JsRegExp emailRe{get;set;}
        /// <summary>
        /// @property {String} exclusionMessage
        /// The default error message used when an exclusion validation fails.
        /// </summary>
        public JsString exclusionMessage{get;set;}
        /// <summary>
        /// @property {Boolean} formatMessage
        /// The default error message used when a format validation fails.
        /// </summary>
        public JsString formatMessage{get;set;}
        /// <summary>
        /// @property {String} inclusionMessage
        /// The default error message used when an inclusion validation fails.
        /// </summary>
        public JsString inclusionMessage{get;set;}
        /// <summary>
        /// @property {String} lengthMessage
        /// The default error message used when a length validation fails.
        /// </summary>
        public JsString lengthMessage{get;set;}
        /// <summary>
        /// @property {String} presenceMessage
        /// The default error message used when a presence validation fails.
        /// </summary>
        public JsString presenceMessage{get;set;}
        /// <summary>
        /// @extends Object
        /// @author Ed Spencer
        /// *
        /// This singleton contains a set of validation functions that can be used to validate any type of data. They are most
        /// often used in {@link Ext.data.Model Models}, where they are automatically set up and executed.
        /// </summary>
        public bool singleton{get;set;}
    }
    #endregion
    #region XmlStore
    [JsType(JsMode.Prototype, Export=false)]
    public partial class XmlStore
    {
        public XmlStore(){}
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public XmlStore(object config){}
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.XmlStore
        /// @extends Ext.data.Store
        /// @private
        /// @ignore
        /// <p>Small helper class to make creating {@link Ext.data.Store}s from XML data easier.
        /// A XmlStore will be automatically configured with a {@link Ext.data.reader.Xml}.</p>
        /// <p>A store configuration would be something like:<pre><code>
        /// var store = new Ext.data.XmlStore({
        /// // store configs
        /// autoDestroy: true,
        /// storeId: 'myStore',
        /// url: 'sheldon.xml', // automatically configures a HttpProxy
        /// // reader configs
        /// record: 'Item', // records will have an "Item" tag
        /// idPath: 'ASIN',
        /// totalRecords: '@TotalResults'
        /// fields: [
        /// // set up the fields mapping into the xml doc
        /// // The first needs mapping, the others are very basic
        /// {name: 'Author', mapping: 'ItemAttributes > Author'},
        /// 'Title', 'Manufacturer', 'ProductGroup'
        /// ]
        /// });
        /// </code></pre></p>
        /// <p>This store is configured to consume a returned object of the form:<pre><code>
        /// &#60?xml version="1.0" encoding="UTF-8"?>
        /// &#60ItemSearchResponse xmlns="http://webservices.amazon.com/AWSECommerceService/2009-05-15">
        /// &#60Items>
        /// &#60Request>
        /// &#60IsValid>True&#60/IsValid>
        /// &#60ItemSearchRequest>
        /// &#60Author>Sidney Sheldon&#60/Author>
        /// &#60SearchIndex>Books&#60/SearchIndex>
        /// &#60/ItemSearchRequest>
        /// &#60/Request>
        /// &#60TotalResults>203&#60/TotalResults>
        /// &#60TotalPages>21&#60/TotalPages>
        /// &#60Item>
        /// &#60ASIN>0446355453&#60/ASIN>
        /// &#60DetailPageURL>
        /// http://www.amazon.com/
        /// &#60/DetailPageURL>
        /// &#60ItemAttributes>
        /// &#60Author>Sidney Sheldon&#60/Author>
        /// &#60Manufacturer>Warner Books&#60/Manufacturer>
        /// &#60ProductGroup>Book&#60/ProductGroup>
        /// &#60Title>Master of the Game&#60/Title>
        /// &#60/ItemAttributes>
        /// &#60/Item>
        /// &#60/Items>
        /// &#60/ItemSearchResponse>
        /// </code></pre>
        /// An object literal of this form could also be used as the {@link #data} config option.</p>
        /// <p><b>Note:</b> Although not listed here, this class accepts all of the configuration options of
        /// <b>{@link Ext.data.reader.Xml XmlReader}</b>.</p>
        /// @xtype xmlstore
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.XmlStore
        /// @extends Ext.data.Store
        /// @private
        /// @ignore
        /// <p>Small helper class to make creating {@link Ext.data.Store}s from XML data easier.
        /// A XmlStore will be automatically configured with a {@link Ext.data.reader.Xml}.</p>
        /// <p>A store configuration would be something like:<pre><code>
        /// var store = new Ext.data.XmlStore({
        /// // store configs
        /// autoDestroy: true,
        /// storeId: 'myStore',
        /// url: 'sheldon.xml', // automatically configures a HttpProxy
        /// // reader configs
        /// record: 'Item', // records will have an "Item" tag
        /// idPath: 'ASIN',
        /// totalRecords: '@TotalResults'
        /// fields: [
        /// // set up the fields mapping into the xml doc
        /// // The first needs mapping, the others are very basic
        /// {name: 'Author', mapping: 'ItemAttributes > Author'},
        /// 'Title', 'Manufacturer', 'ProductGroup'
        /// ]
        /// });
        /// </code></pre></p>
        /// <p>This store is configured to consume a returned object of the form:<pre><code>
        /// &#60?xml version="1.0" encoding="UTF-8"?>
        /// &#60ItemSearchResponse xmlns="http://webservices.amazon.com/AWSECommerceService/2009-05-15">
        /// &#60Items>
        /// &#60Request>
        /// &#60IsValid>True&#60/IsValid>
        /// &#60ItemSearchRequest>
        /// &#60Author>Sidney Sheldon&#60/Author>
        /// &#60SearchIndex>Books&#60/SearchIndex>
        /// &#60/ItemSearchRequest>
        /// &#60/Request>
        /// &#60TotalResults>203&#60/TotalResults>
        /// &#60TotalPages>21&#60/TotalPages>
        /// &#60Item>
        /// &#60ASIN>0446355453&#60/ASIN>
        /// &#60DetailPageURL>
        /// http://www.amazon.com/
        /// &#60/DetailPageURL>
        /// &#60ItemAttributes>
        /// &#60Author>Sidney Sheldon&#60/Author>
        /// &#60Manufacturer>Warner Books&#60/Manufacturer>
        /// &#60ProductGroup>Book&#60/ProductGroup>
        /// &#60Title>Master of the Game&#60/Title>
        /// &#60/ItemAttributes>
        /// &#60/Item>
        /// &#60/Items>
        /// &#60/ItemSearchResponse>
        /// </code></pre>
        /// An object literal of this form could also be used as the {@link #data} config option.</p>
        /// <p><b>Note:</b> Although not listed here, this class accepts all of the configuration options of
        /// <b>{@link Ext.data.reader.Xml XmlReader}</b>.</p>
        /// @xtype xmlstore
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.data.association
namespace Ext.data.association
{
    #region Association
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Association
    {
        public Association(){}
        public Association(AssociationConfig config){}
        /// <summary>
        /// Creates the Association object.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Association(object config){}
        /// <summary>
        /// Get a specialized reader for reading associated data
        /// @return {Ext.data.reader.Reader} The reader, null if not supplied
        /// </summary>
        public Reader getReader(){return null;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.association.Association
        /// @extends Object
        /// *
        /// <p>Associations enable you to express relationships between different {@link Ext.data.Model Models}. Let's say we're
        /// writing an ecommerce system where Users can make Orders - there's a relationship between these Models that we can
        /// express like this:</p>
        /// *
        /// <pre><code>
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email'],
        /// hasMany: {model: 'Order', name: 'orders'}
        /// });
        /// Ext.define('Order', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'user_id', 'status', 'price'],
        /// belongsTo: 'User'
        /// });
        /// </code></pre>
        /// *
        /// <p>We've set up two models - User and Order - and told them about each other. You can set up as many associations on
        /// each Model as you need using the two default types - {@link Ext.data.association.HasMany hasMany} and
        /// {@link Ext.data.association.BelongsTo belongsTo}. There's much more detail on the usage of each of those inside their
        /// documentation pages. If you're not familiar with Models already, {@link Ext.data.Model there is plenty on those too}.</p>
        /// *
        /// <p><u>Further Reading</u></p>
        /// *
        /// <ul style="list-style-type: disc; padding-left: 20px;">
        /// <li>{@link Ext.data.association.HasMany hasMany associations}</li>
        /// <li>{@link Ext.data.association.BelongsTo belongsTo associations}</li>
        /// <li>{@link Ext.data.association.HasOne hasOne associations}</li>
        /// <li>{@link Ext.data.Model using Models}</li>
        /// </ul>
        /// <b>Self association models</b>
        /// <p>We can also have models that create parent/child associations between the same type. Below is an example, where
        /// groups can be nested inside other groups:</p>
        /// <pre><code>
        /// // Server Data
        /// {
        /// "groups": {
        /// "id": 10,
        /// "parent_id": 100,
        /// "name": "Main Group",
        /// "parent_group": {
        /// "id": 100,
        /// "parent_id": null,
        /// "name": "Parent Group"
        /// },
        /// "child_groups": [{
        /// "id": 2,
        /// "parent_id": 10,
        /// "name": "Child Group 1"
        /// },{
        /// "id": 3,
        /// "parent_id": 10,
        /// "name": "Child Group 2"
        /// },{
        /// "id": 4,
        /// "parent_id": 10,
        /// "name": "Child Group 3"
        /// }]
        /// }
        /// }
        /// // Client code
        /// Ext.define('Group', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'parent_id', 'name'],
        /// proxy: {
        /// type: 'ajax',
        /// url: 'data.json',
        /// reader: {
        /// type: 'json',
        /// root: 'groups'
        /// }
        /// },
        /// associations: [{
        /// type: 'hasMany',
        /// model: 'Group',
        /// primaryKey: 'id',
        /// foreignKey: 'parent_id',
        /// autoLoad: true,
        /// associationKey: 'child_groups' // read child data from child_groups
        /// }, {
        /// type: 'belongsTo',
        /// model: 'Group',
        /// primaryKey: 'id',
        /// foreignKey: 'parent_id',
        /// associationKey: 'parent_group' // read parent data from parent_group
        /// }]
        /// });
        /// Ext.onReady(function(){
        /// Group.load(10, {
        /// success: function(group){
        /// console.log(group.getGroup().get('name'));
        /// group.groups().each(function(rec){
        /// console.log(rec.get('name'));
        /// });
        /// }
        /// });
        /// });
        /// </code></pre>
        /// *
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @cfg {String} associationKey The name of the property in the data to read the association from.
        /// Defaults to the name of the associated model.
        /// </summary>
        public JsString defaultReaderType{get;set;}
        /// <summary>
        /// @cfg {String} primaryKey The name of the primary key on the associated model. Defaults to 'id'.
        /// In general this will be the {@link Ext.data.Model#idProperty} of the Model.
        /// </summary>
        public JsString primaryKey{get;set;}
        /// <summary>
        /// Get a specialized reader for reading associated data
        /// @return {Ext.data.reader.Reader} The reader, null if not supplied
        /// </summary>
        [JsProperty]
        public Reader Reader{[JsMethod(Name="getReader")]get;private set;}
    }
    #endregion
    #region AssociationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AssociationConfig
    {
        public AssociationConfig(){}
        /// <summary>
        /// The string name of the model that is being associated with. Required
        /// </summary>
        public JsString associatedModel{get;set;}
        /// <summary>
        /// The name of the property in the data to read the association from.
        /// Defaults to the name of the associated model.
        /// </summary>
        public JsString associationKey{get;set;}
        /// <summary>
        /// The string name of the model that owns the association. Required
        /// </summary>
        public JsString ownerModel{get;set;}
        /// <summary>
        /// The name of the primary key on the associated model. Defaults to 'id'.
        /// In general this will be the {@link Ext.data.Model#idProperty} of the Model.
        /// </summary>
        public JsString primaryKey{get;set;}
        /// <summary>
        /// A special reader to read associated data
        /// </summary>
        public Reader reader{get;set;}
    }
    #endregion
    #region BelongsTo
    [JsType(JsMode.Prototype, Export=false)]
    public partial class BelongsTo
    {
        public BelongsTo(){}
        public BelongsTo(BelongsToConfig config){}
        /// <summary>
        /// @cfg {String} type The type configuration can be used when creating associations using a configuration object.
        /// Use 'belongsTo' to create a BelongsTo association.
        /// *
        /// associations: [{
        /// type: 'belongsTo',
        /// model: 'User'
        /// }]
        /// </summary>
        public BelongsTo(object config){}
        /// <summary>
        /// @private
        /// Returns a getter function to be placed on the owner model's prototype. We cache the loaded instance
        /// the first time it is loaded so that subsequent calls to the getter always receive the same reference.
        /// @return {Function} The getter function
        /// </summary>
        public JsAction createGetter(){return null;}
        /// <summary>
        /// @private
        /// Returns a setter function to be placed on the owner model's prototype
        /// @return {Function} The setter function
        /// </summary>
        public JsAction createSetter(){return null;}
        /// <summary>
        /// Read associated data
        /// @private
        /// @param {Ext.data.Model} record The record we're writing to
        /// @param {Ext.data.reader.Reader} reader The reader for the associated model
        /// @param {Object} associationData The raw associated data
        /// </summary>
        public void read(Model record, Reader reader, object associationData){}
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.association.BelongsTo
        /// @extends Ext.data.association.Association
        /// *
        /// Represents a many to one association with another model. The owner model is expected to have
        /// a foreign key which references the primary key of the associated model:
        /// *
        /// Ext.define('Category', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'id',   type: 'int' },
        /// { name: 'name', type: 'string' }
        /// ]
        /// });
        /// *
        /// Ext.define('Product', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'id',          type: 'int' },
        /// { name: 'category_id', type: 'int' },
        /// { name: 'name',        type: 'string' }
        /// ],
        /// // we can use the belongsTo shortcut on the model to create a belongsTo association
        /// associations: { type: 'belongsTo', model: 'Category' }
        /// });
        /// *
        /// In the example above we have created models for Products and Categories, and linked them together
        /// by saying that each Product belongs to a Category. This automatically links each Product to a Category
        /// based on the Product's category_id, and provides new functions on the Product model:
        /// *
        /// ## Generated getter function
        /// *
        /// The first function that is added to the owner model is a getter function:
        /// *
        /// var product = new Product({
        /// id: 100,
        /// category_id: 20,
        /// name: 'Sneakers'
        /// });
        /// *
        /// product.getCategory(function(category, operation) {
        /// // do something with the category object
        /// alert(category.get('id')); // alerts 20
        /// }, this);
        /// *
        /// The getCategory function was created on the Product model when we defined the association. This uses the
        /// Category's configured {@link Ext.data.proxy.Proxy proxy} to load the Category asynchronously, calling the provided
        /// callback when it has loaded.
        /// *
        /// The new getCategory function will also accept an object containing success, failure and callback properties
        /// - callback will always be called, success will only be called if the associated model was loaded successfully
        /// and failure will only be called if the associatied model could not be loaded:
        /// *
        /// product.getCategory({
        /// reload: true, // force a reload if the owner model is already cached
        /// callback: function(category, operation) {}, // a function that will always be called
        /// success : function(category, operation) {}, // a function that will only be called if the load succeeded
        /// failure : function(category, operation) {}, // a function that will only be called if the load did not succeed
        /// scope   : this // optionally pass in a scope object to execute the callbacks in
        /// });
        /// *
        /// In each case above the callbacks are called with two arguments - the associated model instance and the
        /// {@link Ext.data.Operation operation} object that was executed to load that instance. The Operation object is
        /// useful when the instance could not be loaded.
        /// Once the getter has been called on the model, it will be cached if the getter is called a second time. To
        /// force the model to reload, specify reload: true in the options object.
        /// *
        /// ## Generated setter function
        /// *
        /// The second generated function sets the associated model instance - if only a single argument is passed to
        /// the setter then the following two calls are identical:
        /// *
        /// // this call...
        /// product.setCategory(10);
        /// *
        /// // is equivalent to this call:
        /// product.set('category_id', 10);
        /// An instance of the owner model can also be passed as a parameter.
        /// *
        /// If we pass in a second argument, the model will be automatically saved and the second argument passed to
        /// the owner model's {@link Ext.data.Model#save save} method:
        /// *
        /// product.setCategory(10, function(product, operation) {
        /// // the product has been saved
        /// alert(product.get('category_id')); //now alerts 10
        /// });
        /// *
        /// //alternative syntax:
        /// product.setCategory(10, {
        /// callback: function(product, operation), // a function that will always be called
        /// success : function(product, operation), // a function that will only be called if the load succeeded
        /// failure : function(product, operation), // a function that will only be called if the load did not succeed
        /// scope   : this //optionally pass in a scope object to execute the callbacks in
        /// })
        /// *
        /// ## Customisation
        /// *
        /// Associations reflect on the models they are linking to automatically set up properties such as the
        /// {@link #primaryKey} and {@link #foreignKey}. These can alternatively be specified:
        /// *
        /// Ext.define('Product', {
        /// fields: [...],
        /// *
        /// associations: [
        /// { type: 'belongsTo', model: 'Category', primaryKey: 'unique_id', foreignKey: 'cat_id' }
        /// ]
        /// });
        /// *
        /// Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'category_id')
        /// with our own settings. Usually this will not be needed.
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.association.BelongsTo
        /// @extends Ext.data.association.Association
        /// *
        /// Represents a many to one association with another model. The owner model is expected to have
        /// a foreign key which references the primary key of the associated model:
        /// *
        /// Ext.define('Category', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'id',   type: 'int' },
        /// { name: 'name', type: 'string' }
        /// ]
        /// });
        /// *
        /// Ext.define('Product', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'id',          type: 'int' },
        /// { name: 'category_id', type: 'int' },
        /// { name: 'name',        type: 'string' }
        /// ],
        /// // we can use the belongsTo shortcut on the model to create a belongsTo association
        /// associations: { type: 'belongsTo', model: 'Category' }
        /// });
        /// *
        /// In the example above we have created models for Products and Categories, and linked them together
        /// by saying that each Product belongs to a Category. This automatically links each Product to a Category
        /// based on the Product's category_id, and provides new functions on the Product model:
        /// *
        /// ## Generated getter function
        /// *
        /// The first function that is added to the owner model is a getter function:
        /// *
        /// var product = new Product({
        /// id: 100,
        /// category_id: 20,
        /// name: 'Sneakers'
        /// });
        /// *
        /// product.getCategory(function(category, operation) {
        /// // do something with the category object
        /// alert(category.get('id')); // alerts 20
        /// }, this);
        /// *
        /// The getCategory function was created on the Product model when we defined the association. This uses the
        /// Category's configured {@link Ext.data.proxy.Proxy proxy} to load the Category asynchronously, calling the provided
        /// callback when it has loaded.
        /// *
        /// The new getCategory function will also accept an object containing success, failure and callback properties
        /// - callback will always be called, success will only be called if the associated model was loaded successfully
        /// and failure will only be called if the associatied model could not be loaded:
        /// *
        /// product.getCategory({
        /// reload: true, // force a reload if the owner model is already cached
        /// callback: function(category, operation) {}, // a function that will always be called
        /// success : function(category, operation) {}, // a function that will only be called if the load succeeded
        /// failure : function(category, operation) {}, // a function that will only be called if the load did not succeed
        /// scope   : this // optionally pass in a scope object to execute the callbacks in
        /// });
        /// *
        /// In each case above the callbacks are called with two arguments - the associated model instance and the
        /// {@link Ext.data.Operation operation} object that was executed to load that instance. The Operation object is
        /// useful when the instance could not be loaded.
        /// Once the getter has been called on the model, it will be cached if the getter is called a second time. To
        /// force the model to reload, specify reload: true in the options object.
        /// *
        /// ## Generated setter function
        /// *
        /// The second generated function sets the associated model instance - if only a single argument is passed to
        /// the setter then the following two calls are identical:
        /// *
        /// // this call...
        /// product.setCategory(10);
        /// *
        /// // is equivalent to this call:
        /// product.set('category_id', 10);
        /// An instance of the owner model can also be passed as a parameter.
        /// *
        /// If we pass in a second argument, the model will be automatically saved and the second argument passed to
        /// the owner model's {@link Ext.data.Model#save save} method:
        /// *
        /// product.setCategory(10, function(product, operation) {
        /// // the product has been saved
        /// alert(product.get('category_id')); //now alerts 10
        /// });
        /// *
        /// //alternative syntax:
        /// product.setCategory(10, {
        /// callback: function(product, operation), // a function that will always be called
        /// success : function(product, operation), // a function that will only be called if the load succeeded
        /// failure : function(product, operation), // a function that will only be called if the load did not succeed
        /// scope   : this //optionally pass in a scope object to execute the callbacks in
        /// })
        /// *
        /// ## Customisation
        /// *
        /// Associations reflect on the models they are linking to automatically set up properties such as the
        /// {@link #primaryKey} and {@link #foreignKey}. These can alternatively be specified:
        /// *
        /// Ext.define('Product', {
        /// fields: [...],
        /// *
        /// associations: [
        /// { type: 'belongsTo', model: 'Category', primaryKey: 'unique_id', foreignKey: 'cat_id' }
        /// ]
        /// });
        /// *
        /// Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'category_id')
        /// with our own settings. Usually this will not be needed.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region BelongsToConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class BelongsToConfig
    {
        public BelongsToConfig(){}
        /// <summary>
        /// The name of the foreign key on the owner model that links it to the associated
        /// model. Defaults to the lowercased name of the associated model plus "_id", e.g. an association with a
        /// model called Product would set up a product_id foreign key.
        /// *
        /// Ext.define('Order', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'date'],
        /// hasMany: 'Product'
        /// });
        /// *
        /// Ext.define('Product', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'order_id'], // refers to the id of the order that this product belongs to
        /// belongsTo: 'Group'
        /// });
        /// var product = new Product({
        /// id: 1,
        /// name: 'Product 1',
        /// order_id: 22
        /// }, 1);
        /// product.getOrder(); // Will make a call to the server asking for order_id 22
        /// *
        /// </summary>
        public JsString foreignKey{get;set;}
        /// <summary>
        /// The name of the getter function that will be added to the local model's prototype.
        /// Defaults to 'get' + the name of the foreign model, e.g. getCategory
        /// </summary>
        public JsString getterName{get;set;}
        /// <summary>
        /// The name of the setter function that will be added to the local model's prototype.
        /// Defaults to 'set' + the name of the foreign model, e.g. setCategory
        /// </summary>
        public JsString setterName{get;set;}
    }
    #endregion
    #region HasMany
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HasMany
    {
        public HasMany(){}
        public HasMany(HasManyConfig config){}
        /// <summary>
        /// @cfg {String} type The type configuration can be used when creating associations using a configuration object.
        /// Use 'hasMany' to create a HasMany association
        /// <pre><code>
        /// associations: [{
        /// type: 'hasMany',
        /// model: 'User'
        /// }]
        /// </code></pre>
        /// </summary>
        public HasMany(object config){}
        /// <summary>
        /// @private
        /// Creates a function that returns an Ext.data.Store which is configured to load a set of data filtered
        /// by the owner model's primary key - e.g. in a hasMany association where Group hasMany Users, this function
        /// returns a Store configured to return the filtered set of a single Group's Users.
        /// @return {Function} The store-generating function
        /// </summary>
        public JsAction createStore(){return null;}
        /// <summary>
        /// Read associated data
        /// @private
        /// @param {Ext.data.Model} record The record we're writing to
        /// @param {Ext.data.reader.Reader} reader The reader for the associated model
        /// @param {Object} associationData The raw associated data
        /// </summary>
        public void read(Model record, Reader reader, object associationData){}
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.association.HasMany
        /// @extends Ext.data.association.Association
        /// <p>Represents a one-to-many relationship between two models. Usually created indirectly via a model definition:</p>
        /// <pre><code>
        /// Ext.define('Product', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'id',      type: 'int'},
        /// {name: 'user_id', type: 'int'},
        /// {name: 'name',    type: 'string'}
        /// ]
        /// });
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'id',   type: 'int'},
        /// {name: 'name', type: 'string'}
        /// ],
        /// // we can use the hasMany shortcut on the model to create a hasMany association
        /// hasMany: {model: 'Product', name: 'products'}
        /// });
        /// </pre></code>
        /// *
        /// <p>Above we created Product and User models, and linked them by saying that a User hasMany Products. This gives
        /// us a new function on every User instance, in this case the function is called 'products' because that is the name
        /// we specified in the association configuration above.</p>
        /// <p>This new function returns a specialized {@link Ext.data.Store Store} which is automatically filtered to load
        /// only Products for the given model instance:</p>
        /// <pre><code>
        /// //first, we load up a User with id of 1
        /// var user = Ext.create('User', {id: 1, name: 'Ed'});
        /// //the user.products function was created automatically by the association and returns a {@link Ext.data.Store Store}
        /// //the created store is automatically scoped to the set of Products for the User with id of 1
        /// var products = user.products();
        /// //we still have all of the usual Store functions, for example it's easy to add a Product for this User
        /// products.add({
        /// name: 'Another Product'
        /// });
        /// //saves the changes to the store - this automatically sets the new Product's user_id to 1 before saving
        /// products.sync();
        /// </code></pre>
        /// <p>The new Store is only instantiated the first time you call products() to conserve memory and processing time,
        /// though calling products() a second time returns the same store instance.</p>
        /// <p><u>Custom filtering</u></p>
        /// <p>The Store is automatically furnished with a filter - by default this filter tells the store to only return
        /// records where the associated model's foreign key matches the owner model's primary key. For example, if a User
        /// with ID = 100 hasMany Products, the filter loads only Products with user_id == 100.</p>
        /// <p>Sometimes we want to filter by another field - for example in the case of a Twitter search application we may
        /// have models for Search and Tweet:</p>
        /// <pre><code>
        /// Ext.define('Search', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// 'id', 'query'
        /// ],
        /// hasMany: {
        /// model: 'Tweet',
        /// name : 'tweets',
        /// filterProperty: 'query'
        /// }
        /// });
        /// Ext.define('Tweet', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// 'id', 'text', 'from_user'
        /// ]
        /// });
        /// //returns a Store filtered by the filterProperty
        /// var store = new Search({query: 'Sencha Touch'}).tweets();
        /// </code></pre>
        /// <p>The tweets association above is filtered by the query property by setting the {@link #filterProperty}, and is
        /// equivalent to this:</p>
        /// <pre><code>
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'Tweet',
        /// filters: [
        /// {
        /// property: 'query',
        /// value   : 'Sencha Touch'
        /// }
        /// ]
        /// });
        /// </code></pre>
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.association.HasMany
        /// @extends Ext.data.association.Association
        /// <p>Represents a one-to-many relationship between two models. Usually created indirectly via a model definition:</p>
        /// <pre><code>
        /// Ext.define('Product', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'id',      type: 'int'},
        /// {name: 'user_id', type: 'int'},
        /// {name: 'name',    type: 'string'}
        /// ]
        /// });
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'id',   type: 'int'},
        /// {name: 'name', type: 'string'}
        /// ],
        /// // we can use the hasMany shortcut on the model to create a hasMany association
        /// hasMany: {model: 'Product', name: 'products'}
        /// });
        /// </pre></code>
        /// *
        /// <p>Above we created Product and User models, and linked them by saying that a User hasMany Products. This gives
        /// us a new function on every User instance, in this case the function is called 'products' because that is the name
        /// we specified in the association configuration above.</p>
        /// <p>This new function returns a specialized {@link Ext.data.Store Store} which is automatically filtered to load
        /// only Products for the given model instance:</p>
        /// <pre><code>
        /// //first, we load up a User with id of 1
        /// var user = Ext.create('User', {id: 1, name: 'Ed'});
        /// //the user.products function was created automatically by the association and returns a {@link Ext.data.Store Store}
        /// //the created store is automatically scoped to the set of Products for the User with id of 1
        /// var products = user.products();
        /// //we still have all of the usual Store functions, for example it's easy to add a Product for this User
        /// products.add({
        /// name: 'Another Product'
        /// });
        /// //saves the changes to the store - this automatically sets the new Product's user_id to 1 before saving
        /// products.sync();
        /// </code></pre>
        /// <p>The new Store is only instantiated the first time you call products() to conserve memory and processing time,
        /// though calling products() a second time returns the same store instance.</p>
        /// <p><u>Custom filtering</u></p>
        /// <p>The Store is automatically furnished with a filter - by default this filter tells the store to only return
        /// records where the associated model's foreign key matches the owner model's primary key. For example, if a User
        /// with ID = 100 hasMany Products, the filter loads only Products with user_id == 100.</p>
        /// <p>Sometimes we want to filter by another field - for example in the case of a Twitter search application we may
        /// have models for Search and Tweet:</p>
        /// <pre><code>
        /// Ext.define('Search', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// 'id', 'query'
        /// ],
        /// hasMany: {
        /// model: 'Tweet',
        /// name : 'tweets',
        /// filterProperty: 'query'
        /// }
        /// });
        /// Ext.define('Tweet', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// 'id', 'text', 'from_user'
        /// ]
        /// });
        /// //returns a Store filtered by the filterProperty
        /// var store = new Search({query: 'Sencha Touch'}).tweets();
        /// </code></pre>
        /// <p>The tweets association above is filtered by the query property by setting the {@link #filterProperty}, and is
        /// equivalent to this:</p>
        /// <pre><code>
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'Tweet',
        /// filters: [
        /// {
        /// property: 'query',
        /// value   : 'Sencha Touch'
        /// }
        /// ]
        /// });
        /// </code></pre>
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region HasManyConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class HasManyConfig
    {
        public HasManyConfig(){}
        /// <summary>
        /// True to automatically load the related store from a remote source when instantiated.
        /// Defaults to <tt>false</tt>.
        /// </summary>
        public bool autoLoad{get;set;}
        /// <summary>
        /// Optionally overrides the default filter that is set up on the associated Store. If
        /// this is not set, a filter is automatically created which filters the association based on the configured
        /// {@link #foreignKey}. See intro docs for more details. Defaults to undefined
        /// </summary>
        public JsString filterProperty{get;set;}
        /// <summary>
        /// The name of the foreign key on the associated model that links it to the owner
        /// model. Defaults to the lowercased name of the owner model plus "_id", e.g. an association with a where a
        /// model called Group hasMany Users would create 'group_id' as the foreign key. When the remote store is loaded,
        /// the store is automatically filtered so that only records with a matching foreign key are included in the
        /// resulting child store. This can be overridden by specifying the {@link #filterProperty}.
        /// <pre><code>
        /// Ext.define('Group', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name'],
        /// hasMany: 'User'
        /// });
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'group_id'], // refers to the id of the group that this user belongs to
        /// belongsTo: 'Group'
        /// });
        /// </code></pre>
        /// </summary>
        public JsString foreignKey{get;set;}
        /// <summary>
        /// The name of the function to create on the owner model to retrieve the child store.
        /// If not specified, the pluralized name of the child model is used.
        /// <pre><code>
        /// // This will create a users() method on any Group model instance
        /// Ext.define('Group', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name'],
        /// hasMany: 'User'
        /// });
        /// var group = new Group();
        /// console.log(group.users());
        /// // The method to retrieve the users will now be getUserList
        /// Ext.define('Group', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name'],
        /// hasMany: {model: 'User', name: 'getUserList'}
        /// });
        /// var group = new Group();
        /// console.log(group.getUserList());
        /// </code></pre>
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// Optional configuration object that will be passed to the generated Store. Defaults to
        /// undefined.
        /// </summary>
        public object storeConfig{get;set;}
    }
    #endregion
    #region HasOne
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HasOne
    {
        public HasOne(){}
        public HasOne(HasOneConfig config){}
        /// <summary>
        /// @cfg {String} type The type configuration can be used when creating associations using a configuration object.
        /// Use 'hasOne' to create a HasOne association.
        /// *
        /// associations: [{
        /// type: 'hasOne',
        /// model: 'Address'
        /// }]
        /// </summary>
        public HasOne(object config){}
        /// <summary>
        /// @private
        /// Returns a getter function to be placed on the owner model's prototype. We cache the loaded instance
        /// the first time it is loaded so that subsequent calls to the getter always receive the same reference.
        /// @return {Function} The getter function
        /// </summary>
        public JsAction createGetter(){return null;}
        /// <summary>
        /// @private
        /// Returns a setter function to be placed on the owner model's prototype
        /// @return {Function} The setter function
        /// </summary>
        public JsAction createSetter(){return null;}
        /// <summary>
        /// Read associated data
        /// @private
        /// @param {Ext.data.Model} record The record we're writing to
        /// @param {Ext.data.reader.Reader} reader The reader for the associated model
        /// @param {Object} associationData The raw associated data
        /// </summary>
        public void read(Model record, Reader reader, object associationData){}
        public JsString alias{get;set;}
        /// <summary>
        /// @class Ext.data.association.HasOne
        /// @extends Ext.data.association.Association
        /// Represents a one to one association with another model. The owner model is expected to have
        /// a foreign key which references the primary key of the associated model:
        /// *
        /// Ext.define('Person', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'id',   type: 'int' },
        /// { name: 'name', type: 'string' },
        /// { name: 'address_id', type: 'int'}
        /// ]
        /// });
        /// *
        /// Ext.define('Address', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'id',          type: 'int' },
        /// { name: 'number', type: 'string' },
        /// { name: 'street', type: 'string' },
        /// { name: 'city', type: 'string' },
        /// { name: 'zip', type: 'string' },
        /// ],
        /// // we can use the hasOne shortcut on the model to create a hasOne association
        /// associations: { type: 'hasOne', model: 'Address' }
        /// });
        /// *
        /// In the example above we have created models for People and Addresses, and linked them together
        /// by saying that each Person has a single Address. This automatically links each Person to an Address
        /// based on the Persons address_id, and provides new functions on the Person model:
        /// *
        /// ## Generated getter function
        /// *
        /// The first function that is added to the owner model is a getter function:
        /// *
        /// var person = new Person({
        /// id: 100,
        /// address_id: 20,
        /// name: 'John Smith'
        /// });
        /// *
        /// person.getAddress(function(address, operation) {
        /// // do something with the address object
        /// alert(address.get('id')); // alerts 20
        /// }, this);
        /// *
        /// The getAddress function was created on the Person model when we defined the association. This uses the
        /// Persons configured {@link Ext.data.proxy.Proxy proxy} to load the Address asynchronously, calling the provided
        /// callback when it has loaded.
        /// *
        /// The new getAddress function will also accept an object containing success, failure and callback properties
        /// - callback will always be called, success will only be called if the associated model was loaded successfully
        /// and failure will only be called if the associatied model could not be loaded:
        /// *
        /// person.getAddress({
        /// reload: true, // force a reload if the owner model is already cached
        /// callback: function(address, operation) {}, // a function that will always be called
        /// success : function(address, operation) {}, // a function that will only be called if the load succeeded
        /// failure : function(address, operation) {}, // a function that will only be called if the load did not succeed
        /// scope   : this // optionally pass in a scope object to execute the callbacks in
        /// });
        /// *
        /// In each case above the callbacks are called with two arguments - the associated model instance and the
        /// {@link Ext.data.Operation operation} object that was executed to load that instance. The Operation object is
        /// useful when the instance could not be loaded.
        /// Once the getter has been called on the model, it will be cached if the getter is called a second time. To
        /// force the model to reload, specify reload: true in the options object.
        /// *
        /// ## Generated setter function
        /// *
        /// The second generated function sets the associated model instance - if only a single argument is passed to
        /// the setter then the following two calls are identical:
        /// *
        /// // this call...
        /// person.setAddress(10);
        /// *
        /// // is equivalent to this call:
        /// person.set('address_id', 10);
        /// An instance of the owner model can also be passed as a parameter.
        /// *
        /// If we pass in a second argument, the model will be automatically saved and the second argument passed to
        /// the owner model's {@link Ext.data.Model#save save} method:
        /// *
        /// person.setAddress(10, function(address, operation) {
        /// // the address has been saved
        /// alert(address.get('address_id')); //now alerts 10
        /// });
        /// *
        /// //alternative syntax:
        /// person.setAddress(10, {
        /// callback: function(address, operation), // a function that will always be called
        /// success : function(address, operation), // a function that will only be called if the load succeeded
        /// failure : function(address, operation), // a function that will only be called if the load did not succeed
        /// scope   : this //optionally pass in a scope object to execute the callbacks in
        /// })
        /// *
        /// ## Customisation
        /// *
        /// Associations reflect on the models they are linking to automatically set up properties such as the
        /// {@link #primaryKey} and {@link #foreignKey}. These can alternatively be specified:
        /// *
        /// Ext.define('Person', {
        /// fields: [...],
        /// *
        /// associations: [
        /// { type: 'hasOne', model: 'Address', primaryKey: 'unique_id', foreignKey: 'addr_id' }
        /// ]
        /// });
        /// *
        /// Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'address_id')
        /// with our own settings. Usually this will not be needed.
        /// </summary>
        public JsString alternameClassName{get;set;}
        /// <summary>
        /// @class Ext.data.association.HasOne
        /// @extends Ext.data.association.Association
        /// Represents a one to one association with another model. The owner model is expected to have
        /// a foreign key which references the primary key of the associated model:
        /// *
        /// Ext.define('Person', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'id',   type: 'int' },
        /// { name: 'name', type: 'string' },
        /// { name: 'address_id', type: 'int'}
        /// ]
        /// });
        /// *
        /// Ext.define('Address', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// { name: 'id',          type: 'int' },
        /// { name: 'number', type: 'string' },
        /// { name: 'street', type: 'string' },
        /// { name: 'city', type: 'string' },
        /// { name: 'zip', type: 'string' },
        /// ],
        /// // we can use the hasOne shortcut on the model to create a hasOne association
        /// associations: { type: 'hasOne', model: 'Address' }
        /// });
        /// *
        /// In the example above we have created models for People and Addresses, and linked them together
        /// by saying that each Person has a single Address. This automatically links each Person to an Address
        /// based on the Persons address_id, and provides new functions on the Person model:
        /// *
        /// ## Generated getter function
        /// *
        /// The first function that is added to the owner model is a getter function:
        /// *
        /// var person = new Person({
        /// id: 100,
        /// address_id: 20,
        /// name: 'John Smith'
        /// });
        /// *
        /// person.getAddress(function(address, operation) {
        /// // do something with the address object
        /// alert(address.get('id')); // alerts 20
        /// }, this);
        /// *
        /// The getAddress function was created on the Person model when we defined the association. This uses the
        /// Persons configured {@link Ext.data.proxy.Proxy proxy} to load the Address asynchronously, calling the provided
        /// callback when it has loaded.
        /// *
        /// The new getAddress function will also accept an object containing success, failure and callback properties
        /// - callback will always be called, success will only be called if the associated model was loaded successfully
        /// and failure will only be called if the associatied model could not be loaded:
        /// *
        /// person.getAddress({
        /// reload: true, // force a reload if the owner model is already cached
        /// callback: function(address, operation) {}, // a function that will always be called
        /// success : function(address, operation) {}, // a function that will only be called if the load succeeded
        /// failure : function(address, operation) {}, // a function that will only be called if the load did not succeed
        /// scope   : this // optionally pass in a scope object to execute the callbacks in
        /// });
        /// *
        /// In each case above the callbacks are called with two arguments - the associated model instance and the
        /// {@link Ext.data.Operation operation} object that was executed to load that instance. The Operation object is
        /// useful when the instance could not be loaded.
        /// Once the getter has been called on the model, it will be cached if the getter is called a second time. To
        /// force the model to reload, specify reload: true in the options object.
        /// *
        /// ## Generated setter function
        /// *
        /// The second generated function sets the associated model instance - if only a single argument is passed to
        /// the setter then the following two calls are identical:
        /// *
        /// // this call...
        /// person.setAddress(10);
        /// *
        /// // is equivalent to this call:
        /// person.set('address_id', 10);
        /// An instance of the owner model can also be passed as a parameter.
        /// *
        /// If we pass in a second argument, the model will be automatically saved and the second argument passed to
        /// the owner model's {@link Ext.data.Model#save save} method:
        /// *
        /// person.setAddress(10, function(address, operation) {
        /// // the address has been saved
        /// alert(address.get('address_id')); //now alerts 10
        /// });
        /// *
        /// //alternative syntax:
        /// person.setAddress(10, {
        /// callback: function(address, operation), // a function that will always be called
        /// success : function(address, operation), // a function that will only be called if the load succeeded
        /// failure : function(address, operation), // a function that will only be called if the load did not succeed
        /// scope   : this //optionally pass in a scope object to execute the callbacks in
        /// })
        /// *
        /// ## Customisation
        /// *
        /// Associations reflect on the models they are linking to automatically set up properties such as the
        /// {@link #primaryKey} and {@link #foreignKey}. These can alternatively be specified:
        /// *
        /// Ext.define('Person', {
        /// fields: [...],
        /// *
        /// associations: [
        /// { type: 'hasOne', model: 'Address', primaryKey: 'unique_id', foreignKey: 'addr_id' }
        /// ]
        /// });
        /// *
        /// Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'address_id')
        /// with our own settings. Usually this will not be needed.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region HasOneConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class HasOneConfig
    {
        public HasOneConfig(){}
        /// <summary>
        /// The name of the foreign key on the owner model that links it to the associated
        /// model. Defaults to the lowercased name of the associated model plus "_id", e.g. an association with a
        /// model called Person would set up a address_id foreign key.
        /// *
        /// Ext.define('Person', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'address_id'], // refers to the id of the address object
        /// hasOne: 'Address'
        /// });
        /// *
        /// Ext.define('Address', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'number', 'street', 'city', 'zip'],
        /// belongsTo: 'Person'
        /// });
        /// var Person = new Person({
        /// id: 1,
        /// name: 'John Smith',
        /// address_id: 13
        /// }, 1);
        /// person.getAddress(); // Will make a call to the server asking for address_id 13
        /// *
        /// </summary>
        public JsString foreignKey{get;set;}
        /// <summary>
        /// The name of the getter function that will be added to the local model's prototype.
        /// Defaults to 'get' + the name of the foreign model, e.g. getAddress
        /// </summary>
        public JsString getterName{get;set;}
        /// <summary>
        /// The name of the setter function that will be added to the local model's prototype.
        /// Defaults to 'set' + the name of the foreign model, e.g. setAddress
        /// </summary>
        public JsString setterName{get;set;}
    }
    #endregion
}
#endregion
#region Ext.data.proxy
namespace Ext.data.proxy
{
    #region Ajax
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Ajax
    {
        public Ajax(Ext.data.proxy.AjaxConfig config){}
        public Ajax(){}
        /// <summary>
        /// @private
        /// TODO: This is currently identical to the JsonPProxy version except for the return function's signature. There is a lot
        /// of code duplication inside the returned function so we need to find a way to DRY this up.
        /// @param {Ext.data.Request} request The Request object
        /// @param {Ext.data.Operation} operation The Operation being executed
        /// @param {Function} callback The callback function to be called when the request completes. This is usually the callback
        /// passed to doRequest
        /// @param {Object} scope The scope in which to execute the callback function
        /// @return {Function} The callback function
        /// </summary>
        public JsAction createRequestCallback(Request request, Operation operation, JsAction callback, object scope){return null;}
        /// <summary>
        /// @ignore
        /// </summary>
        public void doRequest(object operation, object callback, object scope){}
        /// <summary>
        /// Returns the HTTP method name for a given request. By default this returns based on a lookup on
        /// {@link #actionMethods}.
        /// @param {Ext.data.Request} request The request object
        /// @return {String} The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE')
        /// </summary>
        public JsString getMethod(Request request){return null;}
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// AjaxProxy is one of the most widely-used ways of getting data into your application. It uses AJAX requests to load
        /// data from the server, usually to be placed into a {@link Ext.data.Store Store}. Let's take a look at a typical setup.
        /// Here we're going to set up a Store that has an AjaxProxy. To prepare, we'll also set up a {@link Ext.data.Model
        /// Model}:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email']
        /// });
        /// *
        /// //The Store contains the AjaxProxy as an inline configuration
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'ajax',
        /// url : 'users.json'
        /// }
        /// });
        /// *
        /// store.load();
        /// *
        /// Our example is going to load user data into a Store, so we start off by defining a {@link Ext.data.Model Model} with
        /// the fields that we expect the server to return. Next we set up the Store itself, along with a
        /// {@link Ext.data.Store#proxy proxy} configuration. This configuration was automatically turned into an
        /// Ext.data.proxy.Ajax instance, with the url we specified being passed into AjaxProxy's constructor.
        /// It's as if we'd done this:
        /// *
        /// new Ext.data.proxy.Ajax({
        /// url: 'users.json',
        /// model: 'User',
        /// reader: 'json'
        /// });
        /// *
        /// A couple of extra configurations appeared here - {@link #model} and {@link #reader}. These are set by default when we
        /// create the proxy via the Store - the Store already knows about the Model, and Proxy's default {@link
        /// Ext.data.reader.Reader Reader} is {@link Ext.data.reader.Json JsonReader}.
        /// *
        /// Now when we call store.load(), the AjaxProxy springs into action, making a request to the url we configured
        /// ('users.json' in this case). As we're performing a read, it sends a GET request to that url (see
        /// {@link #actionMethods} to customize this - by default any kind of read will be sent as a GET request and any kind of write
        /// will be sent as a POST request).
        /// *
        /// # Limitations
        /// *
        /// AjaxProxy cannot be used to retrieve data from other domains. If your application is running on http://domainA.com it
        /// cannot load data from http://domainB.com because browsers have a built-in security policy that prohibits domains
        /// talking to each other via AJAX.
        /// *
        /// If you need to read data from another domain and can't set up a proxy server (some software that runs on your own
        /// domain's web server and transparently forwards requests to http://domainB.com, making it look like they actually came
        /// from http://domainA.com), you can use {@link Ext.data.proxy.JsonP} and a technique known as JSON-P (JSON with
        /// Padding), which can help you get around the problem so long as the server on http://domainB.com is set up to support
        /// JSON-P responses. See {@link Ext.data.proxy.JsonP JsonPProxy}'s introduction docs for more details.
        /// *
        /// # Readers and Writers
        /// *
        /// AjaxProxy can be configured to use any type of {@link Ext.data.reader.Reader Reader} to decode the server's response.
        /// If no Reader is supplied, AjaxProxy will default to using a {@link Ext.data.reader.Json JsonReader}. Reader
        /// configuration can be passed in as a simple object, which the Proxy automatically turns into a {@link
        /// Ext.data.reader.Reader Reader} instance:
        /// *
        /// var proxy = new Ext.data.proxy.Ajax({
        /// model: 'User',
        /// reader: {
        /// type: 'xml',
        /// root: 'users'
        /// }
        /// });
        /// *
        /// proxy.getReader(); //returns an {@link Ext.data.reader.Xml XmlReader} instance based on the config we supplied
        /// *
        /// # Url generation
        /// *
        /// AjaxProxy automatically inserts any sorting, filtering, paging and grouping options into the url it generates for
        /// each request. These are controlled with the following configuration options:
        /// *
        /// - {@link #pageParam} - controls how the page number is sent to the server (see also {@link #startParam} and {@link #limitParam})
        /// - {@link #sortParam} - controls how sort information is sent to the server
        /// - {@link #groupParam} - controls how grouping information is sent to the server
        /// - {@link #filterParam} - controls how filter information is sent to the server
        /// *
        /// Each request sent by AjaxProxy is described by an {@link Ext.data.Operation Operation}. To see how we can customize
        /// the generated urls, let's say we're loading the Proxy with the following Operation:
        /// *
        /// var operation = new Ext.data.Operation({
        /// action: 'read',
        /// page  : 2
        /// });
        /// *
        /// Now we'll issue the request for this Operation by calling {@link #read}:
        /// *
        /// var proxy = new Ext.data.proxy.Ajax({
        /// url: '/users'
        /// });
        /// *
        /// proxy.read(operation); //GET /users?page=2
        /// *
        /// Easy enough - the Proxy just copied the page property from the Operation. We can customize how this page data is sent
        /// to the server:
        /// *
        /// var proxy = new Ext.data.proxy.Ajax({
        /// url: '/users',
        /// pagePage: 'pageNumber'
        /// });
        /// *
        /// proxy.read(operation); //GET /users?pageNumber=2
        /// *
        /// Alternatively, our Operation could have been configured to send start and limit parameters instead of page:
        /// *
        /// var operation = new Ext.data.Operation({
        /// action: 'read',
        /// start : 50,
        /// limit : 25
        /// });
        /// *
        /// var proxy = new Ext.data.proxy.Ajax({
        /// url: '/users'
        /// });
        /// *
        /// proxy.read(operation); //GET /users?start=50&limit;=25
        /// *
        /// Again we can customize this url:
        /// *
        /// var proxy = new Ext.data.proxy.Ajax({
        /// url: '/users',
        /// startParam: 'startIndex',
        /// limitParam: 'limitIndex'
        /// });
        /// *
        /// proxy.read(operation); //GET /users?startIndex=50&limitIndex;=25
        /// *
        /// AjaxProxy will also send sort and filter information to the server. Let's take a look at how this looks with a more
        /// expressive Operation object:
        /// *
        /// var operation = new Ext.data.Operation({
        /// action: 'read',
        /// sorters: [
        /// new Ext.util.Sorter({
        /// property : 'name',
        /// direction: 'ASC'
        /// }),
        /// new Ext.util.Sorter({
        /// property : 'age',
        /// direction: 'DESC'
        /// })
        /// ],
        /// filters: [
        /// new Ext.util.Filter({
        /// property: 'eyeColor',
        /// value   : 'brown'
        /// })
        /// ]
        /// });
        /// *
        /// This is the type of object that is generated internally when loading a {@link Ext.data.Store Store} with sorters and
        /// filters defined. By default the AjaxProxy will JSON encode the sorters and filters, resulting in something like this
        /// (note that the url is escaped before sending the request, but is left unescaped here for clarity):
        /// *
        /// var proxy = new Ext.data.proxy.Ajax({
        /// url: '/users'
        /// });
        /// *
        /// proxy.read(operation); //GET /users?sort=[{"property":"name","direction":"ASC"},{"property":"age","direction":"DESC"}]&filter;=[{"property":"eyeColor","value":"brown"}]
        /// *
        /// We can again customize how this is created by supplying a few configuration options. Let's say our server is set up
        /// to receive sorting information is a format like "sortBy=name#ASC,age#DESC". We can configure AjaxProxy to provide
        /// that format like this:
        /// *
        /// var proxy = new Ext.data.proxy.Ajax({
        /// url: '/users',
        /// sortParam: 'sortBy',
        /// filterParam: 'filterBy',
        /// *
        /// //our custom implementation of sorter encoding - turns our sorters into "name#ASC,age#DESC"
        /// encodeSorters: function(sorters) {
        /// var length   = sorters.length,
        /// sortStrs = [],
        /// sorter, i;
        /// *
        /// for (i = 0; i < length; i++) {
        /// sorter = sorters[i];
        /// *
        /// sortStrs[i] = sorter.property + '#' + sorter.direction
        /// }
        /// *
        /// return sortStrs.join(",");
        /// }
        /// });
        /// *
        /// proxy.read(operation); //GET /users?sortBy=name#ASC,age#DESC&filterBy;=[{"property":"eyeColor","value":"brown"}]
        /// *
        /// We can also provide a custom {@link #encodeFilters} function to encode our filters.
        /// *
        /// @constructor
        /// Note that if this HttpProxy is being used by a {@link Ext.data.Store Store}, then the Store's call to
        /// {@link Ext.data.Store#load load} will override any specified callback and params options. In this case, use the
        /// {@link Ext.data.Store Store}'s events to modify parameters, or react to loading events.
        /// *
        /// @param {Object} config (optional) Config object.
        /// If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make the request.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region AjaxConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AjaxConfig
    {
        public AjaxConfig(){}
        /// <summary>
        /// Any headers to add to the Ajax request. Defaults to undefined.
        /// </summary>
        public object headers{get;set;}
    }
    #endregion
    #region Client
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Client
    {
        public Client(){}
        /// <summary>
        /// Abstract function that must be implemented by each ClientProxy subclass. This should purge all record data
        /// from the client side storage, as well as removing any supporting data (such as lists of record IDs)
        /// </summary>
        public void clear(){}
        /// <summary>
        /// @author Ed Spencer
        /// Base class for any client-side storage. Used as a superclass for {@link Ext.data.proxy.Memory Memory} and
        /// {@link Ext.data.proxy.WebStorage Web Storage} proxies. Do not use directly, use one of the subclasses instead.
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// Base class for any client-side storage. Used as a superclass for {@link Ext.data.proxy.Memory Memory} and
        /// {@link Ext.data.proxy.WebStorage Web Storage} proxies. Do not use directly, use one of the subclasses instead.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Direct
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Direct
    {
        public Direct(){}
        public Direct(DirectConfig config){}
        /// <summary>
        /// Inherit docs. We don't apply any encoding here because
        /// all of the direct requests go out as jsonData
        /// </summary>
        public void applyEncoding(object value){}
        public void buildUrl(){}
        public Direct(object config){}
        public void createRequestCallback(object request, object operation, object callback, object scope){}
        public void doRequest(object operation, object callback, object scope){}
        public void extractResponseData(object response){}
        public void setException(object operation, object response){}
        public JsString alias{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {Object} extraParams
        /// Extra parameters that will be included on every read request. Individual requests with params
        /// of the same name will override these params when they are in conflict.
        /// </summary>
        public JsRegExp paramOrderRe{get;set;}
        /// <summary>
        /// @cfg {Boolean} paramsAsHash
        /// Send parameters as a collection of named arguments (defaults to true).
        /// Providing a {@link #paramOrder} nullifies this configuration.
        /// </summary>
        public bool paramsAsHash{get;set;}
    }
    #endregion
    #region DirectConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DirectConfig
    {
        public DirectConfig(){}
        /// <summary>
        /// The same as {@link Ext.data.proxy.Server#api}, however instead of providing urls, you should provide a direct
        /// function call.
        /// </summary>
        public object api{get;set;}
        /// <summary>
        /// Function to call when executing a request.  directFn is a simple alternative to defining the api configuration-parameter
        /// for Store's which will not implement a full CRUD api.
        /// </summary>
        public JsAction directFn{get;set;}
        /// <summary>
        /// Extra parameters that will be included on every read request. Individual requests with params
        /// of the same name will override these params when they are in conflict.
        /// </summary>
        public object extraParams{get;set;}
        /// <summary>
        /// Defaults to undefined. A list of params to be executed server side.  Specify the params in the order in
        /// which they must be executed on the server-side as either (1) an Array of String values, or (2) a String
        /// of params delimited by either whitespace, comma, or pipe. For example, any of the following would be
        /// acceptable:
        /// *
        /// paramOrder: ['param1','param2','param3']
        /// paramOrder: 'param1 param2 param3'
        /// paramOrder: 'param1,param2,param3'
        /// paramOrder: 'param1|param2|param'
        /// </summary>
        public object paramOrder{get;set;}
        /// <summary>
        /// Send parameters as a collection of named arguments (defaults to true).
        /// Providing a {@link #paramOrder} nullifies this configuration.
        /// </summary>
        public bool paramsAsHash{get;set;}
    }
    #endregion
    #region JsonP
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonP
    {
        public JsonP(JsonPConfig config){}
        /// <summary>
        /// Aborts the current server request if one is currently running
        /// </summary>
        public void abort(){}
        /// <summary>
        /// Generates a url based on a given Ext.data.Request object. Adds the params and callback function name to the url
        /// @param {Ext.data.Request} request The request object
        /// @return {String} The url
        /// </summary>
        public JsString buildUrl(Request request){return null;}
        /// <summary>
        /// @cfg {Boolean} autoAppendParams
        /// True to automatically append the request's params to the generated url. Defaults to true
        /// </summary>
        public JsonP(){}
        /// <summary>
        /// @private
        /// Creates and returns the function that is called when the request has completed. The returned function
        /// should accept a Response object, which contains the response to be read by the configured Reader.
        /// The third argument is the callback that should be called after the request has been completed and the Reader has decoded
        /// the response. This callback will typically be the callback passed by a store, e.g. in proxy.read(operation, theCallback, scope)
        /// theCallback refers to the callback argument received by this function.
        /// See {@link #doRequest} for details.
        /// @param {Ext.data.Request} request The Request object
        /// @param {Ext.data.Operation} operation The Operation being executed
        /// @param {Function} callback The callback function to be called when the request completes. This is usually the callback
        /// passed to doRequest
        /// @param {Object} scope The scope in which to execute the callback function
        /// @return {Function} The callback function
        /// </summary>
        public JsAction createRequestCallback(Request request, Operation operation, JsAction callback, object scope){return null;}
        public void destroy(){}
        /// <summary>
        /// @private
        /// Performs the read request to the remote domain. JsonPProxy does not actually create an Ajax request,
        /// instead we write out a <script> tag based on the configuration of the internal Ext.data.Request object
        /// @param {Ext.data.Operation} operation The {@link Ext.data.Operation Operation} object to execute
        /// @param {Function} callback A callback function to execute when the Operation has been completed
        /// @param {Object} scope The scope to execute the callback in
        /// </summary>
        public void doRequest(Operation operation, JsAction callback, object scope){}
        /// <summary>
        /// Encodes an array of records into a string suitable to be appended to the script src url. This is broken out into
        /// its own function so that it can be easily overridden.
        /// @param {Ext.data.Model[]} records The records array
        /// @return {String} The encoded records string
        /// </summary>
        public JsString encodeRecords(object records){return null;}
        public void setException(object operation, object response){}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// JsonPProxy is useful when you need to load data from a domain other than the one your application is running on. If
        /// your application is running on http://domainA.com it cannot use {@link Ext.data.proxy.Ajax Ajax} to load its data
        /// from http://domainB.com because cross-domain ajax requests are prohibited by the browser.
        /// *
        /// We can get around this using a JsonPProxy. JsonPProxy injects a `<script>` tag into the DOM whenever an AJAX request
        /// would usually be made. Let's say we want to load data from http://domainB.com/users - the script tag that would be
        /// injected might look like this:
        /// *
        /// <script src="http://domainB.com/users?callback=someCallback"></script>
        /// *
        /// When we inject the tag above, the browser makes a request to that url and includes the response as if it was any
        /// other type of JavaScript include. By passing a callback in the url above, we're telling domainB's server that we want
        /// to be notified when the result comes in and that it should call our callback function with the data it sends back. So
        /// long as the server formats the response to look like this, everything will work:
        /// *
        /// someCallback({
        /// users: [
        /// {
        /// id: 1,
        /// name: "Ed Spencer",
        /// email: "ed@sencha.com"
        /// }
        /// ]
        /// });
        /// *
        /// As soon as the script finishes loading, the 'someCallback' function that we passed in the url is called with the JSON
        /// object that the server returned.
        /// *
        /// JsonPProxy takes care of all of this automatically. It formats the url you pass, adding the callback parameter
        /// automatically. It even creates a temporary callback function, waits for it to be called and then puts the data into
        /// the Proxy making it look just like you loaded it through a normal {@link Ext.data.proxy.Ajax AjaxProxy}. Here's how
        /// we might set that up:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email']
        /// });
        /// *
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'jsonp',
        /// url : 'http://domainB.com/users'
        /// }
        /// });
        /// *
        /// store.load();
        /// *
        /// That's all we need to do - JsonPProxy takes care of the rest. In this case the Proxy will have injected a script tag
        /// like this:
        /// *
        /// <script src="http://domainB.com/users?callback=callback1"></script>
        /// *
        /// # Customization
        /// *
        /// This script tag can be customized using the {@link #callbackKey} configuration. For example:
        /// *
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'jsonp',
        /// url : 'http://domainB.com/users',
        /// callbackKey: 'theCallbackFunction'
        /// }
        /// });
        /// *
        /// store.load();
        /// *
        /// Would inject a script tag like this:
        /// *
        /// <script src="http://domainB.com/users?theCallbackFunction=callback1"></script>
        /// *
        /// # Implementing on the server side
        /// *
        /// The remote server side needs to be configured to return data in this format. Here are suggestions for how you might
        /// achieve this using Java, PHP and ASP.net:
        /// *
        /// Java:
        /// *
        /// boolean jsonP = false;
        /// String cb = request.getParameter("callback");
        /// if (cb != null) {
        /// jsonP = true;
        /// response.setContentType("text/javascript");
        /// } else {
        /// response.setContentType("application/x-json");
        /// }
        /// Writer out = response.getWriter();
        /// if (jsonP) {
        /// out.write(cb + "(");
        /// }
        /// out.print(dataBlock.toJsonString());
        /// if (jsonP) {
        /// out.write(");");
        /// }
        /// *
        /// PHP:
        /// *
        /// $callback = $_REQUEST['callback'];
        /// *
        /// // Create the output object.
        /// $output = array('a' => 'Apple', 'b' => 'Banana');
        /// *
        /// //start output
        /// if ($callback) {
        /// header('Content-Type: text/javascript');
        /// echo $callback . '(' . json_encode($output) . ');';
        /// } else {
        /// header('Content-Type: application/x-json');
        /// echo json_encode($output);
        /// }
        /// *
        /// ASP.net:
        /// *
        /// String jsonString = "{success: true}";
        /// String cb = Request.Params.Get("callback");
        /// String responseString = "";
        /// if (!String.IsNullOrEmpty(cb)) {
        /// responseString = cb + "(" + jsonString + ")";
        /// } else {
        /// responseString = jsonString;
        /// }
        /// Response.Write(responseString);
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoAppendParams
        /// True to automatically append the request's params to the generated url. Defaults to true
        /// </summary>
        public bool autoAppendParams{get;set;}
        /// <summary>
        /// @cfg {String} callbackKey
        /// See {@link Ext.data.JsonP#callbackKey}.
        /// </summary>
        public JsString callbackKey{get;set;}
        public JsString defaultWriterType{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// JsonPProxy is useful when you need to load data from a domain other than the one your application is running on. If
        /// your application is running on http://domainA.com it cannot use {@link Ext.data.proxy.Ajax Ajax} to load its data
        /// from http://domainB.com because cross-domain ajax requests are prohibited by the browser.
        /// *
        /// We can get around this using a JsonPProxy. JsonPProxy injects a `<script>` tag into the DOM whenever an AJAX request
        /// would usually be made. Let's say we want to load data from http://domainB.com/users - the script tag that would be
        /// injected might look like this:
        /// *
        /// <script src="http://domainB.com/users?callback=someCallback"></script>
        /// *
        /// When we inject the tag above, the browser makes a request to that url and includes the response as if it was any
        /// other type of JavaScript include. By passing a callback in the url above, we're telling domainB's server that we want
        /// to be notified when the result comes in and that it should call our callback function with the data it sends back. So
        /// long as the server formats the response to look like this, everything will work:
        /// *
        /// someCallback({
        /// users: [
        /// {
        /// id: 1,
        /// name: "Ed Spencer",
        /// email: "ed@sencha.com"
        /// }
        /// ]
        /// });
        /// *
        /// As soon as the script finishes loading, the 'someCallback' function that we passed in the url is called with the JSON
        /// object that the server returned.
        /// *
        /// JsonPProxy takes care of all of this automatically. It formats the url you pass, adding the callback parameter
        /// automatically. It even creates a temporary callback function, waits for it to be called and then puts the data into
        /// the Proxy making it look just like you loaded it through a normal {@link Ext.data.proxy.Ajax AjaxProxy}. Here's how
        /// we might set that up:
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email']
        /// });
        /// *
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'jsonp',
        /// url : 'http://domainB.com/users'
        /// }
        /// });
        /// *
        /// store.load();
        /// *
        /// That's all we need to do - JsonPProxy takes care of the rest. In this case the Proxy will have injected a script tag
        /// like this:
        /// *
        /// <script src="http://domainB.com/users?callback=callback1"></script>
        /// *
        /// # Customization
        /// *
        /// This script tag can be customized using the {@link #callbackKey} configuration. For example:
        /// *
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'jsonp',
        /// url : 'http://domainB.com/users',
        /// callbackKey: 'theCallbackFunction'
        /// }
        /// });
        /// *
        /// store.load();
        /// *
        /// Would inject a script tag like this:
        /// *
        /// <script src="http://domainB.com/users?theCallbackFunction=callback1"></script>
        /// *
        /// # Implementing on the server side
        /// *
        /// The remote server side needs to be configured to return data in this format. Here are suggestions for how you might
        /// achieve this using Java, PHP and ASP.net:
        /// *
        /// Java:
        /// *
        /// boolean jsonP = false;
        /// String cb = request.getParameter("callback");
        /// if (cb != null) {
        /// jsonP = true;
        /// response.setContentType("text/javascript");
        /// } else {
        /// response.setContentType("application/x-json");
        /// }
        /// Writer out = response.getWriter();
        /// if (jsonP) {
        /// out.write(cb + "(");
        /// }
        /// out.print(dataBlock.toJsonString());
        /// if (jsonP) {
        /// out.write(");");
        /// }
        /// *
        /// PHP:
        /// *
        /// $callback = $_REQUEST['callback'];
        /// *
        /// // Create the output object.
        /// $output = array('a' => 'Apple', 'b' => 'Banana');
        /// *
        /// //start output
        /// if ($callback) {
        /// header('Content-Type: text/javascript');
        /// echo $callback . '(' . json_encode($output) . ');';
        /// } else {
        /// header('Content-Type: application/x-json');
        /// echo json_encode($output);
        /// }
        /// *
        /// ASP.net:
        /// *
        /// String jsonString = "{success: true}";
        /// String cb = Request.Params.Get("callback");
        /// String responseString = "";
        /// if (!String.IsNullOrEmpty(cb)) {
        /// responseString = cb + "(" + jsonString + ")";
        /// } else {
        /// responseString = jsonString;
        /// }
        /// Response.Write(responseString);
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {String} recordParam
        /// The param name to use when passing records to the server (e.g. 'records=someEncodedRecordString'). Defaults to
        /// 'records'
        /// </summary>
        public JsString recordParam{get;set;}
    }
    #endregion
    #region JsonPConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class JsonPConfig
    {
        public JsonPConfig(){}
        /// <summary>
        /// True to automatically append the request's params to the generated url. Defaults to true
        /// </summary>
        public bool autoAppendParams{get;set;}
        /// <summary>
        /// See {@link Ext.data.JsonP#callbackKey}.
        /// </summary>
        public JsString callbackKey{get;set;}
        /// <summary>
        /// The param name to use when passing records to the server (e.g. 'records=someEncodedRecordString'). Defaults to
        /// 'records'
        /// </summary>
        public JsString recordParam{get;set;}
    }
    #endregion
    #region LocalStorage
    [JsType(JsMode.Prototype, Export=false)]
    public partial class LocalStorage
    {
        public LocalStorage(){}
        public void getStorageObject(){}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// The LocalStorageProxy uses the new HTML5 localStorage API to save {@link Ext.data.Model Model} data locally on the
        /// client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so
        /// LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.
        /// *
        /// localStorage is extremely useful for saving user-specific information without needing to build server-side
        /// infrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's
        /// searches locally so they can easily perform a saved search again later. We'd start by creating a Search model:
        /// *
        /// Ext.define('Search', {
        /// fields: ['id', 'query'],
        /// extend: 'Ext.data.Model',
        /// proxy: {
        /// type: 'localstorage',
        /// id  : 'twitter-Searches'
        /// }
        /// });
        /// *
        /// Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we need to
        /// pass to the LocalStorage proxy is an {@link #id}. This is important as it separates the Model data in this Proxy from
        /// all others. The localStorage API puts all data into a single shared namespace, so by setting an id we enable
        /// LocalStorageProxy to manage the saved Search data.
        /// *
        /// Saving our data into localStorage is easy and would usually be done with a {@link Ext.data.Store Store}:
        /// *
        /// //our Store automatically picks up the LocalStorageProxy defined on the Search model
        /// var store = Ext.create('Ext.data.Store', {
        /// model: "Search"
        /// });
        /// *
        /// //loads any existing Search data from localStorage
        /// store.load();
        /// *
        /// //now add some Searches
        /// store.add({query: 'Sencha Touch'});
        /// store.add({query: 'Ext JS'});
        /// *
        /// //finally, save our Search data to localStorage
        /// store.sync();
        /// *
        /// The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model data
        /// and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:
        /// *
        /// var search = Ext.create('Search', {query: 'Sencha Animator'});
        /// *
        /// //uses the configured LocalStorageProxy to save the new Search to localStorage
        /// search.save();
        /// *
        /// # Limitations
        /// *
        /// If this proxy is used in a browser where local storage is not supported, the constructor will throw an error. A local
        /// storage proxy requires a unique ID which is used as a key in which all record data are stored in the local storage
        /// object.
        /// *
        /// It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided but the
        /// attached store has a storeId, the storeId will be used. If neither option is presented the proxy will throw an error.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// The LocalStorageProxy uses the new HTML5 localStorage API to save {@link Ext.data.Model Model} data locally on the
        /// client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so
        /// LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.
        /// *
        /// localStorage is extremely useful for saving user-specific information without needing to build server-side
        /// infrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's
        /// searches locally so they can easily perform a saved search again later. We'd start by creating a Search model:
        /// *
        /// Ext.define('Search', {
        /// fields: ['id', 'query'],
        /// extend: 'Ext.data.Model',
        /// proxy: {
        /// type: 'localstorage',
        /// id  : 'twitter-Searches'
        /// }
        /// });
        /// *
        /// Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we need to
        /// pass to the LocalStorage proxy is an {@link #id}. This is important as it separates the Model data in this Proxy from
        /// all others. The localStorage API puts all data into a single shared namespace, so by setting an id we enable
        /// LocalStorageProxy to manage the saved Search data.
        /// *
        /// Saving our data into localStorage is easy and would usually be done with a {@link Ext.data.Store Store}:
        /// *
        /// //our Store automatically picks up the LocalStorageProxy defined on the Search model
        /// var store = Ext.create('Ext.data.Store', {
        /// model: "Search"
        /// });
        /// *
        /// //loads any existing Search data from localStorage
        /// store.load();
        /// *
        /// //now add some Searches
        /// store.add({query: 'Sencha Touch'});
        /// store.add({query: 'Ext JS'});
        /// *
        /// //finally, save our Search data to localStorage
        /// store.sync();
        /// *
        /// The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model data
        /// and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:
        /// *
        /// var search = Ext.create('Search', {query: 'Sencha Animator'});
        /// *
        /// //uses the configured LocalStorageProxy to save the new Search to localStorage
        /// search.save();
        /// *
        /// # Limitations
        /// *
        /// If this proxy is used in a browser where local storage is not supported, the constructor will throw an error. A local
        /// storage proxy requires a unique ID which is used as a key in which all record data are stored in the local storage
        /// object.
        /// *
        /// It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided but the
        /// attached store has a storeId, the storeId will be used. If neither option is presented the proxy will throw an error.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Memory
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Memory
    {
        public Memory(){}
        /// <summary>
        /// @cfg {Ext.data.Model[]} data
        /// Optional array of Records to load into the Proxy
        /// </summary>
        public Memory(object config){}
        /// <summary>
        /// Reads data from the configured {@link #data} object. Uses the Proxy's {@link #reader}, if present.
        /// @param {Ext.data.Operation} operation The read Operation
        /// @param {Function} callback The callback to call when reading has completed
        /// @param {Object} scope The scope to call the callback function in
        /// </summary>
        public void read(Operation operation, JsAction callback, object scope){}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on
        /// every page refresh.
        /// *
        /// Usually this Proxy isn't used directly, serving instead as a helper to a {@link Ext.data.Store Store} where a reader
        /// is required to load data. For example, say we have a Store for a User model and have some inline data we want to
        /// load, but this data isn't in quite the right format: we can use a MemoryProxy with a JsonReader to read it into our
        /// Store:
        /// *
        /// //this is the model we will be using in the store
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'id',    type: 'int'},
        /// {name: 'name',  type: 'string'},
        /// {name: 'phone', type: 'string', mapping: 'phoneNumber'}
        /// ]
        /// });
        /// *
        /// //this data does not line up to our model fields - the phone field is called phoneNumber
        /// var data = {
        /// users: [
        /// {
        /// id: 1,
        /// name: 'Ed Spencer',
        /// phoneNumber: '555 1234'
        /// },
        /// {
        /// id: 2,
        /// name: 'Abe Elias',
        /// phoneNumber: '666 1234'
        /// }
        /// ]
        /// };
        /// *
        /// //note how we set the 'root' in the reader to match the data structure above
        /// var store = Ext.create('Ext.data.Store', {
        /// autoLoad: true,
        /// model: 'User',
        /// data : data,
        /// proxy: {
        /// type: 'memory',
        /// reader: {
        /// type: 'json',
        /// root: 'users'
        /// }
        /// }
        /// });
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on
        /// every page refresh.
        /// *
        /// Usually this Proxy isn't used directly, serving instead as a helper to a {@link Ext.data.Store Store} where a reader
        /// is required to load data. For example, say we have a Store for a User model and have some inline data we want to
        /// load, but this data isn't in quite the right format: we can use a MemoryProxy with a JsonReader to read it into our
        /// Store:
        /// *
        /// //this is the model we will be using in the store
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// {name: 'id',    type: 'int'},
        /// {name: 'name',  type: 'string'},
        /// {name: 'phone', type: 'string', mapping: 'phoneNumber'}
        /// ]
        /// });
        /// *
        /// //this data does not line up to our model fields - the phone field is called phoneNumber
        /// var data = {
        /// users: [
        /// {
        /// id: 1,
        /// name: 'Ed Spencer',
        /// phoneNumber: '555 1234'
        /// },
        /// {
        /// id: 2,
        /// name: 'Abe Elias',
        /// phoneNumber: '666 1234'
        /// }
        /// ]
        /// };
        /// *
        /// //note how we set the 'root' in the reader to match the data structure above
        /// var store = Ext.create('Ext.data.Store', {
        /// autoLoad: true,
        /// model: 'User',
        /// data : data,
        /// proxy: {
        /// type: 'memory',
        /// reader: {
        /// type: 'json',
        /// root: 'users'
        /// }
        /// }
        /// });
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Proxy
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Proxy
    {
        public Proxy(){}
        public Proxy(ProxyConfig config){}
        /// <summary>
        /// Performs a batch of {@link Ext.data.Operation Operations}, in the order specified by {@link #batchOrder}. Used
        /// internally by {@link Ext.data.Store}'s {@link Ext.data.Store#sync sync} method. Example usage:
        /// *
        /// myProxy.batch({
        /// create : [myModel1, myModel2],
        /// update : [myModel3],
        /// destroy: [myModel4, myModel5]
        /// });
        /// *
        /// Where the myModel* above are {@link Ext.data.Model Model} instances - in this case 1 and 2 are new instances and
        /// have not been saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been
        /// saved but should now be destroyed.
        /// *
        /// @param {Object} operations Object containing the Model instances to act upon, keyed by action name
        /// @param {Object} listeners (optional) listeners object passed straight through to the Batch -
        /// see {@link Ext.data.Batch}
        /// @return {Ext.data.Batch} The newly created Ext.data.Batch object
        /// </summary>
        public Batch batch(object operations, object listeners){return null;}
        /// <summary>
        /// Creates the Proxy
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Proxy(object config){}
        /// <summary>
        /// Returns the model attached to this Proxy
        /// @return {Ext.data.Model} The model
        /// </summary>
        public Model getModel(){return null;}
        /// <summary>
        /// Returns the reader currently attached to this proxy instance
        /// @return {Ext.data.reader.Reader} The Reader instance
        /// </summary>
        public Reader getReader(){return null;}
        /// <summary>
        /// Returns the writer currently attached to this proxy instance
        /// @return {Ext.data.writer.Writer} The Writer instance
        /// </summary>
        public Ext.data.writer.Writer getWriter(){return null;}
        public void onMetaChange(object meta){}
        /// <summary>
        /// Sets the model associated with this proxy. This will only usually be called by a Store
        /// *
        /// @param {String/Ext.data.Model} model The new model. Can be either the model name string,
        /// or a reference to the model's constructor
        /// @param {Boolean} setOnStore Sets the new model on the associated Store, if one is present
        /// </summary>
        public void setModel(object model, bool setOnStore){}
        /// <summary>
        /// Sets the Proxy's Reader by string, config object or Reader instance
        /// *
        /// @param {String/Object/Ext.data.reader.Reader} reader The new Reader, which can be either a type string,
        /// a configuration object or an Ext.data.reader.Reader instance
        /// @return {Ext.data.reader.Reader} The attached Reader object
        /// </summary>
        public Reader setReader(object reader){return null;}
        /// <summary>
        /// Sets the Proxy's Writer by string, config object or Writer instance
        /// *
        /// @param {String/Object/Ext.data.writer.Writer} writer The new Writer, which can be either a type string,
        /// a configuration object or an Ext.data.writer.Writer instance
        /// @return {Ext.data.writer.Writer} The attached Writer object
        /// </summary>
        public Ext.data.writer.Writer setWriter(object writer){return null;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// Proxies are used by {@link Ext.data.Store Stores} to handle the loading and saving of {@link Ext.data.Model Model}
        /// data. Usually developers will not need to create or interact with proxies directly.
        /// *
        /// # Types of Proxy
        /// *
        /// There are two main types of Proxy - {@link Ext.data.proxy.Client Client} and {@link Ext.data.proxy.Server Server}.
        /// The Client proxies save their data locally and include the following subclasses:
        /// *
        /// - {@link Ext.data.proxy.LocalStorage LocalStorageProxy} - saves its data to localStorage if the browser supports it
        /// - {@link Ext.data.proxy.SessionStorage SessionStorageProxy} - saves its data to sessionStorage if the browsers supports it
        /// - {@link Ext.data.proxy.Memory MemoryProxy} - holds data in memory only, any data is lost when the page is refreshed
        /// *
        /// The Server proxies save their data by sending requests to some remote server. These proxies include:
        /// *
        /// - {@link Ext.data.proxy.Ajax Ajax} - sends requests to a server on the same domain
        /// - {@link Ext.data.proxy.JsonP JsonP} - uses JSON-P to send requests to a server on a different domain
        /// - {@link Ext.data.proxy.Direct Direct} - uses {@link Ext.direct.Manager} to send requests
        /// *
        /// Proxies operate on the principle that all operations performed are either Create, Read, Update or Delete. These four
        /// operations are mapped to the methods {@link #create}, {@link #read}, {@link #update} and {@link #destroy}
        /// respectively. Each Proxy subclass implements these functions.
        /// *
        /// The CRUD methods each expect an {@link Ext.data.Operation Operation} object as the sole argument. The Operation
        /// encapsulates information about the action the Store wishes to perform, the {@link Ext.data.Model model} instances
        /// that are to be modified, etc. See the {@link Ext.data.Operation Operation} documentation for more details. Each CRUD
        /// method also accepts a callback function to be called asynchronously on completion.
        /// *
        /// Proxies also support batching of Operations via a {@link Ext.data.Batch batch} object, invoked by the {@link #batch}
        /// method.
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @cfg {Boolean} batchActions
        /// True to batch actions of a particular type when synchronizing the store. Defaults to true.
        /// </summary>
        public bool batchActions{get;set;}
        /// <summary>
        /// @cfg {String} batchOrder
        /// Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this to set a different
        /// order for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'.
        /// </summary>
        public JsString batchOrder{get;set;}
        /// <summary>
        /// @cfg {String} defaultReaderType
        /// The default registered reader type. Defaults to 'json'.
        /// @private
        /// </summary>
        public JsString defaultReaderType{get;set;}
        /// <summary>
        /// @cfg {String} defaultWriterType
        /// The default registered writer type. Defaults to 'json'.
        /// @private
        /// </summary>
        public JsString defaultWriterType{get;set;}
        /// <summary>
        /// @cfg {Object/String/Ext.data.writer.Writer} writer
        /// The Ext.data.writer.Writer to use to encode any request sent to the server or saved to client. This can either be
        /// a Writer instance, a config object or just a valid Writer type name (e.g. 'json', 'xml').
        /// </summary>
        public bool isProxy{get;set;}
        /// <summary>
        /// Returns the model attached to this Proxy
        /// @return {Ext.data.Model} The model
        /// </summary>
        [JsProperty]
        public Model Model{[JsMethod(Name="getModel")]get;private set;}
        /// <summary>
        /// Sets the Proxy's Reader by string, config object or Reader instance
        /// *
        /// @param {String/Object/Ext.data.reader.Reader} reader The new Reader, which can be either a type string,
        /// a configuration object or an Ext.data.reader.Reader instance
        /// @return {Ext.data.reader.Reader} The attached Reader object
        /// Returns the reader currently attached to this proxy instance
        /// @return {Ext.data.reader.Reader} The Reader instance
        /// </summary>
        [JsProperty]
        public object Reader{[JsMethod(Name="getReader")]get;[JsMethod(Name="setReader")]set;}
        /// <summary>
        /// Sets the Proxy's Writer by string, config object or Writer instance
        /// *
        /// @param {String/Object/Ext.data.writer.Writer} writer The new Writer, which can be either a type string,
        /// a configuration object or an Ext.data.writer.Writer instance
        /// @return {Ext.data.writer.Writer} The attached Writer object
        /// Returns the writer currently attached to this proxy instance
        /// @return {Ext.data.writer.Writer} The Writer instance
        /// </summary>
        [JsProperty]
        public object Writer{[JsMethod(Name="getWriter")]get;[JsMethod(Name="setWriter")]set;}
    }
    #endregion
    #region ProxyConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ProxyConfig
    {
        public ProxyConfig(){}
        /// <summary>
        /// True to batch actions of a particular type when synchronizing the store. Defaults to true.
        /// </summary>
        public bool batchActions{get;set;}
        /// <summary>
        /// Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this to set a different
        /// order for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'.
        /// </summary>
        public JsString batchOrder{get;set;}
        /// <summary>
        /// The default registered reader type. Defaults to 'json'.
        /// @private
        /// </summary>
        public JsString defaultReaderType{get;set;}
        /// <summary>
        /// The default registered writer type. Defaults to 'json'.
        /// @private
        /// </summary>
        public JsString defaultWriterType{get;set;}
        /// <summary>
        /// The name of the Model to tie to this Proxy. Can be either the string name of the Model, or a reference to the
        /// Model constructor. Required.
        /// </summary>
        public object model{get;set;}
        /// <summary>
        /// The Ext.data.reader.Reader to use to decode the server's response or data read from client. This can either be a
        /// Reader instance, a config object or just a valid Reader type name (e.g. 'json', 'xml').
        /// </summary>
        public object reader{get;set;}
        /// <summary>
        /// The Ext.data.writer.Writer to use to encode any request sent to the server or saved to client. This can either be
        /// a Writer instance, a config object or just a valid Writer type name (e.g. 'json', 'xml').
        /// </summary>
        public object writer{get;set;}
    }
    #endregion
    #region Rest
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Rest
    {
        public Rest(RestConfig config){}
        public Rest(){}
        /// <summary>
        /// Specialized version of buildUrl that incorporates the {@link #appendId} and {@link #format} options into the
        /// generated url. Override this to provide further customizations, but remember to call the superclass buildUrl so
        /// that additional parameters like the cache buster string are appended.
        /// @param {Object} request
        /// </summary>
        public void buildUrl(object request){}
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// RestProxy is a specialization of the {@link Ext.data.proxy.Ajax AjaxProxy} which simply maps the four actions
        /// (create, read, update and destroy) to RESTful HTTP verbs. For example, let's set up a {@link Ext.data.Model Model}
        /// with an inline RestProxy
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email'],
        /// *
        /// proxy: {
        /// type: 'rest',
        /// url : '/users'
        /// }
        /// });
        /// *
        /// Now we can create a new User instance and save it via the RestProxy. Doing this will cause the Proxy to send a POST
        /// request to '/users':
        /// *
        /// var user = Ext.create('User', {name: 'Ed Spencer', email: 'ed@sencha.com'});
        /// *
        /// user.save(); //POST /users
        /// *
        /// Let's expand this a little and provide a callback for the {@link Ext.data.Model#save} call to update the Model once
        /// it has been created. We'll assume the creation went successfully and that the server gave this user an ID of 123:
        /// *
        /// user.save({
        /// success: function(user) {
        /// user.set('name', 'Khan Noonien Singh');
        /// *
        /// user.save(); //PUT /users/123
        /// }
        /// });
        /// *
        /// Now that we're no longer creating a new Model instance, the request method is changed to an HTTP PUT, targeting the
        /// relevant url for that user. Now let's delete this user, which will use the DELETE method:
        /// *
        /// user.destroy(); //DELETE /users/123
        /// *
        /// Finally, when we perform a load of a Model or Store, RestProxy will use the GET method:
        /// *
        /// //1. Load via Store
        /// *
        /// //the Store automatically picks up the Proxy from the User model
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User'
        /// });
        /// *
        /// store.load(); //GET /users
        /// *
        /// //2. Load directly from the Model
        /// *
        /// //GET /users/123
        /// Ext.ModelManager.getModel('User').load(123, {
        /// success: function(user) {
        /// console.log(user.getId()); //outputs 123
        /// }
        /// });
        /// *
        /// # Url generation
        /// *
        /// RestProxy is able to automatically generate the urls above based on two configuration options - {@link #appendId} and
        /// {@link #format}. If appendId is true (it is by default) then RestProxy will automatically append the ID of the Model
        /// instance in question to the configured url, resulting in the '/users/123' that we saw above.
        /// *
        /// If the request is not for a specific Model instance (e.g. loading a Store), the url is not appended with an id.
        /// RestProxy will automatically insert a '/' before the ID if one is not already present.
        /// *
        /// new Ext.data.proxy.Rest({
        /// url: '/users',
        /// appendId: true //default
        /// });
        /// *
        /// // Collection url: /users
        /// // Instance url  : /users/123
        /// *
        /// RestProxy can also optionally append a format string to the end of any generated url:
        /// *
        /// new Ext.data.proxy.Rest({
        /// url: '/users',
        /// format: 'json'
        /// });
        /// *
        /// // Collection url: /users.json
        /// // Instance url  : /users/123.json
        /// *
        /// If further customization is needed, simply implement the {@link #buildUrl} method and add your custom generated url
        /// onto the {@link Ext.data.Request Request} object that is passed to buildUrl. See [RestProxy's implementation][1] for
        /// an example of how to achieve this.
        /// *
        /// Note that RestProxy inherits from {@link Ext.data.proxy.Ajax AjaxProxy}, which already injects all of the sorter,
        /// filter, group and paging options into the generated url. See the {@link Ext.data.proxy.Ajax AjaxProxy docs} for more
        /// details.
        /// *
        /// [1]: source/RestProxy.html#method-Ext.data.proxy.Rest-buildUrl
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @cfg {Boolean} appendId
        /// True to automatically append the ID of a Model instance when performing a request based on that single instance.
        /// See RestProxy intro docs for more details. Defaults to true.
        /// </summary>
        public bool appendId{get;set;}
        /// <summary>
        /// @cfg {Boolean} batchActions
        /// True to batch actions of a particular type when synchronizing the store. Defaults to false.
        /// </summary>
        public bool batchActions{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// RestProxy is a specialization of the {@link Ext.data.proxy.Ajax AjaxProxy} which simply maps the four actions
        /// (create, read, update and destroy) to RESTful HTTP verbs. For example, let's set up a {@link Ext.data.Model Model}
        /// with an inline RestProxy
        /// *
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email'],
        /// *
        /// proxy: {
        /// type: 'rest',
        /// url : '/users'
        /// }
        /// });
        /// *
        /// Now we can create a new User instance and save it via the RestProxy. Doing this will cause the Proxy to send a POST
        /// request to '/users':
        /// *
        /// var user = Ext.create('User', {name: 'Ed Spencer', email: 'ed@sencha.com'});
        /// *
        /// user.save(); //POST /users
        /// *
        /// Let's expand this a little and provide a callback for the {@link Ext.data.Model#save} call to update the Model once
        /// it has been created. We'll assume the creation went successfully and that the server gave this user an ID of 123:
        /// *
        /// user.save({
        /// success: function(user) {
        /// user.set('name', 'Khan Noonien Singh');
        /// *
        /// user.save(); //PUT /users/123
        /// }
        /// });
        /// *
        /// Now that we're no longer creating a new Model instance, the request method is changed to an HTTP PUT, targeting the
        /// relevant url for that user. Now let's delete this user, which will use the DELETE method:
        /// *
        /// user.destroy(); //DELETE /users/123
        /// *
        /// Finally, when we perform a load of a Model or Store, RestProxy will use the GET method:
        /// *
        /// //1. Load via Store
        /// *
        /// //the Store automatically picks up the Proxy from the User model
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User'
        /// });
        /// *
        /// store.load(); //GET /users
        /// *
        /// //2. Load directly from the Model
        /// *
        /// //GET /users/123
        /// Ext.ModelManager.getModel('User').load(123, {
        /// success: function(user) {
        /// console.log(user.getId()); //outputs 123
        /// }
        /// });
        /// *
        /// # Url generation
        /// *
        /// RestProxy is able to automatically generate the urls above based on two configuration options - {@link #appendId} and
        /// {@link #format}. If appendId is true (it is by default) then RestProxy will automatically append the ID of the Model
        /// instance in question to the configured url, resulting in the '/users/123' that we saw above.
        /// *
        /// If the request is not for a specific Model instance (e.g. loading a Store), the url is not appended with an id.
        /// RestProxy will automatically insert a '/' before the ID if one is not already present.
        /// *
        /// new Ext.data.proxy.Rest({
        /// url: '/users',
        /// appendId: true //default
        /// });
        /// *
        /// // Collection url: /users
        /// // Instance url  : /users/123
        /// *
        /// RestProxy can also optionally append a format string to the end of any generated url:
        /// *
        /// new Ext.data.proxy.Rest({
        /// url: '/users',
        /// format: 'json'
        /// });
        /// *
        /// // Collection url: /users.json
        /// // Instance url  : /users/123.json
        /// *
        /// If further customization is needed, simply implement the {@link #buildUrl} method and add your custom generated url
        /// onto the {@link Ext.data.Request Request} object that is passed to buildUrl. See [RestProxy's implementation][1] for
        /// an example of how to achieve this.
        /// *
        /// Note that RestProxy inherits from {@link Ext.data.proxy.Ajax AjaxProxy}, which already injects all of the sorter,
        /// filter, group and paging options into the generated url. See the {@link Ext.data.proxy.Ajax AjaxProxy docs} for more
        /// details.
        /// *
        /// [1]: source/RestProxy.html#method-Ext.data.proxy.Rest-buildUrl
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region RestConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class RestConfig
    {
        public RestConfig(){}
        /// <summary>
        /// True to automatically append the ID of a Model instance when performing a request based on that single instance.
        /// See RestProxy intro docs for more details. Defaults to true.
        /// </summary>
        public bool appendId{get;set;}
        /// <summary>
        /// True to batch actions of a particular type when synchronizing the store. Defaults to false.
        /// </summary>
        public bool batchActions{get;set;}
        /// <summary>
        /// Optional data format to send to the server when making any request (e.g. 'json'). See the RestProxy intro docs
        /// for full details. Defaults to undefined.
        /// </summary>
        public JsString format{get;set;}
    }
    #endregion
    #region Server
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Server
    {
        public Server(){}
        public Server(ServerConfig config){}
        /// <summary>
        /// Encode any values being sent to the server. Can be overridden in subclasses.
        /// @private
        /// @param {Array} An array of sorters/filters.
        /// @return {Object} The encoded value
        /// </summary>
        public object applyEncoding(JsArray value){return null;}
        /// <summary>
        /// Creates and returns an Ext.data.Request object based on the options passed by the {@link Ext.data.Store Store}
        /// that this Proxy is attached to.
        /// @param {Ext.data.Operation} operation The {@link Ext.data.Operation Operation} object to execute
        /// @return {Ext.data.Request} The request object
        /// </summary>
        public Request buildRequest(Operation operation){return null;}
        /// <summary>
        /// Generates a url based on a given Ext.data.Request object. By default, ServerProxy's buildUrl will add the
        /// cache-buster param to the end of the url. Subclasses may need to perform additional modifications to the url.
        /// @param {Ext.data.Request} request The request object
        /// @return {String} The url
        /// </summary>
        public JsString buildUrl(Request request){return null;}
        /// <summary>
        /// @cfg {Object} api
        /// Specific urls to call on CRUD action methods "create", "read", "update" and "destroy". Defaults to:
        /// *
        /// api: {
        /// create  : undefined,
        /// read    : undefined,
        /// update  : undefined,
        /// destroy : undefined
        /// }
        /// *
        /// The url is built based upon the action being executed [create|read|update|destroy] using the commensurate
        /// {@link #api} property, or if undefined default to the configured
        /// {@link Ext.data.Store}.{@link Ext.data.proxy.Server#url url}.
        /// *
        /// For example:
        /// *
        /// api: {
        /// create  : '/controller/new',
        /// read    : '/controller/load',
        /// update  : '/controller/update',
        /// destroy : '/controller/destroy_action'
        /// }
        /// *
        /// If the specific URL for a given CRUD action is undefined, the CRUD action request will be directed to the
        /// configured {@link Ext.data.proxy.Server#url url}.
        /// </summary>
        public Server(object config){}
        public void create(){}
        public void destroy(){}
        /// <summary>
        /// In ServerProxy subclasses, the {@link #create}, {@link #read}, {@link #update} and {@link #destroy} methods all
        /// pass through to doRequest. Each ServerProxy subclass must implement the doRequest method - see {@link
        /// Ext.data.proxy.JsonP} and {@link Ext.data.proxy.Ajax} for examples. This method carries the same signature as
        /// each of the methods that delegate to it.
        /// *
        /// @param {Ext.data.Operation} operation The Ext.data.Operation object
        /// @param {Function} callback The callback function to call when the Operation has completed
        /// @param {Object} scope The scope in which to execute the callback
        /// </summary>
        public void doRequest(Operation operation, JsAction callback, object scope){}
        /// <summary>
        /// Encodes the array of {@link Ext.util.Filter} objects into a string to be sent in the request url. By default,
        /// this simply JSON-encodes the filter data
        /// @param {Ext.util.Filter[]} filters The array of {@link Ext.util.Filter Filter} objects
        /// @return {String} The encoded filters
        /// </summary>
        public JsString encodeFilters(object filters){return null;}
        /// <summary>
        /// Encodes the array of {@link Ext.util.Sorter} objects into a string to be sent in the request url. By default,
        /// this simply JSON-encodes the sorter data
        /// @param {Ext.util.Sorter[]} sorters The array of {@link Ext.util.Sorter Sorter} objects
        /// @return {String} The encoded sorters
        /// </summary>
        public JsString encodeSorters(object sorters){return null;}
        /// <summary>
        /// Template method to allow subclasses to specify how to get the response for the reader.
        /// @private
        /// @param {Object} response The server response
        /// @return {Object} The response data to be used by the reader
        /// </summary>
        public object extractResponseData(object response){return null;}
        /// <summary>
        /// @private
        /// Copy any sorters, filters etc into the params so they can be sent over the wire
        /// </summary>
        public void getParams(object operation){}
        /// <summary>
        /// Get the url for the request taking into account the order of priority,
        /// - The request
        /// - The api
        /// - The url
        /// @private
        /// @param {Ext.data.Request} request The request
        /// @return {String} The url
        /// </summary>
        public JsString getUrl(Request request){return null;}
        /// <summary>
        /// Optional callback function which can be used to clean up after a request has been completed.
        /// @param {Ext.data.Request} request The Request object
        /// @param {Boolean} success True if the request was successful
        /// @method
        /// </summary>
        public void onDestroy(){}
        public void processResponse(object success, object operation, object request, object response, object callback, object scope){}
        public void read(){}
        /// <summary>
        /// Sets up an exception on the operation
        /// @private
        /// @param {Ext.data.Operation} operation The operation
        /// @param {Object} response The response
        /// </summary>
        public void setException(Operation operation, object response){}
        /// <summary>
        /// Sets a value in the underlying {@link #extraParams}.
        /// @param {String} name The key for the new value
        /// @param {Object} value The value
        /// </summary>
        public void setExtraParam(JsString name, object value){}
        public void update(){}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// ServerProxy is a superclass of {@link Ext.data.proxy.JsonP JsonPProxy} and {@link Ext.data.proxy.Ajax AjaxProxy}, and
        /// would not usually be used directly.
        /// *
        /// ServerProxy should ideally be named HttpProxy as it is a superclass for all HTTP proxies - for Ext JS 4.x it has been
        /// called ServerProxy to enable any 3.x applications that reference the HttpProxy to continue to work (HttpProxy is now
        /// an alias of AjaxProxy).
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @cfg {String} cacheString
        /// The name of the cache param added to the url when using noCache. Defaults to "_dc".
        /// </summary>
        public JsString cacheString{get;set;}
        /// <summary>
        /// @cfg {String} directionParam
        /// The name of the direction parameter to send in a request. **This is only used when simpleSortMode is set to
        /// true.** Defaults to 'dir'.
        /// </summary>
        public JsString directionParam{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// ServerProxy is a superclass of {@link Ext.data.proxy.JsonP JsonPProxy} and {@link Ext.data.proxy.Ajax AjaxProxy}, and
        /// would not usually be used directly.
        /// *
        /// ServerProxy should ideally be named HttpProxy as it is a superclass for all HTTP proxies - for Ext JS 4.x it has been
        /// called ServerProxy to enable any 3.x applications that reference the HttpProxy to continue to work (HttpProxy is now
        /// an alias of AjaxProxy).
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {String} filterParam
        /// The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set this to undefined if you don't
        /// want to send a filter parameter.
        /// </summary>
        public JsString filterParam{get;set;}
        /// <summary>
        /// @cfg {String} groupParam
        /// The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this to undefined if you don't
        /// want to send a group parameter.
        /// </summary>
        public JsString groupParam{get;set;}
        /// <summary>
        /// @cfg {String} limitParam
        /// The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this to undefined if you don't
        /// want to send a limit parameter.
        /// </summary>
        public JsString limitParam{get;set;}
        /// <summary>
        /// @cfg {Boolean} noCache
        /// Disable caching by adding a unique parameter name to the request. Set to false to allow caching. Defaults to true.
        /// </summary>
        public bool noCache{get;set;}
        /// <summary>
        /// @cfg {String} pageParam
        /// The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to undefined if you don't
        /// want to send a page parameter.
        /// </summary>
        public JsString pageParam{get;set;}
        /// <summary>
        /// @cfg {Boolean} simpleSortMode
        /// Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a
        /// remote sort is requested. The directionParam and sortParam will be sent with the property name and either 'ASC'
        /// or 'DESC'.
        /// </summary>
        public bool simpleSortMode{get;set;}
        /// <summary>
        /// @cfg {String} sortParam
        /// The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this to undefined if you don't
        /// want to send a sort parameter.
        /// </summary>
        public JsString sortParam{get;set;}
        /// <summary>
        /// @cfg {String} startParam
        /// The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this to undefined if you don't
        /// want to send a start parameter.
        /// </summary>
        public JsString startParam{get;set;}
        /// <summary>
        /// @cfg {Number} timeout
        /// The number of milliseconds to wait for a response. Defaults to 30000 milliseconds (30 seconds).
        /// </summary>
        public JsNumber timeout{get;set;}
    }
    #endregion
    #region ServerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ServerConfig
    {
        public ServerConfig(){}
        /// <summary>
        /// The name of the cache param added to the url when using noCache. Defaults to "_dc".
        /// </summary>
        public JsString cacheString{get;set;}
        /// <summary>
        /// The name of the direction parameter to send in a request. **This is only used when simpleSortMode is set to
        /// true.** Defaults to 'dir'.
        /// </summary>
        public JsString directionParam{get;set;}
        /// <summary>
        /// Extra parameters that will be included on every request. Individual requests with params of the same name
        /// will override these params when they are in conflict.
        /// </summary>
        public object extraParams{get;set;}
        /// <summary>
        /// The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set this to undefined if you don't
        /// want to send a filter parameter.
        /// </summary>
        public JsString filterParam{get;set;}
        /// <summary>
        /// The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this to undefined if you don't
        /// want to send a group parameter.
        /// </summary>
        public JsString groupParam{get;set;}
        /// <summary>
        /// The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this to undefined if you don't
        /// want to send a limit parameter.
        /// </summary>
        public JsString limitParam{get;set;}
        /// <summary>
        /// Disable caching by adding a unique parameter name to the request. Set to false to allow caching. Defaults to true.
        /// </summary>
        public bool noCache{get;set;}
        /// <summary>
        /// The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to undefined if you don't
        /// want to send a page parameter.
        /// </summary>
        public JsString pageParam{get;set;}
        /// <summary>
        /// Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a
        /// remote sort is requested. The directionParam and sortParam will be sent with the property name and either 'ASC'
        /// or 'DESC'.
        /// </summary>
        public bool simpleSortMode{get;set;}
        /// <summary>
        /// The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this to undefined if you don't
        /// want to send a sort parameter.
        /// </summary>
        public JsString sortParam{get;set;}
        /// <summary>
        /// The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this to undefined if you don't
        /// want to send a start parameter.
        /// </summary>
        public JsString startParam{get;set;}
        /// <summary>
        /// The number of milliseconds to wait for a response. Defaults to 30000 milliseconds (30 seconds).
        /// </summary>
        public JsNumber timeout{get;set;}
        /// <summary>
        /// The URL from which to request the data object.
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region SessionStorage
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SessionStorage
    {
        public SessionStorage(){}
        public void getStorageObject(){}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// Proxy which uses HTML5 session storage as its data storage/retrieval mechanism. If this proxy is used in a browser
        /// where session storage is not supported, the constructor will throw an error. A session storage proxy requires a
        /// unique ID which is used as a key in which all record data are stored in the session storage object.
        /// *
        /// It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided but the
        /// attached store has a storeId, the storeId will be used. If neither option is presented the proxy will throw an error.
        /// *
        /// Proxies are almost always used with a {@link Ext.data.Store store}:
        /// *
        /// new Ext.data.Store({
        /// proxy: {
        /// type: 'sessionstorage',
        /// id  : 'myProxyKey'
        /// }
        /// });
        /// *
        /// Alternatively you can instantiate the Proxy directly:
        /// *
        /// new Ext.data.proxy.SessionStorage({
        /// id  : 'myOtherProxyKey'
        /// });
        /// *
        /// Note that session storage is different to local storage (see {@link Ext.data.proxy.LocalStorage}) - if a browser
        /// session is ended (e.g. by closing the browser) then all data in a SessionStorageProxy are lost. Browser restarts
        /// don't affect the {@link Ext.data.proxy.LocalStorage} - the data are preserved.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// Proxy which uses HTML5 session storage as its data storage/retrieval mechanism. If this proxy is used in a browser
        /// where session storage is not supported, the constructor will throw an error. A session storage proxy requires a
        /// unique ID which is used as a key in which all record data are stored in the session storage object.
        /// *
        /// It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided but the
        /// attached store has a storeId, the storeId will be used. If neither option is presented the proxy will throw an error.
        /// *
        /// Proxies are almost always used with a {@link Ext.data.Store store}:
        /// *
        /// new Ext.data.Store({
        /// proxy: {
        /// type: 'sessionstorage',
        /// id  : 'myProxyKey'
        /// }
        /// });
        /// *
        /// Alternatively you can instantiate the Proxy directly:
        /// *
        /// new Ext.data.proxy.SessionStorage({
        /// id  : 'myOtherProxyKey'
        /// });
        /// *
        /// Note that session storage is different to local storage (see {@link Ext.data.proxy.LocalStorage}) - if a browser
        /// session is ended (e.g. by closing the browser) then all data in a SessionStorageProxy are lost. Browser restarts
        /// don't affect the {@link Ext.data.proxy.LocalStorage} - the data are preserved.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region WebStorage
    [JsType(JsMode.Prototype, Export=false)]
    public partial class WebStorage
    {
        public WebStorage(){}
        public WebStorage(WebStorageConfig config){}
        /// <summary>
        /// Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the
        /// storage object.
        /// </summary>
        public void clear(){}
        /// <summary>
        /// Creates the proxy, throws an error if local storage is not supported in the current browser.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public WebStorage(object config){}
        public void create(object operation, object callback, object scope){}
        public void destroy(object operation, object callback, object scope){}
        /// <summary>
        /// @private
        /// Returns the array of record IDs stored in this Proxy
        /// @return {Number[]} The record IDs. Each is cast as a Number
        /// </summary>
        public void getIds(){}
        /// <summary>
        /// @private
        /// Returns the next numerical ID that can be used when realizing a model instance (see getRecordCounterKey).
        /// Increments the counter.
        /// @return {Number} The id
        /// </summary>
        public JsNumber getNextId(){return null;}
        /// <summary>
        /// @private
        /// Fetches a model instance from the Proxy by ID. Runs each field's decode function (if present) to decode the data.
        /// @param {String} id The record's unique ID
        /// @return {Ext.data.Model} The model instance
        /// </summary>
        public Model getRecord(JsString id){return null;}
        /// <summary>
        /// @private
        /// Returns the unique key used to store the current record counter for this proxy. This is used internally when
        /// realizing models (creating them when they used to be phantoms), in order to give each model instance a unique id.
        /// @return {String} The counter key
        /// </summary>
        public JsString getRecordCounterKey(){return null;}
        /// <summary>
        /// @private
        /// Given the id of a record, returns a unique string based on that id and the id of this proxy. This is used when
        /// storing data in the local storage object and should prevent naming collisions.
        /// @param {String/Number/Ext.data.Model} id The record id, or a Model instance
        /// @return {String} The unique key for this record
        /// </summary>
        public JsString getRecordKey(object id){return null;}
        /// <summary>
        /// @private
        /// Abstract function which should return the storage object that data will be saved to. This must be implemented
        /// in each subclass.
        /// @return {Object} The storage object
        /// </summary>
        public object getStorageObject(){return null;}
        /// <summary>
        /// @private
        /// Sets up the Proxy by claiming the key in the storage object that corresponds to the unique id of this Proxy. Called
        /// automatically by the constructor, this should not need to be called again unless {@link #clear} has been called.
        /// </summary>
        public void initialize(){}
        public void read(object operation, object callback, object scope){}
        /// <summary>
        /// @private
        /// Physically removes a given record from the local storage. Used internally by {@link #destroy}, which you should
        /// use instead because it updates the list of currently-stored record ids
        /// @param {String/Number/Ext.data.Model} id The id of the record to remove, or an Ext.data.Model instance
        /// </summary>
        public void removeRecord(object id, object updateIds){}
        /// <summary>
        /// @private
        /// Saves the array of ids representing the set of all records in the Proxy
        /// @param {Number[]} ids The ids to set
        /// </summary>
        public void setIds(object ids){}
        /// <summary>
        /// Saves the given record in the Proxy. Runs each field's encode function (if present) to encode the data.
        /// @param {Ext.data.Model} record The model instance
        /// @param {String} id The id to save the record under (defaults to the value of the record's getId() function)
        /// </summary>
        public void setRecord(Model record, JsString id){}
        public void update(object operation, object callback, object scope){}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// WebStorageProxy is simply a superclass for the {@link Ext.data.proxy.LocalStorage localStorage} and {@link
        /// Ext.data.proxy.SessionStorage sessionStorage} proxies. It uses the new HTML5 key/value client-side storage objects to
        /// save {@link Ext.data.Model model instances} for offline use.
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// *
        /// WebStorageProxy is simply a superclass for the {@link Ext.data.proxy.LocalStorage localStorage} and {@link
        /// Ext.data.proxy.SessionStorage sessionStorage} proxies. It uses the new HTML5 key/value client-side storage objects to
        /// save {@link Ext.data.Model model instances} for offline use.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private
        /// Saves the array of ids representing the set of all records in the Proxy
        /// @param {Number[]} ids The ids to set
        /// </summary>
        [JsProperty]
        public object Ids{private get;[JsMethod(Name="setIds")]set;}
        /// <summary>
        /// @private
        /// Returns the next numerical ID that can be used when realizing a model instance (see getRecordCounterKey).
        /// Increments the counter.
        /// @return {Number} The id
        /// </summary>
        [JsProperty]
        public JsNumber NextId{[JsMethod(Name="getNextId")]get;private set;}
        /// <summary>
        /// @private
        /// Returns the unique key used to store the current record counter for this proxy. This is used internally when
        /// realizing models (creating them when they used to be phantoms), in order to give each model instance a unique id.
        /// @return {String} The counter key
        /// </summary>
        [JsProperty]
        public JsString RecordCounterKey{[JsMethod(Name="getRecordCounterKey")]get;private set;}
        /// <summary>
        /// @private
        /// Abstract function which should return the storage object that data will be saved to. This must be implemented
        /// in each subclass.
        /// @return {Object} The storage object
        /// </summary>
        [JsProperty]
        public object StorageObject{[JsMethod(Name="getStorageObject")]get;private set;}
    }
    #endregion
    #region WebStorageConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class WebStorageConfig
    {
        public WebStorageConfig(){}
        /// <summary>
        /// The unique ID used as the key in which all record data are stored in the local storage object.
        /// </summary>
        public JsString id{get;set;}
    }
    #endregion
}
#endregion
#region Ext.data.reader
namespace Ext.data.reader
{
    #region Array
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Array
    {
        public Array(){}
        /// <summary>
        /// @private
        /// Most of the work is done for us by JsonReader, but we need to overwrite the field accessors to just
        /// reference the correct position in the array.
        /// </summary>
        public void buildExtractors(){}
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.reader.Array
        /// @extends Ext.data.reader.Json
        /// <p>Data reader class to create an Array of {@link Ext.data.Model} objects from an Array.
        /// Each element of that Array represents a row of data fields. The
        /// fields are pulled into a Record object using as a subscript, the <code>mapping</code> property
        /// of the field definition if it exists, or the field's ordinal position in the definition.</p>
        /// <p><u>Example code:</u></p>
        /// <pre><code>
        /// Employee = Ext.define('Employee', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// 'id',
        /// {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
        /// {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
        /// ]
        /// });
        /// var myReader = new Ext.data.reader.Array({
        /// model: 'Employee'
        /// }, Employee);
        /// </code></pre>
        /// <p>This would consume an Array like this:</p>
        /// <pre><code>
        /// [ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
        /// </code></pre>
        /// @constructor
        /// Create a new ArrayReader
        /// @param {Object} meta Metadata configuration options.
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.reader.Array
        /// @extends Ext.data.reader.Json
        /// <p>Data reader class to create an Array of {@link Ext.data.Model} objects from an Array.
        /// Each element of that Array represents a row of data fields. The
        /// fields are pulled into a Record object using as a subscript, the <code>mapping</code> property
        /// of the field definition if it exists, or the field's ordinal position in the definition.</p>
        /// <p><u>Example code:</u></p>
        /// <pre><code>
        /// Employee = Ext.define('Employee', {
        /// extend: 'Ext.data.Model',
        /// fields: [
        /// 'id',
        /// {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
        /// {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
        /// ]
        /// });
        /// var myReader = new Ext.data.reader.Array({
        /// model: 'Employee'
        /// }, Employee);
        /// </code></pre>
        /// <p>This would consume an Array like this:</p>
        /// <pre><code>
        /// [ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
        /// </code></pre>
        /// @constructor
        /// Create a new ArrayReader
        /// @param {Object} meta Metadata configuration options.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Json
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Json
    {
        public Json(Ext.data.reader.JsonConfig config){}
        public Json(){}
        public void buildExtractors(){}
        /// <summary>
        /// @private
        /// We're just preparing the data for the superclass by pulling out the record objects we want. If a {@link #record}
        /// was specified we have to pull those out of the larger JSON object, which is most of what this function is doing
        /// @param {Object} root The JSON root node
        /// @return {Ext.data.Model[]} The records
        /// </summary>
        public void extractData(object root){}
        public void getResponseData(object response){}
        /// <summary>
        /// Reads a JSON object and returns a ResultSet. Uses the internal getTotal and getSuccess extractors to
        /// retrieve meta data from the response, and extractData to turn the JSON data into model instances.
        /// @param {Object} data The raw JSON data
        /// @return {Ext.data.ResultSet} A ResultSet containing model instances and meta data about the results
        /// </summary>
        public ResultSet readRecords(object data){return null;}
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.reader.Json
        /// @extends Ext.data.reader.Reader
        /// *
        /// <p>The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. This usually
        /// happens as a result of loading a Store - for example we might create something like this:</p>
        /// *
        /// <pre><code>
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email']
        /// });
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'ajax',
        /// url : 'users.json',
        /// reader: {
        /// type: 'json'
        /// }
        /// }
        /// });
        /// </code></pre>
        /// *
        /// <p>The example above creates a 'User' model. Models are explained in the {@link Ext.data.Model Model} docs if you're
        /// not already familiar with them.</p>
        /// *
        /// <p>We created the simplest type of JSON Reader possible by simply telling our {@link Ext.data.Store Store}'s
        /// {@link Ext.data.proxy.Proxy Proxy} that we want a JSON Reader. The Store automatically passes the configured model to the
        /// Store, so it is as if we passed this instead:
        /// *
        /// <pre><code>
        /// reader: {
        /// type : 'json',
        /// model: 'User'
        /// }
        /// </code></pre>
        /// *
        /// <p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>
        /// *
        /// <pre><code>
        /// [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// },
        /// {
        /// "id": 2,
        /// "name": "Abe Elias",
        /// "email": "abe@sencha.com"
        /// }
        /// ]
        /// </code></pre>
        /// *
        /// <p><u>Reading other JSON formats</u></p>
        /// *
        /// <p>If you already have your JSON format defined and it doesn't look quite like what we have above, you can usually
        /// pass JsonReader a couple of configuration options to make it parse your format. For example, we can use the
        /// {@link #root} configuration to parse data that comes back like this:</p>
        /// *
        /// <pre><code>
        /// {
        /// "users": [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// },
        /// {
        /// "id": 2,
        /// "name": "Abe Elias",
        /// "email": "abe@sencha.com"
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>To parse this we just pass in a {@link #root} configuration that matches the 'users' above:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type: 'json',
        /// root: 'users'
        /// }
        /// </code></pre>
        /// *
        /// <p>Sometimes the JSON structure is even more complicated. Document databases like CouchDB often provide metadata
        /// around each record inside a nested structure like this:</p>
        /// *
        /// <pre><code>
        /// {
        /// "total": 122,
        /// "offset": 0,
        /// "users": [
        /// {
        /// "id": "ed-spencer-1",
        /// "value": 1,
        /// "user": {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// }
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>In the case above the record data is nested an additional level inside the "users" array as each "user" item has
        /// additional metadata surrounding it ('id' and 'value' in this case). To parse data out of each "user" item in the
        /// JSON above we need to specify the {@link #record} configuration like this:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type  : 'json',
        /// root  : 'users',
        /// record: 'user'
        /// }
        /// </code></pre>
        /// *
        /// <p><u>Response metadata</u></p>
        /// *
        /// <p>The server can return additional data in its response, such as the {@link #totalProperty total number of records}
        /// and the {@link #successProperty success status of the response}. These are typically included in the JSON response
        /// like this:</p>
        /// *
        /// <pre><code>
        /// {
        /// "total": 100,
        /// "success": true,
        /// "users": [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>If these properties are present in the JSON response they can be parsed out by the JsonReader and used by the
        /// Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
        /// options:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type : 'json',
        /// root : 'users',
        /// totalProperty  : 'total',
        /// successProperty: 'success'
        /// }
        /// </code></pre>
        /// *
        /// <p>These final options are not necessary to make the Reader work, but can be useful when the server needs to report
        /// an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
        /// returned.</p>
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.reader.Json
        /// @extends Ext.data.reader.Reader
        /// *
        /// <p>The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. This usually
        /// happens as a result of loading a Store - for example we might create something like this:</p>
        /// *
        /// <pre><code>
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email']
        /// });
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'ajax',
        /// url : 'users.json',
        /// reader: {
        /// type: 'json'
        /// }
        /// }
        /// });
        /// </code></pre>
        /// *
        /// <p>The example above creates a 'User' model. Models are explained in the {@link Ext.data.Model Model} docs if you're
        /// not already familiar with them.</p>
        /// *
        /// <p>We created the simplest type of JSON Reader possible by simply telling our {@link Ext.data.Store Store}'s
        /// {@link Ext.data.proxy.Proxy Proxy} that we want a JSON Reader. The Store automatically passes the configured model to the
        /// Store, so it is as if we passed this instead:
        /// *
        /// <pre><code>
        /// reader: {
        /// type : 'json',
        /// model: 'User'
        /// }
        /// </code></pre>
        /// *
        /// <p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>
        /// *
        /// <pre><code>
        /// [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// },
        /// {
        /// "id": 2,
        /// "name": "Abe Elias",
        /// "email": "abe@sencha.com"
        /// }
        /// ]
        /// </code></pre>
        /// *
        /// <p><u>Reading other JSON formats</u></p>
        /// *
        /// <p>If you already have your JSON format defined and it doesn't look quite like what we have above, you can usually
        /// pass JsonReader a couple of configuration options to make it parse your format. For example, we can use the
        /// {@link #root} configuration to parse data that comes back like this:</p>
        /// *
        /// <pre><code>
        /// {
        /// "users": [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// },
        /// {
        /// "id": 2,
        /// "name": "Abe Elias",
        /// "email": "abe@sencha.com"
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>To parse this we just pass in a {@link #root} configuration that matches the 'users' above:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type: 'json',
        /// root: 'users'
        /// }
        /// </code></pre>
        /// *
        /// <p>Sometimes the JSON structure is even more complicated. Document databases like CouchDB often provide metadata
        /// around each record inside a nested structure like this:</p>
        /// *
        /// <pre><code>
        /// {
        /// "total": 122,
        /// "offset": 0,
        /// "users": [
        /// {
        /// "id": "ed-spencer-1",
        /// "value": 1,
        /// "user": {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// }
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>In the case above the record data is nested an additional level inside the "users" array as each "user" item has
        /// additional metadata surrounding it ('id' and 'value' in this case). To parse data out of each "user" item in the
        /// JSON above we need to specify the {@link #record} configuration like this:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type  : 'json',
        /// root  : 'users',
        /// record: 'user'
        /// }
        /// </code></pre>
        /// *
        /// <p><u>Response metadata</u></p>
        /// *
        /// <p>The server can return additional data in its response, such as the {@link #totalProperty total number of records}
        /// and the {@link #successProperty success status of the response}. These are typically included in the JSON response
        /// like this:</p>
        /// *
        /// <pre><code>
        /// {
        /// "total": 100,
        /// "success": true,
        /// "users": [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// *
        /// <p>If these properties are present in the JSON response they can be parsed out by the JsonReader and used by the
        /// Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
        /// options:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type : 'json',
        /// root : 'users',
        /// totalProperty  : 'total',
        /// successProperty: 'success'
        /// }
        /// </code></pre>
        /// *
        /// <p>These final options are not necessary to make the Reader work, but can be useful when the server needs to report
        /// an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
        /// returned.</p>
        /// </summary>
        public JsString extend{get;set;}
        public JsString root{get;set;}
        /// <summary>
        /// @cfg {Boolean} useSimpleAccessors True to ensure that field names/mappings are treated as literals when
        /// reading values. Defalts to <tt>false</tt>.
        /// For example, by default, using the mapping "foo.bar.baz" will try and read a property foo from the root, then a property bar
        /// from foo, then a property baz from bar. Setting the simple accessors to true will read the property with the name
        /// "foo.bar.baz" direct from the root object.
        /// </summary>
        public bool useSimpleAccessors{get;set;}
    }
    #endregion
    #region JsonConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class JsonConfig
    {
        public JsonConfig(){}
        /// <summary>
        /// The optional location within the JSON response that the record data itself can be found at.
        /// See the JsonReader intro docs for more details. This is not often needed and defaults to undefined.
        /// </summary>
        public JsString record{get;set;}
        /// <summary>
        /// True to ensure that field names/mappings are treated as literals when
        /// reading values. Defalts to <tt>false</tt>.
        /// For example, by default, using the mapping "foo.bar.baz" will try and read a property foo from the root, then a property bar
        /// from foo, then a property baz from bar. Setting the simple accessors to true will read the property with the name
        /// "foo.bar.baz" direct from the root object.
        /// </summary>
        public bool useSimpleAccessors{get;set;}
    }
    #endregion
    #region Reader
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Reader
    {
        public Reader(){}
        public Reader(ReaderConfig config){}
        /// <summary>
        /// @private
        /// This builds optimized functions for retrieving record data and meta data from an object.
        /// Subclasses may need to implement their own getRoot function.
        /// @param {Boolean} force True to automatically remove existing extractor functions first (defaults to false)
        /// </summary>
        public void buildExtractors(bool force){}
        /// <summary>
        /// @private
        /// </summary>
        public void buildFieldExtractors(){}
        /// <summary>
        /// Creates new Reader.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Reader(object config){}
        /// <summary>
        /// Returns extracted, type-cast rows of data.  Iterates to call #extractValues for each row
        /// @param {Object[]/Object} root from server response
        /// @private
        /// </summary>
        public void extractData(object root){}
        /// <summary>
        /// @private
        /// Given an object representing a single model instance's data, iterates over the model's fields and
        /// builds an object with the value for each field.
        /// @param {Object} data The data object to convert
        /// @return {Object} Data object suitable for use with a model constructor
        /// </summary>
        public object extractValues(object data){return null;}
        /// <summary>
        /// @private
        /// Used internally by {@link #readAssociated}. Given a data object (which could be json, xml etc) for a specific
        /// record, this should return the relevant part of that data for the given association name. This is only really
        /// needed to support the XML Reader, which has to do a query to get the associated data object
        /// @param {Object} data The raw data object
        /// @param {String} associationName The name of the association to get data for (uses associationKey if present)
        /// @return {Object} The root
        /// </summary>
        public object getAssociatedDataRoot(object data, JsString associationName){return null;}
        /// <summary>
        /// @private
        /// By default this function just returns what is passed to it. It can be overridden in a subclass
        /// to return something else. See XmlReader for an example.
        /// @param {Object} data The data object
        /// @return {Object} The normalized data object
        /// </summary>
        public object getData(object data){return null;}
        public void getFields(){}
        /// <summary>
        /// Get the idProperty to use for extracting data
        /// @private
        /// @return {String} The id property
        /// </summary>
        public JsString getIdProperty(){return null;}
        /// <summary>
        /// Takes a raw response object (as passed to this.read) and returns the useful data segment of it. This must be
        /// implemented by each subclass
        /// @param {Object} response The responce object
        /// @return {Object} The useful data from the response
        /// </summary>
        public object getResponseData(object response){return null;}
        /// <summary>
        /// @private
        /// This will usually need to be implemented in a subclass. Given a generic data object (the type depends on the type
        /// of data we are reading), this function should return the object as configured by the Reader's 'root' meta data config.
        /// See XmlReader's getRoot implementation for an example. By default the same data object will simply be returned.
        /// @param {Object} data The data object
        /// @return {Object} The same data object
        /// </summary>
        public object getRoot(object data){return null;}
        /// <summary>
        /// @private
        /// Reconfigures the meta data tied to this Reader
        /// </summary>
        public void onMetaChange(object meta){}
        /// <summary>
        /// Reads the given response object. This method normalizes the different types of response object that may be passed
        /// to it, before handing off the reading of records to the {@link #readRecords} function.
        /// @param {Object} response The response object. This may be either an XMLHttpRequest object or a plain JS object
        /// @return {Ext.data.ResultSet} The parsed ResultSet object
        /// </summary>
        public ResultSet read(object response){return null;}
        /// <summary>
        /// @private
        /// Loads a record's associations from the data object. This prepopulates hasMany and belongsTo associations
        /// on the record provided.
        /// @param {Ext.data.Model} record The record to load associations for
        /// @param {Object} data The data object
        /// @return {String} Return value description
        /// </summary>
        public JsString readAssociated(Model record, object data){return null;}
        /// <summary>
        /// Abstracts common functionality used by all Reader subclasses. Each subclass is expected to call this function
        /// before running its own logic and returning the Ext.data.ResultSet instance. For most Readers additional
        /// processing should not be needed.
        /// @param {Object} data The raw data object
        /// @return {Ext.data.ResultSet} A ResultSet object
        /// </summary>
        public ResultSet readRecords(object data){return null;}
        /// <summary>
        /// Sets a new model for the reader.
        /// @private
        /// @param {Object} model The model to set.
        /// @param {Boolean} setOnProxy True to also set on the Proxy, if one is configured
        /// </summary>
        public void setModel(object model, bool setOnProxy){}
        /// <summary>
        /// Get the idProperty to use for extracting data
        /// @private
        /// @return {String} The id property
        /// </summary>
        [JsProperty]
        public JsString IdProperty{[JsMethod(Name="getIdProperty")]get;private set;}
        /// <summary>
        /// @cfg {Boolean} implicitIncludes
        /// True to automatically parse models nested within other models in a response object. See the
        /// Ext.data.reader.Reader intro docs for full explanation. Defaults to true.
        /// </summary>
        public bool implicitIncludes{get;set;}
        /// <summary>
        /// @cfg {Boolean} implicitIncludes
        /// True to automatically parse models nested within other models in a response object. See the
        /// Ext.data.reader.Reader intro docs for full explanation. Defaults to true.
        /// </summary>
        public bool isReader{get;set;}
        /// <summary>
        /// @cfg {String} root
        /// **(Required)** The name of the property which contains the Array of row objects. Defaults to undefined. An
        /// exception will be thrown if the root property is undefined. The data packet value for this property should be an
        /// empty array to clear the data or show no data.
        /// </summary>
        public JsString root{get;set;}
        /// <summary>
        /// @cfg {String} successProperty
        /// Name of the property from which to retrieve the success attribute. Defaults to success. See
        /// {@link Ext.data.proxy.Server}.{@link Ext.data.proxy.Server#exception exception} for additional information.
        /// </summary>
        public JsString successProperty{get;set;}
        /// <summary>
        /// @cfg {String} totalProperty
        /// Name of the property from which to retrieve the total number of records in the dataset. This is only needed if
        /// the whole dataset is not passed in one go, but is being paged from the remote server. Defaults to total.
        /// </summary>
        public JsString totalProperty{get;set;}
    }
    #endregion
    #region ReaderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ReaderConfig
    {
        public ReaderConfig(){}
        /// <summary>
        /// Name of the property within a row object that contains a record identifier value. Defaults to The id of the
        /// model. If an idProperty is explicitly specified it will override that of the one specified on the model
        /// </summary>
        public JsString idProperty{get;set;}
        /// <summary>
        /// The name of the property which contains a response message. This property is optional.
        /// </summary>
        public JsString messageProperty{get;set;}
        /// <summary>
        /// **(Required)** The name of the property which contains the Array of row objects. Defaults to undefined. An
        /// exception will be thrown if the root property is undefined. The data packet value for this property should be an
        /// empty array to clear the data or show no data.
        /// </summary>
        public JsString root{get;set;}
        /// <summary>
        /// Name of the property from which to retrieve the success attribute. Defaults to success. See
        /// {@link Ext.data.proxy.Server}.{@link Ext.data.proxy.Server#exception exception} for additional information.
        /// </summary>
        public JsString successProperty{get;set;}
        /// <summary>
        /// Name of the property from which to retrieve the total number of records in the dataset. This is only needed if
        /// the whole dataset is not passed in one go, but is being paged from the remote server. Defaults to total.
        /// </summary>
        public JsString totalProperty{get;set;}
    }
    #endregion
    #region Xml
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Xml
    {
        public Xml(Ext.data.reader.XmlConfig config){}
        public Xml(){}
        /// <summary>
        /// @private
        /// Creates a function to return some particular key of data from a response. The totalProperty and
        /// successProperty are treated as special cases for type casting, everything else is just a simple selector.
        /// @param {String} key
        /// @return {Function}
        /// </summary>
        public void createAccessor(JsString expr){}
        /// <summary>
        /// @private
        /// We're just preparing the data for the superclass by pulling out the record nodes we want
        /// @param {XMLElement} root The XML root node
        /// @return {Ext.data.Model[]} The records
        /// </summary>
        public void extractData(object root){}
        /// <summary>
        /// @private
        /// See Ext.data.reader.Reader's getAssociatedDataRoot docs
        /// @param {Object} data The raw data object
        /// @param {String} associationName The name of the association to get data for (uses associationKey if present)
        /// @return {XMLElement} The root
        /// </summary>
        public void getAssociatedDataRoot(object data, JsString associationName){}
        /// <summary>
        /// Normalizes the data object
        /// @param {Object} data The raw data object
        /// @return {Object} Returns the documentElement property of the data object if present, or the same object if not
        /// </summary>
        public object getData(object data){return null;}
        public void getNodeValue(object node){}
        public void getResponseData(object response){}
        /// <summary>
        /// @private
        /// Given an XML object, returns the Element that represents the root as configured by the Reader's meta data
        /// @param {Object} data The XML data object
        /// @return {XMLElement} The root node element
        /// </summary>
        public void getRoot(object data){}
        /// <summary>
        /// Parses an XML document and returns a ResultSet containing the model instances
        /// @param {Object} doc Parsed XML document
        /// @return {Ext.data.ResultSet} The parsed result set
        /// </summary>
        public ResultSet readRecords(object doc){return null;}
        public JsString alias{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.reader.Xml
        /// @extends Ext.data.reader.Reader
        /// *
        /// <p>The XML Reader is used by a Proxy to read a server response that is sent back in XML format. This usually
        /// happens as a result of loading a Store - for example we might create something like this:</p>
        /// *
        /// <pre><code>
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email']
        /// });
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'ajax',
        /// url : 'users.xml',
        /// reader: {
        /// type: 'xml',
        /// record: 'user'
        /// }
        /// }
        /// });
        /// </code></pre>
        /// *
        /// <p>The example above creates a 'User' model. Models are explained in the {@link Ext.data.Model Model} docs if you're
        /// not already familiar with them.</p>
        /// *
        /// <p>We created the simplest type of XML Reader possible by simply telling our {@link Ext.data.Store Store}'s
        /// {@link Ext.data.proxy.Proxy Proxy} that we want a XML Reader. The Store automatically passes the configured model to the
        /// Store, so it is as if we passed this instead:
        /// *
        /// <pre><code>
        /// reader: {
        /// type : 'xml',
        /// model: 'User',
        /// record: 'user'
        /// }
        /// </code></pre>
        /// *
        /// <p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>
        /// *
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;1&lt;/id&gt;
        /// &lt;name&gt;Ed Spencer&lt;/name&gt;
        /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;2&lt;/id&gt;
        /// &lt;name&gt;Abe Elias&lt;/name&gt;
        /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// </code></pre>
        /// *
        /// <p>The XML Reader uses the configured {@link #record} option to pull out the data for each record - in this case we
        /// set record to 'user', so each &lt;user&gt; above will be converted into a User model.</p>
        /// *
        /// <p><u>Reading other XML formats</u></p>
        /// *
        /// <p>If you already have your XML format defined and it doesn't look quite like what we have above, you can usually
        /// pass XmlReader a couple of configuration options to make it parse your format. For example, we can use the
        /// {@link #root} configuration to parse data that comes back like this:</p>
        /// *
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;users&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;1&lt;/id&gt;
        /// &lt;name&gt;Ed Spencer&lt;/name&gt;
        /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;2&lt;/id&gt;
        /// &lt;name&gt;Abe Elias&lt;/name&gt;
        /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;/users&gt;
        /// </code></pre>
        /// *
        /// <p>To parse this we just pass in a {@link #root} configuration that matches the 'users' above:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type  : 'xml',
        /// root  : 'users',
        /// record: 'user'
        /// }
        /// </code></pre>
        /// *
        /// <p>Note that XmlReader doesn't care whether your {@link #root} and {@link #record} elements are nested deep inside
        /// a larger structure, so a response like this will still work:
        /// *
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;deeply&gt;
        /// &lt;nested&gt;
        /// &lt;xml&gt;
        /// &lt;users&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;1&lt;/id&gt;
        /// &lt;name&gt;Ed Spencer&lt;/name&gt;
        /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;2&lt;/id&gt;
        /// &lt;name&gt;Abe Elias&lt;/name&gt;
        /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;/users&gt;
        /// &lt;/xml&gt;
        /// &lt;/nested&gt;
        /// &lt;/deeply&gt;
        /// </code></pre>
        /// *
        /// <p><u>Response metadata</u></p>
        /// *
        /// <p>The server can return additional data in its response, such as the {@link #totalProperty total number of records}
        /// and the {@link #successProperty success status of the response}. These are typically included in the XML response
        /// like this:</p>
        /// *
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;total&gt;100&lt;/total&gt;
        /// &lt;success&gt;true&lt;/success&gt;
        /// &lt;users&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;1&lt;/id&gt;
        /// &lt;name&gt;Ed Spencer&lt;/name&gt;
        /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;2&lt;/id&gt;
        /// &lt;name&gt;Abe Elias&lt;/name&gt;
        /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;/users&gt;
        /// </code></pre>
        /// *
        /// <p>If these properties are present in the XML response they can be parsed out by the XmlReader and used by the
        /// Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
        /// options:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type: 'xml',
        /// root: 'users',
        /// totalProperty  : 'total',
        /// successProperty: 'success'
        /// }
        /// </code></pre>
        /// *
        /// <p>These final options are not necessary to make the Reader work, but can be useful when the server needs to report
        /// an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
        /// returned.</p>
        /// *
        /// <p><u>Response format</u></p>
        /// *
        /// <p><b>Note:</b> in order for the browser to parse a returned XML document, the Content-Type header in the HTTP
        /// response must be set to "text/xml" or "application/xml". This is very important - the XmlReader will not
        /// work correctly otherwise.</p>
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.reader.Xml
        /// @extends Ext.data.reader.Reader
        /// *
        /// <p>The XML Reader is used by a Proxy to read a server response that is sent back in XML format. This usually
        /// happens as a result of loading a Store - for example we might create something like this:</p>
        /// *
        /// <pre><code>
        /// Ext.define('User', {
        /// extend: 'Ext.data.Model',
        /// fields: ['id', 'name', 'email']
        /// });
        /// var store = Ext.create('Ext.data.Store', {
        /// model: 'User',
        /// proxy: {
        /// type: 'ajax',
        /// url : 'users.xml',
        /// reader: {
        /// type: 'xml',
        /// record: 'user'
        /// }
        /// }
        /// });
        /// </code></pre>
        /// *
        /// <p>The example above creates a 'User' model. Models are explained in the {@link Ext.data.Model Model} docs if you're
        /// not already familiar with them.</p>
        /// *
        /// <p>We created the simplest type of XML Reader possible by simply telling our {@link Ext.data.Store Store}'s
        /// {@link Ext.data.proxy.Proxy Proxy} that we want a XML Reader. The Store automatically passes the configured model to the
        /// Store, so it is as if we passed this instead:
        /// *
        /// <pre><code>
        /// reader: {
        /// type : 'xml',
        /// model: 'User',
        /// record: 'user'
        /// }
        /// </code></pre>
        /// *
        /// <p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>
        /// *
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;1&lt;/id&gt;
        /// &lt;name&gt;Ed Spencer&lt;/name&gt;
        /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;2&lt;/id&gt;
        /// &lt;name&gt;Abe Elias&lt;/name&gt;
        /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// </code></pre>
        /// *
        /// <p>The XML Reader uses the configured {@link #record} option to pull out the data for each record - in this case we
        /// set record to 'user', so each &lt;user&gt; above will be converted into a User model.</p>
        /// *
        /// <p><u>Reading other XML formats</u></p>
        /// *
        /// <p>If you already have your XML format defined and it doesn't look quite like what we have above, you can usually
        /// pass XmlReader a couple of configuration options to make it parse your format. For example, we can use the
        /// {@link #root} configuration to parse data that comes back like this:</p>
        /// *
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;users&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;1&lt;/id&gt;
        /// &lt;name&gt;Ed Spencer&lt;/name&gt;
        /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;2&lt;/id&gt;
        /// &lt;name&gt;Abe Elias&lt;/name&gt;
        /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;/users&gt;
        /// </code></pre>
        /// *
        /// <p>To parse this we just pass in a {@link #root} configuration that matches the 'users' above:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type  : 'xml',
        /// root  : 'users',
        /// record: 'user'
        /// }
        /// </code></pre>
        /// *
        /// <p>Note that XmlReader doesn't care whether your {@link #root} and {@link #record} elements are nested deep inside
        /// a larger structure, so a response like this will still work:
        /// *
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;deeply&gt;
        /// &lt;nested&gt;
        /// &lt;xml&gt;
        /// &lt;users&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;1&lt;/id&gt;
        /// &lt;name&gt;Ed Spencer&lt;/name&gt;
        /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;2&lt;/id&gt;
        /// &lt;name&gt;Abe Elias&lt;/name&gt;
        /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;/users&gt;
        /// &lt;/xml&gt;
        /// &lt;/nested&gt;
        /// &lt;/deeply&gt;
        /// </code></pre>
        /// *
        /// <p><u>Response metadata</u></p>
        /// *
        /// <p>The server can return additional data in its response, such as the {@link #totalProperty total number of records}
        /// and the {@link #successProperty success status of the response}. These are typically included in the XML response
        /// like this:</p>
        /// *
        /// <pre><code>
        /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
        /// &lt;total&gt;100&lt;/total&gt;
        /// &lt;success&gt;true&lt;/success&gt;
        /// &lt;users&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;1&lt;/id&gt;
        /// &lt;name&gt;Ed Spencer&lt;/name&gt;
        /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;user&gt;
        /// &lt;id&gt;2&lt;/id&gt;
        /// &lt;name&gt;Abe Elias&lt;/name&gt;
        /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
        /// &lt;/user&gt;
        /// &lt;/users&gt;
        /// </code></pre>
        /// *
        /// <p>If these properties are present in the XML response they can be parsed out by the XmlReader and used by the
        /// Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
        /// options:</p>
        /// *
        /// <pre><code>
        /// reader: {
        /// type: 'xml',
        /// root: 'users',
        /// totalProperty  : 'total',
        /// successProperty: 'success'
        /// }
        /// </code></pre>
        /// *
        /// <p>These final options are not necessary to make the Reader work, but can be useful when the server needs to report
        /// an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
        /// returned.</p>
        /// *
        /// <p><u>Response format</u></p>
        /// *
        /// <p><b>Note:</b> in order for the browser to parse a returned XML document, the Content-Type header in the HTTP
        /// response must be set to "text/xml" or "application/xml". This is very important - the XmlReader will not
        /// work correctly otherwise.</p>
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region XmlConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class XmlConfig
    {
        public XmlConfig(){}
        /// <summary>
        /// The DomQuery path to the repeated element which contains record information.
        /// </summary>
        public JsString record{get;set;}
    }
    #endregion
}
#endregion
#region Ext.data.writer
namespace Ext.data.writer
{
    #region Json
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Json
    {
        public Json(Ext.data.writer.JsonConfig config){}
        public Json(){}
        public void writeRecords(object request, object data){}
        public JsString alias{get;set;}
        /// <summary>
        /// @cfg {Boolean} allowSingle False to ensure that records are always wrapped in an array, even if there is only
        /// one record being sent. When there is more than one record, they will always be encoded into an array.
        /// Defaults to <tt>true</tt>. Example:
        /// <pre><code>
        /// // with allowSingle: true
        /// "root": {
        /// "first": "Mark",
        /// "last": "Corrigan"
        /// }
        /// // with allowSingle: false
        /// "root": [{
        /// "first": "Mark",
        /// "last": "Corrigan"
        /// }]
        /// </code></pre>
        /// </summary>
        public bool allowSingle{get;set;}
        /// <summary>
        /// @class Ext.data.writer.Json
        /// @extends Ext.data.writer.Writer
        /// This class is used to write {@link Ext.data.Model} data to the server in a JSON format.
        /// The {@link #allowSingle} configuration can be set to false to force the records to always be
        /// encoded in an array, even if there is only a single record being sent.
        /// @markdown
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @cfg {Boolean} encode True to use Ext.encode() on the data before sending. Defaults to <tt>false</tt>.
        /// The encode option should only be set to true when a {@link #root} is defined, because the values will be
        /// sent as part of the request parameters as opposed to a raw post. The root will be the name of the parameter
        /// sent to the server.
        /// </summary>
        public bool encode{get;set;}
        /// <summary>
        /// @class Ext.data.writer.Json
        /// @extends Ext.data.writer.Writer
        /// This class is used to write {@link Ext.data.Model} data to the server in a JSON format.
        /// The {@link #allowSingle} configuration can be set to false to force the records to always be
        /// encoded in an array, even if there is only a single record being sent.
        /// @markdown
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region JsonConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class JsonConfig
    {
        public JsonConfig(){}
        /// <summary>
        /// False to ensure that records are always wrapped in an array, even if there is only
        /// one record being sent. When there is more than one record, they will always be encoded into an array.
        /// Defaults to <tt>true</tt>. Example:
        /// <pre><code>
        /// // with allowSingle: true
        /// "root": {
        /// "first": "Mark",
        /// "last": "Corrigan"
        /// }
        /// // with allowSingle: false
        /// "root": [{
        /// "first": "Mark",
        /// "last": "Corrigan"
        /// }]
        /// </code></pre>
        /// </summary>
        public bool allowSingle{get;set;}
        /// <summary>
        /// True to use Ext.encode() on the data before sending. Defaults to <tt>false</tt>.
        /// The encode option should only be set to true when a {@link #root} is defined, because the values will be
        /// sent as part of the request parameters as opposed to a raw post. The root will be the name of the parameter
        /// sent to the server.
        /// </summary>
        public bool encode{get;set;}
        /// <summary>
        /// The key under which the records in this Writer will be placed. Defaults to <tt>undefined</tt>.
        /// Example generated request, using root: 'records':
        /// <pre><code>
        /// {'records': [{name: 'my record'}, {name: 'another record'}]}
        /// </code></pre>
        /// </summary>
        public JsString root{get;set;}
    }
    #endregion
    #region Writer
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Writer
    {
        public Writer(){}
        public Writer(WriterConfig config){}
        /// <summary>
        /// Creates new Writer.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Writer(object config){}
        /// <summary>
        /// Formats the data for each record before sending it to the server. This
        /// method should be overridden to format the data in a way that differs from the default.
        /// @param {Object} record The record that we are writing to the server.
        /// @return {Object} An object literal of name/value keys to be written to the server.
        /// By default this method returns the data property on the record.
        /// </summary>
        public object getRecordData(object record){return null;}
        /// <summary>
        /// Prepares a Proxy's Ext.data.Request object
        /// @param {Ext.data.Request} request The request object
        /// @return {Ext.data.Request} The modified request object
        /// </summary>
        public Request write(Request request){return null;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.writer.Writer
        /// @extends Object
        /// <p>Base Writer class used by most subclasses of {@link Ext.data.proxy.Server}. This class is
        /// responsible for taking a set of {@link Ext.data.Operation} objects and a {@link Ext.data.Request}
        /// object and modifying that request based on the Operations.</p>
        /// <p>For example a Ext.data.writer.Json would format the Operations and their {@link Ext.data.Model}
        /// instances based on the config options passed to the JsonWriter's constructor.</p>
        /// <p>Writers are not needed for any kind of local storage - whether via a
        /// {@link Ext.data.proxy.WebStorage Web Storage proxy} (see {@link Ext.data.proxy.LocalStorage localStorage}
        /// and {@link Ext.data.proxy.SessionStorage sessionStorage}) or just in memory via a
        /// {@link Ext.data.proxy.Memory MemoryProxy}.</p>
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @cfg {String} nameProperty This property is used to read the key for each value that will be sent to the server.
        /// For example:
        /// <pre><code>
        /// Ext.define('Person', {
        /// extend: 'Ext.data.Model',
        /// fields: [{
        /// name: 'first',
        /// mapping: 'firstName'
        /// }, {
        /// name: 'last',
        /// mapping: 'lastName'
        /// }, {
        /// name: 'age'
        /// }]
        /// });
        /// new Ext.data.writer.Writer({
        /// writeAllFields: true,
        /// nameProperty: 'mapping'
        /// });
        /// // This will be sent to the server
        /// {
        /// firstName: 'first name value',
        /// lastName: 'last name value',
        /// age: 1
        /// }
        /// </code></pre>
        /// Defaults to <tt>name</tt>. If the value is not present, the field name will always be used.
        /// </summary>
        public JsString nameProperty{get;set;}
        /// <summary>
        /// @cfg {Boolean} writeAllFields True to write all fields from the record to the server. If set to false it
        /// will only send the fields that were modified. Defaults to <tt>true</tt>. Note that any fields that have
        /// {@link Ext.data.Field#persist} set to false will still be ignored.
        /// </summary>
        public bool writeAllFields{get;set;}
    }
    #endregion
    #region WriterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class WriterConfig
    {
        public WriterConfig(){}
        /// <summary>
        /// This property is used to read the key for each value that will be sent to the server.
        /// For example:
        /// <pre><code>
        /// Ext.define('Person', {
        /// extend: 'Ext.data.Model',
        /// fields: [{
        /// name: 'first',
        /// mapping: 'firstName'
        /// }, {
        /// name: 'last',
        /// mapping: 'lastName'
        /// }, {
        /// name: 'age'
        /// }]
        /// });
        /// new Ext.data.writer.Writer({
        /// writeAllFields: true,
        /// nameProperty: 'mapping'
        /// });
        /// // This will be sent to the server
        /// {
        /// firstName: 'first name value',
        /// lastName: 'last name value',
        /// age: 1
        /// }
        /// </code></pre>
        /// Defaults to <tt>name</tt>. If the value is not present, the field name will always be used.
        /// </summary>
        public JsString nameProperty{get;set;}
        /// <summary>
        /// True to write all fields from the record to the server. If set to false it
        /// will only send the fields that were modified. Defaults to <tt>true</tt>. Note that any fields that have
        /// {@link Ext.data.Field#persist} set to false will still be ignored.
        /// </summary>
        public bool writeAllFields{get;set;}
    }
    #endregion
    #region Xml
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Xml
    {
        public Xml(Ext.data.writer.XmlConfig config){}
        public Xml(){}
        public void writeRecords(object request, object data){}
        public JsString alias{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @cfg {String} defaultDocumentRoot The root to be used if {@link #documentRoot} is empty and a root is required
        /// to form a valid XML document.
        /// </summary>
        public JsString defaultDocumentRoot{get;set;}
        /// <summary>
        /// @cfg {String} documentRoot The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.
        /// If there is more than 1 record and the root is not specified, the default document root will still be used
        /// to ensure a valid XML document is created.
        /// </summary>
        public JsString documentRoot{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {String} header A header to use in the XML document (such as setting the encoding or version).
        /// Defaults to <tt>''</tt>.
        /// </summary>
        public JsString header{get;set;}
        /// <summary>
        /// @cfg {String} record The name of the node to use for each record. Defaults to <tt>'record'</tt>.
        /// </summary>
        public JsString record{get;set;}
    }
    #endregion
    #region XmlConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class XmlConfig
    {
        public XmlConfig(){}
        /// <summary>
        /// The root to be used if {@link #documentRoot} is empty and a root is required
        /// to form a valid XML document.
        /// </summary>
        public JsString defaultDocumentRoot{get;set;}
        /// <summary>
        /// The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.
        /// If there is more than 1 record and the root is not specified, the default document root will still be used
        /// to ensure a valid XML document is created.
        /// </summary>
        public JsString documentRoot{get;set;}
        /// <summary>
        /// A header to use in the XML document (such as setting the encoding or version).
        /// Defaults to <tt>''</tt>.
        /// </summary>
        public JsString header{get;set;}
        /// <summary>
        /// The name of the node to use for each record. Defaults to <tt>'record'</tt>.
        /// </summary>
        public JsString record{get;set;}
    }
    #endregion
}
#endregion
#region Ext.dataview
namespace Ext.dataview
{
    #region ComponentList
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentList
    {
        public ComponentList(ComponentListConfig config){}
        public void applyIndexBar(object indexBar){}
        public void applyOnItemDisclosure(object config){}
        public ComponentList(){}
        public void doAddHeader(object item, object html){}
        public void doRefresh(){}
        public void doRefreshHeaders(){}
        public void doRemoveHeader(object item){}
        public void findGroupHeaderIndices(){}
        public void getClosestGroups(){}
        public void getDataItemConfig(object xtype, object record, object itemConfig){}
        public void getDisclosure(){}
        public void getItemConfig(){}
        public void getItemHeader(object item){}
        public void handleItemDisclosure(object disclosure, object e){}
        public void initialize(){}
        public void onIndex(object index){}
        public void onScroll(object scroller, object x, object y){}
        public void onStoreAdd(){}
        public void onStoreRemove(){}
        public void onStoreUpdate(){}
        /// <summary>
        /// Set the current active group
        /// @param {Object} group The group to set active
        /// @private
        /// </summary>
        public void setActiveGroup(object group){}
        public void updateIndexBar(object indexBar){}
        public void updateItemTpl(object newTpl){}
        public void updateOnItemDisclosure(object newOnItemDisclosure){}
        public void updatePinHeaders(object pinnedHeaders){}
        /// <summary>
        /// Set the current active group
        /// @param {Object} group The group to set active
        /// @private
        /// </summary>
        [JsProperty]
        public object ActiveGroup{private get;[JsMethod(Name="setActiveGroup")]set;}
        /// <summary>
        /// @private - To be made a sample
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @private - To be made a sample
        /// </summary>
        public JsString extend{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region ComponentListConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ComponentListConfig
    {
        public ComponentListConfig(){}
        /// <summary>
        /// True to clear any selections on the list when the list is deactivated (defaults to true).
        /// @accessor
        /// </summary>
        public bool clearSelectionOnDeactivate{get;set;}
        /// <summary>
        /// True to render an alphabet IndexBar docked on the right.
        /// This can also be a config object that will be passed to {@link Ext.IndexBar}
        /// (defaults to false)
        /// @accessor
        /// </summary>
        public object indexBar{get;set;}
        /// <summary>
        /// True to display a disclosure icon on each list item.
        /// This won't bind a listener to the tap event. The list
        /// will still fire the disclose event though.
        /// By setting this config to a function, it will automatically
        /// add a tap event listeners to the disclosure buttons which
        /// will fire your function.
        /// Finally you can specify an object with a 'scope' and 'handler'
        /// property defined. This will also be bound to the tap event listener
        /// and is useful when you want to change the scope of the handler.
        /// @accessor
        /// </summary>
        public object onItemDisclosure{get;set;}
        /// <summary>
        /// Whether or not to pin headers on top of item groups while scrolling for an iPhone native list experience.
        /// Defaults to <tt>false</tt> on Android and Blackberry (for performance reasons)
        /// Defaults to <tt>true</tt> on other devices.
        /// @accessor
        /// </summary>
        public bool pinHeaders{get;set;}
        /// <summary>
        /// True to prevent the item selection when the user
        /// taps a disclose icon. Defaults to <tt>true</tt>
        /// @accessor
        /// </summary>
        public bool preventSelectionOnDisclose{get;set;}
    }
    #endregion
    #region ComponentView
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentView
    {
        public ComponentView(ComponentViewConfig config){}
        public ComponentView(){}
        public void doAddPressedCls(object record){}
        public void doCreateItems(object records, object ln){}
        public void doInitialize(){}
        public void doItemDeSelect(object me, object record){}
        public void doItemSelect(object me, object record){}
        public void getDataItemConfig(object xtype, object record, object itemConfig){}
        public void getViewItems(){}
        public void moveItemsFromCache(object records){}
        public void moveItemsToCache(object from, object to){}
        public void onContainerTrigger(){}
        public void onItemDoubleTap(object item, object record, object e){}
        public void onItemSwipe(object item, object record, object e){}
        public void onItemTap(object item, object record, object e){}
        public void onItemTouchEnd(object item, object record, object e){}
        public void onItemTouchMove(object item, object record, object e){}
        public void onItemTouchStart(object item, object record, object e){}
        public void onItemTrigger(object item, object record, object e){}
        public void updateListItem(object record, object item){}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// DataView makes it easy to create lots of components dynamically, usually based off a {@link Ext.data.Store Store}.
        /// It's great for rendering lots of data from your server backend or any other data source and is what powers
        /// components like {@link Ext.List}.
        /// *
        /// Use DataView whenever you want to show sets of the same component many times, for examples in apps like these:
        /// *
        /// * List of messages in an email app
        /// * Showing latest news/tweets
        /// * Tiled set of albums in an HTML5 music player
        /// *
        /// <h2>Creating a Simple DataView</h2>
        /// *
        /// At its simplest, a DataView is just a Store full of data and a simple template that we use to render each item:
        /// *
        /// var touchTeam = Ext.create('Ext.DataView', {
        /// store: {
        /// fields: ['name', 'age'],
        /// data: [
        /// {name: 'Jamie Avins',  age: 100},
        /// {name: 'Rob Dougan',   age: 21},
        /// {name: 'Tommy Maintz', age: 24},
        /// {name: 'Jacky Nguyen', age: 24},
        /// {name: 'Ed Spencer',   age: 26}
        /// ]
        /// },
        /// *
        /// itemConfig: {
        /// tpl: '{name} is {age} years old'
        /// }
        /// });
        /// *
        /// Here we just defined everything inline so it's all local with nothing being loaded from a server. For each of the 5
        /// data items defined in our Store, DataView will render a {@link Ext.Component Component} and pass in the name and age
        /// data. The component will use the tpl we provided above, rendering the data in the curly bracket placeholders we
        /// provided.
        /// *
        /// Because DataView is integrated with Store, any changes to the Store are immediately reflected on the screen. For
        /// example, if we add a new record to the Store it will be rendered into our DataView:
        /// *
        /// touchTeam.getStore().add({
        /// name: 'Abe Elias',
        /// age: 33
        /// });
        /// *
        /// We didn't have to manually update the DataView, it's just automatically updated. The same happens if we modify one
        /// of the existing records in the Store:
        /// *
        /// touchTeam.getStore().getAt(0).set('age', 42);
        /// *
        /// This will get the first record in the Store (Jamie), change the age to 42 and automatically update what's on the
        /// screen.
        /// *
        /// <h2>Loading data from a server</h2>
        /// *
        /// We often want to load data from our server or some other web service so that we don't have to hard code it all
        /// locally. Let's say we want to load all of the latest tweets about Sencha Touch into a DataView, and for each one
        /// render the user's profile picture, user name and tweet message. To do this all we have to do is modify the
        /// {@link #store} and {@link #itemConfig} a little:
        /// *
        /// Ext.create('Ext.DataView', {
        /// fullscreen: true,
        /// store: {
        /// autoLoad: true,
        /// fields: ['from_user', 'text', 'profile_image_url'],
        /// *
        /// proxy: {
        /// type: 'jsonp',
        /// url: 'http://search.twitter.com/search.json?q=Sencha Touch',
        /// *
        /// reader: {
        /// type: 'json',
        /// root: 'results'
        /// }
        /// }
        /// },
        /// *
        /// itemConfig: {
        /// tpl: '<img src="{profile_image_url}" /><h2>{from_user}</h2><p>{text}</p>'
        /// }
        /// });
        /// *
        /// The Store no longer has hard coded data, instead we've provided a {@link Ext.data.proxy.Proxy Proxy}, which fetches
        /// the data for us. In this case we used a JSON-P proxy so that we can load from Twitter's JSON-P search API. We also
        /// specified the fields present for each tweet, and used Store's {@link Ext.data.Store#autoLoad autoLoad} configuration
        /// to load automatically. Finally, we configured a Reader to decode the response from Twitter, telling it to expect
        /// JSON and that the tweets can be found in the 'results' part of the JSON response.
        /// *
        /// The last thing we did is update our template to render the image, twitter username and message. All we need to do
        /// now is add a little CSS to style the list the way we want it and we end up with this
        /// *
        /// <<<<<<<<<<<<<< SCREENSHOT HERE >>>>>>>>>>>>>
        /// *
        /// </summary>
        public JsString extend{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region ComponentViewConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ComponentViewConfig
    {
        public ComponentViewConfig(){}
        /// <summary>
        /// A configuration object that is passed to every item created by the DataView. Because each item that a
        /// DataView renders is a Component, we can pass configuration options to each component to easily customize how
        /// each child component behaves.
        /// @accessor
        /// </summary>
        public object itemConfig{get;set;}
    }
    #endregion
    #region DataItem
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DataItem
    {
        public DataItem(DataItemConfig config){}
        public DataItem(){}
        public void initialize(){}
        public void onDoubleTap(object e){}
        public void onSwipe(object e){}
        public void onTap(object e){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e){}
        /// <summary>
        /// Updates this container's child items, passing through the dataMap.
        /// @param newRecord
        /// @private
        /// </summary>
        public void updateRecord(object newRecord){}
        /// <summary>
        /// A DataItem is a container for {@link Ext.dataview.ComponentView ComponentViews}. It ties together
        /// {@link Ext.data.Model records} to its contained Components via a {@link #dataMap dataMap} configuration.
        /// *
        /// For example, lets say you have a `text configuration which, when applied, gets turned into an instance of an
        /// Ext.Component. We want to update the {@link #html} of a sub-component when the 'text' field of the record gets
        /// changed.
        /// As you can see below, it is simply a matter of setting the key of the object to be the getter of the config
        /// (getText), and then give that property a value of an object, which then has 'setHtml' (the html setter) as the key,
        /// and 'text' (the field name) as the value. You can continue this for a as many sub-components as you wish.
        /// *
        /// dataMap: {
        /// // When the record is updated, get the text configuration, and
        /// // call {@link #setHtml} with the 'text' field of the record.
        /// getText: {
        /// setHtml: 'text'
        /// },
        /// *
        /// // When the record is updated, get the userName configuration, and
        /// // call {@link #setHtml} with the 'from_user' field of the record.
        /// getUserName: {
        /// setHtml: 'from_user'
        /// },
        /// *
        /// // When the record is updated, get the avatar configuration, and
        /// // call `setSrc` with the 'profile_image_url' field of the record.
        /// getAvatar: {
        /// setSrc: 'profile_image_url'
        /// }
        /// },
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// A DataItem is a container for {@link Ext.dataview.ComponentView ComponentViews}. It ties together
        /// {@link Ext.data.Model records} to its contained Components via a {@link #dataMap dataMap} configuration.
        /// *
        /// For example, lets say you have a `text configuration which, when applied, gets turned into an instance of an
        /// Ext.Component. We want to update the {@link #html} of a sub-component when the 'text' field of the record gets
        /// changed.
        /// As you can see below, it is simply a matter of setting the key of the object to be the getter of the config
        /// (getText), and then give that property a value of an object, which then has 'setHtml' (the html setter) as the key,
        /// and 'text' (the field name) as the value. You can continue this for a as many sub-components as you wish.
        /// *
        /// dataMap: {
        /// // When the record is updated, get the text configuration, and
        /// // call {@link #setHtml} with the 'text' field of the record.
        /// getText: {
        /// setHtml: 'text'
        /// },
        /// *
        /// // When the record is updated, get the userName configuration, and
        /// // call {@link #setHtml} with the 'from_user' field of the record.
        /// getUserName: {
        /// setHtml: 'from_user'
        /// },
        /// *
        /// // When the record is updated, get the avatar configuration, and
        /// // call `setSrc` with the 'profile_image_url' field of the record.
        /// getAvatar: {
        /// setSrc: 'profile_image_url'
        /// }
        /// },
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region DataItemConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DataItemConfig
    {
        public DataItemConfig(){}
        /// <summary>
        /// The model instance of this DataItem. It is controlled by the Component DataView
        /// @accessor
        /// </summary>
        public Model record{get;set;}
    }
    #endregion
    #region DataView
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DataView
    {
        public DataView(DataViewConfig config){}
        public void addListItem(object index, object record){}
        public void applyItemTpl(object config){}
        public void applyStore(object store){}
        public DataView(){}
        public void doAddPressedCls(object record){}
        public void doCreateItems(object records, object ln){}
        public void doInitialize(){}
        public void doItemDeSelect(object me, object record){}
        public void doItemSelect(object me, object record){}
        public void doRefresh(object me){}
        public void getItemElementConfig(object index, object data){}
        public void getViewItems(){}
        public void initialize(){}
        public void moveItemsFromCache(object records, object index){}
        public void moveItemsToCache(object from, object to){}
        public void onAfterRender(){}
        public void onBeforeLoad(){}
        public void onContainerTrigger(){}
        public void onItemDeselect(object record, object suppressEvent){}
        public void onItemDoubleTap(object e){}
        public void onItemSelect(object record, object suppressEvent){}
        public void onItemSwipe(object e){}
        public void onItemTap(object e){}
        public void onItemTouchEnd(object e){}
        public void onItemTouchMove(object e){}
        public void onItemTouchStart(object e){}
        public void onItemTrigger(object e){}
        public void onStoreAdd(object store, object records, object index){}
        public void onStoreClear(){}
        public void onStoreRemove(object store, object record, object index){}
        public void onStoreUpdate(object store, object record){}
        /// <summary>
        /// Refreshes the view by reloading the data from the store and re-rendering the template.
        /// </summary>
        public void refresh(){}
        public void updateData(object data){}
        public void updateListItem(object record, object item){}
        public void updateStore(object newStore, object oldStore){}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// DataView makes it easy to create lots of components dynamically, usually based off a {@link Ext.data.Store Store}.
        /// It's great for rendering lots of data from your server backend or any other data source and is what powers
        /// components like {@link Ext.List}.
        /// *
        /// Use DataView whenever you want to show sets of the same component many times, for examples in apps like these:
        /// *
        /// - List of messages in an email app
        /// - Showing latest news/tweets
        /// - Tiled set of albums in an HTML5 music player
        /// *
        /// # Creating a Simple DataView
        /// *
        /// At its simplest, a DataView is just a Store full of data and a simple template that we use to render each item:
        /// *
        /// @example miniphone preview
        /// var touchTeam = Ext.create('Ext.DataView', {
        /// fullscreen: true,
        /// store: {
        /// fields: ['name', 'age'],
        /// data: [
        /// {name: 'Jamie',  age: 100},
        /// {name: 'Rob',   age: 21},
        /// {name: 'Tommy', age: 24},
        /// {name: 'Jacky', age: 24},
        /// {name: 'Ed',   age: 26}
        /// ]
        /// },
        /// *
        /// itemTpl: '<div>{name} is {age} years old</div>'
        /// });
        /// *
        /// Here we just defined everything inline so it's all local with nothing being loaded from a server. For each of the 5
        /// data items defined in our Store, DataView will render a {@link Ext.Component Component} and pass in the name and age
        /// data. The component will use the tpl we provided above, rendering the data in the curly bracket placeholders we
        /// provided.
        /// *
        /// Because DataView is integrated with Store, any changes to the Store are immediately reflected on the screen. For
        /// example, if we add a new record to the Store it will be rendered into our DataView:
        /// *
        /// touchTeam.getStore().add({
        /// name: 'Abe Elias',
        /// age: 33
        /// });
        /// *
        /// We didn't have to manually update the DataView, it's just automatically updated. The same happens if we modify one
        /// of the existing records in the Store:
        /// *
        /// touchTeam.getStore().getAt(0).set('age', 42);
        /// *
        /// This will get the first record in the Store (Jamie), change the age to 42 and automatically update what's on the
        /// screen.
        /// @example miniphone
        /// var touchTeam = Ext.create('Ext.DataView', {
        /// fullscreen: true,
        /// store: {
        /// fields: ['name', 'age'],
        /// data: [
        /// {name: 'Jamie',  age: 100},
        /// {name: 'Rob',   age: 21},
        /// {name: 'Tommy', age: 24},
        /// {name: 'Jacky', age: 24},
        /// {name: 'Ed',   age: 26}
        /// ]
        /// },
        /// *
        /// itemTpl: '<div>{name} is {age} years old</div>'
        /// });
        /// touchTeam.getStore().add({
        /// name: 'Abe Elias',
        /// age: 33
        /// });
        /// touchTeam.getStore.getAt(0).set('age', 42);
        /// *
        /// # Loading data from a server
        /// *
        /// We often want to load data from our server or some other web service so that we don't have to hard code it all
        /// locally. Let's say we want to load all of the latest tweets about Sencha Touch into a DataView, and for each one
        /// render the user's profile picture, user name and tweet message. To do this all we have to do is modify the
        /// {@link #store} and {@link #itemTpl} a little:
        /// *
        /// @example portrait
        /// Ext.create('Ext.DataView', {
        /// fullscreen: true,
        /// cls: 'twitterView',
        /// store: {
        /// autoLoad: true,
        /// fields: ['from_user', 'text', 'profile_image_url'],
        /// *
        /// proxy: {
        /// type: 'jsonp',
        /// url: 'http://search.twitter.com/search.json?q=Sencha Touch',
        /// *
        /// reader: {
        /// type: 'json',
        /// root: 'results'
        /// }
        /// }
        /// },
        /// *
        /// itemTpl: '<img src="{profile_image_url}" /><h2>{from_user}</h2><p>{text}</p><div style="clear: both"></div>'
        /// });
        /// *
        /// The Store no longer has hard coded data, instead we've provided a {@link Ext.data.proxy.Proxy Proxy}, which fetches
        /// the data for us. In this case we used a JSON-P proxy so that we can load from Twitter's JSON-P search API. We also
        /// specified the fields present for each tweet, and used Store's {@link Ext.data.Store#autoLoad autoLoad} configuration
        /// to load automatically. Finally, we configured a Reader to decode the response from Twitter, telling it to expect
        /// JSON and that the tweets can be found in the 'results' part of the JSON response.
        /// *
        /// The last thing we did is update our template to render the image, twitter username and message. All we need to do
        /// now is add a little CSS to style the list the way we want it and we end up with a very basic twitter viewer. Click
        /// the preview button on the example above to see it in action.
        /// </summary>
        public JsString extend{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region DataViewConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DataViewConfig
    {
        public DataViewConfig(){}
        /// <summary>
        /// When set to true, tapping on the DataView's background (i.e. not on
        /// an item in the DataView) will deselect any currently selected items.
        /// @accessor
        /// </summary>
        public bool deselectOnContainerClick{get;set;}
        /// <summary>
        /// The tpl to use for each of the items displayed in this DataView.
        /// </summary>
        public object itemTpl{get;set;}
        /// <summary>
        /// A string to display during data load operations (defaults to 'Loading...').  If specified, this text will be
        /// displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
        /// contents will continue to display normally until the new data is loaded and the contents are replaced.
        /// </summary>
        public JsString loadingText{get;set;}
        /// <summary>
        /// The CSS class to apply to an item on the view while it is being pressed.
        /// @accessor
        /// </summary>
        public JsString pressedCls{get;set;}
        /// <summary>
        /// The amount of delay between the tapstart and the moment we add the pressedCls.
        /// Settings this to true defaults to 100ms.
        /// @accessor
        /// </summary>
        public JsNumber pressedDelay{get;set;}
        /// <summary>
        /// The CSS class to apply to an item on the view while it is selected.
        /// @accessor
        /// </summary>
        public JsString selectedCls{get;set;}
        /// <summary>
        /// Can be either a Store instance or a configuration object that will be turned into a Store. The Store is used
        /// to populate the set of items that will be rendered in the DataView. See the DataView intro documentation for
        /// more information about the relationship between Store and DataView.
        /// @accessor
        /// </summary>
        public object store{get;set;}
        /// <summary>
        /// Determines what type of touch event is recognized as a touch on the container.
        /// Valid options are 'tap' and 'singletap'.
        /// @accessor
        /// </summary>
        public JsString triggerCtEvent{get;set;}
        /// <summary>
        /// Determines what type of touch event causes an item to be selected.
        /// Valid options are 'tap' and 'singletap'.
        /// @accessor
        /// </summary>
        public JsString triggerEvent{get;set;}
    }
    #endregion
    #region IndexBar
    [JsType(JsMode.Prototype, Export=false)]
    public partial class IndexBar
    {
        public IndexBar(IndexBarConfig config){}
        public IndexBar(){}
        public void getElementConfig(){}
        public void initialize(){}
        public void onTouchEnd(object e, object t){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e, object t){}
        public void updateDirection(object newDirection, object oldDirection){}
        public void updateLetters(object letters){}
        public void updateListPrefix(object listPrefix){}
        /// <summary>
        /// IndexBar is a component used to display a list of data (primarily an alphabet) which can then be used to quickly
        /// navigate through a list (see {@link Ext.List}) of data. When a user taps on an item in the {@link Ext.IndexBar},
        /// it will fire the {@link #index} event.
        /// *
        /// # Example:
        /// *
        /// Here is an example of the usage in a {@link Ext.List}:
        /// *
        /// @example phone portrait preview
        /// Ext.regModel('Contact', {
        /// fields: ['firstName', 'lastName']
        /// });
        /// *
        /// var store = new Ext.data.JsonStore({
        /// model: 'Contact',
        /// sorters: 'lastName',
        /// *
        /// getGroupString: function(record) {
        /// return record.get('lastName')[0];
        /// },
        /// *
        /// data: [
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Jacky',   lastName: 'Nguyen'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'},
        /// {firstName: 'Nigel',   lastName: 'White'},
        /// {firstName: 'Don',     lastName: 'Griffin'},
        /// {firstName: 'Nico',    lastName: 'Ferrero'},
        /// {firstName: 'Nicolas', lastName: 'Belmonte'},
        /// {firstName: 'Jason',   lastName: 'Johnston'}
        /// ]
        /// });
        /// *
        /// var list = new Ext.List({
        /// fullscreen: true,
        /// itemTpl: '<div class="contact">{firstName} <strong>{lastName}</strong></div>',
        /// *
        /// grouped     : true,
        /// indexBar    : true,
        /// store: store,
        /// hideOnMaskTap: false
        /// });
        /// *
        /// Alternatively you can initate the {@link Ext.IndexBar} component manually in a custom component by using something
        /// similar to the following example:
        /// *
        /// var indexBar = new Ext.dataview.IndexBar({
        /// dock: 'right',
        /// overlay: true,
        /// alphabet: true
        /// });
        /// *
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// IndexBar is a component used to display a list of data (primarily an alphabet) which can then be used to quickly
        /// navigate through a list (see {@link Ext.List}) of data. When a user taps on an item in the {@link Ext.IndexBar},
        /// it will fire the {@link #index} event.
        /// *
        /// # Example:
        /// *
        /// Here is an example of the usage in a {@link Ext.List}:
        /// *
        /// @example phone portrait preview
        /// Ext.regModel('Contact', {
        /// fields: ['firstName', 'lastName']
        /// });
        /// *
        /// var store = new Ext.data.JsonStore({
        /// model: 'Contact',
        /// sorters: 'lastName',
        /// *
        /// getGroupString: function(record) {
        /// return record.get('lastName')[0];
        /// },
        /// *
        /// data: [
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Jacky',   lastName: 'Nguyen'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'},
        /// {firstName: 'Nigel',   lastName: 'White'},
        /// {firstName: 'Don',     lastName: 'Griffin'},
        /// {firstName: 'Nico',    lastName: 'Ferrero'},
        /// {firstName: 'Nicolas', lastName: 'Belmonte'},
        /// {firstName: 'Jason',   lastName: 'Johnston'}
        /// ]
        /// });
        /// *
        /// var list = new Ext.List({
        /// fullscreen: true,
        /// itemTpl: '<div class="contact">{firstName} <strong>{lastName}</strong></div>',
        /// *
        /// grouped     : true,
        /// indexBar    : true,
        /// store: store,
        /// hideOnMaskTap: false
        /// });
        /// *
        /// Alternatively you can initate the {@link Ext.IndexBar} component manually in a custom component by using something
        /// similar to the following example:
        /// *
        /// var indexBar = new Ext.dataview.IndexBar({
        /// dock: 'right',
        /// overlay: true,
        /// alphabet: true
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region IndexBarConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class IndexBarConfig
    {
        public IndexBarConfig(){}
        /// <summary>
        /// Layout direction, can be either 'vertical' or 'horizontal'
        /// @accessor
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// The letters to show on the index bar.
        /// @accessor
        /// </summary>
        public JsArray letters{get;set;}
        /// <summary>
        /// The prefix string to be appended at the beginning of the list.
        /// E.g: useful to add a "#" prefix before numbers.
        /// @accessor
        /// </summary>
        public JsString listPrefix{get;set;}
    }
    #endregion
    #region List
    [JsType(JsMode.Prototype, Export=false)]
    public partial class List
    {
        public List(ListConfig config){}
        public void applyIndexBar(object indexBar){}
        public void applyOnItemDisclosure(object config){}
        public List(){}
        public void doAddHeader(object item, object html){}
        public void doRefresh(){}
        public void doRefreshHeaders(){}
        public void doRemoveHeader(object item){}
        public void findGroupHeaderIndices(){}
        public void getClosestGroups(){}
        public void getDisclosure(){}
        public void getItemElementConfig(object index, object data){}
        public void getItemHeader(object item){}
        public void handleItemDisclosure(object e){}
        public void initialize(){}
        public void onIndex(object index){}
        public void onScroll(object scroller, object x, object y){}
        public void onStoreAdd(){}
        public void onStoreRemove(){}
        public void onStoreUpdate(){}
        /// <summary>
        /// Set the current active group
        /// @param {Object} group The group to set active
        /// @private
        /// </summary>
        public void setActiveGroup(object group){}
        public void translateHeaderCssPosition(object offset){}
        public void translateHeaderTransform(object offset){}
        public void updateIndexBar(object indexBar){}
        public void updateListItem(object record, object item){}
        public void updateOnItemDisclosure(object newOnItemDisclosure){}
        public void updatePinHeaders(object pinnedHeaders){}
        /// <summary>
        /// Set the current active group
        /// @param {Object} group The group to set active
        /// @private
        /// </summary>
        [JsProperty]
        public object ActiveGroup{private get;[JsMethod(Name="setActiveGroup")]set;}
        /// <summary>
        /// List is a custom styled DataView which allows Grouping, Indexing, Icons, and a Disclosure.
        /// *
        /// # Example:
        /// *
        /// Here is an example of the usage in a {@link Ext.List}:
        /// *
        /// @example miniphone preview
        /// Ext.regModel('Contact', {
        /// fields: ['firstName', 'lastName']
        /// });
        /// *
        /// var store = new Ext.data.JsonStore({
        /// model: 'Contact',
        /// sorters: 'lastName',
        /// *
        /// getGroupString: function(record) {
        /// return record.get('lastName')[0];
        /// },
        /// *
        /// data: [
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Jacky',   lastName: 'Nguyen'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'},
        /// {firstName: 'Nigel',   lastName: 'White'},
        /// {firstName: 'Don',     lastName: 'Griffin'},
        /// {firstName: 'Nico',    lastName: 'Ferrero'},
        /// {firstName: 'Nicolas', lastName: 'Belmonte'},
        /// {firstName: 'Jason',   lastName: 'Johnston'}
        /// ]
        /// });
        /// *
        /// var list = new Ext.List({
        /// fullscreen: true,
        /// itemTpl: '<div class="contact">{firstName} <strong>{lastName}</strong></div>',
        /// store: store
        /// });
        /// *
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// List is a custom styled DataView which allows Grouping, Indexing, Icons, and a Disclosure.
        /// *
        /// # Example:
        /// *
        /// Here is an example of the usage in a {@link Ext.List}:
        /// *
        /// @example miniphone preview
        /// Ext.regModel('Contact', {
        /// fields: ['firstName', 'lastName']
        /// });
        /// *
        /// var store = new Ext.data.JsonStore({
        /// model: 'Contact',
        /// sorters: 'lastName',
        /// *
        /// getGroupString: function(record) {
        /// return record.get('lastName')[0];
        /// },
        /// *
        /// data: [
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Jacky',   lastName: 'Nguyen'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'},
        /// {firstName: 'Nigel',   lastName: 'White'},
        /// {firstName: 'Don',     lastName: 'Griffin'},
        /// {firstName: 'Nico',    lastName: 'Ferrero'},
        /// {firstName: 'Nicolas', lastName: 'Belmonte'},
        /// {firstName: 'Jason',   lastName: 'Johnston'}
        /// ]
        /// });
        /// *
        /// var list = new Ext.List({
        /// fullscreen: true,
        /// itemTpl: '<div class="contact">{firstName} <strong>{lastName}</strong></div>',
        /// store: store
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region ListConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ListConfig
    {
        public ListConfig(){}
        /// <summary>
        /// True to clear any selections on the list when the list is deactivated (defaults to true).
        /// @accessor
        /// </summary>
        public bool clearSelectionOnDeactivate{get;set;}
        /// <summary>
        /// True to render an alphabet IndexBar docked on the right.
        /// This can also be a config object that will be passed to {@link Ext.IndexBar}
        /// (defaults to false)
        /// @accessor
        /// </summary>
        public object indexBar{get;set;}
        /// <summary>
        /// True to display a disclosure icon on each list item.
        /// This won't bind a listener to the tap event. The list
        /// will still fire the disclose event though.
        /// By setting this config to a function, it will automatically
        /// add a tap event listeners to the disclosure buttons which
        /// will fire your function.
        /// Finally you can specify an object with a 'scope' and 'handler'
        /// property defined. This will also be bound to the tap event listener
        /// and is useful when you want to change the scope of the handler.
        /// @accessor
        /// </summary>
        public object onItemDisclosure{get;set;}
        /// <summary>
        /// Whether or not to pin headers on top of item groups while scrolling for an iPhone native list experience.
        /// Defaults to <tt>false</tt> on Android and Blackberry (for performance reasons)
        /// Defaults to <tt>true</tt> on other devices.
        /// @accessor
        /// </summary>
        public bool pinHeaders{get;set;}
        /// <summary>
        /// True to prevent the item selection when the user
        /// taps a disclose icon. Defaults to <tt>true</tt>
        /// @accessor
        /// </summary>
        public bool preventSelectionOnDisclose{get;set;}
    }
    #endregion
    #region ListDisclosure
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ListDisclosure
    {
        public ListDisclosure(){}
        public void initialize(){}
        public void onTap(object e){}
        /// <summary>
        /// @private - To be made a sample
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private - To be made a sample
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region ListIcon
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ListIcon
    {
        public ListIcon(){}
        /// <summary>
        /// @private - To be made a sample
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private - To be made a sample
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region ListItem
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ListItem
    {
        public ListItem(){}
        public void applyDisclosure(object config){}
        public void applyHeader(object config){}
        public void applyIcon(object config){}
        public void updateDisclosure(object newDisclosure, object oldDisclosure){}
        public void updateHeader(object newHeader, object oldHeader){}
        public void updateIcon(object newIcon){}
        /// <summary>
        /// @private - To be merged when DataView behaviors are used.
        /// </summary>
        public JsString extend{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region ListItemHeader
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ListItemHeader
    {
        public ListItemHeader(){}
        /// <summary>
        /// @private - To be made a sample
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private - To be made a sample
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region NestedList
    [JsType(JsMode.Prototype, Export=false)]
    public partial class NestedList
    {
        public NestedList(NestedListConfig config){}
        public NestedList(){}
        public void applyBackButton(object config){}
        public void applyDetailCard(object config){}
        public void applyDetailContainer(object config){}
        public void applyStore(object store){}
        public void applyToolbar(object config){}
        public void doBack(object me, object node, object lastActiveList, object detailCardActive){}
        /// <summary>
        /// Override this method to provide custom template rendering of individual
        /// nodes. The template will receive all data within the Record and will also
        /// receive whether or not it is a leaf node.
        /// @param {Ext.data.Record} node
        /// </summary>
        public void getItemTextTpl(object node){}
        /// <summary>
        /// @private
        /// Returns the list config for a specified node.
        /// @param {HTMLElement} node The node for the list config
        /// </summary>
        public void getListConfig(HtmlElement node){}
        /// <summary>
        /// Override this method to provide custom template rendering of titles/back
        /// buttons when useTitleAsBackText is enabled.
        /// @param {Ext.data.Record} node
        /// </summary>
        public void getTitleTextTpl(object node){}
        /// <summary>
        /// The leaf you want to navigate to. You should pass a node instance.
        /// @param {Ext.data.NodeInterface} node The specified node to navigate to
        /// </summary>
        public void goToLeaf(NodeInterface node){}
        /// <summary>
        /// Method to handle going to a specific node within this nested list. Node must be part of the
        /// internal {@link #store}.
        /// @param {Ext.data.NodeInterface} node The specified node to navigate to
        /// </summary>
        public void goToNode(NodeInterface node){}
        /// <summary>
        /// @private
        /// Returns true if the passed node should have a reverse animation from the previous current {@link #node}
        /// @param {Ext.data.NodeInterface} node
        /// </summary>
        public void goToNodeReverseAnimation(NodeInterface node){}
        /// <summary>
        /// @event load
        /// @alias Ext.data.Store#load
        /// </summary>
        public void initialize(){}
        /// <summary>
        /// Called when the backButton has been tapped
        /// </summary>
        public void onBackTap(){}
        /// <summary>
        /// Called when an list item has been tapped
        /// @param {Ext.List} list The subList the item is on
        /// @param {Number} index The id of the item tapped
        /// @param {Ext.Element} item The list item tapped
        /// @param {Ext.event.Event} e The event
        /// </summary>
        public void onItemDoubleTap(object list, JsNumber index, object item, Ext.@event.Event e){}
        /// <summary>
        /// Called when an list item has been tapped
        /// @param {Ext.List} list The subList the item is on
        /// @param {Number} index The id of the item tapped
        /// @param {Ext.Element} item The list item tapped
        /// @param {Ext.event.Event} e The event
        /// </summary>
        public void onItemTap(object list, JsNumber index, object item, Ext.@event.Event e){}
        public void onLoad(object store){}
        /// <summary>
        /// @private
        /// </summary>
        public void renderTitleText(object node, object forBackButton){}
        public void setUseToolbar(object config){}
        /// <summary>
        /// @private
        /// Method which updates the {@link #backButton} and {@link #toolbar} with the latest information from
        /// the current {@link #node}.
        /// </summary>
        public void syncToolbar(object forceDetail){}
        public void updateBackButton(object newButton, object oldButton){}
        public void updateBackText(object newText){}
        public void updateData(object data){}
        public void updateStore(object newStore, object oldStore){}
        public void updateTitle(object newTitle){}
        public void updateToolbar(object newToolbar, object oldToolbar){}
        /// <summary>
        /// NestedList provides a miller column interface to navigate between nested sets
        /// and provide a clean interface with limited screen real-estate.
        /// *
        /// @example miniphone preview
        /// var data = {
        /// text: 'Groceries',
        /// items: [{
        /// text: 'Drinks',
        /// items: [{
        /// text: 'Water',
        /// items: [{
        /// text: 'Sparkling',
        /// leaf: true
        /// }, {
        /// text: 'Still',
        /// leaf: true
        /// }]
        /// }, {
        /// text: 'Coffee',
        /// leaf: true
        /// }, {
        /// text: 'Espresso',
        /// leaf: true
        /// }, {
        /// text: 'Redbull',
        /// leaf: true
        /// }, {
        /// text: 'Coke',
        /// leaf: true
        /// }, {
        /// text: 'Diet Coke',
        /// leaf: true
        /// }]
        /// }, {
        /// text: 'Fruit',
        /// items: [{
        /// text: 'Bananas',
        /// leaf: true
        /// }, {
        /// text: 'Lemon',
        /// leaf: true
        /// }]
        /// }, {
        /// text: 'Snacks',
        /// items: [{
        /// text: 'Nuts',
        /// leaf: true
        /// }, {
        /// text: 'Pretzels',
        /// leaf: true
        /// }, {
        /// text: 'Wasabi Peas',
        /// leaf: true
        /// }]
        /// }]
        /// };
        /// *
        /// Ext.regModel('ListItem', {
        /// fields: [{
        /// name: 'text',
        /// type: 'string'
        /// }]
        /// });
        /// *
        /// var store = new Ext.data.TreeStore({
        /// model: 'ListItem',
        /// defaultRootProperty: 'items',
        /// root: data
        /// });
        /// *
        /// var nestedList = new Ext.NestedList({
        /// fullscreen: true,
        /// title: 'Groceries',
        /// displayField: 'text',
        /// store: store
        /// });
        /// *
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// NestedList provides a miller column interface to navigate between nested sets
        /// and provide a clean interface with limited screen real-estate.
        /// *
        /// @example miniphone preview
        /// var data = {
        /// text: 'Groceries',
        /// items: [{
        /// text: 'Drinks',
        /// items: [{
        /// text: 'Water',
        /// items: [{
        /// text: 'Sparkling',
        /// leaf: true
        /// }, {
        /// text: 'Still',
        /// leaf: true
        /// }]
        /// }, {
        /// text: 'Coffee',
        /// leaf: true
        /// }, {
        /// text: 'Espresso',
        /// leaf: true
        /// }, {
        /// text: 'Redbull',
        /// leaf: true
        /// }, {
        /// text: 'Coke',
        /// leaf: true
        /// }, {
        /// text: 'Diet Coke',
        /// leaf: true
        /// }]
        /// }, {
        /// text: 'Fruit',
        /// items: [{
        /// text: 'Bananas',
        /// leaf: true
        /// }, {
        /// text: 'Lemon',
        /// leaf: true
        /// }]
        /// }, {
        /// text: 'Snacks',
        /// items: [{
        /// text: 'Nuts',
        /// leaf: true
        /// }, {
        /// text: 'Pretzels',
        /// leaf: true
        /// }, {
        /// text: 'Wasabi Peas',
        /// leaf: true
        /// }]
        /// }]
        /// };
        /// *
        /// Ext.regModel('ListItem', {
        /// fields: [{
        /// name: 'text',
        /// type: 'string'
        /// }]
        /// });
        /// *
        /// var store = new Ext.data.TreeStore({
        /// model: 'ListItem',
        /// defaultRootProperty: 'items',
        /// root: data
        /// });
        /// *
        /// var nestedList = new Ext.NestedList({
        /// fullscreen: true,
        /// title: 'Groceries',
        /// displayField: 'text',
        /// store: store
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
        [JsProperty]
        public object UseToolbar{private get;[JsMethod(Name="setUseToolbar")]set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region NestedListConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class NestedListConfig
    {
        public NestedListConfig(){}
        /// <summary>
        /// Set to true to alow the user to deselect leaf items via interaction.
        /// Defaults to false.
        /// @accessor
        /// </summary>
        public bool allowDeselect{get;set;}
        /// <summary>
        /// The configuration for the back button used in the nested list
        /// @private
        /// </summary>
        public object backButton{get;set;}
        /// <summary>
        /// The label to display for the back button. Defaults to "Back".
        /// @accessor
        /// </summary>
        public JsString backText{get;set;}
        /// <summary>
        /// Animation to be used during transitions of cards.
        /// Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
        /// This animation will be automatically reversed when navigating to a previous card in the
        /// nested list.
        /// Defaults to 'slide'.
        /// @accessor
        /// </summary>
        public object cardSwitchAnimation{get;set;}
        /// <summary>
        /// The initial set of data to be used to display content in this nested list.
        /// </summary>
        public object data{get;set;}
        /// <summary>
        /// to provide a final card for leaf nodes.
        /// @accessor
        /// </summary>
        public Component detailCard{get;set;}
        /// <summary>
        /// The container of the detailCard.
        /// @accessor
        /// </summary>
        public Container detailContainer{get;set;}
        /// <summary>
        /// Display field to use when setting item text and title.
        /// This configuration is ignored when overriding getItemTextTpl or
        /// getTitleTextTpl for the item text or title. (Defaults to 'text')
        /// @accessor
        /// </summary>
        public JsString displayField{get;set;}
        /// <summary>
        /// Empty text to display when a subtree is empty.
        /// @accessor
        /// </summary>
        public JsString emptyText{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public JsString layout{get;set;}
        /// <summary>
        /// Loading text to display when a subtree is loading.
        /// @accessor
        /// </summary>
        public JsString loadingText{get;set;}
        /// <summary>
        /// Maps to the Ext.List onItemDisclosure configuration for individual lists. (Defaults to false)
        /// @accessor
        /// </summary>
        public object onItemDisclosure{get;set;}
        /// <summary>
        /// The tree store to be used for this nested list.
        /// </summary>
        public TreeStore store{get;set;}
        /// <summary>
        /// The title of the toolbar
        /// @accessor
        /// </summary>
        public JsString title{get;set;}
        /// <summary>
        /// Update the title with the currently selected category. Defaults to true.
        /// @accessor
        /// </summary>
        public bool updateTitleText{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool useTitleAsBackText{get;set;}
        /// <summary>
        /// True to show the header toolbar.
        /// @accessor
        /// </summary>
        public bool useToolbar{get;set;}
    }
    #endregion
}
#endregion
#region Ext.direct
namespace Ext.direct
{
    #region Event
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Event
    {
        public Event(){}
        /// <summary>
        /// Creates new Event.
        /// @param {Object} config (optional) Config object.
        /// </summary>
        public Event(object config){}
        /// <summary>
        /// Return the raw data for this event.
        /// @return {Object} The data from the event
        /// </summary>
        public object getData(){return null;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// Return the raw data for this event.
        /// @return {Object} The data from the event
        /// </summary>
        [JsProperty]
        public object Data{[JsMethod(Name="getData")]get;private set;}
        /// <summary>
        /// End Definitions
        /// </summary>
        public bool status{get;set;}
    }
    #endregion
    #region ExceptionEvent
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ExceptionEvent
    {
        public ExceptionEvent(){}
        public JsString alias{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// End Definitions
        /// </summary>
        public bool status{get;set;}
    }
    #endregion
    #region JsonProvider
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonProvider
    {
        public JsonProvider(){}
        /// <summary>
        /// Create an event from a response object
        /// @param {Object} response The XHR response object
        /// @return {Ext.direct.Event} The event
        /// </summary>
        public Ext.direct.Event createEvent(object response){return null;}
        /// <summary>
        /// Creates a set of events based on the XHR response
        /// @private
        /// @param {Object} response The XHR response
        /// @return {Ext.direct.Event[]} An array of Ext.direct.Event
        /// </summary>
        public void createEvents(object response){}
        /// <summary>
        /// Parse the JSON response
        /// @private
        /// @param {Object} response The XHR response object
        /// @return {Object} The data in the response.
        /// </summary>
        public object parseResponse(object response){return null;}
        public JsString alias{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Manager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Manager
    {
        /// <summary>
        /// Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods. If the provider
        /// is not already connected, it will auto-connect.
        /// *
        /// var pollProv = new Ext.direct.PollingProvider({
        /// url: 'php/poll2.php'
        /// });
        /// *
        /// Ext.direct.Manager.addProvider({
        /// "type":"remoting",       // create a {@link Ext.direct.RemotingProvider}
        /// "url":"php\/router.php", // url to connect to the Ext.Direct server-side router.
        /// "actions":{              // each property within the actions object represents a Class
        /// "TestAction":[       // array of methods within each server side Class
        /// {
        /// "name":"doEcho", // name of method
        /// "len":1
        /// },{
        /// "name":"multiply",
        /// "len":1
        /// },{
        /// "name":"doForm",
        /// "formHandler":true, // handle form on server with Ext.Direct.Transaction
        /// "len":1
        /// }]
        /// },
        /// "namespace":"myApplication",// namespace to create the Remoting Provider in
        /// },{
        /// type: 'polling', // create a {@link Ext.direct.PollingProvider}
        /// url:  'php/poll.php'
        /// }, pollProv); // reference to previously created instance
        /// *
        /// @param {Ext.direct.Provider/Object...} provider
        /// Accepts any number of Provider descriptions (an instance or config object for
        /// a Provider). Each Provider description instructs Ext.Directhow to create
        /// client-side stub methods.
        /// </summary>
        public void addProvider(object provider){}
        /// <summary>
        /// Adds a transaction to the manager.
        /// @private
        /// @param {Ext.direct.Transaction} transaction The transaction to add
        /// @return {Ext.direct.Transaction} transaction
        /// </summary>
        public Transaction addTransaction(Transaction transaction){return null;}
        /// <summary>
        /// End Definitions
        /// </summary>
        public Manager(){}
        /// <summary>
        /// Retrieves a {@link Ext.direct.Provider provider} by the **{@link Ext.direct.Provider#id id}** specified when the
        /// provider is {@link #addProvider added}.
        /// @param {String/Ext.direct.Provider} id The id of the provider, or the provider instance.
        /// </summary>
        public void getProvider(object id){}
        /// <summary>
        /// Gets a transaction
        /// @private
        /// @param {String/Ext.direct.Transaction} transaction The transaction/id of transaction to get
        /// @return {Ext.direct.Transaction}
        /// </summary>
        public void getTransaction(object transaction){}
        public void onProviderData(object provider, object @event){}
        /// <summary>
        /// Removes the provider.
        /// @param {String/Ext.direct.Provider} provider The provider instance or the id of the provider.
        /// @return {Ext.direct.Provider} The provider, null if not found.
        /// </summary>
        public Provider removeProvider(object provider){return null;}
        /// <summary>
        /// Removes a transaction from the manager.
        /// @private
        /// @param {String/Ext.direct.Transaction} transaction The transaction/id of transaction to remove
        /// @return {Ext.direct.Transaction} transaction
        /// </summary>
        public Transaction removeTransaction(object transaction){return null;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public bool singleton{get;set;}
    }
    #endregion
    #region PollingProvider
    [JsType(JsMode.Prototype, Export=false)]
    public partial class PollingProvider
    {
        public PollingProvider(){}
        public PollingProvider(PollingProviderConfig config){}
        /// <summary>
        /// Connect to the server-side and begin the polling process. To handle each
        /// response subscribe to the data event.
        /// </summary>
        public void connect(){}
        /// <summary>
        /// @cfg {String/Function} url
        /// The url which the PollingProvider should contact with each request. This can also be
        /// an imported Ext.Direct method which will accept the baseParams as its only argument.
        /// </summary>
        public PollingProvider(object config){}
        /// <summary>
        /// Disconnect from the server-side and stop the polling process. The disconnect
        /// event will be fired on a successful disconnect.
        /// </summary>
        public void disconnect(){}
        public void isConnected(){}
        public void onData(object opt, object success, object response){}
        public JsString alias{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {Number} interval
        /// How often to poll the server-side in milliseconds (defaults to <tt>3000</tt> - every
        /// 3 seconds).
        /// </summary>
        public JsNumber interval{get;set;}
    }
    #endregion
    #region PollingProviderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PollingProviderConfig
    {
        public PollingProviderConfig(){}
        /// <summary>
        /// An object containing properties which are to be sent as parameters
        /// on every polling request
        /// </summary>
        public object baseParams{get;set;}
        /// <summary>
        /// How often to poll the server-side in milliseconds (defaults to <tt>3000</tt> - every
        /// 3 seconds).
        /// </summary>
        public JsNumber interval{get;set;}
    }
    #endregion
    #region Provider
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Provider
    {
        public Provider(){}
        /// <summary>
        /// @cfg {String} id
        /// The unique id of the provider (defaults to an {@link Ext#id auto-assigned id}).
        /// You should assign an id if you need to be able to access the provider later and you do
        /// not have an object reference available, for example:
        /// <pre><code>
        /// Ext.direct.Manager.addProvider({
        /// type: 'polling',
        /// url:  'php/poll.php',
        /// id:   'poll-provider'
        /// });
        /// var p = {@link Ext.direct.Manager}.{@link Ext.direct.Manager#getProvider getProvider}('poll-provider');
        /// p.disconnect();
        /// </code></pre>
        /// </summary>
        public Provider(object config){}
        /// <summary>
        /// Returns whether or not the server-side is currently connected.
        /// Abstract method for subclasses to implement.
        /// </summary>
        public void isConnected(){}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString alias{get;set;}
    }
    #endregion
    #region RemotingEvent
    [JsType(JsMode.Prototype, Export=false)]
    public partial class RemotingEvent
    {
        public RemotingEvent(){}
        /// <summary>
        /// Get the transaction associated with this event.
        /// @return {Ext.direct.Transaction} The transaction
        /// </summary>
        public Transaction getTransaction(){return null;}
        public JsString alias{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Get the transaction associated with this event.
        /// @return {Ext.direct.Transaction} The transaction
        /// </summary>
        [JsProperty]
        public Transaction Transaction{[JsMethod(Name="getTransaction")]get;private set;}
    }
    #endregion
    #region RemotingMethod
    [JsType(JsMode.Prototype, Export=false)]
    public partial class RemotingMethod
    {
        public RemotingMethod(){}
        /// <summary>
        /// Small utility class used internally to represent a Direct method.
        /// Thi class is used internally.
        /// @class Ext.direct.RemotingMethod
        /// @ignore
        /// </summary>
        public RemotingMethod(object config){}
        /// <summary>
        /// Takes the arguments for the Direct function and splits the arguments
        /// from the scope and the callback.
        /// @param {Array} args The arguments passed to the direct call
        /// @return {Object} An object with 3 properties, args, callback & scope.
        /// </summary>
        public object getCallData(JsArray args){return null;}
    }
    #endregion
    #region RemotingProvider
    [JsType(JsMode.Prototype, Export=false)]
    public partial class RemotingProvider
    {
        public RemotingProvider(){}
        public RemotingProvider(RemotingProviderConfig config){}
        /// <summary>
        /// Combine any buffered requests and send them off
        /// @private
        /// </summary>
        public void combineAndSend(){}
        /// <summary>
        /// Configure a form submission request
        /// @private
        /// @param {String} action The action being executed
        /// @param {Object} method The method being executed
        /// @param {HTMLElement} form The form being submitted
        /// @param {Function} callback (optional) A callback to run after the form submits
        /// @param {Object} scope (optional) A scope to execute the callback in
        /// </summary>
        public void configureFormRequest(JsString action, object method, HtmlElement form, JsAction callback, object scope){}
        /// <summary>
        /// Configure a direct request
        /// @private
        /// @param {String} action The action being executed
        /// @param {Object} method The being executed
        /// </summary>
        public void configureRequest(JsString action, object method, object args){}
        public void connect(){}
        /// <summary>
        /// @cfg {Number} timeout
        /// The timeout to use for each request. Defaults to <tt>undefined</tt>.
        /// </summary>
        public RemotingProvider(object config){}
        /// <summary>
        /// Create a handler function for a direct call.
        /// @private
        /// @param {String} action The action the call is for
        /// @param {Object} method The details of the method
        /// @return {Function} A JS function that will kick off the call
        /// </summary>
        public JsAction createHandler(JsString action, object method){return null;}
        public void disconnect(){}
        /// <summary>
        /// Gets the Ajax call info for a transaction
        /// @private
        /// @param {Ext.direct.Transaction} transaction The transaction
        /// @return {Object} The call params
        /// </summary>
        public object getCallData(Transaction transaction){return null;}
        /// <summary>
        /// Get transaction from XHR options
        /// @private
        /// @param {Object} options The options sent to the Ajax request
        /// @return {Ext.direct.Transaction} The transaction, null if not found
        /// </summary>
        public Transaction getTransaction(object options){return null;}
        /// <summary>
        /// Initialize the API
        /// @private
        /// </summary>
        public void initAPI(){}
        public void isConnected(){}
        /// <summary>
        /// React to the ajax request being completed
        /// @private
        /// </summary>
        public void onData(object options, object success, object response){}
        /// <summary>
        /// Add a new transaction to the queue
        /// @private
        /// @param {Ext.direct.Transaction} transaction The transaction
        /// </summary>
        public void queueTransaction(Transaction transaction){}
        /// <summary>
        /// Run any callbacks related to the transaction.
        /// @private
        /// @param {Ext.direct.Transaction} transaction The transaction
        /// @param {Ext.direct.Event} event The event
        /// </summary>
        public void runCallback(Transaction transaction, Ext.direct.Event @event){}
        /// <summary>
        /// Sends a form request
        /// @private
        /// @param {Ext.direct.Transaction} transaction The transaction to send
        /// </summary>
        public void sendFormRequest(Transaction transaction){}
        /// <summary>
        /// Sends a request to the server
        /// @private
        /// @param {Object/Array} data The data to send
        /// </summary>
        public void sendRequest(object data){}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// @cfg {Number/Boolean} enableBuffer
        /// <p><tt>true</tt> or <tt>false</tt> to enable or disable combining of method
        /// calls. If a number is specified this is the amount of time in milliseconds
        /// to wait before sending a batched request (defaults to <tt>10</tt>).</p>
        /// <br><p>Calls which are received within the specified timeframe will be
        /// concatenated together and sent in a single request, optimizing the
        /// application by reducing the amount of round trips that have to be made
        /// to the server.</p>
        /// </summary>
        public object enableBuffer{get;set;}
        public JsString extend{get;set;}
        /// <summary>
        /// @cfg {Number} maxRetries
        /// Number of times to re-attempt delivery on failure of a call. Defaults to <tt>1</tt>.
        /// </summary>
        public JsNumber maxRetries{get;set;}
    }
    #endregion
    #region RemotingProviderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class RemotingProviderConfig
    {
        public RemotingProviderConfig(){}
        /// <summary>
        /// Object literal defining the server side actions and methods. For example, if
        /// the Provider is configured with:
        /// <pre><code>
        /// "actions":{ // each property within the 'actions' object represents a server side Class
        /// "TestAction":[ // array of methods within each server side Class to be
        /// {              // stubbed out on client
        /// "name":"doEcho",
        /// "len":1
        /// },{
        /// "name":"multiply",// name of method
        /// "len":2           // The number of parameters that will be used to create an
        /// // array of data to send to the server side function.
        /// // Ensure the server sends back a Number, not a String.
        /// },{
        /// "name":"doForm",
        /// "formHandler":true, // direct the client to use specialized form handling method
        /// "len":1
        /// }]
        /// }
        /// </code></pre>
        /// <p>Note that a Store is not required, a server method can be called at any time.
        /// In the following example a <b>client side</b> handler is used to call the
        /// server side method "multiply" in the server-side "TestAction" Class:</p>
        /// <pre><code>
        /// TestAction.multiply(
        /// 2, 4, // pass two arguments to server, so specify len=2
        /// // callback function after the server is called
        /// // result: the result returned by the server
        /// //      e: Ext.direct.RemotingEvent object
        /// function(result, e){
        /// var t = e.getTransaction();
        /// var action = t.action; // server side Class called
        /// var method = t.method; // server side method called
        /// if(e.status){
        /// var answer = Ext.encode(result); // 8
        /// }else{
        /// var msg = e.message; // failure message
        /// }
        /// }
        /// );
        /// </code></pre>
        /// In the example above, the server side "multiply" function will be passed two
        /// arguments (2 and 4).  The "multiply" method should return the value 8 which will be
        /// available as the <tt>result</tt> in the example above.
        /// </summary>
        public object actions{get;set;}
        /// <summary>
        /// <p><tt>true</tt> or <tt>false</tt> to enable or disable combining of method
        /// calls. If a number is specified this is the amount of time in milliseconds
        /// to wait before sending a batched request (defaults to <tt>10</tt>).</p>
        /// <br><p>Calls which are received within the specified timeframe will be
        /// concatenated together and sent in a single request, optimizing the
        /// application by reducing the amount of round trips that have to be made
        /// to the server.</p>
        /// </summary>
        public object enableBuffer{get;set;}
        /// <summary>
        /// Specify which param will hold the arguments for the method.
        /// Defaults to <tt>'data'</tt>.
        /// </summary>
        public JsString enableUrlEncode{get;set;}
        /// <summary>
        /// Number of times to re-attempt delivery on failure of a call. Defaults to <tt>1</tt>.
        /// </summary>
        public JsNumber maxRetries{get;set;}
        /// <summary>
        /// Namespace for the Remoting Provider (defaults to the browser global scope of <i>window</i>).
        /// Explicitly specify the namespace Object, or specify a String to have a
        /// {@link Ext#namespace namespace created} implicitly.
        /// </summary>
        public object @namespace{get;set;}
        /// <summary>
        /// <b>Required</b>. The url to connect to the {@link Ext.direct.Manager} server-side router.
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region Transaction
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Transaction
    {
        public Transaction(){}
        /// <summary>
        /// Creates new Transaction.
        /// @param {Object} config  (optional) Config object.
        /// </summary>
        public Transaction(object config){}
        public void getProvider(){}
        public void retry(){}
        public void send(){}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString alternateClassName{get;set;}
    }
    #endregion
}
#endregion
#region Ext.dom
namespace Ext.dom
{
    #region AbstractElement
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractElement
    {
        public AbstractElement(){}
        public void attach(object dom){}
        public AbstractElement(object element, object forceNew){}
        /// <summary>
        /// Returns true if this element is an ancestor of the passed element
        /// @param {HTMLElement/String} el The element to check
        /// @return {Boolean} True if this element is an ancestor of el, else false
        /// </summary>
        public bool contains(object el){return false;}
        /// <summary>
        /// Returns the value of an attribute from the element's underlying DOM node.
        /// @param {String} name The attribute name
        /// @param {String} [namespace] The namespace in which to look for the attribute
        /// @return {String} The attribute value
        /// </summary>
        public JsString getAttribute(JsString name, JsString ns){return null;}
        /// <summary>
        /// Returns the innerHTML of an Element or an empty string if the element's
        /// dom no longer exists.
        /// </summary>
        public void getHTML(){}
        /// <summary>
        /// Returns the value of the "value" attribute
        /// @param {Boolean} asNumber true to parse the value as a number
        /// @return {String/Number}
        /// </summary>
        public void getValue(bool asNumber){}
        public void getVisibilityMode(){}
        /// <summary>
        /// Hide this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public void hide(){}
        /// <summary>
        /// Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)
        /// @param {String} selector The simple selector to test
        /// @return {Boolean} True if this element matches the selector, else false
        /// </summary>
        public bool @is(JsString simpleSelector){return false;}
        /// <summary>
        /// Removes this element's dom reference. Note that event and cache removal is handled at {@link Ext#removeNode
        /// Ext.removeNode}
        /// </summary>
        public void remove(){}
        /// <summary>
        /// Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
        /// @param {Object} o The object with the attributes
        /// @param {Boolean} [useSet=true] false to override the default setAttribute to use expandos.
        /// @return {Ext.dom.Element} this
        /// </summary>
        public Element set(object o, bool useSet){return null;}
        /// <summary>
        /// Set the innerHTML of this element
        /// @param {String} html The new HTML
        /// @return {Ext.Element} this
        /// </summary>
        public void setHTML(JsString html){}
        /// <summary>
        /// Use this to change the visisbiliy mode between {@link #VISIBILITY}, {@link #DISPLAY} or {@link #OFFSETS}.
        /// </summary>
        public void setVisibilityMode(object mode){}
        /// <summary>
        /// Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
        /// the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.
        /// @param {Boolean} visible Whether the element is visible
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public void setVisible(bool visible, object animate){}
        /// <summary>
        /// Show this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
        /// @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public void show(){}
        /// <summary>
        /// Update the innerHTML of this element
        /// @param {String} html The new HTML
        /// @return {Ext.dom.Element} this
        /// </summary>
        public Element update(JsString html){return null;}
        /// <summary>
        /// @property {String} defaultUnit
        /// The default unit to append to CSS values where a unit isn't provided.
        /// </summary>
        public JsString defaultUnit{get;set;}
        /// <summary>
        /// Set the innerHTML of this element
        /// @param {String} html The new HTML
        /// @return {Ext.Element} this
        /// </summary>
        [JsProperty]
        public JsString HTML{private get;[JsMethod(Name="setHTML")]set;}
        /// <summary>
        /// Use this to change the visisbiliy mode between {@link #VISIBILITY}, {@link #DISPLAY} or {@link #OFFSETS}.
        /// </summary>
        [JsProperty]
        public object VisibilityMode{private get;[JsMethod(Name="setVisibilityMode")]set;}
    }
    #endregion
    #region AbstractHelper
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractHelper
    {
        public AbstractHelper(){}
        /// <summary>
        /// Creates new DOM element(s) and appends them to el.
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/String} o The DOM object spec (and children) or raw HTML blob
        /// @param {Boolean} [returnElement] true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public object append(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// Applies a style specification to an element.
        /// @param {String/HTMLElement} el The element to apply styles to
        /// @param {String/Object/Function} styles A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or
        /// a function which returns such a specification.
        /// </summary>
        public void applyStyles(object el, object styles){}
        public void doInsert(object el, object o, object returnElement, object pos, object sibling, object append){}
        public void generateMarkup(object spec, object buffer){}
        /// <summary>
        /// Creates new DOM element(s) and inserts them after el.
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object} o The DOM object spec (and children)
        /// @param {Boolean} [returnElement] true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public object insertAfter(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// Creates new DOM element(s) and inserts them before el.
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/String} o The DOM object spec (and children) or raw HTML blob
        /// @param {Boolean} [returnElement] true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public object insertBefore(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// Creates new DOM element(s) and inserts them as the first child of el.
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/String} o The DOM object spec (and children) or raw HTML blob
        /// @param {Boolean} [returnElement] true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public object insertFirst(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// Inserts an HTML fragment into the DOM.
        /// @param {String} where Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.
        /// *
        /// For example take the following HTML: `<div>Contents</div>`
        /// *
        /// Using different `where` values inserts element to the following places:
        /// *
        /// - beforeBegin: `<HERE><div>Contents</div>`
        /// - afterBegin: `<div><HERE>Contents</div>`
        /// - beforeEnd: `<div>Contents<HERE></div>`
        /// - afterEnd: `<div>Contents</div><HERE>`
        /// *
        /// @param {HTMLElement/TextNode} el The context element
        /// @param {String} html The HTML fragment
        /// @return {HTMLElement} The new node
        /// </summary>
        public HtmlElement insertHtml(JsString where, object el, JsString html){return null;}
        /// <summary>
        /// Returns the markup for the passed Element(s) config.
        /// @param {Object} spec The DOM object spec (and children)
        /// @return {String}
        /// </summary>
        public void markup(object spec){}
        /// <summary>
        /// Creates new DOM element(s) and overwrites the contents of el with them.
        /// @param {String/HTMLElement/Ext.Element} el The context element
        /// @param {Object/String} o The DOM object spec (and children) or raw HTML blob
        /// @param {Boolean} [returnElement] true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public object overwrite(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// @class Ext.dom.AbstractHelper
        /// Abstract base class for {@link Ext.dom.Helper}.
        /// @private
        /// </summary>
        public JsRegExp confRe{get;set;}
        /// <summary>
        /// @class Ext.dom.AbstractHelper
        /// Abstract base class for {@link Ext.dom.Helper}.
        /// @private
        /// </summary>
        public JsRegExp emptyTags{get;set;}
        public JsRegExp endRe{get;set;}
    }
    #endregion
    #region AbstractQuery
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractQuery
    {
        public AbstractQuery(){}
        /// <summary>
        /// Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)
        /// @param {String/HTMLElement/Array} el An element id, element or array of elements
        /// @param {String} selector The simple selector to test
        /// @return {Boolean}
        /// </summary>
        public void @is(object el, JsString q){}
        /// <summary>
        /// Selects a group of elements.
        /// @param {String} selector The selector/xpath query (can be a comma separated list of selectors)
        /// @param {HTMLElement/String} [root] The start of the query (defaults to document).
        /// @return {HTMLElement[]} An Array of DOM elements which match the selector. If there are
        /// no matches, and empty Array is returned.
        /// </summary>
        public void select(JsString q, object root){}
        /// <summary>
        /// Selects a single element.
        /// @param {String} selector The selector/xpath query
        /// @param {HTMLElement/String} [root] The start of the query (defaults to document).
        /// @return {HTMLElement} The DOM element which matched the selector.
        /// </summary>
        public HtmlElement selectNode(JsString q, object root){return null;}
    }
    #endregion
    #region CompositeElementLite
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CompositeElementLite
    {
        public CompositeElementLite(){}
        /// <summary>
        /// Adds elements to this Composite object.
        /// @param {HTMLElement[]/Ext.dom.CompositeElementLite} els Either an Array of DOM elements to add, or another Composite
        /// object who's elements should be added.
        /// @return {Ext.dom.CompositeElementLite} This Composite object.
        /// </summary>
        public CompositeElementLite add(object els, object root){return null;}
        public void addElements(object els, object root){}
        public void addListener(object eventName, object handler, object scope, object opt){}
        /// <summary>
        /// Removes all elements.
        /// </summary>
        public void clear(){}
        public CompositeElementLite(object elements, object root){}
        /// <summary>
        /// Returns true if this composite contains the passed element
        /// @param {String/HTMLElement/Ext.Element/Number} el The id of an element, or an Ext.Element, or an HtmlElement to
        /// find within the composite collection.
        /// @return {Boolean}
        /// </summary>
        public void contains(object el){}
        /// <summary>
        /// Calls the passed function for each element in this composite.
        /// @param {Function} fn The function to call.
        /// @param {Ext.dom.Element} fn.el The current Element in the iteration. **This is the flyweight
        /// (shared) Ext.dom.Element instance, so if you require_ a a reference to the dom node, use el.dom.**
        /// @param {Ext.dom.CompositeElementLite} fn.c This Composite object.
        /// @param {Number} fn.index The zero-based index in the iteration.
        /// @param {Object} [scope] The scope (this reference) in which the function is executed.
        /// Defaults to the Element.
        /// @return {Ext.dom.CompositeElementLite} this
        /// </summary>
        public CompositeElementLite each(JsAction fn, Element scope){return null;}
        /// <summary>
        /// Clears this Composite and adds the elements passed.
        /// @param {HTMLElement[]/Ext.dom.CompositeElementLite} els Either an array of DOM elements, or another Composite from which
        /// to fill this Composite.
        /// @return {Ext.dom.CompositeElementLite} this
        /// </summary>
        public CompositeElementLite fill(object els){return null;}
        /// <summary>
        /// Filters this composite to only elements that match the passed selector.
        /// @param {String/Function} selector A string CSS selector or a comparison function. The comparison function will be
        /// called with the following arguments:
        /// @param {Ext.dom.Element} selector.el The current DOM element.
        /// @param {Number} selector.index The current index within the collection.
        /// @return {Ext.dom.CompositeElementLite} this
        /// </summary>
        public CompositeElementLite filter(object selector){return null;}
        /// <summary>
        /// Returns the first Element
        /// @return {Ext.dom.Element}
        /// </summary>
        public void first(){}
        /// <summary>
        /// Returns the number of elements in this Composite.
        /// @return {Number}
        /// </summary>
        public void getCount(){}
        public void getElement(object el){}
        /// <summary>
        /// Find the index of the passed element within the composite collection.
        /// @param {String/HTMLElement/Ext.Element/Number} el The id of an element, or an Ext.dom.Element, or an HtmlElement
        /// to find within the composite collection.
        /// @return {Number} The index of the passed Ext.dom.Element in the composite collection, or -1 if not found.
        /// </summary>
        public JsNumber indexOf(object el){return null;}
        public void invoke(object fn, object args){}
        /// <summary>
        /// Returns a flyweight Element of the dom element object at the specified index
        /// @param {Number} index
        /// @return {Ext.dom.Element}
        /// </summary>
        public void item(JsNumber index){}
        /// <summary>
        /// Returns the last Element
        /// @return {Ext.dom.Element}
        /// </summary>
        public void last(){}
        /// <summary>
        /// Removes the specified element(s).
        /// @param {String/HTMLElement/Ext.Element/Number} el The id of an element, the Element itself, the index of the
        /// element in this composite or an array of any of those.
        /// @param {Boolean} [removeDom] True to also remove the element from the document
        /// @return {Ext.dom.CompositeElementLite} this
        /// </summary>
        public CompositeElementLite removeElement(object keys, bool removeDom){return null;}
        /// <summary>
        /// Replaces the specified element with the passed element.
        /// @param {String/HTMLElement/Ext.Element/Number} el The id of an element, the Element itself, the index of the
        /// element in this composite to replace.
        /// @param {String/Ext.Element} replacement The id of an element or the Element itself.
        /// @param {Boolean} [domReplace] True to remove and replace the element in the document too.
        /// @return {Ext.dom.CompositeElementLite} this
        /// </summary>
        public CompositeElementLite replaceElement(object el, object replacement, bool domReplace){return null;}
        public void transformElement(object el){}
        public bool isComposite{get;set;}
    }
    #endregion
    #region Element
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Element
    {
        public Element(){}
        /// <summary>
        /// Adds the given CSS class(es) to this Element
        /// @param {String} names The CSS class(es) to add to this element
        /// @param {String} prefix Optional prefix to prepend to each class
        /// @param {String} suffix Optional suffix to append to each class
        /// </summary>
        public void addCls(JsString names, JsString prefix, JsString suffix){}
        public void append(object element){}
        public Element(object dom){}
        public void destroy(){}
        public void getFirstChild(){}
        public void getParent(){}
        public void getUniqueId(){}
        public void hasCls(object name){}
        public void hide(){}
        public void insertFirst(object element){}
        public void isPainted(){}
        public void redraw(){}
        /// <summary>
        /// Removes the given CSS class(es) from this Element
        /// @param {String} names The CSS class(es) to remove from this element
        /// @param {String} prefix Optional prefix to prepend to each class to be removed
        /// @param {String} suffix Optional suffix to append to each class to be removed
        /// </summary>
        public void removeCls(JsString names, JsString prefix, JsString suffix){}
        public void replaceCls(object oldName, object newName, object prefix, object suffix){}
        public void setBorder(object border){}
        public void setBottom(object bottom){}
        public void setHeight(object height){}
        public void setHtml(object html){}
        public void setHTML(){}
        public void setId(object id){}
        public void setLeft(object left){}
        public void setLengthValue(object name, object value){}
        public void setMargin(object margin){}
        public void setPadding(object padding){}
        public void setRight(object right){}
        public void setText(object text){}
        public void setTop(object top){}
        public void setWidth(object width){}
        public void show(){}
        /// <summary>
        /// @private
        /// </summary>
        public void synchronize(){}
        public void unwrap(){}
        public void unwrapAllChildren(){}
        public void wrap(object config, object domNode){}
        public void wrapAllChildren(object config){}
        /// <summary>
        /// Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.
        /// All instances of this class inherit the methods of Ext.Fx making visual effects easily available to all DOM elements.
        /// Note that the events documented in this class are not Ext events, they encapsulate browser events. To access the
        /// underlying browser event, see Ext.EventObject.browserEvent. Some older browsers may not support the full range of
        /// events. Which events are supported is beyond the control of Ext JS.
        /// ## Usage
        /// // by id
        /// var el = Ext.get("my-div");
        /// // by DOM element reference
        /// var el = Ext.get(myDivElement);
        /// ## Composite (Collections of) Elements
        /// For working with collections of Elements, see Ext.CompositeElement
        /// </summary>
        public JsString alternateClassName{get;set;}
        [JsProperty]
        public object Border{private get;[JsMethod(Name="setBorder")]set;}
        [JsProperty]
        public object Bottom{private get;[JsMethod(Name="setBottom")]set;}
        public JsString BOTTOM{get;set;}
        public JsRegExp classNameSplitRegex{get;set;}
        /// <summary>
        /// Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.
        /// All instances of this class inherit the methods of Ext.Fx making visual effects easily available to all DOM elements.
        /// Note that the events documented in this class are not Ext events, they encapsulate browser events. To access the
        /// underlying browser event, see Ext.EventObject.browserEvent. Some older browsers may not support the full range of
        /// events. Which events are supported is beyond the control of Ext JS.
        /// ## Usage
        /// // by id
        /// var el = Ext.get("my-div");
        /// // by DOM element reference
        /// var el = Ext.get(myDivElement);
        /// ## Composite (Collections of) Elements
        /// For working with collections of Elements, see Ext.CompositeElement
        /// </summary>
        public JsString extend{get;set;}
        [JsProperty]
        public object Height{private get;[JsMethod(Name="setHeight")]set;}
        public JsString HEIGHT{get;set;}
        [JsProperty]
        public object Html{private get;[JsMethod(Name="setHtml")]set;}
        [JsProperty]
        public object Id{private get;[JsMethod(Name="setId")]set;}
        public bool isElement{get;set;}
        public bool isSynchronized{get;set;}
        [JsProperty]
        public object Left{private get;[JsMethod(Name="setLeft")]set;}
        public JsString LEFT{get;set;}
        [JsProperty]
        public object Margin{private get;[JsMethod(Name="setMargin")]set;}
        public JsString observableType{get;set;}
        [JsProperty]
        public object Padding{private get;[JsMethod(Name="setPadding")]set;}
        [JsProperty]
        public object Right{private get;[JsMethod(Name="setRight")]set;}
        public JsString RIGHT{get;set;}
        public JsString SEPARATOR{get;set;}
        public JsRegExp spacesRegex{get;set;}
        [JsProperty]
        public object Text{private get;[JsMethod(Name="setText")]set;}
        [JsProperty]
        public object Top{private get;[JsMethod(Name="setTop")]set;}
        public JsString TOP{get;set;}
        [JsProperty]
        public object Width{private get;[JsMethod(Name="setWidth")]set;}
        public JsString WIDTH{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region Helper
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Helper
    {
        public Helper(){}
        /// <summary>
        /// The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or
        /// using HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.
        /// ## DomHelper element specification object
        /// A specification object is used when creating elements. Attributes of this object are assumed to be element
        /// attributes, except for 4 special attributes:
        /// * **tag**: The tag name of the element
        /// * **children (or cn)**: An array of the same kind of element definition objects to be created and appended. These
        /// can be nested as deep as you want.
        /// * **cls**: The class attribute of the element. This will end up being either the "class" attribute on a HTML
        /// fragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.
        /// * **html**: The innerHTML for the element
        /// ## Insertion methods
        /// Commonly used insertion methods:
        /// * {@link #append}
        /// * {@link #insertBefore}
        /// * {@link #insertAfter}
        /// * {@link #overwrite}
        /// * {@link #insertHtml}
        /// ## Example
        /// This is an example, where an unordered list with 3 children items is appended to an existing element with id
        /// 'my-div':
        /// var dh = Ext.DomHelper; // create shorthand alias
        /// // specification object
        /// var spec = {
        /// id: 'my-ul',
        /// tag: 'ul',
        /// cls: 'my-list',
        /// // append children after creating
        /// children: [     // may also specify 'cn' instead of 'children'
        /// {tag: 'li', id: 'item0', html: 'List Item 0'},
        /// {tag: 'li', id: 'item1', html: 'List Item 1'},
        /// {tag: 'li', id: 'item2', html: 'List Item 2'}
        /// ]
        /// };
        /// var list = dh.append(
        /// 'my-div', // the context element 'my-div' can either be the id or the actual node
        /// spec      // the specification object
        /// );
        /// Element creation specification parameters in this class may also be passed as an Array of specification objects.
        /// This can be used to insert multiple sibling nodes into an existing container very efficiently. For example, to add
        /// more list items to the example above:
        /// dh.append('my-ul', [
        /// {tag: 'li', id: 'item3', html: 'List Item 3'},
        /// {tag: 'li', id: 'item4', html: 'List Item 4'}
        /// ]);
        /// ## Templating
        /// The real power is in the built-in templating. Instead of creating or appending any elements, createTemplate returns
        /// a Template object which can be used over and over to insert new elements. Revisiting the example above, we could
        /// utilize templating this time:
        /// // create the node
        /// var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
        /// // get template
        /// var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});
        /// for(var i = 0; i < 5, i++){
        /// tpl.append(list, [i]); // use template to append to the actual node
        /// }
        /// An example using a template:
        /// var html = '"{0}" href="{1}" class="nav">{2}';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.append('blog-roll', ['link1', 'http://www.tommymaintz.com/', "Tommy's Site"]);
        /// tpl.append('blog-roll', ['link2', 'http://www.avins.org/', "Jamie's Site"]);
        /// The same example using named parameters:
        /// var html = '"{id}" href="{url}" class="nav">{text}';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.append('blog-roll', {
        /// id: 'link1',
        /// url: 'http://www.tommymaintz.com/',
        /// text: "Tommy's Site"
        /// });
        /// tpl.append('blog-roll', {
        /// id: 'link2',
        /// url: 'http://www.avins.org/',
        /// text: "Jamie's Site"
        /// });
        /// ## Compiling Templates
        /// Templates are applied using regular expressions. The performance is great, but if you are adding a bunch of DOM
        /// elements using the same template, you can increase performance even further by "compiling" the template. The way
        /// "compile()" works is the template is parsed and broken up at the different variable points and a dynamic function is
        /// created and eval'ed. The generated function performs string concatenation of these parts and the passed variables
        /// instead of using regular expressions.
        /// var html = '"{id}" href="{url}" class="nav">{text}';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.compile();
        /// //... use template like normal
        /// ## Performance Boost
        /// DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead of DOM can
        /// significantly boost performance.
        /// Element creation specification parameters may also be strings. If useDom is false, then the string is used as
        /// innerHTML. If useDom is true, a string specification results in the creation of a text node. Usage:
        /// Ext.DomHelper.useDom = true; // force it to use DOM; reduces performance
        /// *
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or
        /// using HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.
        /// ## DomHelper element specification object
        /// A specification object is used when creating elements. Attributes of this object are assumed to be element
        /// attributes, except for 4 special attributes:
        /// * **tag**: The tag name of the element
        /// * **children (or cn)**: An array of the same kind of element definition objects to be created and appended. These
        /// can be nested as deep as you want.
        /// * **cls**: The class attribute of the element. This will end up being either the "class" attribute on a HTML
        /// fragment or className for a DOM node, depending on whether DomHelper is using fragments or DOM.
        /// * **html**: The innerHTML for the element
        /// ## Insertion methods
        /// Commonly used insertion methods:
        /// * {@link #append}
        /// * {@link #insertBefore}
        /// * {@link #insertAfter}
        /// * {@link #overwrite}
        /// * {@link #insertHtml}
        /// ## Example
        /// This is an example, where an unordered list with 3 children items is appended to an existing element with id
        /// 'my-div':
        /// var dh = Ext.DomHelper; // create shorthand alias
        /// // specification object
        /// var spec = {
        /// id: 'my-ul',
        /// tag: 'ul',
        /// cls: 'my-list',
        /// // append children after creating
        /// children: [     // may also specify 'cn' instead of 'children'
        /// {tag: 'li', id: 'item0', html: 'List Item 0'},
        /// {tag: 'li', id: 'item1', html: 'List Item 1'},
        /// {tag: 'li', id: 'item2', html: 'List Item 2'}
        /// ]
        /// };
        /// var list = dh.append(
        /// 'my-div', // the context element 'my-div' can either be the id or the actual node
        /// spec      // the specification object
        /// );
        /// Element creation specification parameters in this class may also be passed as an Array of specification objects.
        /// This can be used to insert multiple sibling nodes into an existing container very efficiently. For example, to add
        /// more list items to the example above:
        /// dh.append('my-ul', [
        /// {tag: 'li', id: 'item3', html: 'List Item 3'},
        /// {tag: 'li', id: 'item4', html: 'List Item 4'}
        /// ]);
        /// ## Templating
        /// The real power is in the built-in templating. Instead of creating or appending any elements, createTemplate returns
        /// a Template object which can be used over and over to insert new elements. Revisiting the example above, we could
        /// utilize templating this time:
        /// // create the node
        /// var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
        /// // get template
        /// var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});
        /// for(var i = 0; i < 5, i++){
        /// tpl.append(list, [i]); // use template to append to the actual node
        /// }
        /// An example using a template:
        /// var html = '"{0}" href="{1}" class="nav">{2}';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.append('blog-roll', ['link1', 'http://www.tommymaintz.com/', "Tommy's Site"]);
        /// tpl.append('blog-roll', ['link2', 'http://www.avins.org/', "Jamie's Site"]);
        /// The same example using named parameters:
        /// var html = '"{id}" href="{url}" class="nav">{text}';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.append('blog-roll', {
        /// id: 'link1',
        /// url: 'http://www.tommymaintz.com/',
        /// text: "Tommy's Site"
        /// });
        /// tpl.append('blog-roll', {
        /// id: 'link2',
        /// url: 'http://www.avins.org/',
        /// text: "Jamie's Site"
        /// });
        /// ## Compiling Templates
        /// Templates are applied using regular expressions. The performance is great, but if you are adding a bunch of DOM
        /// elements using the same template, you can increase performance even further by "compiling" the template. The way
        /// "compile()" works is the template is parsed and broken up at the different variable points and a dynamic function is
        /// created and eval'ed. The generated function performs string concatenation of these parts and the passed variables
        /// instead of using regular expressions.
        /// var html = '"{id}" href="{url}" class="nav">{text}';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.compile();
        /// //... use template like normal
        /// ## Performance Boost
        /// DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead of DOM can
        /// significantly boost performance.
        /// Element creation specification parameters may also be strings. If useDom is false, then the string is used as
        /// innerHTML. If useDom is true, a string specification results in the creation of a text node. Usage:
        /// Ext.DomHelper.useDom = true; // force it to use DOM; reduces performance
        /// *
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Query
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Query
    {
        public Query(){}
        /// <summary>
        /// Provides functionality to select elements on the page based on a CSS selector. All selectors, attribute filters and
        /// pseudos below can be combined infinitely in any order. For example "div.foo:nth-child(odd)[@foo=bar].bar:first"
        /// would be a perfectly valid selector.
        /// ## Element Selectors:
        /// * \* any element
        /// * E an element with the tag E
        /// * E F All descendent elements of E that have the tag F
        /// * E > F or E/F all direct children elements of E that have the tag F
        /// * E + F all elements with the tag F that are immediately preceded by an element with the tag E
        /// * E ~ F all elements with the tag F that are preceded by a sibling element with the tag E
        /// ## Attribute Selectors:
        /// The use of @ and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.
        /// * E[foo] has an attribute "foo"
        /// * E[foo=bar] has an attribute "foo" that equals "bar"
        /// * E[foo^=bar] has an attribute "foo" that starts with "bar"
        /// * E[foo$=bar] has an attribute "foo" that ends with "bar"
        /// * E[foo*=bar] has an attribute "foo" that contains the substring "bar"
        /// * E[foo%=2] has an attribute "foo" that is evenly divisible by 2
        /// * E[foo!=bar] has an attribute "foo" that does not equal "bar"
        /// ## Pseudo Classes:
        /// * E:first-child E is the first child of its parent
        /// * E:last-child E is the last child of its parent
        /// * E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
        /// * E:nth-child(odd) E is an odd child of its parent
        /// * E:nth-child(even) E is an even child of its parent
        /// * E:only-child E is the only child of its parent
        /// * E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
        /// * E:first the first E in the resultset
        /// * E:last the last E in the resultset
        /// * E:nth(n) the nth E in the resultset (1 based)
        /// * E:odd shortcut for :nth-child(odd)
        /// * E:even shortcut for :nth-child(even)
        /// * E:contains(foo) E's innerHTML contains the substring "foo"
        /// * E:nodeValue(foo) E contains a textNode with a nodeValue that equals "foo"
        /// * E:not(S) an E element that does not match simple selector S
        /// * E:has(S) an E element that has a descendent that matches simple selector S
        /// * E:next(S) an E element whose next sibling matches simple selector S
        /// * E:prev(S) an E element whose previous sibling matches simple selector S
        /// * E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\\
        /// ## CSS Value Selectors:
        /// * E{display=none} css value "display" that equals "none"
        /// * E{display^=none} css value "display" that starts with "none"
        /// * E{display$=none} css value "display" that ends with "none"
        /// * E{display*=none} css value "display" that contains the substring "none"
        /// * E{display%=2} css value "display" that is evenly divisible by 2
        /// * E{display!=none} css value "display" that does not equal "none"
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Provides functionality to select elements on the page based on a CSS selector. All selectors, attribute filters and
        /// pseudos below can be combined infinitely in any order. For example "div.foo:nth-child(odd)[@foo=bar].bar:first"
        /// would be a perfectly valid selector.
        /// ## Element Selectors:
        /// * \* any element
        /// * E an element with the tag E
        /// * E F All descendent elements of E that have the tag F
        /// * E > F or E/F all direct children elements of E that have the tag F
        /// * E + F all elements with the tag F that are immediately preceded by an element with the tag E
        /// * E ~ F all elements with the tag F that are preceded by a sibling element with the tag E
        /// ## Attribute Selectors:
        /// The use of @ and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.
        /// * E[foo] has an attribute "foo"
        /// * E[foo=bar] has an attribute "foo" that equals "bar"
        /// * E[foo^=bar] has an attribute "foo" that starts with "bar"
        /// * E[foo$=bar] has an attribute "foo" that ends with "bar"
        /// * E[foo*=bar] has an attribute "foo" that contains the substring "bar"
        /// * E[foo%=2] has an attribute "foo" that is evenly divisible by 2
        /// * E[foo!=bar] has an attribute "foo" that does not equal "bar"
        /// ## Pseudo Classes:
        /// * E:first-child E is the first child of its parent
        /// * E:last-child E is the last child of its parent
        /// * E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
        /// * E:nth-child(odd) E is an odd child of its parent
        /// * E:nth-child(even) E is an even child of its parent
        /// * E:only-child E is the only child of its parent
        /// * E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox)
        /// * E:first the first E in the resultset
        /// * E:last the last E in the resultset
        /// * E:nth(n) the nth E in the resultset (1 based)
        /// * E:odd shortcut for :nth-child(odd)
        /// * E:even shortcut for :nth-child(even)
        /// * E:contains(foo) E's innerHTML contains the substring "foo"
        /// * E:nodeValue(foo) E contains a textNode with a nodeValue that equals "foo"
        /// * E:not(S) an E element that does not match simple selector S
        /// * E:has(S) an E element that has a descendent that matches simple selector S
        /// * E:next(S) an E element whose next sibling matches simple selector S
        /// * E:prev(S) an E element whose previous sibling matches simple selector S
        /// * E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\\
        /// ## CSS Value Selectors:
        /// * E{display=none} css value "display" that equals "none"
        /// * E{display^=none} css value "display" that starts with "none"
        /// * E{display$=none} css value "display" that ends with "none"
        /// * E{display*=none} css value "display" that contains the substring "none"
        /// * E{display%=2} css value "display" that is evenly divisible by 2
        /// * E{display!=none} css value "display" that does not equal "none"
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.env
namespace Ext.env
{
    #region Browser
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Browser
    {
        public Browser(){}
        public Browser(object userAgent){}
        public void getStyleDashPrefix(){}
        public void getStylePrefix(){}
        public void getVendorProperyName(object name){}
        /// <summary>
        /// Read-only, refer to {@link Ext.Version}
        /// @type Ext.Version
        /// </summary>
        public void setFlag(object name, object value){}
        /// <summary>
        /// Read-only - the full name of the current browser's engine
        /// Possible values are: WebKit, Gecko, Presto, Trident and Other
        /// @type String
        /// </summary>
        public object engineName{get;set;}
        /// <summary>
        /// Read-only, refer to {@link Ext.Version}
        /// @type Ext.Version
        /// </summary>
        public object engineVersion{get;set;}
        /// <summary>
        /// Read-only - the full name of the current browser
        /// Possible values are: IE, Firefox, Safari, Chrome, Opera and Other
        /// @type String
        /// </summary>
        public object name{get;set;}
        /// <summary>
        /// Read-only, refer to {@link Ext.Version}
        /// @type Ext.Version
        /// </summary>
        public object version{get;set;}
    }
    #endregion
    #region Feature
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Feature
    {
        public Feature(){}
        public void getSupportedPropertyName(object @object, object name){}
        public void getTestElement(object tag, object createNew){}
        public void isEventSupported(object name, object tag){}
        public void isStyleSupported(object name, object tag){}
    }
    #endregion
    #region OS
    [JsType(JsMode.Prototype, Export=false)]
    public partial class OS
    {
        public OS(){}
        public OS(object userAgent, object platform){}
        /// <summary>
        /// Read-only, refer to {@link Ext.Version}
        /// @type Ext.Version
        /// </summary>
        public void setFlag(object name, object value){}
        /// <summary>
        /// Read-only - the full name of the current operating system
        /// Possible values are: iOS, Android, WebOS, BlackBerry, MacOSX, Windows, Linux and Other
        /// @type String
        /// </summary>
        public object name{get;set;}
        /// <summary>
        /// Read-only, refer to {@link Ext.Version}
        /// @type Ext.Version
        /// </summary>
        public object version{get;set;}
    }
    #endregion
}
#endregion
#region Ext.event
namespace Ext.@event
{
    #region Controller
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Controller
    {
        public Controller(){}
        public void connect(object controller){}
        public Controller(object info){}
        public void doFire(){}
        public void fire(object args, object actions){}
        public void getInfo(){}
        public void isInterrupted(){}
        public void pause(){}
        public void resume(){}
        public void setInfo(object info){}
        public void setListenerStack(object listenerStack){}
        public void stop(){}
        [JsProperty]
        public object Info{private get;[JsMethod(Name="setInfo")]set;}
        public bool isFiring{get;set;}
        public object listenerStack{get;set;}
        [JsProperty]
        public object ListenerStack{private get;[JsMethod(Name="setListenerStack")]set;}
    }
    #endregion
    #region Dispatcher
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Dispatcher
    {
        public Dispatcher(){}
        public void addListener(object targetType, object target, object eventName){}
        public void applyPublishers(object publishers){}
        public void cacheActivePublishers(object targetType, object eventName, object publishers){}
        public void clearListeners(object targetType, object target, object eventName){}
        public Dispatcher(object config){}
        public void dispatchEvent(object targetType, object target, object eventName){}
        public void doAddListener(object targetType, object target, object eventName, object fn, object scope, object options, object order){}
        public void doDispatchEvent(object targetType, object target, object eventName, object args, object actions, object connectedController){}
        public void doRemoveListener(object targetType, object target, object eventName, object fn, object scope, object order){}
        public void fireListenerStacks(object listenerStacks, object index, object targetType, object target, object eventName){}
        public void getActivePublishers(object targetType, object eventName){}
        public void getCachedActivePublishers(object targetType, object eventName){}
        public void getController(object targetType, object target, object eventName, object connectedController){}
        public void getListenerStack(object targetType, object target, object eventName, object createIfNotExist){}
        public void getWildcardListenerStacks(object targetType, object target, object eventName){}
        public void hasListener(object targetType, object target, object eventName){}
        public void registerPublisher(object publisher){}
        public void removeListener(object targetType, object target, object eventName){}
        public JsString wildcard{get;set;}
    }
    #endregion
    #region Dom
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Dom
    {
        public Dom(){}
        public Dom(object @event){}
        public void getPageX(){}
        public void getPageY(){}
        /// <summary>
        /// Gets the target for the event.
        /// @param {String} selector (optional) A simple selector to filter the target or look for an ancestor of the target
        /// @param {Number/Mixed} maxDepth (optional) The max depth to
        /// search as a number or element (defaults to 10 || document.body)
        /// @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
        /// @return {HTMLElement}
        /// </summary>
        public void getTarget(JsString selector, object maxDepth, bool returnEl){}
        public void getTime(){}
        /// <summary>
        /// @deprecated
        /// </summary>
        public void getXY(){}
        public void preventDefault(){}
        public void setDelegatedTarget(object target){}
        public void stopEvent(){}
        [JsProperty]
        public object DelegatedTarget{private get;[JsMethod(Name="setDelegatedTarget")]set;}
        /// <summary>
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Event
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Event
    {
        public Event(){}
        public void set(object name, object value){}
        public void stopEvent(){}
        public void stopPropagation(){}
        /// <summary>
        /// Represents an event.
        /// @class Ext.event.Event
        /// @alternateClassName Ext.EventObject
        /// </summary>
        public JsString alternateClassName{get;set;}
        public JsString alternativeClassName{get;set;}
        /// <summary>
        /// Represents an event.
        /// @class Ext.event.Event
        /// @alternateClassName Ext.EventObject
        /// </summary>
        public bool isStopped{get;set;}
    }
    #endregion
    #region ListenerStack
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ListenerStack
    {
        public void add(object fn, object scope, object options, object order){}
        public ListenerStack(){}
        public void count(object order){}
        public void create(object fn, object scope, object options, object order){}
        public void getAll(object order){}
        public void getAt(object index, object order){}
        public void remove(object fn, object scope, object order){}
        public JsString currentOrder{get;set;}
        public object length{get;set;}
    }
    #endregion
    #region Touch
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Touch
    {
        public Touch(){}
        public void cloneTouches(object touches){}
        public Touch(object @event, object info){}
        public void doSetTargets(object touches, object targetsMap){}
        public void setTargets(object targetsMap){}
        public JsString extend{get;set;}
        [JsProperty]
        public object Targets{private get;[JsMethod(Name="setTargets")]set;}
    }
    #endregion
}
#endregion
#region Ext.event.publisher
namespace Ext.@event.publisher
{
    #region ComponentDelegation
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentDelegation
    {
        public ComponentDelegation(){}
        public void dispatch(object target, object eventName, object args, object connectedController){}
        public void getSubscribers(object eventName, object createIfNotExist){}
        public void matchesSelector(object component, object selector){}
        public void notify(object target, object eventName){}
        public void publish(object eventName, object component){}
        public void subscribe(object target, object eventName){}
        public void unsubscribe(object target, object eventName){}
        public JsString extend{get;set;}
        public JsRegExp idSelectorRegex{get;set;}
        public JsRegExp optimizedSelectorRegex{get;set;}
        public JsString targetType{get;set;}
    }
    #endregion
    #region ComponentPaint
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentPaint
    {
        public ComponentPaint(){}
        public void getSubscribers(object eventName, object createIfNotExist){}
        public void onComponentHiddenChange(object component, object hidden){}
        public void onComponentRenderedChange(object component, object rendered){}
        public void publish(object subscribers, object component, object eventName){}
        public void setDispatcher(object dispatcher){}
        public void subscribe(object target, object eventName){}
        public void unsubscribe(object target, object eventName){}
        [JsProperty]
        public object Dispatcher{private get;[JsMethod(Name="setDispatcher")]set;}
        public JsString extend{get;set;}
        public JsRegExp idSelectorRegex{get;set;}
        public JsString targetType{get;set;}
    }
    #endregion
    #region Dom
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Dom
    {
        public void attachListener(object eventName){}
        public Dom(){}
        public void dispatch(object target, object eventName, object args){}
        public void doesEventBubble(object eventName){}
        public void doPublish(object subscribers, object eventName, object targets, object @event){}
        public void getBubblingTargets(object target){}
        public void getElementTarget(object target){}
        public void getSubscribers(object eventName){}
        public void getSubscribersCount(object eventName){}
        public void getVendorEventName(object eventName){}
        public void hasSubscriber(object target, object eventName){}
        public void matchesSelector(object element, object selector){}
        public void onEvent(object e){}
        public void publish(object eventName, object targets, object @event){}
        public void removeListener(object eventName){}
        public void subscribe(object target, object eventName){}
        public void unsubscribe(object target, object eventName){}
        public JsRegExp classNameSplitRegex{get;set;}
        public JsString extend{get;set;}
        public JsRegExp idOrClassSelectorRegex{get;set;}
        public JsString SELECTOR_ALL{get;set;}
        public JsString targetType{get;set;}
    }
    #endregion
    #region Publisher
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Publisher
    {
        public Publisher(){}
        public void dispatch(object target, object eventName, object args){}
        public void getHandledEvents(){}
        public void getTargetType(){}
        public void handles(object eventName){}
        public void notify(){}
        public void setDispatcher(object dispatcher){}
        public void subscribe(){}
        public void unsubscribe(){}
        [JsProperty]
        public object Dispatcher{private get;[JsMethod(Name="setDispatcher")]set;}
        public JsString targetType{get;set;}
    }
    #endregion
    #region TouchGesture
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TouchGesture
    {
        public TouchGesture(){}
        public void applyBuffering(object buffering){}
        public void applyRecognizers(object recognizers){}
        public TouchGesture(object config){}
        public void doesEventBubble(){}
        public void getActiveRecognizers(){}
        public void getCommonTargets(object targetGroups){}
        public void handles(object eventName){}
        public void invokeRecognizers(object methodName, object e){}
        public void mergeEvents(object events){}
        public void mergeTouchLists(object touchLists){}
        public void onEvent(object e){}
        public void onRecognized(object eventName, object e, object touches, object info){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e){}
        public void processEvent(object e){}
        public void processEvents(){}
        public void publish(object eventName, object targets, object @event, object info){}
        public void registerRecognizer(object recognizer){}
        public object currentTouchesCount{get;set;}
        public JsString extend{get;set;}
        public JsString moveEventName{get;set;}
    }
    #endregion
}
#endregion
#region Ext.event.recognizer
namespace Ext.@event.recognizer
{
    #region DoubleTap
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DoubleTap
    {
        public DoubleTap(){}
        public void fireSingleTap(object e, object touch){}
        public void onEnd(object e){}
        public void onTouchMove(){}
        public void onTouchStart(object e){}
        public JsString extend{get;set;}
        public object singleTapTimer{get;set;}
    }
    #endregion
    #region Drag
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Drag
    {
        public Drag(){}
        public void getInfo(object e, object touch){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e){}
        public JsString extend{get;set;}
        public bool isStarted{get;set;}
        public object lastPoint{get;set;}
        public object previousPoint{get;set;}
        public object startPoint{get;set;}
    }
    #endregion
    #region HorizontalSwipe
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HorizontalSwipe
    {
        public HorizontalSwipe(){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e){}
        public JsString extend{get;set;}
    }
    #endregion
    #region LongPress
    [JsType(JsMode.Prototype, Export=false)]
    public partial class LongPress
    {
        public LongPress(){}
        public void fail(){}
        public void fireLongPress(object e){}
        public void onTouchEnd(){}
        public void onTouchMove(){}
        public void onTouchStart(object e){}
        public JsString extend{get;set;}
    }
    #endregion
    #region MultiTouch
    [JsType(JsMode.Prototype, Export=false)]
    public partial class MultiTouch
    {
        public MultiTouch(){}
        public void end(object e){}
        public void onTouchEnd(object e){}
        public void onTouchStart(object e){}
        public void start(){}
        public JsString extend{get;set;}
        public bool isStarted{get;set;}
        public bool isTracking{get;set;}
        public object requiredTouchesCount{get;set;}
    }
    #endregion
    #region Pinch
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Pinch
    {
        public Pinch(){}
        public void fail(){}
        public void fireEnd(object e){}
        public void onTouchMove(object e){}
        public JsString extend{get;set;}
        public object lastTouches{get;set;}
        public object requiredTouchesCount{get;set;}
        public object startDistance{get;set;}
    }
    #endregion
    #region Recognizer
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Recognizer
    {
        public Recognizer(){}
        public Recognizer(object config){}
        public void fail(){}
        public void fire(){}
        public void getHandledEvents(){}
    }
    #endregion
    #region Rotate
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Rotate
    {
        public Rotate(){}
        public void fireEnd(object e){}
        public void onTouchMove(object e){}
        public JsString extend{get;set;}
        public object lastTouches{get;set;}
        public object requiredTouchesCount{get;set;}
        public object startAngle{get;set;}
    }
    #endregion
    #region SingleTouch
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SingleTouch
    {
        public SingleTouch(){}
        public void onTouchStart(object e){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Swipe
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Swipe
    {
        public Swipe(){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Tap
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Tap
    {
        public Tap(){}
        public void onTouchEnd(object e){}
        public void onTouchMove(){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Touch
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Touch
    {
        public Touch(){}
        public JsString extend{get;set;}
    }
    #endregion
    #region VerticalSwipe
    [JsType(JsMode.Prototype, Export=false)]
    public partial class VerticalSwipe
    {
        public VerticalSwipe(){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e){}
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.field
namespace Ext.field
{
    #region Checkbox
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Checkbox
    {
        public Checkbox(CheckboxConfig config){}
        public Checkbox(){}
        /// <summary>
        /// Set the checked state of the checkbox to true
        /// @return {Ext.field.Checkbox} This checkbox
        /// </summary>
        public Checkbox check(){return null;}
        public void doInitValue(){}
        /// <summary>
        /// Returns the field checked value
        /// @return {Mixed} The field value
        /// </summary>
        public void getChecked(){}
        /// <summary>
        /// Returns an array of values from the checkboxes in the group that are checked,
        /// @return {Array}
        /// </summary>
        public void getGroupValues(){}
        public void getSameGroupFields(){}
        public void getValue(){}
        public void initialize(){}
        /// <summary>
        /// Returns the checked state of the checkbox.
        /// @return {Boolean} True if checked, else otherwise
        /// </summary>
        public bool isChecked(){return false;}
        public void onClick(object input, object e){}
        public void onMaskTap(object input, object e){}
        public void reset(){}
        /// <summary>
        /// Resets the status of all matched checkboxes in the same group to checked
        /// @param {Array} values An array of values
        /// @return {Ext.field.Checkbox} This checkbox
        /// </summary>
        public Checkbox resetGroupValues(){return null;}
        public void setChecked(object newChecked){}
        /// <summary>
        /// Set the status of all matched checkboxes in the same group to checked
        /// @param {Array} values An array of values
        /// @return {Ext.field.Checkbox} This checkbox
        /// </summary>
        public Checkbox setGroupValues(JsArray values){return null;}
        /// <summary>
        /// Set the checked state of the checkbox to false
        /// @return {Ext.field.Checkbox} This checkbox
        /// </summary>
        public Checkbox uncheck(){return null;}
        public void updateChecked(object newChecked){}
        /// <summary>
        /// The checkbox field is an enhanced version of the native browser checkbox and is great for enabling your user to
        /// choose one or more items from a set (for example choosing toppings for a pizza order). It works like any other
        /// {@link Ext.field.Field field} and is usually found in the context of a form:
        /// ## Example
        /// @example preview
        /// var form = Ext.create('Ext.form.Panel', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype: 'checkboxfield',
        /// name : 'tomato',
        /// label: 'Tomato',
        /// value: 'tomato',
        /// checked: true
        /// },
        /// {
        /// xtype: 'checkboxfield',
        /// name : 'salami',
        /// label: 'Salami'
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// items: [
        /// { xtype: 'spacer' },
        /// {
        /// text: 'getValues',
        /// handler: function() {
        /// var form = Ext.ComponentQuery.query('formpanel')[0],
        /// values = form.getValues();
        /// Ext.Msg.alert(null,
        /// "Tomato: " + ((values.tomato) ? "yes" : "no")
        /// + "<br />Salami: " + ((values.salami) ? "yes" : "no")
        /// );
        /// }
        /// },
        /// { xtype: 'spacer' }
        /// ]
        /// }
        /// ]
        /// });
        /// The form above contains two check boxes - one for Tomato, one for Salami. We configured the Tomato checkbox to be
        /// checked immediately on load, and the Salami checkbox to be unchecked. We also specified an optional text
        /// {@link #value} that will be sent when we submit the form. We can get this value using the Form's
        /// {@link Ext.form.Panel#getValues getValues} function, or have it sent as part of the data that is sent when the
        /// form is submitted:
        /// form.getValues(); //contains a key called 'tomato' if the Tomato field is still checked
        /// form.submit(); //will send 'tomato' in the form submission data
        /// </summary>
        public JsString alternateClassName{get;set;}
        [JsProperty]
        public object Checked{private get;[JsMethod(Name="setChecked")]set;}
        /// <summary>
        /// The checkbox field is an enhanced version of the native browser checkbox and is great for enabling your user to
        /// choose one or more items from a set (for example choosing toppings for a pizza order). It works like any other
        /// {@link Ext.field.Field field} and is usually found in the context of a form:
        /// ## Example
        /// @example preview
        /// var form = Ext.create('Ext.form.Panel', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype: 'checkboxfield',
        /// name : 'tomato',
        /// label: 'Tomato',
        /// value: 'tomato',
        /// checked: true
        /// },
        /// {
        /// xtype: 'checkboxfield',
        /// name : 'salami',
        /// label: 'Salami'
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// items: [
        /// { xtype: 'spacer' },
        /// {
        /// text: 'getValues',
        /// handler: function() {
        /// var form = Ext.ComponentQuery.query('formpanel')[0],
        /// values = form.getValues();
        /// Ext.Msg.alert(null,
        /// "Tomato: " + ((values.tomato) ? "yes" : "no")
        /// + "<br />Salami: " + ((values.salami) ? "yes" : "no")
        /// );
        /// }
        /// },
        /// { xtype: 'spacer' }
        /// ]
        /// }
        /// ]
        /// });
        /// The form above contains two check boxes - one for Tomato, one for Salami. We configured the Tomato checkbox to be
        /// checked immediately on load, and the Salami checkbox to be unchecked. We also specified an optional text
        /// {@link #value} that will be sent when we submit the form. We can get this value using the Form's
        /// {@link Ext.form.Panel#getValues getValues} function, or have it sent as part of the data that is sent when the
        /// form is submitted:
        /// form.getValues(); //contains a key called 'tomato' if the Tomato field is still checked
        /// form.submit(); //will send 'tomato' in the form submission data
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Set the status of all matched checkboxes in the same group to checked
        /// @param {Array} values An array of values
        /// @return {Ext.field.Checkbox} This checkbox
        /// </summary>
        [JsProperty]
        public JsArray GroupValues{private get;[JsMethod(Name="setGroupValues")]set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region CheckboxConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class CheckboxConfig
    {
        public CheckboxConfig(){}
        /// <summary>
        /// <tt>true</tt> if the checkbox should render initially checked
        /// @accessor
        /// </summary>
        public bool @checked{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public JsNumber tabIndex{get;set;}
        /// <summary>
        /// The string value to submit if the item is in a checked state.
        /// @accessor
        /// </summary>
        public JsString value{get;set;}
    }
    #endregion
    #region DatePicker
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DatePicker
    {
        public DatePicker(DatePickerConfig config){}
        public DatePicker(){}
        public void applyPicker(object config){}
        public void applyValue(object value){}
        /// <summary>
        /// Returns the value of the field, which will be a {@link Date} unless the <tt>format</tt> parameter is true.
        /// @param {Boolean} format True to format the value with <tt>Ext.util.Format.defaultDateFormat</tt>
        /// </summary>
        public void getFormattedValue(bool format){}
        public void getValue(){}
        public void initialize(){}
        public void onDestroy(){}
        /// <summary>
        /// @private
        /// Listener to the tap event of the mask element. Shows the internal {@link #datePicker} component when the button has been tapped.
        /// </summary>
        public void onMaskTap(){}
        /// <summary>
        /// Called when the picker changes its value
        /// @param {Ext.picker.Date} picker The date picker
        /// @param {Object} value The new value from the date picker
        /// @private
        /// </summary>
        public void onPickerChange(Ext.picker.Date picker, object value){}
        /// <summary>
        /// Destroys the picker when it is hidden, if
        /// {@link Ext.field.DatePicker#destroyPickerOnHide destroyPickerOnHide} is set to true
        /// @private
        /// </summary>
        public void onPickerHide(){}
        public void reset(){}
        public void updatePicker(object newPicker){}
        public void updateValue(object newValue){}
        public JsString alias{get;set;}
        /// <summary>
        /// This is a specialized field which shows a {@link Ext.picker.Date} when tapped. If it has a predefined value,
        /// or a value is selected in the {@link Ext.picker.Date}, it will be displayed like a normal {@link Ext.field.Text}
        /// (but not selectable/changable).
        /// Ext.create('Ext.field.DatePicker', {
        /// label: 'Birthday',
        /// value: new Date()
        /// });
        /// {@link Ext.field.DatePicker} fields are very simple to implement, and have no required configurations.
        /// ## Examples
        /// It can be very useful to set a default {@link #value} configuration on {@link Ext.field.DatePicker} fields. In
        /// this example, we set the {@link #value} to be the current date. You can also use the {@link #setValue} method to
        /// update the value at any time.
        /// @example preview
        /// Ext.create('Ext.form.Panel', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype: 'fieldset',
        /// items: [
        /// {
        /// xtype: 'datepickerfield',
        /// label: 'Birthday',
        /// name: 'birthday',
        /// value: new Date()
        /// }
        /// ]
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// items: [
        /// { xtype: 'spacer' },
        /// {
        /// text: 'setValue',
        /// handler: function() {
        /// var datePickerField = Ext.ComponentQuery.query('datepickerfield')[0];
        /// var randomNumber = function(from, to) {
        /// (to - from + 1) + from);
        /// };
        /// datePickerField.setValue({
        /// month: randomNumber(0, 11),
        /// day  : randomNumber(0, 28),
        /// year : randomNumber(1980, 2011)
        /// });
        /// }
        /// },
        /// { xtype: 'spacer' }
        /// ]
        /// }
        /// ]
        /// });
        /// When you need to retrieve the date from the {@link Ext.field.DatePicker}, you can either use the {@link #getValue} or
        /// {@link #getFormattedValue} methods:
        /// @example preview
        /// Ext.create('Ext.form.Panel', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype: 'fieldset',
        /// items: [
        /// {
        /// xtype: 'datepickerfield',
        /// label: 'Birthday',
        /// name: 'birthday',
        /// value: new Date()
        /// }
        /// ]
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// items: [
        /// {
        /// text: 'getValue',
        /// handler: function() {
        /// var datePickerField = Ext.ComponentQuery.query('datepickerfield')[0];
        /// Ext.Msg.alert(null, datePickerField.getValue());
        /// }
        /// },
        /// { xtype: 'spacer' },
        /// {
        /// text: 'getFormattedValue',
        /// handler: function() {
        /// var datePickerField = Ext.ComponentQuery.query('datepickerfield')[0];
        /// Ext.Msg.alert(null, datePickerField.getFormattedValue());
        /// }
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// This is a specialized field which shows a {@link Ext.picker.Date} when tapped. If it has a predefined value,
        /// or a value is selected in the {@link Ext.picker.Date}, it will be displayed like a normal {@link Ext.field.Text}
        /// (but not selectable/changable).
        /// Ext.create('Ext.field.DatePicker', {
        /// label: 'Birthday',
        /// value: new Date()
        /// });
        /// {@link Ext.field.DatePicker} fields are very simple to implement, and have no required configurations.
        /// ## Examples
        /// It can be very useful to set a default {@link #value} configuration on {@link Ext.field.DatePicker} fields. In
        /// this example, we set the {@link #value} to be the current date. You can also use the {@link #setValue} method to
        /// update the value at any time.
        /// @example preview
        /// Ext.create('Ext.form.Panel', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype: 'fieldset',
        /// items: [
        /// {
        /// xtype: 'datepickerfield',
        /// label: 'Birthday',
        /// name: 'birthday',
        /// value: new Date()
        /// }
        /// ]
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// items: [
        /// { xtype: 'spacer' },
        /// {
        /// text: 'setValue',
        /// handler: function() {
        /// var datePickerField = Ext.ComponentQuery.query('datepickerfield')[0];
        /// var randomNumber = function(from, to) {
        /// (to - from + 1) + from);
        /// };
        /// datePickerField.setValue({
        /// month: randomNumber(0, 11),
        /// day  : randomNumber(0, 28),
        /// year : randomNumber(1980, 2011)
        /// });
        /// }
        /// },
        /// { xtype: 'spacer' }
        /// ]
        /// }
        /// ]
        /// });
        /// When you need to retrieve the date from the {@link Ext.field.DatePicker}, you can either use the {@link #getValue} or
        /// {@link #getFormattedValue} methods:
        /// @example preview
        /// Ext.create('Ext.form.Panel', {
        /// fullscreen: true,
        /// items: [
        /// {
        /// xtype: 'fieldset',
        /// items: [
        /// {
        /// xtype: 'datepickerfield',
        /// label: 'Birthday',
        /// name: 'birthday',
        /// value: new Date()
        /// }
        /// ]
        /// },
        /// {
        /// xtype: 'toolbar',
        /// docked: 'bottom',
        /// items: [
        /// {
        /// text: 'getValue',
        /// handler: function() {
        /// var datePickerField = Ext.ComponentQuery.query('datepickerfield')[0];
        /// Ext.Msg.alert(null, datePickerField.getValue());
        /// }
        /// },
        /// { xtype: 'spacer' },
        /// {
        /// text: 'getFormattedValue',
        /// handler: function() {
        /// var datePickerField = Ext.ComponentQuery.query('datepickerfield')[0];
        /// Ext.Msg.alert(null, datePickerField.getFormattedValue());
        /// }
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region DatePickerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DatePickerConfig
    {
        public DatePickerConfig(){}
        /// <summary>
        /// Whether or not to destroy the picker widget on hide. This save memory if it's not used frequently,
        /// but increase delay time on the next show due to re-instantiation. Defaults to false
        /// @accessor
        /// </summary>
        public bool destroyPickerOnHide{get;set;}
        /// <summary>
        /// An object that is used when creating the internal {@link Ext.picker.Date} component or a direct instance of {@link Ext.picker.Date}
        /// Defaults to true
        /// @accessor
        /// </summary>
        public object picker{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public JsNumber tabIndex{get;set;}
        /// <summary>
        /// Default value for the field and the internal {@link Ext.picker.Date} component. Accepts an object of 'year',
        /// 'month' and 'day' values, all of which should be numbers, or a {@link Date}.
        /// *
        /// Example: {year: 1989, day: 1, month: 5} = 1st May 1989 or new Date()
        /// @accessor
        /// </summary>
        public object value{get;set;}
    }
    #endregion
    #region Email
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Email
    {
        public Email(){}
        public JsString alias{get;set;}
        /// <summary>
        /// The Email field creates an HTML5 email input and is usually created inside a form. Because it creates an HTML email
        /// input field, most browsers will show a specialized virtual keyboard for email address input. Aside from that, the
        /// email field is just a normal text field. Here's an example of how to use it in a form:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Register'
        /// },
        /// items: [
        /// {
        /// xtype: 'emailfield',
        /// label: 'Email',
        /// name: 'email'
        /// },
        /// {
        /// xtype: 'passwordfield',
        /// label: 'Password',
        /// name: 'password'
        /// }
        /// ]
        /// });
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Email', {
        /// label: 'Email address',
        /// value: 'prefilled@email.com'
        /// });
        /// Because email field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text fields
        /// provide, including getting and setting the value at runtime, validations and various events that are fired as the
        /// user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional functionality
        /// available.
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The Email field creates an HTML5 email input and is usually created inside a form. Because it creates an HTML email
        /// input field, most browsers will show a specialized virtual keyboard for email address input. Aside from that, the
        /// email field is just a normal text field. Here's an example of how to use it in a form:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Register'
        /// },
        /// items: [
        /// {
        /// xtype: 'emailfield',
        /// label: 'Email',
        /// name: 'email'
        /// },
        /// {
        /// xtype: 'passwordfield',
        /// label: 'Password',
        /// name: 'password'
        /// }
        /// ]
        /// });
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Email', {
        /// label: 'Email address',
        /// value: 'prefilled@email.com'
        /// });
        /// Because email field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text fields
        /// provide, including getting and setting the value at runtime, validations and various events that are fired as the
        /// user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional functionality
        /// available.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Field
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Field
    {
        public Field(){}
        public Field(Ext.field.FieldConfig config){}
        /// <summary>
        /// Creates a new {@link Ext.form.ClearIcon} instance using {@link Ext.Factory}
        /// @private
        /// </summary>
        public void applyClearIcon(object config){}
        /// <summary>
        /// Creates a new {@link Ext.field.Input} instance using {@link Ext.Factory}
        /// @private
        /// </summary>
        public void applyInput(object config){}
        /// <summary>
        /// Creates a new {@link Ext.form.Label} instance using {@link Ext.Factory}
        /// @private
        /// </summary>
        public void applyLabel(object config){}
        public Field(object config){}
        /// <summary>
        /// @private
        /// </summary>
        public void doInitValue(){}
        public void doSetDisabled(object disabled){}
        /// <summary>
        /// Returns the field data value
        /// @return {String} The field value
        /// </summary>
        public JsString getValue(){return null;}
        public void initialize(){}
        /// <summary>
        /// <p>Returns true if the value of this Field has been changed from its {@link #originalValue}.
        /// Will return false if the field is disabled or has not been rendered yet.</p>
        /// @return {Boolean} True if this field has been changed from its original value (and
        /// is not disabled), false otherwise.
        /// </summary>
        public bool isDirty(){return false;}
        /// <summary>
        /// Updates the class on this field when the label alignment changes
        /// @private
        /// </summary>
        public void onLabelAlignChange(object label, object newAlign, object oldAlign){}
        /// <summary>
        /// Resets the current field value to the originally loaded value and clears any validation messages.
        /// </summary>
        public void reset(){}
        /// <summary>
        /// Adds the new {@link Ext.form.ClearIcon} instance into this field
        /// @private
        /// </summary>
        public void updateClearIcon(object newClearIcon){}
        /// <summary>
        /// Adds the new {@link Ext.field.Input} instance into this field
        /// @private
        /// </summary>
        public void updateInput(object newInput){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateInputType(object newInputType){}
        /// <summary>
        /// Adds the new {@link Ext.form.Label} instance into this field
        /// @private
        /// </summary>
        public void updateLabel(object newLabel, object oldLabel){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateLabelAlign(object newLabelAlign){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateLabelCls(object newLabelCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateLabelWidth(object newLabelWidth){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateName(object newName){}
        /// <summary>
        /// Updates the {@link #required} configuration
        /// @private
        /// </summary>
        public void updateRequired(object newRequired){}
        /// <summary>
        /// Updates the {@link #required} configuration
        /// @private
        /// </summary>
        public void updateRequiredCls(object newRequiredCls, object oldRequiredCls){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateTabIndex(object newTabIndex){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateValue(object newValue){}
        public JsString alias{get;set;}
        /// <summary>
        /// Field is the base class for all form fields used in Sencha Touch. It provides a lot of shared functionality to all
        /// field subclasses (for example labels, simple validation, {@link #clearIcon clearing} and tab index management), but
        /// is rarely used directly. Instead, it is much more common to use one of the field subclasses:
        /// *
        /// <pre>
        /// xtype            Class
        /// ---------------------------------------
        /// textfield        {@link Ext.field.Text}
        /// numberfield      {@link Ext.field.Number}
        /// textareafield    {@link Ext.field.TextArea}
        /// hiddenfield      {@link Ext.field.Hidden}
        /// radiofield       {@link Ext.field.Radio}
        /// checkboxfield    {@link Ext.field.Checkbox}
        /// selectfield      {@link Ext.field.Select}
        /// togglefield      {@link Ext.field.Toggle}
        /// fieldset         {@link Ext.form.FieldSet}
        /// </pre>
        /// *
        /// Fields are normally used within the context of a form and/or fieldset. See the {@link Ext.form.Panel FormPanel}
        /// and {@link Ext.form.FieldSet FieldSet} docs for examples on how to put those together, or the list of links above
        /// for usage of individual field types. If you wish to create your own Field subclasses you can extend this class,
        /// though it is sometimes more useful to extend {@link Ext.field.Text} as this provides additional text entry
        /// functionality.
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Field is the base class for all form fields used in Sencha Touch. It provides a lot of shared functionality to all
        /// field subclasses (for example labels, simple validation, {@link #clearIcon clearing} and tab index management), but
        /// is rarely used directly. Instead, it is much more common to use one of the field subclasses:
        /// *
        /// <pre>
        /// xtype            Class
        /// ---------------------------------------
        /// textfield        {@link Ext.field.Text}
        /// numberfield      {@link Ext.field.Number}
        /// textareafield    {@link Ext.field.TextArea}
        /// hiddenfield      {@link Ext.field.Hidden}
        /// radiofield       {@link Ext.field.Radio}
        /// checkboxfield    {@link Ext.field.Checkbox}
        /// selectfield      {@link Ext.field.Select}
        /// togglefield      {@link Ext.field.Toggle}
        /// fieldset         {@link Ext.form.FieldSet}
        /// </pre>
        /// *
        /// Fields are normally used within the context of a form and/or fieldset. See the {@link Ext.form.Panel FormPanel}
        /// and {@link Ext.form.FieldSet FieldSet} docs for examples on how to put those together, or the list of links above
        /// for usage of individual field types. If you wish to create your own Field subclasses you can extend this class,
        /// though it is sometimes more useful to extend {@link Ext.field.Text} as this provides additional text entry
        /// functionality.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Set to true on all Ext.field.Field subclasses. This is used by {@link Ext.form.Panel#getValues} to determine which
        /// components inside a form are fields.
        /// @property isField
        /// @type Boolean
        /// </summary>
        public bool isField{get;set;}
        public bool isFormField{get;set;}
        /// <summary>
        /// Returns the field data value
        /// @return {String} The field value
        /// </summary>
        [JsProperty]
        public JsString Value{[JsMethod(Name="getValue")]get;private set;}
    }
    #endregion
    #region FieldConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldConfig
    {
        public FieldConfig(){}
        /// <summary>
        /// True to use a clear icon in this field
        /// @accessor
        /// </summary>
        public bool clearIcon{get;set;}
        /// <summary>
        /// An instance of the inner input for this field, if one
        /// has been defined.
        /// @accessor
        /// </summary>
        public object input{get;set;}
        /// <summary>
        /// The type attribute for input fields -- e.g. radio, text, password, file (defaults
        /// to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are
        /// no separate Ext components for those.
        /// This is now deprecated. Please use 'input.type' instead.
        /// @deprecated 2.0
        /// @accessor
        /// </summary>
        public JsString inputType{get;set;}
        /// <summary>
        /// The label to associate with this field.
        /// @accessor
        /// </summary>
        public JsString label{get;set;}
        /// <summary>
        /// The position to render the label relative to the field input. Defaults to 'left'.
        /// See {@link Ext.form.Label} for more information
        /// @accessor
        /// </summary>
        public JsString labelAlign{get;set;}
        /// <summary>
        /// Optional CSS class to add to the Label element
        /// @accessor
        /// </summary>
        public JsString labelCls{get;set;}
        /// <summary>
        /// The width to make this field's label (defaults to 30%).
        /// See {@link Ext.form.Label} for more information
        /// @accessor
        /// </summary>
        public JsNumber labelWidth{get;set;}
        /// <summary>
        /// The field's HTML name attribute.
        /// <b>Note</b>: this property must be set if this field is to be automatically included with
        /// {@link Ext.form.Panel#submit form submit()}.
        /// @accessor
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// True to make this field required. Note: this only causes a visual indication.
        /// Doesn't prevent user from submitting the form.
        /// @accessor
        /// </summary>
        public bool required{get;set;}
        /// <summary>
        /// The className to be applied to this Field when the {@link #required} configuration is set to true
        /// @accessor
        /// </summary>
        public JsString requiredCls{get;set;}
        /// <summary>
        /// The tabIndex for this field. Note this only applies to fields that are rendered,
        /// not those which are built via applyTo.
        /// @accessor
        /// </summary>
        public JsNumber tabIndex{get;set;}
        /// <summary>
        /// True to use a clear icon in this field
        /// @accessor
        /// </summary>
        public bool useClearIcon{get;set;}
        /// <summary>
        /// A value to initialize this field with.
        /// @accessor
        /// </summary>
        public object value{get;set;}
    }
    #endregion
    #region Hidden
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Hidden
    {
        public Hidden(HiddenConfig config){}
        public Hidden(){}
        public JsString alias{get;set;}
        /// <summary>
        /// Hidden fields allow you to easily inject additional data into a {@link Ext.form.Panel form} without displaying
        /// additional fields on the screen. This is often useful for sending dynamic or previously collected data back to the
        /// server in the same request as the normal form submission. For example, here is how we might set up a form to send
        /// back a hidden userId field:
        /// var form = Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Set your preferences'
        /// },
        /// items: [
        /// {
        /// xtype: 'hiddenfield',
        /// name: 'userId',
        /// value: 123
        /// },
        /// {
        /// xtype: 'checkboxfield',
        /// label: 'Enable notifications',
        /// name: 'notifications'
        /// }
        /// ]
        /// });
        /// In the form above we created two fields - a hidden field and a {@link Ext.field.Checkbox check box field}. Only the
        /// check box will be visible, but both fields will be submitted. Hidden fields cannot be tabbed to - they are removed
        /// from the tab index so when your user taps the next/previous field buttons the hidden field is skipped over.
        /// It's easy to read and update the value of a hidden field within a form. Using the example above, we can get a
        /// reference to the hidden field and then set it to a new value in 2 lines of code:
        /// var userId = form.down('hiddenfield')[0];
        /// userId.setValue(1234);
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Hidden fields allow you to easily inject additional data into a {@link Ext.form.Panel form} without displaying
        /// additional fields on the screen. This is often useful for sending dynamic or previously collected data back to the
        /// server in the same request as the normal form submission. For example, here is how we might set up a form to send
        /// back a hidden userId field:
        /// var form = Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Set your preferences'
        /// },
        /// items: [
        /// {
        /// xtype: 'hiddenfield',
        /// name: 'userId',
        /// value: 123
        /// },
        /// {
        /// xtype: 'checkboxfield',
        /// label: 'Enable notifications',
        /// name: 'notifications'
        /// }
        /// ]
        /// });
        /// In the form above we created two fields - a hidden field and a {@link Ext.field.Checkbox check box field}. Only the
        /// check box will be visible, but both fields will be submitted. Hidden fields cannot be tabbed to - they are removed
        /// from the tab index so when your user taps the next/previous field buttons the hidden field is skipped over.
        /// It's easy to read and update the value of a hidden field within a form. Using the example above, we can get a
        /// reference to the hidden field and then set it to a new value in 2 lines of code:
        /// var userId = form.down('hiddenfield')[0];
        /// userId.setValue(1234);
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region HiddenConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class HiddenConfig
    {
        public HiddenConfig(){}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public JsNumber tabIndex{get;set;}
    }
    #endregion
    #region Input
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Input
    {
        public Input(InputConfig config){}
        public Input(){}
        public void applyAutoCapitalize(object autoCapitalize){}
        public void applyAutoComplete(object autoComplete){}
        public void applyAutoCorrect(object autoCorrect){}
        public void applyChecked(object @checked){}
        public void applyMaxLength(object maxLength){}
        public void applyMaxRows(object maxRows){}
        public void applyTabIndex(object tabIndex){}
        public void applyUseMask(object useMask){}
        public void applyValue(object value){}
        /// <summary>
        /// Attempts to forcefully blur input focus for the field.
        /// @return {Ext.field.Input} this
        /// </summary>
        public Input blur(){return null;}
        public void doBlur(object e){}
        public void doFocus(object e){}
        public void doInitValue(){}
        public void doMaskTap(){}
        public void doSetDisabled(object disabled){}
        /// <summary>
        /// Attempts to set the field as the active input focus.
        /// @return {Ext.field.Input} this
        /// </summary>
        public Input focus(){return null;}
        /// <summary>
        /// Returns the checked value of this field
        /// @return {Mixed} value The field value
        /// </summary>
        public void getChecked(){}
        public void getTemplate(){}
        /// <summary>
        /// Returns the field data value
        /// @return {Mixed} value The field value
        /// </summary>
        public void getValue(){}
        public void hideMask(object e){}
        public void initElement(){}
        /// <summary>
        /// <p>Returns true if the value of this Field has been changed from its original value.
        /// Will return false if the field is disabled or has not been rendered yet.</p>
        /// </summary>
        public void isDirty(){}
        public void onBlur(){}
        public void onChange(){}
        public void onClick(){}
        public void onFocus(){}
        public void onKeyUp(){}
        public void onMaskTap(object e){}
        public void onMouseDown(){}
        public void onPaste(){}
        /// <summary>
        /// Resets the current field value to the originally loaded value and clears any validation messages.
        /// </summary>
        public void reset(){}
        public void showMask(object e){}
        public void testAutoFn(object value){}
        /// <summary>
        /// Updates the autocapitalize attribute with the {@link #autoCapitalize} configuration
        /// @private
        /// </summary>
        public void updateAutoCapitalize(object newAutoCapitalize){}
        /// <summary>
        /// Updates the autocomplete attribute with the {@link #autoComplete} configuration
        /// @private
        /// </summary>
        public void updateAutoComplete(object newAutoComplete){}
        /// <summary>
        /// Updates the autocorrect attribute with the {@link #autoCorrect} configuration
        /// @private
        /// </summary>
        public void updateAutoCorrect(object newAutoCorrect){}
        /// <summary>
        /// Updates the autocorrect attribute with the {@link #autoCorrect} configuration
        /// @private
        /// </summary>
        public void updateChecked(object newChecked){}
        /// <summary>
        /// Helper method to update a specified attribute on the fieldEl, or remove the attribute all together
        /// @private
        /// </summary>
        public void updateFieldAttribute(object attribute, object newValue){}
        /// <summary>
        /// Updates the {@link #inputCls} configuration
        /// </summary>
        public void updateInputCls(object newInputCls, object oldInputCls){}
        /// <summary>
        /// Updates the maxlength attribute with the {@link #maxLength} configuration
        /// @private
        /// </summary>
        public void updateMaxLength(object newMaxLength){}
        public void updateMaxRows(object newRows){}
        /// <summary>
        /// Updates the max attribute with the {@link #maxValue} configuration
        /// @private
        /// </summary>
        public void updateMaxValue(object newMaxValue){}
        /// <summary>
        /// Updates the min attribute with the {@link #minValue} configuration
        /// @private
        /// </summary>
        public void updateMinValue(object newMinValue){}
        /// <summary>
        /// Updates the name attribute with the {@link #name} configuration
        /// @private
        /// </summary>
        public void updateName(object newName){}
        /// <summary>
        /// Updates the placeholder attribute with the {@link #placeHolder} configuration
        /// @private
        /// </summary>
        public void updatePlaceHolder(object newPlaceHolder){}
        /// <summary>
        /// Updates the step attribute with the {@link #stepValue} configuration
        /// @private
        /// </summary>
        public void updateStepValue(object newStepValue){}
        /// <summary>
        /// Updates the tabIndex attribute with the {@link #tabIndex} configuration
        /// @private
        /// </summary>
        public void updateTabIndex(object newTabIndex){}
        /// <summary>
        /// Updates the type attribute with the {@link #type} configuration
        /// @private
        /// </summary>
        public void updateType(object newType, object oldType){}
        /// <summary>
        /// Updates the useMask configuration
        /// </summary>
        public void updateUseMask(object newUseMask){}
        /// <summary>
        /// Updates the {@link #value} configuration
        /// @private
        /// </summary>
        public void updateValue(object newValue){}
        public JsRegExp checkedRe{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region InputConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class InputConfig
    {
        public InputConfig(){}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool autoComplete{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool autoCorrect{get;set;}
        /// <summary>
        /// <tt>true</tt> if the checkbox should render initially checked (defaults to <tt>false</tt>)
        /// @accessor
        /// </summary>
        public bool @checked{get;set;}
        /// <summary>
        /// True to disable the field (defaults to false).
        /// <p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
        /// disabled Fields will not be {@link Ext.form.Panel#submit submitted}.</p>
        /// @accessor
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// The CSS class to use when the field receives focus
        /// @accessor
        /// </summary>
        public JsString focusCls{get;set;}
        /// <summary>
        /// The className to be applied to this input
        /// @accessor
        /// </summary>
        public JsString inputCls{get;set;}
        /// <summary>
        /// The maximum number of permitted input characters (defaults to 0).
        /// @accessor
        /// </summary>
        public JsNumber maxLength{get;set;}
        /// <summary>
        /// The maximum value that this Number field can accept (defaults to undefined, e.g. no maximum)
        /// @accessor
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// The minimum value that this Number field can accept (defaults to undefined, e.g. no minimium)
        /// @accessor
        /// </summary>
        public JsNumber minValue{get;set;}
        /// <summary>
        /// The field's HTML name attribute
        /// <b>Note</b>: this property must be set if this field is to be automatically included with
        /// {@link Ext.form.Panel#submit form submit()}.
        /// @accessor
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// The original value when the input is rendered
        /// @private
        /// </summary>
        public object originalValue{get;set;}
        /// <summary>
        /// A string value displayed in the input (if supported) when the control is empty.
        /// @accessor
        /// </summary>
        public JsString placeHolder{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public object startValue{get;set;}
        /// <summary>
        /// The amount by which the field is incremented or decremented each time the spinner is tapped.
        /// Defaults to undefined, which means that the field goes up or down by 1 each time the spinner is tapped
        /// @accessor
        /// </summary>
        public JsNumber stepValue{get;set;}
        /// <summary>
        /// The tabIndex for this field. Note this only applies to fields that are rendered,
        /// not those which are built via applyTo (defaults to undefined).
        /// @accessor
        /// </summary>
        public JsNumber tabIndex{get;set;}
        /// <summary>
        /// The el tag
        /// @accessor
        /// </summary>
        public JsString tag{get;set;}
        /// <summary>
        /// The type attribute for input fields -- e.g. radio, text, password, file (defaults
        /// to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are
        /// no separate Ext components for those.
        /// @accessor
        /// </summary>
        public JsString type{get;set;}
        /// <summary>
        /// @private
        /// @accessor
        /// </summary>
        public object useMask{get;set;}
        /// <summary>
        /// A value to initialize this field with (defaults to undefined).
        /// @accessor
        /// </summary>
        public object value{get;set;}
    }
    #endregion
    #region Number
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Number
    {
        public Number(NumberConfig config){}
        public Number(){}
        public void applyValue(object value){}
        public void getValue(){}
        public void updateMaxValue(object newMaxValue){}
        public void updateMinValue(object newMinValue){}
        public void updateStepValue(object newStepValue){}
        /// <summary>
        /// The Number field creates an HTML5 number input and is usually created inside a form. Because it creates an HTML
        /// number input field, most browsers will show a specialized virtual keyboard for entering numbers. The Number field
        /// only accepts numerical input and also provides additional spinner UI that increases or decreases the current value
        /// by a configured {@link #stepValue step value}. Here's how we might use one in a form:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Register'
        /// },
        /// items: [
        /// {
        /// xtype: 'numberfield',
        /// label: 'Age',
        /// minValue: 18,
        /// maxValue: 150,
        /// name: 'age'
        /// }
        /// ]
        /// }).show();
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Number', {
        /// label: 'Age',
        /// value: '26'
        /// }).show();
        /// ## minValue, maxValue and stepValue
        /// The {@link #minValue} and {@link #maxValue} configurations are self-explanatory and simply constrain the value
        /// entered to the range specified by the configured min and max values. The other option exposed by this component
        /// is {@link #stepValue}, which enables you to set how much the value changes every time the up and down spinners
        /// are tapped on. For example, to create a salary field that ticks up and down by $1,000 each tap we can do this:
        /// Ext.create('Ext.field.Number', {
        /// label: 'Salary',
        /// value: 30000,
        /// minValue: 25000,
        /// maxValue: 50000,
        /// stepValue: 1000
        /// });
        /// This creates a field that starts with a value of $30,000, steps up and down in $1,000 increments and will not go
        /// beneath $25,000 or above $50,000.
        /// Because number field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text
        /// fields provide, including getting and setting the value at runtime, validations and various events that are fired as
        /// the user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional functionality
        /// available.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The Number field creates an HTML5 number input and is usually created inside a form. Because it creates an HTML
        /// number input field, most browsers will show a specialized virtual keyboard for entering numbers. The Number field
        /// only accepts numerical input and also provides additional spinner UI that increases or decreases the current value
        /// by a configured {@link #stepValue step value}. Here's how we might use one in a form:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Register'
        /// },
        /// items: [
        /// {
        /// xtype: 'numberfield',
        /// label: 'Age',
        /// minValue: 18,
        /// maxValue: 150,
        /// name: 'age'
        /// }
        /// ]
        /// }).show();
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Number', {
        /// label: 'Age',
        /// value: '26'
        /// }).show();
        /// ## minValue, maxValue and stepValue
        /// The {@link #minValue} and {@link #maxValue} configurations are self-explanatory and simply constrain the value
        /// entered to the range specified by the configured min and max values. The other option exposed by this component
        /// is {@link #stepValue}, which enables you to set how much the value changes every time the up and down spinners
        /// are tapped on. For example, to create a salary field that ticks up and down by $1,000 each tap we can do this:
        /// Ext.create('Ext.field.Number', {
        /// label: 'Salary',
        /// value: 30000,
        /// minValue: 25000,
        /// maxValue: 50000,
        /// stepValue: 1000
        /// });
        /// This creates a field that starts with a value of $30,000, steps up and down in $1,000 increments and will not go
        /// beneath $25,000 or above $50,000.
        /// Because number field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text
        /// fields provide, including getting and setting the value at runtime, validations and various events that are fired as
        /// the user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional functionality
        /// available.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region NumberConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class NumberConfig
    {
        public NumberConfig(){}
        /// <summary>
        /// The maximum value that this Number field can accept
        /// @accessor
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// The minimum value that this Number field can accept
        /// @accessor
        /// </summary>
        public JsNumber minValue{get;set;}
        /// <summary>
        /// The amount by which the field is incremented or decremented each time the spinner is tapped.
        /// Defaults to undefined, which means that the field goes up or down by 1 each time the spinner is tapped
        /// @accessor
        /// </summary>
        public JsNumber stepValue{get;set;}
    }
    #endregion
    #region Password
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Password
    {
        public Password(){}
        /// <summary>
        /// The Password field creates a password input and is usually created inside a form. Because it creates a password
        /// field, when the user enters text it will show up as stars. Aside from that, the password field is just a normal text
        /// field. Here's an example of how to use it in a form:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Register'
        /// },
        /// items: [
        /// {
        /// xtype: 'emailfield',
        /// label: 'Email',
        /// name: 'email'
        /// },
        /// {
        /// xtype: 'passwordfield',
        /// label: 'Password',
        /// name: 'password'
        /// }
        /// ]
        /// });
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Password', {
        /// label: 'Password',
        /// value: 'existingPassword'
        /// });
        /// Because the password field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text
        /// fields provide, including getting and setting the value at runtime, validations and various events that are fired as
        /// the user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional functionality
        /// available.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The Password field creates a password input and is usually created inside a form. Because it creates a password
        /// field, when the user enters text it will show up as stars. Aside from that, the password field is just a normal text
        /// field. Here's an example of how to use it in a form:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Register'
        /// },
        /// items: [
        /// {
        /// xtype: 'emailfield',
        /// label: 'Email',
        /// name: 'email'
        /// },
        /// {
        /// xtype: 'passwordfield',
        /// label: 'Password',
        /// name: 'password'
        /// }
        /// ]
        /// });
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Password', {
        /// label: 'Password',
        /// value: 'existingPassword'
        /// });
        /// Because the password field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text
        /// fields provide, including getting and setting the value at runtime, validations and various events that are fired as
        /// the user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional functionality
        /// available.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Radio
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Radio
    {
        public Radio(){}
        /// <summary>
        /// Returns the selected value if this radio is part of a group (other radio fields with the same name, in the same FormPanel),
        /// @return {String}
        /// </summary>
        public void getGroupValue(){}
        /// <summary>
        /// Set the matched radio field's status (that has the same value as the given string) to checked
        /// @param {String} value The value of the radio field to check
        /// @return {String}
        /// </summary>
        public void setGroupValue(JsString value){}
        /// <summary>
        /// The radio field is an enhanced version of the native browser radio controls and is a good way of allowing your user
        /// to choose one option out of a selection of several (for example, choosing a favorite color):
        /// var form = Ext.create('Ext.form.Panel', {
        /// items: [
        /// {
        /// xtype: 'radiofield',
        /// name : 'color',
        /// value: 'red',
        /// label: 'Red',
        /// checked: true
        /// },
        /// {
        /// xtype: 'radiofield',
        /// name : 'color',
        /// value: 'green',
        /// label: 'Green'
        /// },
        /// {
        /// xtype: 'radiofield',
        /// name : 'color',
        /// value: 'blue',
        /// label: 'Blue'
        /// }
        /// ]
        /// });
        /// Above we created a simple form which allows the user to pick a color from the options red, green and blue. Because
        /// we gave each of the fields above the same {@link #name}, the radio field ensures that only one of them can be
        /// checked at a time. When we come to get the values out of the form again or submit it to the server, only 1 value
        /// will be sent for each group of radio fields with the same name:
        /// form.getValues(); //looks like {color: 'red'}
        /// form.submit(); //sends a single field back to the server (in this case color: red)
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The radio field is an enhanced version of the native browser radio controls and is a good way of allowing your user
        /// to choose one option out of a selection of several (for example, choosing a favorite color):
        /// var form = Ext.create('Ext.form.Panel', {
        /// items: [
        /// {
        /// xtype: 'radiofield',
        /// name : 'color',
        /// value: 'red',
        /// label: 'Red',
        /// checked: true
        /// },
        /// {
        /// xtype: 'radiofield',
        /// name : 'color',
        /// value: 'green',
        /// label: 'Green'
        /// },
        /// {
        /// xtype: 'radiofield',
        /// name : 'color',
        /// value: 'blue',
        /// label: 'Blue'
        /// }
        /// ]
        /// });
        /// Above we created a simple form which allows the user to pick a color from the options red, green and blue. Because
        /// we gave each of the fields above the same {@link #name}, the radio field ensures that only one of them can be
        /// checked at a time. When we come to get the values out of the form again or submit it to the server, only 1 value
        /// will be sent for each group of radio fields with the same name:
        /// form.getValues(); //looks like {color: 'red'}
        /// form.submit(); //sends a single field back to the server (in this case color: red)
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Set the matched radio field's status (that has the same value as the given string) to checked
        /// @param {String} value The value of the radio field to check
        /// @return {String}
        /// </summary>
        [JsProperty]
        public JsString GroupValue{private get;[JsMethod(Name="setGroupValue")]set;}
    }
    #endregion
    #region Search
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Search
    {
        public Search(){}
        /// <summary>
        /// The Search field creates an HTML5 search input and is usually created inside a form. Because it creates an HTML
        /// search input type, the visual styling of this input is slightly different to normal text input contrls (the corners
        /// are rounded), though the virtual keyboard displayed by the operating system is the standard keyboard control.
        /// As with all other form fields in Sencha Touch, the search field gains a "clear" button that appears whenever there
        /// is text entered into the form, and which removes that text when tapped.
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Search'
        /// },
        /// items: [
        /// {
        /// xtype: 'searchfield',
        /// label: 'Query',
        /// name: 'query'
        /// }
        /// ]
        /// });
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Search', {
        /// label: 'Search:',
        /// value: 'query'
        /// });
        /// Because search field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text
        /// fields provide, including getting and setting the value at runtime, validations and various events that are fired
        /// as the user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional
        /// functionality available.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The Search field creates an HTML5 search input and is usually created inside a form. Because it creates an HTML
        /// search input type, the visual styling of this input is slightly different to normal text input contrls (the corners
        /// are rounded), though the virtual keyboard displayed by the operating system is the standard keyboard control.
        /// As with all other form fields in Sencha Touch, the search field gains a "clear" button that appears whenever there
        /// is text entered into the form, and which removes that text when tapped.
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Search'
        /// },
        /// items: [
        /// {
        /// xtype: 'searchfield',
        /// label: 'Query',
        /// name: 'query'
        /// }
        /// ]
        /// });
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Search', {
        /// label: 'Search:',
        /// value: 'query'
        /// });
        /// Because search field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text
        /// fields provide, including getting and setting the value at runtime, validations and various events that are fired
        /// as the user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional
        /// functionality available.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Select
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Select
    {
        public Select(){}
        public Select(SelectConfig config){}
        public Select(object config){}
        public void destroy(){}
        public void getListPanel(){}
        public void getPicker(){}
        public void getValue(){}
        public void initialize(){}
        public void onListSelect(object item, object record){}
        public void onListTap(){}
        public void onMaskTap(){}
        public void onPickerChange(object picker, object value){}
        /// <summary>
        /// Resets the Select field to the value of the first record in the store.
        /// @return {Ext.field.Select} this
        /// </summary>
        public Select reset(){return null;}
        public void showComponent(){}
        /// <summary>
        /// Updates the underlying &lt;options&gt; list with new values.
        /// @param {Array} options An array of options configurations to insert or append.
        /// <pre><code>
        /// selectBox.setOptions(
        /// [   {text: 'First Option',  value: 'first'},
        /// {text: 'Second Option', value: 'second'},
        /// {text: 'Third Option',  value: 'third'}
        /// ]).setValue('third');
        /// </code></pre>
        /// Note: option object member names should correspond with defined {@link #valueField valueField} and
        /// {@link #displayField displayField} values.
        /// @return {Ext.field.Select} this
        /// </summary>
        public Select updateOptions(JsArray newOptions){return null;}
        public void updateStore(object newStore){}
        public void updateValue(object newValue, object oldValue){}
        /// <summary>
        /// Simple Select field wrapper. Example usage:
        /// <pre><code>
        /// new Ext.field.Select({
        /// options: [
        /// {text: 'First Option',  value: 'first'},
        /// {text: 'Second Option', value: 'second'},
        /// {text: 'Third Option',  value: 'third'}
        /// ]
        /// });
        /// </code></pre>
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Simple Select field wrapper. Example usage:
        /// <pre><code>
        /// new Ext.field.Select({
        /// options: [
        /// {text: 'First Option',  value: 'first'},
        /// {text: 'Second Option', value: 'second'},
        /// {text: 'Third Option',  value: 'third'}
        /// ]
        /// });
        /// </code></pre>
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public object record{get;set;}
    }
    #endregion
    #region SelectConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SelectConfig
    {
        public SelectConfig(){}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public bool clearIcon{get;set;}
        /// <summary>
        /// The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
        /// Select control. This resolved value is the visibly rendered value of the available selection options.
        /// (defaults to 'text')
        /// @accessor
        /// </summary>
        public object displayField{get;set;}
        /// <summary>
        /// Specify a hiddenName if you're using the {@link Ext.form.Panel#standardSubmit standardSubmit} option.
        /// This name will be used to post the underlying value of the select to the server.
        /// @accessor
        /// </summary>
        public JsString hiddenName{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public object input{get;set;}
        /// <summary>
        /// (Optional) An array of select options.
        /// <pre><code>
        /// [
        /// {text: 'First Option',  value: 'first'},
        /// {text: 'Second Option', value: 'second'},
        /// {text: 'Third Option',  value: 'third'}
        /// ]
        /// </code></pre>
        /// Note: option object member names should correspond with defined {@link #valueField valueField} and {@link #displayField displayField} values.
        /// This config will be ignore if a {@link #store store} instance is provided
        /// @accessor
        /// </summary>
        public JsArray options{get;set;}
        /// <summary>
        /// (Optional) store instance used to provide selection options data.
        /// @accessor
        /// </summary>
        public Store store{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public JsNumber tabIndex{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public bool useClearIcon{get;set;}
        /// <summary>
        /// The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
        /// Select control. (defaults to 'value')
        /// @accessor
        /// </summary>
        public object valueField{get;set;}
    }
    #endregion
    #region Slider
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Slider
    {
        public Slider(){}
        public Slider(SliderConfig config){}
        public void applyIncrement(object increment){}
        public void applyThumbs(object thumbs){}
        public void applyValue(object value){}
        /// <summary>
        /// @private
        /// Takes a desired value of a thumb and returns the nearest snap value. e.g if minValue = 0, maxValue = 100, increment = 10 and we
        /// pass a value of 67 here, the returned value will be 70. The returned number is constrained within {@link minValue} and {@link maxValue},
        /// so in the above example 68 would be returned if {@link maxValue} was set to 68.
        /// @param {Number} value The value to snap
        /// @return {Number} The snapped value
        /// </summary>
        public JsNumber constrain(JsNumber value){return null;}
        public Slider(object config){}
        /// <summary>
        /// Disables the slider
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enables the slider
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Finds the closest thumb for a specified value
        /// @return {Ext.field.slider.Thumb} The thumb
        /// </summary>
        public Thumb getClosestThumb(object value){return null;}
        /// <summary>
        /// Returns the correct offset for a specified value, based on the {@link #minWidth}, {@link #maxWidth} and
        /// {@link #increment} configurations
        /// @private
        /// </summary>
        public void getOffsetForValue(object value){}
        /// <summary>
        /// Returns an instance of a thumb for a specifed index
        /// @param {Number} index The index of the thumb (defaults to 0)
        /// @return {Ext.field.slider.Thumb} The thumb instance
        /// </summary>
        public Thumb getThumb(JsNumber index){return null;}
        public void getValue(){}
        /// <summary>
        /// Returns the correct value for a specified offset, based on the {@link #minWidth}, {@link #maxWidth} and
        /// {@link #increment} configurations. Rerverse of {@link #getOffsetForValue}
        /// @private
        /// </summary>
        public void getValueForOffset(object offset, object isTap){}
        /// <summary>
        /// Convience method. Calls {@link #getValue}
        /// </summary>
        public void getValues(){}
        /// <summary>
        /// Returns the index of a specified thumb
        /// @param {Ext.field.slider.Thumb} thumb
        /// @return {Number} Index of the thumb
        /// </summary>
        public JsNumber indexOf(Thumb thumb){return null;}
        public void initialize(){}
        /// <summary>
        /// Called when the value of any child {@link #thumbs} changes.
        /// @private
        /// </summary>
        public void onChange(object thumb, object value){}
        public void onPainted(){}
        public void onSizeChange(){}
        public void onTap(object e){}
        public void refreshThumbs(){}
        public void reset(){}
        /// <summary>
        /// @private
        /// Loops through each of the sliders {@link #thumbs} and calls disable/enable on each of them depending
        /// on the param specified.
        /// @param {Boolean} disable True to disable, false to enable
        /// </summary>
        public void setThumbsDisabled(bool disable){}
        public void setValue(object value){}
        /// <summary>
        /// Convience method. Calls {@link #setValue}
        /// </summary>
        public void setValues(){}
        public void updateIncrement(object newIncrement){}
        public void updateMaxValue(object newMaxValue){}
        public void updateMinValue(object newMinValue){}
        public void updateThumbs(object newThumbs){}
        /// <summary>
        /// Updates the slides {@link #thumbs} with their new value(s)
        /// </summary>
        public void updateValue(object newValue){}
        /// <summary>
        /// The slider is a way to allow the user to select a value from a given numerical range. You might use it for choosing
        /// a percentage, combine two of them to get min and max values, or use three of them to specify the hex values for a
        /// color. Each slider contains a single 'thumb' that can be dragged along the slider's length to change the value.
        /// Sliders are equally useful inside {@link Ext.form.Panel forms} and standalone. Here's how to quickly create a
        /// slider in form, in this case enabling a user to choose a percentage:
        /// *
        /// Ext.create('Ext.form.Panel', {
        /// items: [
        /// {
        /// xtype: 'sliderfield',
        /// label: 'Percentage',
        /// value: 50,
        /// {@link #minValue}: 0,
        /// {@link #maxValue}: 100
        /// }
        /// ]
        /// });
        /// *
        /// In this case we set a starting value of 50%, and defined the min and max values to be 0 and 100 respectively, giving
        /// us a percentage slider. Because this is such a common use case, the defaults for {@link #minValue} and
        /// {@link #maxValue} are already set to 0 and 100 so in the example above they could be removed.
        /// *
        /// It's often useful to render sliders outside the context of a form panel too. In this example we create a slider that
        /// allows a user to choose the waist measurement of a pair of jeans. Let's say the online store we're making this for
        /// sells jeans with waist sizes from 24 inches to 60 inches in 2 inch increments - here's how we might achieve that:
        /// *
        /// var slider = Ext.create('Ext.field.Slider', {
        /// label: 'Waist Measurement',
        /// minValue: 24,
        /// maxValue: 60,
        /// increment: 2,
        /// value: 32
        /// });
        /// *
        /// Now that we've got our slider, we can ask it what value it currently has and listen to events that it fires. For
        /// example, if we wanted our app to show different images for different sizes, we can listen to the {@link #change}
        /// event to be informed whenever the slider is moved:
        /// *
        /// slider.on('change', function(newValue, oldValue) {
        /// if (newValue > 40) {
        /// imgComponent.setSrc('large.png')
        /// } else {
        /// imgComponent.setSrc('small.png');
        /// }
        /// }, this);
        /// *
        /// Here we listened to the {@link #change} event on the slider and updated the background image of an
        /// {@link Ext.Img image component} based on what size the user selected. Of course, you can use any logic inside your
        /// event listener.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The slider is a way to allow the user to select a value from a given numerical range. You might use it for choosing
        /// a percentage, combine two of them to get min and max values, or use three of them to specify the hex values for a
        /// color. Each slider contains a single 'thumb' that can be dragged along the slider's length to change the value.
        /// Sliders are equally useful inside {@link Ext.form.Panel forms} and standalone. Here's how to quickly create a
        /// slider in form, in this case enabling a user to choose a percentage:
        /// *
        /// Ext.create('Ext.form.Panel', {
        /// items: [
        /// {
        /// xtype: 'sliderfield',
        /// label: 'Percentage',
        /// value: 50,
        /// {@link #minValue}: 0,
        /// {@link #maxValue}: 100
        /// }
        /// ]
        /// });
        /// *
        /// In this case we set a starting value of 50%, and defined the min and max values to be 0 and 100 respectively, giving
        /// us a percentage slider. Because this is such a common use case, the defaults for {@link #minValue} and
        /// {@link #maxValue} are already set to 0 and 100 so in the example above they could be removed.
        /// *
        /// It's often useful to render sliders outside the context of a form panel too. In this example we create a slider that
        /// allows a user to choose the waist measurement of a pair of jeans. Let's say the online store we're making this for
        /// sells jeans with waist sizes from 24 inches to 60 inches in 2 inch increments - here's how we might achieve that:
        /// *
        /// var slider = Ext.create('Ext.field.Slider', {
        /// label: 'Waist Measurement',
        /// minValue: 24,
        /// maxValue: 60,
        /// increment: 2,
        /// value: 32
        /// });
        /// *
        /// Now that we've got our slider, we can ask it what value it currently has and listen to events that it fires. For
        /// example, if we wanted our app to show different images for different sizes, we can listen to the {@link #change}
        /// event to be informed whenever the slider is moved:
        /// *
        /// slider.on('change', function(newValue, oldValue) {
        /// if (newValue > 40) {
        /// imgComponent.setSrc('large.png')
        /// } else {
        /// imgComponent.setSrc('small.png');
        /// }
        /// }, this);
        /// *
        /// Here we listened to the {@link #change} event on the slider and updated the background image of an
        /// {@link Ext.Img image component} based on what size the user selected. Of course, you can use any logic inside your
        /// event listener.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private
        /// Loops through each of the sliders {@link #thumbs} and calls disable/enable on each of them depending
        /// on the param specified.
        /// @param {Boolean} disable True to disable, false to enable
        /// </summary>
        [JsProperty]
        public bool ThumbsDisabled{private get;[JsMethod(Name="setThumbsDisabled")]set;}
        [JsProperty]
        public object Value{private get;[JsMethod(Name="setValue")]set;}
    }
    #endregion
    #region SliderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SliderConfig
    {
        public SliderConfig(){}
        /// <summary>
        /// The increment by which to snap each thumb when its value changes. Defaults to 1. Any thumb movement
        /// will be snapped to the nearest value that is a multiple of the increment (e.g. if increment is 10 and the user tries to move
        /// the thumb to 67, it will be snapped to 70 instead)
        /// @accessor
        /// </summary>
        public JsNumber increment{get;set;}
        /// <summary>
        /// The highest value any thumb on this slider can be set to.
        /// @accessor
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// The lowest value any thumb on this slider can be set to.
        /// @accessor
        /// </summary>
        public JsNumber minValue{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public JsNumber tabIndex{get;set;}
        /// <summary>
        /// An array of {@link Ext.field.slider.Thumb}'s to be used in this slider.
        /// @accessor
        /// </summary>
        public JsArray thumbs{get;set;}
        /// <summary>
        /// The value(s) of the sliders {@link #thumbs}. If you pass
        /// a number or a string, it will assume you have just 1 thumb.
        /// @accessor
        /// </summary>
        public object value{get;set;}
    }
    #endregion
    #region Spinner
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Spinner
    {
        public Spinner(SpinnerConfig config){}
        public void applyValue(object value){}
        public Spinner(){}
        public void createRepeater(object el, object fn){}
        public void destroy(){}
        public void onSpinDown(){}
        public void onSpinUp(){}
        public void onTouchEnd(object repeater){}
        public void onTouchStart(object repeater){}
        public void reset(){}
        public void spin(object down){}
        /// <summary>
        /// Updates the {@link #input} configuration
        /// </summary>
        public void updateInput(object newInput){}
        /// <summary>
        /// Wraps an HTML5 number field. Example usage:
        /// *
        /// new Ext.field.Spinner({
        /// minValue: 0,
        /// maxValue: 100,
        /// incrementValue: 2,
        /// cycle: true
        /// });
        /// *
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Wraps an HTML5 number field. Example usage:
        /// *
        /// new Ext.field.Spinner({
        /// minValue: 0,
        /// maxValue: 100,
        /// incrementValue: 2,
        /// cycle: true
        /// });
        /// *
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region SpinnerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SpinnerConfig
    {
        public SpinnerConfig(){}
        /// <summary>
        /// The maximum allowed value.
        /// @accessor
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// The minimum allowed value.
        /// @accessor
        /// </summary>
        public JsNumber minValue{get;set;}
        /// <summary>
        /// True if autorepeating should start slowly and accelerate.
        /// @accessor
        /// </summary>
        public bool accelerateOnTapHold{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public bool clearIcon{get;set;}
        /// <summary>
        /// When set to true, it will loop the values of a minimum or maximum is reached.
        /// If the maximum value is reached, the value will be set to the minimum.
        /// @accessor
        /// </summary>
        public bool cycle{get;set;}
        /// <summary>
        /// Value that is added or subtracted from the current value when a spinner is used.
        /// @accessor
        /// </summary>
        public JsNumber incrementValue{get;set;}
        /// <summary>
        /// @hide
        /// @accessor
        /// </summary>
        public JsNumber tabIndex{get;set;}
    }
    #endregion
    #region Text
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Text
    {
        public Text(TextConfig config){}
        public Text(){}
        /// <summary>
        /// Attempts to forcefully blur input focus for the field.
        /// @return {Ext.field.Text} This field
        /// </summary>
        public Text blur(){return null;}
        /// <summary>
        /// Called when a key has been pressed in the {@link #input}
        /// @private
        /// </summary>
        public void doKeyUp(object e){}
        public void doSetDisabled(object disabled){}
        /// <summary>
        /// Attempts to set the field as the active input focus.
        /// @return {Ext.field.Text} This field
        /// </summary>
        public Text focus(){return null;}
        public void hideClearIcon(){}
        public void initialize(){}
        public void onClearIconTap(){}
        public void reset(){}
        public void showClearIcon(){}
        public void updateAutoCapitalize(object newAutoCapitalize){}
        public void updateAutoComplete(object newAutoComplete){}
        public void updateAutoCorrect(object newAutoCorrect){}
        public void updateMaxLength(object newMaxLength){}
        public void updatePlaceHolder(object newPlaceHolder){}
        public void updateValue(object newValue){}
        /// <summary>
        /// The text field is the basis for most of the input fields in Sencha Touch. It provides a baseline of shared
        /// functionality such as input validation, standard events, state management and look and feel. Typically we create
        /// text fields inside a form, like this:
        /// *
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Enter your name'
        /// },
        /// *
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// label: 'First Name',
        /// name: 'firstName'
        /// },
        /// {
        /// xtype: 'textfield',
        /// label: 'Last Name',
        /// name: 'lastName'
        /// }
        /// ]
        /// });
        /// *
        /// This creates two text fields inside a form. Text Fields can also be created outside of a Form, like this:
        /// *
        /// Ext.create('Ext.field.Text', {
        /// label: 'Your Name',
        /// value: 'Ed Spencer'
        /// });
        /// *
        /// ## Configuring
        /// *
        /// Text field offers several configuration options, including {@link #placeHolder}, {@link #maxLength},
        /// {@link #autoComplete}, {@link #autoCapitalize} and {@link #autoCorrect}. For example, here is how we would configure
        /// a text field to have a maximum length of 10 characters, with placeholder text that disappears when the field is
        /// focused:
        /// *
        /// Ext.create('Ext.field.Text', {
        /// label: 'Username',
        /// maxLength: 10,
        /// placeHolder: 'Enter your username'
        /// });
        /// *
        /// The autoComplete, autoCapitalize and autoCorrect configs simply set those attributes on the text field and allow the
        /// native browser to provide those capabilities. For example, to enable auto complete and auto correct, simply
        /// configure your text field like this:
        /// *
        /// Ext.create('Ext.field.Text', {
        /// label: 'Username',
        /// autoComplete: true,
        /// autoCorrect: true
        /// });
        /// *
        /// These configurations will be picked up by the native browser, which will enable the options at the OS level.
        /// *
        /// Text field inherits from {@link Ext.field.Field}, which is the base class for all fields in Sencha Touch and provides
        /// a lot of shared functionality for all fields, including setting values, clearing and basic validation. See the
        /// {@link Ext.field.Field} documentation to see how to leverage its capabilities.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The text field is the basis for most of the input fields in Sencha Touch. It provides a baseline of shared
        /// functionality such as input validation, standard events, state management and look and feel. Typically we create
        /// text fields inside a form, like this:
        /// *
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Enter your name'
        /// },
        /// *
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// label: 'First Name',
        /// name: 'firstName'
        /// },
        /// {
        /// xtype: 'textfield',
        /// label: 'Last Name',
        /// name: 'lastName'
        /// }
        /// ]
        /// });
        /// *
        /// This creates two text fields inside a form. Text Fields can also be created outside of a Form, like this:
        /// *
        /// Ext.create('Ext.field.Text', {
        /// label: 'Your Name',
        /// value: 'Ed Spencer'
        /// });
        /// *
        /// ## Configuring
        /// *
        /// Text field offers several configuration options, including {@link #placeHolder}, {@link #maxLength},
        /// {@link #autoComplete}, {@link #autoCapitalize} and {@link #autoCorrect}. For example, here is how we would configure
        /// a text field to have a maximum length of 10 characters, with placeholder text that disappears when the field is
        /// focused:
        /// *
        /// Ext.create('Ext.field.Text', {
        /// label: 'Username',
        /// maxLength: 10,
        /// placeHolder: 'Enter your username'
        /// });
        /// *
        /// The autoComplete, autoCapitalize and autoCorrect configs simply set those attributes on the text field and allow the
        /// native browser to provide those capabilities. For example, to enable auto complete and auto correct, simply
        /// configure your text field like this:
        /// *
        /// Ext.create('Ext.field.Text', {
        /// label: 'Username',
        /// autoComplete: true,
        /// autoCorrect: true
        /// });
        /// *
        /// These configurations will be picked up by the native browser, which will enable the options at the OS level.
        /// *
        /// Text field inherits from {@link Ext.field.Field}, which is the base class for all fields in Sencha Touch and provides
        /// a lot of shared functionality for all fields, including setting values, clearing and basic validation. See the
        /// {@link Ext.field.Field} documentation to see how to leverage its capabilities.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region TextArea
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TextArea
    {
        public TextArea(TextAreaConfig config){}
        public TextArea(){}
        public void updateMaxRows(object newRows){}
        /// <summary>
        /// Creates an HTML textarea field on the page. This is useful whenever you need the user to enter large amounts of text
        /// (i.e. more than a few words). Typically, text entry on mobile devices is not a pleasant experience for the user so
        /// it's good to limit your use of text areas to only those occasions when freeform text is required or alternative
        /// input methods like select boxes or radio buttons are not possible. Text Areas are usually created inside forms, like
        /// this:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'About you'
        /// },
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// label: 'Name',
        /// name: 'name'
        /// },
        /// {
        /// xtype: 'textareafield',
        /// label: 'Bio',
        /// {@link #maxRows}: 4,
        /// name: 'bio'
        /// }
        /// ]
        /// });
        /// *
        /// In the example above we're creating a form with a {@link Ext.field.Text text field} for the user's name and a text
        /// area for their bio. We used the {@link #maxRows} configuration on the text area to tell it to grow to a maximum of 4
        /// rows of text before it starts using a scroll bar inside the text area to scroll the text.
        /// We can also create a text area outside the context of a form, like this:
        /// This creates two text fields inside a form. Text Fields can also be created outside of a Form, like this:
        /// Ext.create('Ext.field.TextArea', {
        /// label: 'About You',
        /// {@link #placeHolder}: 'Tell us about yourself...'
        /// });
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Creates an HTML textarea field on the page. This is useful whenever you need the user to enter large amounts of text
        /// (i.e. more than a few words). Typically, text entry on mobile devices is not a pleasant experience for the user so
        /// it's good to limit your use of text areas to only those occasions when freeform text is required or alternative
        /// input methods like select boxes or radio buttons are not possible. Text Areas are usually created inside forms, like
        /// this:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'About you'
        /// },
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// label: 'Name',
        /// name: 'name'
        /// },
        /// {
        /// xtype: 'textareafield',
        /// label: 'Bio',
        /// {@link #maxRows}: 4,
        /// name: 'bio'
        /// }
        /// ]
        /// });
        /// *
        /// In the example above we're creating a form with a {@link Ext.field.Text text field} for the user's name and a text
        /// area for their bio. We used the {@link #maxRows} configuration on the text area to tell it to grow to a maximum of 4
        /// rows of text before it starts using a scroll bar inside the text area to scroll the text.
        /// We can also create a text area outside the context of a form, like this:
        /// This creates two text fields inside a form. Text Fields can also be created outside of a Form, like this:
        /// Ext.create('Ext.field.TextArea', {
        /// label: 'About You',
        /// {@link #placeHolder}: 'Tell us about yourself...'
        /// });
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region TextAreaConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TextAreaConfig
    {
        public TextAreaConfig(){}
        /// <summary>
        /// The maximum number of lines made visible by the input.
        /// @accessor
        /// </summary>
        public JsNumber maxRows{get;set;}
    }
    #endregion
    #region TextAreaInput
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TextAreaInput
    {
        public TextAreaInput(TextAreaInputConfig config){}
        public TextAreaInput(){}
        public void getTemplate(){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region TextAreaInputConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TextAreaInputConfig
    {
        public TextAreaInputConfig(){}
        /// <summary>
        /// The el tag
        /// @accessor
        /// </summary>
        public JsString tag{get;set;}
    }
    #endregion
    #region TextConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TextConfig
    {
        public TextConfig(){}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool autoComplete{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool autoCorrect{get;set;}
        /// <summary>
        /// The maximum number of permitted input characters.
        /// @accessor
        /// </summary>
        public JsNumber maxLength{get;set;}
        /// <summary>
        /// A string value displayed in the input (if supported) when the control is empty.
        /// @deprecated 2.0
        /// @accessor
        /// </summary>
        public JsString placeHolder{get;set;}
    }
    #endregion
    #region Toggle
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Toggle
    {
        public Toggle(ToggleConfig config){}
        public Toggle(){}
        /// <summary>
        /// @private
        /// </summary>
        public void onChange(object thumb, object newValue){}
        public void onTap(object e){}
        /// <summary>
        /// Specialized Slider with a single thumb and only two values. By default the toggle component can
        /// be switched between the values of 0 and 1.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Specialized Slider with a single thumb and only two values. By default the toggle component can
        /// be switched between the values of 0 and 1.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region ToggleConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ToggleConfig
    {
        public ToggleConfig(){}
        /// <summary>
        /// CSS class added to the field when toggled to its maxValue
        /// @accessor
        /// </summary>
        public JsString maxValueCls{get;set;}
        /// <summary>
        /// CSS class added to the field when toggled to its minValue
        /// @accessor
        /// </summary>
        public JsString minValueCls{get;set;}
    }
    #endregion
    #region Url
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Url
    {
        public Url(){}
        /// <summary>
        /// The Url field creates an HTML5 url input and is usually created inside a form. Because it creates an HTML url input
        /// field, most browsers will show a specialized virtual keyboard for web address input. Aside from that, the url field
        /// is just a normal text field. Here's an example of how to use it in a form:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Add Bookmark'
        /// },
        /// items: [
        /// {
        /// xtype: 'urlfield',
        /// label: 'Url',
        /// name: 'url'
        /// }
        /// ]
        /// });
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Url', {
        /// label: 'Web address',
        /// value: 'http://sencha.com'
        /// });
        /// Because url field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text fields
        /// provide, including getting and setting the value at runtime, validations and various events that are fired as the
        /// user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional functionality
        /// available.
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The Url field creates an HTML5 url input and is usually created inside a form. Because it creates an HTML url input
        /// field, most browsers will show a specialized virtual keyboard for web address input. Aside from that, the url field
        /// is just a normal text field. Here's an example of how to use it in a form:
        /// Ext.create('Ext.form.Panel', {
        /// tbar: {
        /// text: 'Add Bookmark'
        /// },
        /// items: [
        /// {
        /// xtype: 'urlfield',
        /// label: 'Url',
        /// name: 'url'
        /// }
        /// ]
        /// });
        /// Or on its own, outside of a form:
        /// Ext.create('Ext.field.Url', {
        /// label: 'Web address',
        /// value: 'http://sencha.com'
        /// });
        /// Because url field inherits from {@link Ext.field.Text textfield} it gains all of the functionality that text fields
        /// provide, including getting and setting the value at runtime, validations and various events that are fired as the
        /// user interacts with the component. Check out the {@link Ext.field.Text} docs to see the additional functionality
        /// available.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.field.slider
namespace Ext.field.slider
{
    #region Thumb
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Thumb
    {
        public Thumb(ThumbConfig config){}
        public Thumb(){}
        public void initialize(){}
        public void onBeforeDragStart(object draggable, object e){}
        public void onDrag(object draggable, object e, object offset){}
        public void onDragEnd(){}
        public void onDragStart(object draggable, object e, object offset){}
        public void onPainted(){}
        public void refreshValue(){}
        /// <summary>
        /// Updates the offset of this thumb
        /// </summary>
        public void updateValue(object newValue){}
        /// <summary>
        /// @ignore
        /// Utility class used by Ext.field.Slider - should never need to be used directly.
        /// </summary>
        public JsString extend{get;set;}
        public object slider{get;set;}
        /// <summary>
        /// @ignore
        /// Utility class used by Ext.field.Slider - should never need to be used directly.
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region ThumbConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ThumbConfig
    {
        public ThumbConfig(){}
        /// <summary>
        /// The value to initialize this thumb with (defaults to 0)
        /// @accessor
        /// </summary>
        public JsNumber value{get;set;}
    }
    #endregion
}
#endregion
#region Ext.form
namespace Ext.form
{
    #region ClearIcon
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ClearIcon
    {
        public ClearIcon(){}
        public void initialize(){}
        /// <summary>
        /// Called when this clear icon has been tapped on
        /// </summary>
        public void onTap(object e){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region FieldSet
    [JsType(JsMode.Prototype, Export=false)]
    public partial class FieldSet
    {
        public FieldSet(FieldSetConfig config){}
        public FieldSet(){}
        public void applyInstructions(object instructions){}
        public void applyTitle(object title){}
        public void updateInstructions(object newInstructions, object oldInstructions){}
        public void updateTitle(object newTitle, object oldTitle){}
        /// <summary>
        /// A FieldSet is a great way to visually separate elements of a form. It's normally used when you have a form with
        /// fields that can be divided into groups - for example a customer's billing details in one fieldset and their shipping
        /// address in another. A fieldset can be used inside a form or on its own elsewhere in your app. Fieldsets can
        /// optionally have a title at the top and instructions at the bottom. Here's how we might create a FieldSet inside a
        /// form:
        /// Ext.create('Ext.form.Panel', {
        /// items: [
        /// {
        /// xtype: 'fieldset',
        /// title: 'About You',
        /// instructions: 'Tell us all about yourself',
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// name : 'firstName',
        /// label: 'First Name'
        /// },
        /// {
        /// xtype: 'textfield',
        /// name : 'lastName',
        /// label: 'Last Name'
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// Above we created a {@link Ext.form.Panel form} with a fieldset that contains two text fields. In this case, all
        /// of the form fields are in the same fieldset, but for longer forms we may choose to use multiple fieldsets. We also
        /// configured a {@link #title} and {@link #instructions} to give the user more information on filling out the form if
        /// required.
        /// </summary>
        public JsString alias{get;set;}
        /// <summary>
        /// A FieldSet is a great way to visually separate elements of a form. It's normally used when you have a form with
        /// fields that can be divided into groups - for example a customer's billing details in one fieldset and their shipping
        /// address in another. A fieldset can be used inside a form or on its own elsewhere in your app. Fieldsets can
        /// optionally have a title at the top and instructions at the bottom. Here's how we might create a FieldSet inside a
        /// form:
        /// Ext.create('Ext.form.Panel', {
        /// items: [
        /// {
        /// xtype: 'fieldset',
        /// title: 'About You',
        /// instructions: 'Tell us all about yourself',
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// name : 'firstName',
        /// label: 'First Name'
        /// },
        /// {
        /// xtype: 'textfield',
        /// name : 'lastName',
        /// label: 'Last Name'
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// Above we created a {@link Ext.form.Panel form} with a fieldset that contains two text fields. In this case, all
        /// of the form fields are in the same fieldset, but for longer forms we may choose to use multiple fieldsets. We also
        /// configured a {@link #title} and {@link #instructions} to give the user more information on filling out the form if
        /// required.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region FieldSetConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldSetConfig
    {
        public FieldSetConfig(){}
        /// <summary>
        /// Optional fieldset instructions, rendered just below the grouped fields
        /// @accessor
        /// </summary>
        public JsString instructions{get;set;}
        /// <summary>
        /// Optional fieldset title, rendered just above the grouped fields
        /// @accessor
        /// </summary>
        public JsString title{get;set;}
    }
    #endregion
    #region Label
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Label
    {
        public Label(LabelConfig config){}
        public Label(){}
        /// <summary>
        /// Updates the {@link #align} configuration by changing the {@link #docked} configuration on the component
        /// @private
        /// </summary>
        public void doSetAlign(object newAlign){}
        /// <summary>
        /// Updates the {@link #text} configuration
        /// </summary>
        public void updateText(object newText){}
        /// <summary>
        /// The Label class is a simple component used to render the labels for each field in your Sencha Touch application. It
        /// is usually created for you when you create a field, like this:
        /// Ext.create('Ext.field.Text', {
        /// label: 'Your Name',
        /// value: 'Ed Spencer'
        /// });
        /// You can also specify a few more configurations for a label by passing a label object instead of a string:
        /// Ext.create('Ext.field.Text', {
        /// label: {
        /// {@link #text}: 'Your Name',
        /// {@link #align}: 'right',
        /// {@link #width}: '50%'
        /// },
        /// value: 'Ed Spencer'
        /// });
        /// It's rare to want to create a label without a form field but you can do it like this:
        /// Ext.create('Ext.form.Label', {
        /// text: 'My Label',
        /// width: 100
        /// });
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// The Label class is a simple component used to render the labels for each field in your Sencha Touch application. It
        /// is usually created for you when you create a field, like this:
        /// Ext.create('Ext.field.Text', {
        /// label: 'Your Name',
        /// value: 'Ed Spencer'
        /// });
        /// You can also specify a few more configurations for a label by passing a label object instead of a string:
        /// Ext.create('Ext.field.Text', {
        /// label: {
        /// {@link #text}: 'Your Name',
        /// {@link #align}: 'right',
        /// {@link #width}: '50%'
        /// },
        /// value: 'Ed Spencer'
        /// });
        /// It's rare to want to create a label without a form field but you can do it like this:
        /// Ext.create('Ext.form.Label', {
        /// text: 'My Label',
        /// width: 100
        /// });
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region LabelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class LabelConfig
    {
        public LabelConfig(){}
        /// <summary>
        /// The location to render the label of the field. Acceptable values are 'top', 'left' and 'right'.
        /// @accessor
        /// @evented
        /// </summary>
        public JsString align{get;set;}
        /// <summary>
        /// The text to display in the label
        /// @accessor
        /// </summary>
        public JsString text{get;set;}
        /// <summary>
        /// The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'.
        /// @accessor
        /// </summary>
        public object width{get;set;}
    }
    #endregion
    #region Panel
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Panel
    {
        public Panel(Ext.form.PanelConfig config){}
        public Panel(){}
        /// <summary>
        /// Initializes the renderTpl.
        /// @return {Ext.XTemplate} The renderTpl XTemplate instance.
        /// @private
        /// </summary>
        public XTemplate applyWaitTpl(object waitTpl){return null;}
        /// <summary>
        /// A convenient method to disable all fields in this forms
        /// @return {Ext.form.Panel} This form
        /// </summary>
        public Ext.form.Panel disable(){return null;}
        /// <summary>
        /// A convenient method to enable all fields in this forms
        /// @return {Ext.form.Panel} This form
        /// </summary>
        public Ext.form.Panel enable(){return null;}
        /// <summary>
        /// @private
        /// Returns all {@link Ext.Field field} instances inside this form
        /// @param byName return only fields that match the given name, otherwise return all fields.
        /// @return {Object/Array} All field instances, mapped by field name; or an array if byName is passed
        /// </summary>
        public object getFields(object byName){return null;}
        public void getFieldsAsArray(){}
        /// <summary>
        /// Returns an object containing the value of each field in the form, keyed to the field's name.
        /// For groups of checkbox fields with the same name, it will be arrays of values. For examples:
        /// <pre><code>
        /// {
        /// name: "Jacky Nguyen", // From a TextField
        /// favorites: [
        /// 'pizza',
        /// 'noodle',
        /// 'cake'
        /// ]
        /// }
        /// </code></pre>
        /// @param {Boolean} enabled <tt>true</tt> to return only enabled fields
        /// @return {Object} Object mapping field name to its value
        /// </summary>
        public object getValues(bool enabled){return null;}
        /// <summary>
        /// Hides a previously shown wait mask (See {@link #showMask})
        /// @return {Ext.form.Panel} this
        /// </summary>
        public Ext.form.Panel hideMask(){return null;}
        public void initialize(){}
        public void onFieldAction(object field){}
        public void onSubmit(object e){}
        /// <summary>
        /// Resets all fields in the form back to their original values
        /// @return {Ext.form.Panel} This form
        /// </summary>
        public Ext.form.Panel reset(){return null;}
        /// <summary>
        /// Loads matching fields from a model instance into this form
        /// @param {Ext.data.Model} instance The model instance
        /// @return {Ext.form.Panel} This form
        /// </summary>
        public Ext.form.Panel setRecord(Model record){return null;}
        /// <summary>
        /// Sets the values of form fields in bulk. Example usage:
        /// *
        /// myForm.setValues({
        /// name: 'Ed',
        /// crazy: true,
        /// username: 'edspencer'
        /// });
        /// *
        /// If there groups of checkbox fields with the same name, pass their values in an array. For example:
        /// *
        /// myForm.setValues({
        /// name: 'Jacky',
        /// crazy: false,
        /// hobbies: [
        /// 'reading',
        /// 'cooking',
        /// 'gaming'
        /// ]
        /// });
        /// *
        /// @param {Object} values field name => value mapping object
        /// @return {Ext.form.Panel} This form
        /// </summary>
        public Ext.form.Panel setValues(object values){return null;}
        /// <summary>
        /// Shows a generic/custom mask over a designated Element.
        /// @param {String/Object} cfg Either a string message or a configuration object supporting
        /// the following options:
        /// *
        /// {
        /// message : 'Please Wait',
        /// transparent : false,
        /// target  : Ext.getBody(),  //optional target Element
        /// cls : 'form-mask',
        /// customImageUrl : 'trident.jpg'
        /// }
        /// *
        /// This object is passed to the {@link #waitTpl} for use with a custom masking implementation.
        /// @param {String/HTMLElement/Ext.Element} target The target Element instance or Element id to use
        /// as the masking agent for the operation (defaults the container Element of the component)
        /// @return {Ext.form.Panel} This form
        /// </summary>
        public Ext.form.Panel showMask(object cfg, object target){return null;}
        /// <summary>
        /// Performs a Ajax-based submission of form values (if standardSubmit is false) or otherwise
        /// executes a standard HTML Form submit action.
        /// @param {Object} options Unless otherwise noted, options may include the following:
        /// <ul>
        /// <li><b>url</b> : String
        /// <div class="sub-desc">
        /// The url for the action (defaults to the form's {@link #url url}.)
        /// </div></li>
        /// *
        /// <li><b>method</b> : String
        /// <div class="sub-desc">
        /// The form method to use (defaults to the form's method, or POST if not defined)
        /// </div></li>
        /// *
        /// <li><b>params</b> : String/Object
        /// <div class="sub-desc">
        /// The params to pass
        /// (defaults to the FormPanel's baseParams, or none if not defined)
        /// Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.
        /// </div></li>
        /// *
        /// <li><b>headers</b> : Object
        /// <div class="sub-desc">
        /// Request headers to set for the action
        /// (defaults to the form's default headers)
        /// </div></li>
        /// *
        /// <li><b>autoAbort</b> : Boolean
        /// <div class="sub-desc">
        /// <tt>true</tt> to abort any pending Ajax request prior to submission (defaults to false)
        /// Note: Has no effect when standardSubmit is enabled.
        /// </div></li>
        /// *
        /// <li><b>submitDisabled</b> : Boolean
        /// <div class="sub-desc">
        /// <tt>true</tt> to submit all fields regardless of disabled state (defaults to false)
        /// Note: Has no effect when standardSubmit is enabled.
        /// </div></li>
        /// *
        /// <li><b>waitMsg</b> : String/Config
        /// <div class="sub-desc">
        /// If specified, the value is applied to the {@link #waitTpl} if defined, and rendered to the
        /// {@link #maskTarget} prior to a Form submit action.
        /// </div></li>
        /// *
        /// <li><b>success</b>: function
        /// <div class="sub-desc">
        /// The callback that will be invoked after a successful response. A response is successful if
        /// a response is received from the server and is a JSON object where the success property is set
        /// to true, {"success": true}
        /// *
        /// The function is passed the following parameters:
        /// <ul>
        /// <li>form : Ext.form.Panel The form that requested the action</li>
        /// <li>result : The result object returned by the server as a result of the submit request.</li>
        /// </ul>
        /// </div></li>
        /// *
        /// <li><b>failure</b>: function
        /// <div class="sub-desc">
        /// The callback that will be invoked after a
        /// failed transaction attempt. The function is passed the following parameters:
        /// <ul>
        /// <li>form : The Ext.form.Panel that requested the submit.</li>
        /// <li>result : The failed response or result object returned by the server which performed the operation.</li>
        /// </ul>
        /// </div></li>
        /// *
        /// <li><b>scope</b> : Object
        /// <div class="sub-desc">
        /// The scope in which to call the callback functions (The this reference for the callback functions).
        /// </div></li>
        /// </ul>
        /// *
        /// @return {Ext.data.Connection} The request object
        /// </summary>
        public Connection submit(object options){return null;}
        /// <summary>
        /// Updates a model instance with the current values of this form
        /// @param {Ext.data.Model} instance The model instance
        /// @param {Boolean} enabled <tt>true</tt> to update the Model with values from enabled fields only
        /// @return {Ext.form.Panel} This form
        /// </summary>
        public Ext.form.Panel updateRecord(Model instance, bool enabled){return null;}
        /// <summary>
        /// The Form panel presents a set of form fields and provides convenient ways to load and save data. Usually a form
        /// panel just contains the set of fields you want to display, ordered inside the items configuration like this:
        /// *
        /// var form = Ext.create('Ext.form.Panel', {
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// name: 'name',
        /// label: 'Name'
        /// },
        /// {
        /// xtype: 'emailfield',
        /// name: 'email',
        /// label: 'Email'
        /// },
        /// {
        /// xtype: 'passwordfield',
        /// name: 'password',
        /// label: 'Password'
        /// }
        /// ]
        /// });
        /// *
        /// Here we just created a simple form panel which could be used as a registration form to sign up to your service. We
        /// added a plain {@link Ext.field.Text text field} for the user's Name, an {@link Ext.field.Email email field} and
        /// finally a {@link Ext.field.Password password field}. In each case we provided a {@link Ext.field.Field#name name}
        /// config on the field so that we can identify it later on when we load and save data on the form.
        /// *
        /// <h2>Loading data</h2>
        /// *
        /// Using the form we created above, we can load data into it in a few different ways, the easiest is to use
        /// {@link #setValues}:
        /// *
        /// form.setValues({
        /// name: 'Ed',
        /// email: 'ed@sencha.com',
        /// password: 'secret'
        /// });
        /// *
        /// It's also easy to load {@link Ext.data.Model Model} instances into a form - let's say we have a User model and want
        /// to load a particular instance into our form:
        /// *
        /// Ext.define('MyApp.model.User', {
        /// fields: ['name', 'email', 'password']
        /// });
        /// *
        /// var ed = Ext.create('MyApp.model.User', {
        /// name: 'Ed',
        /// email: 'ed@sencha.com',
        /// password: 'secret'
        /// });
        /// *
        /// form.setRecord(ed);
        /// *
        /// <h2>Retrieving form data</h2>
        /// *
        /// Getting data out of the form panel is simple and is usually achieve vai the {@link #getValues} method:
        /// *
        /// var values = form.getValues();
        /// *
        /// //values now looks like this:
        /// {
        /// name: 'Ed',
        /// email: 'ed@sencha.com',
        /// password: 'secret'
        /// }
        /// *
        /// It's also possible to listen to the change events on individual fields to get more timely notification of changes
        /// that the user is making. Here we expand on the example above with the User model, updating the model as soon as
        /// any of the fields are changed:
        /// *
        /// var form = Ext.create('Ext.form.Panel', {
        /// listeners: {
        /// '> field': {
        /// change: function(field, newValue, oldValue) {
        /// ed.set(field.getName(), newValue);
        /// }
        /// }
        /// },
        /// items: //as before
        /// });
        /// *
        /// The above used a new capability of Touch 2.0, which enables you to specify listeners on child components of any
        /// container. In this case, we attached a listener to the {@link Ext.field.Text#change change} event of each form
        /// field that is a direct child of the form panel. Our listener gets the name of the field that fired the change event,
        /// and updates our {@link Ext.data.Model Model} instance with the new value. For example, changing the email field
        /// in the form will update the Model's email field.
        /// *
        /// <h2>Submitting forms</h2>
        /// *
        /// There are a few ways to submit form data. In our example above we have a Model instance that we have updated, giving
        /// us the option to use the Model's {@link Ext.data.Model#save save} method to persist the changes back to our server,
        /// without using a traditional form submission. Alternatively, we can send a normal browser form submit using the
        /// {@link #submit} method:
        /// *
        /// form.submit({
        /// url: 'url/to/submit/to',
        /// method: 'POST',
        /// success: function() {
        /// alert('form submitted successfully!');
        /// }
        /// });
        /// *
        /// In this case we provided the url to submit the form to inside the submit call - alternatively you can just set the
        /// {@link #url} configuration when you create the form. We can specify other parameters (see {@link #submit} for a
        /// full list), including callback functions for success and failure, which are called depending on whether or not the
        /// form submission was successful. These functions are usually used to take some action in your app after your data
        /// has been saved to the server side.
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The Form panel presents a set of form fields and provides convenient ways to load and save data. Usually a form
        /// panel just contains the set of fields you want to display, ordered inside the items configuration like this:
        /// *
        /// var form = Ext.create('Ext.form.Panel', {
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// name: 'name',
        /// label: 'Name'
        /// },
        /// {
        /// xtype: 'emailfield',
        /// name: 'email',
        /// label: 'Email'
        /// },
        /// {
        /// xtype: 'passwordfield',
        /// name: 'password',
        /// label: 'Password'
        /// }
        /// ]
        /// });
        /// *
        /// Here we just created a simple form panel which could be used as a registration form to sign up to your service. We
        /// added a plain {@link Ext.field.Text text field} for the user's Name, an {@link Ext.field.Email email field} and
        /// finally a {@link Ext.field.Password password field}. In each case we provided a {@link Ext.field.Field#name name}
        /// config on the field so that we can identify it later on when we load and save data on the form.
        /// *
        /// <h2>Loading data</h2>
        /// *
        /// Using the form we created above, we can load data into it in a few different ways, the easiest is to use
        /// {@link #setValues}:
        /// *
        /// form.setValues({
        /// name: 'Ed',
        /// email: 'ed@sencha.com',
        /// password: 'secret'
        /// });
        /// *
        /// It's also easy to load {@link Ext.data.Model Model} instances into a form - let's say we have a User model and want
        /// to load a particular instance into our form:
        /// *
        /// Ext.define('MyApp.model.User', {
        /// fields: ['name', 'email', 'password']
        /// });
        /// *
        /// var ed = Ext.create('MyApp.model.User', {
        /// name: 'Ed',
        /// email: 'ed@sencha.com',
        /// password: 'secret'
        /// });
        /// *
        /// form.setRecord(ed);
        /// *
        /// <h2>Retrieving form data</h2>
        /// *
        /// Getting data out of the form panel is simple and is usually achieve vai the {@link #getValues} method:
        /// *
        /// var values = form.getValues();
        /// *
        /// //values now looks like this:
        /// {
        /// name: 'Ed',
        /// email: 'ed@sencha.com',
        /// password: 'secret'
        /// }
        /// *
        /// It's also possible to listen to the change events on individual fields to get more timely notification of changes
        /// that the user is making. Here we expand on the example above with the User model, updating the model as soon as
        /// any of the fields are changed:
        /// *
        /// var form = Ext.create('Ext.form.Panel', {
        /// listeners: {
        /// '> field': {
        /// change: function(field, newValue, oldValue) {
        /// ed.set(field.getName(), newValue);
        /// }
        /// }
        /// },
        /// items: //as before
        /// });
        /// *
        /// The above used a new capability of Touch 2.0, which enables you to specify listeners on child components of any
        /// container. In this case, we attached a listener to the {@link Ext.field.Text#change change} event of each form
        /// field that is a direct child of the form panel. Our listener gets the name of the field that fired the change event,
        /// and updates our {@link Ext.data.Model Model} instance with the new value. For example, changing the email field
        /// in the form will update the Model's email field.
        /// *
        /// <h2>Submitting forms</h2>
        /// *
        /// There are a few ways to submit form data. In our example above we have a Model instance that we have updated, giving
        /// us the option to use the Model's {@link Ext.data.Model#save save} method to persist the changes back to our server,
        /// without using a traditional form submission. Alternatively, we can send a normal browser form submit using the
        /// {@link #submit} method:
        /// *
        /// form.submit({
        /// url: 'url/to/submit/to',
        /// method: 'POST',
        /// success: function() {
        /// alert('form submitted successfully!');
        /// }
        /// });
        /// *
        /// In this case we provided the url to submit the form to inside the submit call - alternatively you can just set the
        /// {@link #url} configuration when you create the form. We can specify other parameters (see {@link #submit} for a
        /// full list), including callback functions for success and failure, which are called depending on whether or not the
        /// form submission was successful. These functions are usually used to take some action in your app after your data
        /// has been saved to the server side.
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Loads matching fields from a model instance into this form
        /// @param {Ext.data.Model} instance The model instance
        /// @return {Ext.form.Panel} This form
        /// </summary>
        [JsProperty]
        public Model Record{private get;[JsMethod(Name="setRecord")]set;}
        /// <summary>
        /// Sets the values of form fields in bulk. Example usage:
        /// *
        /// myForm.setValues({
        /// name: 'Ed',
        /// crazy: true,
        /// username: 'edspencer'
        /// });
        /// *
        /// If there groups of checkbox fields with the same name, pass their values in an array. For example:
        /// *
        /// myForm.setValues({
        /// name: 'Jacky',
        /// crazy: false,
        /// hobbies: [
        /// 'reading',
        /// 'cooking',
        /// 'gaming'
        /// ]
        /// });
        /// *
        /// @param {Object} values field name => value mapping object
        /// @return {Ext.form.Panel} This form
        /// </summary>
        [JsProperty]
        public object Values{private get;[JsMethod(Name="setValues")]set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region PanelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PanelConfig
    {
        public PanelConfig(){}
        /// <summary>
        /// Optional hash of params to be sent (when standardSubmit configuration is false) on every submit.
        /// @accessor
        /// </summary>
        public object baseParams{get;set;}
        /// <summary>
        /// The target where the form mask will be shown.
        /// </summary>
        public Ext.dom.Element maskTarget{get;set;}
        /// <summary>
        /// The model instance of this form. Can by dynamically set at any time
        /// @accessor
        /// </summary>
        public Model record{get;set;}
        /// <summary>
        /// Wether or not we want to perform a standard form submit.
        /// @accessor
        /// </summary>
        public bool standardSubmit{get;set;}
        /// <summary>
        /// When this is set to true, the form will automatically submit itself whenever the 'action'
        /// event fires on a field in this form. The action event usually fires whenever you press
        /// go or enter inside a textfield.
        /// @accessor
        /// </summary>
        public object submitOnAction{get;set;}
        /// <summary>
        /// The default Url for submit actions
        /// @accessor
        /// </summary>
        public JsString url{get;set;}
        /// <summary>
        /// The defined waitMsg template.  Used for precise control over the masking agent used
        /// to mask the FormPanel (or other Element) during form Ajax/submission actions. For more options, see
        /// {@link #showMask} method.
        /// @accessor
        /// </summary>
        public object waitTpl{get;set;}
    }
    #endregion
}
#endregion
#region Ext.fx
namespace Ext.fx
{
    #region Animation
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Animation
    {
        public Animation(){}
        public Animation(object config){}
    }
    #endregion
    #region Runner
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Runner
    {
        public Runner(){}
    }
    #endregion
    #region State
    [JsType(JsMode.Prototype, Export=false)]
    public partial class State
    {
        public State(){}
        public void clear(){}
        public State(object data){}
        public void getData(){}
        public void set(object name, object value){}
        public void setConfig(object data){}
        public void setRaw(object data){}
        public void setTransform(object name, object value){}
        public void unset(object name){}
        [JsProperty]
        public object Config{private get;[JsMethod(Name="setConfig")]set;}
        [JsProperty]
        public object Raw{private get;[JsMethod(Name="setRaw")]set;}
    }
    #endregion
}
#endregion
#region Ext.fx.animation
namespace Ext.fx.animation
{
    #region Abstract
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Abstract
    {
        public Abstract(){}
        public void applyAfter(object after, object current){}
        public void applyBefore(object before, object current){}
        public void applyElement(object element){}
        public Abstract(object config){}
        public void getData(){}
        public void getFrom(){}
        public void getState(object name){}
        public void getStates(){}
        public void getTo(){}
        public void setFrom(object from){}
        public void setState(object name, object state){}
        public void setStates(object states){}
        public void setTo(object to){}
        public JsString DIRECTION_DOWN{get;set;}
        public JsString DIRECTION_LEFT{get;set;}
        public JsString DIRECTION_RIGHT{get;set;}
        public JsString DIRECTION_UP{get;set;}
        [JsProperty]
        public object From{private get;[JsMethod(Name="setFrom")]set;}
        public JsString STATE_FROM{get;set;}
        public JsString STATE_TO{get;set;}
        public JsRegExp stateNameRegex{get;set;}
        [JsProperty]
        public object States{private get;[JsMethod(Name="setStates")]set;}
        [JsProperty]
        public object To{private get;[JsMethod(Name="setTo")]set;}
    }
    #endregion
    #region Cube
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Cube
    {
        public Cube(CubeConfig config){}
        public Cube(){}
        public void getData(){}
        public JsString alias{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region CubeConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class CubeConfig
    {
        public CubeConfig(){}
        /// <summary>
        /// The direction of which the slide animates
        /// @accessor
        /// </summary>
        public JsString direction{get;set;}
    }
    #endregion
    #region Fade
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Fade
    {
        public Fade(FadeConfig config){}
        public Fade(){}
        public void updateOut(object newOut){}
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region FadeConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FadeConfig
    {
        public FadeConfig(){}
        /// <summary>
        /// True if you want to make this animation fade out, instead of fade in.
        /// @accessor
        /// </summary>
        public bool @out{get;set;}
    }
    #endregion
    #region FadeOut
    [JsType(JsMode.Prototype, Export=false)]
    public partial class FadeOut
    {
        public FadeOut(){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Flip
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Flip
    {
        public Flip(FlipConfig config){}
        public Flip(){}
        public void getData(){}
        public JsString alias{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region FlipConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FlipConfig
    {
        public FlipConfig(){}
        /// <summary>
        /// The direction of which the slide animates
        /// @accessor
        /// </summary>
        public JsString direction{get;set;}
    }
    #endregion
    #region Pop
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Pop
    {
        public Pop(PopConfig config){}
        public Pop(){}
        public void getData(){}
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region PopConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PopConfig
    {
        public PopConfig(){}
        /// <summary>
        /// True if you want to make this animation pop out, instead of pop in.
        /// @accessor
        /// </summary>
        public bool @out{get;set;}
    }
    #endregion
    #region PopOut
    [JsType(JsMode.Prototype, Export=false)]
    public partial class PopOut
    {
        public PopOut(){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Slide
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Slide
    {
        public Slide(SlideConfig config){}
        public Slide(){}
        public void applyEasing(object easing){}
        public void getContainerBox(){}
        public void getData(){}
        public void getElementBox(){}
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region SlideConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SlideConfig
    {
        public SlideConfig(){}
        /// <summary>
        /// The direction of which the slide animates
        /// @accessor
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// The offset that the animation should go offscreen before entering (or when exiting)
        /// @accessor
        /// </summary>
        public JsNumber offset{get;set;}
        /// <summary>
        /// True if you want to make this animation slide out, instead of slide in.
        /// @accessor
        /// </summary>
        public bool @out{get;set;}
    }
    #endregion
    #region SlideOut
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SlideOut
    {
        public SlideOut(){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Wipe
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Wipe
    {
        public Wipe(WipeConfig config){}
        public Wipe(){}
        public void getData(){}
        public void refresh(){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region WipeConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class WipeConfig
    {
        public WipeConfig(){}
        /// <summary>
        /// The direction of which the slide animates
        /// @accessor
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// True if you want to make this animation wipe out, instead of slide in.
        /// @accessor
        /// </summary>
        public bool @out{get;set;}
    }
    #endregion
    #region WipeOut
    [JsType(JsMode.Prototype, Export=false)]
    public partial class WipeOut
    {
        public WipeOut(){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.fx.layout
namespace Ext.fx.layout
{
    #region Card
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Card
    {
        public Card(){}
        public Card(object config){}
    }
    #endregion
}
#endregion
#region Ext.fx.layout.card
namespace Ext.fx.layout.card
{
    #region Abstract
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Abstract
    {
        public Abstract(){}
        public void destroy(){}
        public void disable(){}
        public void enable(){}
        public void updateLayout(){}
    }
    #endregion
    #region Cube
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Cube
    {
        public Cube(){}
        public JsString alias{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Fade
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Fade
    {
        public Fade(){}
        public JsString alias{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Flip
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Flip
    {
        public Flip(){}
        public void updateDuration(object duration){}
        public JsString alias{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Pop
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Pop
    {
        public Pop(){}
        public void updateDuration(object duration){}
        public JsString alias{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Scroll
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Scroll
    {
        public Scroll(){}
        public Scroll(object config){}
        public void doAnimationFrame(){}
        public void getEasing(){}
        public void onActiveItemChange(object newItem, object oldItem){}
        public void startAnimation(){}
        public void stopAnimation(){}
        public void updateDuration(object duration){}
        public JsString alias{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Slide
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Slide
    {
        public Slide(){}
        public void updateReverse(object reverse){}
        public JsString alias{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Style
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Style
    {
        public Style(){}
        public void applyInAnimation(object animation, object inAnimation){}
        public void applyOutAnimation(object animation, object outAnimation){}
        public Style(object config){}
        public void onActiveItemChange(object newItem, object oldItem){}
        public void updateInAnimation(object animation){}
        public void updateOutAnimation(object animation){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.fx.runner
namespace Ext.fx.runner
{
    #region Css
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Css
    {
        public void applyRules(object selectors){}
        public void applyStyles(object styles){}
        public Css(){}
        public void formatName(object name){}
        public void formatValue(object value, object name){}
        public void getStyleSheet(){}
        public JsString DEFAULT_UNIT_ANGLE{get;set;}
        public JsString DEFAULT_UNIT_DURATION{get;set;}
        public JsString DEFAULT_UNIT_LENGTH{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        public JsRegExp lengthUnitRegex{get;set;}
    }
    #endregion
    #region CssAnimation
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CssAnimation
    {
        public void addKeyframesRule(object name, object keyframes){}
        public void attachListeners(){}
        public CssAnimation(){}
        public void generateAnimationId(){}
        public void onAnimationEnd(object e){}
        public void onAnimationStart(object e){}
        public void removeKeyframesRule(object name){}
        public void run(object animations){}
        /// <summary>
        /// @author Jacky Nguyen <jacky@sencha.com>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region CssTransition
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CssTransition
    {
        public void attachListeners(){}
        public CssTransition(){}
        public void getCssStyleValue(object name, object value){}
        public void getTestElement(){}
        public void onAnimationEnd(object element, object animation, object isInterrupted){}
        public void onTransitionEnd(object e){}
        public void refreshRunningAnimationsData(object element, object propertyNames, object interrupt){}
        public void run(object animations){}
        /// <summary>
        /// @author Jacky Nguyen <jacky@sencha.com>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        public bool listenersAttached{get;set;}
    }
    #endregion
}
#endregion
#region Ext.layout
namespace Ext.layout
{
    #region AbstractBox
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractBox
    {
        public AbstractBox(){}
        public AbstractBox(AbstractBoxConfig config){}
        public void applyAlign(object align){}
        public void applyPack(object pack){}
        public AbstractBox(object container){}
        public void convertPosition(object position){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemAdd(object item, object index){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemCenteredChange(object item, object centered){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemDockedChange(object item, object docked){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemFloatingChange(object item, object floating){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemRemove(object item){}
        public void onItemSizeChange(object item){}
        public void reapply(){}
        public void redrawContainer(){}
        public void setItemFlex(object item, object flex){}
        public void unapply(){}
        public void updateAlign(object align){}
        public void updatePack(object pack){}
        /// <summary>
        /// AbstractBox is a superclass for the two box layouts:
        /// * {@link Ext.layout.HBox hbox}
        /// * {@link Ext.layout.VBox vbox}
        /// AbstractBox itself is never used directly, but its subclasses provide flexible arrangement of child components
        /// inside a {@link Ext.Container Container}. For a full overview of layouts check out the
        /// [Layout Guide](#!/guide/layouts).
        /// ## Horizontal Box
        /// HBox allows you to easily lay out child components horizontally. It can size items based on a fixed width or a
        /// fraction of the total width available, enabling you to achieve flexible layouts that expand or contract to fill the
        /// space available.
        /// {@img ../guides/layouts/hbox.jpg}
        /// See the {@link Ext.layout.HBox HBox layout docs} for more information on using hboxes.
        /// ## Vertical Box
        /// VBox allows you to easily lay out child components verticaly. It can size items based on a fixed height or a
        /// fraction of the total height available, enabling you to achieve flexible layouts that expand or contract to fill the
        /// space available.
        /// {@img ../guides/layouts/vbox.jpg}
        /// See the {@link Ext.layout.VBox VBox layout docs} for more information on using vboxes.
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region AbstractBoxConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractBoxConfig
    {
        public AbstractBoxConfig(){}
        /// <summary>
        /// Controls how the child items of the container are aligned. Acceptable configuration values for this property are:
        /// *
        /// - **top** : **Default** child items are aligned vertically at the **top** of the container
        /// - **middle** : child items are aligned vertically in the **middle** of the container
        /// - **stretch** : child items are stretched vertically to fill the height of the container
        /// - **stretchmax** : child items are stretched vertically to the height of the largest item.
        /// @accessor
        /// </summary>
        public JsString align{get;set;}
        /// <summary>
        /// Controls how the child items of the container are packed together. Acceptable configuration values
        /// for this property are:
        /// *
        /// - ** start ** : child items are packed together at left side of container
        /// - ** center ** : child items are packed together at mid-width of container
        /// - ** end ** : child items are packed together at right side of container
        /// @accessor
        /// </summary>
        public JsString pack{get;set;}
    }
    #endregion
    #region Card
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Card
    {
        public Card(CardConfig config){}
        public Card(){}
        /// <summary>
        /// @private
        /// </summary>
        public void applyAnimation(object animation){}
        /// <summary>
        /// @private
        /// </summary>
        public void doActiveItemChange(object newActiveItem, object oldActiveItem){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemAdd(object item, object index){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemRemove(object item){}
        /// <summary>
        /// @private
        /// </summary>
        public void onActiveItemChange(object newActiveItem, object oldActiveItem){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateAnimation(object animation, object oldAnimation){}
        public JsString alias{get;set;}
        /// <summary>
        /// *
        /// Sometimes you want to show several screens worth of information but you've only got a small screen to work with.
        /// TabPanels and Carousels both enable you to see one screen of many at a time, and underneath they both use a Card
        /// Layout.
        /// *
        /// Card Layout takes the size of the Container it is applied to and sizes the currently active item to fill the
        /// Container completely. It then hides the rest of the items, allowing you to change which one is currently visible but
        /// only showing one at once:
        /// *
        /// {@img ../guides/layouts/card.jpg}
        /// *
        /// *
        /// Here the gray box is our Container, and the blue box inside it is the currently active card. The three other cards
        /// are hidden from view, but can be swapped in later. While it's not too common to create Card layouts directly, you
        /// can do so like this:
        /// *
        /// var panel = Ext.create('Ext.Panel', {
        /// layout: 'card',
        /// items: [
        /// {
        /// html: "First Item"
        /// },
        /// {
        /// html: "Second Item"
        /// },
        /// {
        /// html: "Third Item"
        /// },
        /// {
        /// html: "Fourth Item"
        /// }
        /// ]
        /// });
        /// *
        /// panel.getLayout().{@link Ext.Container#setActiveItem setActiveItem}(1);
        /// *
        /// Here we create a Panel with a Card Layout and later set the second item active (the active item index is zero-based,
        /// so 1 corresponds to the second item). Normally you're better off using a {@link Ext.tab.Panel tab panel} or a
        /// {@link Ext.carousel.Carousel carousel}.
        /// *
        /// For a more detailed overview of what layouts are and the types of layouts shipped with Sencha Touch 2, check out the
        /// [Layout Guide](#!/guide/layouts).
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// *
        /// Sometimes you want to show several screens worth of information but you've only got a small screen to work with.
        /// TabPanels and Carousels both enable you to see one screen of many at a time, and underneath they both use a Card
        /// Layout.
        /// *
        /// Card Layout takes the size of the Container it is applied to and sizes the currently active item to fill the
        /// Container completely. It then hides the rest of the items, allowing you to change which one is currently visible but
        /// only showing one at once:
        /// *
        /// {@img ../guides/layouts/card.jpg}
        /// *
        /// *
        /// Here the gray box is our Container, and the blue box inside it is the currently active card. The three other cards
        /// are hidden from view, but can be swapped in later. While it's not too common to create Card layouts directly, you
        /// can do so like this:
        /// *
        /// var panel = Ext.create('Ext.Panel', {
        /// layout: 'card',
        /// items: [
        /// {
        /// html: "First Item"
        /// },
        /// {
        /// html: "Second Item"
        /// },
        /// {
        /// html: "Third Item"
        /// },
        /// {
        /// html: "Fourth Item"
        /// }
        /// ]
        /// });
        /// *
        /// panel.getLayout().{@link Ext.Container#setActiveItem setActiveItem}(1);
        /// *
        /// Here we create a Panel with a Card Layout and later set the second item active (the active item index is zero-based,
        /// so 1 corresponds to the second item). Normally you're better off using a {@link Ext.tab.Panel tab panel} or a
        /// {@link Ext.carousel.Carousel carousel}.
        /// *
        /// For a more detailed overview of what layouts are and the types of layouts shipped with Sencha Touch 2, check out the
        /// [Layout Guide](#!/guide/layouts).
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region CardConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class CardConfig
    {
        public CardConfig(){}
        /// <summary>
        /// Card animation configuration
        /// Controls how card transitions are animated
        /// @accessor
        /// </summary>
        public Ext.fx.layout.Card animation{get;set;}
    }
    #endregion
    #region Default
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Default
    {
        public Default(){}
        public void addModalMask(object item){}
        public void centerItem(object item){}
        public Default(object container, object config){}
        public void createCenteringWrapper(object item){}
        public void createDockingWrapper(object direction){}
        public void destroyCenteringWrapper(object item){}
        public void dockItem(object item, object position){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemAdd(object item, object index){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemCenteredChange(object item, object centered){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemDockedChange(object item, object docked, object oldDocked){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemFloatingChange(object item, object floating){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemMove(object item, object toIndex, object fromIndex){}
        /// <summary>
        /// @private
        /// </summary>
        public void doItemRemove(object item){}
        public void getDockingWrapper(object position){}
        public void insertItem(object item, object index){}
        public void onActiveItemChange(){}
        public void onItemAdd(){}
        public void onItemCenteredChange(){}
        public void onItemDockedChange(){}
        public void onItemFloatingChange(){}
        public void onItemMove(){}
        public void onItemRemove(){}
        public void uncenterItem(object item){}
        public void undockItem(object item, object docked){}
        public JsString DIRECTION_HORIZONTAL{get;set;}
        public JsString DIRECTION_VERTICAL{get;set;}
        /// <summary>
        /// The Default Layout is the layout that all other layouts inherit from. The main capability it provides is docking,
        /// which means that every other layout can also provide docking support. It's unusual to use Default layout directly,
        /// instead it's much more common to use one of the sub classes:
        /// * {@link Ext.layout.HBox hbox layout}
        /// * {@link Ext.layout.VBox vbox layout}
        /// * {@link Ext.layout.Card card layout}
        /// * {@link Ext.layout.Fit fit layout}
        /// For a full overview of layouts check out the [Layout Guide](#!/guide/layouts).
        /// ## Docking
        /// Docking enables you to place additional Components at the top, right, bottom or left edges of the parent Container,
        /// resizing the other items as necessary. For example, let's say we're using an {@link Ext.layout.HBox hbox layout}
        /// with a couple of items and we want to add a banner to the top so that we end up with something like this:
        /// {@img ../guides/layouts/docktop.jpg}
        /// This is simple to achieve with the *dock: 'top'* configuration below. We can dock as many of the items as we like,
        /// to either the top, right, bottom or left edges of the Container:
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'hbox',
        /// items: [
        /// {
        /// dock: 'top',
        /// height: 20,
        /// html: 'This is docked to the top'
        /// },
        /// {
        /// html: 'message list',
        /// flex: 1
        /// },
        /// {
        /// html: 'message preview',
        /// flex: 2
        /// }
        /// ]
        /// });
        /// Similarly, to dock something to the left of a layout (a {@link Ext.layout.VBox vbox} in this case), such as the
        /// following:
        /// {@img ../guides/layouts/dockleft.jpg}
        /// We can simply dock to the left:
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'vbox',
        /// items: [
        /// {
        /// dock: 'left',
        /// width: 100,
        /// html: 'This is docked to the left'
        /// },
        /// {
        /// html: 'message list',
        /// flex: 1
        /// },
        /// {
        /// html: 'message preview',
        /// flex: 2
        /// }
        /// ]
        /// });
        /// We can also dock to the bottom and right and use other layouts than hbox and vbox ({@link Ext.layout.Card card} and
        /// {@link Ext.layout.Fit fit} layouts both accept docking too).
        /// </summary>
        public JsString extend{get;set;}
        public bool isLayout{get;set;}
        public JsString POSITION_END{get;set;}
        public JsString POSITION_START{get;set;}
    }
    #endregion
    #region Fit
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Fit
    {
        public Fit(){}
        public void apply(){}
        public Fit(object container){}
        public void reapply(){}
        public void unapply(){}
        public JsString alias{get;set;}
        /// <summary>
        /// Fit Layout is probably the simplest layout available. All it does is make a child component fit to the full size of
        /// its parent Container.
        /// {@img ../guides/layouts/fit.jpg}
        /// For example, if you have a parent Container that is 200px by 200px and give it a single child component and a 'fit'
        /// layout, the child component will also be 200px by 200px:
        /// var panel = Ext.create('Ext.Panel', {
        /// width: 200,
        /// height: 200,
        /// layout: 'fit',
        /// items: {
        /// xtype: 'panel',
        /// html: 'Also 200px by 200px'
        /// }
        /// });
        /// Ext.Viewport.add(panel);
        /// For a more detailed overview of what layouts are and the types of layouts shipped with Sencha Touch 2, check out the
        /// [Layout Guide](#!/guide/layouts).
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Fit Layout is probably the simplest layout available. All it does is make a child component fit to the full size of
        /// its parent Container.
        /// {@img ../guides/layouts/fit.jpg}
        /// For example, if you have a parent Container that is 200px by 200px and give it a single child component and a 'fit'
        /// layout, the child component will also be 200px by 200px:
        /// var panel = Ext.create('Ext.Panel', {
        /// width: 200,
        /// height: 200,
        /// layout: 'fit',
        /// items: {
        /// xtype: 'panel',
        /// html: 'Also 200px by 200px'
        /// }
        /// });
        /// Ext.Viewport.add(panel);
        /// For a more detailed overview of what layouts are and the types of layouts shipped with Sencha Touch 2, check out the
        /// [Layout Guide](#!/guide/layouts).
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region HBox
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HBox
    {
        public HBox(){}
        public JsString alias{get;set;}
        /// <summary>
        /// The HBox (short for horizontal box) layout makes it easy to position items horizontally in a
        /// {@link Ext.Container Container}. It can size items based on a fixed width or a fraction of the total width
        /// available.
        /// For example, an email client might have a list of messages pinned to the left, taking say one third of the available
        /// width, and a message viewing panel in the rest of the screen. We can achieve this with hbox layout's *flex* config:
        /// @example
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'hbox',
        /// items: [
        /// {
        /// html: 'message list',
        /// style: 'background-color: #5E99CC;',
        /// flex: 1
        /// },
        /// {
        /// html: 'message preview',
        /// style: 'background-color: #759E60;',
        /// flex: 2
        /// }
        /// ]
        /// });
        /// This will give us two boxes - one that's one third of the available width, the other being two thirds of the
        /// available width:
        /// {@img ../guides/layouts/hbox.jpg}
        /// We can also specify fixed widths for child items, or mix fixed widths and flexes. For example, here we have 3 items
        /// - one on each side with flex: 1, and one in the center with a fixed width of 100px:
        /// @example
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'hbox',
        /// items: [
        /// {
        /// html: 'Left item',
        /// style: 'background-color: #759E60;',
        /// flex: 1
        /// },
        /// {
        /// html: 'Center item',
        /// width: 100
        /// },
        /// {
        /// html: 'Right item',
        /// style: 'background-color: #5E99CC;',
        /// flex: 1
        /// }
        /// ]
        /// });
        /// Which gives us an effect like this:
        /// {@img ../guides/layouts/hboxfixed.jpg}
        /// For a more detailed overview of what layouts are and the types of layouts shipped with Sencha Touch 2, check out the
        /// [Layout Guide](#!/guide/layouts).
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The HBox (short for horizontal box) layout makes it easy to position items horizontally in a
        /// {@link Ext.Container Container}. It can size items based on a fixed width or a fraction of the total width
        /// available.
        /// For example, an email client might have a list of messages pinned to the left, taking say one third of the available
        /// width, and a message viewing panel in the rest of the screen. We can achieve this with hbox layout's *flex* config:
        /// @example
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'hbox',
        /// items: [
        /// {
        /// html: 'message list',
        /// style: 'background-color: #5E99CC;',
        /// flex: 1
        /// },
        /// {
        /// html: 'message preview',
        /// style: 'background-color: #759E60;',
        /// flex: 2
        /// }
        /// ]
        /// });
        /// This will give us two boxes - one that's one third of the available width, the other being two thirds of the
        /// available width:
        /// {@img ../guides/layouts/hbox.jpg}
        /// We can also specify fixed widths for child items, or mix fixed widths and flexes. For example, here we have 3 items
        /// - one on each side with flex: 1, and one in the center with a fixed width of 100px:
        /// @example
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'hbox',
        /// items: [
        /// {
        /// html: 'Left item',
        /// style: 'background-color: #759E60;',
        /// flex: 1
        /// },
        /// {
        /// html: 'Center item',
        /// width: 100
        /// },
        /// {
        /// html: 'Right item',
        /// style: 'background-color: #5E99CC;',
        /// flex: 1
        /// }
        /// ]
        /// });
        /// Which gives us an effect like this:
        /// {@img ../guides/layouts/hboxfixed.jpg}
        /// For a more detailed overview of what layouts are and the types of layouts shipped with Sencha Touch 2, check out the
        /// [Layout Guide](#!/guide/layouts).
        /// </summary>
        public JsString extend{get;set;}
        public JsString sizeChangeEventName{get;set;}
        public JsString sizePropertyName{get;set;}
    }
    #endregion
    #region Layout
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Layout
    {
        public Layout(){}
        /// <summary>
        /// Creates a new Layout for the specified container using the config object's layout to determine
        /// layout to instantiate.
        /// @param {Ext.Container} container A configuration object for the Component you wish to create.
        /// @param {Object} [config] The alias to provide the Layout type; if none is
        /// specified, Ext.layout.Default will be used.
        /// @return {Ext.layout.Default} The newly instantiated Layout.
        /// </summary>
        public Layout(Container container, object config){}
    }
    #endregion
    #region Navigation
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Navigation
    {
        public Navigation(){}
        public void doItemAdd(object item, object index){}
        public JsString alias{get;set;}
        /// <summary>
        /// Navigation Layout...
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region VBox
    [JsType(JsMode.Prototype, Export=false)]
    public partial class VBox
    {
        public VBox(){}
        public JsString alias{get;set;}
        /// <summary>
        /// The VBox (short for vertical box) layout makes it easy to position items horizontally in a
        /// {@link Ext.Container Container}. It can size items based on a fixed height or a fraction of the total height
        /// available.
        /// For example, let's say we want a banner to take one third of the available height, and an information panel in the
        /// rest of the screen. We can achieve this with vbox layout's *flex* config:
        /// @example
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'vbox',
        /// items: [
        /// {
        /// html: 'Awesome banner',
        /// style: 'background-color: #759E60;',
        /// flex: 1
        /// },
        /// {
        /// html: 'Some wonderful information',
        /// style: 'background-color: #5E99CC;',
        /// flex: 2
        /// }
        /// ]
        /// });
        /// This will give us two boxes - one that's one third of the available height, the other being two thirds of the
        /// available height:
        /// {@img ../guides/layouts/vbox.jpg}
        /// We can also specify fixed heights for child items, or mix fixed heights and flexes. For example, here we have 3
        /// items - one at the top and bottom with flex: 1, and one in the center with a fixed width of 100px:
        /// @example preview portrait
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'vbox',
        /// items: [
        /// {
        /// html: 'Top item',
        /// style: 'background-color: #5E99CC;',
        /// flex: 1
        /// },
        /// {
        /// html: 'Center item',
        /// height: 100
        /// },
        /// {
        /// html: 'Bottom item',
        /// style: 'background-color: #759E60;',
        /// flex: 1
        /// }
        /// ]
        /// });
        /// Which gives us an effect like this:
        /// {@img ../guides/layouts/vboxfixed.jpg}
        /// For a more detailed overview of what layouts are and the types of layouts shipped with Sencha Touch 2, check out the
        /// [Layout Guide](#!/guide/layouts).
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// The VBox (short for vertical box) layout makes it easy to position items horizontally in a
        /// {@link Ext.Container Container}. It can size items based on a fixed height or a fraction of the total height
        /// available.
        /// For example, let's say we want a banner to take one third of the available height, and an information panel in the
        /// rest of the screen. We can achieve this with vbox layout's *flex* config:
        /// @example
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'vbox',
        /// items: [
        /// {
        /// html: 'Awesome banner',
        /// style: 'background-color: #759E60;',
        /// flex: 1
        /// },
        /// {
        /// html: 'Some wonderful information',
        /// style: 'background-color: #5E99CC;',
        /// flex: 2
        /// }
        /// ]
        /// });
        /// This will give us two boxes - one that's one third of the available height, the other being two thirds of the
        /// available height:
        /// {@img ../guides/layouts/vbox.jpg}
        /// We can also specify fixed heights for child items, or mix fixed heights and flexes. For example, here we have 3
        /// items - one at the top and bottom with flex: 1, and one in the center with a fixed width of 100px:
        /// @example preview portrait
        /// Ext.create('Ext.Container', {
        /// fullscreen: true,
        /// layout: 'vbox',
        /// items: [
        /// {
        /// html: 'Top item',
        /// style: 'background-color: #5E99CC;',
        /// flex: 1
        /// },
        /// {
        /// html: 'Center item',
        /// height: 100
        /// },
        /// {
        /// html: 'Bottom item',
        /// style: 'background-color: #759E60;',
        /// flex: 1
        /// }
        /// ]
        /// });
        /// Which gives us an effect like this:
        /// {@img ../guides/layouts/vboxfixed.jpg}
        /// For a more detailed overview of what layouts are and the types of layouts shipped with Sencha Touch 2, check out the
        /// [Layout Guide](#!/guide/layouts).
        /// </summary>
        public JsString extend{get;set;}
        public JsString sizeChangeEventName{get;set;}
        public JsString sizePropertyName{get;set;}
    }
    #endregion
}
#endregion
#region Ext.log
namespace Ext.log
{
    #region Base
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Base
    {
        public Base(){}
        public Base(object config){}
    }
    #endregion
}
#endregion
#region Ext.log.filter
namespace Ext.log.filter
{
    #region Filter
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Filter
    {
        public Filter(){}
        public void accept(object @event){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Priority
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Priority
    {
        public Priority(){}
        public void accept(object @event){}
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.log.formatter
namespace Ext.log.formatter
{
    #region Default
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Default
    {
        public Default(){}
        public void format(object @event){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Formatter
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Formatter
    {
        public Formatter(){}
        public void format(object @event){}
        public void substitute(object template, object data){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Identity
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Identity
    {
        public Identity(){}
        public void format(object @event){}
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.log.writer
namespace Ext.log.writer
{
    #region Console
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Console
    {
        public Console(){}
        public void doWrite(object @event){}
        public JsString extend{get;set;}
    }
    #endregion
    #region DocumentTitle
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DocumentTitle
    {
        public DocumentTitle(){}
        public void doWrite(object @event){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Remote
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Remote
    {
        public Remote(){}
        public void doSend(object messages){}
        public void doWrite(object @event){}
        public void send(){}
        public JsString extend{get;set;}
        public bool isSending{get;set;}
        public object sendingTimer{get;set;}
    }
    #endregion
    #region Writer
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Writer
    {
        public Writer(){}
        public void updateFilters(object filters){}
        public void write(object @event){}
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.mixin
namespace Ext.mixin
{
    #region Identifiable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Identifiable
    {
        public Identifiable(){}
        /// <summary>
        /// Retrieves the id of this component. Will autogenerate an id if one has not already been set.
        /// @return {String} id
        /// </summary>
        public JsString getId(){return null;}
        public void getOptimizedId(){}
        public void getUniqueId(){}
        public JsString defaultIdPrefix{get;set;}
        public JsString defaultIdSeparator{get;set;}
        /// <summary>
        /// Retrieves the id of this component. Will autogenerate an id if one has not already been set.
        /// @return {String} id
        /// </summary>
        [JsProperty]
        public JsString Id{[JsMethod(Name="getId")]get;private set;}
        public JsRegExp idCleanRegex{get;set;}
        public bool isIdentifiable{get;set;}
        public JsString mixinId{get;set;}
    }
    #endregion
    #region Mixin
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Mixin
    {
        public Mixin(){}
        /// <summary>
        /// Base class for all mixins.
        /// @private
        /// </summary>
        public void onClassExtended(object cls, object data){}
    }
    #endregion
    #region Selectable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Selectable
    {
        public Selectable(SelectableConfig config){}
        public void applyMode(object mode){}
        public void applySelected(object newSelected, object selectedCollection){}
        public void applyStore(object store){}
        public void clearSelections(){}
        public Selectable(){}
        /// <summary>
        /// Deselects the given record(s). If many records are currently selected, it will only deselect those you pass in.
        /// @param {Number/Array/Ext.data.Model} records The record(s) to deselect. Can also be a number to reference by index
        /// @param {Boolean} suppressEvent If true the deselect event will not be fired
        /// </summary>
        public void deselect(object records, bool suppressEvent){}
        public void deselectAll(){}
        public void doMultiSelect(object records, object keepExisting, object suppressEvent){}
        public void doSingleSelect(object record, object suppressEvent){}
        public void fireSelectionChange(object fireEvent){}
        public void getCount(){}
        /// <summary>
        /// Returns an array of the currently selected records.
        /// </summary>
        public void getSelection(){}
        /// <summary>
        /// Returns true if there is a selected record.
        /// @return {Boolean}
        /// </summary>
        public void hasSelection(){}
        /// <summary>
        /// Returns <tt>true</tt> if the specified row is selected.
        /// @param {Ext.data.Model/Number} record The record or index of the record to check
        /// @return {Boolean}
        /// </summary>
        public void isSelected(object record){}
        public void onSelectionStoreClear(){}
        public void onSelectionStoreRemove(object store, object record){}
        public void refreshSelection(){}
        /// <summary>
        /// Adds the given records to the currently selected set
        /// @param {Ext.data.Model/Array/Number} records The records to select
        /// @param {Boolean} keepExisting If true, the existing selection will be added to (if not, the old selection is replaced)
        /// @param {Boolean} suppressEvent If true, the 'select' event will not be fired
        /// </summary>
        public void select(object records, bool keepExisting, bool suppressEvent){}
        public void selectAll(object silent){}
        /// <summary>
        /// Selects a range of rows if the selection model {@link Ext.mixin.Selectable#getLocked is not locked}.
        /// All rows in between startRow and endRow are also selected.
        /// @param {Number} startRow The index of the first row in the range
        /// @param {Number} endRow The index of the last row in the range
        /// @param {Boolean} keepExisting (optional) True to retain existing selections
        /// </summary>
        public void selectRange(JsNumber startRecord, JsNumber endRecord, bool keepExisting, object dir){}
        public void selectWithEvent(object record){}
        /// <summary>
        /// @param {Ext.data.Record} record
        /// Set a record as the last focused record. This does NOT mean
        /// that the record has been selected.
        /// </summary>
        public void updateLastFocused(object newRecord, object oldRecord){}
        public void updateStore(object newStore, object oldStore){}
        /// <summary>
        /// Tracks what records are currently selected in a databound widget. This class is mixed in to
        /// @private
        /// </summary>
        public JsString alternateClassName{get;set;}
        public JsString extend{get;set;}
    }
    #endregion
    #region SelectableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SelectableConfig
    {
        public SelectableConfig(){}
        /// <summary>
        /// Allow users to deselect a record in a DataView, List or Grid. Only applicable when the Selectable's mode is
        /// 'SINGLE'. Defaults to false.
        /// @accessor
        /// </summary>
        public bool allowDeselect{get;set;}
        /// <summary>
        /// True to deselect current selection when the container body is
        /// clicked. Defaults to true
        /// @accessor
        /// </summary>
        public bool deselectOnContainerClick{get;set;}
        /// <summary>
        /// When true, locks the current selection so that the user cannot change what is selected. Defaults to false,
        /// see {@link #setLocked} to dynamically change locking at run time
        /// @accessor
        /// </summary>
        public bool locked{get;set;}
        /// <summary>
        /// Modes of selection.
        /// Valid values are SINGLE, SIMPLE, and MULTI. Defaults to 'SINGLE'
        /// @accessor
        /// </summary>
        public JsString mode{get;set;}
        /// <summary>
        /// The {@link Ext.util.MixedCollection MixedCollection} that maintains the set of currently selected items
        /// @accessor
        /// </summary>
        public MixedCollection selected{get;set;}
    }
    #endregion
    #region Traversable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Traversable
    {
        public Traversable(){}
        public void getAncestorIds(){}
        public void getAncestors(){}
        public void getParent(){}
        public void hasParent(){}
        public void setParent(object parent){}
        /// <summary>
        /// A Traversable mixin.
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        [JsProperty]
        public object Parent{private get;[JsMethod(Name="setParent")]set;}
    }
    #endregion
}
#endregion
#region Ext.picker
namespace Ext.picker
{
    #region Date
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Date
    {
        public Date(DateConfig config){}
        public Date(){}
        /// <summary>
        /// Returns a slot config for a specified date.
        /// @private
        /// </summary>
        public void createSlot(object name, object days, object months, object years){}
        /// <summary>
        /// Generates all slots for all years specified by this component, and then sets them on the component
        /// @private
        /// </summary>
        public void createSlots(){}
        public void getDaysInMonth(object month, object year){}
        public void getValue(){}
        public void isLeapYear(object year){}
        /// <summary>
        /// @cfg {Array} slots
        /// @hide
        /// @accessor
        /// </summary>
        public void setValue(object value, object animated){}
        /// <summary>
        /// Updates the dayText configuraton
        /// </summary>
        public void updateDayText(object newDayText, object oldDayText){}
        /// <summary>
        /// Updates the monthText configuration
        /// </summary>
        public void updateMonthText(object newMonthText, object oldMonthText){}
        /// <summary>
        /// Updates the yearFrom configuration
        /// </summary>
        public void updateYearFrom(){}
        /// <summary>
        /// Updates the yearText configuration
        /// </summary>
        public void updateYearText(object yearText){}
        /// <summary>
        /// Updates the yearTo configuration
        /// </summary>
        public void updateYearTo(){}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// A date picker component which shows a Date Picker on the screen. This class extends from {@link Ext.picker.Picker}
        /// and {@link Ext.Sheet} so it is a popup.
        /// This component has no required configurations.
        /// ## Examples
        /// @example preview
        /// var datePicker = Ext.create('Ext.picker.Date');
        /// datePicker.show();
        /// You may want to adjust the {@link #yearFrom} and {@link #yearTo} properties:
        /// @example preview
        /// var datePicker = Ext.create('Ext.picker.Date', {
        /// yearFrom: 2000,
        /// yearTo  : 2015
        /// });
        /// datePicker.show();
        /// You can set the value of the {@link Ext.picker.Date} to the current date using `new Date()`:
        /// @example preview
        /// var datePicker = Ext.create('Ext.picker.Date', {
        /// value: new Date()
        /// });
        /// datePicker.show();
        /// And you can hide the titles from each of the slots by using the {@link #useTitles} configuration:
        /// @example preview
        /// var datePicker = Ext.create('Ext.picker.Date', {
        /// useTitles: false
        /// });
        /// datePicker.show();
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// A date picker component which shows a Date Picker on the screen. This class extends from {@link Ext.picker.Picker}
        /// and {@link Ext.Sheet} so it is a popup.
        /// This component has no required configurations.
        /// ## Examples
        /// @example preview
        /// var datePicker = Ext.create('Ext.picker.Date');
        /// datePicker.show();
        /// You may want to adjust the {@link #yearFrom} and {@link #yearTo} properties:
        /// @example preview
        /// var datePicker = Ext.create('Ext.picker.Date', {
        /// yearFrom: 2000,
        /// yearTo  : 2015
        /// });
        /// datePicker.show();
        /// You can set the value of the {@link Ext.picker.Date} to the current date using `new Date()`:
        /// @example preview
        /// var datePicker = Ext.create('Ext.picker.Date', {
        /// value: new Date()
        /// });
        /// datePicker.show();
        /// And you can hide the titles from each of the slots by using the {@link #useTitles} configuration:
        /// @example preview
        /// var datePicker = Ext.create('Ext.picker.Date', {
        /// useTitles: false
        /// });
        /// datePicker.show();
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region DateConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DateConfig
    {
        public DateConfig(){}
        /// <summary>
        /// The label to show for the day column.
        /// @accessor
        /// </summary>
        public JsString dayText{get;set;}
        /// <summary>
        /// The label to show for the month column.
        /// @accessor
        /// </summary>
        public JsString monthText{get;set;}
        /// <summary>
        /// An array of strings that specifies the order of the slots.
        /// @accessor
        /// </summary>
        public JsArray slotOrder{get;set;}
        /// <summary>
        /// Generate a title header for each individual slot and use
        /// the title configuration of the slot.
        /// @accessor
        /// </summary>
        public bool useTitles{get;set;}
        /// <summary>
        /// Default value for the field and the internal {@link Ext.picker.Date} component. Accepts an object of 'year',
        /// 'month' and 'day' values, all of which should be numbers, or a {@link Date}.
        /// *
        /// Examples:
        /// {year: 1989, day: 1, month: 5} = 1st May 1989.
        /// new Date() = current date
        /// @accessor
        /// </summary>
        public object value{get;set;}
        /// <summary>
        /// The start year for the date picker.
        /// @accessor
        /// </summary>
        public JsNumber yearFrom{get;set;}
        /// <summary>
        /// The label to show for the year column.
        /// @accessor
        /// </summary>
        public JsString yearText{get;set;}
        /// <summary>
        /// The last year for the date picker.
        /// @default the current year (new Date().getFullYear())
        /// @accessor
        /// </summary>
        public JsNumber yearTo{get;set;}
    }
    #endregion
    #region Picker
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Picker
    {
        public Picker(PickerConfig config){}
        public Picker(){}
        /// <summary>
        /// Updates the {@link #cancelButton} configuration. Will change it into a button when appropriate, or just update the text if needed.
        /// </summary>
        public void applyCancelButton(object config){}
        /// <summary>
        /// Updates the {@link #doneButton} configuration. Will change it into a button when appropriate, or just update the text if needed.
        /// </summary>
        public void applyDoneButton(object config){}
        public void applySlots(object slots){}
        /// <summary>
        /// @private
        /// </summary>
        public void applyToolbar(object config){}
        /// <summary>
        /// Returns the values of each of the pickers slots
        /// @return {Object} The values of the pickers slots
        /// </summary>
        public object getValue(){return null;}
        /// <summary>
        /// Returns the values of eaach of the pickers slots
        /// @return {Object} The values of the pickers slots
        /// </summary>
        public object getValues(){return null;}
        public void initElement(){}
        /// <summary>
        /// @private
        /// Called when the cancel button has been tapped.
        /// </summary>
        public void onCancelButtonTap(){}
        /// <summary>
        /// @private
        /// Called when the done button has been tapped.
        /// </summary>
        public void onDoneButtonTap(){}
        public void onShow(){}
        /// <summary>
        /// @private
        /// Called when a slot has been picked.
        /// </summary>
        public void onSlotPick(object slot, object value, object node){}
        /// <summary>
        /// Sets the values of the pickers slots
        /// @param {Object} values The values in a {name:'value'} format
        /// @param {Boolean} animated True to animate setting the values
        /// @return {Ext.Picker} this This picker
        /// </summary>
        public void setValue(object values, bool animated){}
        public void setValueAnimated(object values){}
        public void updateCancelButton(object newCancelButton, object oldCancelButton){}
        public void updateDoneButton(object newDoneButton, object oldDoneButton){}
        /// <summary>
        /// Adds any new {@link #slots} to this picker, and removes existing {@link #slots}
        /// </summary>
        public void updateSlots(object newSlots, object oldSlots){}
        /// <summary>
        /// @private
        /// </summary>
        public void updateToolbar(object newToolbar, object oldToolbar){}
        /// <summary>
        /// *
        /// </summary>
        public void updateUseTitles(object useTitles){}
        /// <summary>
        /// A general picker class. {@link Ext.picker.Slot}s are used to organize multiple scrollable slots into a single picker. {@link #slots} is
        /// the only necessary configuration.
        /// The {@link #slots} configuration with a few key values:
        /// - **name:** The name of the slot (will be the key when using {@link #getValues} in this {@link Ext.picker.Picker})
        /// - **title:** The title of this slot (if {@link #useTitles} is set to true)
        /// - **data/store:** The data or store to use for this slot.
        /// Remember, {@link Ext.picker.Slot} class extends from {@link Ext.dataview.DataView}.
        /// ## Examples
        /// @example preview
        /// var picker = Ext.create('Ext.Picker', {
        /// slots: [
        /// {
        /// name : 'limit_speed',
        /// title: 'Speed',
        /// data : [
        /// {text: '50 KB/s', value: 50},
        /// {text: '100 KB/s', value: 100},
        /// {text: '200 KB/s', value: 200},
        /// {text: '300 KB/s', value: 300}
        /// ]
        /// }
        /// ]
        /// });
        /// picker.show();
        /// You can also customize the top toolbar on the {@link Ext.picker.Picker} by changing the {@link #doneButton} and {@link #cancelButton} configurations:
        /// @example preview
        /// var picker = Ext.create('Ext.Picker', {
        /// doneButton: 'I\'m done!',
        /// cancelButton: false,
        /// slots: [
        /// {
        /// name : 'limit_speed',
        /// title: 'Speed',
        /// data : [
        /// {text: '50 KB/s', value: 50},
        /// {text: '100 KB/s', value: 100},
        /// {text: '200 KB/s', value: 200},
        /// {text: '300 KB/s', value: 300}
        /// ]
        /// }
        /// ]
        /// });
        /// picker.show();
        /// Or by passing a custom {@link #toolbar} configuration:
        /// @example preview
        /// var picker = Ext.create('Ext.Picker', {
        /// doneButton: false,
        /// cancelButton: false,
        /// toolbar: {
        /// ui: 'light',
        /// title: 'My Picker!'
        /// },
        /// slots: [
        /// {
        /// name : 'limit_speed',
        /// title: 'Speed',
        /// data : [
        /// {text: '50 KB/s', value: 50},
        /// {text: '100 KB/s', value: 100},
        /// {text: '200 KB/s', value: 200},
        /// {text: '300 KB/s', value: 300}
        /// ]
        /// }
        /// ]
        /// });
        /// picker.show();
        /// </summary>
        public JsString alias{get;set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// A general picker class. {@link Ext.picker.Slot}s are used to organize multiple scrollable slots into a single picker. {@link #slots} is
        /// the only necessary configuration.
        /// The {@link #slots} configuration with a few key values:
        /// - **name:** The name of the slot (will be the key when using {@link #getValues} in this {@link Ext.picker.Picker})
        /// - **title:** The title of this slot (if {@link #useTitles} is set to true)
        /// - **data/store:** The data or store to use for this slot.
        /// Remember, {@link Ext.picker.Slot} class extends from {@link Ext.dataview.DataView}.
        /// ## Examples
        /// @example preview
        /// var picker = Ext.create('Ext.Picker', {
        /// slots: [
        /// {
        /// name : 'limit_speed',
        /// title: 'Speed',
        /// data : [
        /// {text: '50 KB/s', value: 50},
        /// {text: '100 KB/s', value: 100},
        /// {text: '200 KB/s', value: 200},
        /// {text: '300 KB/s', value: 300}
        /// ]
        /// }
        /// ]
        /// });
        /// picker.show();
        /// You can also customize the top toolbar on the {@link Ext.picker.Picker} by changing the {@link #doneButton} and {@link #cancelButton} configurations:
        /// @example preview
        /// var picker = Ext.create('Ext.Picker', {
        /// doneButton: 'I\'m done!',
        /// cancelButton: false,
        /// slots: [
        /// {
        /// name : 'limit_speed',
        /// title: 'Speed',
        /// data : [
        /// {text: '50 KB/s', value: 50},
        /// {text: '100 KB/s', value: 100},
        /// {text: '200 KB/s', value: 200},
        /// {text: '300 KB/s', value: 300}
        /// ]
        /// }
        /// ]
        /// });
        /// picker.show();
        /// Or by passing a custom {@link #toolbar} configuration:
        /// @example preview
        /// var picker = Ext.create('Ext.Picker', {
        /// doneButton: false,
        /// cancelButton: false,
        /// toolbar: {
        /// ui: 'light',
        /// title: 'My Picker!'
        /// },
        /// slots: [
        /// {
        /// name : 'limit_speed',
        /// title: 'Speed',
        /// data : [
        /// {text: '50 KB/s', value: 50},
        /// {text: '100 KB/s', value: 100},
        /// {text: '200 KB/s', value: 200},
        /// {text: '300 KB/s', value: 300}
        /// ]
        /// }
        /// ]
        /// });
        /// picker.show();
        /// </summary>
        public JsString extend{get;set;}
        /// <summary>
        /// Returns the values of each of the pickers slots
        /// @return {Object} The values of the pickers slots
        /// </summary>
        [JsProperty]
        public object Value{[JsMethod(Name="getValue")]get;private set;}
        [JsProperty]
        public object ValueAnimated{private get;[JsMethod(Name="setValueAnimated")]set;}
        /// <summary>
        /// Returns the values of eaach of the pickers slots
        /// @return {Object} The values of the pickers slots
        /// </summary>
        [JsProperty]
        public object Values{[JsMethod(Name="getValues")]get;private set;}
    }
    #endregion
    #region PickerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PickerConfig
    {
        public PickerConfig(){}
        /// <summary>
        /// Can be either:<ul>
        /// <li>A {String} text to be used on the Cancel button</li>
        /// <li>An {Object} as config for {@link Ext.Button}</li>
        /// <li>false or null to hide it</li></ul>
        /// @accessor
        /// </summary>
        public object cancelButton{get;set;}
        /// <summary>
        /// Can be either:<ul>
        /// <li>A {String} text to be used on the Done button</li>
        /// <li>An {Object} as config for {@link Ext.Button}</li>
        /// <li>false or null to hide it</li></ul>
        /// @accessor
        /// </summary>
        public object doneButton{get;set;}
        /// <summary>
        /// The height of the picker.
        /// @accessor
        /// </summary>
        public JsNumber height{get;set;}
        /// <summary>
        /// An array of slot configurations.
        /// <ul>
        /// <li>name - {String} - Name of the slot</li>
        /// <li>data - {Array} - An array of text/value pairs in the format {text: 'myKey', value: 'myValue'}</li>
        /// <li>title - {String} - Title of the slot. This is used in conjunction with useTitles: true.</li>
        /// </ul>
        /// @accessor
        /// </summary>
        public JsArray slots{get;set;}
        /// <summary>
        /// The toolbar which contains the {@link #doneButton} and {@link #cancelButton} buttons.
        /// @accessor
        /// </summary>
        public Toolbar toolbar{get;set;}
        /// <summary>
        /// Generate a title header for each individual slot and use
        /// the title configuration of the slot.
        /// @accessor
        /// </summary>
        public bool useTitles{get;set;}
        /// <summary>
        /// The value to initialize the picker with
        /// @accessor
        /// </summary>
        public object value{get;set;}
    }
    #endregion
    #region Slot
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Slot
    {
        public Slot(SlotConfig config){}
        public Slot(){}
        /// <summary>
        /// Looks at the {@link #data} configuration and turns it into {@link #store}
        /// </summary>
        public void applyData(object data){}
        /// <summary>
        /// Sets the title for this dataview by creating element
        /// </summary>
        public void applyTitle(object title){}
        public void doItemTap(object list, object index, object item, object e){}
        /// <summary>
        /// Returns the vlaue of this slot
        /// @private
        /// </summary>
        public void getValue(){}
        public void initialize(){}
        public void onPainted(){}
        public void onScrollEnd(object scroller, object position){}
        public void scrollToItem(object item, object animated){}
        public void setupBar(){}
        /// <summary>
        /// Sets the value of this slot
        /// @private
        /// </summary>
        public void setValue(object value){}
        /// <summary>
        /// Sets the value of this slot
        /// @private
        /// </summary>
        public void setValueAnimated(object value){}
        /// <summary>
        /// Updates the {@link #align} configuration
        /// </summary>
        public void updateAlign(object newAlign, object oldAlign){}
        public void updateData(object data){}
        public void updateDisplayField(object newDisplayField){}
        public void updateShowTitle(object showTitle){}
        public void updateTitle(object newTitle, object oldTitle){}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// @private
        /// *
        /// A general {@link Ext.picker.Picker} slot class.  Slots are used to organize multiple scrollable slots into
        /// a single {@link Ext.picker.Picker}.
        /// *
        /// {
        /// name : 'limit_speed',
        /// title: 'Speed Limit',
        /// data : [
        /// {text: '50 KB/s', value: 50},
        /// {text: '100 KB/s', value: 100},
        /// {text: '200 KB/s', value: 200},
        /// {text: '300 KB/s', value: 300}
        /// ]
        /// }
        /// *
        /// See the {@link Ext.picker.Picker} documentation on how to use slots.
        /// </summary>
        public JsString extend{get;set;}
        public bool isSlot{get;set;}
        /// <summary>
        /// @private
        /// The current selectedIndex of the picker slot
        /// </summary>
        public object selectedIndex{get;set;}
        /// <summary>
        /// Sets the value of this slot
        /// @private
        /// </summary>
        [JsProperty]
        public object Value{private get;[JsMethod(Name="setValue")]set;}
        /// <summary>
        /// Sets the value of this slot
        /// @private
        /// </summary>
        [JsProperty]
        public object ValueAnimated{private get;[JsMethod(Name="setValueAnimated")]set;}
        /// <summary>
        /// @private
        /// *
        /// A general {@link Ext.picker.Picker} slot class.  Slots are used to organize multiple scrollable slots into
        /// a single {@link Ext.picker.Picker}.
        /// *
        /// {
        /// name : 'limit_speed',
        /// title: 'Speed Limit',
        /// data : [
        /// {text: '50 KB/s', value: 50},
        /// {text: '100 KB/s', value: 100},
        /// {text: '200 KB/s', value: 200},
        /// {text: '300 KB/s', value: 300}
        /// ]
        /// }
        /// *
        /// See the {@link Ext.picker.Picker} documentation on how to use slots.
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region SlotConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SlotConfig
    {
        public SlotConfig(){}
        /// <summary>
        /// @accessor
        /// </summary>
        public JsString align{get;set;}
        /// <summary>
        /// The main component class
        /// @accessor
        /// </summary>
        public JsString cls{get;set;}
        /// <summary>
        /// The display field in the store.
        /// Defaults to 'text'.
        /// @accessor
        /// </summary>
        public JsString displayField{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public JsNumber flex{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// The name of this slot. This config option is required.
        /// @accessor
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public object scrollable{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public bool showTitle{get;set;}
        /// <summary>
        /// The title to use for this slot. Null for no title
        /// @accessor
        /// </summary>
        public JsString title{get;set;}
        /// <summary>
        /// The value of this slot
        /// @accessor
        /// </summary>
        public JsNumber value{get;set;}
        /// <summary>
        /// The value field in the store.
        /// Defaults to 'value'.
        /// @accessor
        /// </summary>
        public JsString valueField{get;set;}
    }
    #endregion
}
#endregion
#region Ext.scroll
namespace Ext.scroll
{
    #region Indicator
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Indicator
    {
        public Indicator(){}
        public Indicator(object config){}
        public JsString alternateClassName{get;set;}
    }
    #endregion
    #region Scroller
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Scroller
    {
        public Scroller(){}
        public Scroller(ScrollerConfig config){}
        /// <summary>
        /// @cfg {Number} friction The friction of the scroller. By raising this value the length that momentum scrolls
        /// becomes shorter. This value is best kept between 0 and 1. The default value is 0.5. Deprecated, please use
        /// momentumEasing.momentum.friction instead
        /// @deprecated 2.0.0
        /// </summary>
        public Scroller(object config){}
        /// <summary>
        /// The scroller factory
        /// </summary>
        public JsString alternateClassName{get;set;}
    }
    #endregion
    #region ScrollerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ScrollerConfig
    {
        public ScrollerConfig(){}
        /// <summary>
        /// A higher acceleration gives the scroller more initial velocity. Defaults to 30
        /// Deprecated, please use momentumEasing.momentum.acceleration instead
        /// @deprecated 2.0.0
        /// </summary>
        public JsNumber acceleration{get;set;}
    }
    #endregion
    #region View
    [JsType(JsMode.Prototype, Export=false)]
    public partial class View
    {
        public View(){}
        public void applyElement(object element){}
        public void applyIndicators(object config, object indicators){}
        public void applyScroller(object config, object currentScroller){}
        public View(object config){}
        public void destroy(){}
        public void getSize(){}
        public void hideIndicator(object axis){}
        public void isAxisEnabled(object axis){}
        public void onScroll(object scroller, object x, object y){}
        public void onScrollEnd(){}
        public void onScrollStart(){}
        public void processConfig(object config){}
        public void refresh(){}
        public void refreshIndicator(object axis){}
        public void refreshIndicators(){}
        public void setConfig(object config){}
        public void setIndicatorValue(object axis, object scrollerPosition){}
        public void showIndicator(object axis){}
        public void updateElement(object element){}
        public void updateIndicators(object indicators){}
        public void updateScroller(object scroller){}
        public JsString alternateClassName{get;set;}
        [JsProperty]
        public object Config{private get;[JsMethod(Name="setConfig")]set;}
        /// <summary>
        /// *
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.scroll.easing
namespace Ext.scroll.easing
{
    #region Bounce
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Bounce
    {
        public Bounce(){}
        public void getValue(){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region BoundMomentum
    [JsType(JsMode.Prototype, Export=false)]
    public partial class BoundMomentum
    {
        public BoundMomentum(){}
        public void applyBounce(object config, object currentEasing){}
        public void applyMomentum(object config, object currentEasing){}
        public void getValue(){}
        public void reset(){}
        public void updateStartTime(object startTime){}
        public void updateStartValue(object startValue){}
        public void updateStartVelocity(object startVelocity){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region EaseOut
    [JsType(JsMode.Prototype, Export=false)]
    public partial class EaseOut
    {
        public EaseOut(){}
        public void getValue(){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Easing
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Easing
    {
        public Easing(){}
        public void applyStartTime(object startTime){}
        public void clone(){}
        public Easing(object config){}
        public void reset(){}
        public void updateStartTime(object startTime){}
        public bool isEnded{get;set;}
    }
    #endregion
    #region Linear
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Linear
    {
        public Linear(){}
        public void getValue(){}
        public void updateEndValue(object endValue){}
        public void updateStartValue(object startValue){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Momentum
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Momentum
    {
        public Momentum(){}
        public void getFrictionFactor(){}
        public void getValue(){}
        public void getVelocity(){}
        public void updateAcceleration(object acceleration){}
        public void updateFriction(object friction){}
        public void updateStartVelocity(object velocity){}
        public object alpha{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.scroll.indicator
namespace Ext.scroll.indicator
{
    #region Abstract
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Abstract
    {
        public Abstract(Ext.scroll.indicator.AbstractConfig config){}
        public Abstract(){}
        public void applyRatio(object ratio){}
        public void doSetHidden(object hidden){}
        public void getElementConfig(){}
        public void refresh(){}
        public void setOffset(object offset){}
        public void updateAxis(object axis){}
        public void updateBarCls(object barCls){}
        public void updateLength(object length){}
        public void updateValue(object value){}
        public object barElement{get;set;}
        public object barLength{get;set;}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        public object gapLength{get;set;}
        [JsProperty]
        public object Offset{private get;[JsMethod(Name="setOffset")]set;}
    }
    #endregion
    #region AbstractConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractConfig
    {
        public AbstractConfig(){}
        /// <summary>
        /// The current indicator axis
        /// @accessor
        /// </summary>
        public JsString axis{get;set;}
    }
    #endregion
    #region CssTransform
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CssTransform
    {
        public CssTransform(){}
        public void applyLength(object length){}
        public void getElementConfig(){}
        public void refresh(){}
        public void setOffset(object offset){}
        public void updateLength(object length){}
        public void updateValue(object value){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        [JsProperty]
        public object Offset{private get;[JsMethod(Name="setOffset")]set;}
    }
    #endregion
    #region ScrollPosition
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ScrollPosition
    {
        public ScrollPosition(){}
        public void getElementConfig(){}
        public void setLength(object length){}
        public void setOffset(object offset){}
        public void updateValue(object value){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        [JsProperty]
        public object Length{private get;[JsMethod(Name="setLength")]set;}
        [JsProperty]
        public object Offset{private get;[JsMethod(Name="setOffset")]set;}
    }
    #endregion
}
#endregion
#region Ext.scroll.scroller
namespace Ext.scroll.scroller
{
    #region Abstract
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Abstract
    {
        public Abstract(){}
        public Abstract(Ext.scroll.scroller.AbstractConfig config){}
        public void applyContainerScrollSize(object size){}
        public void applyContainerSize(object size){}
        public void applyDirection(object direction){}
        public void applyElement(object element){}
        public void applyMomentumEasing(object easing){}
        public void applySize(object size){}
        public void applySnapEasing(object easing){}
        public void attachListeneners(){}
        public Abstract(object config){}
        public void destroy(){}
        public void detachListeners(){}
        public void doAnimationFrame(){}
        public void doRefresh(){}
        public void doScrollTo(object x, object y){}
        public void getContainer(){}
        public void getMaxPosition(){}
        public void isAxisEnabled(object axis){}
        public void onAfterInitialized(){}
        public void onAxisDrag(object axis, object delta){}
        public void onDrag(object e){}
        public void onDragEnd(object e){}
        public void onDragStart(){}
        public void onScrollEnd(){}
        public void onTouchStart(){}
        public void prepareAnimation(object axis){}
        public void prepareSnapAnimation(object axis){}
        public void refresh(){}
        public void refreshMaxPosition(){}
        public void scrollTo(object x, object y){}
        public void scrollToAnimated(object x, object y){}
        public void snapToBoundary(){}
        public void snapValueForAxis(object value, object axis){}
        public void startAnimation(){}
        public void stopAnimation(object isOnTouchStart){}
        public void updateAutoRefresh(object autoRefresh){}
        public void updateDirection(object direction){}
        public void updateDisabled(object disabled){}
        public void updateElement(object element){}
        public void updateFps(object fps){}
        public object activeEasing{get;set;}
        public object dragEndTime{get;set;}
        public object dragStartTime{get;set;}
        public bool isAnimating{get;set;}
        public bool isDragging{get;set;}
    }
    #endregion
    #region AbstractConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractConfig
    {
        public AbstractConfig(){}
        /// <summary>
        /// Possible values: 'auto', 'vertical', 'horizontal', or 'both'
        /// @accessor
        /// </summary>
        public JsString direction{get;set;}
    }
    #endregion
    #region CssPosition
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CssPosition
    {
        public CssPosition(){}
        public void doScrollTo(object x, object y){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region CssTransform
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CssTransform
    {
        public CssTransform(){}
        public void doScrollTo(object x, object y){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Infinite
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Infinite
    {
        public void activateSlice(object slice, object zIndex){}
        public void applyDirection(object direction){}
        public void applyItemLength(object length){}
        public void applySlicesCount(object count){}
        public Infinite(){}
        public void createSlice(){}
        public void deactivateSlice(object slice){}
        public void destroySlices(){}
        public void doScrollTo(object x, object y){}
        public void getCurrentAxis(){}
        public void getEmptySlice(){}
        public void getMaxPosition(object determine){}
        public void getSlice(object index){}
        public void prepareSlice(object index){}
        public void setActiveSlices(object upper, object lower){}
        public void setSlicePosition(object slice, object position, object axis){}
        public void setSliceSize(object width, object height){}
        public void updateItemLength(object length, object oldLength){}
        public void updateSlicesCount(object count, object oldCount){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        public object itemsCountPerSlice{get;set;}
        public object recycleIndexOffset{get;set;}
        public object sliceLength{get;set;}
    }
    #endregion
    #region ScrollPosition
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ScrollPosition
    {
        public ScrollPosition(){}
        public void destroy(){}
        public void determinePosition(){}
        public void doScrollTo(object x, object y){}
        public void getStretcher(){}
        public void onAfterInitialized(){}
        public void onTouchStart(){}
        public void refresh(){}
        public void refreshStretch(){}
        public void shrink(){}
        public void stretch(object x, object y){}
        /// <summary>
        /// @private
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
}
#endregion
#region Ext.tab
namespace Ext.tab
{
    #region Bar
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Bar
    {
        public Bar(BarConfig config){}
        /// <summary>
        /// @private
        /// </summary>
        public void applyActiveTab(object activeTab){}
        /// <summary>
        /// @event change
        /// @param {Ext.tab.Bar} this
        /// @param {Ext.tab.Tab} tab The Tab button
        /// @param {Ext.Component} card The component that has been activated
        /// </summary>
        public Bar(){}
        /// <summary>
        /// @private
        /// Sets the active tab
        /// </summary>
        public void doActiveTabChange(object me, object newTab, object oldTab){}
        /// <summary>
        /// @private
        /// When docked to the top, pack left, when on the bottom pack center
        /// </summary>
        public void doSetDocked(object newDocked){}
        public void onTabTap(object tab){}
        /// <summary>
        /// @private
        /// Parses the active tab, which can be a number or string
        /// </summary>
        public void parseActiveTab(object tab){}
        /// <summary>
        /// @private
        /// Fires off the tabchange action
        /// </summary>
        public void updateActiveTab(object newTab, object oldTab){}
        /// <summary>
        /// Ext.tab.Bar is used internally by {@link Ext.tab.Panel} to create the bar of tabs that appears at the top of the tab
        /// panel. It's unusual to use it directly, instead see the {@link Ext.tab.Panel tab panel docs} for usage instructions.
        /// Used in the {@link Ext.tab.Panel} component to display {@link Ext.tab.Tab} components.
        /// @private
        /// </summary>
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Ext.tab.Bar is used internally by {@link Ext.tab.Panel} to create the bar of tabs that appears at the top of the tab
        /// panel. It's unusual to use it directly, instead see the {@link Ext.tab.Panel tab panel docs} for usage instructions.
        /// Used in the {@link Ext.tab.Panel} component to display {@link Ext.tab.Tab} components.
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region BarConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class BarConfig
    {
        public BarConfig(){}
        /// <summary>
        /// @accessor
        /// </summary>
        public Component activeTab{get;set;}
    }
    #endregion
    #region Panel
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Panel : Ext.Container
    {
        public Panel(Ext.tab.PanelConfig config){}
        public Panel(){}
        /// <summary>
        /// Creates a new {@link Ext.tab.Bar} instance using {@link Ext.Factory}.
        /// @private
        /// </summary>
        public void applyTabBar(object config){}
        /// <summary>
        /// Updates the {@link #tabBar} instance with the new {@link Ext.tab.Bar#activeTab}.
        /// </summary>
        public void doActiveItemChange(object newCard){}
        /// <summary>
        /// Updates this container with the new active item.
        /// </summary>
        public void doTabChange(object tabBar, object newTab, object oldTab){}
        public void initialize(){}
        public void onAdd(object card){}
        public void setActiveItem(object activeItem){}
        /// <summary>
        /// Adds the new {@link Ext.tab.Bar} instance into this container.
        /// @private
        /// </summary>
        public void updateTabBar(object newTabBar){}
        /// <summary>
        /// Updates the docked position of the {@link #tabBar}.
        /// @private
        /// </summary>
        public void updateTabBarPosition(object position){}
        /// <summary>
        /// Updates the Ui for this component and the {@link #tabBar}.
        /// </summary>
        public void updateUi(object newUi, object oldUi){}
        [JsProperty]
        public object ActiveItem{private get;[JsMethod(Name="setActiveItem")]set;}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Tab Panels are a great way to allow the user to switch between several pages that are all full screen. Each
        /// Component in the Tab Panel gets its own Tab, which shows the Component when tapped on. Tabs can be positioned at
        /// the top or the bottom of the Tab Panel, and can optionally accept title and icon configurations.
        /// Here's how we can set up a simple Tab Panel with tabs at the bottom. Use the controls at the top left of the example
        /// to toggle between code mode and live preview mode (you can also edit the code and see your changes in the live
        /// preview):
        /// @example preview
        /// Ext.create('Ext.TabPanel', {
        /// fullscreen: true,
        /// tabBarPosition: 'bottom',
        /// defaults: {
        /// styleHtmlContent: true
        /// },
        /// items: [
        /// {
        /// title: 'Home',
        /// iconCls: 'home',
        /// html: 'Home Screen'
        /// },
        /// {
        /// title: 'Contact',
        /// iconCls: 'user',
        /// html: 'Contact Screen'
        /// }
        /// ]
        /// });
        /// One tab was created for each of the {@link Ext.Panel panels} defined in the items array. Each tab automatically uses
        /// the title and icon defined on the item configuration, and switches to that item when tapped on. We can also position
        /// the tab bar at the top, which makes our Tab Panel look like this:
        /// @example preview
        /// Ext.create('Ext.TabPanel', {
        /// fullscreen: true,
        /// defaults: {
        /// styleHtmlContent: true
        /// },
        /// items: [
        /// {
        /// title: 'Home',
        /// html: 'Home Screen'
        /// },
        /// {
        /// title: 'Contact',
        /// html: 'Contact Screen'
        /// }
        /// ]
        /// });
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region PanelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PanelConfig : Ext.ContainerConfig
    {
        public PanelConfig(){}
        /// <summary>
        /// @hide
        /// </summary>
        public object layout{get;set;}
        /// <summary>
        /// An Ext.tab.Bar configuration.
        /// @accessor
        /// </summary>
        public object tabBar{get;set;}
        /// <summary>
        /// The docked position for the {@link #tabBar} instance
        /// @accessor
        /// </summary>
        public JsString tabBarPosition{get;set;}
        /// <summary>
        /// @accessor
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region Tab
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Tab
    {
        public Tab(TabConfig config){}
        public Tab(){}
        public void updateActive(object active){}
        /// <summary>
        /// @event deactivate
        /// @param {Ext.tab.Tab} this
        /// </summary>
        public void updateTitle(Tab title){}
        public JsString alternateClassName{get;set;}
        /// <summary>
        /// Used in the {@link Ext.tab.Bar} component. This shouldn't be used directly, instead use
        /// {@link Ext.tab.Bar} or {@link Ext.tab.Panel}.
        /// @private
        /// </summary>
        public JsString extend{get;set;}
        public bool isTab{get;set;}
        /// <summary>
        /// Used in the {@link Ext.tab.Bar} component. This shouldn't be used directly, instead use
        /// {@link Ext.tab.Bar} or {@link Ext.tab.Panel}.
        /// @private
        /// </summary>
        public JsString xtype{get;set;}
    }
    #endregion
    #region TabConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TabConfig
    {
        public TabConfig(){}
        /// <summary>
        /// Set this to true to have the tab be active by default.
        /// @accessor
        /// </summary>
        public bool active{get;set;}
        /// <summary>
        /// The CSS class to be applied to a Tab when it is active. Defaults to 'x-tab-active'.
        /// Providing your own CSS for this class enables you to customize the active state.
        /// @accessor
        /// </summary>
        public JsString activeCls{get;set;}
        /// <summary>
        /// The CSS class to be applied to a Tab when it is pressed. Defaults to 'x-tab-pressed'.
        /// Providing your own CSS for this class enables you to customize the pressed state.
        /// @accessor
        /// </summary>
        public JsString pressedCls{get;set;}
        /// <summary>
        /// The title of the card that this tab is bound to.
        /// @accessor
        /// </summary>
        public JsString title{get;set;}
    }
    #endregion
}
#endregion
#region Ext.util
namespace Ext.util
{
    #region AbstractMixedCollection
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractMixedCollection
    {
        public AbstractMixedCollection(){}
        public AbstractMixedCollection(AbstractMixedCollectionConfig config){}
        /// <summary>
        /// Adds an item to the collection. Fires the {@link #add} event when complete.
        /// @param {String} key <p>The key to associate with the item, or the new item.</p>
        /// <p>If a {@link #getKey} implementation was specified for this MixedCollection,
        /// or if the key of the stored items is in a property called <tt><b>id</b></tt>,
        /// the MixedCollection will be able to <i>derive</i> the key for the new item.
        /// In this case just pass the new item in this parameter.</p>
        /// @param {Object} o The item to add.
        /// @return {Object} The item added.
        /// </summary>
        public object add(JsString key, object obj){return null;}
        /// <summary>
        /// Adds all elements of an Array or an Object to the collection.
        /// @param {Object/Array} objs An Object containing properties which will be added
        /// to the collection, or an Array of values, each of which are added to the collection.
        /// Functions references will be added to the collection if <code>{@link #allowFunctions}</code>
        /// has been set to <tt>true</tt>.
        /// </summary>
        public void addAll(object objs){}
        /// <summary>
        /// Removes all items from the collection.  Fires the {@link #clear} event when complete.
        /// </summary>
        public void clear(){}
        /// <summary>
        /// Creates a shallow copy of this collection
        /// @return {Ext.util.MixedCollection}
        /// </summary>
        public void clone(){}
        /// <summary>
        /// Collects unique values of a particular property in this MixedCollection
        /// @param {String} property The property to collect on
        /// @param {String} root Optional 'root' property to extract the first argument from. This is used mainly when
        /// summing fields in records, where the fields are all stored inside the 'data' object
        /// @param {Boolean} allowBlank (optional) Pass true to allow null, undefined or empty string values
        /// @return {Array} The unique values
        /// </summary>
        public JsArray collect(JsString property, JsString root, bool allowNull){return null;}
        /// <summary>
        /// @event remove
        /// Fires when an item is removed from the collection.
        /// @param {Object} o The item being removed.
        /// @param {String} key (optional) The key associated with the removed item.
        /// </summary>
        public AbstractMixedCollection(object allowFunctions, JsString keyFn){}
        /// <summary>
        /// Returns true if the collection contains the passed Object as an item.
        /// @param {Object} o  The Object to look for in the collection.
        /// @return {Boolean} True if the collection contains the Object as an item.
        /// </summary>
        public bool contains(object o){return false;}
        /// <summary>
        /// Returns true if the collection contains the passed Object as a key.
        /// @param {String} key The key to look for in the collection.
        /// @return {Boolean} True if the collection contains the Object as a key.
        /// </summary>
        public bool containsKey(JsString key){return false;}
        /// <summary>
        /// Returns a regular expression based on the given value and matching options. This is used internally for finding and filtering,
        /// and by Ext.data.Store#filter
        /// @private
        /// @param {String} value The value to create the regex for. This is escaped using Ext.escapeRe
        /// @param {Boolean} anyMatch True to allow any match - no regex start/end line anchors will be added. Defaults to false
        /// @param {Boolean} caseSensitive True to make the regex case sensitive (adds 'i' switch to regex). Defaults to false.
        /// @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false. Ignored if anyMatch is true.
        /// </summary>
        public void createValueMatcher(JsString value, bool anyMatch, bool caseSensitive, bool exactMatch){}
        /// <summary>
        /// Executes the specified function once for every item in the collection, passing the following arguments:
        /// <div class="mdetail-params"><ul>
        /// <li><b>item</b> : Mixed<p class="sub-desc">The collection item</p></li>
        /// <li><b>index</b> : Number<p class="sub-desc">The item's index</p></li>
        /// <li><b>length</b> : Number<p class="sub-desc">The total number of items in the collection</p></li>
        /// </ul></div>
        /// The function should return a boolean value. Returning false from the function will stop the iteration.
        /// @param {Function} fn The function to execute for each item.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current item in the iteration.
        /// </summary>
        public void each(JsAction fn, object scope){}
        /// <summary>
        /// Executes the specified function once for every key in the collection, passing each
        /// key, and its associated item as the first two parameters.
        /// @param {Function} fn The function to execute for each item.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the browser window.
        /// </summary>
        public void eachKey(JsAction fn, object scope){}
        /// <summary>
        /// @private
        /// Extracts all of the given property values from the items in the MC. Mainly used as a supporting method for
        /// functions like sum and collect.
        /// @param {String} property The property to extract
        /// @param {String} root Optional 'root' property to extract the first argument from. This is used mainly when
        /// extracting field data from Model instances, where the fields are stored inside the 'data' object
        /// @return {Array} The extracted values
        /// </summary>
        public JsArray extractValues(JsString property, JsString root){return null;}
        /// <summary>
        /// <p>Filters the objects in this collection by a set of {@link Ext.util.Filter Filter}s, or by a single
        /// property/value pair with optional parameters for substring matching and case sensitivity. See
        /// {@link Ext.util.Filter Filter} for an example of using Filter objects (preferred). Alternatively,
        /// MixedCollection can be easily filtered by property like this:</p>
        /// <pre><code>
        /// //create a simple store with a few people defined
        /// var people = new Ext.util.MixedCollection();
        /// people.addAll([
        /// {id: 1, age: 25, name: 'Ed'},
        /// {id: 2, age: 24, name: 'Tommy'},
        /// {id: 3, age: 24, name: 'Arne'},
        /// {id: 4, age: 26, name: 'Aaron'}
        /// ]);
        /// //a new MixedCollection containing only the items where age == 24
        /// var middleAged = people.filter('age', 24);
        /// </code></pre>
        /// *
        /// *
        /// @param {Ext.util.Filter[]/String} property A property on your objects, or an array of {@link Ext.util.Filter Filter} objects
        /// @param {String/RegExp} value Either string that the property values
        /// should start with or a RegExp to test against the property
        /// @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
        /// @param {Boolean} caseSensitive (optional) True for case sensitive comparison (defaults to False).
        /// @return {Ext.util.MixedCollection} The new filtered collection
        /// </summary>
        public MixedCollection filter(object property, object value, bool anyMatch, bool caseSensitive){return null;}
        /// <summary>
        /// Filter by a function. Returns a <i>new</i> collection that has been filtered.
        /// The passed function will be called with each object in the collection.
        /// If the function returns true, the value is included otherwise it is filtered.
        /// @param {Function} fn The function to be called, it will receive the args o (the object), k (the key)
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this MixedCollection.
        /// @return {Ext.util.MixedCollection} The new filtered collection
        /// </summary>
        public MixedCollection filterBy(JsAction fn, object scope){return null;}
        /// <summary>
        /// Returns the first item in the collection which elicits a true return value from the
        /// passed selection function.
        /// @param {Function} fn The selection function to execute for each item.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the browser window.
        /// @return {Object} The first item in the collection which returned true from the selection function.
        /// </summary>
        public object findBy(JsAction fn, object scope){return null;}
        /// <summary>
        /// Finds the index of the first matching object in this collection by a specific property/value.
        /// @param {String} property The name of a property on your objects.
        /// @param {String/RegExp} value A string that the property values
        /// should start with or a RegExp to test against the property.
        /// @param {Number} start (optional) The index to start searching at (defaults to 0).
        /// @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning.
        /// @param {Boolean} caseSensitive (optional) True for case sensitive comparison.
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber findIndex(JsString property, object value, JsNumber start, bool anyMatch, bool caseSensitive){return null;}
        /// <summary>
        /// Find the index of the first matching object in this collection by a function.
        /// If the function returns <i>true</i> it is considered a match.
        /// @param {Function} fn The function to be called, it will receive the args o (the object), k (the key).
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this MixedCollection.
        /// @param {Number} start (optional) The index to start searching at (defaults to 0).
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber findIndexBy(JsAction fn, object scope, JsNumber start){return null;}
        /// <summary>
        /// Returns the first item in the collection.
        /// @return {Object} the first item in the collection..
        /// </summary>
        public object first(){return null;}
        /// <summary>
        /// Returns the item associated with the passed key OR index.
        /// Key has priority over index.  This is the equivalent
        /// of calling {@link #getByKey} first, then if nothing matched calling {@link #getAt}.
        /// @param {String/Number} key The key or index of the item.
        /// @return {Object} If the item is found, returns the item.  If the item was not found, returns <tt>undefined</tt>.
        /// If an item was found, but is a Class, returns <tt>null</tt>.
        /// </summary>
        public object get(object key){return null;}
        /// <summary>
        /// Returns the item at the specified index.
        /// @param {Number} index The index of the item.
        /// @return {Object} The item at the specified index.
        /// </summary>
        public object getAt(JsNumber index){return null;}
        /// <summary>
        /// Returns the item associated with the passed key.
        /// @param {String/Number} key The key of the item.
        /// @return {Object} The item associated with the passed key.
        /// </summary>
        public object getByKey(object key){return null;}
        /// <summary>
        /// Returns the number of items in the collection.
        /// @return {Number} the number of items in the collection.
        /// </summary>
        public JsNumber getCount(){return null;}
        /// <summary>
        /// MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
        /// simply returns <b><code>item.id</code></b> but you can provide your own implementation
        /// to return a different value as in the following examples:<pre><code>
        /// // normal way
        /// var mc = new Ext.util.MixedCollection();
        /// mc.add(someEl.dom.id, someEl);
        /// mc.add(otherEl.dom.id, otherEl);
        /// //and so on
        /// // using getKey
        /// var mc = new Ext.util.MixedCollection();
        /// mc.getKey = function(el){
        /// return el.dom.id;
        /// };
        /// mc.add(someEl);
        /// mc.add(otherEl);
        /// // or via the constructor
        /// var mc = new Ext.util.MixedCollection(false, function(el){
        /// return el.dom.id;
        /// });
        /// mc.add(someEl);
        /// mc.add(otherEl);
        /// </code></pre>
        /// @param {Object} item The item for which to find the key.
        /// @return {Object} The key for the passed item.
        /// </summary>
        public object getKey(object o){return null;}
        /// <summary>
        /// Returns a range of items in this collection
        /// @param {Number} startIndex (optional) The starting index. Defaults to 0.
        /// @param {Number} endIndex (optional) The ending index. Defaults to the last item.
        /// @return {Array} An array of items
        /// </summary>
        public JsArray getRange(JsNumber start, JsNumber end){return null;}
        /// <summary>
        /// Returns index within the collection of the passed Object.
        /// @param {Object} o The item to find the index of.
        /// @return {Number} index of the item. Returns -1 if not found.
        /// </summary>
        public JsNumber indexOf(object o){return null;}
        /// <summary>
        /// Returns index within the collection of the passed key.
        /// @param {String} key The key to find the index of.
        /// @return {Number} index of the key.
        /// </summary>
        public JsNumber indexOfKey(JsString key){return null;}
        /// <summary>
        /// Inserts an item at the specified index in the collection. Fires the {@link #add} event when complete.
        /// @param {Number} index The index to insert the item at.
        /// @param {String} key The key to associate with the new item, or the item itself.
        /// @param {Object} o (optional) If the second parameter was a key, the new item.
        /// @return {Object} The item inserted.
        /// </summary>
        public object insert(JsNumber index, JsString key, object obj){return null;}
        /// <summary>
        /// Returns the last item in the collection.
        /// @return {Object} the last item in the collection..
        /// </summary>
        public object last(){return null;}
        /// <summary>
        /// Remove an item from the collection.
        /// @param {Object} o The item to remove.
        /// @return {Object} The item removed or false if no item was removed.
        /// </summary>
        public object remove(object o){return null;}
        /// <summary>
        /// Remove all items in the passed array from the collection.
        /// @param {Array} items An array of items to be removed.
        /// @return {Ext.util.MixedCollection} this object
        /// </summary>
        public MixedCollection removeAll(JsArray items){return null;}
        /// <summary>
        /// Remove an item from a specified index in the collection. Fires the {@link #remove} event when complete.
        /// @param {Number} index The index within the collection of the item to remove.
        /// @return {Object} The item removed or false if no item was removed.
        /// </summary>
        public object removeAt(JsNumber index){return null;}
        /// <summary>
        /// Removed an item associated with the passed key fom the collection.
        /// @param {String} key The key of the item to remove.
        /// @return {Object} The item removed or false if no item was removed.
        /// </summary>
        public object removeAtKey(JsString key){return null;}
        /// <summary>
        /// Replaces an item in the collection. Fires the {@link #replace} event when complete.
        /// @param {String} key <p>The key associated with the item to replace, or the replacement item.</p>
        /// <p>If you supplied a {@link #getKey} implementation for this MixedCollection, or if the key
        /// of your stored items is in a property called <tt><b>id</b></tt>, then the MixedCollection
        /// will be able to <i>derive</i> the key of the replacement item. If you want to replace an item
        /// with one having the same key value, then just pass the replacement item in this parameter.</p>
        /// @param o {Object} o (optional) If the first parameter passed was a key, the item to associate
        /// with that key.
        /// @return {Object}  The new item.
        /// </summary>
        public object replace(JsString key, object o){return null;}
        /// <summary>
        /// Collects all of the values of the given property and returns their sum
        /// @param {String} property The property to sum by
        /// @param {String} root Optional 'root' property to extract the first argument from. This is used mainly when
        /// summing fields in records, where the fields are all stored inside the 'data' object
        /// @param {Number} start (optional) The record index to start at (defaults to <tt>0</tt>)
        /// @param {Number} end (optional) The record index to end at (defaults to <tt>-1</tt>)
        /// @return {Number} The total
        /// </summary>
        public JsNumber sum(JsString property, JsString root, JsNumber start, JsNumber end){return null;}
        /// <summary>
        /// @cfg {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
        /// function should add function references to the collection. Defaults to
        /// <tt>false</tt>.
        /// </summary>
        public bool allowFunctions{get;set;}
        /// <summary>
        /// Returns the number of items in the collection.
        /// @return {Number} the number of items in the collection.
        /// </summary>
        [JsProperty]
        public JsNumber Count{[JsMethod(Name="getCount")]get;private set;}
    }
    #endregion
    #region AbstractMixedCollectionConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractMixedCollectionConfig
    {
        public AbstractMixedCollectionConfig(){}
        /// <summary>
        /// Specify <tt>true</tt> if the {@link #addAll}
        /// function should add function references to the collection. Defaults to
        /// <tt>false</tt>.
        /// </summary>
        public bool allowFunctions{get;set;}
    }
    #endregion
    #region Bindable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Bindable
    {
        public Bindable(){}
        /// <summary>
        /// Binds a store to this instance.
        /// @param {Ext.data.AbstractStore} store The store to bind (may be null to unbind the existing store).
        /// @param {Boolean} initial (Optional) true to not remove listeners
        /// </summary>
        public void bindStore(AbstractStore store, bool initial){}
        /// <summary>
        /// Binds listeners for this component to the store. By default it will add
        /// anything bound by the getStoreListeners method, however it can be overridden
        /// in a subclass to provide any more complicated handling.
        /// @protected
        /// @param {Ext.data.AbstractStore} store The store to bind to
        /// </summary>
        public void bindStoreListeners(AbstractStore store){}
        /// <summary>
        /// Gets the current store instance.
        /// @return {Ext.data.AbstractStore} The store, null if one does not exist.
        /// </summary>
        public AbstractStore getStore(){return null;}
        /// <summary>
        /// Unbinds listeners from this component to the store. By default it will remove
        /// anything bound by the bindStoreListeners method, however it can be overridden
        /// in a subclass to provide any more complicated handling.
        /// @protected
        /// @param {Ext.data.AbstractStore} store The store to unbind from
        /// </summary>
        public void unbindStoreListeners(AbstractStore store){}
        /// <summary>
        /// Gets the current store instance.
        /// @return {Ext.data.AbstractStore} The store, null if one does not exist.
        /// </summary>
        [JsProperty]
        public AbstractStore Store{[JsMethod(Name="getStore")]get;private set;}
    }
    #endregion
    #region Date
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Date
    {
        public Date(){}
    }
    #endregion
    #region DelayedTask
    /// <summary>
    /// The DelayedTask class provides a convenient way to "buffer" the execution of a method,
    /// performing setTimeout where a new timeout cancels the old timeout. When called, the
    /// task will wait the specified time period before executing. If durng that time period,
    /// the task is called again, the original call will be cancelled. This continues so that
    /// the function is only called a single time for each iteration.
    /// *
    /// This method is especially useful for things like detecting whether a user has finished
    /// typing in a text field. An example would be performing validation on a keypress. You can
    /// use this class to buffer the keypress events for a certain number of milliseconds, and
    /// perform only if they stop for that amount of time.  Usage:
    /// *
    /// var task = new Ext.util.DelayedTask(function(){
    /// alert(Ext.getDom('myInputField').value.length);
    /// });
    /// // Wait 500ms before calling our function. If the user presses another key
    /// // during that 500ms, it will be cancelled and we'll wait another 500ms.
    /// Ext.get('myInputField').on('keypress', function(){
    /// task.{@link #delay}(500);
    /// });
    /// *
    /// Note that we are using a DelayedTask here to illustrate a point. The configuration
    /// option `buffer` for {@link Ext.util.Observable#addListener addListener/on} will
    /// also setup a delayed task for you to buffer events.
    /// *
    /// @constructor
    /// The parameters to this constructor serve as defaults and are not required.
    /// @param {Function} [fn] The default function to call.
    /// @param {Object} [scope] The default scope (The `this` reference) in which the
    /// function is called. If not specified, `this` will refer to the browser window.
    /// @param {Array} [args] The default Array of arguments.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DelayedTask
    {
        public DelayedTask(){}
        /// <summary>
        /// The DelayedTask class provides a convenient way to "buffer" the execution of a method,
        /// performing setTimeout where a new timeout cancels the old timeout. When called, the
        /// task will wait the specified time period before executing. If durng that time period,
        /// the task is called again, the original call will be cancelled. This continues so that
        /// the function is only called a single time for each iteration.
        /// *
        /// This method is especially useful for things like detecting whether a user has finished
        /// typing in a text field. An example would be performing validation on a keypress. You can
        /// use this class to buffer the keypress events for a certain number of milliseconds, and
        /// perform only if they stop for that amount of time.  Usage:
        /// *
        /// var task = new Ext.util.DelayedTask(function(){
        /// alert(Ext.getDom('myInputField').value.length);
        /// });
        /// // Wait 500ms before calling our function. If the user presses another key
        /// // during that 500ms, it will be cancelled and we'll wait another 500ms.
        /// Ext.get('myInputField').on('keypress', function(){
        /// task.{@link #delay}(500);
        /// });
        /// *
        /// Note that we are using a DelayedTask here to illustrate a point. The configuration
        /// option `buffer` for {@link Ext.util.Observable#addListener addListener/on} will
        /// also setup a delayed task for you to buffer events.
        /// *
        /// @constructor
        /// The parameters to this constructor serve as defaults and are not required.
        /// @param {Function} [fn] The default function to call.
        /// @param {Object} [scope] The default scope (The `this` reference) in which the
        /// function is called. If not specified, `this` will refer to the browser window.
        /// @param {Array} [args] The default Array of arguments.
        /// </summary>
        public DelayedTask(JsAction fn, object scope, JsArray args){}
    }
    #endregion
    #region Draggable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Draggable
    {
        public Draggable(){}
        public Draggable(DraggableConfig config){}
        public void applyConstraint(object newConstraint, object currentConstraint){}
        public void applyContainerConstraint(object newConstraint, object currentConstraint){}
        public void applyElement(object element){}
        public void applyInitialOffset(object offset){}
        public void applyOffset(object offset, object oldOffset){}
        public void applyTranslateMethod(object method){}
        /// <summary>
        /// Creates new Draggable.
        /// @param {Mixed} el The element you want to make draggable.
        /// @param {Object} config The configuration object for this Draggable.
        /// </summary>
        public Draggable(object config){}
        public void destroy(){}
        public void detachListeners(){}
        /// <summary>
        /// Disable the Draggable.
        /// @return {Ext.util.Draggable} This Draggable instance
        /// </summary>
        public Ext.util.Draggable disable(){return null;}
        public void doRefresh(){}
        /// <summary>
        /// Enable the Draggable.
        /// @return {Ext.util.Draggable} This Draggable instance
        /// </summary>
        public Ext.util.Draggable enable(){return null;}
        public void getContainer(){}
        public void getNumberValue(object value){}
        public void initDragStart(object me, object e, object startOffset){}
        public void isAxisEnabled(object axis){}
        public void moveTo(object x, object y){}
        public void onDrag(object e){}
        public void onDragEnd(object e){}
        public void onDragStart(object e){}
        public void refresh(){}
        public void refreshConstraint(){}
        public void refreshOffset(){}
        public void translateWithCssPosition(object x, object y){}
        public void translateWithCssTransform(object x, object y){}
        public void updateDirection(object direction){}
        public void updateElement(object element){}
        public void updateOffset(object offset, object oldOffset){}
        public void updateTranslateMethod(object newMethod, object oldMethod){}
        public JsString CSS_POSITION{get;set;}
        public JsString CSS_TRANSFORM{get;set;}
        public JsString DIRECTION_BOTH{get;set;}
        public JsString DIRECTION_HORIZONTAL{get;set;}
        public JsString DIRECTION_VERTICAL{get;set;}
        /// <summary>
        /// A core util class to bring Draggable behavior to any DOM element,
        /// acts as a base class for Scroller and Sortable.
        /// </summary>
        public bool isDraggable{get;set;}
    }
    #endregion
    #region DraggableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DraggableConfig
    {
        public DraggableConfig(){}
        /// <summary>
        /// A simple CSS selector that represents elements within the draggable
        /// that should NOT initiate a drag.
        /// @accessor
        /// </summary>
        public JsString cancelSelector{get;set;}
        /// <summary>
        /// How many milliseconds a user must hold the draggable before starting a
        /// drag operation.
        /// @accessor
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// Possible values: 'vertical', 'horizontal', or 'both'
        /// @accessor
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting.
        /// @accessor
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// Whether or not the element or it's proxy will be reverted back (with animation)
        /// when it's not dropped and held by a Droppable
        /// @accessor
        /// </summary>
        public bool revert{get;set;}
    }
    #endregion
    #region Droppable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Droppable
    {
        public Droppable(){}
        public Droppable(DroppableConfig config){}
        /// <summary>
        /// Creates new Droppable.
        /// @param {Mixed} el String, HtmlElement or Ext.Element representing an
        /// element on the page.
        /// @param {Object} config Configuration options for this class.
        /// </summary>
        public Droppable(object el, object config){}
        /// <summary>
        /// Disable the Droppable target.
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enable the Droppable target.
        /// This is invoked immediately after constructing a Droppable if the
        /// disabled parameter is NOT set to true.
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Method to determine whether this Component is currently disabled.
        /// @return {Boolean} the disabled state of this Component.
        /// </summary>
        public bool isDisabled(){return false;}
        public void isDragOver(object draggable, object region){}
        /// <summary>
        /// Method to determine whether this Droppable is currently monitoring drag operations of Draggables.
        /// @return {Boolean} the monitoring state of this Droppable
        /// </summary>
        public bool isMonitoring(){return false;}
        public void onBeforeDragEnd(object draggable, object e){}
        public void onDrag(object draggable, object e){}
        public void onDragEnd(object draggable, object e){}
        public void onDragStart(object draggable, object e){}
        public void setCanDrop(object canDrop, object draggable, object e){}
        /// <summary>
        /// @cfg {Boolean} disabled
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// @cfg {String} group
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting.
        /// </summary>
        public JsString group{get;set;}
        public bool monitoring{get;set;}
        public object tolerance{get;set;}
        /// <summary>
        /// @cfg {String} validDropMode
        /// Determines when a drop is considered 'valid' whether it simply need to
        /// intersect the region or if it needs to be contained within the region.
        /// Valid values are: 'intersects' or 'contains'
        /// </summary>
        public JsString validDropMode{get;set;}
    }
    #endregion
    #region DroppableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DroppableConfig
    {
        public DroppableConfig(){}
        /// <summary>
        /// The CSS added to a Droppable when a Draggable in the same group is being
        /// dragged.
        /// </summary>
        public JsString activeCls{get;set;}
        /// <summary>
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting.
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// The CSS class to add to the droppable when hovering over a valid drop.
        /// </summary>
        public JsString hoverCls{get;set;}
        /// <summary>
        /// The CSS class to add to the droppable when dragging a draggable that is
        /// not in the same group.
        /// </summary>
        public JsString invalidCls{get;set;}
        /// <summary>
        /// Determines when a drop is considered 'valid' whether it simply need to
        /// intersect the region or if it needs to be contained within the region.
        /// Valid values are: 'intersects' or 'contains'
        /// </summary>
        public JsString validDropMode{get;set;}
    }
    #endregion
    #region Filter
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Filter
    {
        public Filter(){}
        public Filter(FilterConfig config){}
        /// <summary>
        /// Creates new Filter.
        /// @param {Object} config Config object
        /// </summary>
        public Filter(object config){}
        /// <summary>
        /// @private
        /// Creates a filter function for the configured property/value/anyMatch/caseSensitive options for this Filter
        /// </summary>
        public void createFilterFn(){}
        /// <summary>
        /// @private
        /// Returns a regular expression based on the given value and matching options
        /// </summary>
        public void createValueMatcher(){}
        /// <summary>
        /// @private
        /// Returns the root property of the given item, based on the configured {@link #root} property
        /// @param {Object} item The item
        /// @return {Object} The root property of the object
        /// </summary>
        public object getRoot(object item){return null;}
        /// <summary>
        /// @cfg {Boolean} anyMatch True to allow any match - no regex start/end line anchors will be added.
        /// </summary>
        public bool anyMatch{get;set;}
        /// <summary>
        /// @cfg {Boolean} caseSensitive True to make the regex case sensitive (adds 'i' switch to regex).
        /// </summary>
        public bool caseSensitive{get;set;}
        /// <summary>
        /// @cfg {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex).
        /// Ignored if anyMatch is true.
        /// </summary>
        public bool exactMatch{get;set;}
    }
    #endregion
    #region FilterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FilterConfig
    {
        public FilterConfig(){}
        /// <summary>
        /// True to allow any match - no regex start/end line anchors will be added.
        /// </summary>
        public bool anyMatch{get;set;}
        /// <summary>
        /// True to make the regex case sensitive (adds 'i' switch to regex).
        /// </summary>
        public bool caseSensitive{get;set;}
        /// <summary>
        /// True to force exact match (^ and $ characters added to the regex).
        /// Ignored if anyMatch is true.
        /// </summary>
        public bool exactMatch{get;set;}
        /// <summary>
        /// A custom filter function which is passed each item in the {@link Ext.util.MixedCollection}
        /// in turn. Should return true to accept each item or false to reject it
        /// </summary>
        public JsAction filterFn{get;set;}
        /// <summary>
        /// The property to filter on. Required unless a `filter` is passed
        /// </summary>
        public JsString property{get;set;}
        /// <summary>
        /// Optional root property. This is mostly useful when filtering a Store, in which case we set the
        /// root to 'data' to make the filter pull the {@link #property} out of the data object of each item
        /// </summary>
        public JsString root{get;set;}
    }
    #endregion
    #region Format
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Format
    {
        public Format(){}
        /// <summary>
        /// Parse a value into a formatted date using the specified format pattern.
        /// @param {String/Date} value The value to format (Strings must conform to the format expected by the javascript
        /// Date object's <a href="http://www.w3schools.com/jsref/jsref_parse.asp">parse()</a> method)
        /// @param {String} format (optional) Any valid date format string (defaults to 'm/d/Y')
        /// @return {String} The formatted date string
        /// </summary>
        public JsString date(object v, JsString format){return null;}
        /// <summary>
        /// Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
        /// @param {String} value The string to truncate
        /// @param {Number} length The maximum length to allow before truncating
        /// @param {Boolean} word True to try to find a common word break
        /// @return {String} The converted text
        /// </summary>
        public JsString ellipsis(JsString value, JsNumber len, bool word){return null;}
        /// <summary>
        /// Escapes the passed string for ' and \
        /// @param {String} string The string to escape
        /// @return {String} The escaped string
        /// </summary>
        public JsString escape(JsString @string){return null;}
        /// <summary>
        /// Escapes the passed string for use in a regular expression
        /// @param {String} str
        /// @return {String}
        /// </summary>
        public void escapeRegex(JsString s){}
        /// <summary>
        /// Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
        /// token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
        /// <pre><code>
        /// var cls = 'my-class', text = 'Some text';
        /// var s = Ext.util.Format.format('&lt;div class="{0}">{1}&lt;/div>', cls, text);
        /// // s now contains the string: '&lt;div class="my-class">Some text&lt;/div>'
        /// </code></pre>
        /// @param {String} string The tokenized string to be formatted
        /// @param {String...} values The values to replace token {0}, {1}, etc
        /// @return {String} The formatted string
        /// </summary>
        public JsString format(JsString format){return null;}
        /// <summary>
        /// Convert certain characters (&, <, >, and ') from their HTML character equivalents.
        /// @param {String} value The string to decode
        /// @return {String} The decoded text
        /// </summary>
        public JsString htmlDecode(JsString value){return null;}
        /// <summary>
        /// Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.
        /// @param {String} value The string to encode
        /// @return {String} The encoded text
        /// </summary>
        public JsString htmlEncode(JsString value){return null;}
        /// <summary>
        /// Pads the left side of a string with a specified character.  This is especially useful
        /// for normalizing number and date strings.  Example usage:
        /// *
        /// <pre><code>
        /// var s = Ext.util.Format.leftPad('123', 5, '0');
        /// // s now contains the string: '00123'
        /// </code></pre>
        /// @param {String} string The original string
        /// @param {Number} size The total length of the output string
        /// @param {String} char (optional) The character with which to pad the original string (defaults to empty string " ")
        /// @return {String} The padded string
        /// </summary>
        public JsString leftPad(JsString val, JsNumber size, JsString ch){return null;}
        /// <summary>
        /// Utility function that allows you to easily switch a string between two alternating values.  The passed value
        /// is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
        /// they are already different, the first value passed in is returned.  Note that this method returns the new value
        /// but does not change the current string.
        /// <pre><code>
        /// // alternate sort directions
        /// sort = Ext.util.Format.toggle(sort, 'ASC', 'DESC');
        /// // instead of conditional logic:
        /// sort = (sort == 'ASC' ? 'DESC' : 'ASC');
        /// </code></pre>
        /// @param {String} string The current string
        /// @param {String} value The value to compare to the current string
        /// @param {String} other The new value to use if the string already equals the first value passed in
        /// @return {String} The new value
        /// </summary>
        public JsString toggle(JsString @string, JsString value, JsString other){return null;}
        /// <summary>
        /// Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
        /// <pre><code>
        /// var s = '  foo bar  ';
        /// alert('-' + s + '-');         //alerts "- foo bar -"
        /// alert('-' + Ext.util.Format.trim(s) + '-');  //alerts "-foo bar-"
        /// </code></pre>
        /// @param {String} string The string to escape
        /// @return {String} The trimmed string
        /// </summary>
        public JsString trim(JsString @string){return null;}
        /// <summary>
        /// Reusable data formatting functions
        /// </summary>
        public JsString defaultDateFormat{get;set;}
        public JsRegExp escapeRe{get;set;}
        public JsRegExp escapeRegexRe{get;set;}
        public JsRegExp formatRe{get;set;}
        /// <summary>
        /// Reusable data formatting functions
        /// </summary>
        public bool singleton{get;set;}
        public JsRegExp trimRe{get;set;}
    }
    #endregion
    #region GeoLocation
    [JsType(JsMode.Prototype, Export=false)]
    public partial class GeoLocation
    {
        public GeoLocation(){}
        public GeoLocation(GeoLocationConfig config){}
        public GeoLocation(object config){}
        public void fireError(object error){}
        public void fireUpdate(object position){}
        /// <summary>
        /// @private
        /// Returns cached coordinates, and updates if there are no cached coords yet.
        /// @deprecated
        /// </summary>
        public void getLocation(object callback, object scope){}
        public void parseOptions(){}
        /// <summary>
        /// Changes the {@link #allowHighAccuracy} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} allowHighAccuracy The value to set the allowHighAccuracy option to.
        /// </summary>
        public void setAllowHighAccuracy(JsNumber allowHighAccuracy){}
        /// <summary>
        /// Enabled/disables the auto-retrieval of the location information.<br/>
        /// If called with autoUpdate=true, it will execute an immediate location update
        /// and continue monitoring for location updates.<br/>
        /// If autoUpdate=false, any current location change monitoring will be disabled.
        /// A {@link #locationerror} event is fired if the location cannot be determined due
        /// di an error supporting geolocation.
        /// @param {Boolean} autoUpdate Whether to start/stop location monitoring.
        /// @return {Boolean} If enabling autoUpdate, returns false if the location tracking
        /// cannot begin due to an error supporting geolocation.
        /// </summary>
        public bool setAutoUpdate(bool autoUpdate){return false;}
        /// <summary>
        /// Changes the {@link #maximumAge} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} maximumAge The value to set the maximumAge option to.
        /// </summary>
        public void setMaximumAge(JsNumber maximumAge){}
        /// <summary>
        /// Changes the {@link #timeout} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} timeout The value to set the timeout option to.
        /// </summary>
        public void setTimeout(JsNumber timeout){}
        /// <summary>
        /// Executes a onetime location update operation,
        /// raising either a {@link #locationupdate} or {@link #locationerror} event.<br/>
        /// Does not interfere with or restart ongoing location monitoring.
        /// @param {Function} callback
        /// A callback method to be called when the location retrieval has been completed.<br/>
        /// Will be called on both success and failure.<br/>
        /// The method will be passed one parameter, {@link Ext.util.GeoLocation} (<b>this</b> reference),
        /// set to null on failure.
        /// <pre><code>
        /// geo.updateLocation(function (geo) {
        /// alert('Latitude: ' + (geo != null ? geo.latitude : 'failed'));
        /// });
        /// </code></pre>
        /// @param {Object} scope (optional)
        /// (optional) The scope (<b>this</b> reference) in which the handler function is executed.
        /// <b>If omitted, defaults to the object which fired the event.</b>
        /// <!--positonOptions undocumented param, see W3C spec-->
        /// </summary>
        public void updateLocation(JsAction callback, object scope, object positionOptions){}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// accuracy level of the latitude and longitude coordinates,
        /// specified in meters.<br/>
        /// This will always be a non-negative number.<br/>
        /// This corresponds to a 95% confidence level.
        /// @type Number
        /// </summary>
        public object accuracy{get;set;}
        /// <summary>
        /// @cfg {Boolean} allowHighAccuracy
        /// When set to true, provide a hint that the application would like to receive
        /// the best possible results. This may result in slower response times or increased power consumption.
        /// The user might also deny this capability, or the device might not be able to provide more accurate
        /// results than if this option was set to false.
        /// </summary>
        public bool allowHighAccuracy{get;set;}
        /// <summary>
        /// Changes the {@link #allowHighAccuracy} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} allowHighAccuracy The value to set the allowHighAccuracy option to.
        /// </summary>
        [JsProperty]
        public JsNumber AllowHighAccuracy{private get;[JsMethod(Name="setAllowHighAccuracy")]set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// height of the position, specified in meters above the ellipsoid
        /// <a href="http://dev.w3.org/geo/api/spec-source.html#ref-wgs">[WGS84]</a>.
        /// @type Number
        /// </summary>
        public object altitude{get;set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// accuracy level of the altitude coordinate, specified in meters.<br/>
        /// If altitude is not null then this will be a non-negative number.
        /// Otherwise this returns null.<br/>
        /// This corresponds to a 95% confidence level.
        /// @type Number
        /// </summary>
        public object altitudeAccuracy{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoUpdate
        /// When set to true, continually monitor the location of the device (beginning immediately)
        /// and fire {@link #locationupdate}/{@link #locationerror} events.
        /// When using google gears, if the user denies access or another error occurs, this will be reset to false.
        /// </summary>
        public bool autoUpdate{get;set;}
        /// <summary>
        /// Enabled/disables the auto-retrieval of the location information.<br/>
        /// If called with autoUpdate=true, it will execute an immediate location update
        /// and continue monitoring for location updates.<br/>
        /// If autoUpdate=false, any current location change monitoring will be disabled.
        /// A {@link #locationerror} event is fired if the location cannot be determined due
        /// di an error supporting geolocation.
        /// @param {Boolean} autoUpdate Whether to start/stop location monitoring.
        /// @return {Boolean} If enabling autoUpdate, returns false if the location tracking
        /// cannot begin due to an error supporting geolocation.
        /// </summary>
        [JsProperty]
        public bool AutoUpdate{private get;[JsMethod(Name="setAutoUpdate")]set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// direction of travel of the hosting device,
        /// specified in non-negative degrees between 0 and 359,
        /// counting clockwise relative to the true north.<br/>
        /// If speed is 0 (device is stationary), then this returns NaN
        /// @type Number
        /// </summary>
        public object heading{get;set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// geographical coordinate specified in degrees.
        /// @type Number
        /// </summary>
        public object latitude{get;set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// geographical coordinate specified in degrees.
        /// @type Number
        /// </summary>
        public object longitude{get;set;}
        /// <summary>
        /// @cfg {Number} maximumAge
        /// This option indicates that the application is willing to accept cached location information whose age
        /// is no greater than the specified time in milliseconds. If maximumAge is set to 0, an attempt to retrieve
        /// new location information is made immediately.<br/>
        /// Setting the maximumAge to Infinity returns a cached position regardless of its age.<br/>
        /// If the device does not have cached location information available whose age is no
        /// greater than the specified maximumAge, then it must acquire new location information.<br/>
        /// For example, if location information no older than 10 minutes is required, set this property to 600000.
        /// </summary>
        public JsNumber maximumAge{get;set;}
        /// <summary>
        /// Changes the {@link #maximumAge} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} maximumAge The value to set the maximumAge option to.
        /// </summary>
        [JsProperty]
        public JsNumber MaximumAge{private get;[JsMethod(Name="setMaximumAge")]set;}
        public object provider{get;set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// current ground speed of the device, specified in meters per second.<br/>
        /// If this feature is unsupported by the device, this returns null.<br/>
        /// If the device is stationary, this returns 0,
        /// otherwise it returns a non-negative number.
        /// @type Number
        /// </summary>
        public object speed{get;set;}
        /// <summary>
        /// Changes the {@link #timeout} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} timeout The value to set the timeout option to.
        /// </summary>
        [JsProperty]
        public JsNumber Timeout{private get;[JsMethod(Name="setTimeout")]set;}
        /// <summary>
        /// Read-only property representing when the last retrieved
        /// positioning information was acquired by the device.
        /// @type Date
        /// </summary>
        public object timestamp{get;set;}
        public object watchOperation{get;set;}
    }
    #endregion
    #region GeoLocationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class GeoLocationConfig
    {
        public GeoLocationConfig(){}
        /// <summary>
        /// When set to true, provide a hint that the application would like to receive
        /// the best possible results. This may result in slower response times or increased power consumption.
        /// The user might also deny this capability, or the device might not be able to provide more accurate
        /// results than if this option was set to false.
        /// </summary>
        public bool allowHighAccuracy{get;set;}
        /// <summary>
        /// When set to true, continually monitor the location of the device (beginning immediately)
        /// and fire {@link #locationupdate}/{@link #locationerror} events.
        /// When using google gears, if the user denies access or another error occurs, this will be reset to false.
        /// </summary>
        public bool autoUpdate{get;set;}
        /// <summary>
        /// This option indicates that the application is willing to accept cached location information whose age
        /// is no greater than the specified time in milliseconds. If maximumAge is set to 0, an attempt to retrieve
        /// new location information is made immediately.<br/>
        /// Setting the maximumAge to Infinity returns a cached position regardless of its age.<br/>
        /// If the device does not have cached location information available whose age is no
        /// greater than the specified maximumAge, then it must acquire new location information.<br/>
        /// For example, if location information no older than 10 minutes is required, set this property to 600000.
        /// </summary>
        public JsNumber maximumAge{get;set;}
        /// <summary>
        /// The maximum number of milliseconds allowed to elapse between a location update operation
        /// and the corresponding {@link #locationupdate} event being raised.  If a location was not successfully
        /// acquired before the given timeout elapses (and no other internal errors have occurred in this interval),
        /// then a {@link #locationerror} event will be raised indicating a timeout as the cause.<br/>
        /// Note that the time that is spent obtaining the user permission is <b>not</b> included in the period
        /// covered by the timeout.  The timeout attribute only applies to the location acquisition operation.<br/>
        /// In the case of calling updateLocation, the {@link #locationerror} event will be raised only once.<br/>
        /// If {@link #autoUpdate} is set to true, the {@link #locationerror} event could be raised repeatedly.
        /// The first timeout is relative to the moment {@link #autoUpdate} was set to true
        /// (or this {@link Ext.util.GeoLocation} was initialized with the {@link #autoUpdate} config option set to true).
        /// Subsequent timeouts are relative to the moment when the device determines that it's position has changed.
        /// </summary>
        public JsNumber timeout{get;set;}
    }
    #endregion
    #region Grouper
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Grouper
    {
        public Grouper(){}
        /// <summary>
        /// Function description
        /// @param {Ext.data.Model} instance The Model instance
        /// @return {String} The group string for this model
        /// </summary>
        public JsString getGroupString(Model instance){return null;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region HashMap
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HashMap
    {
        public HashMap(){}
        public HashMap(HashMapConfig config){}
        /// <summary>
        /// Add a new item to the hash. An exception will be thrown if the key already exists.
        /// @param {String} key The key of the new item.
        /// @param {Object} value The value of the new item.
        /// @return {Object} The value of the new item added.
        /// </summary>
        public object add(JsString key, object value){return null;}
        /// <summary>
        /// private
        /// </summary>
        public void clear(object initial){}
        /// <summary>
        /// Performs a shallow copy on this hash.
        /// @return {Ext.util.HashMap} The new hash object.
        /// </summary>
        public HashMap clone(){return null;}
        /// <summary>
        /// Creates new HashMap.
        /// @param {Object} config The configuration options
        /// </summary>
        public HashMap(object config){}
        /// <summary>
        /// Checks whether a value exists in the hash.
        /// @param {Object} value The value to check for.
        /// @return {Boolean} True if the value exists in the dictionary.
        /// </summary>
        public bool contains(object value){return false;}
        /// <summary>
        /// Checks whether a key exists in the hash.
        /// @param {String} key The key to check for.
        /// @return {Boolean} True if they key exists in the hash.
        /// </summary>
        public bool containsKey(JsString key){return false;}
        /// <summary>
        /// Executes the specified function once for each item in the hash.
        /// Returning false from the function will cease iteration.
        /// *
        /// The paramaters passed to the function are:
        /// <div class="mdetail-params"><ul>
        /// <li><b>key</b> : String<p class="sub-desc">The key of the item</p></li>
        /// <li><b>value</b> : Number<p class="sub-desc">The value of the item</p></li>
        /// <li><b>length</b> : Number<p class="sub-desc">The total number of items in the hash</p></li>
        /// </ul></div>
        /// @param {Function} fn The function to execute.
        /// @param {Object} scope The scope to execute in. Defaults to <tt>this</tt>.
        /// @return {Ext.util.HashMap} this
        /// </summary>
        public HashMap each(JsAction fn, object scope){return null;}
        /// <summary>
        /// @private
        /// Find the key for a value.
        /// @param {Object} value The value to find.
        /// @return {Object} The value of the item. Returns <tt>undefined</tt> if not found.
        /// </summary>
        public object findKey(object value){return null;}
        /// <summary>
        /// Retrieves an item with a particular key.
        /// @param {String} key The key to lookup.
        /// @return {Object} The value at that key. If it doesn't exist, <tt>undefined</tt> is returned.
        /// </summary>
        public object get(JsString key){return null;}
        /// <summary>
        /// Gets either the keys/values in an array from the hash.
        /// @private
        /// @param {Boolean} isKey True to extract the keys, otherwise, the value
        /// @return {Array} An array of either keys/values from the hash.
        /// </summary>
        public JsArray getArray(bool isKey){return null;}
        /// <summary>
        /// Gets the number of items in the hash.
        /// @return {Number} The number of items in the hash.
        /// </summary>
        public JsNumber getCount(){return null;}
        /// <summary>
        /// Implementation for being able to extract the key from an object if only
        /// a single argument is passed.
        /// @private
        /// @param {String} key The key
        /// @param {Object} value The value
        /// @return {Array} [key, value]
        /// </summary>
        public JsArray getData(JsString key, object value){return null;}
        /// <summary>
        /// Extracts the key from an object. This is a default implementation, it may be overridden
        /// @private
        /// @param {Object} o The object to get the key from
        /// @return {String} The key to use.
        /// </summary>
        public JsString getKey(object o){return null;}
        /// <summary>
        /// Return all of the keys in the hash.
        /// @return {Array} An array of keys.
        /// </summary>
        public JsArray getKeys(){return null;}
        /// <summary>
        /// Return all of the values in the hash.
        /// @return {Array} An array of values.
        /// </summary>
        public JsArray getValues(){return null;}
        /// <summary>
        /// Remove an item from the hash.
        /// @param {Object} o The value of the item to remove.
        /// @return {Boolean} True if the item was successfully removed.
        /// </summary>
        public bool remove(object o){return false;}
        /// <summary>
        /// Remove an item from the hash.
        /// @param {String} key The key to remove.
        /// @return {Boolean} True if the item was successfully removed.
        /// </summary>
        public bool removeByKey(JsString key){return false;}
        /// <summary>
        /// Replaces an item in the hash. If the key doesn't exist, the
        /// {@link #add} method will be used.
        /// @param {String} key The key of the item.
        /// @param {Object} value The new value for the item.
        /// @return {Object} The new value of the item.
        /// </summary>
        public object replace(JsString key, object value){return null;}
        /// <summary>
        /// Gets the number of items in the hash.
        /// @return {Number} The number of items in the hash.
        /// </summary>
        [JsProperty]
        public JsNumber Count{[JsMethod(Name="getCount")]get;private set;}
        /// <summary>
        /// Return all of the keys in the hash.
        /// @return {Array} An array of keys.
        /// </summary>
        [JsProperty]
        public JsArray Keys{[JsMethod(Name="getKeys")]get;private set;}
        /// <summary>
        /// Return all of the values in the hash.
        /// @return {Array} An array of values.
        /// </summary>
        [JsProperty]
        public JsArray Values{[JsMethod(Name="getValues")]get;private set;}
    }
    #endregion
    #region HashMapConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class HashMapConfig
    {
        public HashMapConfig(){}
        /// <summary>
        /// A function that is used to retrieve a default key for a passed object.
        /// A default is provided that returns the **id** property on the object.
        /// This function is only used if the add method is called with a single argument.
        /// </summary>
        public JsAction keyFn{get;set;}
    }
    #endregion
    #region Inflector
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Inflector
    {
        public Inflector(){}
        /// <summary>
        /// Returns the correct {@link Ext.data.Model Model} name for a given string. Mostly used internally by the data
        /// package
        /// @param {String} word The word to classify
        /// @return {String} The classified version of the word
        /// </summary>
        public JsString classify(JsString word){return null;}
        /// <summary>
        /// Removes all registered pluralization rules
        /// </summary>
        public void clearPlurals(){}
        /// <summary>
        /// Removes all registered singularization rules
        /// </summary>
        public void clearSingulars(){}
        /// <summary>
        /// Returns true if the given word is transnumeral (the word is its own singular and plural form - e.g. sheep, fish)
        /// @param {String} word The word to test
        /// @return {Boolean} True if the word is transnumeral
        /// </summary>
        public bool isTransnumeral(JsString word){return false;}
        /// <summary>
        /// Ordinalizes a given number by adding a prefix such as 'st', 'nd', 'rd' or 'th' based on the last digit of the
        /// number. 21 -> 21st, 22 -> 22nd, 23 -> 23rd, 24 -> 24th etc
        /// @param {Number} number The number to ordinalize
        /// @return {String} The ordinalized number
        /// </summary>
        public JsString ordinalize(JsNumber number){return null;}
        /// <summary>
        /// Adds a new pluralization rule to the Inflector. See the intro docs for more information
        /// @param {RegExp} matcher The matcher regex
        /// @param {String} replacer The replacement string, which can reference matches from the matcher argument
        /// </summary>
        public void plural(JsRegExp matcher, JsString replacer){}
        /// <summary>
        /// Returns the pluralized form of a word (e.g. Ext.util.Inflector.pluralize('word') returns 'words')
        /// @param {String} word The word to pluralize
        /// @return {String} The pluralized form of the word
        /// </summary>
        public JsString pluralize(JsString word){return null;}
        /// <summary>
        /// Adds a new singularization rule to the Inflector. See the intro docs for more information
        /// @param {RegExp} matcher The matcher regex
        /// @param {String} replacer The replacement string, which can reference matches from the matcher argument
        /// </summary>
        public void singular(JsRegExp matcher, JsString replacer){}
        /// <summary>
        /// Returns the singularized form of a word (e.g. Ext.util.Inflector.singularize('words') returns 'word')
        /// @param {String} word The word to singularize
        /// @return {String} The singularized form of the word
        /// </summary>
        public JsString singularize(JsString word){return null;}
        /// <summary>
        /// Begin Definitions
        /// </summary>
        public bool singleton{get;set;}
    }
    #endregion
    #region JSONP
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JSONP
    {
        public JSONP(){}
        public void callback(object json){}
        public void next(){}
        /// <summary>
        /// Make a cross-domain request using JSONP.
        /// @param {Object} config
        /// Valid configurations are:
        /// <ul>
        /// <li>url - {String} - Url to request data from. (required) </li>
        /// <li>params - {Object} - A set of key/value pairs to be url encoded and passed as GET parameters in the request.</li>
        /// <li>callbackKey - {String} - Key specified by the server-side provider.</li>
        /// <li>callback - {Function} - Will be passed a single argument of the result of the request.</li>
        /// <li>scope - {Scope} - Scope to execute your callback in.</li>
        /// </ul>
        /// </summary>
        public void request(object o){}
        /// <summary>
        /// Read-only current executing request
        /// @type Object
        /// </summary>
        public object current{get;set;}
        /// <summary>
        /// @class Ext.util.JSONP
        /// *
        /// Provides functionality to make cross-domain requests with JSONP (JSON with Padding).
        /// http://en.wikipedia.org/wiki/JSON#JSONP
        /// <p>
        /// <b>Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
        /// of the running page, you must use this class, because of the same origin policy.</b><br>
        /// <p>
        /// The content passed back from a server resource requested by a JSONP request<b>must</b> be executable JavaScript
        /// source code because it is used as the source inside a &lt;script> tag.<br>
        /// <p>
        /// In order for the browser to process the returned data, the server must wrap the data object
        /// with a call to a callback function, the name of which is passed as a parameter callbackKey
        /// Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
        /// depending on whether the callback name was passed:
        /// <p>
        /// <pre><code>
        /// boolean scriptTag = false;
        /// String cb = request.getParameter("callback");
        /// if (cb != null) {
        /// scriptTag = true;
        /// response.setContentType("text/javascript");
        /// } else {
        /// response.setContentType("application/x-json");
        /// }
        /// Writer out = response.getWriter();
        /// if (scriptTag) {
        /// out.write(cb + "(");
        /// }
        /// out.print(dataBlock.toJsonString());
        /// if (scriptTag) {
        /// out.write(");");
        /// }
        /// </code></pre>
        /// <p>Below is a PHP example to do the same thing:</p><pre><code>
        /// $callback = $_REQUEST['callback'];
        /// // Create the output object.
        /// $output = array('a' => 'Apple', 'b' => 'Banana');
        /// //start output
        /// if ($callback) {
        /// header('Content-Type: text/javascript');
        /// echo $callback . '(' . json_encode($output) . ');';
        /// } else {
        /// header('Content-Type: application/x-json');
        /// echo json_encode($output);
        /// }
        /// </code></pre>
        /// <p>Below is the ASP.Net code to do the same thing:</p><pre><code>
        /// String jsonString = "{success: true}";
        /// String cb = Request.Params.Get("callback");
        /// String responseString = "";
        /// if (!String.IsNullOrEmpty(cb)) {
        /// responseString = cb + "(" + jsonString + ")";
        /// } else {
        /// responseString = jsonString;
        /// }
        /// Response.Write(responseString);
        /// </code></pre>
        /// @singleton
        /// </summary>
        public bool singleton{get;set;}
    }
    #endregion
    #region MixedCollection
    [JsType(JsMode.Prototype, Export=false)]
    public partial class MixedCollection
    {
        /// <summary>
        /// @private
        /// Performs the actual sorting based on a direction and a sorting function. Internally,
        /// this creates a temporary array of all items in the MixedCollection, sorts it and then writes
        /// the sorted array data back into this.items and this.keys
        /// @param {String} property Property to sort by ('key', 'value', or 'index')
        /// @param {String} dir (optional) Direction to sort 'ASC' or 'DESC'. Defaults to 'ASC'.
        /// @param {Function} fn (optional) Comparison function that defines the sort order.
        /// Defaults to sorting by numeric value.
        /// </summary>
        public void _sort(JsString property, JsString dir, JsAction fn){}
        /// <summary>
        /// Creates new MixedCollection.
        /// @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
        /// function should add function references to the collection. Defaults to
        /// <tt>false</tt>.
        /// @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
        /// and return the key value for that item.  This is used when available to look up the key on items that
        /// were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
        /// equivalent to providing an implementation for the {@link #getKey} method.
        /// </summary>
        public MixedCollection(){}
        public void doSort(object sorterFn){}
        /// <summary>
        /// Reorders each of the items based on a mapping from old index to new index. Internally this
        /// just translates into a sort. The 'sort' event is fired whenever reordering has occured.
        /// @param {Object} mapping Mapping from old item index to new item index
        /// </summary>
        public void reorder(object mapping){}
        /// <summary>
        /// Sorts the collection by a single sorter function
        /// @param {Function} sorterFn The function to sort by
        /// </summary>
        public void sortBy(JsAction sorterFn){}
        /// <summary>
        /// Sorts this collection by <b>key</b>s.
        /// @param {String} direction (optional) 'ASC' or 'DESC'. Defaults to 'ASC'.
        /// @param {Function} fn (optional) Comparison function that defines the sort order.
        /// Defaults to sorting by case insensitive string.
        /// </summary>
        public void sortByKey(JsString dir, JsAction fn){}
        /// <summary>
        /// <p>
        /// Represents a collection of a set of key and value pairs. Each key in the MixedCollection
        /// must be unique, the same key cannot exist twice. This collection is ordered, items in the
        /// collection can be accessed by index  or via the key. Newly added items are added to
        /// the end of the collection. This class is similar to {@link Ext.util.HashMap} however it
        /// is heavier and provides more functionality. Sample usage:
        /// <pre><code>
        /// var coll = new Ext.util.MixedCollection();
        /// coll.add('key1', 'val1');
        /// coll.add('key2', 'val2');
        /// coll.add('key3', 'val3');
        /// console.log(coll.get('key1')); // prints 'val1'
        /// console.log(coll.indexOfKey('key3')); // prints 2
        /// </code></pre>
        /// *
        /// <p>
        /// The MixedCollection also has support for sorting and filtering of the values in the collection.
        /// <pre><code>
        /// var coll = new Ext.util.MixedCollection();
        /// coll.add('key1', 100);
        /// coll.add('key2', -100);
        /// coll.add('key3', 17);
        /// coll.add('key4', 0);
        /// var biggerThanZero = coll.filterBy(function(value){
        /// return value > 0;
        /// });
        /// console.log(biggerThanZero.getCount()); // prints 2
        /// </code></pre>
        /// </p>
        /// </summary>
        public JsString extend{get;set;}
    }
    #endregion
    #region Offset
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Offset
    {
        public Offset(){}
        public Offset(object x, object y){}
        public void copy(){}
        public void copyFrom(object p){}
        public void equals(object offset){}
        public void isZero(){}
        public void round(object to){}
        public void toString(){}
    }
    #endregion
    #region OffsetConstraint
    [JsType(JsMode.Prototype, Export=false)]
    public partial class OffsetConstraint
    {
        public OffsetConstraint(){}
        public void applyFrom(){}
        public OffsetConstraint(object from, object to){}
        public void getBoundingBox(object dom){}
    }
    #endregion
    #region Point
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Point
    {
        public Point(){}
        /// <summary>
        /// Copy a new instance of this point
        /// @return {Ext.util.Point} the new point
        /// </summary>
        public Point clone(){return null;}
        public Point(object x, object y){}
        /// <summary>
        /// Clones this Point. Deprecated, please use {@link #clone} instead
        /// @deprecated 2.0.0
        /// </summary>
        public void copy(){}
        /// <summary>
        /// Copy the x and y values of another point / object to this point itself
        /// @param {Ext.util.Point/Object} point
        /// @return {Ext.util.Point} this This point
        /// </summary>
        public Point copyFrom(object point){return null;}
        /// <summary>
        /// Compare this point and another point
        /// @param {Ext.util.Point/Object} The point to compare with, either an instance
        /// of Ext.util.Point or an object with x and y properties
        /// @return {Boolean} Returns whether they are equivalent
        /// </summary>
        public bool equals(object point){return false;}
        public void getAngleTo(object point){}
        public void getDistanceTo(object point){}
        /// <summary>
        /// Whether the given point is not away from this point within the given threshold amount
        /// @param {Ext.util.Point/Object} The point to check with, either an instance
        /// of Ext.util.Point or an object with x and y properties
        /// @param {Object/Number} threshold Can be either an object with x and y properties or a number
        /// @return {Boolean}
        /// </summary>
        public void isCloseTo(object point, object threshold){}
        /// <summary>
        /// Returns true if this point is close to another one. Deprecated, please use {@link #isCloseTo} instead
        /// @deprecated 2.0.0
        /// </summary>
        public void isWithin(){}
        /// <summary>
        /// Compare this point with another point when the x and y values of both points are rounded. E.g:
        /// [100.3,199.8] will equals to [100, 200]
        /// @param {Ext.util.Point/Object} The point to compare with, either an instance
        /// of Ext.util.Point or an object with x and y properties
        /// @return {Boolean}
        /// </summary>
        public void roundedEquals(object point){}
        /// <summary>
        /// Returns a human-eye-friendly string that represents this point,
        /// useful for debugging
        /// @return {String}
        /// </summary>
        public void toString(){}
        /// <summary>
        /// Translate this point by the given amounts
        /// @param {Number} x Amount to translate in the x-axis
        /// @param {Number} y Amount to translate in the y-axis
        /// @return {Boolean}
        /// </summary>
        public void translate(JsNumber x, JsNumber y){}
    }
    #endregion
    #region Region
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Region
    {
        public Region(){}
        /// <summary>
        /// Modifies the current region to be adjusted by offsets.
        /// @param {Number} top top offset
        /// @param {Number} right right offset
        /// @param {Number} bottom bottom offset
        /// @param {Number} left left offset
        /// </summary>
        public void adjust(JsNumber t, JsNumber r, JsNumber b, JsNumber l){}
        /// <summary>
        /// Modifies the current region to be constrained to the targetRegion.
        /// @param {Ext.util.Region} targetRegion
        /// </summary>
        public void constrainTo(Region r){}
        /// <summary>
        /// Creates new Region.
        /// @param {Number} top Top
        /// @param {Number} right Right
        /// @param {Number} bottom Bottom
        /// @param {Number} left Left
        /// </summary>
        public Region(JsNumber t, JsNumber r, JsNumber b, JsNumber l){}
        /// <summary>
        /// Checks if this region completely contains the region that is passed in.
        /// @param {Ext.util.Region} region
        /// </summary>
        public void contains(Region region){}
        /// <summary>
        /// Copy a new instance
        /// @return {Ext.util.Region}
        /// </summary>
        public void copy(){}
        /// <summary>
        /// Check whether this region is equivalent to the given region
        /// @param {Ext.util.Region} region The region to compare with
        /// @return {Boolean}
        /// </summary>
        public void equals(Region region){}
        /// <summary>
        /// Get the offset amount of a point outside the region
        /// @param {String} axis optional
        /// @param {Ext.util.Point} p the point
        /// @return {Ext.util.Offset}
        /// </summary>
        public void getOutOfBoundOffset(JsString axis, Point p){}
        /// <summary>
        /// Get the offset amount on the x-axis
        /// @param {Number} p the offset
        /// @return {Number}
        /// </summary>
        public void getOutOfBoundOffsetX(JsNumber p){}
        /// <summary>
        /// Get the offset amount on the y-axis
        /// @param {Number} p the offset
        /// @return {Number}
        /// </summary>
        public void getOutOfBoundOffsetY(JsNumber p){}
        /// <summary>
        /// Get the width / height of this region
        /// @return {Object} an object with width and height properties
        /// </summary>
        public object getSize(){return null;}
        /// <summary>
        /// Checks if this region intersects the region passed in.
        /// @param {Ext.util.Region} region
        /// @return {Ext.util.Region/Boolean} Returns the intersected region or false if there is no intersection.
        /// </summary>
        public object intersect(Region region){return null;}
        /// <summary>
        /// Check whether the point / offset is out of bound
        /// @param {String} axis optional
        /// @param {Ext.util.Point/Number} p the point / offset
        /// @return {Boolean}
        /// </summary>
        public void isOutOfBound(JsString axis, object p){}
        /// <summary>
        /// Check whether the offset is out of bound in the x-axis
        /// @param {Number} p the offset
        /// @return {Boolean}
        /// </summary>
        public void isOutOfBoundX(JsNumber p){}
        /// <summary>
        /// Check whether the offset is out of bound in the y-axis
        /// @param {Number} p the offset
        /// @return {Boolean}
        /// </summary>
        public void isOutOfBoundY(JsNumber p){}
        /// <summary>
        /// Restrict a point within the region by a certain factor.
        /// @param {String} axis Optional
        /// @param {Ext.util.Point/Ext.util.Offset/Object} p
        /// @param {Number} factor
        /// @return {Ext.util.Point/Ext.util.Offset/Object/Number}
        /// </summary>
        public void restrict(JsString axis, object p, JsNumber factor){}
        /// <summary>
        /// Restrict an offset within the region by a certain factor, on the x-axis
        /// @param {Number} p
        /// @param {Number} factor The factor, optional, defaults to 1
        /// @return
        /// </summary>
        public void restrictX(JsNumber p, JsNumber factor){}
        /// <summary>
        /// Restrict an offset within the region by a certain factor, on the y-axis
        /// @param {Number} p
        /// @param {Number} factor The factor, optional, defaults to 1
        /// </summary>
        public void restrictY(JsNumber p, JsNumber factor){}
        /// <summary>
        /// Round all the properties of this region
        /// @return {Ext.util.Region} this This Region
        /// </summary>
        public Region round(){return null;}
        /// <summary>
        /// Dump this to an eye-friendly string, great for debugging
        /// @return {String}
        /// </summary>
        public void toString(){}
        /// <summary>
        /// Translate this region by the given offset amount
        /// @param {Ext.util.Offset/Object} offset
        /// @return {Ext.util.Region} this This Region
        /// </summary>
        public Region translateBy(object offset){return null;}
        /// <summary>
        /// Returns the smallest region that contains the current AND targetRegion.
        /// @param {Ext.util.Region} region
        /// </summary>
        public void union(Region region){}
        /// <summary>
        /// Get the width / height of this region
        /// @return {Object} an object with width and height properties
        /// </summary>
        [JsProperty]
        public object Size{[JsMethod(Name="getSize")]get;private set;}
    }
    #endregion
    #region SizeMonitor
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SizeMonitor
    {
        public SizeMonitor(){}
        public void applyElement(object element){}
        public void destroy(){}
        public void destroyDetector(object name){}
        public void doFireSizeChangeEvent(){}
        public void fireSizeChangeEvent(){}
        public void initialize(){}
        public void onDetectorScroll(object name){}
        public void refresh(){}
        public void refreshPosition(object name){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Sortable
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Sortable
    {
        public Sortable(){}
        /// <summary>
        /// @private
        /// Normalizes an array of sorter objects, ensuring that they are all Ext.util.Sorter instances
        /// @param {Array} sorters The sorters array
        /// @return {Array} Array of Ext.util.Sorter objects
        /// </summary>
        public JsArray decodeSorters(JsArray sorters){return null;}
        public void getSorters(){}
        /// <summary>
        /// Performs initialization of this mixin. Component classes using this mixin should call this method during their
        /// own initialization.
        /// </summary>
        public void initSortable(){}
        /// <summary>
        /// Sorts the data in the Store by one or more of its properties. Example usage:
        /// *
        /// //sort by a single field
        /// myStore.sort('myField', 'DESC');
        /// *
        /// //sorting by multiple fields
        /// myStore.sort([
        /// {
        /// property : 'age',
        /// direction: 'ASC'
        /// },
        /// {
        /// property : 'name',
        /// direction: 'DESC'
        /// }
        /// ]);
        /// *
        /// Internally, Store converts the passed arguments into an array of {@link Ext.util.Sorter} instances, and delegates
        /// the actual sorting to its internal {@link Ext.util.MixedCollection}.
        /// *
        /// When passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:
        /// *
        /// store.sort('myField');
        /// store.sort('myField');
        /// *
        /// Is equivalent to this code, because Store handles the toggling automatically:
        /// *
        /// store.sort('myField', 'ASC');
        /// store.sort('myField', 'DESC');
        /// *
        /// @param {String/Ext.util.Sorter[]} sorters Either a string name of one of the fields in this Store's configured
        /// {@link Ext.data.Model Model}, or an array of sorter configurations.
        /// @param {String} direction The overall direction to sort the data by. Defaults to "ASC".
        /// @return {Ext.util.Sorter[]}
        /// </summary>
        public void sort(object sorters, JsString direction, object where, object doSort){}
        /// <summary>
        /// @property {String} defaultSortDirection
        /// The default sort direction to use if one is not specified (defaults to "ASC")
        /// </summary>
        public JsString defaultSortDirection{get;set;}
        /// <summary>
        /// @property {Boolean} isSortable
        /// Flag denoting that this object is sortable. Always true.
        /// </summary>
        public bool isSortable{get;set;}
    }
    #endregion
    #region Sorter
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Sorter
    {
        public Sorter(){}
        public Sorter(SorterConfig config){}
        /// <summary>
        /// @cfg {String} direction The direction to sort by. Defaults to ASC
        /// </summary>
        public Sorter(object config){}
        /// <summary>
        /// @private
        /// Creates and returns a function which sorts an array by the given property and direction
        /// @return {Function} A function which sorts by the property/direction combination provided
        /// </summary>
        public JsAction createSortFunction(object sorterFn){return null;}
        /// <summary>
        /// @private
        /// Basic default sorter function that just compares the defined property of each object
        /// </summary>
        public void defaultSorterFn(object o1, object o2){}
        /// <summary>
        /// @private
        /// Returns the root property of the given item, based on the configured {@link #root} property
        /// @param {Object} item The item
        /// @return {Object} The root property of the object
        /// </summary>
        public object getRoot(object item){return null;}
        public void setDirection(object direction){}
        public void toggle(){}
        public void updateSortFunction(){}
        /// <summary>
        /// @cfg {String} direction The direction to sort by. Defaults to ASC
        /// </summary>
        public JsString direction{get;set;}
        [JsProperty]
        public object Direction{private get;[JsMethod(Name="setDirection")]set;}
    }
    #endregion
    #region SorterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SorterConfig
    {
        public SorterConfig(){}
        /// <summary>
        /// The direction to sort by. Defaults to ASC
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// The property to sort by. Required unless `sorter` is provided
        /// </summary>
        public JsString property{get;set;}
        /// <summary>
        /// Optional root property. This is mostly useful when sorting a Store, in which case we set the
        /// root to 'data' to make the filter pull the {@link #property} out of the data object of each item
        /// </summary>
        public JsString root{get;set;}
        /// <summary>
        /// A specific sorter function to execute. Can be passed instead of {@link #property}
        /// </summary>
        public JsAction sorterFn{get;set;}
        /// <summary>
        /// A function that will be run on each value before
        /// it is compared in the sorter. The function will receive a single argument,
        /// the value.
        /// </summary>
        public JsAction transform{get;set;}
    }
    #endregion
    #region TapRepeater
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TapRepeater
    {
        public TapRepeater(){}
        /// <summary>
        /// Creates new TapRepeater.
        /// @param {Mixed} el The element to listen on
        /// @param {Object} config
        /// </summary>
        public TapRepeater(object config){}
        public void destroy(){}
        public void easeOutExpo(object t, object b, object c, object d){}
        public void eventOptions(object e){}
        public void onTouchEnd(object e){}
        public void onTouchStart(object e){}
        public void tap(object e){}
        public void updateEl(object newEl, object oldEl){}
    }
    #endregion
    #region Timeline
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Timeline
    {
        public Timeline(){}
        public void add(object anims){}
        public void clear(){}
        public Timeline(object anims){}
        public void next(){}
        public void pause(){}
        public void play(){}
        public void reset(){}
        public void stop(){}
    }
    #endregion
}
#endregion
#region Ext.viewport
namespace Ext.viewport
{
    #region Android
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Android
    {
        public Android(){}
        public void doFireOrientationChangeEvent(){}
        public void isHeightMaximized(object height){}
        public void maximize(){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Default
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Default
    {
        public Default(){}
        public Default(DefaultConfig config){}
        public void addWindowListener(object eventName, object fn, object capturing){}
        public void applyAutoMaximize(object autoMaximize){}
        public void applyPreventPanning(object preventPanning){}
        public void applyPreventZooming(object preventZooming){}
        /// <summary>
        /// @private
        /// </summary>
        public Default(object config){}
        public void determineOrientation(){}
        public void doAddListener(object eventName, object fn, object scope, object options){}
        public void doAutoMaximizeOnOrientationChange(){}
        public void doAutoMaximizeOnReady(){}
        public void doPreventPanning(object e){}
        public void doPreventZooming(object e){}
        public void doSetHeight(object height){}
        public void doSetWidth(object width){}
        public void fireMaximizeEvent(){}
        public void fireOrientationChangeEvent(object newOrientation, object oldOrientation){}
        public void fireResizeEvent(object width, object height){}
        public void getOrientation(){}
        public void getSize(){}
        public void getWindowHeight(){}
        public void getWindowOrientation(){}
        public void getWindowOuterHeight(){}
        public void getWindowWidth(){}
        public void maximize(){}
        public void onDomReady(){}
        public void onElementBlur(){}
        public void onElementFocus(object e){}
        public void onItemFullscreenChange(object item){}
        public void onOrientationChange(){}
        public void onReady(){}
        public void onResize(){}
        public void removeWindowListener(object eventName, object fn, object capturing){}
        public void render(){}
        public void scrollToTop(){}
        public void supportsOrientation(){}
        public void updateSize(object width, object height){}
        public void waitUntil(object condition, object onSatisfied, object onTimeout, object delay, object timeoutDuration){}
        /// <summary>
        /// *
        /// </summary>
        public JsString extend{get;set;}
        public object focusedElement{get;set;}
        public JsString id{get;set;}
        public JsRegExp isInputRegex{get;set;}
        public bool isMaximizing{get;set;}
        public bool isReady{get;set;}
        public bool isViewport{get;set;}
        public JsString LANDSCAPE{get;set;}
        public JsString PORTRAIT{get;set;}
        public JsString xtype{get;set;}
    }
    #endregion
    #region DefaultConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DefaultConfig
    {
        public DefaultConfig(){}
        /// <summary>
        /// Whether or not to always automatically maximize the viewport on
        /// first load and all subsequent orientation changes
        /// @accessor
        /// </summary>
        public bool autoMaximize{get;set;}
        /// <summary>
        /// Whether or not to always prevent default panning behavior of the
        /// browser's viewport
        /// @accessor
        /// </summary>
        public bool preventPanning{get;set;}
        /// <summary>
        /// Whether or not to always prevent default zooming feature of the
        /// browser's viewport via finger gestures such as pinching and / or double-tapping
        /// @accessor
        /// </summary>
        public bool preventZooming{get;set;}
    }
    #endregion
    #region Ios
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Ios
    {
        public Ios(){}
        public void getScreenHeight(){}
        public void isFullscreen(){}
        public void isHomeScreen(){}
        public void maximize(){}
        public void onElementBlur(){}
        public void onElementFocus(){}
        public void onTouchStart(){}
        public void scrollToTop(){}
        public JsString extend{get;set;}
    }
    #endregion
    #region Viewport
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Viewport
    {
        public Viewport(){}
        public Viewport(object config){}
    }
    #endregion
}
#endregion
