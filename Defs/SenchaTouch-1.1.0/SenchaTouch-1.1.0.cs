//***************************************************
//* This file was generated by tool
//* 14/10/2011 19:40:56
//* SharpKit
//***************************************************
using SharpKit.JavaScript;
using SharpKit.Html;
//using Ext.menu;
using Ext.data;
using Ext.lib;
//using Ext.dd;
using Ext.form;
using Ext.util;
using Ext.layout;
#region 
#region B
[JsType(JsMode.Prototype, Export=false)]
public partial class B
{
    public B(){}
    public static JsString ERROR{get;set;}
    public static JsString INFO{get;set;}
    public static JsString QUESTION{get;set;}
    public static JsString WARNING{get;set;}
}
#endregion
#endregion
#region El
namespace El
{
    #region addMethods
    [JsType(JsMode.Prototype, Export=false)]
    public partial class addMethods
    {
        public addMethods(){}
        public addMethods(object o){}
    }
    #endregion
    #region addToCache
    [JsType(JsMode.Prototype, Export=false)]
    public partial class addToCache
    {
        public addToCache(){}
        public addToCache(object el, object id){}
    }
    #endregion
    #region data
    [JsType(JsMode.Prototype, Export=false)]
    public partial class data
    {
        public data(){}
        public data(object el, object key, object value){}
    }
    #endregion
    #region fly
    /// <summary>
    /// <p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
    /// the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}</p>
    /// <p>Use this to make one-time references to DOM elements which are not going to be accessed again either by
    /// application code, or by Ext's classes. If accessing an element which will be processed regularly, then {@link Ext#get}
    /// will be more appropriate to take advantage of the caching provided by the Ext.Element class.</p>
    /// @param {String/HTMLElement} el The dom node or id
    /// @param {String} named (optional) Allows for creation of named reusable flyweights to prevent conflicts
    /// (e.g. internally Ext uses "_global")
    /// @return {Element} The shared Element object (or null if no matching element was found)
    /// @member Ext.Element
    /// @method fly
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class fly
    {
        public fly(){}
        /// <summary>
        /// <p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
        /// the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}</p>
        /// <p>Use this to make one-time references to DOM elements which are not going to be accessed again either by
        /// application code, or by Ext's classes. If accessing an element which will be processed regularly, then {@link Ext#get}
        /// will be more appropriate to take advantage of the caching provided by the Ext.Element class.</p>
        /// @param {String/HTMLElement} el The dom node or id
        /// @param {String} named (optional) Allows for creation of named reusable flyweights to prevent conflicts
        /// (e.g. internally Ext uses "_global")
        /// @return {Element} The shared Element object (or null if no matching element was found)
        /// @member Ext.Element
        /// @method fly
        /// </summary>
        public fly(object el, JsString named){}
    }
    #endregion
    #region Flyweight
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Flyweight
    {
        public Flyweight(){}
        public Flyweight(object dom){}
    }
    #endregion
    #region garbageCollect
    [JsType(JsMode.Prototype, Export=false)]
    public partial class garbageCollect
    {
        public garbageCollect(){}
    }
    #endregion
    #region get
    /// <summary>
    /// Retrieves Ext.Element objects.
    /// <p><b>This method does not retrieve {@link Ext.Component Component}s.</b> This method
    /// retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
    /// its ID, use {@link Ext.ComponentMgr#get}.</p>
    /// <p>Uses simple caching to consistently return the same object. Automatically fixes if an
    /// object was recreated with the same id via AJAX or DOM.</p>
    /// @param {Mixed} el The id of the node, a DOM Node or an existing Element.
    /// @return {Element} The Element object (or null if no matching element was found)
    /// @static
    /// @member Ext.Element
    /// @method get
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class get
    {
        public get(){}
        /// <summary>
        /// Retrieves Ext.Element objects.
        /// <p><b>This method does not retrieve {@link Ext.Component Component}s.</b> This method
        /// retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
        /// its ID, use {@link Ext.ComponentMgr#get}.</p>
        /// <p>Uses simple caching to consistently return the same object. Automatically fixes if an
        /// object was recreated with the same id via AJAX or DOM.</p>
        /// @param {Mixed} el The id of the node, a DOM Node or an existing Element.
        /// @return {Element} The Element object (or null if no matching element was found)
        /// @static
        /// @member Ext.Element
        /// @method get
        /// </summary>
        public get(object el){}
    }
    #endregion
}
#endregion
#region Ext
namespace Ext
{
    #region AbstractManager
    /// <summary>
    /// @class Ext.AbstractManager
    /// @extends Object
    /// @ignore
    /// Base Manager class - extended by ComponentMgr and PluginMgr
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractManager
    {
        public AbstractManager(){}
        public AbstractManager(object config){}
        /// <summary>
        /// Creates and returns an instance of whatever this manager manages, based on the supplied type and config object
        /// @param {Object} config The config object
        /// @param {String} defaultType If no type is discovered in the config object, we fall back to this type
        /// @return {Mixed} The instance of whatever this manager is managing
        /// </summary>
        public void create(object config, JsString defaultType){}
        /// <summary>
        /// Executes the specified function once for each item in the collection.
        /// Returning false from the function will cease iteration.
        /// The paramaters passed to the function are:
        /// <div class="mdetail-params"><ul>
        /// <li><b>key</b> : String<p class="sub-desc">The key of the item</p></li>
        /// <li><b>value</b> : Number<p class="sub-desc">The value of the item</p></li>
        /// <li><b>length</b> : Number<p class="sub-desc">The total number of items in the collection</p></li>
        /// </ul></div>
        /// @param {Object} fn The function to execute.
        /// @param {Object} scope The scope to execute in. Defaults to <tt>this</tt>.
        /// </summary>
        public void each(object fn, object scope){}
        /// <summary>
        /// Returns a component by {@link Ext.Component#id id}.
        /// For additional details see {@link Ext.util.MixedCollection#get}.
        /// @param {String} id The component {@link Ext.Component#id id}
        /// @return Ext.Component The Component, <code>undefined</code> if not found, or <code>null</code> if a
        /// Class was found.
        /// </summary>
        public void get(JsString id){}
        /// <summary>
        /// Gets the number of items in the collection.
        /// @return {Number} The number of items in the collection.
        /// </summary>
        public JsNumber getCount(){return null;}
        /// <summary>
        /// Checks if a Component type is registered.
        /// @param {Ext.Component} xtype The mnemonic string by which the Component class may be looked up
        /// @return {Boolean} Whether the type is registered.
        /// </summary>
        public bool isRegistered(Ext.Component type){return false;}
        /// <summary>
        /// Registers a function that will be called when a Component with the specified id is added to the manager. This will happen on instantiation.
        /// @param {String} id The component {@link Ext.Component#id id}
        /// @param {Function} fn The callback function
        /// @param {Object} scope The scope (<code>this</code> reference) in which the callback is executed. Defaults to the Component.
        /// </summary>
        public void onAvailable(JsString id, JsAction fn, object scope){}
        /// <summary>
        /// Registers an item to be managed
        /// @param {Mixed} item The item to register
        /// </summary>
        public void register(object item){}
        /// <summary>
        /// <p>Registers a new Component constructor, keyed by a new
        /// {@link Ext.Component#xtype}.</p>
        /// <p>Use this method (or its alias {@link Ext#reg Ext.reg}) to register new
        /// subclasses of {@link Ext.Component} so that lazy instantiation may be used when specifying
        /// child Components.
        /// see {@link Ext.Container#items}</p>
        /// @param {String} xtype The mnemonic string by which the Component class may be looked up.
        /// @param {Constructor} cls The new Component class.
        /// </summary>
        public void registerType(JsString type, object cls){}
        /// <summary>
        /// Unregisters a component by removing it from this manager
        /// @param {Mixed} item The item to unregister
        /// </summary>
        public void unregister(object item){}
        /// <summary>
        /// Gets the number of items in the collection.
        /// @return {Number} The number of items in the collection.
        /// </summary>
        [JsProperty]
        public JsNumber Count{[JsMethod(Name="getCount")]get;private set;}
        /// <summary>
        /// @class Ext.AbstractManager
        /// @extends Object
        /// @ignore
        /// Base Manager class - extended by ComponentMgr and PluginMgr
        /// </summary>
        public JsString typeName{get;set;}
    }
    #endregion
    #region AbstractStoreSelectionModel
    /// <summary>
    /// @class Ext.AbstractStoreSelectionModel
    /// @extends Ext.util.Observable
    /// *
    /// Tracks what records are currently selected in a databound widget.
    /// *
    /// This is an abstract class and is not meant to be directly used.
    /// *
    /// DataBound UI widgets such as GridPanel, TreePanel, and ListView
    /// should subclass AbstractStoreSelectionModel and provide a way
    /// to binding to the component.
    /// *
    /// The abstract methods onSelectChange and onLastFocusChanged should
    /// be implemented in these subclasses to update the UI widget.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractStoreSelectionModel : Observable
    {
        public AbstractStoreSelectionModel(){}
        public AbstractStoreSelectionModel(AbstractStoreSelectionModelConfig config){}
        public void bind(object store, object initial){}
        public void bindComponent(object cmp){}
        public void clearSelections(){}
        /// <summary>
        /// @property selected
        /// READ-ONLY A MixedCollection that maintains all of the currently selected
        /// records.
        /// </summary>
        public AbstractStoreSelectionModel(object cfg){}
        /// <summary>
        /// Deselects a record instance by record instance or index.
        /// @param {Ext.data.Record/Index} records An array of records or an index
        /// @param {Boolean} suppressEvent Set to false to not fire a deselect event
        /// </summary>
        public void deselect(object records, bool suppressEvent){}
        public void deselectAll(){}
        public void destroy(){}
        public void doDeselect(object records, object suppressEvent){}
        public void doMultiSelect(object records, object keepExisting, object suppressEvent){}
        public void doSelect(object records, object keepExisting, object suppressEvent){}
        public void doSingleSelect(object record, object suppressEvent){}
        public void getCount(){}
        public void getLastFocused(){}
        /// <summary>
        /// Returns the last selected record.
        /// </summary>
        public void getLastSelected(){}
        /// <summary>
        /// Returns an array of the currently selected records.
        /// </summary>
        public void getSelection(){}
        /// <summary>
        /// Returns the current selectionMode. SINGLE, MULTI or SIMPLE.
        /// </summary>
        public void getSelectionMode(){}
        /// <summary>
        /// Returns true if there is a selected record.
        /// @return {Boolean}
        /// </summary>
        public void hasSelection(){}
        /// <summary>
        /// Returns true if the selections are locked.
        /// @return {Boolean}
        /// </summary>
        public void isLocked(){}
        /// <summary>
        /// Returns <tt>true</tt> if the specified row is selected.
        /// @param {Record/Number} record The record or index of the record to check
        /// @return {Boolean}
        /// </summary>
        public void isSelected(object record){}
        public void maybeFireSelectionChange(object fireEvent){}
        public void onEditorKey(object field, object e){}
        public void onLastFocusChanged(object oldFocused, object newFocused){}
        public void onSelectChange(object record, object isSelected, object suppressEvent){}
        public void onStoreAdd(){}
        public void onStoreClear(){}
        public void onStoreRemove(object store, object record){}
        public void onStoreUpdate(){}
        public void refresh(){}
        /// <summary>
        /// Selects a record instance by record instance or index.
        /// @param {Ext.data.Record/Index} records An array of records or an index
        /// @param {Boolean} keepExisting
        /// @param {Boolean} suppressEvent Set to false to not fire a select event
        /// </summary>
        public void select(object records, bool keepExisting, bool suppressEvent){}
        public void selectAll(object silent){}
        /// <summary>
        /// Selects a range of rows if the selection model
        /// {@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
        /// All rows in between startRow and endRow are also selected.
        /// @param {Number} startRow The index of the first row in the range
        /// @param {Number} endRow The index of the last row in the range
        /// @param {Boolean} keepExisting (optional) True to retain existing selections
        /// </summary>
        public void selectRange(JsNumber startRecord, JsNumber endRecord, bool keepExisting, object dir){}
        public void selectWithEvent(object record, object e){}
        /// <summary>
        /// @param {Ext.data.Record} record
        /// Set a record as the last focused record. This does NOT mean
        /// that the record has been selected.
        /// </summary>
        public void setLastFocused(object record){}
        /// <summary>
        /// Locks the current selection and disables any changes from
        /// happening to the selection.
        /// @param {Boolean} locked
        /// </summary>
        public void setLocked(bool locked){}
        /// <summary>
        /// Sets the current selectionMode. SINGLE, MULTI or SIMPLE.
        /// </summary>
        public void setSelectionMode(object selMode){}
        /// <summary>
        /// @cfg {Boolean} allowDeselect
        /// Allow users to deselect a record in a DataView, List or Grid. Only applicable when the SelectionModel's mode is 'SINGLE'. Defaults to false.
        /// </summary>
        public bool allowDeselect{get;set;}
        /// <summary>
        /// @param {Ext.data.Record} record
        /// Set a record as the last focused record. This does NOT mean
        /// that the record has been selected.
        /// </summary>
        [JsProperty]
        public object LastFocused{private get;[JsMethod(Name="setLastFocused")]set;}
        /// <summary>
        /// Locks the current selection and disables any changes from
        /// happening to the selection.
        /// @param {Boolean} locked
        /// </summary>
        [JsProperty]
        public bool Locked{private get;[JsMethod(Name="setLocked")]set;}
        /// <summary>
        /// @property selected
        /// READ-ONLY A MixedCollection that maintains all of the currently selected
        /// records.
        /// </summary>
        public object selected{get;set;}
        /// <summary>
        /// Sets the current selectionMode. SINGLE, MULTI or SIMPLE.
        /// </summary>
        [JsProperty]
        public object SelectionMode{private get;[JsMethod(Name="setSelectionMode")]set;}
    }
    #endregion
    #region AbstractStoreSelectionModelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractStoreSelectionModelConfig
    {
        public AbstractStoreSelectionModelConfig(){}
        /// <summary>
        /// Allow users to deselect a record in a DataView, List or Grid. Only applicable when the SelectionModel's mode is 'SINGLE'. Defaults to false.
        /// </summary>
        public bool allowDeselect{get;set;}
        /// <summary>
        /// Modes of selection.
        /// Valid values are SINGLE, SIMPLE, and MULTI. Defaults to 'SINGLE'
        /// </summary>
        public JsString mode{get;set;}
    }
    #endregion
    #region ActionSheet
    /// <summary>
    /// @class Ext.ActionSheet
    /// @extends Ext.Sheet
    /// *
    /// <p>A Button Sheet class designed to popup or slide/anchor a series of buttons.</p>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.ActionSheet/screenshot.png" /></p>
    /// *
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// var actionSheet = new Ext.ActionSheet({
    /// items: [
    /// {
    /// text: 'Delete draft',
    /// ui  : 'decline'
    /// },
    /// {
    /// text: 'Save draft'
    /// },
    /// {
    /// text: 'Cancel',
    /// ui  : 'confirm'
    /// }
    /// ]
    /// });
    /// actionSheet.show();</code></pre>
    /// @xtype sheet
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ActionSheet : Sheet
    {
        public ActionSheet(){}
        public ActionSheet(SheetConfig config){}
        public ActionSheet(object config){}
        /// <summary>
        /// @class Ext.ActionSheet
        /// @extends Ext.Sheet
        /// *
        /// <p>A Button Sheet class designed to popup or slide/anchor a series of buttons.</p>
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.ActionSheet/screenshot.png" /></p>
        /// *
        /// <h2>Example code:</h2>
        /// <pre><code>
        /// var actionSheet = new Ext.ActionSheet({
        /// items: [
        /// {
        /// text: 'Delete draft',
        /// ui  : 'decline'
        /// },
        /// {
        /// text: 'Save draft'
        /// },
        /// {
        /// text: 'Cancel',
        /// ui  : 'confirm'
        /// }
        /// ]
        /// });
        /// actionSheet.show();</code></pre>
        /// @xtype sheet
        /// </summary>
        public JsString componentCls{get;set;}
        public new JsString defaultType{get;set;}
        public bool stretchX{get;set;}
        public bool stretchY{get;set;}
    }
    #endregion
    #region Ajax
    /// <summary>
    /// @class Ext.Ajax
    /// @extends Ext.data.Connection
    /// A singleton instance of an {@link Ext.data.Connection}.
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Ajax
    {
        public Ajax(){}
    }
    #endregion
    #region Anim
    /// <summary>
    /// @class Ext.Anim
    /// @extends Object
    /// <p>Ext.Anim is used to excute animations defined in {@link Ext.anims}. The {@link #run} method can take any of the
    /// properties defined below.</p>
    /// <h2>Example usage:</h2>
    /// <code><pre>
    /// Ext.Anim.run(this, 'fade', {
    /// out: false,
    /// autoClear: true
    /// });
    /// </pre></code>
    /// <p>Animations are disabled on Android and Blackberry by default using the {@link #disableAnimations} property.</p>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Anim
    {
        public Anim(){}
        public Anim(AnimConfig config){}
        public Anim(object config){}
        public void initConfig(object el, object runConfig){}
        public void onTransitionEnd(object ev, object el, object o){}
        public void run(object el, object config){}
        /// <summary>
        /// Used to run an animation on a specific element. Use the config argument to customize the animation
        /// @param {Ext.Element/Element} el The element to animate
        /// @param {String} anim The animation type, defined in {@link #Ext.anims}
        /// @param {Object} config The config object for the animation
        /// @method run
        /// </summary>
        public static void run(object el, JsString anim, object config){}
        /// <summary>
        /// @cfg {Boolean} disableAnimations
        /// True to disable animations. By default, animations are disabled on Android and Blackberry
        /// </summary>
        public bool disableAnimations{get;set;}
        /// <summary>
        /// @class Ext.Anim
        /// @extends Object
        /// <p>Ext.Anim is used to excute animations defined in {@link Ext.anims}. The {@link #run} method can take any of the
        /// properties defined below.</p>
        /// <h2>Example usage:</h2>
        /// <code><pre>
        /// Ext.Anim.run(this, 'fade', {
        /// out: false,
        /// autoClear: true
        /// });
        /// </pre></code>
        /// <p>Animations are disabled on Android and Blackberry by default using the {@link #disableAnimations} property.</p>
        /// @singleton
        /// </summary>
        public bool isAnim{get;set;}
    }
    #endregion
    #region AnimConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AnimConfig
    {
        public AnimConfig(){}
        /// <summary>
        /// True to remove all custom CSS defined in the {@link #to} config when the animation is over.
        /// (Defaults to true).
        /// </summary>
        public bool autoClear{get;set;}
        /// <summary>
        /// Code to execute before starting the animation.
        /// </summary>
        public JsAction before{get;set;}
        /// <summary>
        /// Time to delay before starting the animation.
        /// (Defaults to 0).
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// Valid values are 'left', 'right', 'up', 'down' and null.
        /// (Defaults to null).
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// True to disable animations. By default, animations are disabled on Android and Blackberry
        /// </summary>
        public bool disableAnimations{get;set;}
        /// <summary>
        /// Time in milliseconds for the animation to last.
        /// (Defaults to 250).
        /// </summary>
        public JsNumber duration{get;set;}
        /// <summary>
        /// Valid values are 'ease', 'linear', ease-in', 'ease-out', 'ease-in-out' or a cubic-bezier curve as defined by CSS.
        /// (Defaults to 'ease-in-out').
        /// </summary>
        public JsString easing{get;set;}
        /// <summary>
        /// An object of CSS values which the animation begins with. If you define a CSS property here, you must also
        /// define it in the {@link #to} config.
        /// </summary>
        public object from{get;set;}
        /// <summary>
        /// True if you want the animation to slide out of the screen.
        /// (Defaults to true).
        /// </summary>
        public bool @out{get;set;}
        /// <summary>
        /// True to reverse the animation direction. For example, if the animation direction was set to 'left', it would
        /// then use 'right'.
        /// (Defaults to false).
        /// </summary>
        public bool reverse{get;set;}
        /// <summary>
        /// Scope to run the {@link before} function in.
        /// </summary>
        public object scope{get;set;}
        /// <summary>
        /// An object of CSS values which the animation ends with. If you define a CSS property here, you must also
        /// define it in the {@link #from} config.
        /// </summary>
        public object to{get;set;}
    }
    #endregion
    #region anims
    [JsType(JsMode.Prototype, Export=false)]
    public partial class anims
    {
        public anims(){}
    }
    #endregion
    #region Application
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.Application
    /// @extends Ext.util.Observable
    /// *
    /// <p>Represents a Sencha Application. Most Applications consist of at least the application's name and a launch
    /// function:</p>
    /// *
    /// <pre><code>
    /// new Ext.Application({
    /// name: 'MyApp',
    /// launch: function() {
    /// this.viewport = new Ext.Panel({
    /// fullscreen: true,
    /// id    : 'mainPanel',
    /// layout: 'card',
    /// items : [
    /// {
    /// html: 'Welcome to My App!'
    /// }
    /// ]
    /// });
    /// }
    /// });
    /// </code></pre>
    /// *
    /// <p>Instantiating a new application automatically creates a global variable using the configured {@link #name}
    /// property and sets up namespaces for views, stores, models and controllers within the app:</p>
    /// *
    /// <pre><code>
    /// //this code is run internally automatically when creating the app
    /// {@link Ext.ns}('MyApp', 'MyApp.views', 'MyApp.stores', 'MyApp.models', 'MyApp.controllers');
    /// </code></pre>
    /// *
    /// <p>The launch function usually creates the Application's Viewport and runs any actions the Application needs to
    /// perform when it boots up. The launch function is only expected to be run once.</p>
    /// *
    /// <p><u>Routes and history support</u></p>
    /// *
    /// <p>Sencha Applications provide in-app deep linking and history support, allowing your users both to use the back
    /// button inside your application and to refresh the page and come back to the same screen even after navigating.
    /// In-app history support relies on the Routing engine, which maps urls to controller/action pairs. Here's an example
    /// route definition:</p>
    /// *
    /// <pre><code>
    /// //Note the # in the url examples below
    /// Ext.Router.draw(function(map) {
    /// //maps the url http://mydomain.com/#dashboard to the home controller's index action
    /// map.connect('dashboard', {controller: 'home', action: 'index'});
    /// //fallback route - would match routes like http://mydomain.com/#users/list to the 'users' controller's
    /// //'list' action
    /// map.connect(':controller/:action');
    /// });
    /// </code></pre>
    /// *
    /// <p>If you generated your Sencha app using the Sencha Command application generator script, you'll see this file is
    /// already present in your application's app/routes.js file. History-driven apps can specify the {@link #defaultUrl}
    /// configuration option, which will dispatch to that url if no url is currently set:</p>
    /// *
    /// <pre><code>
    /// new Ext.Application({
    /// name: 'MyApp',
    /// defaultUrl: 'dashboard'
    /// });
    /// </code></pre>
    /// *
    /// <p><u>Application profiles</u></p>
    /// *
    /// <p>Applications support multiple app profiles and reconfigure itself accordingly. Here we set up an Application
    /// with 3 profiles - one if the device is a phone, one for tablets in landscape orientation and one for tablets in
    /// portrait orientation:</p>
    /// *
    /// <pre><code>
    /// new Ext.Application({
    /// name: 'MyApp',
    /// profiles: {
    /// phone: function() {
    /// return Ext.is.Phone;
    /// },
    /// tabletPortrait: function() {
    /// return Ext.is.Tablet && Ext.orientation == 'portrait';
    /// },
    /// tabletLandscape: function() {
    /// return Ext.is.Tablet && Ext.orientation == 'landscape';
    /// }
    /// }
    /// });
    /// </code></pre>
    /// *
    /// <p>When the Application checks its list of profiles, the first function that returns true becomes the current profile.
    /// The Application will normally automatically detect when a profile change has occurred (e.g. if a tablet is rotated
    /// from portrait to landscape mode) and fire the {@link #profilechange} event. It will also by default inform all
    /// {@link Ext.Component Components} on the page that the current profile has changed by calling their
    /// {@link Ext.Component#setProfile setProfile} functions. The setProfile function is left as an empty function for you
    /// to implement if your component needs to react to different device/application profiles.</p>
    /// *
    /// <p>The current profile can be found using {@link #getProfile}. If the Application does not correctly detect device
    /// profile changes, calling the {@link #determineProfile} function will force it to re-check.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Application : Observable
    {
        public Application(){}
        public Application(ApplicationConfig config){}
        /// <summary>
        /// @private
        /// We bind this outside the constructor so that we can cancel it in the test environment
        /// </summary>
        public void bindReady(){}
        /// <summary>
        /// @cfg {Object} profiles A set of named profile specifications that this application supports. See the intro
        /// docs for an example
        /// </summary>
        public Application(object config){}
        /// <summary>
        /// Calls each configured {@link #profile} function, marking the first one that returns true as the current
        /// application profile. Fires the 'beforeprofilechange' and 'profilechange' events if the profile has changed
        /// @param {Boolean} silent If true, the events profilechange event is not fired
        /// </summary>
        public void determineProfile(bool silent){}
        /// <summary>
        /// Dispatches to a given controller/action combo with optional arguments.
        /// @param {Object} options Object containing strings referencing the controller and action to dispatch
        /// to, plus optional args array
        /// @return {Boolean} True if the controller and action were found and dispatched to, false otherwise
        /// </summary>
        public bool dispatch(object options){return false;}
        /// <summary>
        /// Gets the name of the currently-detected application profile
        /// @return {String} The profile name
        /// </summary>
        public JsString getProfile(){return null;}
        /// <summary>
        /// @private
        /// Initializes the loading mask, called automatically by onReady if {@link #useLoadMask} is configured
        /// </summary>
        public void initLoadMask(){}
        /// <summary>
        /// @private
        /// </summary>
        public void onBeforeLaunch(){}
        /// <summary>
        /// @private
        /// </summary>
        public void onHistoryChange(object token){}
        /// <summary>
        /// @private
        /// Called when the DOM is ready. Calls the application-specific launch function and dispatches to the
        /// first controller/action combo
        /// </summary>
        public void onReady(){}
        /// <summary>
        /// @private
        /// Sets the profile on every component on the page. Will probably refactor this to something less hacky.
        /// @param {String} profile The new profile name
        /// </summary>
        public void updateComponentProfiles(JsString profile){}
        /// <summary>
        /// @cfg {Boolean} autoInitViewport Will automatically set up the application to work in full screen mode by calling
        /// {@link Ext.Viewport#init} if true (defaults to true)
        /// </summary>
        public bool autoInitViewport{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoUpdateComponentProfiles If true, automatically calls {@link Ext.Component#setProfile} on
        /// all components whenever a application/device profile change is detected (defaults to true)
        /// </summary>
        public bool autoUpdateComponentProfiles{get;set;}
        /// <summary>
        /// @cfg {Number} loadMaskFadeDuration The number of milliseconds the load mask takes to fade out. Defaults to 1000
        /// </summary>
        public JsNumber loadMaskFadeDuration{get;set;}
        /// <summary>
        /// @cfg {Number} loadMaskRemoveDuration The number of milliseconds until the load mask is removed after starting the
        /// {@link #loadMaskFadeDuration fadeout}. Defaults to 1050.
        /// </summary>
        public JsNumber loadMaskRemoveDuration{get;set;}
        /// <summary>
        /// Gets the name of the currently-detected application profile
        /// @return {String} The profile name
        /// </summary>
        [JsProperty]
        public JsString Profile{[JsMethod(Name="getProfile")]get;private set;}
        /// <summary>
        /// @cfg {Boolean} setProfilesOnLaunch If true, determines the current application profile on launch and calls
        /// {@link #updateComponentProfiles}. Defaults to true
        /// </summary>
        public bool setProfilesOnLaunch{get;set;}
        /// <summary>
        /// @cfg {Boolean} useHistory True to automatically set up Ext.History support (defaults to true)
        /// </summary>
        public bool useHistory{get;set;}
        /// <summary>
        /// @cfg {Boolean/String} useLoadMask True to automatically remove an application loading mask when the
        /// DOM is ready. If set to true, this expects a div called "loading-mask" to be present in the body.
        /// Pass the id of some other DOM node if using a custom loading mask element. Defaults to false.
        /// </summary>
        public object useLoadMask{get;set;}
    }
    #endregion
    #region ApplicationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ApplicationConfig
    {
        public ApplicationConfig(){}
        /// <summary>
        /// Will automatically set up the application to work in full screen mode by calling
        /// {@link Ext.Viewport#init} if true (defaults to true)
        /// </summary>
        public bool autoInitViewport{get;set;}
        /// <summary>
        /// If true, automatically calls {@link Ext.Component#setProfile} on
        /// all components whenever a application/device profile change is detected (defaults to true)
        /// </summary>
        public bool autoUpdateComponentProfiles{get;set;}
        /// <summary>
        /// When the app is first loaded, this url will be redirected to. Defaults to undefined
        /// </summary>
        public JsString defaultUrl{get;set;}
        /// <summary>
        /// The number of milliseconds the load mask takes to fade out. Defaults to 1000
        /// </summary>
        public JsNumber loadMaskFadeDuration{get;set;}
        /// <summary>
        /// The number of milliseconds until the load mask is removed after starting the
        /// {@link #loadMaskFadeDuration fadeout}. Defaults to 1050.
        /// </summary>
        public JsNumber loadMaskRemoveDuration{get;set;}
        /// <summary>
        /// The name of the Application. This should be the same as the single global variable that the
        /// application uses, and should not contain spaces
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// The scope to execute the {@link #launch} function in. Defaults to the Application
        /// instance.
        /// </summary>
        public object scope{get;set;}
        /// <summary>
        /// If true, determines the current application profile on launch and calls
        /// {@link #updateComponentProfiles}. Defaults to true
        /// </summary>
        public bool setProfilesOnLaunch{get;set;}
        /// <summary>
        /// True to automatically set up Ext.History support (defaults to true)
        /// </summary>
        public bool useHistory{get;set;}
        /// <summary>
        /// True to automatically remove an application loading mask when the
        /// DOM is ready. If set to true, this expects a div called "loading-mask" to be present in the body.
        /// Pass the id of some other DOM node if using a custom loading mask element. Defaults to false.
        /// </summary>
        public object useLoadMask{get;set;}
    }
    #endregion
    #region ApplicationManager
    /// <summary>
    /// @class Ext.ApplicationManager
    /// @extends Ext.AbstractManager
    /// @singleton
    /// @ignore
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ApplicationManager
    {
        public ApplicationManager(){}
    }
    #endregion
    #region apply
    /// <summary>
    /// Copies all the properties of config to obj.
    /// @param {Object} object The receiver of the properties
    /// @param {Object} config The source of the properties
    /// @param {Object} defaults A different object that will also be applied for default values
    /// @return {Object} returns obj
    /// @member Ext apply
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class apply
    {
        public apply(){}
    }
    #endregion
    #region Audio
    /// <summary>
    /// @class Ext.Audio
    /// @extends Ext.Media
    /// *
    /// <p>Provides a simple container for HTML5 Audio.</p>
    /// <p><i>Recommended types: Uncompressed WAV and AIF audio, MP3 audio, and AAC-LC or HE-AAC audio</i></p>
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #url}</li>
    /// <li>{@link #autoPause}</li>
    /// <li>{@link #autoResume}</li>
    /// </ul>
    /// <h2>Useful Methods</h2>
    /// <ul class="list">
    /// <li>{@link #pause}</li>
    /// <li>{@link #play}</li>
    /// <li>{@link #toggle}</li>
    /// </ul>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.Audio/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// var pnl = new Ext.Panel({
    /// fullscreen: true,
    /// items: [
    /// {
    /// xtype: 'audio',
    /// url  : "who-goingmobile.mp3"
    /// }
    /// ]
    /// });</code></pre>
    /// @xtype audio
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Audio : Media
    {
        public Audio(AudioConfig config){}
        public Audio(){}
        public void getConfiguration(){}
        public new void onActivate(){}
        public new void onDeactivate(){}
        /// <summary>
        /// @cfg {String} url
        /// Location of the audio to play.
        /// </summary>
        public JsString componentCls{get;set;}
    }
    #endregion
    #region AudioConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AudioConfig
    {
        public AudioConfig(){}
        /// <summary>
        /// Location of the audio to play.
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region Button
    /// <summary>
    /// @constructor
    /// Create a new button
    /// @param {Object} config The config object
    /// @xtype button
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Button : Ext.Component
    {
        public Button(ButtonConfig config){}
        public Button(){}
        public void afterRender(object ct, object position){}
        public void callHandler(object e){}
        /// <summary>
        /// @private
        /// If {@link #autoEvent} is set, this creates a handler function that automatically fires that configured
        /// event. This is called by initComponent and should never need to be called again.
        /// </summary>
        public void createAutoHandler(){}
        /// <summary>
        /// Gets the text for this Button's badge
        /// @return {String} The button text
        /// </summary>
        public JsString getBadgeText(){return null;}
        /// <summary>
        /// Gets the text for this Button
        /// @return {String} The button text
        /// </summary>
        public JsString getText(){return null;}
        /// <summary>
        /// @cfg {String/Object} autoEvent If provided, a handler function is automatically created that fires
        /// the given event in the configured {@link #scope}.
        /// </summary>
        public new void initComponent(){}
        public new void initEvents(){}
        public void onDisable(){}
        public void onDisableChange(object disabled){}
        public void onEnable(){}
        public void onPress(object e){}
        public void onTapCancel(){}
        public void onTapStart(){}
        /// <summary>
        /// Creates a badge overlay on the button for displaying notifications.
        /// @param {String} text The text going into the badge. If you pass null or undefined the badge will be removed.
        /// @return {Ext.Button} this
        /// </summary>
        public Button setBadge(JsString text){return null;}
        /// <summary>
        /// Assigns this Button's click handler
        /// @param {Function} handler The function to call when the button is clicked
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function is executed.
        /// Defaults to this Button.
        /// @return {Ext.Button} this
        /// </summary>
        public Button setHandler(JsAction handler, object scope){return null;}
        /// <summary>
        /// Sets the background image (inline style) of the button.  This method also changes
        /// the value of the {@link icon} config internally.
        /// @param {String} icon The path to an image to display in the button. If you pass null or undefined the icon will be removed.
        /// @return {Ext.Button} this
        /// </summary>
        public Button setIcon(JsString icon){return null;}
        /// <summary>
        /// Adds a CSS class to the button that changes the align of the button's icon (if one has been defined).  If no icon or iconClass has
        /// been defined, it will only set the value of the {@link iconAlign} internal config.
        /// @param {String} alignment The alignment you would like to align the button. Valid options are 'top', 'bottom', 'left', 'right'.
        /// If you pass false, it will remove the current iconAlign. If you pass nothing or an invalid alignment,
        /// it will default to the last used/default iconAlign.
        /// @return {Ext.Button} this
        /// </summary>
        public Button setIconAlign(JsString alignment){return null;}
        /// <summary>
        /// Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
        /// the value of the {@link iconCls} config internally.
        /// @param {String} cls The CSS class providing the icon image. If you pass null or undefined the iconCls will be removed.
        /// @return {Ext.Button} this
        /// </summary>
        public Button setIconClass(JsString cls){return null;}
        /// <summary>
        /// Sets this Button's text
        /// @param {String} text The button text. If you pass null or undefined the text will be removed.
        /// @return {Ext.Button} this
        /// </summary>
        public Button setText(JsString text){return null;}
        /// <summary>
        /// Creates a badge overlay on the button for displaying notifications.
        /// @param {String} text The text going into the badge. If you pass null or undefined the badge will be removed.
        /// @return {Ext.Button} this
        /// </summary>
        [JsProperty]
        public JsString Badge{private get;[JsMethod(Name="setBadge")]set;}
        /// <summary>
        /// @cfg {String} badgeCls CSS class for badge
        /// Defaults to <tt>'x-badge'</tt>
        /// </summary>
        public JsString badgeCls{get;set;}
        /// <summary>
        /// @cfg {String} badgeText The text to be used for a small badge on the button.
        /// Defaults to <tt>''</tt>
        /// </summary>
        public JsString badgeText{get;set;}
        /// <summary>
        /// Gets the text for this Button's badge
        /// @return {String} The button text
        /// </summary>
        [JsProperty]
        public JsString BadgeText{[JsMethod(Name="getBadgeText")]get;private set;}
        /// <summary>
        /// @cfg {String} baseCls Base CSS class
        /// Defaults to <tt>'x-button'</tt>
        /// </summary>
        public new JsString baseCls{get;set;}
        /// <summary>
        /// @cfg {String} badgeCls CSS class for badge
        /// Defaults to <tt>'x-badge'</tt>
        /// </summary>
        public JsString hasBadgeCls{get;set;}
        /// <summary>
        /// Sets the background image (inline style) of the button.  This method also changes
        /// the value of the {@link icon} config internally.
        /// @param {String} icon The path to an image to display in the button. If you pass null or undefined the icon will be removed.
        /// @return {Ext.Button} this
        /// </summary>
        [JsProperty]
        public JsString Icon{private get;[JsMethod(Name="setIcon")]set;}
        /// <summary>
        /// @cfg {String} iconAlign The alignment of the buttons icon if one has been defined. Valid options
        /// are 'top', 'right', 'bottom', 'left' (defaults to 'left').
        /// </summary>
        public JsString iconAlign{get;set;}
        /// <summary>
        /// Adds a CSS class to the button that changes the align of the button's icon (if one has been defined).  If no icon or iconClass has
        /// been defined, it will only set the value of the {@link iconAlign} internal config.
        /// @param {String} alignment The alignment you would like to align the button. Valid options are 'top', 'bottom', 'left', 'right'.
        /// If you pass false, it will remove the current iconAlign. If you pass nothing or an invalid alignment,
        /// it will default to the last used/default iconAlign.
        /// @return {Ext.Button} this
        /// </summary>
        [JsProperty]
        public JsString IconAlign{private get;[JsMethod(Name="setIconAlign")]set;}
        /// <summary>
        /// Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
        /// the value of the {@link iconCls} config internally.
        /// @param {String} cls The CSS class providing the icon image. If you pass null or undefined the iconCls will be removed.
        /// @return {Ext.Button} this
        /// </summary>
        [JsProperty]
        public JsString IconClass{private get;[JsMethod(Name="setIconClass")]set;}
        /// <summary>
        /// @cfg {Boolean} iconMask
        /// Whether or not to mask the icon with the iconMaskCls configuration. Defaults to false.
        /// </summary>
        public bool iconMask{get;set;}
        /// <summary>
        /// @cfg {String} iconMaskCls
        /// CSS class to be added to the iconEl when the iconMask config is set to true.
        /// Defaults to 'x-icon-mask'
        /// </summary>
        public JsString iconMaskCls{get;set;}
        /// <summary>
        /// @cfg {String} ui
        /// Determines the UI look and feel of the button. Valid options are 'normal', 'back', 'round', 'action', 'forward'.
        /// Defaults to 'normal'.
        /// </summary>
        public bool isButton{get;set;}
        public JsString labelCls{get;set;}
        /// <summary>
        /// @cfg {String} pressedCls CSS class when the button is in pressed state
        /// Defaults to <tt>'x-button-pressed'</tt>
        /// </summary>
        public JsString pressedCls{get;set;}
        /// <summary>
        /// @cfg {Number} pressedDelay
        /// The amount of delay between the tapstart and the moment we add the pressedCls.
        /// Settings this to true defaults to 100ms
        /// </summary>
        public JsNumber pressedDelay{get;set;}
        /// <summary>
        /// Sets this Button's text
        /// @param {String} text The button text. If you pass null or undefined the text will be removed.
        /// @return {Ext.Button} this
        /// Gets the text for this Button
        /// @return {String} The button text
        /// </summary>
        [JsProperty]
        public JsString Text{[JsMethod(Name="getText")]get;[JsMethod(Name="setText")]set;}
        /// <summary>
        /// @cfg {String} ui
        /// Determines the UI look and feel of the button. Valid options are 'normal', 'back', 'round', 'action', 'forward'.
        /// Defaults to 'normal'.
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region ButtonConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ButtonConfig
    {
        public ButtonConfig(){}
        /// <summary>
        /// The text to be used for a small badge on the button.
        /// Defaults to <tt>''</tt>
        /// </summary>
        public JsString badgeText{get;set;}
        /// <summary>
        /// Base CSS class
        /// Defaults to <tt>'x-button'</tt>
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// A CSS class string to apply to the button's main element.
        /// </summary>
        public JsString cls{get;set;}
        /// <summary>
        /// True to start disabled (defaults to false)
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// A function called when the button is clicked (can be used instead of click event).
        /// The handler is passed the following parameters:<div class="mdetail-params"><ul>
        /// <li><code>b</code> : Button<div class="sub-desc">This Button.</div></li>
        /// <li><code>e</code> : EventObject<div class="sub-desc">The click event.</div></li>
        /// </ul></div>
        /// </summary>
        public JsAction handler{get;set;}
        /// <summary>
        /// True to start hidden (defaults to false)
        /// </summary>
        public bool hidden{get;set;}
        /// <summary>
        /// The path to an image to display in the button (the image will be set as the background-image
        /// CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon')
        /// </summary>
        public JsString icon{get;set;}
        /// <summary>
        /// The alignment of the buttons icon if one has been defined. Valid options
        /// are 'top', 'right', 'bottom', 'left' (defaults to 'left').
        /// </summary>
        public JsString iconAlign{get;set;}
        /// <summary>
        /// A css class which sets a background image to be used as the icon for this button
        /// </summary>
        public JsString iconCls{get;set;}
        /// <summary>
        /// Whether or not to mask the icon with the iconMaskCls configuration. Defaults to false.
        /// </summary>
        public bool iconMask{get;set;}
        /// <summary>
        /// CSS class to be added to the iconEl when the iconMask config is set to true.
        /// Defaults to 'x-icon-mask'
        /// </summary>
        public JsString iconMaskCls{get;set;}
        /// <summary>
        /// CSS class when the button is in pressed state
        /// Defaults to <tt>'x-button-pressed'</tt>
        /// </summary>
        public JsString pressedCls{get;set;}
        /// <summary>
        /// The amount of delay between the tapstart and the moment we add the pressedCls.
        /// Settings this to true defaults to 100ms
        /// </summary>
        public JsNumber pressedDelay{get;set;}
        /// <summary>
        /// The scope (<tt><b>this</b></tt> reference) in which the
        /// <code>{@link #handler}</code> and <code>{@link #toggleHandler}</code> is
        /// executed. Defaults to this Button.
        /// </summary>
        public object scope{get;set;}
        /// <summary>
        /// The button text to be used as innerHTML (html tags are accepted)
        /// </summary>
        public JsString text{get;set;}
    }
    #endregion
    #region Carousel
    /// <summary>
    /// @class Ext.Carousel
    /// @extends Ext.Panel
    /// *
    /// <p>A customized Panel which provides the ability to slide back and forth between
    /// different child items.</p>
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #ui} (defines the style of the carousel)</li>
    /// <li>{@link #direction} (defines the direction of the carousel)</li>
    /// <li>{@link #indicator} (defines if the indicator show be shown)</li>
    /// </ul>
    /// <h2>Useful Methods</h2>
    /// <ul class="list">
    /// <li>{@link #next} (moves to the next card)</li>
    /// <li>{@link #prev} (moves to the previous card)</li>
    /// <li>{@link #setActiveItem} (moves to the passed card)</li>
    /// </ul>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.Carousel/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// var carousel = new Ext.Carousel({
    /// items: [
    /// {
    /// html: '&lt;p&gt;Navigate the carousel on this page by swiping left/right.&lt;/p&gt;',
    /// cls : 'card card1'
    /// },
    /// {
    /// html: '&lt;p&gt;Clicking on either side of the indicators below&lt;/p&gt;',
    /// cls : 'card card2'
    /// },
    /// {
    /// html: 'Card #3',
    /// cls : 'card card3'
    /// }
    /// ]
    /// });
    /// var panel = new Ext.Panel({
    /// cls: 'cards',
    /// layout: {
    /// type : 'vbox',
    /// align: 'stretch'
    /// },
    /// defaults: {
    /// flex: 1
    /// },
    /// items: [
    /// carousel,
    /// {
    /// xtype    : 'carousel',
    /// ui       : 'light',
    /// direction: 'vertical',
    /// items: [
    /// {
    /// html: '&lt;p&gt;Carousels can be vertical and given a ui of "light" or "dark".&lt;/p&gt;',
    /// cls : 'card card1'
    /// },
    /// {
    /// html: 'Card #2',
    /// cls : 'card card2'
    /// },
    /// {
    /// html: 'Card #3',
    /// cls : 'card card3'
    /// }
    /// ]
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// @xtype carousel
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Carousel : Ext.Panel
    {
        /// <summary>
        /// @class Ext.Carousel.Indicator
        /// @extends Ext.Component
        /// @xtype carouselindicator
        /// @private
        /// *
        /// A private utility class used by Ext.Carousel to create indicators.
        /// </summary>
        [JsType(JsMode.Prototype, Export=false)]
        public partial class Indicator : Ext.Component
        {
            public Indicator(Ext.ComponentConfig config){}
            public Indicator(){}
            public void createIndicator(){}
            public new void initComponent(){}
            public void onBeforeCardSwitch(object carousel, object card, object old, object index){}
            public void onCardAdd(){}
            public void onCardRemove(){}
            public new void onRender(){}
            public void onTap(object e, object t){}
            /// <summary>
            /// @class Ext.Carousel.Indicator
            /// @extends Ext.Component
            /// @xtype carouselindicator
            /// @private
            /// *
            /// A private utility class used by Ext.Carousel to create indicators.
            /// </summary>
            public new JsString baseCls{get;set;}
        }
        public Carousel(CarouselConfig config){}
        public Carousel(){}
        /// <summary>
        /// The afterLayout method on the carousel just makes sure the active card
        /// is still into view. It also makes sure the indicator is pointing to
        /// the right card.
        /// @private
        /// </summary>
        public void afterLayout(){}
        public new void afterRender(){}
        public new void beforeDestroy(){}
        /// <summary>
        /// Returns the index of the currently active card.
        /// @return {Number} The index of the currently active card.
        /// </summary>
        public JsNumber getActiveIndex(){return null;}
        /// <summary>
        /// Returns the difference between the index of the active card and the passed card.
        /// @private
        /// </summary>
        public void getCardIndexOffset(object card){}
        /// <summary>
        /// Returns the amount of pixels from the current drag to a card.
        /// @private
        /// </summary>
        public void getCardOffset(object card){}
        public new void initComponent(){}
        /// <summary>
        /// Returns true if the passed card is within 2 cards from the active card.
        /// @private
        /// </summary>
        public void isCardInRange(object card){}
        /// <summary>
        /// Method to determine whether this Sortable is currently sorting.
        /// @return {Boolean} the sorting state of this Sortable.
        /// </summary>
        public bool isHorizontal(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently disabled.
        /// @return {Boolean} the disabled state of this Sortable.
        /// </summary>
        public bool isVertical(){return false;}
        /// <summary>
        /// Switches the next card
        /// </summary>
        public void next(){}
        public void onAdd(){}
        /// <summary>
        /// Here we make sure that the card we are switching to is not translated
        /// by the carousel anymore. This is only if we are switching card using
        /// the setActiveItem of setActiveItem methods and thus customDrag is not set
        /// to true.
        /// @private
        /// </summary>
        public void onBeforeCardSwitch(object newCard){}
        /// <summary>
        /// This function makes sure that all the cards are in correct locations
        /// after a card switch
        /// @private
        /// </summary>
        public void onCardSwitch(object newCard, object oldCard, object index, object animated){}
        /// <summary>
        /// The onDrag method sets the currentScroll object. It also slows down the drag
        /// if we are at the bounds of the carousel.
        /// @private
        /// </summary>
        public void onDrag(object e){}
        /// <summary>
        /// This determines if we are going to the next card, the previous card, or back to the active card.
        /// @private
        /// </summary>
        public void onDragEnd(object e, object t){}
        public void onRemove(){}
        public void onTransitionEnd(object e, object t){}
        /// <summary>
        /// Switches the previous card
        /// </summary>
        public void prev(){}
        /// <summary>
        /// This is an internal function that is called in onDragEnd that goes to
        /// the next or previous card.
        /// @private
        /// </summary>
        public void scrollToCard(object newCard){}
        /// <summary>
        /// This will update all the cards to their correct position based on the current drag.
        /// It can be passed true to animate the position updates.
        /// @private
        /// </summary>
        public void updateCardPositions(object animate){}
        /// <summary>
        /// Returns the index of the currently active card.
        /// @return {Number} The index of the currently active card.
        /// </summary>
        [JsProperty]
        public JsNumber ActiveIndex{[JsMethod(Name="getActiveIndex")]get;private set;}
        /// <summary>
        /// @cfg {String} baseCls
        /// The base CSS class to apply to the Carousel's element (defaults to <code>'x-carousel'</code>).
        /// </summary>
        public new JsString baseCls{get;set;}
        /// <summary>
        /// @cfg {String} direction
        /// The direction of the Carousel. Default is 'horizontal'. 'vertical' also available.
        /// </summary>
        public JsString direction{get;set;}
        public bool horizontal{get;set;}
        /// <summary>
        /// @cfg {Boolean} indicator
        /// Provides an indicator while toggling between child items to let the user
        /// know where they are in the card stack.
        /// </summary>
        public bool indicator{get;set;}
        /// <summary>
        /// @cfg {String} ui
        /// Style options for Carousel. Default is 'dark'. 'light' is also available.
        /// </summary>
        public JsString ui{get;set;}
        public bool vertical{get;set;}
    }
    #endregion
    #region CarouselConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class CarouselConfig
    {
        public CarouselConfig(){}
        /// <summary>
        /// The base CSS class to apply to the Carousel's element (defaults to <code>'x-carousel'</code>).
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// The direction of the Carousel. Default is 'horizontal'. 'vertical' also available.
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// Provides an indicator while toggling between child items to let the user
        /// know where they are in the card stack.
        /// </summary>
        public bool indicator{get;set;}
        /// <summary>
        /// Style options for Carousel. Default is 'dark'. 'light' is also available.
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region Component
    /// <summary>
    /// @class Ext.Component
    /// @extends Ext.lib.Component
    /// <p>Base class for all Ext components.  All subclasses of Component may participate in the automated
    /// Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.
    /// Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,
    /// or they may be added dynamically via the {@link Ext.Container#add add} method.</p>
    /// <p>The Component base class has built-in support for basic hide/show and enable/disable behavior.</p>
    /// <p>All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via
    /// {@link Ext#getCmp}, passing the {@link #id}.</p>
    /// <p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or
    /// {@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).</p>
    /// <p>See the <a href="http://extjs.com/learn/Tutorial:Creating_new_UI_controls">Creating new UI controls</a> tutorial for details on how
    /// and to either extend or augment ExtJs base classes to create custom Components.</p>
    /// <p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
    /// xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:</p>
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #fullscreen}</li>
    /// </ul>
    /// <pre>
    /// xtype            Class
    /// -------------    ------------------
    /// button           {@link Ext.Button}
    /// component        {@link Ext.Component}
    /// container        {@link Ext.Container}
    /// dataview         {@link Ext.DataView}
    /// panel            {@link Ext.Panel}
    /// slider           {@link Ext.form.Slider}
    /// toolbar          {@link Ext.Toolbar}
    /// spacer           {@link Ext.Spacer}
    /// tabpanel         {@link Ext.TabPanel}
    /// Form components
    /// ---------------------------------------
    /// formpanel        {@link Ext.form.FormPanel}
    /// checkboxfield    {@link Ext.form.Checkbox}
    /// selectfield      {@link Ext.form.Select}
    /// field            {@link Ext.form.Field}
    /// fieldset         {@link Ext.form.FieldSet}
    /// hiddenfield      {@link Ext.form.Hidden}
    /// numberfield      {@link Ext.form.Number}
    /// radiofield       {@link Ext.form.Radio}
    /// textareafield    {@link Ext.form.TextArea}
    /// textfield        {@link Ext.form.Text}
    /// togglefield      {@link Ext.form.Toggle}
    /// </pre>
    /// @constructor
    /// @param {Ext.Element/String/Object} config The configuration options may be specified as either:
    /// <div class="mdetail-params"><ul>
    /// <li><b>an element</b> :
    /// <p class="sub-desc">it is set as the internal element and its id used as the component id</p></li>
    /// <li><b>a string</b> :
    /// <p class="sub-desc">it is assumed to be the id of an existing element and is used as the component id</p></li>
    /// <li><b>anything else</b> :
    /// <p class="sub-desc">it is assumed to be a standard config object and is applied to the component</p></li>
    /// </ul></div>
    /// @xtype component
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Component : Ext.lib.Component
    {
        public Component(Ext.ComponentConfig config){}
        public Component(){}
        public void afterComponentLayout(){}
        public new void afterRender(){}
        public void alignTo(object alignTo, object allowSides, object offset){}
        public void beforeDestroy(){}
        public void doHide(object el, object options){}
        /// <summary>
        /// Hide the component
        /// @param {Object/String/Boolean} animation (optional) Defaults to false.
        /// </summary>
        public void hide(object animation){}
        public void initComponent(){}
        public new void initEvents(){}
        public new void onDestroy(){}
        public void onFloatingTouchStart(object e){}
        public void onHide(object animation, object fireHideEvent){}
        public void onRender(){}
        public void onShow(object animation){}
        /// <summary>
        /// Show this component centered of its parent or the window
        /// This only applies when the component is floating.
        /// @param {Boolean} centered True to center, false to remove centering
        /// @returns {Ext.Component} this
        /// </summary>
        public void setCentered(bool centered, object update){}
        /// <summary>
        /// Sets a Component as draggable.
        /// @param {Boolean/Mixed} draggable On first call, this can be a config object for {@link Ext.util.Draggable}.
        /// Afterwards, if set to false, the existing draggable object will be disabled
        /// @param {Boolean} autoShow
        /// </summary>
        public void setDraggable(object draggable, bool autoShow){}
        /// <summary>
        /// Sets a Component as floating.
        /// @param {Boolean} floating
        /// @param {Boolean} autoShow
        /// </summary>
        public void setFloating(bool floating, bool autoShow){}
        /// <summary>
        /// Sets the orientation for the Panel.
        /// @param {String} orientation 'landscape' or 'portrait'
        /// @param {Number/String} width New width of the Panel.
        /// @param {Number/String} height New height of the Panel.
        /// </summary>
        public void setOrientation(JsString orientation, object w, object h){}
        /// <summary>
        /// Sets a Component as scrollable.
        /// @param {Mixed} config
        /// Acceptable values are a Ext.Scroller configuration, 'horizontal', 'vertical', 'both', and false
        /// </summary>
        public void setScrollable(object config){}
        /// <summary>
        /// Show the component.
        /// @param {Object/String/Boolean} animation (optional) Defaults to false.
        /// </summary>
        public void show(object animation){}
        /// <summary>
        /// Show this component relative another component or element.
        /// @param {Mixed} alignTo Element or Component
        /// @param {Object/String/Boolean} animation
        /// @param {Boolean} allowOnSide true to allow this element to be aligned on the left or right.
        /// @returns {Ext.Component} this
        /// </summary>
        public void showBy(object alignTo, object animation, bool allowSides, object anchor){}
        public void update(){}
        /// <summary>
        /// @cfg {Boolean} centered
        /// Center the Component. Defaults to false.
        /// </summary>
        public bool centered{get;set;}
        /// <summary>
        /// @cfg {Boolean} floatingCls
        /// The class that is being added to this component when its floating.
        /// (defaults to x-floating)
        /// </summary>
        public bool floatingCls{get;set;}
        /// <summary>
        /// @cfg {Boolean} fullscreen
        /// Force the component to take up 100% width and height available. Defaults to false.
        /// Setting this configuration immediately sets the monitorOrientation config to true.
        /// Setting this to true will render the component instantly.
        /// </summary>
        public bool fullscreen{get;set;}
        /// <summary>
        /// @cfg {Boolean} hideOnMaskTap
        /// True to automatically bind a tap listener to the mask that hides the window.
        /// Defaults to true. Note: if you set this property to false you have to programmaticaly
        /// hide the overlay.
        /// </summary>
        public bool hideOnMaskTap{get;set;}
        /// <summary>
        /// @cfg {Boolean} layoutOnOrientationChange
        /// Set this to true to automatically relayout this component on orientation change.
        /// This property is set to true by default if a component is floating unless you specifically
        /// set this to false. Also note that you dont have to set this property to true if this component
        /// is a child of a fullscreen container, since fullscreen components are also laid out automatically
        /// on orientation change.
        /// Defaults to <tt>null</tt>
        /// </summary>
        public bool layoutOnOrientationChange{get;set;}
        /// <summary>
        /// @cfg {Boolean} modal
        /// True to make the Component modal and mask everything behind it when displayed, false to display it without
        /// restricting access to other UI elements (defaults to false).
        /// </summary>
        public bool modal{get;set;}
        /// <summary>
        /// @cfg {Boolean} monitorOrientation
        /// Monitor Orientation change
        /// </summary>
        public bool monitorOrientation{get;set;}
        /// <summary>
        /// Sets a Component as scrollable.
        /// @param {Mixed} config
        /// Acceptable values are a Ext.Scroller configuration, 'horizontal', 'vertical', 'both', and false
        /// </summary>
        [JsProperty]
        public object Scrollable{private get;[JsMethod(Name="setScrollable")]set;}
        /// <summary>
        /// @cfg {Object/String/Boolean} showAnimation
        /// The type of animation you want to use when this component is shown. If you set this
        /// this hide animation will automatically be the opposite.
        /// </summary>
        public object showAnimation{get;set;}
        /// <summary>
        /// @cfg {Boolean} stopMaskTapEvent
        /// True to stop the event that fires when you click outside the floating component.
        /// Defalts to true.
        /// </summary>
        public bool stopMaskTapEvent{get;set;}
    }
    #endregion
    #region ComponentConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ComponentConfig
    {
        public ComponentConfig(){}
        /// <summary>
        /// Center the Component. Defaults to false.
        /// </summary>
        public bool centered{get;set;}
        /// <summary>
        /// The class that is being added to this component when its floating.
        /// (defaults to x-floating)
        /// </summary>
        public bool floatingCls{get;set;}
        /// <summary>
        /// Force the component to take up 100% width and height available. Defaults to false.
        /// Setting this configuration immediately sets the monitorOrientation config to true.
        /// Setting this to true will render the component instantly.
        /// </summary>
        public bool fullscreen{get;set;}
        /// <summary>
        /// True to automatically bind a tap listener to the mask that hides the window.
        /// Defaults to true. Note: if you set this property to false you have to programmaticaly
        /// hide the overlay.
        /// </summary>
        public bool hideOnMaskTap{get;set;}
        /// <summary>
        /// Set this to true to automatically relayout this component on orientation change.
        /// This property is set to true by default if a component is floating unless you specifically
        /// set this to false. Also note that you dont have to set this property to true if this component
        /// is a child of a fullscreen container, since fullscreen components are also laid out automatically
        /// on orientation change.
        /// Defaults to <tt>null</tt>
        /// </summary>
        public bool layoutOnOrientationChange{get;set;}
        /// <summary>
        /// True to make the Component modal and mask everything behind it when displayed, false to display it without
        /// restricting access to other UI elements (defaults to false).
        /// </summary>
        public bool modal{get;set;}
        /// <summary>
        /// Monitor Orientation change
        /// </summary>
        public bool monitorOrientation{get;set;}
        /// <summary>
        /// Configure the component to be scrollable. Acceptable values are:
        /// <ul>
        /// <li>'horizontal', 'vertical', 'both' to enabling scrolling for that direction.</li>
        /// <li>A {@link Ext.util.Scroller Scroller} configuration.</li>
        /// <li>false to explicitly disable scrolling.</li>
        /// </ul>
        /// Enabling scrolling immediately sets the monitorOrientation config to true (for {@link Ext.Panel Panel})
        /// </summary>
        public object scroll{get;set;}
        /// <summary>
        /// The type of animation you want to use when this component is shown. If you set this
        /// this hide animation will automatically be the opposite.
        /// </summary>
        public object showAnimation{get;set;}
        /// <summary>
        /// True to stop the event that fires when you click outside the floating component.
        /// Defalts to true.
        /// </summary>
        public bool stopMaskTapEvent{get;set;}
    }
    #endregion
    #region ComponentMgr
    /// <summary>
    /// @class Ext.ComponentMgr
    /// @extends Ext.AbstractManager
    /// <p>Provides a registry of all Components (instances of {@link Ext.Component} or any subclass
    /// thereof) on a page so that they can be easily accessed by {@link Ext.Component component}
    /// {@link Ext.Component#id id} (see {@link #get}, or the convenience method {@link Ext#getCmp Ext.getCmp}).</p>
    /// <p>This object also provides a registry of available Component <i>classes</i>
    /// indexed by a mnemonic code known as the Component's {@link Ext.Component#xtype xtype}.
    /// The <code>{@link Ext.Component#xtype xtype}</code> provides a way to avoid instantiating child Components
    /// when creating a full, nested config object for a complete Ext page.</p>
    /// <p>A child Component may be specified simply as a <i>config object</i>
    /// as long as the correct <code>{@link Ext.Component#xtype xtype}</code> is specified so that if and when the Component
    /// needs rendering, the correct type can be looked up for lazy instantiation.</p>
    /// <p>For a list of all available <code>{@link Ext.Component#xtype xtypes}</code>, see {@link Ext.Component}.</p>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentMgr
    {
        public ComponentMgr(){}
    }
    #endregion
    #region ComponentQuery
    /// <summary>
    /// @class Ext.ComponentQuery
    /// @extends Object
    /// *
    /// Provides searching of Components within Ext.ComponentMgr (globally) or a specific
    /// Ext.Container on the document with a similar syntax to a CSS selector.
    /// *
    /// Xtypes can be retrieved by their name with an optional . prefix
    /// <ul>
    /// <li>component or .component</li>
    /// <li>gridpanel or .gridpanel</li>
    /// </ul>
    /// *
    /// An itemId or id must be prefixed with a #.
    /// <ul>
    /// <li>#myContainer</li>
    /// </ul>
    /// *
    /// *
    /// Attributes must be wrapped in brackets
    /// <ul>
    /// <li>component[autoScroll]</li>
    /// <li>panel[title="Test"]</li>
    /// </ul>
    /// *
    /// Member expressions from candidate Components may be tested. If the expression returns a <i>truthy</i> value,
    /// the candidate Component will be included in the query:<pre><code>
    /// var disabledFields = myFormPanel.query("{isDisabled()}");
    /// </code></pre>
    /// *
    /// Pseudo classes may be used to filter results in the same way as in {@link Ext.DomQuery DomQuery}:<code><pre>
    /// // Function receives array and returns a filtered array.
    /// Ext.ComponentQuery.pseudos.invalid = function(items) {
    /// var i = 0, l = items.length, c, result = [];
    /// for (; i < l; i++) {
    /// if (!(c = items[i]).isValid()) {
    /// result.push(c);
    /// }
    /// }
    /// return result;
    /// };
    /// var invalidFields = myFormPanel.query('field:invalid');
    /// if (invalidFields.length) {
    /// invalidFields[0].getEl().scrollIntoView(myFormPanel.body);
    /// for (var i = 0, l = invalidFields.length; i < l; i++) {
    /// invalidFields[i].getEl().frame("red");
    /// }
    /// }
    /// </pre></code>
    /// *
    /// Queries return an array of components.
    /// Here are some example queries.
    /// <pre><code>
    /// // retrieve all Ext.Panel's on the document by xtype
    /// var panelsArray = Ext.ComponentQuery.query('.panel');
    /// // retrieve all Ext.Panels within the container with an id myCt
    /// var panelsWithinmyCt = Ext.ComponentQuery.query('#myCt .panel');
    /// // retrieve all direct children which are Ext.Panels within myCt
    /// var directChildPanel = Ext.ComponentQuery.query('#myCt > .panel');
    /// // retrieve all gridpanels and listviews
    /// var gridsAndLists = Ext.ComponentQuery.query('gridpanel, listview');
    /// </code></pre>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentQuery
    {
        public ComponentQuery(){}
    }
    #endregion
    #region CompositeElement
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CompositeElement
    {
        public CompositeElement(){}
        /// <summary>
        /// Adds elements to this Composite object.
        /// @param {Mixed} els Either an Array of DOM elements to add, or another Composite object who's elements should be added.
        /// @return {CompositeElement} This Composite object.
        /// </summary>
        public void add(object els, object root){}
        public void addListener(object eventName, object handler, object scope, object opt){}
        /// <summary>
        /// Removes all elements.
        /// </summary>
        public void clear(){}
        /// <summary>
        /// Returns true if this composite contains the passed element
        /// @param {Mixed} el The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
        /// @return Boolean
        /// </summary>
        public void contains(object el){}
        /// <summary>
        /// <p>Calls the passed function for each element in this composite.</p>
        /// @param {Function} fn The function to call. The function is passed the following parameters:<ul>
        /// <li><b>el</b> : Element<div class="sub-desc">The current Element in the iteration.
        /// <b>This is the flyweight (shared) Ext.Element instance, so if you require a
        /// a reference to the dom node, use el.dom.</b></div></li>
        /// <li><b>c</b> : Composite<div class="sub-desc">This Composite object.</div></li>
        /// <li><b>idx</b> : Number<div class="sub-desc">The zero-based index in the iteration.</div></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<i>this</i> reference) in which the function is executed. (defaults to the Element)
        /// @return {CompositeElement} this
        /// </summary>
        public void each(JsAction fn, object scope){}
        /// <summary>
        /// Clears this Composite and adds the elements passed.
        /// @param {Mixed} els Either an array of DOM elements, or another Composite from which to fill this Composite.
        /// @return {CompositeElement} this
        /// </summary>
        public void fill(object els){}
        /// <summary>
        /// Filters this composite to only elements that match the passed selector.
        /// @param {String/Function} selector A string CSS selector or a comparison function.
        /// The comparison function will be called with the following arguments:<ul>
        /// <li><code>el</code> : Ext.Element<div class="sub-desc">The current DOM element.</div></li>
        /// <li><code>index</code> : Number<div class="sub-desc">The current index within the collection.</div></li>
        /// </ul>
        /// @return {CompositeElement} this
        /// </summary>
        public void filter(object selector){}
        /// <summary>
        /// Returns the first Element
        /// @return {Ext.Element}
        /// </summary>
        public void first(){}
        /// <summary>
        /// Returns the number of elements in this Composite.
        /// @return Number
        /// </summary>
        public void getCount(){}
        public void getElement(object el){}
        /// <summary>
        /// Find the index of the passed element within the composite collection.
        /// @param {Mixed} el The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
        /// @return Number The index of the passed Ext.Element in the composite collection, or -1 if not found.
        /// </summary>
        public void indexOf(object el){}
        public void invoke(object fn, object args){}
        /// <summary>
        /// Returns a flyweight Element of the dom element object at the specified index
        /// @param {Number} index
        /// @return {Ext.Element}
        /// </summary>
        public void item(JsNumber index){}
        /// <summary>
        /// Returns the last Element
        /// @return {Ext.Element}
        /// </summary>
        public void last(){}
        public void transformElement(object el){}
        public bool isComposite{get;set;}
    }
    #endregion
    #region CompositeElementLite
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CompositeElementLite
    {
        public CompositeElementLite(){}
        /// <summary>
        /// @class Ext.CompositeElementLite
        /// </summary>
        public void addElements(object els, object root){}
        /// <summary>
        /// Removes the specified element(s).
        /// @param {Mixed} el The id of an element, the Element itself, the index of the element in this composite
        /// or an array of any of those.
        /// @param {Boolean} removeDom (optional) True to also remove the element from the document
        /// @return {CompositeElement} this
        /// </summary>
        public void removeElement(object keys, bool removeDom){}
        /// <summary>
        /// Replaces the specified element with the passed element.
        /// @param {Mixed} el The id of an element, the Element itself, the index of the element in this composite
        /// to replace.
        /// @param {Mixed} replacement The id of an element or the Element itself.
        /// @param {Boolean} domReplace (Optional) True to remove and replace the element in the document too.
        /// @return {CompositeElement} this
        /// </summary>
        public void replaceElement(object el, object replacement, bool domReplace){}
    }
    #endregion
    #region Container
    /// <summary>
    /// @class Ext.Container
    /// @extends Ext.lib.Container
    /// <p>Base class for any {@link Ext.BoxComponent} that may contain other Components. Containers handle the
    /// basic behavior of containing items, namely adding, inserting and removing items.</p>
    /// *
    /// <p><u><b>Layout</b></u></p>
    /// <p>Container classes delegate the rendering of child Components to a layout
    /// manager class which must be configured into the Container using the
    /// <code><b>{@link #layout}</b></code> configuration property.</p>
    /// <p>When either specifying child <code>{@link #items}</code> of a Container,
    /// or dynamically {@link #add adding} Components to a Container, remember to
    /// consider how you wish the Container to arrange those child elements, and
    /// whether those child elements need to be sized using one of Ext's built-in
    /// <b><code>{@link #layout}</code></b> schemes. By default, Containers use the
    /// {@link Ext.layout.AutoContainerLayout AutoContainerLayout} scheme which only
    /// renders child components, appending them one after the other inside the
    /// Container, and <b>does not apply any sizing</b> at all.</p>
    /// <p>A common mistake is when a developer neglects to specify a
    /// <b><code>{@link #layout}</code></b>. If a Container is left to use the default
    /// {@link Ext.layout.AutoContainerLayout AutoContainerLayout} scheme, none of its
    /// child components will be resized, or changed in any way when the Container
    /// is resized.</p>
    /// @xtype container
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Container : Ext.lib.Container
    {
        public Container(Ext.ContainerConfig config){}
        public Container(){}
        public void adjustScroller(object offset){}
        public new void afterLayout(object layout){}
        public new void afterRender(){}
        /// <summary>
        /// Disable this container by masking out
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enable this container by removing mask
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Returns the current activeItem for the layout (only for a card layout)
        /// @return {activeItem} activeItem Current active component
        /// </summary>
        public void getActiveItem(){}
        public void getClosestScroller(){}
        public void getLastWindowScroll(){}
        public void handleFieldEventListener(object isAdding, object item){}
        /// <summary>
        /// @cfg {String/Mixed} cardSwitchAnimation
        /// Animation to be used during transitions of cards. Note this only works when this container has a CardLayout.
        /// Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
        /// Defaults to <tt>null</tt>.
        /// </summary>
        public new void initComponent(){}
        /// <summary>
        /// A template method that can be implemented by subclasses of
        /// Container. By returning false we can cancel the card switch.
        /// @param {Ext.Component} newCard The card that will be switched to
        /// @param {Ext.Component} oldCard The card that will be switched from
        /// @param {Number} newIndex The Container index position of the selected card
        /// @param {Boolean} animated True if this cardswitch will be animated
        /// @private
        /// </summary>
        public void onBeforeCardSwitch(Ext.Component newCard, Ext.Component oldCard, JsNumber newIndex, bool animated){}
        /// <summary>
        /// A template method that can be implemented by subclasses of
        /// Container. If the card is switched using an animation, this method
        /// will be called after the animation has finished.
        /// @param {Ext.Component} newCard The card that has been switched to
        /// @param {Ext.Component} oldCard The card that has been switched from
        /// @param {Number} newIndex The Container index position of the selected card
        /// @param {Boolean} animated True if this cardswitch was animated
        /// @private
        /// </summary>
        public void onCardSwitch(Ext.Component newCard, Ext.Component oldCard, JsNumber newIndex, bool animated){}
        public void onFieldAdd(object key, object field){}
        public void onFieldBeforeFocus(object field, object e){}
        public void onFieldBlur(object field, object e){}
        public void onFieldFocus(object field, object e){}
        public void onFieldKeyUp(object field, object e){}
        public void onFieldRemove(object key, object field){}
        public void onFieldScrollStart(){}
        public void onItemAdd(object me, object item){}
        public void onItemRemove(object me, object item){}
        public void resetLastWindowScroll(){}
        /// <summary>
        /// Allows you to set the active card in this container. This
        /// method is only available if the container uses a CardLayout.
        /// Note that a Carousel and TabPanel both get a CardLayout
        /// automatically, so both of those components are able to use this method.
        /// @param {Ext.Component/Number/Object} card The card you want to be made active. A number
        /// is interpreted as a card index. An object will be converted to a Component using the
        /// objects xtype property, then added to the container and made active. Passing a Component
        /// will make sure the component is a child of this container, and then make it active.
        /// @param {String/Object} cardSwitchAnimation (optional) The cardSwitchAnimation used to switch between the cards.
        /// This can be an animation type string or an animation configuration object.
        /// @return {Ext.Container} this
        /// </summary>
        public Ext.Container setActiveItem(object card, object animation){return null;}
        /// <summary>
        /// @cfg {String/Mixed} cardSwitchAnimation
        /// Animation to be used during transitions of cards. Note this only works when this container has a CardLayout.
        /// Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
        /// Defaults to <tt>null</tt>.
        /// </summary>
        public object cardSwitchAnimation{get;set;}
    }
    #endregion
    #region ContainerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ContainerConfig
    {
        public ContainerConfig(){}
        /// <summary>
        /// Animation to be used during transitions of cards. Note this only works when this container has a CardLayout.
        /// Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
        /// Defaults to <tt>null</tt>.
        /// </summary>
        public object cardSwitchAnimation{get;set;}
    }
    #endregion
    #region Controller
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.Controller
    /// @extends Ext.util.Observable
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Controller : Observable
    {
        public Controller(){}
        public Controller(ObservableConfig config){}
        /// <summary>
        /// Callback automatically tied to the index view's 'build' event. By default this just renders the registered
        /// 'build' view
        /// </summary>
        public void build(){}
        /// <summary>
        /// @private
        /// Used internally whenever we want to remove a component from its parent container. See onCancelEdit and onCancelBuild
        /// @param {Ext.Component} view The component to close
        /// </summary>
        public void closeView(Ext.Component view){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.Controller
        /// @extends Ext.util.Observable
        /// @constructor
        /// </summary>
        public Controller(object config){}
        /// <summary>
        /// This function allows you to add listeners to a view
        /// in a convenient way
        /// </summary>
        public void control(object view, object actions, object itemName){}
        /// <summary>
        /// Saves a phantom Model instance via its configured Proxy. Fires the 'instance-created' event if successful,
        /// the 'instance-creation-failed' event if not.
        /// @param {Object} data The data to create the instance from
        /// @param {Object} options Optional options object containing callbacks for success and failure plus optional scope
        /// </summary>
        public void create(object data, object options){}
        /// <summary>
        /// Destroys one or more existing, previously saved model instances
        /// @param {Ext.data.Model} instance The model instance to destroy
        /// @param {Object} options success and failure callbacks
        /// </summary>
        public void destroy(Model instance, object options){}
        /// <summary>
        /// Renders the edit form for a given model instance
        /// @param {Ext.data.Model} instance The instance to edit
        /// </summary>
        public void edit(Model instance){}
        /// <summary>
        /// Returns the listeners to attach to the view rendered by the {@link #build} action. By default this returns listeners
        /// for save and cancel, but this can be overridden
        /// @return {Object} listeners
        /// </summary>
        public object getBuildListeners(){return null;}
        /// <summary>
        /// Returns the listeners to attach to the view rendered by the {@link #edit} action. By default this returns listeners
        /// for save and cancel, but this can be overridden
        /// @return {Object} listeners
        /// </summary>
        public object getEditListeners(){return null;}
        /// <summary>
        /// Returns the constructor for the model type linked to this controller
        /// @return {Ext.data.Model} The model constructor
        /// </summary>
        public Model getModel(){return null;}
        public void index(){}
        /// <summary>
        /// Handler for the 'cancel' event fired by an {@link #build} view. By default this just closes the view
        /// @param {Ext.Component} view The build form
        /// </summary>
        public void onCancelBuild(Ext.Component view){}
        /// <summary>
        /// Handler for the 'cancel' event fired by an {@link #edit} view. By default this just closes the view
        /// @param {Ext.Component} view The edit form
        /// </summary>
        public void onCancelEdit(Ext.Component view){}
        /// <summary>
        /// Callback automatically tied to the index view's 'create' event. By default this just calls the controller's
        /// create function with the data and some basic callbacks to handle errors or show success. Can be overridden
        /// to provide custom behavior
        /// @param {Ext.View} view The view instance that fired the event
        /// </summary>
        public void onCreateInstance(object view){}
        /// <summary>
        /// Callback automatically tied to the index view's 'destroy' event. By default that just calls the controller's
        /// destroy function with the model instance and some basic callbacks to handle errors or show success. Can be
        /// overridden to provide custom behavior.
        /// @param {Ext.data.Model} instance The instance to destroy
        /// @param {Ext.View} view The view instance that fired the event
        /// </summary>
        public void onDestroyInstance(Model instance, object view){}
        /// <summary>
        /// Callback automatically tied to the index view's 'update' event. By default this just calls the controller's
        /// update function with the data and some basic callbacks to handle errors or show success. Can be overridden
        /// to provide custom behavior
        /// @param {Ext.Component} view The view instance that fired the event
        /// </summary>
        public void onUpdateInstance(Ext.Component view){}
        /// <summary>
        /// Renders a given view based on a registered name
        /// @param {String} viewName The name of the view to render
        /// @param {Object} config Optional config object
        /// @return {Ext.View} The view instance
        /// </summary>
        public void render(object config, object target){}
        /// <summary>
        /// Sets the default container that components rendered using {@link #render} will be added to.
        /// In many applications there is a fixed navigation panel and a content panel - the content
        /// panel would usually form the render target in this type of setup.
        /// @param {Ext.Container} target The container to add rendered components to
        /// </summary>
        public void setRenderTarget(Ext.Container target){}
        /// <summary>
        /// Updates an existing model instance by applying optional updates to it and attempting to save
        /// @param {Ext.data.Model} instance The existing instance
        /// @param {Object} updates Optional additional updates to apply to the instance before saving
        /// @param {Object} options success and failure callback functions
        /// </summary>
        public void update(Model instance, object updates, object options){}
        /// <summary>
        /// Returns the listeners to attach to the view rendered by the {@link #build} action. By default this returns listeners
        /// for save and cancel, but this can be overridden
        /// @return {Object} listeners
        /// </summary>
        [JsProperty]
        public object BuildListeners{[JsMethod(Name="getBuildListeners")]get;private set;}
        /// <summary>
        /// Returns the listeners to attach to the view rendered by the {@link #edit} action. By default this returns listeners
        /// for save and cancel, but this can be overridden
        /// @return {Object} listeners
        /// </summary>
        [JsProperty]
        public object EditListeners{[JsMethod(Name="getEditListeners")]get;private set;}
        /// <summary>
        /// Returns the constructor for the model type linked to this controller
        /// @return {Ext.data.Model} The model constructor
        /// </summary>
        [JsProperty]
        public Model Model{[JsMethod(Name="getModel")]get;private set;}
        /// <summary>
        /// Sets the default container that components rendered using {@link #render} will be added to.
        /// In many applications there is a fixed navigation panel and a content panel - the content
        /// panel would usually form the render target in this type of setup.
        /// @param {Ext.Container} target The container to add rendered components to
        /// </summary>
        [JsProperty]
        public Ext.Container RenderTarget{private get;[JsMethod(Name="setRenderTarget")]set;}
    }
    #endregion
    #region ControllerManager
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.ControllerManager
    /// @extends Ext.AbstractManager
    /// @singleton
    /// <p>Keeps track of all of the registered controllers. This should very rarely need to be used by developers. This
    /// is simply an {@link Ext.AbstractManager AbstractManager} with a custom {@link #register} function which sets up
    /// the controller and its linked {@link Ext.Application application}.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ControllerManager
    {
        public ControllerManager(){}
    }
    #endregion
    #region DataView
    /// <summary>
    /// @class Ext.DataView
    /// @extends Ext.Component
    /// A mechanism for displaying data using custom layout templates and formatting. DataView uses an {@link Ext.XTemplate}
    /// as its internal templating mechanism, and is bound to an {@link Ext.data.Store}
    /// so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
    /// provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
    /// mouseover, mouseout, etc. as well as a built-in selection model. <b>In order to use these features, an {@link #itemSelector}
    /// config must be provided for the DataView to determine what nodes it will be working with.</b>
    /// *
    /// <p>The example below binds a DataView to a {@link Ext.data.Store} and renders it into an {@link Ext.Panel}.</p>
    /// <pre><code>
    /// var store = new Ext.data.JsonStore({
    /// url: 'get-images.php',
    /// root: 'images',
    /// fields: [
    /// 'name', 'url',
    /// {name:'size', type: 'float'},
    /// {name:'lastmod', type:'date', dateFormat:'timestamp'}
    /// ]
    /// });
    /// store.load();
    /// var tpl = new Ext.XTemplate(
    /// '&lt;tpl for="."&gt;',
    /// '&lt;div class="thumb-wrap" id="{name}"&gt;',
    /// '&lt;div class="thumb"&gt;&lt;img src="{url}" title="{name}"&gt;&lt;/div&gt;',
    /// '&lt;span class="x-editable"&gt;{shortName}&lt;/span&gt;&lt;/div&gt;',
    /// '&lt;/tpl&gt;',
    /// '&lt;div class="x-clear"&gt;&lt;/div&gt;'
    /// );
    /// var panel = new Ext.Panel({
    /// id:'images-view',
    /// frame:true,
    /// width:535,
    /// autoHeight:true,
    /// collapsible:true,
    /// layout:'fit',
    /// title:'Simple DataView',
    /// items: new Ext.DataView({
    /// store: store,
    /// tpl: tpl,
    /// autoHeight:true,
    /// multiSelect: true,
    /// overCls:'x-view-over',
    /// itemSelector:'div.thumb-wrap',
    /// emptyText: 'No images to display'
    /// })
    /// });
    /// panel.render(document.body);
    /// </code></pre>
    /// @constructor
    /// Create a new DataView
    /// @param {Object} config The config object
    /// @xtype dataview
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DataView : Ext.Component
    {
        public DataView(DataViewConfig config){}
        public DataView(){}
        public void addCmpEvents(){}
        /// <summary>
        /// Changes the data store bound to this view and refreshes it.
        /// @param {Store} store The store to bind to this view
        /// </summary>
        public void bindStore(object store, object initial){}
        public void bufferRender(object records, object index){}
        public void clearSelections(){}
        /// <summary>
        /// <p>Function which can be overridden which returns the data object passed to this
        /// DataView's {@link #tpl template} to render the whole DataView.</p>
        /// <p>This is usually an Array of data objects, each element of which is processed by an
        /// {@link Ext.XTemplate XTemplate} which uses <tt>'&lt;tpl for="."&gt;'</tt> to iterate over its supplied
        /// data object as an Array. However, <i>named</i> properties may be placed into the data object to
        /// provide non-repeating data such as headings, totals etc.</p>
        /// @param {Array} records An Array of {@link Ext.data.Model}s to be rendered into the DataView.
        /// @param {Number} startIndex the index number of the Record being prepared for rendering.
        /// @return {Array} An Array of data objects to be processed by a repeating XTemplate. May also
        /// contain <i>named</i> properties.
        /// </summary>
        public JsArray collectData(JsArray records, JsNumber startIndex){return null;}
        /// <summary>
        /// Deselects a record instance by record instance or index.
        /// @param {Ext.data.Record/Index} records An array of records or an index
        /// @param {Boolean} suppressEvent Set to false to not fire a deselect event
        /// </summary>
        public void deselect(object records, bool suppressEvent){}
        /// <summary>
        /// Returns the template node the passed child belongs to, or null if it doesn't belong to one.
        /// @param {HTMLElement} node
        /// @return {HTMLElement} The template node
        /// </summary>
        public HtmlElement findItemByChild(HtmlElement node){return null;}
        /// <summary>
        /// Returns the template node by the Ext.EventObject or null if it is not found.
        /// @param {Ext.EventObject} e
        /// </summary>
        public void findTargetByEvent(EventObject e){}
        /// <summary>
        /// Gets a template node.
        /// @param {HTMLElement/String/Number/Ext.data.Model} nodeInfo An HTMLElement template node, index of a template node,
        /// the id of a template node or the record associated with the node.
        /// @return {HTMLElement} The node or null if it wasn't found
        /// </summary>
        public HtmlElement getNode(object nodeInfo){return null;}
        /// <summary>
        /// Gets a range nodes.
        /// @param {Number} start (optional) The index of the first node in the range
        /// @param {Number} end (optional) The index of the last node in the range
        /// @return {Array} An array of nodes
        /// </summary>
        public JsArray getNodes(JsNumber start, JsNumber end){return null;}
        /// <summary>
        /// Gets a record from a node
        /// @param {HTMLElement} node The node to evaluate
        /// @return {Record} record The {@link Ext.data.Model} object
        /// </summary>
        public void getRecord(HtmlElement node){}
        /// <summary>
        /// Gets an array of the records from an array of nodes
        /// @param {Array} nodes The nodes to evaluate
        /// @return {Array} records The {@link Ext.data.Model} objects
        /// </summary>
        public JsArray getRecords(JsArray nodes){return null;}
        /// <summary>
        /// Gets the currently selected nodes.
        /// @return {Array} An array of HTMLElements
        /// </summary>
        public JsArray getSelectedNodes(){return null;}
        public void getSelectionModel(){}
        /// <summary>
        /// Returns the store associated with this DataView.
        /// @return {Ext.data.Store} The store
        /// </summary>
        public Store getStore(){return null;}
        /// <summary>
        /// Finds the index of the passed node.
        /// @param {HTMLElement/String/Number/Record} nodeInfo An HTMLElement template node, index of a template node, the id of a template node
        /// or a record associated with a node.
        /// @return {Number} The index of the node or -1
        /// </summary>
        public JsNumber indexOf(object node){return null;}
        public new void initComponent(){}
        /// <summary>
        /// Returns true if the passed node is selected, else false.
        /// @param {HTMLElement/Number/Ext.data.Model} node The node, node index or record to check
        /// @return {Boolean} True if selected, else false
        /// </summary>
        public bool isSelected(object node){return false;}
        public void onAdd(object ds, object records, object index){}
        public void onBeforeLoad(){}
        /// <summary>
        /// @private
        /// Calls this.refresh if this.blockRefresh is not true
        /// </summary>
        public void onDataChanged(){}
        public new void onDestroy(){}
        public void onItemDeselect(object record){}
        public void onItemSelect(object record){}
        public void onRemove(object ds, object record, object index){}
        public new void onRender(){}
        public void onUpdate(object ds, object record){}
        /// <summary>
        /// @private
        /// This complex-looking method takes a given Model instance and returns an object containing all data from
        /// all of that Model's *loaded* associations. It does this recursively - for example if we have a User which
        /// hasMany Orders, and each Order hasMany OrderItems, it will return an object like this:
        /// {
        /// orders: [
        /// {
        /// id: 123,
        /// status: 'shipped',
        /// orderItems: [
        /// ...
        /// ]
        /// }
        /// ]
        /// }
        /// This makes it easy to iterate over loaded associations in a DataView.
        /// @param {Ext.data.Model} record The Model instance
        /// @param {Array} ids PRIVATE. The set of Model instance internalIds that have already been loaded
        /// @return {Object} The nested data set for the Model's loaded associations
        /// </summary>
        public object prepareAssociatedData(Model record, JsArray ids){return null;}
        /// <summary>
        /// Function which can be overridden to provide custom formatting for each Record that is used by this
        /// DataView's {@link #tpl template} to render each node.
        /// @param {Array/Object} data The raw data object that was used to create the Record.
        /// @param {Number} recordIndex the index number of the Record being prepared for rendering.
        /// @param {Record} record The Record being prepared for rendering.
        /// @return {Array/Object} The formatted data in a format expected by the internal {@link #tpl template}'s overwrite() method.
        /// (either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))
        /// </summary>
        public object prepareData(object data, JsNumber index, object record){return null;}
        /// <summary>
        /// Refreshes the view by reloading the data from the store and re-rendering the template.
        /// </summary>
        public void refresh(){}
        /// <summary>
        /// Refreshes an individual node's data from the store.
        /// @param {Number} index The item's data index in the store
        /// </summary>
        public void refreshNode(JsNumber index){}
        /// <summary>
        /// Selects a record instance by record instance or index.
        /// @param {Ext.data.Record/Index} records An array of records or an index
        /// @param {Boolean} keepExisting
        /// @param {Boolean} suppressEvent Set to false to not fire a select event
        /// </summary>
        public void select(object records, bool keepExisting, bool suppressEvent){}
        public void select(object records, object keepExisting, object supressEvents){}
        public void updateIndexes(object startIndex, object endIndex){}
        /// <summary>
        /// @cfg {Boolean} blockRefresh Set this to true to ignore datachanged events on the bound store. This is useful if
        /// you wish to provide custom transition animations via a plugin (defaults to false)
        /// </summary>
        public bool blockRefresh{get;set;}
        /// <summary>
        /// @cfg {Boolean} deferEmptyText True to defer emptyText being applied until the store's first load
        /// </summary>
        public bool deferEmptyText{get;set;}
        /// <summary>
        /// @cfg {String} emptyText
        /// The text to display in the view when there is no data to display (defaults to '').
        /// </summary>
        public JsString emptyText{get;set;}
        public bool last{get;set;}
        /// <summary>
        /// @cfg {String} loadingText
        /// A string to display during data load operations (defaults to undefined).  If specified, this text will be
        /// displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
        /// contents will continue to display normally until the new data is loaded and the contents are replaced.
        /// </summary>
        public JsString loadingText{get;set;}
        /// <summary>
        /// @cfg {String} selectedItemCls
        /// A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
        /// </summary>
        public JsString selectedItemCls{get;set;}
        /// <summary>
        /// Gets the currently selected nodes.
        /// @return {Array} An array of HTMLElements
        /// </summary>
        [JsProperty]
        public JsArray SelectedNodes{[JsMethod(Name="getSelectedNodes")]get;private set;}
        /// <summary>
        /// Returns the store associated with this DataView.
        /// @return {Ext.data.Store} The store
        /// </summary>
        [JsProperty]
        public Store Store{[JsMethod(Name="getStore")]get;private set;}
        /// <summary>
        /// @cfg {Boolean} trackOver True to enable mouseenter and mouseleave events
        /// </summary>
        public bool trackOver{get;set;}
        public JsString triggerCtEvent{get;set;}
        public JsString triggerEvent{get;set;}
    }
    #endregion
    #region DataViewConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DataViewConfig
    {
        public DataViewConfig(){}
        /// <summary>
        /// Set this to true to ignore datachanged events on the bound store. This is useful if
        /// you wish to provide custom transition animations via a plugin (defaults to false)
        /// </summary>
        public bool blockRefresh{get;set;}
        /// <summary>
        /// True to defer emptyText being applied until the store's first load
        /// </summary>
        public bool deferEmptyText{get;set;}
        /// <summary>
        /// <p><tt>true</tt> to disable selection within the DataView. Defaults to <tt>false</tt>.
        /// This configuration will lock the selection model that the DataView uses.</p>
        /// </summary>
        public bool disableSelection{get;set;}
        /// <summary>
        /// The text to display in the view when there is no data to display (defaults to '').
        /// </summary>
        public JsString emptyText{get;set;}
        /// <summary>
        /// @required
        /// <b>This is a required setting</b>. A simple CSS selector (e.g. <tt>div.some-class</tt> or
        /// <tt>span:first-child</tt>) that will be used to determine what nodes this DataView will be
        /// working with.
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// A string to display during data load operations (defaults to undefined).  If specified, this text will be
        /// displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
        /// contents will continue to display normally until the new data is loaded and the contents are replaced.
        /// </summary>
        public JsString loadingText{get;set;}
        /// <summary>
        /// A CSS class to apply to each item in the view on mouseover (defaults to undefined).
        /// </summary>
        public JsString overItemCls{get;set;}
        /// <summary>
        /// A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').
        /// </summary>
        public JsString selectedItemCls{get;set;}
        /// <summary>
        /// @required
        /// The {@link Ext.data.Store} to bind this DataView to.
        /// </summary>
        public Store store{get;set;}
        /// <summary>
        /// @required
        /// The HTML fragment or an array of fragments that will make up the template used by this DataView.  This should
        /// be specified in the same format expected by the constructor of {@link Ext.XTemplate}.
        /// </summary>
        public object tpl{get;set;}
        /// <summary>
        /// True to enable mouseenter and mouseleave events
        /// </summary>
        public bool trackOver{get;set;}
    }
    #endregion
    #region DataViewSelectionModel
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DataViewSelectionModel : AbstractStoreSelectionModel
    {
        public DataViewSelectionModel(AbstractStoreSelectionModelConfig config){}
        public DataViewSelectionModel(){}
        public new void bindComponent(object view){}
        public void onContainerClick(){}
        public void onItemClick(object e){}
        public new void onSelectChange(object record, object isSelected, object suppressEvent){}
        public bool deselectOnContainerClick{get;set;}
    }
    #endregion
    #region DatePicker
    /// <summary>
    /// @class Ext.DatePicker
    /// @extends Ext.Picker
    /// *
    /// <p>A date picker component which shows a DatePicker on the screen. This class extends from {@link Ext.Picker} and {@link Ext.Sheet} so it is a popup.</p>
    /// <p>This component has no required properties.</p>
    /// *
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #yearFrom}</li>
    /// <li>{@link #yearTo}</li>
    /// </ul>
    /// *
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.DatePicker/screenshot.png" /></p>
    /// *
    /// <h2>Example code:</h2>
    /// *
    /// <pre><code>
    /// var datePicker = new Ext.DatePicker();
    /// datePicker.show();
    /// </code></pre>
    /// *
    /// <p>you may want to adjust the {@link #yearFrom} and {@link #yearTo} properties:
    /// <pre><code>
    /// var datePicker = new Ext.DatePicker({
    /// yearFrom: 2000,
    /// yearTo  : 2015
    /// });
    /// datePicker.show();
    /// </code></pre>
    /// *
    /// @constructor
    /// Create a new List
    /// @param {Object} config The config object
    /// @xtype datepicker
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DatePicker : Picker
    {
        public DatePicker(Ext.DatePickerConfig config){}
        public DatePicker(){}
        public new void afterRender(){}
        public void createSlot(object name, object days, object months, object years){}
        public void getDaysInMonth(object month, object year){}
        /// <summary>
        /// Gets the current value as a Date object
        /// @return {Date} value
        /// </summary>
        public new JsDate getValue(){return null;}
        /// <summary>
        /// @cfg {Array} slotOrder
        /// An array of strings that specifies the order of the slots. Defaults to <tt>['month', 'day', 'year']</tt>.
        /// </summary>
        public new void initComponent(){}
        public void isLeapYear(object year){}
        public void onSlotPick(object slot, object value){}
        /// <summary>
        /// Sets the values of the DatePicker's slots
        /// @param {Date/Object} value The value either in a {day:'value', month:'value', year:'value'} format or a Date
        /// @param {Boolean} animated True for animation while setting the values
        /// @return {Ext.DatePicker} this This DatePicker
        /// </summary>
        public new Ext.DatePicker setValue(object value, bool animated){return null;}
        /// <summary>
        /// @cfg {String} dayText
        /// The label to show for the day column. Defaults to 'Day'.
        /// </summary>
        public JsString dayText{get;set;}
        /// <summary>
        /// @cfg {String} monthText
        /// The label to show for the month column. Defaults to 'Month'.
        /// </summary>
        public JsString monthText{get;set;}
        /// <summary>
        /// Gets the current value as a Date object
        /// @return {Date} value
        /// </summary>
        [JsProperty]
        public JsDate Value{[JsMethod(Name="getValue")]get;private set;}
        /// <summary>
        /// @cfg {Number} yearFrom
        /// The start year for the date picker.  Defaults to 1980
        /// </summary>
        public JsNumber yearFrom{get;set;}
        /// <summary>
        /// @cfg {String} yearText
        /// The label to show for the year column. Defaults to 'Year'.
        /// </summary>
        public JsString yearText{get;set;}
    }
    #endregion
    #region DatePickerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DatePickerConfig
    {
        public DatePickerConfig(){}
        /// <summary>
        /// The label to show for the day column. Defaults to 'Day'.
        /// </summary>
        public JsString dayText{get;set;}
        /// <summary>
        /// The label to show for the month column. Defaults to 'Month'.
        /// </summary>
        public JsString monthText{get;set;}
        /// <summary>
        /// Default value for the field and the internal {@link Ext.DatePicker} component. Accepts an object of 'year',
        /// 'month' and 'day' values, all of which should be numbers, or a {@link Date}.
        /// *
        /// Examples:
        /// {year: 1989, day: 1, month: 5} = 1st May 1989.
        /// new Date() = current date
        /// </summary>
        public object value{get;set;}
        /// <summary>
        /// The start year for the date picker.  Defaults to 1980
        /// </summary>
        public JsNumber yearFrom{get;set;}
        /// <summary>
        /// The label to show for the year column. Defaults to 'Year'.
        /// </summary>
        public JsString yearText{get;set;}
        /// <summary>
        /// The last year for the date picker.  Defaults to the current year.
        /// </summary>
        public JsNumber yearTo{get;set;}
    }
    #endregion
    #region Dispatcher
    /// <summary>
    /// @class Ext.Dispatcher
    /// @extends Ext.util.Dispatcher
    /// <p>The Dispatcher is responsible for sending requests through to a specific {@link Ext.Controller controller}
    /// action. It is usually invoked either by a UI event handler calling {@link Ext#dispatch}, or by the
    /// {@link Ext.Router Router} recognizing a change in the page url.</p>
    /// <p>Ext.Dispatcher is the default instance of {@link Ext.util.Dispatcher} that is automatically created for every
    /// application. Usually it is the only instance that you will need.</p>
    /// <p>Let's say we have an application that manages instances of a Contact model using a contacts controller:</p>
    /// <pre><code>
    /// Ext.regModel('Contact', {
    /// fields: ['id', 'name', 'email']
    /// });
    /// //the controller has a single action - list - which just loads the Contacts and logs them to the console
    /// Ext.regController('contacts', {
    /// list: function() {
    /// new Ext.data.Store({
    /// model: 'Contact',
    /// autoLoad: {
    /// callback: function(contacts) {
    /// console.log(contacts);
    /// }
    /// }
    /// });
    /// }
    /// });
    /// </code></pre>
    /// <p>We can easily dispatch to the contacts controller's list action from anywhere in our app:</p>
    /// <pre><code>
    /// Ext.dispatch({
    /// controller: 'contacts',
    /// action    : 'list',
    /// historyUrl: 'contacts/list',
    /// anotherOption: 'some value'
    /// });
    /// </code></pre>
    /// <p>The Dispatcher finds the contacts controller and calls its list action. We also passed in a couple of additional
    /// options to dispatch - historyUrl and anotherOption. 'historyUrl' is a special parameter which automatically changes
    /// the browser's url when passed. For example, if your application is being served from http://yourapp.com, dispatching
    /// with the options we passed above would update the url to http://yourapp.com/#contacts/list, as well as calling the
    /// controller action as before.</p>
    /// <p>We also passed a second configuration into dispatch - anotherOption. We can access this inside our controller
    /// action like this:</p>
    /// <pre><code>
    /// Ext.regController('contacts', {
    /// list: function(options) {
    /// console.log(options.anotherOption); // 'some value'
    /// }
    /// });
    /// </code></pre>
    /// <p>We can pass anything in to Ext.dispatch and have it come through to our controller action. Internally, all of the
    /// options that we pass to dispatch are rolled into an {@link Ext.Interaction}. Interaction is a very simple class that
    /// represents a single request into the application - typically the controller and action names plus any additional
    /// information like the Model instance that a particular action is concerned with.</p>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Dispatcher
    {
        public Dispatcher(){}
    }
    #endregion
    #region DomHelper
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DomHelper
    {
        public DomHelper(){}
        /// <summary>
        /// Creates new DOM element(s) and appends them to el.
        /// @param {Mixed} el The context element
        /// @param {Object/String} o The DOM object spec (and children) or raw HTML blob
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public static object append(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// Applies a style specification to an element.
        /// @param {String/HTMLElement} el The element to apply styles to
        /// @param {String/Object/Function} styles A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or
        /// a function which returns such a specification.
        /// </summary>
        public static void applyStyles(object el, object styles){}
        public static void doInsert(object el, object o, object returnElement, object pos, object sibling, object append){}
        /// <summary>
        /// Creates new DOM element(s) and inserts them after el.
        /// @param {Mixed} el The context element
        /// @param {Object} o The DOM object spec (and children)
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public static object insertAfter(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// Creates new DOM element(s) and inserts them before el.
        /// @param {Mixed} el The context element
        /// @param {Object/String} o The DOM object spec (and children) or raw HTML blob
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public static object insertBefore(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// Creates new DOM element(s) and inserts them as the first child of el.
        /// @param {Mixed} el The context element
        /// @param {Object/String} o The DOM object spec (and children) or raw HTML blob
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public static object insertFirst(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// Inserts an HTML fragment into the DOM.
        /// @param {String} where Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.
        /// @param {HTMLElement} el The context element
        /// @param {String} html The HTML fragment
        /// @return {HTMLElement} The new node
        /// </summary>
        public static HtmlElement insertHtml(JsString where, HtmlElement el, JsString html){return null;}
        /// <summary>
        /// Returns the markup for the passed Element(s) config.
        /// @param {Object} o The DOM object spec (and children)
        /// @return {String}
        /// </summary>
        public static void markup(object o){}
        /// <summary>
        /// Creates new DOM element(s) and overwrites the contents of el with them.
        /// @param {Mixed} el The context element
        /// @param {Object/String} o The DOM object spec (and children) or raw HTML blob
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element
        /// @return {HTMLElement/Ext.Element} The new node
        /// </summary>
        public static object overwrite(object el, object o, bool returnElement){return null;}
        /// <summary>
        /// @class Ext.DomHelper
        /// <p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating
        /// elements via DOM or using HTML fragments. It also has the ability to create HTML fragment templates
        /// from your DOM building code.</p>
        /// *
        /// <p><b><u>DomHelper element specification object</u></b></p>
        /// <p>A specification object is used when creating elements. Attributes of this object
        /// are assumed to be element attributes, except for 4 special attributes:
        /// <div class="mdetail-params"><ul>
        /// <li><b><tt>tag</tt></b> : <div class="sub-desc">The tag name of the element</div></li>
        /// <li><b><tt>children</tt></b> : or <tt>cn</tt><div class="sub-desc">An array of the
        /// same kind of element definition objects to be created and appended. These can be nested
        /// as deep as you want.</div></li>
        /// <li><b><tt>cls</tt></b> : <div class="sub-desc">The class attribute of the element.
        /// This will end up being either the "class" attribute on a HTML fragment or className
        /// for a DOM node, depending on whether DomHelper is using fragments or DOM.</div></li>
        /// <li><b><tt>html</tt></b> : <div class="sub-desc">The innerHTML for the element</div></li>
        /// </ul></div></p>
        /// *
        /// <p><b><u>Insertion methods</u></b></p>
        /// <p>Commonly used insertion methods:
        /// <div class="mdetail-params"><ul>
        /// <li><b><tt>{@link #append}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #insertBefore}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #insertAfter}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #overwrite}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #createTemplate}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #insertHtml}</tt></b> : <div class="sub-desc"></div></li>
        /// </ul></div></p>
        /// *
        /// <p><b><u>Example</u></b></p>
        /// <p>This is an example, where an unordered list with 3 children items is appended to an existing
        /// element with id <tt>'my-div'</tt>:<br>
        /// <pre><code>
        /// var dh = Ext.DomHelper; // create shorthand alias
        /// // specification object
        /// var spec = {
        /// id: 'my-ul',
        /// tag: 'ul',
        /// cls: 'my-list',
        /// // append children after creating
        /// children: [     // may also specify 'cn' instead of 'children'
        /// {tag: 'li', id: 'item0', html: 'List Item 0'},
        /// {tag: 'li', id: 'item1', html: 'List Item 1'},
        /// {tag: 'li', id: 'item2', html: 'List Item 2'}
        /// ]
        /// };
        /// var list = dh.append(
        /// 'my-div', // the context element 'my-div' can either be the id or the actual node
        /// spec      // the specification object
        /// );
        /// </code></pre></p>
        /// <p>Element creation specification parameters in this class may also be passed as an Array of
        /// specification objects. This can be used to insert multiple sibling nodes into an existing
        /// container very efficiently. For example, to add more list items to the example above:<pre><code>
        /// dh.append('my-ul', [
        /// {tag: 'li', id: 'item3', html: 'List Item 3'},
        /// {tag: 'li', id: 'item4', html: 'List Item 4'}
        /// ]);
        /// </code></pre></p>
        /// *
        /// <p><b><u>Templating</u></b></p>
        /// <p>The real power is in the built-in templating. Instead of creating or appending any elements,
        /// <tt>{@link #createTemplate}</tt> returns a Template object which can be used over and over to
        /// insert new elements. Revisiting the example above, we could utilize templating this time:
        /// <pre><code>
        /// // create the node
        /// var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
        /// // get template
        /// var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});
        /// for(var i = 0; i < 5, i++){
        /// tpl.append(list, [i]); // use template to append to the actual node
        /// }
        /// </code></pre></p>
        /// <p>An example using a template:<pre><code>
        /// var html = '<a id="{0}" href="{1}" class="nav">{2}</a>';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.append('blog-roll', ['link1', 'http://www.tommymaintz.com/', "Tommy&#39;s Site"]);
        /// tpl.append('blog-roll', ['link2', 'http://www.avins.org/', "Jamie&#39;s Site"]);
        /// </code></pre></p>
        /// *
        /// <p>The same example using named parameters:<pre><code>
        /// var html = '<a id="{id}" href="{url}" class="nav">{text}</a>';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.append('blog-roll', {
        /// id: 'link1',
        /// url: 'http://www.tommymaintz.com/',
        /// text: "Tommy&#39;s Site"
        /// });
        /// tpl.append('blog-roll', {
        /// id: 'link2',
        /// url: 'http://www.avins.org/',
        /// text: "Jamie&#39;s Site"
        /// });
        /// </code></pre></p>
        /// *
        /// <p><b><u>Compiling Templates</u></b></p>
        /// <p>Templates are applied using regular expressions. The performance is great, but if
        /// you are adding a bunch of DOM elements using the same template, you can increase
        /// performance even further by {@link Ext.Template#compile "compiling"} the template.
        /// The way "{@link Ext.Template#compile compile()}" works is the template is parsed and
        /// broken up at the different variable points and a dynamic function is created and eval'ed.
        /// The generated function performs string concatenation of these parts and the passed
        /// variables instead of using regular expressions.
        /// <pre><code>
        /// var html = '<a id="{id}" href="{url}" class="nav">{text}</a>';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.compile();
        /// //... use template like normal
        /// </code></pre></p>
        /// *
        /// <p><b><u>Performance Boost</u></b></p>
        /// <p>DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead
        /// of DOM can significantly boost performance.</p>
        /// <p>Element creation specification parameters may also be strings. If {@link #useDom} is <tt>false</tt>,
        /// then the string is used as innerHTML. If {@link #useDom} is <tt>true</tt>, a string specification
        /// results in the creation of a text node. Usage:</p>
        /// <pre><code>
        /// Ext.DomHelper.useDom = true; // force it to use DOM; reduces performance
        /// </code></pre>
        /// @singleton
        /// </summary>
        public JsRegExp confRe{get;set;}
        /// <summary>
        /// @class Ext.DomHelper
        /// <p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating
        /// elements via DOM or using HTML fragments. It also has the ability to create HTML fragment templates
        /// from your DOM building code.</p>
        /// *
        /// <p><b><u>DomHelper element specification object</u></b></p>
        /// <p>A specification object is used when creating elements. Attributes of this object
        /// are assumed to be element attributes, except for 4 special attributes:
        /// <div class="mdetail-params"><ul>
        /// <li><b><tt>tag</tt></b> : <div class="sub-desc">The tag name of the element</div></li>
        /// <li><b><tt>children</tt></b> : or <tt>cn</tt><div class="sub-desc">An array of the
        /// same kind of element definition objects to be created and appended. These can be nested
        /// as deep as you want.</div></li>
        /// <li><b><tt>cls</tt></b> : <div class="sub-desc">The class attribute of the element.
        /// This will end up being either the "class" attribute on a HTML fragment or className
        /// for a DOM node, depending on whether DomHelper is using fragments or DOM.</div></li>
        /// <li><b><tt>html</tt></b> : <div class="sub-desc">The innerHTML for the element</div></li>
        /// </ul></div></p>
        /// *
        /// <p><b><u>Insertion methods</u></b></p>
        /// <p>Commonly used insertion methods:
        /// <div class="mdetail-params"><ul>
        /// <li><b><tt>{@link #append}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #insertBefore}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #insertAfter}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #overwrite}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #createTemplate}</tt></b> : <div class="sub-desc"></div></li>
        /// <li><b><tt>{@link #insertHtml}</tt></b> : <div class="sub-desc"></div></li>
        /// </ul></div></p>
        /// *
        /// <p><b><u>Example</u></b></p>
        /// <p>This is an example, where an unordered list with 3 children items is appended to an existing
        /// element with id <tt>'my-div'</tt>:<br>
        /// <pre><code>
        /// var dh = Ext.DomHelper; // create shorthand alias
        /// // specification object
        /// var spec = {
        /// id: 'my-ul',
        /// tag: 'ul',
        /// cls: 'my-list',
        /// // append children after creating
        /// children: [     // may also specify 'cn' instead of 'children'
        /// {tag: 'li', id: 'item0', html: 'List Item 0'},
        /// {tag: 'li', id: 'item1', html: 'List Item 1'},
        /// {tag: 'li', id: 'item2', html: 'List Item 2'}
        /// ]
        /// };
        /// var list = dh.append(
        /// 'my-div', // the context element 'my-div' can either be the id or the actual node
        /// spec      // the specification object
        /// );
        /// </code></pre></p>
        /// <p>Element creation specification parameters in this class may also be passed as an Array of
        /// specification objects. This can be used to insert multiple sibling nodes into an existing
        /// container very efficiently. For example, to add more list items to the example above:<pre><code>
        /// dh.append('my-ul', [
        /// {tag: 'li', id: 'item3', html: 'List Item 3'},
        /// {tag: 'li', id: 'item4', html: 'List Item 4'}
        /// ]);
        /// </code></pre></p>
        /// *
        /// <p><b><u>Templating</u></b></p>
        /// <p>The real power is in the built-in templating. Instead of creating or appending any elements,
        /// <tt>{@link #createTemplate}</tt> returns a Template object which can be used over and over to
        /// insert new elements. Revisiting the example above, we could utilize templating this time:
        /// <pre><code>
        /// // create the node
        /// var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
        /// // get template
        /// var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});
        /// for(var i = 0; i < 5, i++){
        /// tpl.append(list, [i]); // use template to append to the actual node
        /// }
        /// </code></pre></p>
        /// <p>An example using a template:<pre><code>
        /// var html = '<a id="{0}" href="{1}" class="nav">{2}</a>';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.append('blog-roll', ['link1', 'http://www.tommymaintz.com/', "Tommy&#39;s Site"]);
        /// tpl.append('blog-roll', ['link2', 'http://www.avins.org/', "Jamie&#39;s Site"]);
        /// </code></pre></p>
        /// *
        /// <p>The same example using named parameters:<pre><code>
        /// var html = '<a id="{id}" href="{url}" class="nav">{text}</a>';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.append('blog-roll', {
        /// id: 'link1',
        /// url: 'http://www.tommymaintz.com/',
        /// text: "Tommy&#39;s Site"
        /// });
        /// tpl.append('blog-roll', {
        /// id: 'link2',
        /// url: 'http://www.avins.org/',
        /// text: "Jamie&#39;s Site"
        /// });
        /// </code></pre></p>
        /// *
        /// <p><b><u>Compiling Templates</u></b></p>
        /// <p>Templates are applied using regular expressions. The performance is great, but if
        /// you are adding a bunch of DOM elements using the same template, you can increase
        /// performance even further by {@link Ext.Template#compile "compiling"} the template.
        /// The way "{@link Ext.Template#compile compile()}" works is the template is parsed and
        /// broken up at the different variable points and a dynamic function is created and eval'ed.
        /// The generated function performs string concatenation of these parts and the passed
        /// variables instead of using regular expressions.
        /// <pre><code>
        /// var html = '<a id="{id}" href="{url}" class="nav">{text}</a>';
        /// var tpl = new Ext.DomHelper.createTemplate(html);
        /// tpl.compile();
        /// //... use template like normal
        /// </code></pre></p>
        /// *
        /// <p><b><u>Performance Boost</u></b></p>
        /// <p>DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead
        /// of DOM can significantly boost performance.</p>
        /// <p>Element creation specification parameters may also be strings. If {@link #useDom} is <tt>false</tt>,
        /// then the string is used as innerHTML. If {@link #useDom} is <tt>true</tt>, a string specification
        /// results in the creation of a text node. Usage:</p>
        /// <pre><code>
        /// Ext.DomHelper.useDom = true; // force it to use DOM; reduces performance
        /// </code></pre>
        /// @singleton
        /// </summary>
        public JsRegExp emptyTags{get;set;}
        public JsRegExp endRe{get;set;}
    }
    #endregion
    #region DomQuery
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DomQuery
    {
        public DomQuery(){}
        /// <summary>
        /// Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)
        /// @param {String/HTMLElement/Array} el An element id, element or array of elements
        /// @param {String} selector The simple selector to test
        /// @return {Boolean}
        /// </summary>
        public static void @is(object el, JsString q){}
        /// <summary>
        /// Selects a group of elements.
        /// @param {String} selector The selector/xpath query (can be a comma separated list of selectors)
        /// @param {Node/String} root (optional) The start of the query (defaults to document).
        /// @return {Array} An Array of DOM elements which match the selector. If there are
        /// no matches, and empty Array is returned.
        /// </summary>
        public static JsArray select(JsString q, object root){return null;}
        /// <summary>
        /// Selects a single element.
        /// @param {String} selector The selector/xpath query
        /// @param {Node} root (optional) The start of the query (defaults to document).
        /// @return {HtmlElement} The DOM element which matched the selector.
        /// </summary>
        public static HtmlElement selectNode(JsString q, object root){return null;}
    }
    #endregion
    #region Element
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Element
    {
        [JsType(JsMode.Prototype, Export=false)]
        public partial class classReCache
        {
            public classReCache(){}
        }
        public Element(){}
        /// <summary>
        /// Appends the passed element(s) to this element
        /// @param {String/HTMLElement/Array/Element/CompositeElement} el
        /// @return {Ext.Element} this
        /// </summary>
        public Element appendChild(object el){return null;}
        /// <summary>
        /// Appends this element to the passed element
        /// @param {Mixed} el The new parent element
        /// @return {Ext.Element} this
        /// </summary>
        public Element appendTo(object el){return null;}
        /// <summary>
        /// Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @param {Boolean} returnDom (optional) True to return the DOM node instead of Ext.Element (defaults to false)
        /// @return {HTMLElement/Ext.Element} The child Ext.Element (or DOM node if returnDom = true)
        /// </summary>
        public object child(JsString selector, bool returnDom){return null;}
        /// <summary>
        /// Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
        /// @param {Object} config DomHelper element config object.  If no tag is specified (e.g., {tag:'input'}) then a div will be
        /// automatically generated with the specified attributes.
        /// @param {HTMLElement} insertBefore (optional) a child element of this element
        /// @param {Boolean} returnDom (optional) true to return the dom node instead of creating an Element
        /// @return {Ext.Element} The new child element
        /// </summary>
        public Element createChild(object config, HtmlElement insertBefore, bool returnDom){return null;}
        /// <summary>
        /// Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @param {Boolean} returnDom (optional) True to return the DOM node instead of Ext.Element (defaults to false)
        /// @return {HTMLElement/Ext.Element} The child Ext.Element (or DOM node if returnDom = true)
        /// </summary>
        public object down(JsString selector, bool returnDom){return null;}
        /// <summary>
        /// Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
        /// @param {String} selector The simple selector to test
        /// @param {Number/Mixed} maxDepth (optional) The max depth to search as a number or element (defaults to 50 || document.body)
        /// @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
        /// @return {HTMLElement} The matching DOM node (or null if no match was found)
        /// </summary>
        public HtmlElement findParent(JsString simpleSelector, object maxDepth, bool returnEl){return null;}
        /// <summary>
        /// Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
        /// @param {String} selector The simple selector to test
        /// @param {Number/Mixed} maxDepth (optional) The max depth to
        /// search as a number or element (defaults to 10 || document.body)
        /// @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
        /// @return {HTMLElement} The matching DOM node (or null if no match was found)
        /// </summary>
        public HtmlElement findParentNode(JsString simpleSelector, object maxDepth, bool returnEl){return null;}
        /// <summary>
        /// Gets the first child, skipping text nodes
        /// @param {String} selector (optional) Find the next sibling that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The first child or null
        /// </summary>
        public object first(JsString selector, bool returnDom){return null;}
        /// <summary>
        /// Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the
        /// supported position values.
        /// @param {Mixed} element The element to align to.
        /// @param {String} position (optional, defaults to "tl-bl?") The position to align to.
        /// @param {Array} offsets (optional) Offset the positioning by [x, y]
        /// @return {Array} [x, y]
        /// </summary>
        public JsArray getAlignToXY(object el, JsString position, JsArray offsets){return null;}
        /// <summary>
        /// Gets the x,y coordinates specified by the anchor position on the element.
        /// @param {String} anchor (optional) The specified anchor position (defaults to "c").  See {@link #alignTo}
        /// for details on supported anchor positions.
        /// @param {Object} size (optional) An object containing the size to use for calculating anchor position
        /// {width: (target width), height: (target height)} (defaults to the element's current size)
        /// @return {Array} [x, y] An array containing the element's x and y coordinates
        /// </summary>
        public JsArray getAnchorXY(JsString anchor, object local, object size){return null;}
        /// <summary>
        /// Gets the bottom Y coordinate of the element (element Y position + element height)
        /// @param {Boolean} local True to get the local css position instead of page coordinate
        /// @return {Number}
        /// </summary>
        public void getBottom(bool local){}
        /// <summary>
        /// Return an object defining the area of this Element which can be passed to {@link #setBox} to
        /// set another Element's size/location to match this element.
        /// @param {Boolean} contentBox (optional) If true a box for the content of the element is returned.
        /// @param {Boolean} local (optional) If true the element's left and top are returned instead of page x/y.
        /// @return {Object} box An object in the format<pre><code>
        /// {
        /// x: &lt;Element's X position>,
        /// y: &lt;Element's Y position>,
        /// width: &lt;Element's width>,
        /// height: &lt;Element's height>,
        /// bottom: &lt;Element's lower bound>,
        /// right: &lt;Element's rightmost bound>
        /// }
        /// </code></pre>
        /// The returned object may also be addressed as an Array where index 0 contains the X position
        /// and index 1 contains the Y position. So the result may also be used for {@link #setXY}
        /// </summary>
        public object getBox(bool contentBox, bool local){return null;}
        /// <summary>
        /// Gets the left X coordinate
        /// @param {Boolean} local True to get the local css position instead of page coordinate
        /// @return {Number}
        /// </summary>
        public void getLeft(bool local){}
        /// <summary>
        /// Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.
        /// @param {Mixed} element The element to get the offsets from.
        /// @return {Array} The XY page offsets (e.g. [100, -200])
        /// </summary>
        public JsArray getOffsetsTo(object el){return null;}
        /// <summary>
        /// Return an object defining the area of this Element which can be passed to {@link #setBox} to
        /// set another Element's size/location to match this element.
        /// @param {Boolean} asRegion(optional) If true an Ext.util.Region will be returned
        /// @return {Object} box An object in the format<pre><code>
        /// {
        /// x: &lt;Element's X position>,
        /// y: &lt;Element's Y position>,
        /// width: &lt;Element's width>,
        /// height: &lt;Element's height>,
        /// bottom: &lt;Element's lower bound>,
        /// right: &lt;Element's rightmost bound>
        /// }
        /// </code></pre>
        /// The returned object may also be addressed as an Array where index 0 contains the X position
        /// and index 1 contains the Y position. So the result may also be used for {@link #setXY}
        /// </summary>
        public object getPageBox(bool getRegion){return null;}
        /// <summary>
        /// Gets the right X coordinate of the element (element X position + element width)
        /// @param {Boolean} local True to get the local css position instead of page coordinate
        /// @return {Number}
        /// </summary>
        public void getRight(bool local){}
        /// <summary>
        /// Gets the Scroller instance of the first parent that has one.
        /// @return {Ext.util.Scroller/null} The first parent scroller
        /// </summary>
        public object getScrollParent(){return null;}
        /// <summary>
        /// Gets the top Y coordinate
        /// @param {Boolean} local True to get the local css position instead of page coordinate
        /// @return {Number}
        /// </summary>
        public void getTop(bool local){}
        /// <summary>
        /// Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @return {Number} The X position of the element
        /// </summary>
        public JsNumber getX(object el){return null;}
        /// <summary>
        /// Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @return {Array} The XY position of the element
        /// </summary>
        public JsArray getXY(){return null;}
        /// <summary>
        /// Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @return {Number} The Y position of the element
        /// </summary>
        public JsNumber getY(object el){return null;}
        /// <summary>
        /// Inserts this element after the passed element in the DOM
        /// @param {Mixed} el The element to insert after
        /// @return {Ext.Element} this
        /// </summary>
        public Element insertAfter(object el){return null;}
        /// <summary>
        /// Inserts this element before the passed element in the DOM
        /// @param {Mixed} el The element before which this element will be inserted
        /// @return {Ext.Element} this
        /// </summary>
        public Element insertBefore(object el){return null;}
        /// <summary>
        /// Inserts (or creates) an element (or DomHelper config) as the first child of this element
        /// @param {Mixed/Object} el The id or element to insert or a DomHelper config to create and insert
        /// @return {Ext.Element} The new child
        /// </summary>
        public Element insertFirst(object el, object returnDom){return null;}
        /// <summary>
        /// Inserts an html fragment into this element
        /// @param {String} where Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
        /// @param {String} html The HTML fragment
        /// @param {Boolean} returnEl (optional) True to return an Ext.Element (defaults to false)
        /// @return {HTMLElement/Ext.Element} The inserted node (or nearest related if more than 1 inserted)
        /// </summary>
        public object insertHtml(JsString where, JsString html, bool returnEl){return null;}
        /// <summary>
        /// Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
        /// @param {Mixed/Object/Array} el The id, element to insert or a DomHelper config to create and insert *or* an array of any of those.
        /// @param {String} where (optional) 'before' or 'after' defaults to before
        /// @param {Boolean} returnDom (optional) True to return the .;ll;l,raw DOM element instead of Ext.Element
        /// @return {Ext.Element} The inserted Element. If an array is passed, the last inserted element is returned.
        /// </summary>
        public Element insertSibling(object el, JsString where, bool returnDom){return null;}
        /// <summary>
        /// Gets the last child, skipping text nodes
        /// @param {String} selector (optional) Find the previous sibling that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The last child or null
        /// </summary>
        public object last(JsString selector, bool returnDom){return null;}
        public void matchNode(object dir, object start, object selector, object returnDom){}
        /// <summary>
        /// Gets the next sibling, skipping text nodes
        /// @param {String} selector (optional) Find the next sibling that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The next sibling or null
        /// </summary>
        public object next(JsString selector, bool returnDom){return null;}
        /// <summary>
        /// Gets the parent node for this element, optionally chaining up trying to match a selector
        /// @param {String} selector (optional) Find a parent node that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The parent node or null
        /// </summary>
        public object parent(JsString selector, bool returnDom){return null;}
        /// <summary>
        /// Gets the previous sibling, skipping text nodes
        /// @param {String} selector (optional) Find the previous sibling that matches the passed simple selector
        /// @param {Boolean} returnDom (optional) True to return a raw dom node instead of an Ext.Element
        /// @return {Ext.Element/HTMLElement} The previous sibling or null
        /// </summary>
        public object prev(JsString selector, bool returnDom){return null;}
        /// <summary>
        /// Selects child nodes based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @return {Array} An array of the matched nodes
        /// </summary>
        public JsArray query(JsString selector){return null;}
        /// <summary>
        /// Replaces the passed element with this element
        /// @param {Mixed} el The element to replace
        /// @return {Ext.Element} this
        /// </summary>
        public Element replace(object el){return null;}
        /// <summary>
        /// Replaces this element with the passed element
        /// @param {Mixed/Object} el The new element or a DomHelper config of an element to create
        /// @return {Ext.Element} this
        /// </summary>
        public Element replaceWith(object el){return null;}
        /// <summary>
        /// Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
        /// @param {String} selector The CSS selector
        /// @return {CompositeElement/CompositeElement} The composite element
        /// </summary>
        public object select(JsString selector, object composite){return null;}
        /// <summary>
        /// Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
        /// to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or
        /// {@link Ext.CompositeElement CompositeElement} object.
        /// @param {String/Array} selector The CSS selector or an array of elements
        /// @param {HTMLElement/String} root (optional) The root element of the query or id of the root
        /// @return {CompositeElement}
        /// @member Ext.Element
        /// @method select
        /// </summary>
        public static void select(object selector, object root, object composite){}
        /// <summary>
        /// Sets the element's CSS bottom style.
        /// @param {String} bottom The bottom CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setBottom(JsString bottom){return null;}
        /// <summary>
        /// Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.
        /// @param {Object} box The box to fill {x, y, width, height}
        /// @return {Ext.Element} this
        /// </summary>
        public Element setBox(object left, object top, object width, object height){return null;}
        /// <summary>
        /// Sets the element's left position directly using CSS style (instead of {@link #setX}).
        /// @param {String} left The left CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setLeft(JsString left){return null;}
        /// <summary>
        /// Sets the element's CSS right style.
        /// @param {String} right The right CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setRight(JsString right){return null;}
        /// <summary>
        /// Sets the element's top position directly using CSS style (instead of {@link #setY}).
        /// @param {String} top The top CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        public Element setTop(JsString top){return null;}
        /// <summary>
        /// Sets the element's top and left positions directly using CSS style (instead of {@link #setXY})
        /// @param {String} top The top CSS property value
        /// @param {String} left The left CSS property value
        /// </summary>
        public void setTopLeft(JsString top, JsString left){}
        /// <summary>
        /// Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Number} The X position of the element
        /// @return {Ext.Element} this
        /// </summary>
        public Element setX(JsNumber x){return null;}
        /// <summary>
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned.
        /// The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Array} pos Contains X & Y [x, y] values for new position (coordinates are page-based)
        /// @return {Ext.Element} this
        /// </summary>
        public Element setXY(JsArray pos){return null;}
        /// <summary>
        /// Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Number} The Y position of the element
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        public Element setY(JsNumber y){return null;}
        /// <summary>
        /// Translates the passed page coordinates into left/top css values for this element
        /// @param {Number/Array} x The page x or an array containing [x, y]
        /// @param {Number} y (optional) The page y, required if x is not an array
        /// @return {Object} An object with left and top properties. e.g. {left: (value), top: (value)}
        /// </summary>
        public object translatePoints(object x, JsNumber y){return null;}
        /// <summary>
        /// Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
        /// This is a shortcut for findParentNode() that always returns an Ext.Element.
        /// @param {String} selector The simple selector to test
        /// @param {Number/Mixed} maxDepth (optional) The max depth to
        /// search as a number or element (defaults to 10 || document.body)
        /// @return {Ext.Element} The matching DOM node (or null if no match was found)
        /// </summary>
        public Element up(JsString simpleSelector, object maxDepth){return null;}
        /// <summary>
        /// Creates and wraps this element with another element
        /// @param {Object} config (optional) DomHelper element config object for the wrapper element or null for an empty div
        /// @param {Boolean} returnDom (optional) True to return the raw DOM element instead of Ext.Element
        /// @return {HTMLElement/Element} The newly created wrapper element
        /// </summary>
        public object wrap(object config, bool returnDom){return null;}
        /// <summary>
        /// Sets the element's CSS bottom style.
        /// @param {String} bottom The bottom CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        [JsProperty]
        public JsString Bottom{private get;[JsMethod(Name="setBottom")]set;}
        /// <summary>
        /// Sets the element's left position directly using CSS style (instead of {@link #setX}).
        /// @param {String} left The left CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        [JsProperty]
        public JsString Left{private get;[JsMethod(Name="setLeft")]set;}
        /// <summary>
        /// Sets the element's CSS right style.
        /// @param {String} right The right CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        [JsProperty]
        public JsString Right{private get;[JsMethod(Name="setRight")]set;}
        /// <summary>
        /// Gets the Scroller instance of the first parent that has one.
        /// @return {Ext.util.Scroller/null} The first parent scroller
        /// </summary>
        [JsProperty]
        public object ScrollParent{[JsMethod(Name="getScrollParent")]get;private set;}
        /// <summary>
        /// Sets the element's top position directly using CSS style (instead of {@link #setY}).
        /// @param {String} top The top CSS property value
        /// @return {Ext.Element} this
        /// </summary>
        [JsProperty]
        public JsString Top{private get;[JsMethod(Name="setTop")]set;}
        /// <summary>
        /// Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Number} The X position of the element
        /// @return {Ext.Element} this
        /// </summary>
        [JsProperty]
        public JsNumber X{private get;[JsMethod(Name="setX")]set;}
        /// <summary>
        /// Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @return {Array} The XY position of the element
        /// Sets the position of the element in page coordinates, regardless of how the element is positioned.
        /// The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Array} pos Contains X & Y [x, y] values for new position (coordinates are page-based)
        /// @return {Ext.Element} this
        /// </summary>
        [JsProperty]
        public JsArray XY{[JsMethod(Name="getXY")]get;[JsMethod(Name="setXY")]set;}
        /// <summary>
        /// Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
        /// @param {Number} The Y position of the element
        /// @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
        /// @return {Ext.Element} this
        /// </summary>
        [JsProperty]
        public JsNumber Y{private get;[JsMethod(Name="setY")]set;}
    }
    #endregion
    #region EventManager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class EventManager
    {
        public EventManager(){}
        /// <summary>
        /// Appends an event handler to an element.  The shorthand version {@link #on} is equivalent.  Typically you will
        /// use {@link Ext.Element#addListener} directly on an Element in favor of calling this version.
        /// @param {String/HTMLElement} el The html element or id to assign the event handler to.
        /// @param {String} eventName The name of the event to listen for.
        /// @param {Function} handler The handler function the event invokes. This function is passed
        /// the following parameters:<ul>
        /// <li>evt : EventObject<div class="sub-desc">The {@link Ext.EventObject EventObject} describing the event.</div></li>
        /// <li>t : Element<div class="sub-desc">The {@link Ext.Element Element} which was the target of the event.
        /// Note that this may be filtered by using the <tt>delegate</tt> option.</div></li>
        /// <li>o : Object<div class="sub-desc">The options object from the addListener call.</div></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<b><code>this</code></b> reference) in which the handler function is executed. <b>Defaults to the Element</b>.
        /// @param {Object} options (optional) An object containing handler configuration properties.
        /// This may contain any of the following properties:<ul>
        /// <li>scope : Object<div class="sub-desc">The scope (<b><code>this</code></b> reference) in which the handler function is executed. <b>Defaults to the Element</b>.</div></li>
        /// <li>delegate : String<div class="sub-desc">A simple selector to filter the target or look for a descendant of the target</div></li>
        /// <li>stopEvent : Boolean<div class="sub-desc">True to stop the event. That is stop propagation, and prevent the default action.</div></li>
        /// <li>preventDefault : Boolean<div class="sub-desc">True to prevent the default action</div></li>
        /// <li>stopPropagation : Boolean<div class="sub-desc">True to prevent event propagation</div></li>
        /// <li>normalized : Boolean<div class="sub-desc">False to pass a browser event to the handler function instead of an Ext.EventObject</div></li>
        /// <li>delay : Number<div class="sub-desc">The number of milliseconds to delay the invocation of the handler after te event fires.</div></li>
        /// <li>single : Boolean<div class="sub-desc">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>
        /// <li>buffer : Number<div class="sub-desc">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed
        /// by the specified number of milliseconds. If the event fires again within that time, the original
        /// handler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>
        /// <li>target : Element<div class="sub-desc">Only call the handler if the event was fired on the target Element, <i>not</i> if the event was bubbled up from a child node.</div></li>
        /// </ul><br>
        /// <p>See {@link Ext.Element#addListener} for examples of how to use these options.</p>
        /// </summary>
        public static void addListener(object element, JsString eventName, JsAction fn, object scope, object o){}
        public static void createListenerWrap(object dom, object ename, object fn, object scope, object o, object touch){}
        public static void getElementEventCache(object element){}
        public static void getEventListenerCache(object element, object eventName){}
        public static void getId(object element){}
        public static void handleListenerConfig(object element, object config, object remove){}
        /// <summary>
        /// Adds a listener to be notified when the document is ready (before onload and before images are loaded). Can be
        /// accessed shorthanded as Ext.onReady().
        /// @param {Function} fn The method the event invokes.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.
        /// @param {boolean} options (optional) Options object as passed to {@link Ext.Element#addListener}. It is recommended that the options
        /// <code>{single: true}</code> be used so that the handler is removed on first invocation.
        /// </summary>
        public static void onDocumentReady(JsAction fn, object scope, object options){}
        public static void onOrientationChange(object fn, object scope, object options){}
        /// <summary>
        /// Adds a listener to be notified when the browser window is resized and provides resize event buffering (50 milliseconds),
        /// passes new viewport width and height to handlers.
        /// @param {Function} fn      The handler function the window resize event invokes.
        /// @param {Object}   scope   The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.
        /// @param {boolean}  options Options object as passed to {@link Ext.Element#addListener}
        /// </summary>
        public static void onWindowResize(JsAction fn, object scope, object options){}
        public static void purgeElement(object element, object recurse, object eventName){}
        /// <summary>
        /// Removes all event handers from an element.  Typically you will use {@link Ext.Element#removeAllListeners}
        /// directly on an Element in favor of calling this version.
        /// @param {String/HTMLElement} el The id or html element from which to remove all event handlers.
        /// </summary>
        public static void removeAll(object element){}
        /// <summary>
        /// Removes an event handler from an element.  The shorthand version {@link #un} is equivalent.  Typically
        /// you will use {@link Ext.Element#removeListener} directly on an Element in favor of calling this version.
        /// @param {String/HTMLElement} el The id or html element from which to remove the listener.
        /// @param {String} eventName The name of the event.
        /// @param {Function} fn The handler function to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>
        /// @param {Object} scope If a scope (<b><code>this</code></b> reference) was specified when the listener was added,
        /// then this must refer to the same object.
        /// </summary>
        public static void removeListener(object element, JsString eventName, JsAction fn, object scope){}
        public static void unOrientationChange(object fn, object scope, object options){}
        /// <summary>
        /// @class Ext.EventManager
        /// Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
        /// several useful events directly.
        /// See {@link Ext.EventObject} for more details on normalized event objects.
        /// @singleton
        /// </summary>
        public JsRegExp optionsRe{get;set;}
        /// <summary>
        /// @class Ext.EventManager
        /// Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
        /// several useful events directly.
        /// See {@link Ext.EventObject} for more details on normalized event objects.
        /// @singleton
        /// </summary>
        public JsRegExp touchRe{get;set;}
    }
    #endregion
    #region EventObject
    /// <summary>
    /// @class Ext.EventObject
    /// Just as {@link Ext.Element} wraps around a native DOM node, Ext.EventObject
    /// wraps the browser's native event-object normalizing cross-browser differences,
    /// such as which mouse button is clicked, keys pressed, mechanisms to stop
    /// event-propagation along with a method to prevent default actions from taking place.
    /// <p>For example:</p>
    /// <pre><code>
    /// function handleClick(e, t){ // e is not a standard event object, it is a Ext.EventObject
    /// e.preventDefault();
    /// var target = e.getTarget(); // same as t (the target HTMLElement)
    /// ...
    /// }
    /// var myDiv = {@link Ext#get Ext.get}("myDiv");  // get reference to an {@link Ext.Element}
    /// myDiv.on(         // 'on' is shorthand for addListener
    /// "click",      // perform an action on click of myDiv
    /// handleClick   // reference to the action handler
    /// );
    /// // other methods to do the same:
    /// Ext.EventManager.on("myDiv", 'click', handleClick);
    /// Ext.EventManager.addListener("myDiv", 'click', handleClick);
    /// </code></pre>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class EventObject
    {
        public EventObject(){}
    }
    #endregion
    #region EventObjectImpl
    /// <summary>
    /// Adds a listener to be notified when the document is ready (before onload and before images are loaded). Shorthand of {@link Ext.EventManager#onDocumentReady}.
    /// @param {Function} fn The method the event invokes.
    /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.
    /// @param {boolean} options (optional) Options object as passed to {@link Ext.Element#addListener}. It is recommended that the options
    /// <code>{single: true}</code> be used so that the handler is removed on first invocation.
    /// @member Ext
    /// @method onReady
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class EventObjectImpl
    {
        public EventObjectImpl(){}
        public EventObjectImpl(object e){}
        /// <summary>
        /// Gets the x coordinate of the event.
        /// @return {Number}
        /// </summary>
        public void getPageX(){}
        /// <summary>
        /// Gets the y coordinate of the event.
        /// @return {Number}
        /// </summary>
        public void getPageY(){}
        /// <summary>
        /// Gets the target for the event.
        /// @param {String} selector (optional) A simple selector to filter the target or look for an ancestor of the target
        /// @param {Number/Mixed} maxDepth (optional) The max depth to
        /// search as a number or element (defaults to 10 || document.body)
        /// @param {Boolean} returnEl (optional) True to return a Ext.Element object instead of DOM node
        /// @return {HTMLelement}
        /// </summary>
        public void getTarget(JsString selector, object maxDepth, bool returnEl){}
        public void getTime(){}
        /// <summary>
        /// Gets the page coordinates of the event.
        /// @return {Array} The xy values like [x, y]
        /// </summary>
        public JsArray getXY(){return null;}
        /// <summary>
        /// Prevents the browsers default handling of the event.
        /// </summary>
        public void preventDefault(){}
        /// <summary>
        /// * @private
        /// </summary>
        public void setEvent(object e){}
        /// <summary>
        /// Stop the event (preventDefault and stopPropagation)
        /// </summary>
        public void stopEvent(){}
        /// <summary>
        /// Cancels bubbling of the event.
        /// </summary>
        public void stopPropagation(){}
        /// <summary>
        /// * @private
        /// </summary>
        [JsProperty]
        public object Event{private get;[JsMethod(Name="setEvent")]set;}
        /// <summary>
        /// Gets the page coordinates of the event.
        /// @return {Array} The xy values like [x, y]
        /// </summary>
        [JsProperty]
        public JsArray XY{[JsMethod(Name="getXY")]get;private set;}
    }
    #endregion
    #region ExtClass
    [JsType(JsMode.Prototype, Export=false, Name="Ext")]
    public partial class ExtClass
    {
        public ExtClass(){}
        /// <summary>
        /// @private
        /// Creates meta tags for a given config object. This is usually just called internally from Ext.setup - see
        /// that method for full usage. Extracted into its own function so that Ext.Application and other classes can
        /// call it without invoking all of the logic inside Ext.setup.
        /// @param {Object} config The meta tag configuration object
        /// </summary>
        public static void addMetaTags(object config){}
        /// <summary>
        /// Copies all the properties of config to obj if they don't already exist.
        /// @param {Object} obj The receiver of the properties
        /// @param {Object} config The source of the properties
        /// @return {Object} returns obj
        /// </summary>
        public static object applyIf(object @object, object config){return null;}
        /// <summary>
        /// @class Ext.CompositeElement
        /// <p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter
        /// members, or to perform collective actions upon the whole set.</p>
        /// *
        /// Example:<pre><code>
        /// var els = Ext.select("#some-el div.some-class");
        /// // or select directly from an existing element
        /// var el = Ext.get('some-el');
        /// el.select('div.some-class');
        /// els.setWidth(100); // all elements become 100 width
        /// els.hide(true); // all elements fade out and hide
        /// // or
        /// els.setWidth(100).hide(true);
        /// </code>
        /// </summary>
        public static void CompositeElement(object els, object root){}
        /// <summary>
        /// Shorthand for {@link Ext.ComponentMgr#create}
        /// Creates a new Component from the specified config object using the
        /// config object's {@link Ext.component#xtype xtype} to determine the class to instantiate.
        /// @param {Object} config A configuration object for the Component you wish to create.
        /// @param {Constructor} defaultType The constructor to provide the default Component type if
        /// the config object does not contain a <code>xtype</code>. (Optional if the config contains a <code>xtype</code>).
        /// @return {Ext.Component} The newly instantiated Component.
        /// @member Ext
        /// @method create
        /// </summary>
        public static Ext.Component create(){return null;}
        /// <summary>
        /// Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
        /// DOM (if applicable) and calling their destroy functions (if available).  This method is primarily
        /// intended for arguments of type {@link Ext.Element} and {@link Ext.Component}, but any subclass of
        /// {@link Ext.util.Observable} can be passed in.  Any number of elements and/or components can be
        /// passed into this function in a single call as separate arguments.
        /// @param {Mixed} arg1 An {@link Ext.Element}, {@link Ext.Component}, or an Array of either of these to destroy
        /// @param {Mixed} arg2 (optional)
        /// @param {Mixed} etc... (optional)
        /// </summary>
        public static void destroy(){}
        /// <summary>
        /// Shorthand for {@link Ext.Dispatcher#dispatch}. Dispatches a request to a controller action
        /// @member Ext
        /// @method dispatch
        /// </summary>
        public static void dispatch(){}
        /// <summary>
        /// Iterates an array calling the supplied function.
        /// @param {Array/NodeList/Mixed} array The array to be iterated. If this
        /// argument is not really an array, the supplied function is called once.
        /// @param {Function} fn The function to be called with each item. If the
        /// supplied function returns false, iteration stops and this method returns
        /// the current <code>index</code>. This function is called with
        /// the following arguments:
        /// <div class="mdetail-params"><ul>
        /// <li><code>item</code> : <i>Mixed</i>
        /// <div class="sub-desc">The item at the current <code>index</code>
        /// in the passed <code>array</code></div></li>
        /// <li><code>index</code> : <i>Number</i>
        /// <div class="sub-desc">The current index within the array</div></li>
        /// <li><code>allItems</code> : <i>Array</i>
        /// <div class="sub-desc">The <code>array</code> passed as the first
        /// argument to <code>Ext.each</code>.</div></li>
        /// </ul></div>
        /// @param {Object} scope The scope (<code>this</code> reference) in which the specified function is executed.
        /// Defaults to the <code>item</code> at the current <code>index</code>util
        /// within the passed <code>array</code>.
        /// @return See description for the fn parameter.
        /// </summary>
        public static void each(object array, JsAction fn, object scope){}
        /// <summary>
        /// A reusable empty function
        /// @property
        /// @type Function
        /// </summary>
        public static void emptyFn(){}
        /// <summary>
        /// Returns the current document body as an {@link Ext.Element}.
        /// @return Ext.Element The document body
        /// </summary>
        public static void getBody(){}
        /// <summary>
        /// This is shorthand reference to {@link Ext.ComponentMgr#get}.
        /// Looks up an existing {@link Ext.Component Component} by {@link Ext.Component#id id}
        /// @param {String} id The component {@link Ext.Component#id id}
        /// @return Ext.Component The Component, <tt>undefined</tt> if not found, or <tt>null</tt> if a
        /// Class was found.
        /// </summary>
        public static void getCmp(JsString id){}
        /// <summary>
        /// Returns the current HTML document object as an {@link Ext.Element}.
        /// @return Ext.Element The document
        /// </summary>
        public static void getDoc(){}
        /// <summary>
        /// Return the dom node for the passed String (id), dom node, or Ext.Element.
        /// Here are some examples:
        /// <pre><code>
        /// // gets dom node based on id
        /// var elDom = Ext.getDom('elId');
        /// // gets dom node based on the dom node
        /// var elDom1 = Ext.getDom(elDom);
        /// // If we don&#39;t know if we are working with an
        /// // Ext.Element or a dom node use Ext.getDom
        /// function(el){
        /// var dom = Ext.getDom(el);
        /// // do something with the dom node
        /// }
        /// </code></pre>
        /// <b>Note</b>: the dom node to be found actually needs to exist (be rendered, etc)
        /// when this method is called to be successful.
        /// @param {Mixed} el
        /// @return HTMLElement
        /// </summary>
        public static void getDom(object el){}
        /// <summary>
        /// Returns the current orientation of the mobile device
        /// @return {String} Either 'portrait' or 'landscape'
        /// </summary>
        public static JsString getOrientation(){return null;}
        /// <summary>
        /// Gets a registered Store by id (shortcut to {@link #lookup})
        /// @param {String/Object} id The id of the Store, or a Store instance
        /// @return {Ext.data.Store}
        /// @member Ext
        /// @method getStore
        /// </summary>
        public static void getStore(object name){}
        /// <summary>
        /// Convert certain characters (&, <, >, and ') from their HTML character equivalents.
        /// @param {String} value The string to decode
        /// @return {String} The decoded text
        /// </summary>
        public static JsString htmlDecode(JsString value){return null;}
        /// <summary>
        /// Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.
        /// @param {String} value The string to encode
        /// @return {String} The encoded text
        /// </summary>
        public static JsString htmlEncode(JsString value){return null;}
        /// <summary>
        /// Generates unique ids. If the element already has an id, it is unchanged
        /// @param {Mixed} el (optional) The element to generate an id for
        /// @param {String} prefix (optional) Id prefix (defaults "ext-gen")
        /// @return {String} The generated Id.
        /// </summary>
        public static JsString id(object el, JsString prefix){return null;}
        /// <summary>
        /// Returns true if the passed value is a JavaScript array, otherwise false.
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isArray(object v){}
        /// <summary>
        /// Returns true if the passed value is a boolean.
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isBoolean(object v){}
        /// <summary>
        /// Returns true if the passed object is a JavaScript date object, otherwise false.
        /// @param {Object} object The object to test
        /// @return {Boolean}
        /// </summary>
        public static void isDate(object v){}
        /// <summary>
        /// Returns true if the passed value is not undefined.
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isDefined(object v){}
        /// <summary>
        /// Returns true if the passed value is an HTMLElement
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isElement(object v){}
        /// <summary>
        /// <p>Returns true if the passed value is empty.</p>
        /// <p>The value is deemed to be empty if it is<div class="mdetail-params"><ul>
        /// <li>null</li>
        /// <li>undefined</li>
        /// <li>an empty array</li>
        /// <li>a zero length string (Unless the <tt>allowBlank</tt> parameter is <tt>true</tt>)</li>
        /// </ul></div>
        /// @param {Mixed} value The value to test
        /// @param {Boolean} allowBlank (optional) true to allow empty strings (defaults to false)
        /// @return {Boolean}
        /// </summary>
        public static void isEmpty(object value, bool allowBlank){}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Function, otherwise false.
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isFunction(object v){}
        public static void isIterable(object v){}
        /// <summary>
        /// Returns true if the passed value is a number. Returns false for non-finite numbers.
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isNumber(object v){}
        /// <summary>
        /// Returns true if the passed value is a JavaScript Object, otherwise false.
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isObject(object v){}
        /// <summary>
        /// Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isPrimitive(object v){}
        /// <summary>
        /// Returns true if the passed value is a string.
        /// @param {Mixed} value The value to test
        /// @return {Boolean}
        /// </summary>
        public static void isString(object v){}
        /// <summary>
        /// Iterates either the elements in an array, or each of the properties in an object.
        /// <b>Note</b>: If you are only iterating arrays, it is better to call {@link #each}.
        /// @param {Object/Array} object The object or array to be iterated
        /// @param {Function} fn The function to be called for each iteration.
        /// The iteration will stop if the supplied function returns false, or
        /// all array elements / object properties have been covered. The signature
        /// varies depending on the type of object being interated:
        /// <div class="mdetail-params"><ul>
        /// <li>Arrays : <tt>(Object item, Number index, Array allItems)</tt>
        /// <div class="sub-desc">
        /// When iterating an array, the supplied function is called with each item.</div></li>
        /// <li>Objects : <tt>(String key, Object value, Object)</tt>
        /// <div class="sub-desc">
        /// When iterating an object, the supplied function is called with each key-value pair in
        /// the object, and the iterated object</div></li>
        /// </ul></divutil>
        /// @param {Object} scope The scope (<code>this</code> reference) in which the specified function is executed. Defaults to
        /// the <code>object</code> being iterated.
        /// </summary>
        public static void iterate(object obj, JsAction fn, object scope){}
        /// <summary>
        /// Creates namespaces to be used for scoping variables and classes so that they are not global.
        /// Specifying the last node of a namespace implicitly creates all other nodes. Usage:
        /// <pre><code>
        /// Ext.namespace('Company', 'Company.data');
        /// Ext.namespace('Company.data'); // equivalent and preferable to above syntax
        /// Company.Widget = function() { ... }
        /// Company.data.CustomStore = function(config) { ... }
        /// </code></pre>
        /// @param {String} namespace1
        /// @param {String} namespace2
        /// @param {String} etc
        /// @return {Object} The namespace object. (If multiple arguments are passed, this will be the last namespace created)
        /// @method namespace
        /// </summary>
        public static object @namespace(){return null;}
        /// <summary>
        /// Utility method for validating that a value is numeric, returning the specified default value if it is not.
        /// @param {Mixed} value Should be a number, but any type will be handled appropriately
        /// @param {Number} defaultValue The value to return if the original value is non-numeric
        /// @return {Number} Value, if numeric, else defaultValue
        /// </summary>
        public static JsNumber num(object v, JsNumber defaultValue){return null;}
        /// <summary>
        /// Adds a listener to be notified when the document is ready (before onload and before images are loaded). Can be
        /// accessed shorthanded as Ext.onReady().
        /// @param {Function} fn The method the event invokes.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the handler function executes. Defaults to the browser window.
        /// @param {boolean} options (optional) Options object as passed to {@link Ext.Element#addListener}. It is recommended that the options
        /// <code>{single: true}</code> be used so that the handler is removed on first invocation.
        /// </summary>
        public static void onReady(JsAction fn, object scope, object options){}
        /// <summary>
        /// Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
        /// Usage:<pre><code>
        /// Ext.override(MyClass, {
        /// newMethod1: function(){
        /// // etc.
        /// },
        /// newMethod2: function(foo){
        /// // etc.
        /// }
        /// });
        /// </code></pre>
        /// @param {Object} origclass The class to override
        /// @param {Object} overrides The list of functions to add to origClass.  This should be specified as an object literal
        /// containing one or more methods.
        /// @method override
        /// </summary>
        public static void @override(object origclass, object overrides){}
        /// <summary>
        /// Plucks the value of a property from each item in the Array
        /// *
        /// // Example:
        /// Ext.pluck(Ext.query("p"), "className"); // [el1.className, el2.className, ..., elN.className]
        /// *
        /// @param {Array|NodeList} arr The Array of items to pluck the value from.
        /// @param {String} prop The property name to pluck from each element.
        /// @return {Array} The value from each item in the Array.
        /// </summary>
        public static JsArray pluck(object arr, JsString prop){return null;}
        /// <summary>
        /// Shorthand for {@link Ext.PluginMgr#registerType}
        /// @param {String} ptype The {@link Ext.component#ptype mnemonic string} by which the Plugin class
        /// may be looked up.
        /// @param {Constructor} cls The new Plugin class.
        /// @member Ext
        /// @method preg
        /// </summary>
        public static void preg(){}
        /// <summary>
        /// Shorthand for {@link Ext.Dispatcher#redirect}. Dispatches a request to a controller action, adding to the History
        /// stack and updating the page url as necessary.
        /// @member Ext
        /// @method redirect
        /// </summary>
        public static void redirect(){}
        /// <summary>
        /// Shorthand for {@link Ext.ComponentMgr#registerType}
        /// @param {String} xtype The {@link Ext.component#xtype mnemonic string} by which the Component class
        /// may be looked up.
        /// @param {Constructor} cls The new Component class.
        /// @member Ext
        /// @method reg
        /// </summary>
        public static void reg(){}
        /// <summary>
        /// Shorthand for {@link Ext.ApplicationManager#register}
        /// Creates a new Application class from the specified config object. See {@link Ext.Application} for full examples.
        /// @param {Object} config A configuration object for the Model you wish to create.
        /// @return {Ext.Application} The newly created Application
        /// @member Ext
        /// @method regApplication
        /// </summary>
        public static Application regApplication(){return null;}
        /// <summary>
        /// Shorthand for {@link Ext.ControllerMgr#register}
        /// Creates a new Controller class from the specified config object. See {@link Ext.Controller} for full examples.
        /// @param {Object} config A configuration object for the Controller you wish to create.
        /// @return {Ext.Controller} The newly registered Controller
        /// @member Ext
        /// @method regController
        /// </summary>
        public static Controller regController(){return null;}
        public static void regGesture(){}
        /// <summary>
        /// Shorthand for {@link Ext.layout.LayoutManager#registerType}
        /// @param {String} type The {@link Ext.layout.Layout#type mnemonic string} by which the Layout class
        /// may be looked up.
        /// @param {Constructor} cls The new Layout class.
        /// @member Ext
        /// @method regLayout
        /// </summary>
        public static void regLayout(){}
        /// <summary>
        /// Shorthand for {@link Ext.ModelMgr#registerType}
        /// Creates a new Model class from the specified config object. See {@link Ext.data.Model} for full examples.
        /// @param {Object} config A configuration object for the Model you wish to create.
        /// @return {Ext.data.Model} The newly registered Model
        /// @member Ext
        /// @method regModel
        /// </summary>
        public static Model regModel(){return null;}
        /// <summary>
        /// <p>Creates a new store for the given id and config, then registers it with the {@link Ext.StoreMgr Store Mananger}.
        /// Sample usage:</p>
        /// <pre><code>
        /// Ext.regStore('AllUsers', {
        /// model: 'User'
        /// });
        /// //the store can now easily be used throughout the application
        /// new Ext.List({
        /// store: 'AllUsers',
        /// ... other config
        /// });
        /// </code></pre>
        /// @param {String} id The id to set on the new store
        /// @param {Object} config The store config
        /// @param {Constructor} cls The new Component class.
        /// @member Ext
        /// @method regStore
        /// </summary>
        public static void regStore(JsString name, object config){}
        /// <summary>
        /// <p>Removes this element from the document, removes all DOM event listeners, and deletes the cache reference.
        /// All DOM event listeners are removed from this element. If {@link Ext#enableNestedListenerRemoval} is
        /// <code>true</code>, then DOM event listeners are also removed from all child nodes. The body node
        /// will be ignored if passed in.</p>
        /// @param {HTMLElement} node The node to remove
        /// </summary>
        public static void removeNode(HtmlElement node){}
        /// <summary>
        /// Repaints the whole page. This fixes frequently encountered painting issues in mobile Safari.
        /// </summary>
        public static void repaint(){}
        /// <summary>
        /// Sets up a page for use on a mobile device.
        /// @param {Object} config
        /// *
        /// Valid configurations are:
        /// <ul>
        /// <li>fullscreen - Boolean - Sets an appropriate meta tag for Apple devices to run in full-screen mode.</li>
        /// <li>tabletStartupScreen - String - Startup screen to be used on an iPad. The image must be 768x1004 and in portrait orientation.</li>
        /// <li>phoneStartupScreen - String - Startup screen to be used on an iPhone or iPod touch. The image must be 320x460 and in
        /// portrait orientation.</li>
        /// <li>icon - Default icon to use. This will automatically apply to both tablets and phones. These should be 72x72.</li>
        /// <li>tabletIcon - String - An icon for only tablets. (This config supersedes icon.) These should be 72x72.</li>
        /// <li>phoneIcon - String - An icon for only phones. (This config supersedes icon.) These should be 57x57.</li>
        /// <li>glossOnIcon - Boolean - Add gloss on icon on iPhone, iPad and iPod Touch</li>
        /// <li>statusBarStyle - String - Sets the status bar style for fullscreen iPhone OS web apps. Valid options are default, black,
        /// or black-translucent.</li>
        /// <li>onReady - Function - Function to be run when the DOM is ready.<li>
        /// <li>scope - Scope - Scope for the onReady configuraiton to be run in.</li>
        /// </ul>
        /// </summary>
        public static void setup(object config){}
        /// <summary>
        /// Converts any iterable (numeric indices and a length property) into a true array
        /// Don't use this on strings. IE doesn't support "abc"[0] which this implementation depends on.
        /// For strings, use this instead: "abc".match(/./g) => [a,b,c];
        /// @param {Iterable} array the iterable object to be turned into a true Array.
        /// @param {Number} start a number that specifies where to start the selection.
        /// @param {Number} end a number that specifies where to end the selection.
        /// @return (Array) array
        /// </summary>
        public static void toArray(object array, JsNumber start, JsNumber end){}
        /// <summary>
        /// Appends content to the query string of a URL, handling logic for whether to place
        /// a question mark or ampersand.
        /// @param {String} url The URL to append to.
        /// @param {String} s The content to append to the URL.
        /// @return (String) The resulting URL
        /// </summary>
        public static void urlAppend(JsString url, JsString s){}
        /// <summary>
        /// Takes an encoded URL and and converts it to an object. Example:
        /// <pre><code>
        /// Ext.urlDecode("foo=1&bar=2"); // returns {foo: "1", bar: "2"}
        /// Ext.urlDecode("foo=1&bar=2&bar=3&bar=4", false); // returns {foo: "1", bar: ["2", "3", "4"]}
        /// </code></pre>
        /// @param {String} string
        /// @param {Boolean} overwrite (optional) Items of the same name will overwrite previous values instead of creating an an array (Defaults to false).
        /// @return {Object} A literal with members
        /// </summary>
        public static object urlDecode(JsString @string, bool overwrite){return null;}
        /// <summary>
        /// Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return "foo=1&bar=2".  Optionally,
        /// property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.
        /// @param {Object} o The object to encode
        /// @param {String} pre (optional) A prefix to add to the url encoded string
        /// @return {String}
        /// </summary>
        public static void urlEncode(object o, JsString pre){}
        public static JsString BLANK_IMAGE_URL{get;set;}
        public static JsString documentId{get;set;}
        /// <summary>
        /// True to automatically uncache orphaned Ext.Elements periodically (defaults to true)
        /// @type Boolean
        /// </summary>
        public static bool enableGarbageCollector{get;set;}
        /// <summary>
        /// True to automatically purge event listeners during garbageCollection (defaults to true).
        /// @type Boolean
        /// </summary>
        public static bool enableListenerCollection{get;set;}
        public static object idSeed{get;set;}
        /// <summary>
        /// True when the document is fully initialized and ready for action
        /// @type Boolean
        /// </summary>
        public static bool isReady{get;set;}
        /// <summary>
        /// Returns the current orientation of the mobile device
        /// @return {String} Either 'portrait' or 'landscape'
        /// </summary>
        [JsProperty]
        public JsString Orientation{[JsMethod(Name="getOrientation")]get;private set;}
        public static JsString platformVersion{get;set;}
        /// <summary>
        /// Sets up a page for use on a mobile device.
        /// @param {Object} config
        /// *
        /// Valid configurations are:
        /// <ul>
        /// <li>fullscreen - Boolean - Sets an appropriate meta tag for Apple devices to run in full-screen mode.</li>
        /// <li>tabletStartupScreen - String - Startup screen to be used on an iPad. The image must be 768x1004 and in portrait orientation.</li>
        /// <li>phoneStartupScreen - String - Startup screen to be used on an iPhone or iPod touch. The image must be 320x460 and in
        /// portrait orientation.</li>
        /// <li>icon - Default icon to use. This will automatically apply to both tablets and phones. These should be 72x72.</li>
        /// <li>tabletIcon - String - An icon for only tablets. (This config supersedes icon.) These should be 72x72.</li>
        /// <li>phoneIcon - String - An icon for only phones. (This config supersedes icon.) These should be 57x57.</li>
        /// <li>glossOnIcon - Boolean - Add gloss on icon on iPhone, iPad and iPod Touch</li>
        /// <li>statusBarStyle - String - Sets the status bar style for fullscreen iPhone OS web apps. Valid options are default, black,
        /// or black-translucent.</li>
        /// <li>onReady - Function - Function to be run when the DOM is ready.<li>
        /// <li>scope - Scope - Scope for the onReady configuraiton to be run in.</li>
        /// </ul>
        /// </summary>
        [JsProperty]
        public object up{private get;[JsMethod(Name="setup")]set;}
        /// <summary>
        /// The version of the framework
        /// @type String
        /// </summary>
        public static JsString version{get;set;}
        public static JsString windowId{get;set;}
    }
    #endregion
    #region History
    /// <summary>
    /// @class Ext.History
    /// @extends Ext.util.Observable
    /// @ignore
    /// @private
    /// Mobile-optimized port of Ext.History. Note - iPad on iOS < 4.2 does not have HTML5 History support so we still
    /// have to poll for changes.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class History
    {
        public History(){}
    }
    #endregion
    #region IndexBar
    /// <summary>
    /// @class Ext.IndexBar
    /// @extends Ext.DataPanel
    /// <p>IndexBar is a component used to display a list of data (primarily an {@link #alphabet}) which can then be used to quickly
    /// navigate through a list (see {@link Ext.List}) of data. When a user taps on an item in the {@link Ext.IndexBar}, it will fire
    /// the <tt>{@link #index}</tt> event.</p>
    /// *
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.IndexBar/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <p>Here is an example of the usage in a {@link Ext.List}:</p>
    /// <pre><code>
    /// Ext.regModel('Contact', {
    /// fields: ['firstName', 'lastName']
    /// });
    /// var store = new Ext.data.JsonStore({
    /// model  : 'Contact',
    /// sorters: 'lastName',
    /// getGroupString : function(record) {
    /// return record.get('lastName')[0];
    /// },
    /// data: [
    /// {firstName: 'Tommy',   lastName: 'Maintz'},
    /// {firstName: 'Rob',     lastName: 'Dougan'},
    /// {firstName: 'Ed',      lastName: 'Spencer'},
    /// {firstName: 'Jamie',   lastName: 'Avins'},
    /// {firstName: 'Aaron',   lastName: 'Conran'},
    /// {firstName: 'Dave',    lastName: 'Kaneda'},
    /// {firstName: 'Michael', lastName: 'Mullany'},
    /// {firstName: 'Abraham', lastName: 'Elias'},
    /// {firstName: 'Jay',     lastName: 'Robinson'},
    /// {firstName: 'Tommy',   lastName: 'Maintz'},
    /// {firstName: 'Rob',     lastName: 'Dougan'},
    /// {firstName: 'Ed',      lastName: 'Spencer'},
    /// {firstName: 'Jamie',   lastName: 'Avins'},
    /// {firstName: 'Aaron',   lastName: 'Conran'},
    /// {firstName: 'Dave',    lastName: 'Kaneda'},
    /// {firstName: 'Michael', lastName: 'Mullany'},
    /// {firstName: 'Abraham', lastName: 'Elias'},
    /// {firstName: 'Jay',     lastName: 'Robinson'}
    /// ]
    /// });
    /// var list = new Ext.List({
    /// tpl: '&lt;tpl for="."&gt;&lt;div class="contact"&gt;{firstName} &lt;strong&gt;{lastName}&lt;/strong&gt;&lt;/div&gt;&lt;/tpl&gt;',
    /// itemSelector: 'div.contact',
    /// singleSelect: true,
    /// grouped     : true,
    /// indexBar    : true,
    /// store: store,
    /// floating     : true,
    /// width        : 350,
    /// height       : 370,
    /// centered     : true,
    /// modal        : true,
    /// hideOnMaskTap: false
    /// });
    /// list.show();
    /// </code></pre>
    /// *
    /// <p>Alternatively you can initate the {@link Ext.IndexBar} component manually in a custom component by using something
    /// similar to the following example:<p>
    /// *
    /// <code><pre>
    /// var indexBar = new Ext.IndexBar({
    /// dock    : 'right',
    /// overlay : true,
    /// alphabet: true
    /// });
    /// </code></pre>
    /// @constructor
    /// Create a new IndexBar
    /// @param {Object} config The config object
    /// @xtype indexbar
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class IndexBar : DataView
    {
        public IndexBar(IndexBarConfig config){}
        public IndexBar(){}
        public new void afterRender(){}
        public void collectData(){}
        public new void getTargetEl(){}
        public new void initComponent(){}
        public new void initEvents(){}
        /// <summary>
        /// Method to determine whether this Sortable is currently sorting.
        /// @return {Boolean} the sorting state of this Sortable.
        /// </summary>
        public bool isHorizontal(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently disabled.
        /// @return {Boolean} the disabled state of this Sortable.
        /// </summary>
        public bool isVertical(){return false;}
        public void loadAlphabet(){}
        public void onTouchEnd(object e, object t){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e, object t){}
        /// <summary>
        /// Refreshes the view by reloading the data from the store and re-rendering the template.
        /// </summary>
        public new void refresh(){}
        /// <summary>
        /// @cfg {String} componentCls Base CSS class
        /// Defaults to <tt>'x-indexbar'</tt>
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// @cfg {Ext.data.Store} store
        /// The store to be used for displaying data on the index bar. The store model must have a <tt>value</tt> field when using the
        /// default {@link #tpl}. If no {@link #store} is defined, it will create a store using the <tt>IndexBarModel</tt> model.
        /// </summary>
        public JsString componentLayout{get;set;}
        /// <summary>
        /// @cfg {String} direction Layout direction, can be either 'vertical' or 'horizontal'
        /// Defaults to <tt>'vertical'</tt>
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// @cfg {String} itemSelector <b>Required</b>. A simple CSS selector (e.g. <tt>div.x-indexbar-item</tt> for items
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// @cfg {String} listPrefix
        /// The prefix string to be appended at the beginning of the list. E.g: useful to add a "#" prefix before numbers
        /// </summary>
        public JsString listPrefix{get;set;}
        public bool scroll{get;set;}
        /// <summary>
        /// @cfg {String} tpl Template for items
        /// </summary>
        public JsString tpl{get;set;}
    }
    #endregion
    #region IndexBarConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class IndexBarConfig
    {
        public IndexBarConfig(){}
        /// <summary>
        /// true to use the {@link #letters} property to show a list of the alphabet. Should <b>not</b> be used
        /// in conjunction with {@link #store}.
        /// </summary>
        public bool alphabet{get;set;}
        /// <summary>
        /// Base CSS class
        /// Defaults to <tt>'x-indexbar'</tt>
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// Layout direction, can be either 'vertical' or 'horizontal'
        /// Defaults to <tt>'vertical'</tt>
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// <b>Required</b>. A simple CSS selector (e.g. <tt>div.x-indexbar-item</tt> for items
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// The letters to show on the index bar. Defaults to the English alphabet, A-Z.
        /// </summary>
        public JsArray letters{get;set;}
        /// <summary>
        /// The prefix string to be appended at the beginning of the list. E.g: useful to add a "#" prefix before numbers
        /// </summary>
        public JsString listPrefix{get;set;}
        /// <summary>
        /// The store to be used for displaying data on the index bar. The store model must have a <tt>value</tt> field when using the
        /// default {@link #tpl}. If no {@link #store} is defined, it will create a store using the <tt>IndexBarModel</tt> model.
        /// </summary>
        public Store store{get;set;}
        /// <summary>
        /// Template for items
        /// </summary>
        public JsString tpl{get;set;}
    }
    #endregion
    #region Interaction
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.Interaction
    /// @extends Ext.util.Observable
    /// <p>Interactions are very simple objects that represent an action performed by specific {@link Ext.Controller}
    /// action. The must consist of the {@link #controller} and {@link #action} to be called, but can contain any other
    /// data too. See {@link Ext.Dispatcher} for more details on how Interactions fit into the application ecosystem.</p>
    /// <p>Interactions are an internal representation that most developers will not have much direct use for. They
    /// help provide a normalized API for controller actions - each action should simply be set up to receive an Interaction
    /// object. Because Interaction objects are always created when dispatching to a controller action, it is possible to
    /// store the Interaction objects that were created in a session to perform simple analytics on how the application
    /// is used. This is not built into the framework at the moment, but is left open for custom development if needed.</p>
    /// @constructor
    /// @param {Object} config Options object containing at least a controller/action pair
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Interaction : Observable
    {
        public Interaction(){}
        public Interaction(InteractionConfig config){}
        /// <summary>
        /// True if this Interaction has already been dispatched
        /// @property dispatched
        /// @type Boolean
        /// </summary>
        public Interaction(object config){}
        /// <summary>
        /// @cfg {String} action The controller action to invoke
        /// </summary>
        public JsString action{get;set;}
        /// <summary>
        /// @cfg {String} controller The controller to dispatch to
        /// </summary>
        public JsString controller{get;set;}
        /// <summary>
        /// True if this Interaction has already been dispatched
        /// @property dispatched
        /// @type Boolean
        /// </summary>
        public bool dispatched{get;set;}
    }
    #endregion
    #region InteractionConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class InteractionConfig
    {
        public InteractionConfig(){}
        /// <summary>
        /// The controller action to invoke
        /// </summary>
        public JsString action{get;set;}
        /// <summary>
        /// Any arguments to pass to the action
        /// </summary>
        public JsArray args{get;set;}
        /// <summary>
        /// The controller to dispatch to
        /// </summary>
        public JsString controller{get;set;}
        /// <summary>
        /// Optional scope to execute the controller action in
        /// </summary>
        public object scope{get;set;}
    }
    #endregion
    #region is
    [JsType(JsMode.Prototype, Export=false)]
    public partial class @is
    {
        public @is(){}
        /// <summary>
        /// @class Ext.is
        /// Determines information about the current platform the application is running on.
        /// @singleton
        /// </summary>
        public static void init(object navigator){}
    }
    #endregion
    #region List
    /// <summary>
    /// @class Ext.List
    /// @extends Ext.DataView
    /// <p>A mechanism for displaying data using a list layout template. List uses an {@link Ext.XTemplate}
    /// as its internal templating mechanism, and is bound to an {@link Ext.data.Store} so that as the data
    /// in the store changes the view is automatically updated to reflect the changes.</p>
    /// <p>The view also provides built-in behavior for many common events that can occur for its contained items
    /// including itemtap, containertap, etc. as well as a built-in selection model. <b>In order to use these
    /// features, an {@link #itemSelector} config must be provided for the DataView to determine what nodes it
    /// will be working with.</b></p>
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #itemTpl}</li>
    /// <li>{@link #store}</li>
    /// <li>{@link #grouped}</li>
    /// <li>{@link #indexBar}</li>
    /// <li>{@link #singleSelect}</li>
    /// <li>{@link #multiSelect}</li>
    /// </ul>
    /// <h2>Useful Methods</h2>
    /// <ul class="list">
    /// <li>{@link #bindStore}</li>
    /// <li>{@link #getRecord}</li>
    /// <li>{@link #getRecords}</li>
    /// <li>{@link #getSelectedRecords}</li>
    /// <li>{@link #getSelectedNodes}</li>
    /// <li>{@link #indexOf}</li>
    /// </ul>
    /// <h2>Useful Events</h2>
    /// <ul class="list">
    /// <li>{@link #itemtap}</li>
    /// <li>{@link #itemdoubletap}</li>
    /// <li>{@link #itemswipe}</li>
    /// <li>{@link #selectionchange}</li>
    /// </ul>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.List/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// Ext.regModel('Contact', {
    /// fields: ['firstName', 'lastName']
    /// });
    /// var store = new Ext.data.JsonStore({
    /// model  : 'Contact',
    /// sorters: 'lastName',
    /// getGroupString : function(record) {
    /// return record.get('lastName')[0];
    /// },
    /// data: [
    /// {firstName: 'Tommy',   lastName: 'Maintz'},
    /// {firstName: 'Rob',     lastName: 'Dougan'},
    /// {firstName: 'Ed',      lastName: 'Spencer'},
    /// {firstName: 'Jamie',   lastName: 'Avins'},
    /// {firstName: 'Aaron',   lastName: 'Conran'},
    /// {firstName: 'Dave',    lastName: 'Kaneda'},
    /// {firstName: 'Michael', lastName: 'Mullany'},
    /// {firstName: 'Abraham', lastName: 'Elias'},
    /// {firstName: 'Jay',     lastName: 'Robinson'}
    /// ]
    /// });
    /// var list = new Ext.List({
    /// fullscreen: true,
    /// itemTpl : '{firstName} {lastName}',
    /// grouped : true,
    /// indexBar: true,
    /// store: store
    /// });
    /// list.show();
    /// </code></pre>
    /// @constructor
    /// Create a new List
    /// @param {Object} config The config object
    /// @xtype list
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class List : DataView
    {
        public List(ListConfig config){}
        public List(){}
        public new void afterComponentLayout(){}
        public new void afterRender(){}
        public void collectData(object records, object startIndex){}
        public void getClosestGroups(object pos){}
        public void getGroupId(object group){}
        public void handleItemDisclosure(object e, object t){}
        public new void initComponent(){}
        public new void initEvents(){}
        public new void onAdd(object ds, object records, object index){}
        public void onDeactivate(){}
        public void onIndex(object record, object target, object index){}
        public new void onRemove(object ds, object record, object index){}
        public new void onRender(){}
        public void onScroll(object scroller, object pos, object options){}
        public void onScrollStart(){}
        public new void onUpdate(object store, object record){}
        /// <summary>
        /// Set the current active group
        /// @param {Object} group The group to set active
        /// </summary>
        public void setActiveGroup(object group){}
        public void updateIndexes(){}
        public void updateList(){}
        public void updateOffsets(){}
        /// <summary>
        /// Set the current active group
        /// @param {Object} group The group to set active
        /// </summary>
        [JsProperty]
        public object ActiveGroup{private get;[JsMethod(Name="setActiveGroup")]set;}
        /// <summary>
        /// @cfg {Boolean} clearSelectionOnDeactivate
        /// True to clear any selections on the list when the list is deactivated (defaults to true).
        /// </summary>
        public bool clearSelectionOnDeactivate{get;set;}
        /// <summary>
        /// @class Ext.List
        /// @extends Ext.DataView
        /// <p>A mechanism for displaying data using a list layout template. List uses an {@link Ext.XTemplate}
        /// as its internal templating mechanism, and is bound to an {@link Ext.data.Store} so that as the data
        /// in the store changes the view is automatically updated to reflect the changes.</p>
        /// <p>The view also provides built-in behavior for many common events that can occur for its contained items
        /// including itemtap, containertap, etc. as well as a built-in selection model. <b>In order to use these
        /// features, an {@link #itemSelector} config must be provided for the DataView to determine what nodes it
        /// will be working with.</b></p>
        /// <h2>Useful Properties</h2>
        /// <ul class="list">
        /// <li>{@link #itemTpl}</li>
        /// <li>{@link #store}</li>
        /// <li>{@link #grouped}</li>
        /// <li>{@link #indexBar}</li>
        /// <li>{@link #singleSelect}</li>
        /// <li>{@link #multiSelect}</li>
        /// </ul>
        /// <h2>Useful Methods</h2>
        /// <ul class="list">
        /// <li>{@link #bindStore}</li>
        /// <li>{@link #getRecord}</li>
        /// <li>{@link #getRecords}</li>
        /// <li>{@link #getSelectedRecords}</li>
        /// <li>{@link #getSelectedNodes}</li>
        /// <li>{@link #indexOf}</li>
        /// </ul>
        /// <h2>Useful Events</h2>
        /// <ul class="list">
        /// <li>{@link #itemtap}</li>
        /// <li>{@link #itemdoubletap}</li>
        /// <li>{@link #itemswipe}</li>
        /// <li>{@link #selectionchange}</li>
        /// </ul>
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.List/screenshot.png" /></p>
        /// <h2>Example code:</h2>
        /// <pre><code>
        /// Ext.regModel('Contact', {
        /// fields: ['firstName', 'lastName']
        /// });
        /// var store = new Ext.data.JsonStore({
        /// model  : 'Contact',
        /// sorters: 'lastName',
        /// getGroupString : function(record) {
        /// return record.get('lastName')[0];
        /// },
        /// data: [
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Michael', lastName: 'Mullany'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'}
        /// ]
        /// });
        /// var list = new Ext.List({
        /// fullscreen: true,
        /// itemTpl : '{firstName} {lastName}',
        /// grouped : true,
        /// indexBar: true,
        /// store: store
        /// });
        /// list.show();
        /// </code></pre>
        /// @constructor
        /// Create a new List
        /// @param {Object} config The config object
        /// @xtype list
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// @cfg {Boolean} grouped
        /// True to group the list items together (defaults to false). When using grouping, you must specify a method getGroupString
        /// on the store so that grouping can be maintained.
        /// <pre><code>
        /// Ext.regModel('Contact', {
        /// fields: ['firstName', 'lastName']
        /// });
        /// var store = new Ext.data.JsonStore({
        /// model  : 'Contact',
        /// sorters: 'lastName',
        /// getGroupString : function(record) {
        /// // Group by the last name
        /// return record.get('lastName')[0];
        /// },
        /// data: [
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Michael', lastName: 'Mullany'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'},
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Michael', lastName: 'Mullany'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'}
        /// ]
        /// });
        /// </code></pre>
        /// </summary>
        public bool grouped{get;set;}
        /// <summary>
        /// @cfg {Boolean/Object} indexBar
        /// True to render an alphabet IndexBar docked on the right.
        /// This can also be a config object that will be passed to {@link Ext.IndexBar}
        /// (defaults to false)
        /// </summary>
        public object indexBar{get;set;}
        /// <summary>
        /// @cfg {String} itemCls An additional class that will be added to each item in the List.
        /// Defaults to ''.
        /// </summary>
        public JsString itemCls{get;set;}
        /// <summary>
        /// @cfg {String} itemSelector
        /// @private
        /// @ignore
        /// Not to be used.
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// @cfg {Boolean/Function/Object} onItemDisclosure
        /// True to display a disclosure icon on each list item.
        /// This won't bind a listener to the tap event. The list
        /// will still fire the disclose event though.
        /// By setting this config to a function, it will automatically
        /// add a tap event listeners to the disclosure buttons which
        /// will fire your function.
        /// Finally you can specify an object with a 'scope' and 'handler'
        /// property defined. This will also be bound to the tap event listener
        /// and is useful when you want to change the scope of the handler.
        /// </summary>
        public object onItemDisclosure{get;set;}
        /// <summary>
        /// @cfg {Boolean} preventSelectionOnDisclose True to prevent the item selection when the user
        /// taps a disclose icon. Defaults to <tt>true</tt>
        /// </summary>
        public bool preventSelectionOnDisclose{get;set;}
    }
    #endregion
    #region ListConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ListConfig
    {
        public ListConfig(){}
        /// <summary>
        /// True to clear any selections on the list when the list is deactivated (defaults to true).
        /// </summary>
        public bool clearSelectionOnDeactivate{get;set;}
        /// <summary>
        /// True to group the list items together (defaults to false). When using grouping, you must specify a method getGroupString
        /// on the store so that grouping can be maintained.
        /// <pre><code>
        /// Ext.regModel('Contact', {
        /// fields: ['firstName', 'lastName']
        /// });
        /// var store = new Ext.data.JsonStore({
        /// model  : 'Contact',
        /// sorters: 'lastName',
        /// getGroupString : function(record) {
        /// // Group by the last name
        /// return record.get('lastName')[0];
        /// },
        /// data: [
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Michael', lastName: 'Mullany'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'},
        /// {firstName: 'Tommy',   lastName: 'Maintz'},
        /// {firstName: 'Rob',     lastName: 'Dougan'},
        /// {firstName: 'Ed',      lastName: 'Spencer'},
        /// {firstName: 'Jamie',   lastName: 'Avins'},
        /// {firstName: 'Aaron',   lastName: 'Conran'},
        /// {firstName: 'Dave',    lastName: 'Kaneda'},
        /// {firstName: 'Michael', lastName: 'Mullany'},
        /// {firstName: 'Abraham', lastName: 'Elias'},
        /// {firstName: 'Jay',     lastName: 'Robinson'}
        /// ]
        /// });
        /// </code></pre>
        /// </summary>
        public bool grouped{get;set;}
        /// <summary>
        /// True to render an alphabet IndexBar docked on the right.
        /// This can also be a config object that will be passed to {@link Ext.IndexBar}
        /// (defaults to false)
        /// </summary>
        public object indexBar{get;set;}
        /// <summary>
        /// An additional class that will be added to each item in the List.
        /// Defaults to ''.
        /// </summary>
        public JsString itemCls{get;set;}
        /// <summary>
        /// @private
        /// @ignore
        /// Not to be used.
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// The inner portion of the item template to be rendered. Follows an XTemplate
        /// structure and will be placed inside of a tpl for in the tpl configuration.
        /// </summary>
        public object itemTpl{get;set;}
        /// <summary>
        /// True to display a disclosure icon on each list item.
        /// This won't bind a listener to the tap event. The list
        /// will still fire the disclose event though.
        /// By setting this config to a function, it will automatically
        /// add a tap event listeners to the disclosure buttons which
        /// will fire your function.
        /// Finally you can specify an object with a 'scope' and 'handler'
        /// property defined. This will also be bound to the tap event listener
        /// and is useful when you want to change the scope of the handler.
        /// </summary>
        public object onItemDisclosure{get;set;}
        /// <summary>
        /// Whether or not to pin headers on top of item groups while scrolling for an iPhone native list experience.
        /// Defaults to <tt>false</tt> on Android and Blackberry (for performance reasons)
        /// Defaults to <tt>true</tt> on other devices.
        /// </summary>
        public bool pinHeaders{get;set;}
        /// <summary>
        /// True to prevent the item selection when the user
        /// taps a disclose icon. Defaults to <tt>true</tt>
        /// </summary>
        public bool preventSelectionOnDisclose{get;set;}
    }
    #endregion
    #region LoadMask
    /// <summary>
    /// @class Ext.LoadMask
    /// A simple utility class for generically masking elements while loading data.  If the {@link #store}
    /// config option is specified, the masking will be automatically synchronized with the store's loading
    /// process and the mask element will be cached for reuse.
    /// <p>Example usage:</p>
    /// *<pre><code>
    /// // Basic mask:
    /// var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
    /// myMask.show();
    /// </code></pre>
    /// @constructor
    /// Create a new LoadMask
    /// @param {Mixed} el The element or DOM node, or its id
    /// @param {Object} config The config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class LoadMask : Observable
    {
        public LoadMask(){}
        public LoadMask(LoadMaskConfig config){}
        /// <summary>
        /// Changes the data store bound to this LoadMask.
        /// @param {Store} store The store to bind to this LoadMask
        /// </summary>
        public void bindStore(object store, object initial){}
        /// <summary>
        /// Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
        /// @type Boolean
        /// </summary>
        public LoadMask(object el, object config){}
        public void destroy(){}
        /// <summary>
        /// Disables the mask to prevent it from being displayed
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enables the mask so that it can be displayed
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Hide this LoadMask.
        /// </summary>
        public void hide(){}
        /// <summary>
        /// Method to determine whether this LoadMask is currently disabled.
        /// @return {Boolean} the disabled state of this LoadMask.
        /// </summary>
        public bool isDisabled(){return false;}
        public void onBeforeLoad(){}
        public void onLoad(){}
        /// <summary>
        /// Show this LoadMask over the configured Element.
        /// </summary>
        public void show(){}
        /// <summary>
        /// Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
        /// @type Boolean
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// @cfg {String} msg
        /// The text to display in a centered loading message box (defaults to 'Loading...')
        /// </summary>
        public JsString msg{get;set;}
        /// <summary>
        /// @cfg {String} msgCls
        /// The CSS class to apply to the loading message element (defaults to "x-mask-loading")
        /// </summary>
        public JsString msgCls{get;set;}
    }
    #endregion
    #region LoadMaskConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class LoadMaskConfig
    {
        public LoadMaskConfig(){}
        /// <summary>
        /// The text to display in a centered loading message box (defaults to 'Loading...')
        /// </summary>
        public JsString msg{get;set;}
        /// <summary>
        /// The CSS class to apply to the loading message element (defaults to "x-mask-loading")
        /// </summary>
        public JsString msgCls{get;set;}
        /// <summary>
        /// Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and
        /// hidden on either load sucess, or load fail.
        /// </summary>
        public Store store{get;set;}
    }
    #endregion
    #region Map
    /// <summary>
    /// @class Ext.Map
    /// @extends Ext.Component
    /// *
    /// <p>Wraps a Google Map in an Ext.Component.<br/>
    /// http://code.google.com/apis/maps/documentation/v3/introduction.html</p>
    /// *
    /// <p>To use this component you must include an additional JavaScript file from
    /// Google:</p>
    /// <pre><code>&lt;script type="text/javascript" src="http:&#47;&#47;maps.google.com/maps/api/js?sensor=true"&gt;&lt/script&gt;</code></pre>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.Map/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// var pnl = new Ext.Panel({
    /// fullscreen: true,
    /// items     : [
    /// {
    /// xtype             : 'map',
    /// useCurrentLocation: true
    /// }
    /// ]
    /// });</code></pre>
    /// @xtype map
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Map : Ext.Component
    {
        public Map(MapConfig config){}
        public Map(){}
        public new void afterComponentLayout(){}
        public new void afterRender(){}
        public void getState(){}
        public new void initComponent(){}
        public void onCenterChange(){}
        public new void onDestroy(){}
        public void onGeoError(object geo){}
        public void onGeoUpdate(object coords){}
        public new void onRender(object container, object position){}
        public void onResize(object w, object h){}
        public void onTypeChange(){}
        public void onUpdate(object map, object e, object options){}
        public void onZoom(){}
        public void renderMap(){}
        /// <summary>
        /// Moves the map center to the designated coordinates hash of the form:
        /// <code><pre>
        /// { latitude : 37.381592,
        /// longitude : -122.135672
        /// }</pre></code>
        /// or a google.maps.LatLng object representing to the target location.
        /// @param {Object/google.maps.LatLng} coordinates Object representing the desired Latitude and
        /// longitude upon which to center the map
        /// </summary>
        public void update(object coordinates){}
        /// <summary>
        /// @cfg {String} baseCls
        /// The base CSS class to apply to the Maps's element (defaults to <code>'x-map'</code>).
        /// </summary>
        public new JsString baseCls{get;set;}
        /// <summary>
        /// @type {Ext.util.GeoLocation}
        /// </summary>
        public object geo{get;set;}
        /// <summary>
        /// @type {google.maps.Map}
        /// The wrapped map.
        /// </summary>
        public object map{get;set;}
        /// <summary>
        /// @cfg {Boolean} maskMap
        /// Masks the map (Defaults to false)
        /// </summary>
        public bool maskMap{get;set;}
        /// <summary>
        /// @cfg {Strng} maskMapCls
        /// CSS class to add to the map when maskMap is set to true.
        /// </summary>
        public object maskMapCls{get;set;}
        /// <summary>
        /// @cfg {Boolean} useCurrentLocation
        /// Pass in true to center the map based on the geolocation coordinates.
        /// </summary>
        public bool monitorResize{get;set;}
        /// <summary>
        /// @cfg {Boolean} useCurrentLocation
        /// Pass in true to center the map based on the geolocation coordinates.
        /// </summary>
        public bool useCurrentLocation{get;set;}
    }
    #endregion
    #region MapConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class MapConfig
    {
        public MapConfig(){}
        /// <summary>
        /// The base CSS class to apply to the Maps's element (defaults to <code>'x-map'</code>).
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// MapOptions as specified by the Google Documentation:
        /// http://code.google.com/apis/maps/documentation/v3/reference.html
        /// </summary>
        public object mapOptions{get;set;}
        /// <summary>
        /// Masks the map (Defaults to false)
        /// </summary>
        public bool maskMap{get;set;}
        /// <summary>
        /// CSS class to add to the map when maskMap is set to true.
        /// </summary>
        public object maskMapCls{get;set;}
    }
    #endregion
    #region Media
    /// <summary>
    /// @class Ext.Media
    /// @extends Ext.Container
    /// *
    /// <p>Provides a base class for audio/visual controls. Should not be used directly.</p>
    /// @xtype media
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Media : Ext.Component
    {
        public Media(MediaConfig config){}
        public Media(){}
        public new void afterRender(){}
        public void onActivate(){}
        public void onDeactivate(){}
        /// <summary>
        /// Pauses media playback
        /// </summary>
        public void pause(){}
        /// <summary>
        /// Starts or resumes media playback
        /// </summary>
        public void play(){}
        /// <summary>
        /// Toggles the media playback state
        /// </summary>
        public void toggle(){}
        /// <summary>
        /// @cfg {Boolean} autoPause
        /// Will automatically pause the media when the container is deactivated.
        /// (Defaults to true)
        /// </summary>
        public bool autoPause{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoResume
        /// Will automatically start playing the media when the container is activated.
        /// (Defaults to false)
        /// </summary>
        public bool autoResume{get;set;}
        /// <summary>
        /// @cfg {Boolean} enableControls
        /// Set this to false to turn off the native media controls
        /// (Defaults to true).
        /// </summary>
        public bool enableControls{get;set;}
        public bool playing{get;set;}
        /// <summary>
        /// @cfg {Boolean} preload
        /// Will begin preloading the media immediately.
        /// (Defaults to true)
        /// </summary>
        public bool preload{get;set;}
        /// <summary>
        /// @cfg {String} url
        /// Location of the media to play.
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region MediaConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class MediaConfig
    {
        public MediaConfig(){}
        /// <summary>
        /// Will automatically pause the media when the container is deactivated.
        /// (Defaults to true)
        /// </summary>
        public bool autoPause{get;set;}
        /// <summary>
        /// Will automatically start playing the media when the container is activated.
        /// (Defaults to false)
        /// </summary>
        public bool autoResume{get;set;}
        /// <summary>
        /// Set this to false to turn off the native media controls
        /// (Defaults to true).
        /// </summary>
        public bool enableControls{get;set;}
        /// <summary>
        /// Will begin preloading the media immediately.
        /// (Defaults to true)
        /// </summary>
        public bool preload{get;set;}
        /// <summary>
        /// Location of the media to play.
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region MessageBox
    /// <summary>
    /// @class Ext.MessageBox
    /// @extends Ext.Sheet
    /// <p>Utility class for generating different styles of message boxes. The framework provides a global singleton {@link Ext.Msg} for common usage.<p/>
    /// <p>Note that the MessageBox is asynchronous.  Unlike a regular JavaScript <code>alert</code> (which will halt
    /// browser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code
    /// that should only run <em>after</em> some user feedback from the MessageBox, you must use a callback function
    /// (see the <code>fn</code> configuration option parameter for the {@link #show show} method for more details).</p>
    /// <h2>Screenshot</h2>
    /// <p><img src="doc_resources/Ext.MessageBox/screenshot.png" /></p>
    /// <h2>Example usage:</h2>
    /// <pre><code>
    /// // Basic alert:
    /// Ext.Msg.alert('Title', 'The quick brown fox jumped over the lazy dog.', Ext.emptyFn);
    /// // Prompt for user data and process the result using a callback:
    /// Ext.Msg.prompt('Name', 'Please enter your name:', function(text) {
    /// // process text value and close...
    /// });
    /// // Confirmation alert
    /// Ext.Msg.confirm("Confirmation", "Are you sure you want to do that?", Ext.emptyFn);
    /// </code></pre>
    /// @xtype messagebox
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class MessageBox : Sheet
    {
        public MessageBox(){}
        public MessageBox(MessageBoxConfig config){}
        public void adjustScale(){}
        /// <summary>
        /// Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).
        /// If a callback function is passed it will be called after the user clicks the button, and the
        /// itemId of the button that was clicked will be passed as the only parameter to the callback
        /// @param {String} title The title bar text
        /// @param {String} msg The message box body text
        /// @param {Function} fn (optional) The callback function invoked after the message box is closed
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox alert(JsString title, JsString msg, JsAction fn, object scope){return null;}
        /// <summary>
        /// Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).
        /// If a callback function is passed it will be called after the user clicks either button,
        /// and the id of the button that was clicked will be passed as the only parameter to the callback
        /// (could also be the top-right close button).
        /// @param {String} title The title bar text
        /// @param {String} msg The message box body text
        /// @param {Function} fn (optional) The callback function invoked when user taps on the OK/Cancel button.
        /// The button is passed as the first argument.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox confirm(JsString title, JsString msg, JsAction fn, object scope){return null;}
        /// <summary>
        /// The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)
        /// @cfg {Number} defaultTextHeight
        /// </summary>
        public MessageBox(object config){}
        public void doComponentLayout(){}
        public void onClick(object button){}
        public void onOrientationChange(){}
        /// <summary>
        /// Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).
        /// The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user
        /// clicks either button, and the id of the button that was clicked (could also be the top-right
        /// close button) and the text that was entered will be passed as the two parameters to the callback.
        /// @param {String} title The title bar text
        /// @param {String} msg The message box body text
        /// @param {Function} fn (optional) The callback function invoked when the user taps on the OK/Cancel button,
        /// the button is passed as the first argument, the entered string value is passed as the second argument
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.
        /// @param {Boolean/Number} multiLine (optional) True to create a multiline textbox using the defaultTextHeight
        /// property, or the height in pixels to create the textbox (defaults to false / single-line)
        /// @param {String} value (optional) Default value of the text input element (defaults to '')
        /// @param {Object} promptConfig <div class="sub-desc">(optional) A hash collection of input attribute values.<div class="sub-desc">Specified values may include:<ul>
        /// <li><tt>focus</tt> : Boolean <div class="sub-desc"><tt>true</tt> to assert initial input focus (defaults to false)</div></li>
        /// <li><tt>placeholder</tt> : String <div class="sub-desc">String value rendered when the input field is empty (defaults to empty string)</div></li>
        /// <li><tt>autocapitalize</tt> : String/Boolean <div class="sub-desc"><tt>true/on</tt> to capitalize the first letter of each word in the input value (defaults to 'off')</div></li>
        /// <li><tt>autocorrect</tt> : String/Boolean <div class="sub-desc"><tt>true/on</tt> to enable spell-checking/autocorrect features if supported by the browser (defaults to 'off')</div></li>
        /// <li><tt>autocomplete</tt> : String/Boolean <div class="sub-desc"><tt>true/on</tt> to enable autoCompletion of supplied text input values if supported by the browser (defaults to 'off')</div></li>
        /// <li><tt>maxlength</tt> : Number <div class="sub-desc">Maximum number of characters allowed in the input if supported by the browser (defaults to 0)</div></li>
        /// <li><tt>type</tt> : String <div class="sub-desc">The type of input field. Possible values (if supported by the browser) may include (text, search, number, range, color, tel, url, email, date, month, week, time, datetime) (defaults to 'text')</div></li>
        /// </ul></div></div>
        /// Example usage:
        /// <pre><code>
        /// Ext.Msg.prompt(
        /// 'Welcome!',
        /// 'What\'s your name going to be today?',
        /// function(value){
        /// console.log(value)
        /// },
        /// null,
        /// false,
        /// null,
        /// { autocapitalize : true, placeholder : 'First-name please...' }
        /// );
        /// </code></pre>
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox prompt(JsString title, JsString msg, JsAction fn, object scope, object multiLine, JsString value, object promptConfig){return null;}
        /// <summary>
        /// Adds the specified icon to the dialog.  By default, the class 'x-msgbox-icon' is applied for default
        /// styling, and the class passed in is expected to supply the background image url. Pass in empty string ('')
        /// to clear any existing icon. This method must be called before the MessageBox is shown.
        /// The following built-in icon classes are supported, but you can also pass in a custom class name:
        /// <pre>
        /// Ext.MessageBox.INFO
        /// Ext.MessageBox.WARNING
        /// Ext.MessageBox.QUESTION
        /// Ext.MessageBox.ERROR
        /// *</pre>
        /// @param {String} icon A CSS classname specifying the icon's background image url, or empty string to clear the icon
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox setIcon(JsString icon, object doLayout){return null;}
        /// <summary>
        /// Displays a new message box, or reinitializes an existing message box, based on the config options
        /// passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,
        /// although those calls are basic shortcuts and do not support all of the config options allowed here.
        /// @param {Object} config The following config options are supported: <ul>
        /// <li><b>buttons</b> : Object/Array<div class="sub-desc">A button config object or Array of the same(e.g., Ext.MessageBox.OKCANCEL or {text:'Foo',
        /// itemId:'cancel'}), or false to not show any buttons (defaults to false)</div></li>
        /// <li><b>cls</b> : String<div class="sub-desc">A custom CSS class to apply to the message box's container element</div></li>
        /// <li><b>defaultTextHeight</b> : Number<div class="sub-desc">The default height in pixels of the message box's multiline textarea
        /// if displayed (defaults to 75)</div></li>
        /// <li><b>fn</b> : Function<div class="sub-desc">A callback function which is called when the dialog is dismissed
        /// by clicking on the configured buttons.
        /// <p>Parameters passed:<ul>
        /// <li><b>buttonId</b> : String<div class="sub-desc">The itemId of the button pressed, one of:<div class="sub-desc"><ul>
        /// <li><tt>ok</tt></li>
        /// <li><tt>yes</tt></li>
        /// <li><tt>no</tt></li>
        /// <li><tt>cancel</tt></li>
        /// </ul></div></div></li>
        /// <li><b>value</b> : String<div class="sub-desc">Value of the input field if either <tt><a href="#show-option-prompt" ext:member="show-option-prompt" ext:cls="Ext.MessageBox">prompt</a></tt>
        /// or <tt><a href="#show-option-multiLine" ext:member="show-option-multiLine" ext:cls="Ext.MessageBox">multiLine</a></tt> is true</div></li>
        /// <li><b>opt</b> : Object<div class="sub-desc">The config object passed to show.</div></li>
        /// </ul></p></div></li>
        /// <li><b>width</b> : Number<div class="sub-desc">A fixed width for the MessageBox (defaults to 'auto')</div></li>
        /// <li><b>height</b> : Number<div class="sub-desc">A fixed height for the MessageBox (defaults to 'auto')</div></li>
        /// <li><b>scope</b> : Object<div class="sub-desc">The scope of the callback function</div></li>
        /// <li><b>icon</b> : String<div class="sub-desc">A CSS class that provides a background image to be used as the body icon for the
        /// dialog (e.g. Ext.MessageBox.WARNING or 'custom-class') (defaults to '')</div></li>
        /// <li><b>modal</b> : Boolean<div class="sub-desc">False to allow user interaction with the page while the message box is
        /// displayed (defaults to true)</div></li>
        /// <li><b>msg</b> : String<div class="sub-desc">A string that will replace the existing message box body text (defaults to the
        /// XHTML-compliant non-breaking space character '&amp;#160;')</div></li>
        /// <li><a id="show-option-multiline"></a><b>multiLine</b> : Boolean<div class="sub-desc">
        /// True to prompt the user to enter multi-line text (defaults to false)</div></li>
        /// <li><a id="show-option-prompt"></a><b>prompt</b> : Boolean<div class="sub-desc">True to prompt the user to enter single-line text (defaults to false)</div></li>
        /// <li><b>title</b> : String<div class="sub-desc">The title text</div></li>
        /// <li><b>value</b> : String<div class="sub-desc">The string value to set into the active textbox element if displayed</div></li>
        /// </ul>
        /// Example usage:
        /// <pre><code>
        /// Ext.Msg.show({
        /// title: 'Address',
        /// msg: 'Please enter your address:',
        /// width: 300,
        /// buttons: Ext.MessageBox.OKCANCEL,
        /// multiLine: true,
        /// prompt : { maxlength : 180, autocapitalize : true },
        /// fn: saveAddress,
        /// icon: Ext.MessageBox.INFO
        /// });
        /// </code></pre>
        /// @return {Ext.MessageBox} this
        /// </summary>
        public new MessageBox show(object config){return null;}
        /// <summary>
        /// Updates the message box body text
        /// @param {String} text (optional) Replaces the message box element's innerHTML with the specified string (defaults to
        /// the XHTML-compliant non-breaking space character '&amp;#160;')
        /// @return {Ext.MessageBox} this
        /// </summary>
        public MessageBox updateText(JsString text, object doLayout){return null;}
        /// <summary>
        /// @cfg {String/Mixed} exitAnimation effect when the message box is being hidden (defaults to 'pop')
        /// </summary>
        public bool autoHeight{get;set;}
        /// <summary>
        /// @class Ext.MessageBox
        /// @extends Ext.Sheet
        /// <p>Utility class for generating different styles of message boxes. The framework provides a global singleton {@link Ext.Msg} for common usage.<p/>
        /// <p>Note that the MessageBox is asynchronous.  Unlike a regular JavaScript <code>alert</code> (which will halt
        /// browser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code
        /// that should only run <em>after</em> some user feedback from the MessageBox, you must use a callback function
        /// (see the <code>fn</code> configuration option parameter for the {@link #show show} method for more details).</p>
        /// <h2>Screenshot</h2>
        /// <p><img src="doc_resources/Ext.MessageBox/screenshot.png" /></p>
        /// <h2>Example usage:</h2>
        /// <pre><code>
        /// // Basic alert:
        /// Ext.Msg.alert('Title', 'The quick brown fox jumped over the lazy dog.', Ext.emptyFn);
        /// // Prompt for user data and process the result using a callback:
        /// Ext.Msg.prompt('Name', 'Please enter your name:', function(text) {
        /// // process text value and close...
        /// });
        /// // Confirmation alert
        /// Ext.Msg.confirm("Confirmation", "Are you sure you want to do that?", Ext.emptyFn);
        /// </code></pre>
        /// @xtype messagebox
        /// </summary>
        public new bool centered{get;set;}
        /// <summary>
        /// @cfg {String} componentCls
        /// Component's Base CSS class
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)
        /// @cfg {Number} defaultTextHeight
        /// </summary>
        public JsNumber defaultTextHeight{get;set;}
        /// <summary>
        /// @cfg {String/Mixed} enterAnimation effect when the message box is being displayed (defaults to 'pop')
        /// </summary>
        public new object enterAnimation{get;set;}
        /// <summary>
        /// @cfg {String/Mixed} exitAnimation effect when the message box is being hidden (defaults to 'pop')
        /// </summary>
        public new object exitAnimation{get;set;}
        public bool renderHidden{get;set;}
        public JsString ui{get;set;}
    }
    #endregion
    #region MessageBoxConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class MessageBoxConfig
    {
        public MessageBoxConfig(){}
        /// <summary>
        /// Component's Base CSS class
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// </summary>
        public JsNumber defaultTextHeight{get;set;}
        /// <summary>
        /// effect when the message box is being displayed (defaults to 'pop')
        /// </summary>
        public object enterAnimation{get;set;}
    }
    #endregion
    #region ModelMgr
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.ModelMgr
    /// @extends Ext.AbstractManager
    /// @singleton
    /// <p>Creates and manages the current set of models</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ModelMgr
    {
        public ModelMgr(){}
    }
    #endregion
    #region Msg
    /// <summary>
    /// @class Ext.Msg
    /// <p>A global shared singleton instance of the {@link Ext.MessageBox} class. See {@link Ext.MessageBox} for documentation.</p>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Msg
    {
        public Msg(){}
    }
    #endregion
    #region NestedList
    /// <summary>
    /// @class Ext.NestedList
    /// @extends Ext.Panel
    /// *
    /// <p>NestedList provides a miller column interface to navigate between nested sets
    /// and provide a clean interface with limited screen real-estate.</p>
    /// *
    /// <pre><code>
    /// // store with data
    /// var data = {
    /// text: 'Groceries',
    /// items: [{
    /// text: 'Drinks',
    /// items: [{
    /// text: 'Water',
    /// items: [{
    /// text: 'Sparkling',
    /// leaf: true
    /// },{
    /// text: 'Still',
    /// leaf: true
    /// }]
    /// },{
    /// text: 'Coffee',
    /// leaf: true
    /// },{
    /// text: 'Espresso',
    /// leaf: true
    /// },{
    /// text: 'Redbull',
    /// leaf: true
    /// },{
    /// text: 'Coke',
    /// leaf: true
    /// },{
    /// text: 'Diet Coke',
    /// leaf: true
    /// }]
    /// },{
    /// text: 'Fruit',
    /// items: [{
    /// text: 'Bananas',
    /// leaf: true
    /// },{
    /// text: 'Lemon',
    /// leaf: true
    /// }]
    /// },{
    /// text: 'Snacks',
    /// items: [{
    /// text: 'Nuts',
    /// leaf: true
    /// },{
    /// text: 'Pretzels',
    /// leaf: true
    /// },{
    /// text: 'Wasabi Peas',
    /// leaf: true
    /// }]
    /// },{
    /// text: 'Empty Category',
    /// items: []
    /// }]
    /// };
    /// Ext.regModel('ListItem', {
    /// fields: [{name: 'text', type: 'string'}]
    /// });
    /// var store = new Ext.data.TreeStore({
    /// model: 'ListItem',
    /// root: data,
    /// proxy: {
    /// type: 'ajax',
    /// reader: {
    /// type: 'tree',
    /// root: 'items'
    /// }
    /// }
    /// });
    /// var nestedList = new Ext.NestedList({
    /// fullscreen: true,
    /// title: 'Groceries',
    /// displayField: 'text',
    /// store: store
    /// });</code></pre>
    /// *
    /// @xtype nestedlist
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class NestedList : Ext.Panel
    {
        public NestedList(NestedListConfig config){}
        public NestedList(){}
        public void addNextCard(object recordNode, object swapTo){}
        /// <summary>
        /// Implement getDetailCard to provide a final card for leaf nodes when useDetailCard
        /// is enabled. getDetailCard will be passed the currentRecord and the parentRecord.
        /// The default implementation will return false
        /// @param {Ext.data.Record} record
        /// @param {Ext.data.Record} parentRecord
        /// </summary>
        public void getDetailCard(object recordNode, object parentNode){}
        /// <summary>
        /// Override this method to provide custom template rendering of individual
        /// nodes. The template will receive all data within the Record and will also
        /// receive whether or not it is a leaf node.
        /// @param {Ext.data.Record} node
        /// </summary>
        public void getItemTextTpl(object node){}
        /// <summary>
        /// @private
        /// Returns the list config for a specified node.
        /// @param {HTMLElement} node The node for the list config
        /// </summary>
        public void getListConfig(HtmlElement node){}
        /// <summary>
        /// Returns the subList for a specified node
        /// @param {HTMLElement} node The node for the subList
        /// </summary>
        public void getSubList(HtmlElement node){}
        /// <summary>
        /// Override this method to provide custom template rendering of titles/back
        /// buttons when useTitleAsBackText is enabled.
        /// @param {Ext.data.Record} node
        /// </summary>
        public void getTitleTextTpl(object node){}
        public new void initComponent(){}
        /// <summary>
        /// Called when the {@link #backButton} has been tapped
        /// </summary>
        public void onBackTap(){}
        /// <summary>
        /// Called when an list item has been tapped
        /// @param {Ext.List} subList The subList the item is on
        /// @param {Number} subIdx The id of the item tapped
        /// @param {Ext.Element} el The element of the item tapped
        /// @param {Ext.EventObject} e The event
        /// </summary>
        public void onItemTap(List subList, JsNumber subIdx, Element el, EventObject e){}
        public void renderTitleText(object node){}
        public void setActivePath(object path){}
        public void syncToolbar(object card){}
        [JsProperty]
        public object ActivePath{private get;[JsMethod(Name="setActivePath")]set;}
        /// <summary>
        /// @cfg {Boolean} allowDeselect
        /// Set to true to alow the user to deselect leaf items via interaction.
        /// Defaults to false.
        /// </summary>
        public bool allowDeselect{get;set;}
        /// <summary>
        /// @type Ext.Button
        /// </summary>
        public object backButton{get;set;}
        /// <summary>
        /// @cfg {String} backText
        /// The label to display for the back button. Defaults to "Back".
        /// </summary>
        public JsString backText{get;set;}
        /// <summary>
        /// @cfg {String} cardSwitchAnimation
        /// Animation to be used during transitions of cards.
        /// Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
        /// Defaults to 'slide'.
        /// </summary>
        public new JsString cardSwitchAnimation{get;set;}
        /// <summary>
        /// @cfg {Boolean/Number} clearSelectionDelay
        /// Number of milliseconds to show the highlight when going back in a list. (Defaults to 200).
        /// Passing false will keep the prior list selection.
        /// </summary>
        public object clearSelectionDelay{get;set;}
        /// <summary>
        /// @class Ext.NestedList
        /// @extends Ext.Panel
        /// *
        /// <p>NestedList provides a miller column interface to navigate between nested sets
        /// and provide a clean interface with limited screen real-estate.</p>
        /// *
        /// <pre><code>
        /// // store with data
        /// var data = {
        /// text: 'Groceries',
        /// items: [{
        /// text: 'Drinks',
        /// items: [{
        /// text: 'Water',
        /// items: [{
        /// text: 'Sparkling',
        /// leaf: true
        /// },{
        /// text: 'Still',
        /// leaf: true
        /// }]
        /// },{
        /// text: 'Coffee',
        /// leaf: true
        /// },{
        /// text: 'Espresso',
        /// leaf: true
        /// },{
        /// text: 'Redbull',
        /// leaf: true
        /// },{
        /// text: 'Coke',
        /// leaf: true
        /// },{
        /// text: 'Diet Coke',
        /// leaf: true
        /// }]
        /// },{
        /// text: 'Fruit',
        /// items: [{
        /// text: 'Bananas',
        /// leaf: true
        /// },{
        /// text: 'Lemon',
        /// leaf: true
        /// }]
        /// },{
        /// text: 'Snacks',
        /// items: [{
        /// text: 'Nuts',
        /// leaf: true
        /// },{
        /// text: 'Pretzels',
        /// leaf: true
        /// },{
        /// text: 'Wasabi Peas',
        /// leaf: true
        /// }]
        /// },{
        /// text: 'Empty Category',
        /// items: []
        /// }]
        /// };
        /// Ext.regModel('ListItem', {
        /// fields: [{name: 'text', type: 'string'}]
        /// });
        /// var store = new Ext.data.TreeStore({
        /// model: 'ListItem',
        /// root: data,
        /// proxy: {
        /// type: 'ajax',
        /// reader: {
        /// type: 'tree',
        /// root: 'items'
        /// }
        /// }
        /// });
        /// var nestedList = new Ext.NestedList({
        /// fullscreen: true,
        /// title: 'Groceries',
        /// displayField: 'text',
        /// store: store
        /// });</code></pre>
        /// *
        /// @xtype nestedlist
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// @cfg {String} displayField
        /// Display field to use when setting item text and title.
        /// This configuration is ignored when overriding getItemTextTpl or
        /// getTitleTextTpl for the item text or title. (Defaults to 'text')
        /// </summary>
        public JsString displayField{get;set;}
        /// <summary>
        /// @cfg {String} emptyText
        /// Empty text to display when a subtree is empty.
        /// </summary>
        public JsString emptyText{get;set;}
        /// <summary>
        /// @cfg {String} layout
        /// @hide
        /// </summary>
        public JsString layout{get;set;}
        /// <summary>
        /// @cfg {String} loadingText
        /// Loading text to display when a subtree is loading.
        /// </summary>
        public JsString loadingText{get;set;}
        /// <summary>
        /// @cfg {Boolean/Function} onItemDisclosure
        /// Maps to the Ext.List onItemDisclosure configuration for individual lists. (Defaults to false)
        /// </summary>
        public object onItemDisclosure{get;set;}
        /// <summary>
        /// @cfg {Boolean} updateTitleText
        /// Update the title with the currently selected category. Defaults to true.
        /// </summary>
        public bool updateTitleText{get;set;}
        /// <summary>
        /// @cfg {Boolean} useTitleAsBackText
        /// </summary>
        public bool useTitleAsBackText{get;set;}
        /// <summary>
        /// @cfg {Boolean} useToolbar True to show the header toolbar. Defaults to true.
        /// </summary>
        public bool useToolbar{get;set;}
    }
    #endregion
    #region NestedListConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class NestedListConfig
    {
        public NestedListConfig(){}
        /// <summary>
        /// Set to true to alow the user to deselect leaf items via interaction.
        /// Defaults to false.
        /// </summary>
        public bool allowDeselect{get;set;}
        /// <summary>
        /// The label to display for the back button. Defaults to "Back".
        /// </summary>
        public JsString backText{get;set;}
        /// <summary>
        /// Animation to be used during transitions of cards.
        /// Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe').
        /// Defaults to 'slide'.
        /// </summary>
        public JsString cardSwitchAnimation{get;set;}
        /// <summary>
        /// Number of milliseconds to show the highlight when going back in a list. (Defaults to 200).
        /// Passing false will keep the prior list selection.
        /// </summary>
        public object clearSelectionDelay{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public JsString defaultType{get;set;}
        /// <summary>
        /// Display field to use when setting item text and title.
        /// This configuration is ignored when overriding getItemTextTpl or
        /// getTitleTextTpl for the item text or title. (Defaults to 'text')
        /// </summary>
        public JsString displayField{get;set;}
        /// <summary>
        /// Empty text to display when a subtree is empty.
        /// </summary>
        public JsString emptyText{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public JsString layout{get;set;}
        /// <summary>
        /// Loading text to display when a subtree is loading.
        /// </summary>
        public JsString loadingText{get;set;}
        /// <summary>
        /// Maps to the Ext.List onItemDisclosure configuration for individual lists. (Defaults to false)
        /// </summary>
        public object onItemDisclosure{get;set;}
        /// <summary>
        /// The {@link Ext.data.TreeStore} to bind this NestedList to.
        /// </summary>
        public TreeStore store{get;set;}
        /// <summary>
        /// Configuration for the Ext.Toolbar that is created within the Ext.NestedList.
        /// </summary>
        public object toolbar{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public JsString tpl{get;set;}
        /// <summary>
        /// Update the title with the currently selected category. Defaults to true.
        /// </summary>
        public bool updateTitleText{get;set;}
        /// <summary>
        /// </summary>
        public bool useTitleAsBackText{get;set;}
        /// <summary>
        /// True to show the header toolbar. Defaults to true.
        /// </summary>
        public bool useToolbar{get;set;}
    }
    #endregion
    #region Panel
    /// <summary>
    /// @class Ext.Panel
    /// @extends Ext.lib.Panel
    /// <p>Panel is a container that has specific functionality and structural components that make
    /// it the perfect building block for application-oriented user interfaces.</p>
    /// <p>Panels are, by virtue of their inheritance from {@link Ext.Container}, capable
    /// of being configured with a {@link Ext.Container#layout layout}, and containing child Components.</p>
    /// <p>When either specifying child {@link Ext.Component#items items} of a Panel, or dynamically {@link Ext.Container#add adding} Components
    /// to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
    /// those child elements need to be sized using one of Ext's built-in <code><b>{@link Ext.Container#layout layout}</b></code> schemes. By
    /// default, Panels use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders
    /// child components, appending them one after the other inside the Container, and <b>does not apply any sizing</b>
    /// at all.</p>
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #fullscreen}</li>
    /// <li>{@link #layout}</li>
    /// <li>{@link #items}</li>
    /// <li>{@link #dockedItems}</li>
    /// <li>{@link #html}</li>
    /// </ul>
    /// <h2>Useful Methods</h2>
    /// <ul class="list">
    /// <li>{@link #show}</li>
    /// <li>{@link #hide}</li>
    /// <li>{@link #showBy}</li>
    /// </ul>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.Panel/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// var panel = new Ext.Panel({
    /// fullscreen: true,
    /// dockedItems: [
    /// {
    /// dock : 'top',
    /// xtype: 'toolbar',
    /// title: 'Standard Titlebar'
    /// },
    /// {
    /// dock : 'top',
    /// xtype: 'toolbar',
    /// ui   : 'light',
    /// items: [
    /// {
    /// text: 'Test Button'
    /// }
    /// ]
    /// }
    /// ],
    /// html: 'Testing'
    /// });</code></pre>
    /// @constructor
    /// Create a new Panel
    /// @param {Object} config The config object
    /// @xtype panel
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Panel : Ext.lib.Panel
    {
        public Panel(PanelConfig config){}
        public Panel(){}
        /// <summary>
        /// @class Ext.Panel
        /// @extends Ext.lib.Panel
        /// <p>Panel is a container that has specific functionality and structural components that make
        /// it the perfect building block for application-oriented user interfaces.</p>
        /// <p>Panels are, by virtue of their inheritance from {@link Ext.Container}, capable
        /// of being configured with a {@link Ext.Container#layout layout}, and containing child Components.</p>
        /// <p>When either specifying child {@link Ext.Component#items items} of a Panel, or dynamically {@link Ext.Container#add adding} Components
        /// to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
        /// those child elements need to be sized using one of Ext's built-in <code><b>{@link Ext.Container#layout layout}</b></code> schemes. By
        /// default, Panels use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders
        /// child components, appending them one after the other inside the Container, and <b>does not apply any sizing</b>
        /// at all.</p>
        /// <h2>Useful Properties</h2>
        /// <ul class="list">
        /// <li>{@link #fullscreen}</li>
        /// <li>{@link #layout}</li>
        /// <li>{@link #items}</li>
        /// <li>{@link #dockedItems}</li>
        /// <li>{@link #html}</li>
        /// </ul>
        /// <h2>Useful Methods</h2>
        /// <ul class="list">
        /// <li>{@link #show}</li>
        /// <li>{@link #hide}</li>
        /// <li>{@link #showBy}</li>
        /// </ul>
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.Panel/screenshot.png" /></p>
        /// <h2>Example code:</h2>
        /// <pre><code>
        /// var panel = new Ext.Panel({
        /// fullscreen: true,
        /// dockedItems: [
        /// {
        /// dock : 'top',
        /// xtype: 'toolbar',
        /// title: 'Standard Titlebar'
        /// },
        /// {
        /// dock : 'top',
        /// xtype: 'toolbar',
        /// ui   : 'light',
        /// items: [
        /// {
        /// text: 'Test Button'
        /// }
        /// ]
        /// }
        /// ],
        /// html: 'Testing'
        /// });</code></pre>
        /// @constructor
        /// Create a new Panel
        /// @param {Object} config The config object
        /// @xtype panel
        /// </summary>
        public bool scroll{get;set;}
    }
    #endregion
    #region Picker
    /// <summary>
    /// @class Ext.Picker
    /// @extends Ext.Sheet
    /// *
    /// <p>A general picker class.  Slots are used to organize multiple scrollable slots into a single picker. {@link #slots} is
    /// the only necessary property</p>
    /// <h2>Example usage:</h2>
    /// <pre><code>
    /// var picker = new Ext.Picker({
    /// slots: [
    /// {
    /// name : 'limit_speed',
    /// title: 'Speed',
    /// data : [
    /// {text: '50 KB/s', value: 50},
    /// {text: '100 KB/s', value: 100},
    /// {text: '200 KB/s', value: 200},
    /// {text: '300 KB/s', value: 300}
    /// ]
    /// }
    /// ]
    /// });
    /// picker.show();
    /// </code></pre>
    /// @constructor
    /// Create a new List
    /// @param {Object} config The config object
    /// @xtype picker
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Picker : Sheet
    {
        /// <summary>
        /// @private
        /// @class Ext.Picker.Slot
        /// @extends Ext.DataView
        /// *
        /// <p>A general picker slot class.  Slots are used to organize multiple scrollable slots into a single picker
        /// See also: {@link Ext.Picker}</p>
        /// @constructor
        /// Create a new Picker Slot
        /// @param {Object} config The config object
        /// @xtype pickerslot
        /// </summary>
        [JsType(JsMode.Prototype, Export=false)]
        public partial class Slot : DataView
        {
            public Slot(SlotConfig config){}
            public Slot(){}
            /// <summary>
            /// @private
            /// </summary>
            public new void afterComponentLayout(){}
            /// <summary>
            /// @private
            /// </summary>
            public new void getElConfig(){}
            /// <summary>
            /// </summary>
            public void getSelectedNode(){}
            /// <summary>
            /// </summary>
            public void getValue(){}
            /// <summary>
            /// @private
            /// </summary>
            public new void initComponent(){}
            /// <summary>
            /// @private
            /// </summary>
            public new void initEvents(){}
            public new void onDestroy(){}
            /// <summary>
            /// @private
            /// Called when an item has been tapped
            /// </summary>
            public void onItemTap(object node){}
            /// <summary>
            /// @private
            /// </summary>
            public void onScrollEnd(object scroller, object offset){}
            /// <summary>
            /// @private
            /// </summary>
            public void scrollToNode(object node, object animate){}
            /// <summary>
            /// </summary>
            public void setSelectedNode(object selected, object animate){}
            /// <summary>
            /// @private
            /// </summary>
            public void setupBar(){}
            /// <summary>
            /// </summary>
            public void setValue(object value, object animate){}
            /// <summary>
            /// @cfg {String} align
            /// The alignment of this slot.
            /// Defaults to 'center'
            /// </summary>
            public JsString align{get;set;}
            /// <summary>
            /// @private
            /// @cfg {String} componentCls
            /// The main component class
            /// </summary>
            public JsString componentCls{get;set;}
            /// <summary>
            /// @cfg {String} displayField
            /// The display field in the store.
            /// Defaults to 'text'.
            /// </summary>
            public JsString displayField{get;set;}
            public object flex{get;set;}
            /// <summary>
            /// @private
            /// @class Ext.Picker.Slot
            /// @extends Ext.DataView
            /// *
            /// <p>A general picker slot class.  Slots are used to organize multiple scrollable slots into a single picker
            /// See also: {@link Ext.Picker}</p>
            /// @constructor
            /// Create a new Picker Slot
            /// @param {Object} config The config object
            /// @xtype pickerslot
            /// </summary>
            public bool isSlot{get;set;}
            /// <summary>
            /// @hide
            /// @cfg {String} itemSelector
            /// </summary>
            public JsString itemSelector{get;set;}
            /// <summary>
            /// @cfg {String} name
            /// The name of this slot. This config option is required.
            /// </summary>
            public JsString name{get;set;}
            /// <summary>
            /// @private
            /// The current selectedIndex of the picker slot
            /// </summary>
            public object selectedIndex{get;set;}
            /// <summary>
            /// @cfg {String} valueField
            /// The value field in the store.
            /// Defaults to 'value'.
            /// </summary>
            public JsString valueField{get;set;}
        }
        [JsType(JsMode.Json, Export=false)]
        public partial class SlotConfig
        {
            public SlotConfig(){}
            /// <summary>
            /// The alignment of this slot.
            /// Defaults to 'center'
            /// </summary>
            public JsString align{get;set;}
            /// <summary>
            /// The main component class
            /// </summary>
            public JsString componentCls{get;set;}
            /// <summary>
            /// The display field in the store.
            /// Defaults to 'text'.
            /// </summary>
            public JsString displayField{get;set;}
            /// <summary>
            /// </summary>
            public JsString itemSelector{get;set;}
            /// <summary>
            /// The name of this slot. This config option is required.
            /// </summary>
            public JsString name{get;set;}
            /// <summary>
            /// The renderTpl of the slot.
            /// </summary>
            public object renderTpl{get;set;}
            /// <summary>
            /// The value field in the store.
            /// Defaults to 'value'.
            /// </summary>
            public JsString valueField{get;set;}
        }
        public Picker(PickerConfig config){}
        public Picker(){}
        public new void afterRender(){}
        /// <summary>
        /// Returns the values of each of the pickers slots
        /// @return {Object} The values of the pickers slots
        /// </summary>
        public object getValue(){return null;}
        public new void initComponent(){}
        /// <summary>
        /// @private
        /// Called when the cancel button has been tapped.
        /// </summary>
        public void onCancelButtonTap(){}
        /// <summary>
        /// @private
        /// Called when the done button has been tapped.
        /// </summary>
        public void onDoneButtonTap(){}
        /// <summary>
        /// @private
        /// Called when a slot has been picked.
        /// </summary>
        public void onSlotPick(object slot, object value, object node){}
        /// <summary>
        /// Sets the values of the pickers slots
        /// @param {Object} values The values in a {name:'value'} format
        /// @param {Boolean} animated True to animate setting the values
        /// @return {Ext.Picker} this This picker
        /// </summary>
        public Picker setValue(object values, bool animated){return null;}
        /// <summary>
        /// @cfg {String/Mixed} doneButton
        /// Can be either:<ul>
        /// <li>A {String} text to be used on the Done button</li>
        /// <li>An {Object} as config for {@link Ext.Button}</li>
        /// <li>false or null to hide it</li></ul>
        /// *
        /// Defaults to 'Done'.
        /// </summary>
        public JsString cancelButton{get;set;}
        /// <summary>
        /// @cfg {String} componentCls
        /// The main component class
        /// </summary>
        public JsString componentCls{get;set;}
        public new JsString defaultType{get;set;}
        /// <summary>
        /// @cfg {String/Mixed} doneButton
        /// Can be either:<ul>
        /// <li>A {String} text to be used on the Done button</li>
        /// <li>An {Object} as config for {@link Ext.Button}</li>
        /// <li>false or null to hide it</li></ul>
        /// *
        /// Defaults to 'Done'.
        /// </summary>
        public object doneButton{get;set;}
        /// <summary>
        /// @cfg {Number} height
        /// The height of the picker.
        /// Defaults to 220
        /// </summary>
        public JsNumber height{get;set;}
        public new bool hideOnMaskTap{get;set;}
        /// <summary>
        /// @cfg {String} componentCls
        /// The main component class
        /// </summary>
        public bool stretchX{get;set;}
        public bool stretchY{get;set;}
        /// <summary>
        /// @cfg {Boolean} useTitles
        /// Generate a title header for each individual slot and use
        /// the title configuration of the slot.
        /// Defaults to false.
        /// </summary>
        public bool useTitles{get;set;}
        /// <summary>
        /// Returns the values of each of the pickers slots
        /// @return {Object} The values of the pickers slots
        /// </summary>
        [JsProperty]
        public object Value{[JsMethod(Name="getValue")]get;private set;}
    }
    #endregion
    #region PickerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PickerConfig
    {
        public PickerConfig(){}
        /// <summary>
        /// CSS class to be applied to individual list items when they have
        /// been chosen.
        /// </summary>
        public JsString activeCls{get;set;}
        /// <summary>
        /// The height of the picker.
        /// Defaults to 220
        /// </summary>
        public JsNumber height{get;set;}
        /// <summary>
        /// An array of slot configurations.
        /// <ul>
        /// <li>name - {String} - Name of the slot</li>
        /// <li>align - {String} - Alignment of the slot. left, right, or center</li>
        /// <li>items - {Array} - An array of text/value pairs in the format {text: 'myKey', value: 'myValue'}</li>
        /// <li>title - {String} - Title of the slot. This is used in conjunction with useTitles: true.</li>
        /// </ul>
        /// </summary>
        public JsArray slots{get;set;}
        /// <summary>
        /// Generate a title header for each individual slot and use
        /// the title configuration of the slot.
        /// Defaults to false.
        /// </summary>
        public bool useTitles{get;set;}
    }
    #endregion
    #region PluginMgr
    /// <summary>
    /// @class Ext.PluginMgr
    /// @extends Ext.AbstractManager
    /// <p>Provides a registry of available Plugin <i>classes</i> indexed by a mnemonic code known as the Plugin's ptype.
    /// The <code>{@link Ext.Component#xtype xtype}</code> provides a way to avoid instantiating child Components
    /// when creating a full, nested config object for a complete Ext page.</p>
    /// <p>A child Component may be specified simply as a <i>config object</i>
    /// as long as the correct <code>{@link Ext.Component#xtype xtype}</code> is specified so that if and when the Component
    /// needs rendering, the correct type can be looked up for lazy instantiation.</p>
    /// <p>For a list of all available <code>{@link Ext.Component#xtype xtypes}</code>, see {@link Ext.Component}.</p>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class PluginMgr
    {
        public PluginMgr(){}
    }
    #endregion
    #region Router
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.Router
    /// @extends Ext.util.Observable
    /// <p>The Router is used to map urls to {@link Ext.Controller controller}/action pairs. It can be used whenever an
    /// application wishes to provide history and deep linking support. Every {@link Ext.Application} can set up Routes
    /// using the default {@link Ext.Router} instance, supplying application-specific routes like this:</p>
    /// <pre><code>
    /// //Note the # in the url examples below
    /// Ext.Router.draw(function(map) {
    /// //maps the url http://mydomain.com/#dashboard to the home controller's index action
    /// map.connect('dashboard', {controller: 'home', action: 'index'});
    /// //fallback route - would match routes like http://mydomain.com/#users/list to the 'users' controller's
    /// //'list' action
    /// map.connect(':controller/:action');
    /// });
    /// </code></pre>
    /// <p>The Router is concerned only with the segment of the url after the hash (#) character. This segment is parsed
    /// by the {@link Ext.Dispatcher Dispatcher} and passed to the Router's {@link #recognize} method. Most of the time you
    /// will not need to modify any of the behavior of the Router - it is all handled internally by the application
    /// architecture.</p>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Router
    {
        public Router(){}
    }
    #endregion
    #region ScrollManager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ScrollManager
    {
        public ScrollManager(){}
    }
    #endregion
    #region SegmentedButton
    /// <summary>
    /// @class Ext.SegmentedButton
    /// @extends Ext.Container
    /// <p>SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be
    /// a child of a {@link Ext.Toolbar} and would be used to switch between different views.</p>
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #allowMultiple}</li>
    /// </ul>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.SegmentedButton/screenshot.png" /></p>
    /// <h2>Example usage:</h2>
    /// <pre><code>
    /// var segmentedButton = new Ext.SegmentedButton({
    /// allowMultiple: true,
    /// items: [
    /// {
    /// text: 'Option 1'
    /// },
    /// {
    /// text   : 'Option 2',
    /// pressed: true,
    /// handler: tappedFn
    /// },
    /// {
    /// text: 'Option 3'
    /// }
    /// ],
    /// listeners: {
    /// toggle: function(container, button, pressed){
    /// console.log("User toggled the '" + button.text + "' button: " + (pressed ? 'on' : 'off'));
    /// }
    /// }
    /// });</code></pre>
    /// @constructor
    /// @param {Object} config The config object
    /// @xtype buttons
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SegmentedButton : Ext.Container
    {
        public SegmentedButton(SegmentedButtonConfig config){}
        public SegmentedButton(){}
        public new void afterLayout(object layout){}
        /// <summary>
        /// Disables all buttons
        /// </summary>
        public new void disable(){}
        /// <summary>
        /// Enables all buttons
        /// </summary>
        public new void enable(){}
        /// <summary>
        /// Gets the pressed button(s)
        /// @returns {Array/Button} The pressed button or an array of pressed buttons (if allowMultiple is true)
        /// </summary>
        public void getPressed(){}
        public void getPressedButtons(object toggleEvents){}
        /// <summary>
        /// @cfg {Boolean} allowDepress
        /// Allow to depress a pressed button. (defaults to true when allowMultiple is true)
        /// </summary>
        public new void initComponent(){}
        public new void initEvents(){}
        public void onTap(object e, object t){}
        /// <summary>
        /// Activates a button
        /// @param {Number/String/Button} position/id/button. The button to activate.
        /// @param {Boolean} pressed if defined, sets the pressed state of the button,
        /// otherwise the pressed state is toggled
        /// @param {Boolean} suppressEvents true to suppress toggle events during the action.
        /// If allowMultiple is true, then setPressed will toggle the button state.
        /// </summary>
        public void setPressed(object btn, bool pressed, bool suppressEvents){}
        /// <summary>
        /// @cfg {Boolean} allowMultiple
        /// Allow multiple pressed buttons (defaults to false).
        /// </summary>
        public bool allowMultiple{get;set;}
        /// <summary>
        /// @class Ext.SegmentedButton
        /// @extends Ext.Container
        /// <p>SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be
        /// a child of a {@link Ext.Toolbar} and would be used to switch between different views.</p>
        /// <h2>Useful Properties</h2>
        /// <ul class="list">
        /// <li>{@link #allowMultiple}</li>
        /// </ul>
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.SegmentedButton/screenshot.png" /></p>
        /// <h2>Example usage:</h2>
        /// <pre><code>
        /// var segmentedButton = new Ext.SegmentedButton({
        /// allowMultiple: true,
        /// items: [
        /// {
        /// text: 'Option 1'
        /// },
        /// {
        /// text   : 'Option 2',
        /// pressed: true,
        /// handler: tappedFn
        /// },
        /// {
        /// text: 'Option 3'
        /// }
        /// ],
        /// listeners: {
        /// toggle: function(container, button, pressed){
        /// console.log("User toggled the '" + button.text + "' button: " + (pressed ? 'on' : 'off'));
        /// }
        /// }
        /// });</code></pre>
        /// @constructor
        /// @param {Object} config The config object
        /// @xtype buttons
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// @class Ext.SegmentedButton
        /// @extends Ext.Container
        /// <p>SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be
        /// a child of a {@link Ext.Toolbar} and would be used to switch between different views.</p>
        /// <h2>Useful Properties</h2>
        /// <ul class="list">
        /// <li>{@link #allowMultiple}</li>
        /// </ul>
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.SegmentedButton/screenshot.png" /></p>
        /// <h2>Example usage:</h2>
        /// <pre><code>
        /// var segmentedButton = new Ext.SegmentedButton({
        /// allowMultiple: true,
        /// items: [
        /// {
        /// text: 'Option 1'
        /// },
        /// {
        /// text   : 'Option 2',
        /// pressed: true,
        /// handler: tappedFn
        /// },
        /// {
        /// text: 'Option 3'
        /// }
        /// ],
        /// listeners: {
        /// toggle: function(container, button, pressed){
        /// console.log("User toggled the '" + button.text + "' button: " + (pressed ? 'on' : 'off'));
        /// }
        /// }
        /// });</code></pre>
        /// @constructor
        /// @param {Object} config The config object
        /// @xtype buttons
        /// </summary>
        public new JsString defaultType{get;set;}
        public JsString pressedCls{get;set;}
    }
    #endregion
    #region SegmentedButtonConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SegmentedButtonConfig
    {
        public SegmentedButtonConfig(){}
        /// <summary>
        /// Allow multiple pressed buttons (defaults to false).
        /// </summary>
        public bool allowMultiple{get;set;}
    }
    #endregion
    #region Sheet
    /// <summary>
    /// @class Ext.Sheet
    /// @extends Ext.Panel
    /// *
    /// <p>A general sheet class.  This renderable container provides base support for orientation-aware
    /// transitions for popup or side-anchored sliding Panels.</p>
    /// *
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.Sheet/screenshot.png" /></p>
    /// <h2>Example usage:</h2>
    /// <pre><code>
    /// var sheet = new Ext.Sheet({
    /// height  : 200,
    /// stretchX: true,
    /// stretchY: true,
    /// layout: {
    /// type: 'hbox',
    /// align: 'stretch'
    /// },
    /// dockedItems: [
    /// {
    /// dock : 'bottom',
    /// xtype: 'button',
    /// text : 'Click me'
    /// }
    /// ]
    /// });
    /// sheet.show();
    /// </code></pre>
    /// <p>See {@link Ext.Picker} and {@link Ext.DatePicker}</p>
    /// @xtype sheet
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Sheet : Ext.Panel
    {
        public Sheet(SheetConfig config){}
        public Sheet(){}
        public new void afterRender(){}
        public void animSheet(object animate){}
        public new void beforeDestroy(){}
        public void onOrientationChange(object orientation, object w, object h){}
        public new void onShow(object animation){}
        public void orient(object orientation, object w, object h){}
        /// <summary>
        /// @class Ext.Sheet
        /// @extends Ext.Panel
        /// *
        /// <p>A general sheet class.  This renderable container provides base support for orientation-aware
        /// transitions for popup or side-anchored sliding Panels.</p>
        /// *
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.Sheet/screenshot.png" /></p>
        /// <h2>Example usage:</h2>
        /// <pre><code>
        /// var sheet = new Ext.Sheet({
        /// height  : 200,
        /// stretchX: true,
        /// stretchY: true,
        /// layout: {
        /// type: 'hbox',
        /// align: 'stretch'
        /// },
        /// dockedItems: [
        /// {
        /// dock : 'bottom',
        /// xtype: 'button',
        /// text : 'Click me'
        /// }
        /// ]
        /// });
        /// sheet.show();
        /// </code></pre>
        /// <p>See {@link Ext.Picker} and {@link Ext.DatePicker}</p>
        /// @xtype sheet
        /// </summary>
        public new JsString baseCls{get;set;}
        /// <summary>
        /// @class Ext.Sheet
        /// @extends Ext.Panel
        /// *
        /// <p>A general sheet class.  This renderable container provides base support for orientation-aware
        /// transitions for popup or side-anchored sliding Panels.</p>
        /// *
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.Sheet/screenshot.png" /></p>
        /// <h2>Example usage:</h2>
        /// <pre><code>
        /// var sheet = new Ext.Sheet({
        /// height  : 200,
        /// stretchX: true,
        /// stretchY: true,
        /// layout: {
        /// type: 'hbox',
        /// align: 'stretch'
        /// },
        /// dockedItems: [
        /// {
        /// dock : 'bottom',
        /// xtype: 'button',
        /// text : 'Click me'
        /// }
        /// ]
        /// });
        /// sheet.show();
        /// </code></pre>
        /// <p>See {@link Ext.Picker} and {@link Ext.DatePicker}</p>
        /// @xtype sheet
        /// </summary>
        public new bool centered{get;set;}
        public new bool draggable{get;set;}
        /// <summary>
        /// @cfg {String} enter
        /// The viewport side from which to anchor the sheet when made visible (top, bottom, left, right)
        /// Defaults to 'bottom'
        /// </summary>
        public JsString enter{get;set;}
        /// <summary>
        /// @cfg {String/Object} enterAnimation
        /// the named Ext.anim effect or animation configuration object used for transitions
        /// when the component is shown. Defaults to 'slide'
        /// </summary>
        public object enterAnimation{get;set;}
        /// <summary>
        /// @cfg {String} exit
        /// The viewport side used as the exit point when hidden (top, bottom, left, right)
        /// Applies to sliding animation effects only. Defaults to 'bottom'
        /// </summary>
        public JsString exit{get;set;}
        /// <summary>
        /// *
        /// @cfg {String/Object} exitAnimation
        /// the named Ext.anim effect or animation configuration object used for transitions
        /// when the component is hidden. Defaults to 'slide'
        /// </summary>
        public object exitAnimation{get;set;}
        public new bool floating{get;set;}
        public new bool hidden{get;set;}
        /// <summary>
        /// @cfg {Boolean} hideOnMaskTap
        /// True to automatically bind a tap listener to the mask that hides the window.
        /// Defaults to false. Note: if you don't set this property to false you have to programmaticaly
        /// hide the overlay.
        /// </summary>
        public new bool hideOnMaskTap{get;set;}
        public new bool modal{get;set;}
        public new bool monitorOrientation{get;set;}
    }
    #endregion
    #region SheetConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SheetConfig
    {
        public SheetConfig(){}
        /// <summary>
        /// The viewport side from which to anchor the sheet when made visible (top, bottom, left, right)
        /// Defaults to 'bottom'
        /// </summary>
        public JsString enter{get;set;}
        /// <summary>
        /// the named Ext.anim effect or animation configuration object used for transitions
        /// when the component is shown. Defaults to 'slide'
        /// </summary>
        public object enterAnimation{get;set;}
        /// <summary>
        /// The viewport side used as the exit point when hidden (top, bottom, left, right)
        /// Applies to sliding animation effects only. Defaults to 'bottom'
        /// </summary>
        public JsString exit{get;set;}
        /// <summary>
        /// the named Ext.anim effect or animation configuration object used for transitions
        /// when the component is hidden. Defaults to 'slide'
        /// </summary>
        public object exitAnimation{get;set;}
        /// <summary>
        /// True to automatically bind a tap listener to the mask that hides the window.
        /// Defaults to false. Note: if you don't set this property to false you have to programmaticaly
        /// hide the overlay.
        /// </summary>
        public bool hideOnMaskTap{get;set;}
        /// <summary>
        /// If true, the width of anchored Sheets are adjusted to fill the entire top/bottom axis width,
        /// or false to center the Sheet along the same axis based upon the sheets current/calculated width.
        /// This option is ignored when {link #centered} is true or x/y coordinates are specified for the Sheet.
        /// </summary>
        public bool stretchX{get;set;}
        /// <summary>
        /// If true, the height of anchored Sheets are adjusted to fill the entire right/left axis height,
        /// or false to center the Sheet along the same axis based upon the sheets current/calculated height.
        /// This option is ignored when {link #centered} is true or x/y coordinates are specified for the Sheet.
        /// </summary>
        public bool stretchY{get;set;}
    }
    #endregion
    #region Spacer
    /// <summary>
    /// @class Ext.Spacer
    /// @extends Ext.Component
    /// <p>By default the spacer component will take up a flex of 1 unless a width is set.</p>
    /// <p>Example usage:</p>
    /// <pre><code>
    /// var toolbar = new Ext.Toolbar({
    /// title: 'Toolbar Title',
    /// items: [
    /// {xtype: 'spacer'},
    /// {
    /// xtype: 'Button',
    /// text : 'Button!'
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// @xtype spacer
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Spacer : Ext.Component
    {
        public Spacer(Ext.ComponentConfig config){}
        public Spacer(){}
        /// <summary>
        /// @class Ext.Spacer
        /// @extends Ext.Component
        /// <p>By default the spacer component will take up a flex of 1 unless a width is set.</p>
        /// <p>Example usage:</p>
        /// <pre><code>
        /// var toolbar = new Ext.Toolbar({
        /// title: 'Toolbar Title',
        /// items: [
        /// {xtype: 'spacer'},
        /// {
        /// xtype: 'Button',
        /// text : 'Button!'
        /// }
        /// ]
        /// });
        /// </code></pre>
        /// @xtype spacer
        /// </summary>
        public new void initComponent(){}
        public new void onRender(){}
    }
    #endregion
    #region StoreMgr
    /// <summary>
    /// @class Ext.StoreMgr
    /// @extends Ext.util.MixedCollection
    /// The default global group of stores.
    /// @singleton
    /// TODO: Make this an AbstractMgr
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class StoreMgr
    {
        public StoreMgr(){}
    }
    #endregion
    #region supports
    [JsType(JsMode.Prototype, Export=false)]
    public partial class supports
    {
        public supports(){}
        /// <summary>
        /// @class Ext.supports
        /// *
        /// Determines information about features are supported in the current environment
        /// @singleton
        /// </summary>
        public static void init(){}
    }
    #endregion
    #region Tab
    /// <summary>
    /// @class Ext.Tab
    /// @extends Ext.Button
    /// <p>Used in the {@link Ext.TabBar} component. This shouldn't be used directly, instead use {@link Ext.TabBar} or {@link Ext.TabPanel}.</p>
    /// @xtype tab
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Tab : Button
    {
        public Tab(TabConfig config){}
        public Tab(){}
        public void activate(){}
        public void deactivate(){}
        /// <summary>
        /// Retrieves a reference to the card associated with this tab
        /// @returns {Mixed} card
        /// </summary>
        public void getCard(){}
        public new void initComponent(){}
        public new void onRender(){}
        /// <summary>
        /// Sets the card associated with this tab
        /// </summary>
        public void setCard(object card){}
        /// <summary>
        /// @property Boolean
        /// Read-only property indicating that this tab is currently active.
        /// This is NOT a public configuration.
        /// </summary>
        public bool active{get;set;}
        /// <summary>
        /// @cfg {String} activeCls
        /// The CSS class to be applied to a Tab when it is active. Defaults to 'x-tab-active'.
        /// Providing your own CSS for this class enables you to customize the active state.
        /// </summary>
        public JsString activeCls{get;set;}
        /// <summary>
        /// @class Ext.Tab
        /// @extends Ext.Button
        /// <p>Used in the {@link Ext.TabBar} component. This shouldn't be used directly, instead use {@link Ext.TabBar} or {@link Ext.TabPanel}.</p>
        /// @xtype tab
        /// </summary>
        public new JsString baseCls{get;set;}
        /// <summary>
        /// Sets the card associated with this tab
        /// </summary>
        [JsProperty]
        public object Card{private get;[JsMethod(Name="setCard")]set;}
        /// <summary>
        /// @class Ext.Tab
        /// @extends Ext.Button
        /// <p>Used in the {@link Ext.TabBar} component. This shouldn't be used directly, instead use {@link Ext.TabBar} or {@link Ext.TabPanel}.</p>
        /// @xtype tab
        /// </summary>
        public bool isTab{get;set;}
        /// <summary>
        /// @cfg {String} pressedCls
        /// The CSS class to be applied to a Tab when it is pressed. Defaults to 'x-tab-pressed'.
        /// Providing your own CSS for this class enables you to customize the pressed state.
        /// </summary>
        public new JsString pressedCls{get;set;}
    }
    #endregion
    #region TabBar
    /// <summary>
    /// @class Ext.TabBar
    /// @extends Ext.Panel
    /// <p>Used in the {@link Ext.TabPanel} component to display {@link Ext.Tab} components.</p>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.TabBar/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// var bar = new Ext.TabBar({
    /// dock : 'top',
    /// ui   : 'dark',
    /// items: [
    /// {
    /// text: '1st Button'
    /// },
    /// {
    /// text: '2nd Button'
    /// }
    /// ]
    /// });
    /// var myPanel = new Ext.Panel({
    /// dockedItems: [bar],
    /// fullscreen : true,
    /// html       : 'Test Panel'
    /// });
    /// </code></pre>
    /// @xtype tabbar
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TabBar : Ext.Panel
    {
        public TabBar(TabBarConfig config){}
        public TabBar(){}
        /// <summary>
        /// Returns a reference to the TabPanel's layout that wraps around the TabBar.
        /// @private
        /// </summary>
        public void getCardLayout(){}
        public new void initComponent(){}
        public new void initEvents(){}
        public void onSortChange(object sortable, object el, object index){}
        public void onTabTap(object tab){}
        public void onTouchStart(object e, object t){}
        /// <summary>
        /// @type {Ext.Tab}
        /// Read-only property of the currently active tab.
        /// </summary>
        public object activeTab{get;set;}
        /// <summary>
        /// @class Ext.TabBar
        /// @extends Ext.Panel
        /// <p>Used in the {@link Ext.TabPanel} component to display {@link Ext.Tab} components.</p>
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.TabBar/screenshot.png" /></p>
        /// <h2>Example code:</h2>
        /// <pre><code>
        /// var bar = new Ext.TabBar({
        /// dock : 'top',
        /// ui   : 'dark',
        /// items: [
        /// {
        /// text: '1st Button'
        /// },
        /// {
        /// text: '2nd Button'
        /// }
        /// ]
        /// });
        /// var myPanel = new Ext.Panel({
        /// dockedItems: [bar],
        /// fullscreen : true,
        /// html       : 'Test Panel'
        /// });
        /// </code></pre>
        /// @xtype tabbar
        /// </summary>
        public JsString componentCls{get;set;}
        public new JsString defaultType{get;set;}
        /// <summary>
        /// @cfg {Boolean} sortable
        /// Enable sorting functionality for the TabBar.
        /// </summary>
        public bool sortable{get;set;}
        /// <summary>
        /// @cfg {Number} sortHoldThreshold
        /// Duration in milliseconds that a user must hold a tab
        /// before dragging. The sortable configuration must be set for this setting
        /// to be used.
        /// </summary>
        public JsNumber sortHoldThreshold{get;set;}
    }
    #endregion
    #region TabBarConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TabBarConfig
    {
        public TabBarConfig(){}
        /// <summary>
        /// Enable sorting functionality for the TabBar.
        /// </summary>
        public bool sortable{get;set;}
        /// <summary>
        /// Duration in milliseconds that a user must hold a tab
        /// before dragging. The sortable configuration must be set for this setting
        /// to be used.
        /// </summary>
        public JsNumber sortHoldThreshold{get;set;}
    }
    #endregion
    #region TabConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TabConfig
    {
        public TabConfig(){}
        /// <summary>
        /// The CSS class to be applied to a Tab when it is active. Defaults to 'x-tab-active'.
        /// Providing your own CSS for this class enables you to customize the active state.
        /// </summary>
        public JsString activeCls{get;set;}
        /// <summary>
        /// The CSS class to be applied to a Tab when it is pressed. Defaults to 'x-tab-pressed'.
        /// Providing your own CSS for this class enables you to customize the pressed state.
        /// </summary>
        public JsString pressedCls{get;set;}
    }
    #endregion
    #region TabPanel
    /// <summary>
    /// @class Ext.TabPanel
    /// @extends Ext.Panel
    /// *
    /// TabPanel is a Container which can hold other components to be accessed in a tabbed
    /// interface. It uses a {@link Ext.TabBar} to display a {@link Ext.Tab} for each item defined.
    /// *
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #ui}</li>
    /// <li>{@link #tabBarDock}</li>
    /// <li>{@link #cardSwitchAnimation}</li>
    /// <li>{@link #sortable}</li>
    /// </ul>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.TabPanel/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// new Ext.TabPanel({
    /// fullscreen: true,
    /// ui        : 'dark',
    /// sortable  : true,
    /// items: [
    /// {
    /// title: 'Tab 1',
    /// html : '1',
    /// cls  : 'card1'
    /// },
    /// {
    /// title: 'Tab 2',
    /// html : '2',
    /// cls  : 'card2'
    /// },
    /// {
    /// title: 'Tab 3',
    /// html : '3',
    /// cls  : 'card3'
    /// }
    /// ]
    /// });</code></pre>
    /// @xtype tabpanel
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TabPanel : Ext.Panel
    {
        public TabPanel(TabPanelConfig config){}
        public TabPanel(){}
        /// <summary>
        /// Retrieves a reference to the Ext.TabBar associated with the TabPanel.
        /// @returns {Ext.TabBar} tabBar
        /// </summary>
        public void getTabBar(){}
        /// <summary>
        /// @cfg {Boolean} sortable
        /// Enable sorting functionality for the TabBar.
        /// </summary>
        public new void initComponent(){}
        public void onAdd(object cmp, object idx){}
        public void onRemove(object cmp, object autoDestroy){}
        /// <summary>
        /// @cfg {String} cardSwitchAnimation
        /// Animation to be used during transitions of cards.
        /// Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe'), or false.
        /// Defaults to <tt>'slide'</tt>.
        /// </summary>
        public new JsString cardSwitchAnimation{get;set;}
        /// <summary>
        /// @cfg {String} tabBarDock
        /// Where to dock the Ext.TabPanel. Valid values are 'top' and 'bottom'.
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// @cfg {String} tabBarDock
        /// Where to dock the Ext.TabPanel. Valid values are 'top' and 'bottom'.
        /// </summary>
        public JsString tabBarDock{get;set;}
        /// <summary>
        /// @cfg {String} ui
        /// Defaults to 'dark'.
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region TabPanelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TabPanelConfig
    {
        public TabPanelConfig(){}
        /// <summary>
        /// Animation to be used during transitions of cards.
        /// Any valid value from Ext.anims can be used ('fade', 'slide', 'flip', 'cube', 'pop', 'wipe'), or false.
        /// Defaults to <tt>'slide'</tt>.
        /// </summary>
        public JsString cardSwitchAnimation{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public object layout{get;set;}
        /// <summary>
        /// An Ext.TabBar configuration
        /// </summary>
        public object tabBar{get;set;}
        /// <summary>
        /// Defaults to 'dark'.
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region Template
    /// <summary>
    /// @class Ext.Template
    /// <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
    /// for greater performance.</p>
    /// An instance of this class may be created by passing to the constructor either
    /// a single argument, or multiple arguments:
    /// <div class="mdetail-params"><ul>
    /// <li><b>single argument</b> : String/Array
    /// <div class="sub-desc">
    /// The single argument may be either a String or an Array:<ul>
    /// <li><tt>String</tt> : </li><pre><code>
    /// var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
    /// t.{@link #append}('some-element', ['foo']);
    /// </code></pre>
    /// <li><tt>Array</tt> : </li>
    /// An Array will be combined with <code>join('')</code>.
    /// <pre><code>
    /// var t = new Ext.Template([
    /// '&lt;div name="{id}"&gt;',
    /// '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
    /// '&lt;/div&gt;',
    /// ]);
    /// t.{@link #compile}();
    /// t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
    /// </code></pre>
    /// </ul></div></li>
    /// <li><b>multiple arguments</b> : String, Object, Array, ...
    /// <div class="sub-desc">
    /// Multiple arguments will be combined with <code>join('')</code>.
    /// <pre><code>
    /// var t = new Ext.Template(
    /// '&lt;div name="{id}"&gt;',
    /// '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
    /// '&lt;/div&gt;',
    /// // a configuration object:
    /// {
    /// compiled: true,      // {@link #compile} immediately
    /// }
    /// );
    /// </code></pre>
    /// <p><b>Notes</b>:</p>
    /// <div class="mdetail-params"><ul>
    /// <li>Formatting and <code>disableFormats</code> are not applicable for Sencha Touch.</li>
    /// <li>For a list of available format functions, see {@link Ext.util.Format}.</li>
    /// <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
    /// when no formatting is required.</li>
    /// </ul></div>
    /// </div></li>
    /// </ul></div>
    /// @param {Mixed} config
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Template
    {
        public Template(){}
        public Template(TemplateConfig config){}
        /// <summary>
        /// Applies the supplied <code>values</code> to the template and appends
        /// the new node(s) to the specified <code>el</code>.
        /// <p>For example usage {@link #Template see the constructor}.</p>
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values
        /// The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
        /// or an object (i.e. <code>{foo: 'bar'}</code>).
        /// @param {Boolean} returnElement (optional) true to return an Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object append(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Returns an HTML fragment of this template with the specified values applied.
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @return {String} The HTML fragment
        /// @hide repeat doc
        /// </summary>
        public JsString applyTemplate(object values){return null;}
        /// <summary>
        /// Compiles the template into an internal function, eliminating the RegEx overhead.
        /// @return {Ext.Template} this
        /// @hide repeat doc
        /// </summary>
        public Template compile(){return null;}
        /// <summary>
        /// @class Ext.Template
        /// <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
        /// for greater performance.</p>
        /// An instance of this class may be created by passing to the constructor either
        /// a single argument, or multiple arguments:
        /// <div class="mdetail-params"><ul>
        /// <li><b>single argument</b> : String/Array
        /// <div class="sub-desc">
        /// The single argument may be either a String or an Array:<ul>
        /// <li><tt>String</tt> : </li><pre><code>
        /// var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
        /// t.{@link #append}('some-element', ['foo']);
        /// </code></pre>
        /// <li><tt>Array</tt> : </li>
        /// An Array will be combined with <code>join('')</code>.
        /// <pre><code>
        /// var t = new Ext.Template([
        /// '&lt;div name="{id}"&gt;',
        /// '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
        /// '&lt;/div&gt;',
        /// ]);
        /// t.{@link #compile}();
        /// t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
        /// </code></pre>
        /// </ul></div></li>
        /// <li><b>multiple arguments</b> : String, Object, Array, ...
        /// <div class="sub-desc">
        /// Multiple arguments will be combined with <code>join('')</code>.
        /// <pre><code>
        /// var t = new Ext.Template(
        /// '&lt;div name="{id}"&gt;',
        /// '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
        /// '&lt;/div&gt;',
        /// // a configuration object:
        /// {
        /// compiled: true,      // {@link #compile} immediately
        /// }
        /// );
        /// </code></pre>
        /// <p><b>Notes</b>:</p>
        /// <div class="mdetail-params"><ul>
        /// <li>Formatting and <code>disableFormats</code> are not applicable for Sencha Touch.</li>
        /// <li>For a list of available format functions, see {@link Ext.util.Format}.</li>
        /// <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
        /// when no formatting is required.</li>
        /// </ul></div>
        /// </div></li>
        /// </ul></div>
        /// @param {Mixed} config
        /// </summary>
        public Template(object html){}
        public void doInsert(object where, object el, object values, object returnEl){}
        /// <summary>
        /// Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
        /// @param {String/HTMLElement} el A DOM element or its id
        /// @param {Object} config A configuration object
        /// @return {Ext.Template} The created template
        /// @static
        /// </summary>
        public static Template from(object el, object config){return null;}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) after el.
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertAfter(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) before el.
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertBefore(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Applies the supplied values to the template and inserts the new node(s) as the first child of el.
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object insertFirst(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Applies the supplied values to the template and overwrites the content of el with the new node(s).
        /// @param {Mixed} el The context element
        /// @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @param {Boolean} returnElement (optional) true to return a Ext.Element (defaults to undefined)
        /// @return {HTMLElement/Ext.Element} The new node or Element
        /// </summary>
        public object overwrite(object el, object values, bool returnElement){return null;}
        /// <summary>
        /// Sets the HTML used as the template and optionally compiles it.
        /// @param {String} html
        /// @param {Boolean} compile (optional) True to compile the template (defaults to undefined)
        /// @return {Ext.Template} this
        /// </summary>
        public Template set(JsString html, bool compile){return null;}
        public JsRegExp compileARe{get;set;}
        public JsRegExp compileBRe{get;set;}
        public JsRegExp compileCRe{get;set;}
        /// <summary>
        /// @cfg {Boolean} disableFormats true to disable format functions in the template. If the template doesn't contain format functions, setting
        /// disableFormats to true will reduce apply time (defaults to false)
        /// </summary>
        public bool disableFormats{get;set;}
        public bool isTemplate{get;set;}
        /// <summary>
        /// @cfg {Boolean} disableFormats true to disable format functions in the template. If the template doesn't contain format functions, setting
        /// disableFormats to true will reduce apply time (defaults to false)
        /// </summary>
        public JsRegExp re{get;set;}
    }
    #endregion
    #region TemplateConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TemplateConfig
    {
        public TemplateConfig(){}
    }
    #endregion
    #region Toolbar
    /// <summary>
    /// @class Ext.Toolbar
    /// @extends Ext.Container
    /// *
    /// <p>Toolbars are most commonly used as dockedItems within an Ext.Panel. They can
    /// be docked at the 'top' or 'bottom' of a Panel by specifying the dock config.</p>
    /// *
    /// <p>The {@link #defaultType} of Toolbar's is '{@link Ext.Button button}'.</p>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.Toolbar/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// var myToolbar = new Ext.Toolbar({
    /// dock : 'top',
    /// title: 'My Toolbar',
    /// items: [
    /// {
    /// text: 'My Button'
    /// }
    /// ]
    /// });
    /// var myPanel = new Ext.Panel({
    /// dockedItems: [myToolbar],
    /// fullscreen : true,
    /// html       : 'Test Panel'
    /// });</code></pre>
    /// @xtype toolbar
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Toolbar : Ext.Container
    {
        public Toolbar(ToolbarConfig config){}
        public Toolbar(){}
        public new void afterRender(){}
        /// <summary>
        /// Hide the title if it exists.
        /// </summary>
        public void hideTitle(){}
        /// <summary>
        /// The title Element
        /// @property titleEl
        /// @type Ext.Element
        /// </summary>
        public new void initComponent(){}
        /// <summary>
        /// Set the title of the Toolbar
        /// @param title {String} This can be arbitrary HTML.
        /// </summary>
        public void setTitle(object title){}
        /// <summary>
        /// Show the title if it exists.
        /// </summary>
        public void showTitle(){}
        /// <summary>
        /// @cfg {String} baseCls
        /// The base CSS class to apply to the Carousel's element (defaults to <code>'x-toolbar'</code>).
        /// </summary>
        public new JsString baseCls{get;set;}
        /// <summary>
        /// @cfg {xtype} defaultType
        /// The default xtype to create. (Defaults to 'button')
        /// </summary>
        public new object defaultType{get;set;}
        /// <summary>
        /// @class Ext.Toolbar
        /// @extends Ext.Container
        /// *
        /// <p>Toolbars are most commonly used as dockedItems within an Ext.Panel. They can
        /// be docked at the 'top' or 'bottom' of a Panel by specifying the dock config.</p>
        /// *
        /// <p>The {@link #defaultType} of Toolbar's is '{@link Ext.Button button}'.</p>
        /// <h2>Screenshot:</h2>
        /// <p><img src="doc_resources/Ext.Toolbar/screenshot.png" /></p>
        /// <h2>Example code:</h2>
        /// <pre><code>
        /// var myToolbar = new Ext.Toolbar({
        /// dock : 'top',
        /// title: 'My Toolbar',
        /// items: [
        /// {
        /// text: 'My Button'
        /// }
        /// ]
        /// });
        /// var myPanel = new Ext.Panel({
        /// dockedItems: [myToolbar],
        /// fullscreen : true,
        /// html       : 'Test Panel'
        /// });</code></pre>
        /// @xtype toolbar
        /// </summary>
        public bool isToolbar{get;set;}
        /// <summary>
        /// @cfg {Object} layout (optional)
        /// A layout config object. A string is NOT supported here.
        /// </summary>
        public object layout{get;set;}
        /// <summary>
        /// Set the title of the Toolbar
        /// @param title {String} This can be arbitrary HTML.
        /// </summary>
        [JsProperty]
        public object Title{private get;[JsMethod(Name="setTitle")]set;}
        /// <summary>
        /// @cfg {String} titleCls
        /// The CSS class to apply to the titleEl (defaults to <code>'x-toolbar-title'</code>).
        /// </summary>
        public JsString titleCls{get;set;}
        /// <summary>
        /// The title Element
        /// @property titleEl
        /// @type Ext.Element
        /// </summary>
        public object titleEl{get;set;}
        /// <summary>
        /// @cfg {String} ui
        /// Style options for Toolbar. Default is 'dark'. 'light' is also available.
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region ToolbarConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ToolbarConfig
    {
        public ToolbarConfig(){}
        /// <summary>
        /// The base CSS class to apply to the Carousel's element (defaults to <code>'x-toolbar'</code>).
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// The default xtype to create. (Defaults to 'button')
        /// </summary>
        public object defaultType{get;set;}
        /// <summary>
        /// (optional)
        /// A layout config object. A string is NOT supported here.
        /// </summary>
        public object layout{get;set;}
        /// <summary>
        /// (optional)
        /// The title of the Toolbar.
        /// </summary>
        public JsString title{get;set;}
        /// <summary>
        /// The CSS class to apply to the titleEl (defaults to <code>'x-toolbar-title'</code>).
        /// </summary>
        public JsString titleCls{get;set;}
        /// <summary>
        /// Style options for Toolbar. Default is 'dark'. 'light' is also available.
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region TouchEventObject
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TouchEventObject
    {
        public TouchEventObject(){}
    }
    #endregion
    #region TouchEventObjectImpl
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TouchEventObjectImpl
    {
        public TouchEventObjectImpl(){}
        public TouchEventObjectImpl(object e, object args){}
        public void getTarget(object selector, object maxDepth, object returnEl){}
        public void preventDefault(){}
        public void setEvent(object e, object args){}
        public void stopEvent(){}
        public void stopPropagation(){}
    }
    #endregion
    #region Video
    /// <summary>
    /// @class Ext.Video
    /// @extends Ext.Media
    /// *
    /// <p>Provides a simple Container for HTML5 Video.</p>
    /// *
    /// <h2>Useful Properties</h2>
    /// <ul class="list">
    /// <li>{@link #url}</li>
    /// <li>{@link #autoPause}</li>
    /// <li>{@link #autoResume}</li>
    /// </ul>
    /// <h2>Useful Methods</h2>
    /// <ul class="list">
    /// <li>{@link #pause}</li>
    /// <li>{@link #play}</li>
    /// <li>{@link #toggle}</li>
    /// </ul>
    /// <h2>Screenshot:</h2>
    /// <p><img src="doc_resources/Ext.Video/screenshot.png" /></p>
    /// <h2>Example code:</h2>
    /// <pre><code>
    /// var pnl = new Ext.Panel({
    /// fullscreen: true,
    /// items: [
    /// {
    /// xtype    : 'video',
    /// x        : 600,
    /// y        : 300,
    /// width    : 175,
    /// height   : 98,
    /// url      : "porsche911.mov",
    /// posterUrl: 'porsche.png'
    /// }
    /// ]
    /// });</code></pre>
    /// @xtype video
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Video : Media
    {
        public Video(VideoConfig config){}
        public Video(){}
        public new void afterRender(){}
        public void getConfiguration(){}
        public void onGhostTap(){}
        public JsString componentCls{get;set;}
        /// <summary>
        /// @cfg {String} posterUrl
        /// Location of a poster image to be shown before showing the video.
        /// </summary>
        public JsString posterUrl{get;set;}
    }
    #endregion
    #region VideoConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class VideoConfig
    {
        public VideoConfig(){}
        /// <summary>
        /// Location of a poster image to be shown before showing the video.
        /// </summary>
        public JsString posterUrl{get;set;}
        /// <summary>
        /// Location of the video to play. This should be in H.264 format and in a
        /// .mov file format.
        /// </summary>
        public JsString url{get;set;}
    }
    #endregion
    #region XTemplate
    /// <summary>
    /// @class Ext.XTemplate
    /// @extends Ext.Template
    /// <p>A template class that supports advanced functionality like:<div class="mdetail-params"><ul>
    /// <li>Autofilling arrays using templates and sub-templates</li>
    /// <li>Conditional processing with basic comparison operators</li>
    /// <li>Basic math function support</li>
    /// <li>Execute arbitrary inline code with special built-in template variables</li>
    /// <li>Custom member functions</li>
    /// <li>Many special tags and built-in operators that aren't defined as part of
    /// the API, but are supported in the templates that can be created</li>
    /// </ul></div></p>
    /// <p>XTemplate provides the templating mechanism built into:<div class="mdetail-params"><ul>
    /// <li>{@link Ext.DataView}</li>
    /// </ul></div></p>
    /// *
    /// The {@link Ext.Template} describes
    /// the acceptable parameters to pass to the constructor. The following
    /// examples demonstrate all of the supported features.</p>
    /// *
    /// <div class="mdetail-params"><ul>
    /// *
    /// <li><b><u>Sample Data</u></b>
    /// <div class="sub-desc">
    /// <p>This is the data object used for reference in each code example:</p>
    /// <pre><code>
    /// var data = {
    /// name: 'Tommy Maintz',
    /// title: 'Lead Developer',
    /// company: 'Ext JS, Inc',
    /// email: 'tommy@extjs.com',
    /// address: '5 Cups Drive',
    /// city: 'Palo Alto',
    /// state: 'CA',
    /// zip: '44102',
    /// drinks: ['Coffee', 'Soda', 'Water'],
    /// kids: [{
    /// name: 'Joshua',
    /// age:3
    /// },{
    /// name: 'Matthew',
    /// age:2
    /// },{
    /// name: 'Solomon',
    /// age:0
    /// }]
    /// };
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// *
    /// <li><b><u>Auto filling of arrays</u></b>
    /// <div class="sub-desc">
    /// <p>The <b><tt>tpl</tt></b> tag and the <b><tt>for</tt></b> operator are used
    /// to process the provided data object:
    /// <ul>
    /// <li>If the value specified in <tt>for</tt> is an array, it will auto-fill,
    /// repeating the template block inside the <tt>tpl</tt> tag for each item in the
    /// array.</li>
    /// <li>If <tt>for="."</tt> is specified, the data object provided is examined.</li>
    /// <li>While processing an array, the special variable <tt>{#}</tt>
    /// will provide the current array index + 1 (starts at 1, not 0).</li>
    /// </ul>
    /// </p>
    /// <pre><code>
    /// &lt;tpl <b>for</b>=".">...&lt;/tpl>       // loop through array at root node
    /// &lt;tpl <b>for</b>="foo">...&lt;/tpl>     // loop through array at foo node
    /// &lt;tpl <b>for</b>="foo.bar">...&lt;/tpl> // loop through array at foo.bar node
    /// </code></pre>
    /// Using the sample data above:
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Kids: ',
    /// '&lt;tpl <b>for</b>=".">',       // process the data.kids node
    /// '&lt;p>{#}. {name}&lt;/p>',  // use current array index to autonumber
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
    /// </code></pre>
    /// <p>An example illustrating how the <b><tt>for</tt></b> property can be leveraged
    /// to access specified members of the provided data object to populate the template:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Title: {title}&lt;/p>',
    /// '&lt;p>Company: {company}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl <b>for="kids"</b>>',     // interrogate the kids property within the data
    /// '&lt;p>{name}&lt;/p>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);  // pass the root node of the data object
    /// </code></pre>
    /// <p>Flat arrays that contain values (and not objects) can be auto-rendered
    /// using the special <b><tt>{.}</tt></b> variable inside a loop.  This variable
    /// will represent the value of the array at the current index:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>{name}\&#39;s favorite beverages:&lt;/p>',
    /// '&lt;tpl for="drinks">',
    /// '&lt;div> - {.}&lt;/div>',
    /// '&lt;/tpl>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// <p>When processing a sub-template, for example while looping through a child array,
    /// you can access the parent object's members via the <b><tt>parent</tt></b> object:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;tpl if="age &amp;gt; 1">',
    /// '&lt;p>{name}&lt;/p>',
    /// '&lt;p>Dad: {<b>parent</b>.name}&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// *
    /// <li><b><u>Conditional processing with basic comparison operators</u></b>
    /// <div class="sub-desc">
    /// <p>The <b><tt>tpl</tt></b> tag and the <b><tt>if</tt></b> operator are used
    /// to provide conditional checks for deciding whether or not to render specific
    /// parts of the template. Notes:<div class="sub-desc"><ul>
    /// <li>Double quotes must be encoded if used within the conditional</li>
    /// <li>There is no <tt>else</tt> operator &mdash; if needed, two opposite
    /// <tt>if</tt> statements should be used.</li>
    /// </ul></div>
    /// <pre><code>
    /// &lt;tpl if="age &gt; 1 &amp;&amp; age &lt; 10">Child&lt;/tpl>
    /// &lt;tpl if="age >= 10 && age < 18">Teenager&lt;/tpl>
    /// &lt;tpl <b>if</b>="this.isGirl(name)">...&lt;/tpl>
    /// &lt;tpl <b>if</b>="id==\'download\'">...&lt;/tpl>
    /// &lt;tpl <b>if</b>="needsIcon">&lt;img src="{icon}" class="{iconCls}"/>&lt;/tpl>
    /// // no good:
    /// &lt;tpl if="name == "Tommy"">Hello&lt;/tpl>
    /// // encode &#34; if it is part of the condition, e.g.
    /// &lt;tpl if="name == &#38;quot;Tommy&#38;quot;">Hello&lt;/tpl>
    /// </code></pre>
    /// Using the sample data above:
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;tpl if="age &amp;gt; 1">',
    /// '&lt;p>{name}&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// *
    /// <li><b><u>Basic math support</u></b>
    /// <div class="sub-desc">
    /// <p>The following basic math operators may be applied directly on numeric
    /// data values:</p><pre>
    /// + - * /
    /// </pre>
    /// For example:
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;tpl if="age &amp;gt; 1">',  // <-- Note that the &gt; is encoded
    /// '&lt;p>{#}: {name}&lt;/p>',  // <-- Auto-number each item
    /// '&lt;p>In 5 Years: {age+5}&lt;/p>',  // <-- Basic math
    /// '&lt;p>Dad: {parent.name}&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// *
    /// <li><b><u>Execute arbitrary inline code with special built-in template variables</u></b>
    /// <div class="sub-desc">
    /// <p>Anything between <code>{[ ... ]}</code> is considered code to be executed
    /// in the scope of the template. There are some special variables available in that code:
    /// <ul>
    /// <li><b><tt>values</tt></b>: The values in the current scope. If you are using
    /// scope changing sub-templates, you can change what <tt>values</tt> is.</li>
    /// <li><b><tt>parent</tt></b>: The scope (values) of the ancestor template.</li>
    /// <li><b><tt>xindex</tt></b>: If you are in a looping template, the index of the
    /// loop you are in (1-based).</li>
    /// <li><b><tt>xcount</tt></b>: If you are in a looping template, the total length
    /// of the array you are looping.</li>
    /// </ul>
    /// This example demonstrates basic row striping using an inline code block and the
    /// <tt>xindex</tt> variable:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Company: {[values.company.toUpperCase() + ", " + values.title]}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;div class="{[xindex % 2 === 0 ? "even" : "odd"]}">',
    /// '{name}',
    /// '&lt;/div>',
    /// '&lt;/tpl>&lt;/p>'
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// <li><b><u>Template member functions</u></b>
    /// <div class="sub-desc">
    /// <p>One or more member functions can be specified in a configuration
    /// object passed into the XTemplate constructor for more complex processing:</p>
    /// <pre><code>
    /// var tpl = new Ext.XTemplate(
    /// '&lt;p>Name: {name}&lt;/p>',
    /// '&lt;p>Kids: ',
    /// '&lt;tpl for="kids">',
    /// '&lt;tpl if="this.isGirl(name)">',
    /// '&lt;p>Girl: {name} - {age}&lt;/p>',
    /// '&lt;/tpl>',
    /// // use opposite if statement to simulate 'else' processing:
    /// '&lt;tpl if="this.isGirl(name) == false">',
    /// '&lt;p>Boy: {name} - {age}&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;tpl if="this.isBaby(age)">',
    /// '&lt;p>{name} is a baby!&lt;/p>',
    /// '&lt;/tpl>',
    /// '&lt;/tpl>&lt;/p>',
    /// {
    /// // XTemplate configuration:
    /// compiled: true,
    /// // member functions:
    /// isGirl: function(name){
    /// return name == 'Sara Grace';
    /// },
    /// isBaby: function(age){
    /// return age < 1;
    /// }
    /// }
    /// );
    /// tpl.overwrite(panel.body, data);
    /// </code></pre>
    /// </div>
    /// </li>
    /// *
    /// </ul></div>
    /// *
    /// @param {Mixed} config
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class XTemplate : Template
    {
        public XTemplate(XTemplateConfig config){}
        public void applySubTemplate(object id, object values, object parent, object xindex, object xcount){}
        /// <summary>
        /// Returns an HTML fragment of this template with the specified values applied.
        /// @param {Object} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
        /// @return {String} The HTML fragment
        /// </summary>
        public new JsString applyTemplate(object values){return null;}
        /// <summary>
        /// Compile the template to a function for optimized performance.  Recommended if the template will be used frequently.
        /// @return {Function} The compiled function
        /// </summary>
        public new JsAction compile(){return null;}
        public void compileTpl(object tpl){}
        public XTemplate(){}
        /// <summary>
        /// Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
        /// @param {String/HTMLElement} el A DOM element or its id
        /// @return {Ext.Template} The created template
        /// @static
        /// </summary>
        public static new Template from(object el, object config){return null;}
        /// <summary>
        /// @class Ext.XTemplate
        /// @extends Ext.Template
        /// <p>A template class that supports advanced functionality like:<div class="mdetail-params"><ul>
        /// <li>Autofilling arrays using templates and sub-templates</li>
        /// <li>Conditional processing with basic comparison operators</li>
        /// <li>Basic math function support</li>
        /// <li>Execute arbitrary inline code with special built-in template variables</li>
        /// <li>Custom member functions</li>
        /// <li>Many special tags and built-in operators that aren't defined as part of
        /// the API, but are supported in the templates that can be created</li>
        /// </ul></div></p>
        /// <p>XTemplate provides the templating mechanism built into:<div class="mdetail-params"><ul>
        /// <li>{@link Ext.DataView}</li>
        /// </ul></div></p>
        /// *
        /// The {@link Ext.Template} describes
        /// the acceptable parameters to pass to the constructor. The following
        /// examples demonstrate all of the supported features.</p>
        /// *
        /// <div class="mdetail-params"><ul>
        /// *
        /// <li><b><u>Sample Data</u></b>
        /// <div class="sub-desc">
        /// <p>This is the data object used for reference in each code example:</p>
        /// <pre><code>
        /// var data = {
        /// name: 'Tommy Maintz',
        /// title: 'Lead Developer',
        /// company: 'Ext JS, Inc',
        /// email: 'tommy@extjs.com',
        /// address: '5 Cups Drive',
        /// city: 'Palo Alto',
        /// state: 'CA',
        /// zip: '44102',
        /// drinks: ['Coffee', 'Soda', 'Water'],
        /// kids: [{
        /// name: 'Joshua',
        /// age:3
        /// },{
        /// name: 'Matthew',
        /// age:2
        /// },{
        /// name: 'Solomon',
        /// age:0
        /// }]
        /// };
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// *
        /// <li><b><u>Auto filling of arrays</u></b>
        /// <div class="sub-desc">
        /// <p>The <b><tt>tpl</tt></b> tag and the <b><tt>for</tt></b> operator are used
        /// to process the provided data object:
        /// <ul>
        /// <li>If the value specified in <tt>for</tt> is an array, it will auto-fill,
        /// repeating the template block inside the <tt>tpl</tt> tag for each item in the
        /// array.</li>
        /// <li>If <tt>for="."</tt> is specified, the data object provided is examined.</li>
        /// <li>While processing an array, the special variable <tt>{#}</tt>
        /// will provide the current array index + 1 (starts at 1, not 0).</li>
        /// </ul>
        /// </p>
        /// <pre><code>
        /// &lt;tpl <b>for</b>=".">...&lt;/tpl>       // loop through array at root node
        /// &lt;tpl <b>for</b>="foo">...&lt;/tpl>     // loop through array at foo node
        /// &lt;tpl <b>for</b>="foo.bar">...&lt;/tpl> // loop through array at foo.bar node
        /// </code></pre>
        /// Using the sample data above:
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Kids: ',
        /// '&lt;tpl <b>for</b>=".">',       // process the data.kids node
        /// '&lt;p>{#}. {name}&lt;/p>',  // use current array index to autonumber
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
        /// </code></pre>
        /// <p>An example illustrating how the <b><tt>for</tt></b> property can be leveraged
        /// to access specified members of the provided data object to populate the template:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Title: {title}&lt;/p>',
        /// '&lt;p>Company: {company}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl <b>for="kids"</b>>',     // interrogate the kids property within the data
        /// '&lt;p>{name}&lt;/p>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);  // pass the root node of the data object
        /// </code></pre>
        /// <p>Flat arrays that contain values (and not objects) can be auto-rendered
        /// using the special <b><tt>{.}</tt></b> variable inside a loop.  This variable
        /// will represent the value of the array at the current index:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>{name}\&#39;s favorite beverages:&lt;/p>',
        /// '&lt;tpl for="drinks">',
        /// '&lt;div> - {.}&lt;/div>',
        /// '&lt;/tpl>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// <p>When processing a sub-template, for example while looping through a child array,
        /// you can access the parent object's members via the <b><tt>parent</tt></b> object:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;tpl if="age &amp;gt; 1">',
        /// '&lt;p>{name}&lt;/p>',
        /// '&lt;p>Dad: {<b>parent</b>.name}&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// *
        /// <li><b><u>Conditional processing with basic comparison operators</u></b>
        /// <div class="sub-desc">
        /// <p>The <b><tt>tpl</tt></b> tag and the <b><tt>if</tt></b> operator are used
        /// to provide conditional checks for deciding whether or not to render specific
        /// parts of the template. Notes:<div class="sub-desc"><ul>
        /// <li>Double quotes must be encoded if used within the conditional</li>
        /// <li>There is no <tt>else</tt> operator &mdash; if needed, two opposite
        /// <tt>if</tt> statements should be used.</li>
        /// </ul></div>
        /// <pre><code>
        /// &lt;tpl if="age &gt; 1 &amp;&amp; age &lt; 10">Child&lt;/tpl>
        /// &lt;tpl if="age >= 10 && age < 18">Teenager&lt;/tpl>
        /// &lt;tpl <b>if</b>="this.isGirl(name)">...&lt;/tpl>
        /// &lt;tpl <b>if</b>="id==\'download\'">...&lt;/tpl>
        /// &lt;tpl <b>if</b>="needsIcon">&lt;img src="{icon}" class="{iconCls}"/>&lt;/tpl>
        /// // no good:
        /// &lt;tpl if="name == "Tommy"">Hello&lt;/tpl>
        /// // encode &#34; if it is part of the condition, e.g.
        /// &lt;tpl if="name == &#38;quot;Tommy&#38;quot;">Hello&lt;/tpl>
        /// </code></pre>
        /// Using the sample data above:
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;tpl if="age &amp;gt; 1">',
        /// '&lt;p>{name}&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// *
        /// <li><b><u>Basic math support</u></b>
        /// <div class="sub-desc">
        /// <p>The following basic math operators may be applied directly on numeric
        /// data values:</p><pre>
        /// + - * /
        /// </pre>
        /// For example:
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;tpl if="age &amp;gt; 1">',  // <-- Note that the &gt; is encoded
        /// '&lt;p>{#}: {name}&lt;/p>',  // <-- Auto-number each item
        /// '&lt;p>In 5 Years: {age+5}&lt;/p>',  // <-- Basic math
        /// '&lt;p>Dad: {parent.name}&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// *
        /// <li><b><u>Execute arbitrary inline code with special built-in template variables</u></b>
        /// <div class="sub-desc">
        /// <p>Anything between <code>{[ ... ]}</code> is considered code to be executed
        /// in the scope of the template. There are some special variables available in that code:
        /// <ul>
        /// <li><b><tt>values</tt></b>: The values in the current scope. If you are using
        /// scope changing sub-templates, you can change what <tt>values</tt> is.</li>
        /// <li><b><tt>parent</tt></b>: The scope (values) of the ancestor template.</li>
        /// <li><b><tt>xindex</tt></b>: If you are in a looping template, the index of the
        /// loop you are in (1-based).</li>
        /// <li><b><tt>xcount</tt></b>: If you are in a looping template, the total length
        /// of the array you are looping.</li>
        /// </ul>
        /// This example demonstrates basic row striping using an inline code block and the
        /// <tt>xindex</tt> variable:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Company: {[values.company.toUpperCase() + ", " + values.title]}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;div class="{[xindex % 2 === 0 ? "even" : "odd"]}">',
        /// '{name}',
        /// '&lt;/div>',
        /// '&lt;/tpl>&lt;/p>'
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// <li><b><u>Template member functions</u></b>
        /// <div class="sub-desc">
        /// <p>One or more member functions can be specified in a configuration
        /// object passed into the XTemplate constructor for more complex processing:</p>
        /// <pre><code>
        /// var tpl = new Ext.XTemplate(
        /// '&lt;p>Name: {name}&lt;/p>',
        /// '&lt;p>Kids: ',
        /// '&lt;tpl for="kids">',
        /// '&lt;tpl if="this.isGirl(name)">',
        /// '&lt;p>Girl: {name} - {age}&lt;/p>',
        /// '&lt;/tpl>',
        /// // use opposite if statement to simulate 'else' processing:
        /// '&lt;tpl if="this.isGirl(name) == false">',
        /// '&lt;p>Boy: {name} - {age}&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;tpl if="this.isBaby(age)">',
        /// '&lt;p>{name} is a baby!&lt;/p>',
        /// '&lt;/tpl>',
        /// '&lt;/tpl>&lt;/p>',
        /// {
        /// // XTemplate configuration:
        /// compiled: true,
        /// // member functions:
        /// isGirl: function(name){
        /// return name == 'Sara Grace';
        /// },
        /// isBaby: function(age){
        /// return age < 1;
        /// }
        /// }
        /// );
        /// tpl.overwrite(panel.body, data);
        /// </code></pre>
        /// </div>
        /// </li>
        /// *
        /// </ul></div>
        /// *
        /// @param {Mixed} config
        /// </summary>
        public JsRegExp argsRe{get;set;}
        /// <summary>
        /// @cfg {RegExp} codeRe The regular expression used to match code variables (default: matches <tt>{[expression]}</tt>).
        /// </summary>
        public JsRegExp codeRe{get;set;}
        public JsRegExp execRe{get;set;}
        public JsRegExp ifRe{get;set;}
        public JsRegExp nameRe{get;set;}
        /// <summary>
        /// @cfg {RegExp} codeRe The regular expression used to match code variables (default: matches <tt>{[expression]}</tt>).
        /// </summary>
        public new JsRegExp re{get;set;}
    }
    #endregion
    #region XTemplateConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class XTemplateConfig
    {
        public XTemplateConfig(){}
    }
    #endregion
}
#endregion
#region Ext.data
namespace Ext.data
{
    #region AbstractStore
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.AbstractStore
    /// @extends Ext.util.Observable
    /// *
    /// <p>AbstractStore is a superclass of {@link Ext.data.Store} and {@link Ext.data.TreeStore}. It's never used directly,
    /// but offers a set of methods used by both of those subclasses.</p>
    /// <p>We've left it here in the docs for reference purposes, but unless you need to make a whole new type of Store, what
    /// you're probably looking for is {@link Ext.data.Store}. If you're still interested, here's a brief description of what
    /// AbstractStore is and is not.</p>
    /// <p>AbstractStore provides the basic configuration for anything that can be considered a Store. It expects to be
    /// given a {@link Ext.data.Model Model} that represents the type of data in the Store. It also expects to be given a
    /// {@link Ext.data.Proxy Proxy} that handles the loading of data into the Store.</p>
    /// <p>AbstractStore provides a few helpful methods such as {@link #load} and {@link #sync}, which load and save data
    /// respectively, passing the requests through the configured {@link #proxy}. Both built-in Store subclasses add extra
    /// behavior to each of these functions. Note also that each AbstractStore subclass has its own way of storing data -
    /// in {@link Ext.data.Store} the data is saved as a flat {@link Ext.data.MixedCollection MixedCollection}, whereas in
    /// {@link Ext.data.TreeStore TreeStore} we use a {@link Ext.data.Tree} to maintain the data's hierarchy.</p>
    /// <p>Finally, AbstractStore provides an API for sorting and filtering data via its {@link #sorters} and {@link #filters}
    /// {@link Ext.data.MixedCollection MixedCollections}. Although this functionality is provided by AbstractStore, there's a
    /// good description of how to use it in the introduction of {@link Ext.data.Store}.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AbstractStore : Observable
    {
        public AbstractStore(){}
        public AbstractStore(AbstractStoreConfig config){}
        /// <summary>
        /// @private
        /// A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to.
        /// @param {Ext.data.Model} record The model instance that was edited
        /// </summary>
        public void afterCommit(Model record){}
        /// <summary>
        /// @private
        /// A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to.
        /// @param {Ext.data.Model} record The model instance that was edited
        /// </summary>
        public void afterEdit(Model record){}
        /// <summary>
        /// @private
        /// A model instance should call this method on the Store it has been {@link Ext.data.Model#join joined} to..
        /// @param {Ext.data.Model} record The model instance that was edited
        /// </summary>
        public void afterReject(Model record){}
        public void clearFilter(object supressEvent){}
        /// <summary>
        /// @cfg {String} storeId Optional unique identifier for this store. If present, this Store will be registered with
        /// the {@link Ext.StoreMgr}, making it easy to reuse elsewhere. Defaults to undefined.
        /// </summary>
        public AbstractStore(object config){}
        public void create(object data, object options){}
        /// <summary>
        /// @private
        /// Creates and returns a function which sorts an array by the given field and direction
        /// @param {String} field The field to create the sorter for
        /// @param {String} direction The direction to sort by (defaults to "ASC")
        /// @return {Function} A function which sorts by the field/direction combination provided
        /// </summary>
        public JsAction createSortFunction(JsString field, JsString direction){return null;}
        /// <summary>
        /// @private
        /// Normalizes an array of filter objects, ensuring that they are all Ext.util.Filter instances
        /// @param {Array} filters The filters array
        /// @return {Array} Array of Ext.util.Filter objects
        /// </summary>
        public JsArray decodeFilters(JsArray filters){return null;}
        /// <summary>
        /// @private
        /// Normalizes an array of sorter objects, ensuring that they are all Ext.util.Sorter instances
        /// @param {Array} sorters The sorters array
        /// @return {Array} Array of Ext.util.Sorter objects
        /// </summary>
        public JsArray decodeSorters(JsArray sorters){return null;}
        public void destroy(object options){}
        public void destroyStore(){}
        public void filter(object filters, object value){}
        public void filterBy(object fn, object scope){}
        /// <summary>
        /// @private
        /// Filter function for dirty records.
        /// </summary>
        public void filterDirty(object item){}
        /// <summary>
        /// @private
        /// Filter function for new records.
        /// </summary>
        public void filterNew(object item){}
        /// <summary>
        /// @private
        /// Returns an object which is passed in as the listeners argument to proxy.batch inside this.sync.
        /// This is broken out into a separate function to allow for customisation of the listeners
        /// @return {Object} The listeners object
        /// </summary>
        public object getBatchListeners(){return null;}
        public void getById(object id){}
        public void getCount(){}
        /// <summary>
        /// Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
        /// yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)
        /// @return {Array} The Model instances
        /// </summary>
        public JsArray getNewRecords(){return null;}
        /// <summary>
        /// Returns the proxy currently attached to this proxy instance
        /// @return {Ext.data.Proxy} The Proxy instance
        /// </summary>
        public Proxy getProxy(){return null;}
        public void getRemovedRecords(){}
        /// <summary>
        /// Returns an object describing the current sort state of this Store.
        /// @return {Object} The sort state of the Store. An object with two properties:<ul>
        /// <li><b>field : String<p class="sub-desc">The name of the field by which the Records are sorted.</p></li>
        /// <li><b>direction : String<p class="sub-desc">The sort order, 'ASC' or 'DESC' (case-sensitive).</p></li>
        /// </ul>
        /// See <tt>{@link #sortInfo}</tt> for additional details.
        /// </summary>
        public object getSortState(){return null;}
        /// <summary>
        /// Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy
        /// @return {Array} The updated Model instances
        /// </summary>
        public JsArray getUpdatedRecords(){return null;}
        public void isFiltered(){}
        /// <summary>
        /// Loads the Store using its configured {@link #proxy}.
        /// @param {Object} options Optional config object. This is passed into the {@link Ext.data.Operation Operation}
        /// object that is created and then sent to the proxy's {@link Ext.data.Proxy#read} function
        /// </summary>
        public void load(object options){}
        /// <summary>
        /// @private
        /// Attached as the 'complete' event listener to a proxy's Batch object. Iterates over the batch operations
        /// and updates the Store's internal data MixedCollection.
        /// </summary>
        public void onBatchComplete(object batch, object operation){}
        public void onBatchException(object batch, object operation){}
        /// <summary>
        /// @private
        /// Attached as the 'operationcomplete' event listener to a proxy's Batch object. By default just calls through
        /// to onProxyWrite.
        /// </summary>
        public void onBatchOperationComplete(object batch, object operation){}
        public void read(){}
        public void removeAll(){}
        public void save(){}
        /// <summary>
        /// Sets the Store's Proxy by string, config object or Proxy instance
        /// @param {String|Object|Ext.data.Proxy} proxy The new Proxy, which can be either a type string, a configuration object
        /// or an Ext.data.Proxy instance
        /// @return {Ext.data.Proxy} The attached Proxy object
        /// </summary>
        public Proxy setProxy(object proxy){return null;}
        public void sort(object sorters, object direction){}
        /// <summary>
        /// Synchronizes the Store with its Proxy. This asks the Proxy to batch together any new, updated
        /// and deleted records in the store, updating the Store's internal representation of the records
        /// as each operation completes.
        /// </summary>
        public void sync(){}
        public void update(object options){}
        /// <summary>
        /// @cfg {Boolean/Object} autoLoad If data is not specified, and if autoLoad is true or an Object, this store's load method
        /// is automatically called after creation. If the value of autoLoad is an Object, this Object will be passed to the store's
        /// load method. Defaults to false.
        /// </summary>
        public object autoLoad{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoSave True to automatically sync the Store with its Proxy after every edit to one of its Records.
        /// Defaults to false.
        /// </summary>
        public bool autoSave{get;set;}
        /// <summary>
        /// @private
        /// Returns an object which is passed in as the listeners argument to proxy.batch inside this.sync.
        /// This is broken out into a separate function to allow for customisation of the listeners
        /// @return {Object} The listeners object
        /// </summary>
        [JsProperty]
        public object BatchListeners{[JsMethod(Name="getBatchListeners")]get;private set;}
        /// <summary>
        /// Sets the updating behavior based on batch synchronization. 'operation' (the default) will update the Store's
        /// internal representation of the data after each operation of the batch has completed, 'complete' will wait until
        /// the entire batch has been completed before updating the Store's data. 'complete' is a good choice for local
        /// storage proxies, 'operation' is better for remote proxies, where there is a comparatively high latency.
        /// @property batchUpdateMode
        /// @type String
        /// </summary>
        public JsString batchUpdateMode{get;set;}
        /// <summary>
        /// The string type of the Proxy to create if none is specified. This defaults to creating a {@link Ext.data.MemoryProxy memory proxy}.
        /// @property defaultProxyType
        /// @type String
        /// </summary>
        public JsString defaultProxyType{get;set;}
        /// <summary>
        /// The default sort direction to use if one is not specified (defaults to "ASC")
        /// @property defaultSortDirection
        /// @type String
        /// </summary>
        public JsString defaultSortDirection{get;set;}
        /// <summary>
        /// If true, any filters attached to this Store will be run after loading data, before the datachanged event is fired.
        /// Defaults to true, ignored if {@link #remoteFilter} is true
        /// @property filterOnLoad
        /// @type Boolean
        /// </summary>
        public bool filterOnLoad{get;set;}
        /// <summary>
        /// True if a model was created implicitly for this Store. This happens if a fields array is passed to the Store's constructor
        /// instead of a model constructor or name.
        /// @property implicitModel
        /// @type Boolean
        /// @private
        /// </summary>
        public bool implicitModel{get;set;}
        /// <summary>
        /// True if the Store has already been destroyed via {@link #destroyStore}. If this is true, the reference to Store should be deleted
        /// as it will not function correctly any more.
        /// @property isDestroyed
        /// @type Boolean
        /// </summary>
        public bool isDestroyed{get;set;}
        /// <summary>
        /// True if the Store has already been destroyed via {@link #destroyStore}. If this is true, the reference to Store should be deleted
        /// as it will not function correctly any more.
        /// @property isDestroyed
        /// @type Boolean
        /// </summary>
        public bool isStore{get;set;}
        /// <summary>
        /// Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
        /// yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)
        /// @return {Array} The Model instances
        /// </summary>
        [JsProperty]
        public JsArray NewRecords{[JsMethod(Name="getNewRecords")]get;private set;}
        /// <summary>
        /// Sets the Store's Proxy by string, config object or Proxy instance
        /// @param {String|Object|Ext.data.Proxy} proxy The new Proxy, which can be either a type string, a configuration object
        /// or an Ext.data.Proxy instance
        /// @return {Ext.data.Proxy} The attached Proxy object
        /// Returns the proxy currently attached to this proxy instance
        /// @return {Ext.data.Proxy} The Proxy instance
        /// </summary>
        [JsProperty]
        public object Proxy{[JsMethod(Name="getProxy")]get;[JsMethod(Name="setProxy")]set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.AbstractStore
        /// @extends Ext.util.Observable
        /// *
        /// <p>AbstractStore is a superclass of {@link Ext.data.Store} and {@link Ext.data.TreeStore}. It's never used directly,
        /// but offers a set of methods used by both of those subclasses.</p>
        /// <p>We've left it here in the docs for reference purposes, but unless you need to make a whole new type of Store, what
        /// you're probably looking for is {@link Ext.data.Store}. If you're still interested, here's a brief description of what
        /// AbstractStore is and is not.</p>
        /// <p>AbstractStore provides the basic configuration for anything that can be considered a Store. It expects to be
        /// given a {@link Ext.data.Model Model} that represents the type of data in the Store. It also expects to be given a
        /// {@link Ext.data.Proxy Proxy} that handles the loading of data into the Store.</p>
        /// <p>AbstractStore provides a few helpful methods such as {@link #load} and {@link #sync}, which load and save data
        /// respectively, passing the requests through the configured {@link #proxy}. Both built-in Store subclasses add extra
        /// behavior to each of these functions. Note also that each AbstractStore subclass has its own way of storing data -
        /// in {@link Ext.data.Store} the data is saved as a flat {@link Ext.data.MixedCollection MixedCollection}, whereas in
        /// {@link Ext.data.TreeStore TreeStore} we use a {@link Ext.data.Tree} to maintain the data's hierarchy.</p>
        /// <p>Finally, AbstractStore provides an API for sorting and filtering data via its {@link #sorters} and {@link #filters}
        /// {@link Ext.data.MixedCollection MixedCollections}. Although this functionality is provided by AbstractStore, there's a
        /// good description of how to use it in the introduction of {@link Ext.data.Store}.
        /// </summary>
        public bool remoteFilter{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.AbstractStore
        /// @extends Ext.util.Observable
        /// *
        /// <p>AbstractStore is a superclass of {@link Ext.data.Store} and {@link Ext.data.TreeStore}. It's never used directly,
        /// but offers a set of methods used by both of those subclasses.</p>
        /// <p>We've left it here in the docs for reference purposes, but unless you need to make a whole new type of Store, what
        /// you're probably looking for is {@link Ext.data.Store}. If you're still interested, here's a brief description of what
        /// AbstractStore is and is not.</p>
        /// <p>AbstractStore provides the basic configuration for anything that can be considered a Store. It expects to be
        /// given a {@link Ext.data.Model Model} that represents the type of data in the Store. It also expects to be given a
        /// {@link Ext.data.Proxy Proxy} that handles the loading of data into the Store.</p>
        /// <p>AbstractStore provides a few helpful methods such as {@link #load} and {@link #sync}, which load and save data
        /// respectively, passing the requests through the configured {@link #proxy}. Both built-in Store subclasses add extra
        /// behavior to each of these functions. Note also that each AbstractStore subclass has its own way of storing data -
        /// in {@link Ext.data.Store} the data is saved as a flat {@link Ext.data.MixedCollection MixedCollection}, whereas in
        /// {@link Ext.data.TreeStore TreeStore} we use a {@link Ext.data.Tree} to maintain the data's hierarchy.</p>
        /// <p>Finally, AbstractStore provides an API for sorting and filtering data via its {@link #sorters} and {@link #filters}
        /// {@link Ext.data.MixedCollection MixedCollections}. Although this functionality is provided by AbstractStore, there's a
        /// good description of how to use it in the introduction of {@link Ext.data.Store}.
        /// </summary>
        public bool remoteSort{get;set;}
        /// <summary>
        /// If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired.
        /// Defaults to true, igored if {@link #remoteSort} is true
        /// @property sortOnLoad
        /// @type Boolean
        /// </summary>
        public bool sortOnLoad{get;set;}
        /// <summary>
        /// Returns an object describing the current sort state of this Store.
        /// @return {Object} The sort state of the Store. An object with two properties:<ul>
        /// <li><b>field : String<p class="sub-desc">The name of the field by which the Records are sorted.</p></li>
        /// <li><b>direction : String<p class="sub-desc">The sort order, 'ASC' or 'DESC' (case-sensitive).</p></li>
        /// </ul>
        /// See <tt>{@link #sortInfo}</tt> for additional details.
        /// </summary>
        [JsProperty]
        public object SortState{[JsMethod(Name="getSortState")]get;private set;}
        /// <summary>
        /// Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy
        /// @return {Array} The updated Model instances
        /// </summary>
        [JsProperty]
        public JsArray UpdatedRecords{[JsMethod(Name="getUpdatedRecords")]get;private set;}
    }
    #endregion
    #region AbstractStoreConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AbstractStoreConfig
    {
        public AbstractStoreConfig(){}
        /// <summary>
        /// If data is not specified, and if autoLoad is true or an Object, this store's load method
        /// is automatically called after creation. If the value of autoLoad is an Object, this Object will be passed to the store's
        /// load method. Defaults to false.
        /// </summary>
        public object autoLoad{get;set;}
        /// <summary>
        /// True to automatically sync the Store with its Proxy after every edit to one of its Records.
        /// Defaults to false.
        /// </summary>
        public bool autoSave{get;set;}
        /// <summary>
        /// The Proxy to use for this Store. This can be either a string, a config
        /// object or a Proxy instance - see {@link #setProxy} for details.
        /// </summary>
        public object proxy{get;set;}
    }
    #endregion
    #region AjaxProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.AjaxProxy
    /// @extends Ext.data.ServerProxy
    /// <p>AjaxProxy is one of the most widely-used ways of getting data into your application. It uses AJAX requests to
    /// load data from the server, usually to be placed into a {@link Ext.data.Store Store}. Let's take a look at a typical
    /// setup. Here we're going to set up a Store that has an AjaxProxy. To prepare, we'll also set up a
    /// {@link Ext.data.Model Model}:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: ['id', 'name', 'email']
    /// });
    /// //The Store contains the AjaxProxy as an inline configuration
    /// var store = new Ext.data.Store({
    /// model: 'User',
    /// proxy: {
    /// type: 'ajax',
    /// url : 'users.json'
    /// }
    /// });
    /// store.load();
    /// </code></pre>
    /// <p>Our example is going to load user data into a Store, so we start off by defining a {@link Ext.data.Model Model}
    /// with the fields that we expect the server to return. Next we set up the Store itself, along with a {@link #proxy}
    /// configuration. This configuration was automatically turned into an Ext.data.AjaxProxy instance, with the url we
    /// specified being passed into AjaxProxy's constructor. It's as if we'd done this:</p>
    /// <pre><code>
    /// new Ext.data.AjaxProxy({
    /// url: 'users.json',
    /// model: 'User',
    /// reader: 'json'
    /// });
    /// </code></pre>
    /// <p>A couple of extra configurations appeared here - {@link #model} and {@link #reader}. These are set by default
    /// when we create the proxy via the Store - the Store already knows about the Model, and Proxy's default
    /// {@link Ext.data.Reader Reader} is {@link Ext.data.JsonReader JsonReader}.</p>
    /// <p>Now when we call store.load(), the AjaxProxy springs into action, making a request to the url we configured
    /// ('users.json' in this case). As we're performing a read, it sends a GET request to that url (see {@link #actionMethods}
    /// to customize this - by default any kind of read will be sent as a GET request and any kind of write will be sent as a
    /// POST request).</p>
    /// <p><u>Limitations</u></p>
    /// <p>AjaxProxy cannot be used to retrieve data from other domains. If your application is running on http://domainA.com
    /// it cannot load data from http://domainB.com because browsers have a built-in security policy that prohibits domains
    /// talking to each other via AJAX.</p>
    /// <p>If you need to read data from another domain and can't set up a proxy server (some software that runs on your own
    /// domain's web server and transparently forwards requests to http://domainB.com, making it look like they actually came
    /// from http://domainA.com), you can use {@link Ext.data.ScriptTagProxy} and a technique known as JSON-P (JSON with
    /// Padding), which can help you get around the problem so long as the server on http://domainB.com is set up to support
    /// JSON-P responses. See {@link Ext.data.ScriptTagProxy ScriptTagProxy}'s introduction docs for more details.</p>
    /// <p><u>Readers and Writers</u></p>
    /// <p>AjaxProxy can be configured to use any type of {@link Ext.data.Reader Reader} to decode the server's response. If
    /// no Reader is supplied, AjaxProxy will default to using a {@link Ext.data.JsonReader JsonReader}. Reader configuration
    /// can be passed in as a simple object, which the Proxy automatically turns into a {@link Ext.data.Reader Reader}
    /// instance:</p>
    /// <pre><code>
    /// var proxy = new Ext.data.AjaxProxy({
    /// model: 'User',
    /// reader: {
    /// type: 'xml',
    /// root: 'users'
    /// }
    /// });
    /// proxy.getReader(); //returns an {@link Ext.data.XmlReader XmlReader} instance based on the config we supplied
    /// </code></pre>
    /// <p><u>Url generation</u></p>
    /// <p>AjaxProxy automatically inserts any sorting, filtering, paging and grouping options into the url it generates for
    /// each request. These are controlled with the following configuration options:</p>
    /// <ul style="list-style-type: disc; padding-left: 20px;">
    /// <li>{@link #pageParam} - controls how the page number is sent to the server
    /// (see also {@link #startParam} and {@link #limitParam})</li>
    /// <li>{@link #sortParam} - controls how sort information is sent to the server</li>
    /// <li>{@link #groupParam} - controls how grouping information is sent to the server</li>
    /// <li>{@link #filterParam} - controls how filter information is sent to the server</li>
    /// </ul>
    /// <p>Each request sent by AjaxProxy is described by an {@link Ext.data.Operation Operation}. To see how we can
    /// customize the generated urls, let's say we're loading the Proxy with the following Operation:</p>
    /// <pre><code>
    /// var operation = new Ext.data.Operation({
    /// action: 'read',
    /// page  : 2
    /// });
    /// </code></pre>
    /// <p>Now we'll issue the request for this Operation by calling {@link #read}:</p>
    /// <pre><code>
    /// var proxy = new Ext.data.AjaxProxy({
    /// url: '/users'
    /// });
    /// proxy.read(operation); //GET /users?page=2
    /// </code></pre>
    /// <p>Easy enough - the Proxy just copied the page property from the Operation. We can customize how this page data is
    /// sent to the server:</p>
    /// <pre><code>
    /// var proxy = new Ext.data.AjaxProxy({
    /// url: '/users',
    /// pagePage: 'pageNumber'
    /// });
    /// proxy.read(operation); //GET /users?pageNumber=2
    /// </code></pre>
    /// <p>Alternatively, our Operation could have been configured to send start and limit parameters instead of page:</p>
    /// <pre><code>
    /// var operation = new Ext.data.Operation({
    /// action: 'read',
    /// start : 50,
    /// limit : 25
    /// });
    /// var proxy = new Ext.data.AjaxProxy({
    /// url: '/users'
    /// });
    /// proxy.read(operation); //GET /users?start=50&limit=25
    /// </code></pre>
    /// <p>Again we can customize this url:</p>
    /// <pre><code>
    /// var proxy = new Ext.data.AjaxProxy({
    /// url: '/users',
    /// startParam: 'startIndex',
    /// limitParam: 'limitIndex'
    /// });
    /// proxy.read(operation); //GET /users?startIndex=50&limitIndex=25
    /// </code></pre>
    /// <p>AjaxProxy will also send sort and filter information to the server. Let's take a look at how this looks with a
    /// more expressive Operation object:</p>
    /// <pre><code>
    /// var operation = new Ext.data.Operation({
    /// action: 'read',
    /// sorters: [
    /// new Ext.util.Sorter({
    /// property : 'name',
    /// direction: 'ASC'
    /// }),
    /// new Ext.util.Sorter({
    /// property : 'age',
    /// direction: 'DESC'
    /// })
    /// ],
    /// filters: [
    /// new Ext.util.Filter({
    /// property: 'eyeColor',
    /// value   : 'brown'
    /// })
    /// ]
    /// });
    /// </code></pre>
    /// <p>This is the type of object that is generated internally when loading a {@link Ext.data.Store Store} with sorters
    /// and filters defined. By default the AjaxProxy will JSON encode the sorters and filters, resulting in something like
    /// this (note that the url is escaped before sending the request, but is left unescaped here for clarity):</p>
    /// <pre><code>
    /// var proxy = new Ext.data.AjaxProxy({
    /// url: '/users'
    /// });
    /// proxy.read(operation); //GET /users?sort=[{"property":"name","direction":"ASC"},{"property":"age","direction":"DESC"}]&filter=[{"property":"eyeColor","value":"brown"}]
    /// </code></pre>
    /// <p>We can again customize how this is created by supplying a few configuration options. Let's say our server is set
    /// up to receive sorting information is a format like "sortBy=name#ASC,age#DESC". We can configure AjaxProxy to provide
    /// that format like this:</p>
    /// <pre><code>
    /// var proxy = new Ext.data.AjaxProxy({
    /// url: '/users',
    /// sortParam: 'sortBy',
    /// filterParam: 'filterBy',
    /// //our custom implementation of sorter encoding - turns our sorters into "name#ASC,age#DESC"
    /// encodeSorters: function(sorters) {
    /// var length   = sorters.length,
    /// sortStrs = [],
    /// sorter, i;
    /// for (i = 0; i < length; i++) {
    /// sorter = sorters[i];
    /// sortStrs[i] = sorter.property + '#' + sorter.direction
    /// }
    /// return sortStrs.join(",");
    /// }
    /// });
    /// proxy.read(operation); //GET /users?sortBy=name#ASC,age#DESC&filterBy=[{"property":"eyeColor","value":"brown"}]
    /// </code></pre>
    /// <p>We can also provide a custom {@link #encodeFilters} function to encode our filters.</p>
    /// @constructor
    /// <p>Note that if this HttpProxy is being used by a {@link Ext.data.Store Store}, then the
    /// Store's call to {@link #load} will override any specified <tt>callback</tt> and <tt>params</tt>
    /// options. In this case, use the Store's {@link Ext.data.Store#events events} to modify parameters,
    /// or react to loading events. The Store's {@link Ext.data.Store#baseParams baseParams} may also be
    /// used to pass parameters known at instantiation time.</p>
    /// <p>If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make
    /// the request.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AjaxProxy : ServerProxy
    {
        public AjaxProxy(ServerProxyConfig config){}
        /// <summary>
        /// @cfg {Object} headers Any headers to add to the Ajax request. Defaults to <tt>undefined</tt>.
        /// </summary>
        public AjaxProxy(){}
        /// <summary>
        /// @private
        /// TODO: This is currently identical to the ScriptTagProxy version except for the return function's signature. There is a lot
        /// of code duplication inside the returned function so we need to find a way to DRY this up.
        /// @param {Ext.data.Request} request The Request object
        /// @param {Ext.data.Operation} operation The Operation being executed
        /// @param {Function} callback The callback function to be called when the request completes. This is usually the callback
        /// passed to doRequest
        /// @param {Object} scope The scope in which to execute the callback function
        /// @return {Function} The callback function
        /// </summary>
        public JsAction createRequestCallback(Request request, Operation operation, JsAction callback, object scope){return null;}
        /// <summary>
        /// @ignore
        /// </summary>
        public void doRequest(object operation, object callback, object scope){}
        /// <summary>
        /// Returns the HTTP method name for a given request. By default this returns based on a lookup on {@link #actionMethods}.
        /// @param {Ext.data.Request} request The request object
        /// @return {String} The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE')
        /// </summary>
        public JsString getMethod(Request request){return null;}
    }
    #endregion
    #region ArrayReader
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.ArrayReader
    /// @extends Ext.data.JsonReader
    /// <p>Data reader class to create an Array of {@link Ext.data.Model} objects from an Array.
    /// Each element of that Array represents a row of data fields. The
    /// fields are pulled into a Record object using as a subscript, the <code>mapping</code> property
    /// of the field definition if it exists, or the field's ordinal position in the definition.</p>
    /// <p><u>Example code:</u></p>
    /// <pre><code>
    /// var Employee = Ext.regModel('Employee', {
    /// fields: [
    /// 'id',
    /// {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
    /// {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
    /// ]
    /// });
    /// var myReader = new Ext.data.ArrayReader({
    /// model: 'Employee'
    /// }, Employee);
    /// </code></pre>
    /// <p>This would consume an Array like this:</p>
    /// <pre><code>
    /// [ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
    /// </code></pre>
    /// @constructor
    /// Create a new ArrayReader
    /// @param {Object} meta Metadata configuration options.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ArrayReader : JsonReader
    {
        public ArrayReader(){}
        /// <summary>
        /// @private
        /// Most of the work is done for us by JsonReader, but we need to overwrite the field accessors to just
        /// reference the correct position in the array.
        /// </summary>
        public new void buildExtractors(){}
    }
    #endregion
    #region ArrayStore
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.ArrayStore
    /// @extends Ext.data.Store
    /// @ignore
    /// <p>Small helper class to make creating {@link Ext.data.Store}s from Array data easier.
    /// An ArrayStore will be automatically configured with a {@link Ext.data.ArrayReader}.</p>
    /// <p>A store configuration would be something like:</p>
    /// <pre><code>
    /// var store = new Ext.data.ArrayStore({
    /// // store configs
    /// autoDestroy: true,
    /// storeId: 'myStore',
    /// // reader configs
    /// idIndex: 0,
    /// fields: [
    /// 'company',
    /// {name: 'price', type: 'float'},
    /// {name: 'change', type: 'float'},
    /// {name: 'pctChange', type: 'float'},
    /// {name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>This store is configured to consume a returned object of the form:
    /// <pre><code>
    /// var myData = [
    /// ['3m Co',71.72,0.02,0.03,'9/1 12:00am'],
    /// ['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am'],
    /// ['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am'],
    /// ['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am'],
    /// ['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am']
    /// ];
    /// </code></pre>
    /// *
    /// <p>An object literal of this form could also be used as the {@link #data} config option.</p>
    /// <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
    /// <b>{@link Ext.data.ArrayReader ArrayReader}</b>.</p>
    /// @constructor
    /// @param {Object} config
    /// @xtype arraystore
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ArrayStore : Store
    {
        public ArrayStore(){}
        public ArrayStore(StoreConfig config){}
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public ArrayStore(object config){}
        public void loadData(object data, object append){}
    }
    #endregion
    #region Association
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Association
    /// @extends Object
    /// <p>Associations enable you to express relationships between different {@link Ext.data.Model Models}. Let's say we're
    /// writing an ecommerce system where Users can make Orders - there's a relationship between these Models that we can
    /// express like this:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: ['id', 'name', 'email'],
    /// hasMany: {model: 'Order', name: 'orders'}
    /// });
    /// Ext.regModel('Order', {
    /// fields: ['id', 'user_id', 'status', 'price'],
    /// belongsTo: 'User'
    /// });
    /// </code></pre>
    /// <p>We've set up two models - User and Order - and told them about each other. You can set up as many associations on
    /// each Model as you need using the two default types - {@link Ext.data.HasManyAssociation hasMany} and
    /// {@link Ext.data.BelongsToAssociation belongsTo}. There's much more detail on the usage of each of those inside their
    /// documentation pages. If you're not familiar with Models already, {@link Ext.data.Model there is plenty on those too}.</p>
    /// <p><u>Further Reading</u></p>
    /// <ul style="list-style-type: disc; padding-left: 20px;">
    /// <li>{@link Ext.data.HasManyAssociation hasMany associations}
    /// <li>{@link Ext.data.BelongsToAssociation belongsTo associations}
    /// <li>{@link Ext.data.Model using Models}
    /// </ul>
    /// @constructor
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Association
    {
        public Association(){}
        public Association(AssociationConfig config){}
        /// <summary>
        /// @cfg {String} primaryKey The name of the primary key on the associated model. Defaults to 'id'
        /// </summary>
        public Association(object config){}
        /// <summary>
        /// @cfg {String} primaryKey The name of the primary key on the associated model. Defaults to 'id'
        /// </summary>
        public JsString primaryKey{get;set;}
    }
    #endregion
    #region AssociationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class AssociationConfig
    {
        public AssociationConfig(){}
        /// <summary>
        /// The string name of the model that is being associated with. Required
        /// </summary>
        public JsString associatedModel{get;set;}
        /// <summary>
        /// The string name of the model that owns the association. Required
        /// </summary>
        public JsString ownerModel{get;set;}
        /// <summary>
        /// The name of the primary key on the associated model. Defaults to 'id'
        /// </summary>
        public JsString primaryKey{get;set;}
    }
    #endregion
    #region Batch
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Batch
    /// @extends Ext.util.Observable
    /// <p>Provides a mechanism to run one or more {@link Ext.data.Operation operations} in a given order. Fires the 'operationcomplete' event
    /// after the completion of each Operation, and the 'complete' event when all Operations have been successfully executed. Fires an 'exception'
    /// event if any of the Operations encounter an exception.</p>
    /// <p>Usually these are only used internally by {@link Ext.data.Proxy} classes</p>
    /// @constructor
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Batch : Observable
    {
        public Batch(){}
        public Batch(ObservableConfig config){}
        /// <summary>
        /// Adds a new operation to this batch
        /// @param {Object} operation The {@link Ext.data.Operation Operation} object
        /// </summary>
        public void add(object operation){}
        /// <summary>
        /// True to automatically pause the execution of the batch if any operation encounters an exception (defaults to true)
        /// @property pauseOnException
        /// @type Boolean
        /// </summary>
        public Batch(object config){}
        /// <summary>
        /// Pauses execution of the batch, but does not cancel the current operation
        /// </summary>
        public void pause(){}
        /// <summary>
        /// @private
        /// Runs the next operation, relative to this.current.
        /// </summary>
        public void runNextOperation(){}
        /// <summary>
        /// Executes a operation by its numeric index
        /// @param {Number} index The operation index to run
        /// </summary>
        public void runOperation(JsNumber index){}
        /// <summary>
        /// Kicks off the execution of the batch, continuing from the next operation if the previous
        /// operation encountered an exception, or if execution was paused
        /// </summary>
        public void start(){}
        /// <summary>
        /// True to immediately start processing the batch as soon as it is constructed (defaults to false)
        /// @property autoStart
        /// @type Boolean
        /// </summary>
        public bool autoStart{get;set;}
        /// <summary>
        /// True if this batch has encountered an exception. This is cleared at the start of each operation
        /// @property hasException
        /// @type Boolean
        /// </summary>
        public bool hasException{get;set;}
        /// <summary>
        /// True if this batch has been executed completely
        /// @property isComplete
        /// @type Boolean
        /// </summary>
        public bool isComplete{get;set;}
        /// <summary>
        /// True if the batch is currently running
        /// @property isRunning
        /// @type Boolean
        /// </summary>
        public bool isRunning{get;set;}
        /// <summary>
        /// True to automatically pause the execution of the batch if any operation encounters an exception (defaults to true)
        /// @property pauseOnException
        /// @type Boolean
        /// </summary>
        public bool pauseOnException{get;set;}
        /// <summary>
        /// The total number of operations in this batch. Read only
        /// @property total
        /// @type Number
        /// </summary>
        public object total{get;set;}
    }
    #endregion
    #region BelongsToAssociation
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.BelongsToAssociation
    /// @extends Ext.data.Association
    /// <p>Represents a many to one association with another model. The owner model is expected to have
    /// a foreign key which references the primary key of the associated model:</p>
    /// <pre><code>
    /// var Category = Ext.regModel('Category', {
    /// fields: [
    /// {name: 'id',   type: 'int'},
    /// {name: 'name', type: 'string'}
    /// ]
    /// });
    /// var Product = Ext.regModel('Product', {
    /// fields: [
    /// {name: 'id',          type: 'int'},
    /// {name: 'category_id', type: 'int'},
    /// {name: 'name',        type: 'string'}
    /// ],
    /// associations: [
    /// {type: 'belongsTo', model: 'Category'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>In the example above we have created models for Products and Categories, and linked them together
    /// by saying that each Product belongs to a Category. This automatically links each Product to a Category
    /// based on the Product's category_id, and provides new functions on the Product model:</p>
    /// <p><u>Generated getter function</u></p>
    /// <p>The first function that is added to the owner model is a getter function:</p>
    /// <pre><code>
    /// var product = new Product({
    /// id: 100,
    /// category_id: 20,
    /// name: 'Sneakers'
    /// });
    /// product.getCategory(function(category, operation) {
    /// //do something with the category object
    /// alert(category.get('id')); //alerts 20
    /// }, this);
    /// </code></pre>
    /// *
    /// <p>The getCategory function was created on the Product model when we defined the association. This uses the
    /// Category's configured {@link Ext.data.Proxy proxy} to load the Category asynchronously, calling the provided
    /// callback when it has loaded.</p>
    /// <p>The new getCategory function will also accept an object containing success, failure and callback properties
    /// - callback will always be called, success will only be called if the associated model was loaded successfully
    /// and failure will only be called if the associatied model could not be loaded:</p>
    /// <pre><code>
    /// product.getCategory({
    /// callback: function(category, operation) {}, //a function that will always be called
    /// success : function(category, operation) {}, //a function that will only be called if the load succeeded
    /// failure : function(category, operation) {}, //a function that will only be called if the load did not succeed
    /// scope   : this //optionally pass in a scope object to execute the callbacks in
    /// });
    /// </code></pre>
    /// <p>In each case above the callbacks are called with two arguments - the associated model instance and the
    /// {@link Ext.data.Operation operation} object that was executed to load that instance. The Operation object is
    /// useful when the instance could not be loaded.</p>
    /// <p><u>Generated setter function</u></p>
    /// <p>The second generated function sets the associated model instance - if only a single argument is passed to
    /// the setter then the following two calls are identical:</p>
    /// <pre><code>
    /// //this call
    /// product.setCategory(10);
    /// //is equivalent to this call:
    /// product.set('category_id', 10);
    /// </code></pre>
    /// <p>If we pass in a second argument, the model will be automatically saved and the second argument passed to
    /// the owner model's {@link Ext.data.Model#save save} method:</p>
    /// <pre><code>
    /// product.setCategory(10, function(product, operation) {
    /// //the product has been saved
    /// alert(product.get('category_id')); //now alerts 10
    /// });
    /// //alternative syntax:
    /// product.setCategory(10, {
    /// callback: function(product, operation), //a function that will always be called
    /// success : function(product, operation), //a function that will only be called if the load succeeded
    /// failure : function(product, operation), //a function that will only be called if the load did not succeed
    /// scope   : this //optionally pass in a scope object to execute the callbacks in
    /// })
    /// </code></pre>
    /// *
    /// <p><u>Customisation</u></p>
    /// <p>Associations reflect on the models they are linking to automatically set up properties such as the
    /// {@link #primaryKey} and {@link #foreignKey}. These can alternatively be specified:</p>
    /// <pre><code>
    /// var Product = Ext.regModel('Product', {
    /// fields: [...],
    /// associations: [
    /// {type: 'belongsTo', model: 'Category', primaryKey: 'unique_id', foreignKey: 'cat_id'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'category_id')
    /// with our own settings. Usually this will not be needed.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class BelongsToAssociation : Association
    {
        public BelongsToAssociation(){}
        public BelongsToAssociation(BelongsToAssociationConfig config){}
        public BelongsToAssociation(AssociationConfig config){}
        /// <summary>
        /// @cfg {String} setterName The name of the setter function that will be added to the local model's prototype.
        /// Defaults to 'set' + the name of the foreign model, e.g. setCategory
        /// </summary>
        public BelongsToAssociation(object config){}
        /// <summary>
        /// @private
        /// Returns a getter function to be placed on the owner model's prototype. We cache the loaded instance
        /// the first time it is loaded so that subsequent calls to the getter always receive the same reference.
        /// @return {Function} The getter function
        /// </summary>
        public JsAction createGetter(){return null;}
        /// <summary>
        /// @private
        /// Returns a setter function to be placed on the owner model's prototype
        /// @return {Function} The setter function
        /// </summary>
        public JsAction createSetter(){return null;}
    }
    #endregion
    #region BelongsToAssociationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class BelongsToAssociationConfig
    {
        public BelongsToAssociationConfig(){}
        /// <summary>
        /// The name of the foreign key on the owner model that links it to the associated
        /// model. Defaults to the lowercased name of the associated model plus "_id", e.g. an association with a
        /// model called Product would set up a product_id foreign key.
        /// </summary>
        public JsString foreignKey{get;set;}
        /// <summary>
        /// The name of the getter function that will be added to the local model's prototype.
        /// Defaults to 'get' + the name of the foreign model, e.g. getCategory
        /// </summary>
        public JsString getterName{get;set;}
    }
    #endregion
    #region ClientProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.ClientProxy
    /// @extends Ext.data.Proxy
    /// <p>Base class for any client-side storage. Used as a superclass for {@link Ext.data.MemoryProxy Memory} and
    /// {@link Ext.data.WebStorageProxy Web Storage} proxies. Do not use directly, use one of the subclasses instead.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ClientProxy : Proxy
    {
        public ClientProxy(ProxyConfig config){}
        public ClientProxy(){}
        /// <summary>
        /// Abstract function that must be implemented by each ClientProxy subclass. This should purge all record data
        /// from the client side storage, as well as removing any supporting data (such as lists of record IDs)
        /// </summary>
        public void clear(){}
    }
    #endregion
    #region Connection
    /// <summary>
    /// @class Ext.data.Connection
    /// @extends Ext.util.Observable
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Connection : Observable
    {
        public Connection(){}
        public Connection(ConnectionConfig config){}
        /// <summary>
        /// Aborts any outstanding request.
        /// @param {Object} request (Optional) defaults to the last request
        /// </summary>
        public void abort(object r){}
        public Connection(object config){}
        public void createException(object r){}
        public void createResponse(object r){}
        public void getXhrInstance(){}
        /// <summary>
        /// Determine whether this object has a request outstanding.
        /// @param {Object} request (Optional) defaults to the last transaction
        /// @return {Boolean} True if there is an outstanding request.
        /// </summary>
        public bool isLoading(object r){return false;}
        public void onComplete(object r){}
        public void onStateChange(object r){}
        /// <summary>
        /// <p>Sends an HTTP request to a remote server.</p>
        /// <p><b>Important:</b> Ajax server requests are asynchronous, and this call will
        /// return before the response has been received. Process any returned data
        /// in a callback function.</p>
        /// <pre><code>
        /// Ext.Ajax.request({
        /// url: 'ajax_demo/sample.json',
        /// success: function(response, opts) {
        /// var obj = Ext.decode(response.responseText);
        /// console.dir(obj);
        /// },
        /// failure: function(response, opts) {
        /// console.log('server-side failure with status code ' + response.status);
        /// }
        /// });
        /// </code></pre>
        /// <p>To execute a callback function in the correct scope, use the <tt>scope</tt> option.</p>
        /// @param {Object} options An object which may contain the following properties:<ul>
        /// <li><b>url</b> : String/Function (Optional)<div class="sub-desc">The URL to
        /// which to send the request, or a function to call which returns a URL string. The scope of the
        /// function is specified by the <tt>scope</tt> option. Defaults to the configured
        /// <tt>{@link #url}</tt>.</div></li>
        /// <li><b>params</b> : Object/String/Function (Optional)<div class="sub-desc">
        /// An object containing properties which are used as parameters to the
        /// request, a url encoded string or a function to call to get either. The scope of the function
        /// is specified by the <tt>scope</tt> option.</div></li>
        /// <li><b>method</b> : String (Optional)<div class="sub-desc">The HTTP method to use
        /// for the request. Defaults to the configured method, or if no method was configured,
        /// "GET" if no parameters are being sent, and "POST" if parameters are being sent.  Note that
        /// the method name is case-sensitive and should be all caps.</div></li>
        /// <li><b>callback</b> : Function (Optional)<div class="sub-desc">The
        /// function to be called upon receipt of the HTTP response. The callback is
        /// called regardless of success or failure and is passed the following
        /// parameters:<ul>
        /// <li><b>options</b> : Object<div class="sub-desc">The parameter to the request call.</div></li>
        /// <li><b>success</b> : Boolean<div class="sub-desc">True if the request succeeded.</div></li>
        /// <li><b>response</b> : Object<div class="sub-desc">The XMLHttpRequest object containing the response data.
        /// See <a href="http://www.w3.org/TR/XMLHttpRequest/">http://www.w3.org/TR/XMLHttpRequest/</a> for details about
        /// accessing elements of the response.</div></li>
        /// </ul></div></li>
        /// <li><a id="request-option-success"></a><b>success</b> : Function (Optional)<div class="sub-desc">The function
        /// to be called upon success of the request. The callback is passed the following
        /// parameters:<ul>
        /// <li><b>response</b> : Object<div class="sub-desc">The XMLHttpRequest object containing the response data.</div></li>
        /// <li><b>options</b> : Object<div class="sub-desc">The parameter to the request call.</div></li>
        /// </ul></div></li>
        /// <li><b>failure</b> : Function (Optional)<div class="sub-desc">The function
        /// to be called upon failure of the request. The callback is passed the
        /// following parameters:<ul>
        /// <li><b>response</b> : Object<div class="sub-desc">The XMLHttpRequest object containing the response data.</div></li>
        /// <li><b>options</b> : Object<div class="sub-desc">The parameter to the request call.</div></li>
        /// </ul></div></li>
        /// <li><b>scope</b> : Object (Optional)<div class="sub-desc">The scope in
        /// which to execute the callbacks: The "this" object for the callback function. If the <tt>url</tt>, or <tt>params</tt> options were
        /// specified as functions from which to draw values, then this also serves as the scope for those function calls.
        /// Defaults to the browser window.</div></li>
        /// <li><b>timeout</b> : Number (Optional)<div class="sub-desc">The timeout in milliseconds to be used for this request. Defaults to 30 seconds.</div></li>
        /// <li><b>form</b> : Element/HTMLElement/String (Optional)<div class="sub-desc">The <tt>&lt;form&gt;</tt>
        /// Element or the id of the <tt>&lt;form&gt;</tt> to pull parameters from.</div></li>
        /// <li><a id="request-option-isUpload"></a><b>isUpload</b> : Boolean (Optional)<div class="sub-desc"><b>Only meaningful when used
        /// with the <tt>form</tt> option</b>.
        /// <p>True if the form object is a file upload (will be set automatically if the form was
        /// configured with <b><tt>enctype</tt></b> "multipart/form-data").</p>
        /// <p>File uploads are not performed using normal "Ajax" techniques, that is they are <b>not</b>
        /// performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
        /// DOM <tt>&lt;form></tt> element temporarily modified to have its
        /// <a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
        /// to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
        /// but removed after the return data has been gathered.</p>
        /// <p>The server response is parsed by the browser to create the document for the IFRAME. If the
        /// server is using JSON to send the return object, then the
        /// <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
        /// must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
        /// <p>The response text is retrieved from the document, and a fake XMLHttpRequest object
        /// is created containing a <tt>responseText</tt> property in order to conform to the
        /// requirements of event handlers and callbacks.</p>
        /// <p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
        /// and some server technologies (notably JEE) may require some custom processing in order to
        /// retrieve parameter names and parameter values from the packet content.</p>
        /// </div></li>
        /// <li><b>headers</b> : Object (Optional)<div class="sub-desc">Request
        /// headers to set for the request.</div></li>
        /// <li><b>xmlData</b> : Object (Optional)<div class="sub-desc">XML document
        /// to use for the post. Note: This will be used instead of params for the post
        /// data. Any params will be appended to the URL.</div></li>
        /// <li><b>jsonData</b> : Object/String (Optional)<div class="sub-desc">JSON
        /// data to use as the post. Note: This will be used instead of params for the post
        /// data. Any params will be appended to the URL.</div></li>
        /// <li><b>disableCaching</b> : Boolean (Optional)<div class="sub-desc">True
        /// to add a unique cache-buster param to GET requests.</div></li>
        /// </ul></p>
        /// <p>The options object may also contain any other property which might be needed to perform
        /// postprocessing in a callback because it is passed to callback functions.</p>
        /// @return {Object} request The request object. This may be used
        /// to cancel the request.
        /// </summary>
        public object request(object o){return null;}
        public JsString defaultPostHeader{get;set;}
        public JsString defaultXhrHeader{get;set;}
        /// <summary>
        /// @cfg {Boolean} disableCaching (Optional) True to add a unique cache-buster param to GET requests. (defaults to true)
        /// @type Boolean
        /// </summary>
        public bool disableCaching{get;set;}
        /// <summary>
        /// @cfg {String} disableCachingParam (Optional) Change the parameter which is sent went disabling caching
        /// through a cache buster. Defaults to '_dc'
        /// @type String
        /// </summary>
        public JsString disableCachingParam{get;set;}
        /// <summary>
        /// @class Ext.data.Connection
        /// @extends Ext.util.Observable
        /// </summary>
        public JsString method{get;set;}
        /// <summary>
        /// @cfg {Number} timeout (Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)
        /// </summary>
        public JsNumber timeout{get;set;}
        /// <summary>
        /// @class Ext.data.Connection
        /// @extends Ext.util.Observable
        /// </summary>
        public object url{get;set;}
        /// <summary>
        /// @cfg {Number} timeout (Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)
        /// </summary>
        public bool useDefaultHeader{get;set;}
        public bool useDefaultXhrHeader{get;set;}
    }
    #endregion
    #region ConnectionConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ConnectionConfig
    {
        public ConnectionConfig(){}
        /// <summary>
        /// (Optional) True to add a unique cache-buster param to GET requests. (defaults to true)
        /// @type Boolean
        /// </summary>
        public bool disableCaching{get;set;}
        /// <summary>
        /// (Optional) Change the parameter which is sent went disabling caching
        /// through a cache buster. Defaults to '_dc'
        /// @type String
        /// </summary>
        public JsString disableCachingParam{get;set;}
    }
    #endregion
    #region Errors
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Errors
    /// @extends Ext.util.MixedCollection
    /// <p>Wraps a collection of validation error responses and provides convenient functions for
    /// accessing and errors for specific fields.</p>
    /// <p>Usually this class does not need to be instantiated directly - instances are instead created
    /// automatically when {@link Ext.data.Model#validate validate} on a model instance:</p>
    /// <pre><code>
    /// //validate some existing model instance - in this case it returned 2 failures messages
    /// var errors = myModel.validate();
    /// errors.isValid(); //false
    /// errors.length; //2
    /// errors.getByField('name');  // [{field: 'name',  error: 'must be present'}]
    /// errors.getByField('title'); // [{field: 'title', error: 'is too short'}]
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Errors : MixedCollection
    {
        public Errors(){}
        /// <summary>
        /// Returns all of the errors for the given field
        /// @param {String} fieldName The field to get errors for
        /// @return {Array} All errors for the given field
        /// </summary>
        public JsArray getByField(JsString fieldName){return null;}
        /// <summary>
        /// Returns true if there are no errors in the collection
        /// @return {Boolean}
        /// </summary>
        public bool isValid(){return false;}
    }
    #endregion
    #region Field
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Field
    /// @extends Object
    /// <p>Fields are used to define what a Model is. They aren't instantiated directly - instead, {@link Ext#regModel}
    /// creates a Field instance for each field configured in a {@link Ext.data.Model Model}. For example, we might set up a
    /// model like this:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: [
    /// 'name', 'email',
    /// {name: 'age', type: 'int'},
    /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>Four fields will have been created for the User Model - name, email, age and gender. Note that we specified a
    /// couple of different formats here; if we only pass in the string name of the field (as with name and email), the
    /// field is set up with the 'auto' type. It's as if we'd done this instead:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: [
    /// {name: 'name', type: 'auto'},
    /// {name: 'email', type: 'auto'},
    /// {name: 'age', type: 'int'},
    /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
    /// ]
    /// });
    /// </code></pre>
    /// <p><u>Types and conversion</u></p>
    /// <p>The {@link #type} is important - it's used to automatically convert data passed to the field into the correct
    /// format. In our example above, the name and email fields used the 'auto' type and will just accept anything that is
    /// passed into them. The 'age' field had an 'int' type however, so if we passed 25.4 this would be rounded to 25.</p>
    /// <p>Sometimes a simple type isn't enough, or we want to perform some processing when we load a Field's data. We can
    /// do this using a {@link #convert} function. Here, we're going to create a new field based on another:</p>
    /// <code><pre>
    /// Ext.regModel('User', {
    /// fields: [
    /// 'name', 'email',
    /// {name: 'age', type: 'int'},
    /// {name: 'gender', type: 'string', defaultValue: 'Unknown'},
    /// {
    /// name: 'firstName',
    /// convert: function(value, record) {
    /// var fullName  = record.get('name'),
    /// splits    = fullName.split(" "),
    /// firstName = splits[0];
    /// return firstName;
    /// }
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>Now when we create a new User, the firstName is populated automatically based on the name:</p>
    /// <code><pre>
    /// var ed = Ext.ModelMgr.create({name: 'Ed Spencer'}, 'User');
    /// console.log(ed.get('firstName')); //logs 'Ed', based on our convert function
    /// </code></pre>
    /// <p>In fact, if we log out all of the data inside ed, we'll see this:</p>
    /// <code><pre>
    /// console.log(ed.data);
    /// //outputs this:
    /// {
    /// age: 0,
    /// email: "",
    /// firstName: "Ed",
    /// gender: "Unknown",
    /// name: "Ed Spencer"
    /// }
    /// </code></pre>
    /// <p>The age field has been given a default of zero because we made it an int type. As an auto field, email has
    /// defaulted to an empty string. When we registered the User model we set gender's {@link #defaultValue} to 'Unknown'
    /// so we see that now. Let's correct that and satisfy ourselves that the types work as we expect:</p>
    /// <code><pre>
    /// ed.set('gender', 'Male');
    /// ed.get('gender'); //returns 'Male'
    /// ed.set('age', 25.4);
    /// ed.get('age'); //returns 25 - we wanted an int, not a float, so no decimal places allowed
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Field
    {
        public Field(){}
        public Field(Ext.data.FieldConfig config){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.Field
        /// @extends Object
        /// <p>Fields are used to define what a Model is. They aren't instantiated directly - instead, {@link Ext#regModel}
        /// creates a Field instance for each field configured in a {@link Ext.data.Model Model}. For example, we might set up a
        /// model like this:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: [
        /// 'name', 'email',
        /// {name: 'age', type: 'int'},
        /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
        /// ]
        /// });
        /// </code></pre>
        /// <p>Four fields will have been created for the User Model - name, email, age and gender. Note that we specified a
        /// couple of different formats here; if we only pass in the string name of the field (as with name and email), the
        /// field is set up with the 'auto' type. It's as if we'd done this instead:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: [
        /// {name: 'name', type: 'auto'},
        /// {name: 'email', type: 'auto'},
        /// {name: 'age', type: 'int'},
        /// {name: 'gender', type: 'string', defaultValue: 'Unknown'}
        /// ]
        /// });
        /// </code></pre>
        /// <p><u>Types and conversion</u></p>
        /// <p>The {@link #type} is important - it's used to automatically convert data passed to the field into the correct
        /// format. In our example above, the name and email fields used the 'auto' type and will just accept anything that is
        /// passed into them. The 'age' field had an 'int' type however, so if we passed 25.4 this would be rounded to 25.</p>
        /// <p>Sometimes a simple type isn't enough, or we want to perform some processing when we load a Field's data. We can
        /// do this using a {@link #convert} function. Here, we're going to create a new field based on another:</p>
        /// <code><pre>
        /// Ext.regModel('User', {
        /// fields: [
        /// 'name', 'email',
        /// {name: 'age', type: 'int'},
        /// {name: 'gender', type: 'string', defaultValue: 'Unknown'},
        /// {
        /// name: 'firstName',
        /// convert: function(value, record) {
        /// var fullName  = record.get('name'),
        /// splits    = fullName.split(" "),
        /// firstName = splits[0];
        /// return firstName;
        /// }
        /// }
        /// ]
        /// });
        /// </code></pre>
        /// <p>Now when we create a new User, the firstName is populated automatically based on the name:</p>
        /// <code><pre>
        /// var ed = Ext.ModelMgr.create({name: 'Ed Spencer'}, 'User');
        /// console.log(ed.get('firstName')); //logs 'Ed', based on our convert function
        /// </code></pre>
        /// <p>In fact, if we log out all of the data inside ed, we'll see this:</p>
        /// <code><pre>
        /// console.log(ed.data);
        /// //outputs this:
        /// {
        /// age: 0,
        /// email: "",
        /// firstName: "Ed",
        /// gender: "Unknown",
        /// name: "Ed Spencer"
        /// }
        /// </code></pre>
        /// <p>The age field has been given a default of zero because we made it an int type. As an auto field, email has
        /// defaulted to an empty string. When we registered the User model we set gender's {@link #defaultValue} to 'Unknown'
        /// so we see that now. Let's correct that and satisfy ourselves that the types work as we expect:</p>
        /// <code><pre>
        /// ed.set('gender', 'Male');
        /// ed.get('gender'); //returns 'Male'
        /// ed.set('age', 25.4);
        /// ed.get('age'); //returns 25 - we wanted an int, not a float, so no decimal places allowed
        /// </code></pre>
        /// </summary>
        public Field(object config){}
        /// <summary>
        /// @cfg {Boolean} allowBlank
        /// @private
        /// (Optional) Used for validating a {@link Ext.data.Model model}, defaults to <code>true</code>.
        /// An empty value here will cause {@link Ext.data.Model}.{@link Ext.data.Model#isValid isValid}
        /// to evaluate to <code>false</code>.
        /// </summary>
        public bool allowBlank{get;set;}
        /// <summary>
        /// @cfg {String} dateFormat
        /// <p>(Optional) Used when converting received data into a Date when the {@link #type} is specified as <code>"date"</code>.</p>
        /// <p>A format string for the {@link Date#parseDate Date.parseDate} function, or "timestamp" if the
        /// value provided by the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a
        /// javascript millisecond timestamp. See {@link Date}</p>
        /// </summary>
        public JsString dateFormat{get;set;}
        /// <summary>
        /// @cfg {Mixed} defaultValue
        /// (Optional) The default value used <b>when a Model is being created by a {@link Ext.data.Reader Reader}</b>
        /// when the item referenced by the <code>{@link Ext.data.Field#mapping mapping}</code> does not exist in the data
        /// object (i.e. undefined). (defaults to "")
        /// </summary>
        public object defaultValue{get;set;}
        /// <summary>
        /// @cfg {String/Number} mapping
        /// <p>(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation
        /// that is creating the {@link Ext.data.Model Model} to extract the Field value from the data object.
        /// If the path expression is the same as the field name, the mapping may be omitted.</p>
        /// <p>The form of the mapping expression depends on the Reader being used.</p>
        /// <div class="mdetail-params"><ul>
        /// <li>{@link Ext.data.JsonReader}<div class="sub-desc">The mapping is a string containing the javascript
        /// expression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>
        /// <li>{@link Ext.data.XmlReader}<div class="sub-desc">The mapping is an {@link Ext.DomQuery} path to the data
        /// item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>
        /// <li>{@link Ext.data.ArrayReader}<div class="sub-desc">The mapping is a number indicating the Array index
        /// of the field's value. Defaults to the field specification's Array position.</div></li>
        /// </ul></div>
        /// <p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
        /// function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
        /// return the desired data.</p>
        /// </summary>
        public object mapping{get;set;}
        /// <summary>
        /// @cfg {String} sortDir
        /// (Optional) Initial direction to sort (<code>"ASC"</code> or  <code>"DESC"</code>).  Defaults to
        /// <code>"ASC"</code>.
        /// </summary>
        public JsString sortDir{get;set;}
        /// <summary>
        /// @cfg {Function} sortType
        /// (Optional) A function which converts a Field's value to a comparable value in order to ensure
        /// correct sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom
        /// sort example:<pre><code>
        /// // current sort     after sort we want
        /// // +-+------+          +-+------+
        /// // |1|First |          |1|First |
        /// // |2|Last  |          |3|Second|
        /// // |3|Second|          |2|Last  |
        /// // +-+------+          +-+------+
        /// sortType: function(value) {
        /// switch (value.toLowerCase()) // native toLowerCase():
        /// {
        /// case 'first': return 1;
        /// case 'second': return 2;
        /// default: return 3;
        /// }
        /// }
        /// </code></pre>
        /// </summary>
        public JsAction sortType{get;set;}
        /// <summary>
        /// @cfg {Boolean} useNull
        /// <p>(Optional) Use when converting received data into a Number type (either int or float). If the value cannot be parsed,
        /// null will be used if useNull is true, otherwise the value will be 0. Defaults to <tt>false</tt>
        /// </summary>
        public bool useNull{get;set;}
    }
    #endregion
    #region FieldConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldConfig
    {
        public FieldConfig(){}
        /// <summary>
        /// @private
        /// (Optional) Used for validating a {@link Ext.data.Model model}, defaults to <code>true</code>.
        /// An empty value here will cause {@link Ext.data.Model}.{@link Ext.data.Model#isValid isValid}
        /// to evaluate to <code>false</code>.
        /// </summary>
        public bool allowBlank{get;set;}
        /// <summary>
        /// (Optional) A function which converts the value provided by the Reader into an object that will be stored
        /// in the Model. It is passed the following parameters:<div class="mdetail-params"><ul>
        /// <li><b>v</b> : Mixed<div class="sub-desc">The data value as read by the Reader, if undefined will use
        /// the configured <code>{@link Ext.data.Field#defaultValue defaultValue}</code>.</div></li>
        /// <li><b>rec</b> : Ext.data.Model<div class="sub-desc">The data object containing the Model as read so far by the
        /// Reader. Note that the Model may not be fully populated at this point as the fields are read in the order that
        /// they are defined in your {@link #fields} array.</div></li>
        /// </ul></div>
        /// <pre><code>
        /// // example of convert function
        /// function fullName(v, record){
        /// return record.name.last + ', ' + record.name.first;
        /// }
        /// function location(v, record){
        /// return !record.city ? '' : (record.city + ', ' + record.state);
        /// }
        /// var Dude = Ext.regModel({
        /// fields: [
        /// {name: 'fullname',  convert: fullName},
        /// {name: 'firstname', mapping: 'name.first'},
        /// {name: 'lastname',  mapping: 'name.last'},
        /// {name: 'city', defaultValue: 'homeless'},
        /// 'state',
        /// {name: 'location',  convert: location}
        /// ]
        /// });
        /// // create the data store
        /// var store = new Ext.data.Store({
        /// reader: {
        /// type: 'json',
        /// model: 'Dude',
        /// idProperty: 'key',
        /// root: 'daRoot',
        /// totalProperty: 'total'
        /// }
        /// });
        /// var myData = [
        /// { key: 1,
        /// name: { first: 'Fat',    last:  'Albert' }
        /// // notice no city, state provided in data object
        /// },
        /// { key: 2,
        /// name: { first: 'Barney', last:  'Rubble' },
        /// city: 'Bedrock', state: 'Stoneridge'
        /// },
        /// { key: 3,
        /// name: { first: 'Cliff',  last:  'Claven' },
        /// city: 'Boston',  state: 'MA'
        /// }
        /// ];
        /// </code></pre>
        /// </summary>
        public JsAction convert{get;set;}
        /// <summary>
        /// <p>(Optional) Used when converting received data into a Date when the {@link #type} is specified as <code>"date"</code>.</p>
        /// <p>A format string for the {@link Date#parseDate Date.parseDate} function, or "timestamp" if the
        /// value provided by the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a
        /// javascript millisecond timestamp. See {@link Date}</p>
        /// </summary>
        public JsString dateFormat{get;set;}
        /// <summary>
        /// (Optional) The default value used <b>when a Model is being created by a {@link Ext.data.Reader Reader}</b>
        /// when the item referenced by the <code>{@link Ext.data.Field#mapping mapping}</code> does not exist in the data
        /// object (i.e. undefined). (defaults to "")
        /// </summary>
        public object defaultValue{get;set;}
        /// <summary>
        /// <p>(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation
        /// that is creating the {@link Ext.data.Model Model} to extract the Field value from the data object.
        /// If the path expression is the same as the field name, the mapping may be omitted.</p>
        /// <p>The form of the mapping expression depends on the Reader being used.</p>
        /// <div class="mdetail-params"><ul>
        /// <li>{@link Ext.data.JsonReader}<div class="sub-desc">The mapping is a string containing the javascript
        /// expression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>
        /// <li>{@link Ext.data.XmlReader}<div class="sub-desc">The mapping is an {@link Ext.DomQuery} path to the data
        /// item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>
        /// <li>{@link Ext.data.ArrayReader}<div class="sub-desc">The mapping is a number indicating the Array index
        /// of the field's value. Defaults to the field specification's Array position.</div></li>
        /// </ul></div>
        /// <p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
        /// function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
        /// return the desired data.</p>
        /// </summary>
        public object mapping{get;set;}
        /// <summary>
        /// The name by which the field is referenced within the Model. This is referenced by, for example,
        /// the <code>dataIndex</code> property in column definition objects passed to {@link Ext.grid.ColumnModel}.
        /// <p>Note: In the simplest case, if no properties other than <code>name</code> are required, a field
        /// definition may consist of just a String for the field name.</p>
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// (Optional) Initial direction to sort (<code>"ASC"</code> or  <code>"DESC"</code>).  Defaults to
        /// <code>"ASC"</code>.
        /// </summary>
        public JsString sortDir{get;set;}
        /// <summary>
        /// (Optional) A function which converts a Field's value to a comparable value in order to ensure
        /// correct sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom
        /// sort example:<pre><code>
        /// // current sort     after sort we want
        /// // +-+------+          +-+------+
        /// // |1|First |          |1|First |
        /// // |2|Last  |          |3|Second|
        /// // |3|Second|          |2|Last  |
        /// // +-+------+          +-+------+
        /// sortType: function(value) {
        /// switch (value.toLowerCase()) // native toLowerCase():
        /// {
        /// case 'first': return 1;
        /// case 'second': return 2;
        /// default: return 3;
        /// }
        /// }
        /// </code></pre>
        /// </summary>
        public JsAction sortType{get;set;}
        /// <summary>
        /// (Optional) The data type for automatic conversion from received data to the <i>stored</i> value if <code>{@link Ext.data.Field#convert convert}</code>
        /// has not been specified. This may be specified as a string value. Possible values are
        /// <div class="mdetail-params"><ul>
        /// <li>auto (Default, implies no conversion)</li>
        /// <li>string</li>
        /// <li>int</li>
        /// <li>float</li>
        /// <li>boolean</li>
        /// <li>date</li></ul></div>
        /// <p>This may also be specified by referencing a member of the {@link Ext.data.Types} class.</p>
        /// <p>Developers may create their own application-specific data types by defining new members of the
        /// {@link Ext.data.Types} class.</p>
        /// </summary>
        public object type{get;set;}
        /// <summary>
        /// <p>(Optional) Use when converting received data into a Number type (either int or float). If the value cannot be parsed,
        /// null will be used if useNull is true, otherwise the value will be 0. Defaults to <tt>false</tt>
        /// </summary>
        public bool useNull{get;set;}
    }
    #endregion
    #region HasManyAssociation
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.HasManyAssociation
    /// @extends Ext.data.Association
    /// <p>Represents a one-to-many relationship between two models. Usually created indirectly via a model definition:</p>
    /// <pre><code>
    /// Ext.regModel('Product', {
    /// fields: [
    /// {name: 'id',      type: 'int'},
    /// {name: 'user_id', type: 'int'},
    /// {name: 'name',    type: 'string'}
    /// ]
    /// });
    /// Ext.regModel('User', {
    /// fields: [
    /// {name: 'id',   type: 'int'},
    /// {name: 'name', type: 'string'}
    /// ],
    /// hasMany: {model: 'Product', name: 'products'}
    /// });
    /// </pre></code>
    /// *
    /// <p>Above we created Product and User models, and linked them by saying that a User hasMany Products. This gives
    /// us a new function on every User instance, in this case the function is called 'products' because that is the name
    /// we specified in the association configuration above.</p>
    /// <p>This new function returns a specialized {@link Ext.data.Store Store} which is automatically filtered to load
    /// only Products for the given model instance:</p>
    /// <pre><code>
    /// //first, we load up a User with id of 1
    /// var user = Ext.ModelMgr.create({id: 1, name: 'Ed'}, 'User');
    /// //the user.products function was created automatically by the association and returns a {@link Ext.data.Store Store}
    /// //the created store is automatically scoped to the set of Products for the User with id of 1
    /// var products = user.products();
    /// //we still have all of the usual Store functions, for example it's easy to add a Product for this User
    /// products.add({
    /// name: 'Another Product'
    /// });
    /// //saves the changes to the store - this automatically sets the new Product's user_id to 1 before saving
    /// products.sync();
    /// </code></pre>
    /// <p>The new Store is only instantiated the first time you call products() to conserve memory and processing time,
    /// though calling products() a second time returns the same store instance.</p>
    /// <p><u>Custom filtering</u></p>
    /// <p>The Store is automatically furnished with a filter - by default this filter tells the store to only return
    /// records where the associated model's foreign key matches the owner model's primary key. For example, if a User
    /// with ID = 100 hasMany Products, the filter loads only Products with user_id == 100.</p>
    /// <p>Sometimes we want to filter by another field - for example in the case of a Twitter search application we may
    /// have models for Search and Tweet:</p>
    /// <pre><code>
    /// var Search = Ext.regModel('Search', {
    /// fields: [
    /// 'id', 'query'
    /// ],
    /// hasMany: {
    /// model: 'Tweet',
    /// name : 'tweets',
    /// filterProperty: 'query'
    /// }
    /// });
    /// Ext.regModel('Tweet', {
    /// fields: [
    /// 'id', 'text', 'from_user'
    /// ]
    /// });
    /// //returns a Store filtered by the filterProperty
    /// var store = new Search({query: 'Sencha Touch'}).tweets();
    /// </code></pre>
    /// <p>The tweets association above is filtered by the query property by setting the {@link #filterProperty}, and is
    /// equivalent to this:</p>
    /// <pre><code>
    /// var store = new Ext.data.Store({
    /// model: 'Tweet',
    /// filters: [
    /// {
    /// property: 'query',
    /// value   : 'Sencha Touch'
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HasManyAssociation : Association
    {
        public HasManyAssociation(){}
        public HasManyAssociation(HasManyAssociationConfig config){}
        public HasManyAssociation(AssociationConfig config){}
        /// <summary>
        /// @cfg {String} filterProperty Optionally overrides the default filter that is set up on the associated Store. If
        /// this is not set, a filter is automatically created which filters the association based on the configured
        /// {@link #foreignKey}. See intro docs for more details. Defaults to undefined
        /// </summary>
        public HasManyAssociation(object config){}
        /// <summary>
        /// @private
        /// Creates a function that returns an Ext.data.Store which is configured to load a set of data filtered
        /// by the owner model's primary key - e.g. in a hasMany association where Group hasMany Users, this function
        /// returns a Store configured to return the filtered set of a single Group's Users.
        /// @return {Function} The store-generating function
        /// </summary>
        public JsAction createStore(){return null;}
    }
    #endregion
    #region HasManyAssociationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class HasManyAssociationConfig
    {
        public HasManyAssociationConfig(){}
        /// <summary>
        /// The name of the foreign key on the associated model that links it to the owner
        /// model. Defaults to the lowercased name of the owner model plus "_id", e.g. an association with a where a
        /// model called Group hasMany Users would create 'group_id' as the foreign key.
        /// </summary>
        public JsString foreignKey{get;set;}
        /// <summary>
        /// The name of the function to create on the owner model. Required
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// Optional configuration object that will be passed to the generated Store. Defaults to
        /// undefined.
        /// </summary>
        public object storeConfig{get;set;}
    }
    #endregion
    #region JsonPStore
    /// <summary>
    /// @class Ext.data.JsonPStore
    /// @extends Ext.data.Store
    /// @ignore
    /// @private
    /// <p><b>NOTE:</b> This class is in need of migration to the new API.</p>
    /// <p>Small helper class to make creating {@link Ext.data.Store}s from different domain JSON data easier.
    /// A JsonPStore will be automatically configured with a {@link Ext.data.JsonReader} and a {@link Ext.data.ScriptTagProxy ScriptTagProxy}.</p>
    /// <p>A store configuration would be something like:<pre><code>
    /// var store = new Ext.data.JsonPStore({
    /// // store configs
    /// autoDestroy: true,
    /// storeId: 'myStore',
    /// // proxy configs
    /// url: 'get-images.php',
    /// // reader configs
    /// root: 'images',
    /// idProperty: 'name',
    /// fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
    /// });
    /// </code></pre></p>
    /// <p>This store is configured to consume a returned object of the form:<pre><code>
    /// stcCallback({
    /// images: [
    /// {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
    /// {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
    /// ]
    /// })
    /// </code></pre>
    /// <p>Where stcCallback is the callback name passed in the request to the remote domain. See {@link Ext.data.ScriptTagProxy ScriptTagProxy}
    /// for details of how this works.</p>
    /// An object literal of this form could also be used as the {@link #data} config option.</p>
    /// <p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
    /// <b>{@link Ext.data.JsonReader JsonReader}</b> and <b>{@link Ext.data.ScriptTagProxy ScriptTagProxy}</b>.</p>
    /// @constructor
    /// @param {Object} config
    /// @xtype jsonpstore
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonPStore : Store
    {
        public JsonPStore(){}
        public JsonPStore(StoreConfig config){}
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public JsonPStore(object config){}
    }
    #endregion
    #region JsonReader
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.JsonReader
    /// @extends Ext.data.Reader
    /// <p>The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. This usually
    /// happens as a result of loading a Store - for example we might create something like this:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: ['id', 'name', 'email']
    /// });
    /// var store = new Ext.data.Store({
    /// model: 'User',
    /// proxy: {
    /// type: 'ajax',
    /// url : 'users.json',
    /// reader: {
    /// type: 'json'
    /// }
    /// }
    /// });
    /// </code></pre>
    /// <p>The example above creates a 'User' model. Models are explained in the {@link Ext.data.Model Model} docs if you're
    /// not already familiar with them.</p>
    /// <p>We created the simplest type of JSON Reader possible by simply telling our {@link Ext.data.Store Store}'s
    /// {@link Ext.data.Proxy Proxy} that we want a JSON Reader. The Store automatically passes the configured model to the
    /// Store, so it is as if we passed this instead:
    /// <pre><code>
    /// reader: {
    /// type : 'json',
    /// model: 'User'
    /// }
    /// </code></pre>
    /// <p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>
    /// <pre><code>
    /// [
    /// {
    /// "id": 1,
    /// "name": "Ed Spencer",
    /// "email": "ed@sencha.com"
    /// },
    /// {
    /// "id": 2,
    /// "name": "Abe Elias",
    /// "email": "abe@sencha.com"
    /// }
    /// ]
    /// </code></pre>
    /// <p><u>Reading other JSON formats</u></p>
    /// <p>If you already have your JSON format defined and it doesn't look quite like what we have above, you can usually
    /// pass JsonReader a couple of configuration options to make it parse your format. For example, we can use the
    /// {@link #root} configuration to parse data that comes back like this:</p>
    /// <pre><code>
    /// {
    /// "users": [
    /// {
    /// "id": 1,
    /// "name": "Ed Spencer",
    /// "email": "ed@sencha.com"
    /// },
    /// {
    /// "id": 2,
    /// "name": "Abe Elias",
    /// "email": "abe@sencha.com"
    /// }
    /// ]
    /// }
    /// </code></pre>
    /// <p>To parse this we just pass in a {@link #root} configuration that matches the 'users' above:</p>
    /// <pre><code>
    /// reader: {
    /// type: 'json',
    /// root: 'users'
    /// }
    /// </code></pre>
    /// <p>Sometimes the JSON structure is even more complicated. Document databases like CouchDB often provide metadata
    /// around each record inside a nested structure like this:</p>
    /// <pre><code>
    /// {
    /// "total": 122,
    /// "offset": 0,
    /// "users": [
    /// {
    /// "id": "ed-spencer-1",
    /// "value": 1,
    /// "user": {
    /// "id": 1,
    /// "name": "Ed Spencer",
    /// "email": "ed@sencha.com"
    /// }
    /// }
    /// ]
    /// }
    /// </code></pre>
    /// <p>In the case above the record data is nested an additional level inside the "users" array as each "user" item has
    /// additional metadata surrounding it ('id' and 'value' in this case). To parse data out of each "user" item in the
    /// JSON above we need to specify the {@link #record} configuration like this:</p>
    /// <pre><code>
    /// reader: {
    /// type  : 'json',
    /// root  : 'users',
    /// record: 'user'
    /// }
    /// </code></pre>
    /// <p><u>Response metadata</u></p>
    /// <p>The server can return additional data in its response, such as the {@link #totalProperty total number of records}
    /// and the {@link #successProperty success status of the response}. These are typically included in the JSON response
    /// like this:</p>
    /// <pre><code>
    /// {
    /// "total": 100,
    /// "success": true,
    /// "users": [
    /// {
    /// "id": 1,
    /// "name": "Ed Spencer",
    /// "email": "ed@sencha.com"
    /// }
    /// ]
    /// }
    /// </code></pre>
    /// <p>If these properties are present in the JSON response they can be parsed out by the JsonReader and used by the
    /// Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
    /// options:</p>
    /// <pre><code>
    /// reader: {
    /// type : 'json',
    /// root : 'users',
    /// totalProperty  : 'total',
    /// successProperty: 'success'
    /// }
    /// </code></pre>
    /// <p>These final options are not necessary to make the Reader work, but can be useful when the server needs to report
    /// an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
    /// returned.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonReader : Reader
    {
        public JsonReader(JsonReaderConfig config){}
        public JsonReader(ReaderConfig config){}
        public JsonReader(){}
        public void buildExtractors(){}
        /// <summary>
        /// @private
        /// We're just preparing the data for the superclass by pulling out the record objects we want. If a {@link #record}
        /// was specified we have to pull those out of the larger JSON object, which is most of what this function is doing
        /// @param {Object} root The JSON root node
        /// @return {Array} The records
        /// </summary>
        public JsArray extractData(object root, object returnRecords){return null;}
        public new void getResponseData(object response){}
        /// <summary>
        /// Reads a JSON object and returns a ResultSet. Uses the internal getTotal and getSuccess extractors to
        /// retrieve meta data from the response, and extractData to turn the JSON data into model instances.
        /// @param {Object} data The raw JSON data
        /// @return {Ext.data.ResultSet} A ResultSet containing model instances and meta data about the results
        /// </summary>
        public new ResultSet readRecords(object data){return null;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.JsonReader
        /// @extends Ext.data.Reader
        /// <p>The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. This usually
        /// happens as a result of loading a Store - for example we might create something like this:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: ['id', 'name', 'email']
        /// });
        /// var store = new Ext.data.Store({
        /// model: 'User',
        /// proxy: {
        /// type: 'ajax',
        /// url : 'users.json',
        /// reader: {
        /// type: 'json'
        /// }
        /// }
        /// });
        /// </code></pre>
        /// <p>The example above creates a 'User' model. Models are explained in the {@link Ext.data.Model Model} docs if you're
        /// not already familiar with them.</p>
        /// <p>We created the simplest type of JSON Reader possible by simply telling our {@link Ext.data.Store Store}'s
        /// {@link Ext.data.Proxy Proxy} that we want a JSON Reader. The Store automatically passes the configured model to the
        /// Store, so it is as if we passed this instead:
        /// <pre><code>
        /// reader: {
        /// type : 'json',
        /// model: 'User'
        /// }
        /// </code></pre>
        /// <p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>
        /// <pre><code>
        /// [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// },
        /// {
        /// "id": 2,
        /// "name": "Abe Elias",
        /// "email": "abe@sencha.com"
        /// }
        /// ]
        /// </code></pre>
        /// <p><u>Reading other JSON formats</u></p>
        /// <p>If you already have your JSON format defined and it doesn't look quite like what we have above, you can usually
        /// pass JsonReader a couple of configuration options to make it parse your format. For example, we can use the
        /// {@link #root} configuration to parse data that comes back like this:</p>
        /// <pre><code>
        /// {
        /// "users": [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// },
        /// {
        /// "id": 2,
        /// "name": "Abe Elias",
        /// "email": "abe@sencha.com"
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// <p>To parse this we just pass in a {@link #root} configuration that matches the 'users' above:</p>
        /// <pre><code>
        /// reader: {
        /// type: 'json',
        /// root: 'users'
        /// }
        /// </code></pre>
        /// <p>Sometimes the JSON structure is even more complicated. Document databases like CouchDB often provide metadata
        /// around each record inside a nested structure like this:</p>
        /// <pre><code>
        /// {
        /// "total": 122,
        /// "offset": 0,
        /// "users": [
        /// {
        /// "id": "ed-spencer-1",
        /// "value": 1,
        /// "user": {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// }
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// <p>In the case above the record data is nested an additional level inside the "users" array as each "user" item has
        /// additional metadata surrounding it ('id' and 'value' in this case). To parse data out of each "user" item in the
        /// JSON above we need to specify the {@link #record} configuration like this:</p>
        /// <pre><code>
        /// reader: {
        /// type  : 'json',
        /// root  : 'users',
        /// record: 'user'
        /// }
        /// </code></pre>
        /// <p><u>Response metadata</u></p>
        /// <p>The server can return additional data in its response, such as the {@link #totalProperty total number of records}
        /// and the {@link #successProperty success status of the response}. These are typically included in the JSON response
        /// like this:</p>
        /// <pre><code>
        /// {
        /// "total": 100,
        /// "success": true,
        /// "users": [
        /// {
        /// "id": 1,
        /// "name": "Ed Spencer",
        /// "email": "ed@sencha.com"
        /// }
        /// ]
        /// }
        /// </code></pre>
        /// <p>If these properties are present in the JSON response they can be parsed out by the JsonReader and used by the
        /// Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
        /// options:</p>
        /// <pre><code>
        /// reader: {
        /// type : 'json',
        /// root : 'users',
        /// totalProperty  : 'total',
        /// successProperty: 'success'
        /// }
        /// </code></pre>
        /// <p>These final options are not necessary to make the Reader work, but can be useful when the server needs to report
        /// an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
        /// returned.</p>
        /// </summary>
        public new JsString root{get;set;}
    }
    #endregion
    #region JsonReaderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class JsonReaderConfig
    {
        public JsonReaderConfig(){}
        /// <summary>
        /// The optional location within the JSON response that the record data itself can be found at.
        /// See the JsonReader intro docs for more details. This is not often needed and defaults to undefined.
        /// </summary>
        public JsString record{get;set;}
    }
    #endregion
    #region JsonStore
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.JsonStore
    /// @extends Ext.data.Store
    /// @ignore
    /// <p>Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.
    /// A JsonStore will be automatically configured with a {@link Ext.data.JsonReader}.</p>
    /// <p>A store configuration would be something like:</p>
    /// <pre><code>
    /// var store = new Ext.data.JsonStore({
    /// // store configs
    /// autoDestroy: true,
    /// storeId: 'myStore'
    /// proxy: {
    /// type: 'ajax',
    /// url: 'get-images.php',
    /// reader: {
    /// type: 'json',
    /// root: 'images',
    /// idProperty: 'name'
    /// }
    /// },
    /// //alternatively, a {@link Ext.data.Model} name can be given (see {@link Ext.data.Store} for an example)
    /// fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
    /// });
    /// </code></pre>
    /// <p>This store is configured to consume a returned object of the form:<pre><code>
    /// {
    /// images: [
    /// {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
    /// {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
    /// ]
    /// }
    /// </code></pre>
    /// <p>An object literal of this form could also be used as the {@link #data} config option.</p>
    /// @constructor
    /// @param {Object} config
    /// @xtype jsonstore
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonStore : Store
    {
        public JsonStore(){}
        public JsonStore(StoreConfig config){}
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public JsonStore(object config){}
    }
    #endregion
    #region JsonWriter
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.JsonWriter
    /// @extends Ext.data.Writer
    /// <p>Writer that outputs model data in JSON format</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JsonWriter : Writer
    {
        public JsonWriter(JsonWriterConfig config){}
        public JsonWriter(){}
        public void writeRecords(object request, object data){}
        /// <summary>
        /// @cfg {Boolean} encode True to use Ext.encode() on the data before sending. Defaults to <tt>false</tt>.
        /// </summary>
        public bool encode{get;set;}
        /// <summary>
        /// @cfg {String} root The key under which the records in this Writer will be placed. Defaults to 'records'.
        /// Example generated request:
        /// <pre><code>
        /// {'records': [{name: 'my record'}, {name: 'another record'}]}
        /// </code></pre>
        /// </summary>
        public JsString root{get;set;}
    }
    #endregion
    #region JsonWriterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class JsonWriterConfig
    {
        public JsonWriterConfig(){}
        /// <summary>
        /// True to use Ext.encode() on the data before sending. Defaults to <tt>false</tt>.
        /// </summary>
        public bool encode{get;set;}
        /// <summary>
        /// The key under which the records in this Writer will be placed. Defaults to 'records'.
        /// Example generated request:
        /// <pre><code>
        /// {'records': [{name: 'my record'}, {name: 'another record'}]}
        /// </code></pre>
        /// </summary>
        public JsString root{get;set;}
    }
    #endregion
    #region LocalStorageProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.LocalStorageProxy
    /// @extends Ext.data.WebStorageProxy
    /// <p>The LocalStorageProxy uses the new HTML5 localStorage API to save {@link Ext.data.Model Model} data locally on
    /// the client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so
    /// LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.</p>
    /// <p>localStorage is extremely useful for saving user-specific information without needing to build server-side
    /// infrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's
    /// searches locally so they can easily perform a saved search again later. We'd start by creating a Search model:</p>
    /// <pre><code>
    /// Ext.regModel('Search', {
    /// fields: ['id', 'query'],
    /// proxy: {
    /// type: 'localstorage',
    /// id  : 'twitter-Searches'
    /// }
    /// });
    /// </code></pre>
    /// <p>Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we
    /// need to pass to the LocalStorage proxy is an {@link #id}. This is important as it separates the Model data in this
    /// Proxy from all others. The localStorage API puts all data into a single shared namespace, so by setting an id we
    /// enable LocalStorageProxy to manage the saved Search data.</p>
    /// <p>Saving our data into localStorage is easy and would usually be done with a {@link Ext.data.Store Store}:</p>
    /// <pre><code>
    /// //our Store automatically picks up the LocalStorageProxy defined on the Search model
    /// var store = new Ext.data.Store({
    /// model: "Search"
    /// });
    /// //loads any existing Search data from localStorage
    /// store.load();
    /// //now add some Searches
    /// store.add({query: 'Sencha Touch'});
    /// store.add({query: 'Ext JS'});
    /// //finally, save our Search data to localStorage
    /// store.sync();
    /// </code></pre>
    /// <p>The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model
    /// data and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:</p>
    /// <pre><code>
    /// var search = Ext.ModelMgr.create({query: 'Sencha Animator'}, 'Search');
    /// //uses the configured LocalStorageProxy to save the new Search to localStorage
    /// search.save();
    /// </code></pre>
    /// <p><u>Limitations</u></p>
    /// <p>If this proxy is used in a browser where local storage is not supported, the constructor will throw an error.
    /// A local storage proxy requires a unique ID which is used as a key in which all record data are stored in the
    /// local storage object.</p>
    /// <p>It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
    /// but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
    /// throw an error.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class LocalStorageProxy : WebStorageProxy
    {
        public LocalStorageProxy(){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.LocalStorageProxy
        /// @extends Ext.data.WebStorageProxy
        /// <p>The LocalStorageProxy uses the new HTML5 localStorage API to save {@link Ext.data.Model Model} data locally on
        /// the client browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so
        /// LocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.</p>
        /// <p>localStorage is extremely useful for saving user-specific information without needing to build server-side
        /// infrastructure to support it. Let's imagine we're writing a Twitter search application and want to save the user's
        /// searches locally so they can easily perform a saved search again later. We'd start by creating a Search model:</p>
        /// <pre><code>
        /// Ext.regModel('Search', {
        /// fields: ['id', 'query'],
        /// proxy: {
        /// type: 'localstorage',
        /// id  : 'twitter-Searches'
        /// }
        /// });
        /// </code></pre>
        /// <p>Our Search model contains just two fields - id and query - plus a Proxy definition. The only configuration we
        /// need to pass to the LocalStorage proxy is an {@link #id}. This is important as it separates the Model data in this
        /// Proxy from all others. The localStorage API puts all data into a single shared namespace, so by setting an id we
        /// enable LocalStorageProxy to manage the saved Search data.</p>
        /// <p>Saving our data into localStorage is easy and would usually be done with a {@link Ext.data.Store Store}:</p>
        /// <pre><code>
        /// //our Store automatically picks up the LocalStorageProxy defined on the Search model
        /// var store = new Ext.data.Store({
        /// model: "Search"
        /// });
        /// //loads any existing Search data from localStorage
        /// store.load();
        /// //now add some Searches
        /// store.add({query: 'Sencha Touch'});
        /// store.add({query: 'Ext JS'});
        /// //finally, save our Search data to localStorage
        /// store.sync();
        /// </code></pre>
        /// <p>The LocalStorageProxy automatically gives our new Searches an id when we call store.sync(). It encodes the Model
        /// data and places it into localStorage. We can also save directly to localStorage, bypassing the Store altogether:</p>
        /// <pre><code>
        /// var search = Ext.ModelMgr.create({query: 'Sencha Animator'}, 'Search');
        /// //uses the configured LocalStorageProxy to save the new Search to localStorage
        /// search.save();
        /// </code></pre>
        /// <p><u>Limitations</u></p>
        /// <p>If this proxy is used in a browser where local storage is not supported, the constructor will throw an error.
        /// A local storage proxy requires a unique ID which is used as a key in which all record data are stored in the
        /// local storage object.</p>
        /// <p>It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
        /// but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
        /// throw an error.</p>
        /// </summary>
        public new void getStorageObject(){}
    }
    #endregion
    #region MemoryProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.MemoryProxy
    /// @extends Ext.data.ClientProxy
    /// <p>In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on
    /// every page refresh.</p>
    /// <p>Usually this Proxy isn't used directly, serving instead as a helper to a {@link Ext.data.Store Store} where a
    /// reader is required to load data. For example, say we have a Store for a User model and have some inline data we want
    /// to load, but this data isn't in quite the right format: we can use a MemoryProxy with a JsonReader to read it into
    /// our Store:</p>
    /// <pre><code>
    /// //this is the model we will be using in the store
    /// Ext.regModel('User', {
    /// fields: [
    /// {name: 'id',    type: 'int'},
    /// {name: 'name',  type: 'string'},
    /// {name: 'phone', type: 'string', mapping: 'phoneNumber'}
    /// ]
    /// });
    /// //this data does not line up to our model fields - the phone field is called phoneNumber
    /// var data = {
    /// users: [
    /// {
    /// id: 1,
    /// name: 'Ed Spencer',
    /// phoneNumber: '555 1234'
    /// },
    /// {
    /// id: 2,
    /// name: 'Abe Elias',
    /// phoneNumber: '666 1234'
    /// }
    /// ]
    /// };
    /// //note how we set the 'root' in the reader to match the data structure above
    /// var store = new Ext.data.Store({
    /// autoLoad: true,
    /// model: 'User',
    /// data : data,
    /// proxy: {
    /// type: 'memory',
    /// reader: {
    /// type: 'json',
    /// root: 'users'
    /// }
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class MemoryProxy : ClientProxy
    {
        public MemoryProxy(){}
        /// <summary>
        /// @cfg {Array} data Optional array of Records to load into the Proxy
        /// </summary>
        public MemoryProxy(object config){}
        /// <summary>
        /// Reads data from the configured {@link #data} object. Uses the Proxy's {@link #reader}, if present
        /// @param {Ext.data.Operation} operation The read Operation
        /// @param {Function} callback The callback to call when reading has completed
        /// @param {Object} scope The scope to call the callback function in
        /// </summary>
        public void read(Operation operation, JsAction callback, object scope){}
    }
    #endregion
    #region Model
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Model
    /// @extends Ext.util.Stateful
    /// <p>A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
    /// Cars, or any other real-world object that we want to model in the system. Models are registered via the {@link Ext.ModelMgr model manager},
    /// and are used by {@link Ext.data.Store stores}, which are in turn used by many of the data-bound components in Ext.</p>
    /// <p>Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: [
    /// {name: 'name',  type: 'string'},
    /// {name: 'age',   type: 'int'},
    /// {name: 'phone', type: 'string'},
    /// {name: 'alive', type: 'boolean', defaultValue: true}
    /// ],
    /// changeName: function() {
    /// var oldName = this.get('name'),
    /// newName = oldName + " The Barbarian";
    /// this.set('name', newName);
    /// }
    /// });
    /// </code></pre>
    /// *
    /// * <p>The fields array is turned into a {@link Ext.util.MixedCollection MixedCollection} automatically by the {@link Ext.ModelMgr ModelMgr}, and all
    /// * other functions and properties are copied to the new Model's prototype.</p>
    /// *
    /// * <p>Now we can create instances of our User model and call any model logic we defined:</p>
    /// *
    /// <pre><code>
    /// var user = Ext.ModelMgr.create({
    /// name : 'Conan',
    /// age  : 24,
    /// phone: '555-555-5555'
    /// }, 'User');
    /// user.changeName();
    /// user.get('name'); //returns "Conan The Barbarian"
    /// </code></pre>
    /// <p><u>Validations</u></p>
    /// <p>Models have built-in support for validations, which are executed against the validator functions in
    /// {@link Ext.data.validations} ({@link Ext.data.validations see all validation functions}). Validations are easy to add to models:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: [
    /// {name: 'name',     type: 'string'},
    /// {name: 'age',      type: 'int'},
    /// {name: 'phone',    type: 'string'},
    /// {name: 'gender',   type: 'string'},
    /// {name: 'username', type: 'string'},
    /// {name: 'alive',    type: 'boolean', defaultValue: true}
    /// ],
    /// validations: [
    /// {type: 'presence',  field: 'age'},
    /// {type: 'length',    field: 'name',     min: 2},
    /// {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
    /// {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
    /// {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
    /// ]
    /// });
    /// </code></pre>
    /// <p>The validations can be run by simply calling the {@link #validate} function, which returns a {@link Ext.data.Errors}
    /// object:</p>
    /// <pre><code>
    /// var instance = Ext.ModelMgr.create({
    /// name: 'Ed',
    /// gender: 'Male',
    /// username: 'edspencer'
    /// }, 'User');
    /// var errors = instance.validate();
    /// </code></pre>
    /// <p><u>Associations</u></p>
    /// <p>Models can have associations with other Models via {@link Ext.data.BelongsToAssociation belongsTo} and
    /// {@link Ext.data.HasManyAssociation hasMany} associations. For example, let's say we're writing a blog administration
    /// application which deals with Users, Posts and Comments. We can express the relationships between these models like this:</p>
    /// <pre><code>
    /// Ext.regModel('Post', {
    /// fields: ['id', 'user_id'],
    /// belongsTo: 'User',
    /// hasMany  : {model: 'Comment', name: 'comments'}
    /// });
    /// Ext.regModel('Comment', {
    /// fields: ['id', 'user_id', 'post_id'],
    /// belongsTo: 'Post'
    /// });
    /// Ext.regModel('User', {
    /// fields: ['id'],
    /// hasMany: [
    /// 'Post',
    /// {model: 'Comment', name: 'comments'}
    /// ]
    /// });
    /// </code></pre>
    /// <p>See the docs for {@link Ext.data.BelongsToAssociation} and {@link Ext.data.HasManyAssociation} for details on the usage
    /// and configuration of associations. Note that associations can also be specified like this:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: ['id'],
    /// associations: [
    /// {type: 'hasMany', model: 'Post',    name: 'posts'},
    /// {type: 'hasMany', model: 'Comment', name: 'comments'}
    /// ]
    /// });
    /// </code></pre>
    /// <p><u>Using a Proxy</u></p>
    /// <p>Models are great for representing types of data and relationships, but sooner or later we're going to want to
    /// load or save that data somewhere. All loading and saving of data is handled via a {@link Ext.data.Proxy Proxy},
    /// which can be set directly on the Model:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: ['id', 'name', 'email'],
    /// proxy: {
    /// type: 'rest',
    /// url : '/users'
    /// }
    /// });
    /// </code></pre>
    /// <p>Here we've set up a {@link Ext.data.RestProxy Rest Proxy}, which knows how to load and save data to and from a
    /// RESTful backend. Let's see how this works:</p>
    /// <pre><code>
    /// var user = Ext.ModelMgr.create({name: 'Ed Spencer', email: 'ed@sencha.com'}, 'User');
    /// user.save(); //POST /users
    /// </code></pre>
    /// <p>Calling {@link #save} on the new Model instance tells the configured RestProxy that we wish to persist this
    /// Model's data onto our server. RestProxy figures out that this Model hasn't been saved before because it doesn't
    /// have an id, and performs the appropriate action - in this case issuing a POST request to the url we configured
    /// (/users). We configure any Proxy on any Model and always follow this API - see {@link Ext.data.Proxy} for a full
    /// list.</p>
    /// <p>Loading data via the Proxy is equally easy:</p>
    /// <pre><code>
    /// //get a reference to the User model class
    /// var User = Ext.ModelMgr.getModel('User');
    /// //Uses the configured RestProxy to make a GET request to /users/123
    /// User.load(123, {
    /// success: function(user) {
    /// console.log(user.getId()); //logs 123
    /// }
    /// });
    /// </code></pre>
    /// <p>Models can also be updated and destroyed easily:</p>
    /// <pre><code>
    /// //the user Model we loaded in the last snippet:
    /// user.set('name', 'Edward Spencer');
    /// //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
    /// user.save({
    /// success: function() {
    /// console.log('The User was updated');
    /// }
    /// });
    /// //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
    /// user.destroy({
    /// success: function() {
    /// console.log('The User was destroyed!');
    /// }
    /// });
    /// </code></pre>
    /// <p><u>Usage in Stores</u></p>
    /// <p>It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this
    /// by creating a {@link Ext.data.Store Store}:</p>
    /// <pre><code>
    /// var store = new Ext.data.Store({
    /// model: 'User'
    /// });
    /// //uses the Proxy we set up on Model to load the Store data
    /// store.load();
    /// </code></pre>
    /// <p>A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain
    /// a set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the
    /// {@link Ext.data.Store Store docs} for more information on Stores.</p>
    /// @constructor
    /// @param {Object} data An object containing keys corresponding to this model's fields, and their associated values
    /// @param {Number} id Optional unique ID to assign to this model instance
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Model : Stateful
    {
        public Model(){}
        public Model(ModelConfig config){}
        /// <summary>
        /// @private
        /// If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
        /// afterCommit method is called
        /// </summary>
        public void afterCommit(){}
        /// <summary>
        /// @private
        /// If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
        /// afterEdit method is called
        /// </summary>
        public void afterEdit(){}
        /// <summary>
        /// @private
        /// If this Model instance has been {@link #join joined} to a {@link Ext.data.Store store}, the store's
        /// afterReject method is called
        /// </summary>
        public void afterReject(){}
        /// <summary>
        /// @private
        /// Helper function used by afterEdit, afterReject and afterCommit. Calls the given method on the
        /// {@link Ext.data.Store store} that this instance has {@link #join joined}, if any. The store function
        /// will always be called with the model instance as its single argument.
        /// @param {String} fn The function to call on the store
        /// </summary>
        public void callStore(JsString fn){}
        /// <summary>
        /// @cfg {String} idProperty The name of the field treated as this Model's unique id (defaults to 'id').
        /// </summary>
        public Model(object data, object id){}
        /// <summary>
        /// Returns the unique ID allocated to this model instance as defined by {@link #idProperty}
        /// @return {Number} The id
        /// </summary>
        public JsNumber getId(){return null;}
        /// <summary>
        /// Returns the configured Proxy for this Model
        /// @return {Ext.data.Proxy} The proxy
        /// </summary>
        public Proxy getProxy(){return null;}
        /// <summary>
        /// Generates a sequential id. This method is typically called when a record is {@link #create}d
        /// and {@link #Record no id has been specified}. The returned id takes the form:
        /// <tt>&#123;PREFIX}-&#123;AUTO_ID}</tt>.<div class="mdetail-params"><ul>
        /// <li><b><tt>PREFIX</tt></b> : String<p class="sub-desc"><tt>Ext.data.Model.PREFIX</tt>
        /// (defaults to <tt>'ext-record'</tt>)</p></li>
        /// <li><b><tt>AUTO_ID</tt></b> : String<p class="sub-desc"><tt>Ext.data.Model.AUTO_ID</tt>
        /// (defaults to <tt>1</tt> initially)</p></li>
        /// </ul></div>
        /// @param {Record} rec The record being created.  The record does not exist, it's a {@link #phantom}.
        /// @return {String} auto-generated string id, <tt>"ext-record-i++'</tt>;
        /// </summary>
        public static JsString id(object rec){return null;}
        /// <summary>
        /// Tells this model instance that it has been added to a store
        /// @param {Ext.data.Store} store The store that the model has been added to
        /// </summary>
        public void join(Store store){}
        /// <summary>
        /// <b>Static</b>. Asynchronously loads a model instance by id. Sample usage:
        /// <pre><code>
        /// MyApp.User = Ext.regModel('User', {
        /// fields: [
        /// {name: 'id', type: 'int'},
        /// {name: 'name', type: 'string'}
        /// ]
        /// });
        /// MyApp.User.load(10, {
        /// scope: this,
        /// failure: function(record, operation) {
        /// //do something if the load failed
        /// },
        /// success: function(record, operation) {
        /// //do something if the load succeeded
        /// },
        /// callback: function(record, operation) {
        /// //do something whether the load succeeded or failed
        /// }
        /// });
        /// </code></pre>
        /// @param {Number} id The id of the model to load
        /// @param {Object} config Optional config object containing success, failure and callback functions, plus optional scope
        /// @member Ext.data.Model
        /// @method load
        /// @static
        /// </summary>
        public static void load(JsNumber id, object config){}
        /// <summary>
        /// Saves the model instance using the configured proxy
        /// @param {Object} options Options to pass to the proxy
        /// @return {Ext.data.Model} The Model instance
        /// </summary>
        public Model save(object options){return null;}
        /// <summary>
        /// Sets the model instance's id field to the given id
        /// @param {Number} id The new id
        /// </summary>
        public void setId(JsNumber id){}
        /// <summary>
        /// Sets the Proxy to use for this model. Accepts any options that can be accepted by {@link Ext.data.ProxyMgr#create}
        /// @param {String/Object/Ext.data.Proxy} proxy The proxy
        /// </summary>
        public static void setProxy(object proxy){}
        /// <summary>
        /// Tells this model instance that it has been removed from the store
        /// @param {Ext.data.Store} store The store to unjoin
        /// </summary>
        public void unjoin(Store store){}
        /// <summary>
        /// Validates the current data against all of its configured {@link #validations} and returns an
        /// {@link Ext.data.Errors Errors} object
        /// @return {Ext.data.Errors} The errors object
        /// </summary>
        public Errors validate(){return null;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.Model
        /// @extends Ext.util.Stateful
        /// <p>A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
        /// Cars, or any other real-world object that we want to model in the system. Models are registered via the {@link Ext.ModelMgr model manager},
        /// and are used by {@link Ext.data.Store stores}, which are in turn used by many of the data-bound components in Ext.</p>
        /// <p>Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: [
        /// {name: 'name',  type: 'string'},
        /// {name: 'age',   type: 'int'},
        /// {name: 'phone', type: 'string'},
        /// {name: 'alive', type: 'boolean', defaultValue: true}
        /// ],
        /// changeName: function() {
        /// var oldName = this.get('name'),
        /// newName = oldName + " The Barbarian";
        /// this.set('name', newName);
        /// }
        /// });
        /// </code></pre>
        /// *
        /// * <p>The fields array is turned into a {@link Ext.util.MixedCollection MixedCollection} automatically by the {@link Ext.ModelMgr ModelMgr}, and all
        /// * other functions and properties are copied to the new Model's prototype.</p>
        /// *
        /// * <p>Now we can create instances of our User model and call any model logic we defined:</p>
        /// *
        /// <pre><code>
        /// var user = Ext.ModelMgr.create({
        /// name : 'Conan',
        /// age  : 24,
        /// phone: '555-555-5555'
        /// }, 'User');
        /// user.changeName();
        /// user.get('name'); //returns "Conan The Barbarian"
        /// </code></pre>
        /// <p><u>Validations</u></p>
        /// <p>Models have built-in support for validations, which are executed against the validator functions in
        /// {@link Ext.data.validations} ({@link Ext.data.validations see all validation functions}). Validations are easy to add to models:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: [
        /// {name: 'name',     type: 'string'},
        /// {name: 'age',      type: 'int'},
        /// {name: 'phone',    type: 'string'},
        /// {name: 'gender',   type: 'string'},
        /// {name: 'username', type: 'string'},
        /// {name: 'alive',    type: 'boolean', defaultValue: true}
        /// ],
        /// validations: [
        /// {type: 'presence',  field: 'age'},
        /// {type: 'length',    field: 'name',     min: 2},
        /// {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
        /// {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
        /// {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
        /// ]
        /// });
        /// </code></pre>
        /// <p>The validations can be run by simply calling the {@link #validate} function, which returns a {@link Ext.data.Errors}
        /// object:</p>
        /// <pre><code>
        /// var instance = Ext.ModelMgr.create({
        /// name: 'Ed',
        /// gender: 'Male',
        /// username: 'edspencer'
        /// }, 'User');
        /// var errors = instance.validate();
        /// </code></pre>
        /// <p><u>Associations</u></p>
        /// <p>Models can have associations with other Models via {@link Ext.data.BelongsToAssociation belongsTo} and
        /// {@link Ext.data.HasManyAssociation hasMany} associations. For example, let's say we're writing a blog administration
        /// application which deals with Users, Posts and Comments. We can express the relationships between these models like this:</p>
        /// <pre><code>
        /// Ext.regModel('Post', {
        /// fields: ['id', 'user_id'],
        /// belongsTo: 'User',
        /// hasMany  : {model: 'Comment', name: 'comments'}
        /// });
        /// Ext.regModel('Comment', {
        /// fields: ['id', 'user_id', 'post_id'],
        /// belongsTo: 'Post'
        /// });
        /// Ext.regModel('User', {
        /// fields: ['id'],
        /// hasMany: [
        /// 'Post',
        /// {model: 'Comment', name: 'comments'}
        /// ]
        /// });
        /// </code></pre>
        /// <p>See the docs for {@link Ext.data.BelongsToAssociation} and {@link Ext.data.HasManyAssociation} for details on the usage
        /// and configuration of associations. Note that associations can also be specified like this:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: ['id'],
        /// associations: [
        /// {type: 'hasMany', model: 'Post',    name: 'posts'},
        /// {type: 'hasMany', model: 'Comment', name: 'comments'}
        /// ]
        /// });
        /// </code></pre>
        /// <p><u>Using a Proxy</u></p>
        /// <p>Models are great for representing types of data and relationships, but sooner or later we're going to want to
        /// load or save that data somewhere. All loading and saving of data is handled via a {@link Ext.data.Proxy Proxy},
        /// which can be set directly on the Model:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: ['id', 'name', 'email'],
        /// proxy: {
        /// type: 'rest',
        /// url : '/users'
        /// }
        /// });
        /// </code></pre>
        /// <p>Here we've set up a {@link Ext.data.RestProxy Rest Proxy}, which knows how to load and save data to and from a
        /// RESTful backend. Let's see how this works:</p>
        /// <pre><code>
        /// var user = Ext.ModelMgr.create({name: 'Ed Spencer', email: 'ed@sencha.com'}, 'User');
        /// user.save(); //POST /users
        /// </code></pre>
        /// <p>Calling {@link #save} on the new Model instance tells the configured RestProxy that we wish to persist this
        /// Model's data onto our server. RestProxy figures out that this Model hasn't been saved before because it doesn't
        /// have an id, and performs the appropriate action - in this case issuing a POST request to the url we configured
        /// (/users). We configure any Proxy on any Model and always follow this API - see {@link Ext.data.Proxy} for a full
        /// list.</p>
        /// <p>Loading data via the Proxy is equally easy:</p>
        /// <pre><code>
        /// //get a reference to the User model class
        /// var User = Ext.ModelMgr.getModel('User');
        /// //Uses the configured RestProxy to make a GET request to /users/123
        /// User.load(123, {
        /// success: function(user) {
        /// console.log(user.getId()); //logs 123
        /// }
        /// });
        /// </code></pre>
        /// <p>Models can also be updated and destroyed easily:</p>
        /// <pre><code>
        /// //the user Model we loaded in the last snippet:
        /// user.set('name', 'Edward Spencer');
        /// //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
        /// user.save({
        /// success: function() {
        /// console.log('The User was updated');
        /// }
        /// });
        /// //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
        /// user.destroy({
        /// success: function() {
        /// console.log('The User was destroyed!');
        /// }
        /// });
        /// </code></pre>
        /// <p><u>Usage in Stores</u></p>
        /// <p>It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this
        /// by creating a {@link Ext.data.Store Store}:</p>
        /// <pre><code>
        /// var store = new Ext.data.Store({
        /// model: 'User'
        /// });
        /// //uses the Proxy we set up on Model to load the Store data
        /// store.load();
        /// </code></pre>
        /// <p>A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain
        /// a set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the
        /// {@link Ext.data.Store Store docs} for more information on Stores.</p>
        /// @constructor
        /// @param {Object} data An object containing keys corresponding to this model's fields, and their associated values
        /// @param {Number} id Optional unique ID to assign to this model instance
        /// </summary>
        public bool evented{get;set;}
        /// <summary>
        /// Returns the unique ID allocated to this model instance as defined by {@link #idProperty}
        /// @return {Number} The id
        /// Sets the model instance's id field to the given id
        /// @param {Number} id The new id
        /// </summary>
        [JsProperty]
        public JsNumber Id{[JsMethod(Name="getId")]get;[JsMethod(Name="setId")]set;}
        /// <summary>
        /// @cfg {String} idProperty The name of the field treated as this Model's unique id (defaults to 'id').
        /// </summary>
        public JsString idProperty{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.Model
        /// @extends Ext.util.Stateful
        /// <p>A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
        /// Cars, or any other real-world object that we want to model in the system. Models are registered via the {@link Ext.ModelMgr model manager},
        /// and are used by {@link Ext.data.Store stores}, which are in turn used by many of the data-bound components in Ext.</p>
        /// <p>Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: [
        /// {name: 'name',  type: 'string'},
        /// {name: 'age',   type: 'int'},
        /// {name: 'phone', type: 'string'},
        /// {name: 'alive', type: 'boolean', defaultValue: true}
        /// ],
        /// changeName: function() {
        /// var oldName = this.get('name'),
        /// newName = oldName + " The Barbarian";
        /// this.set('name', newName);
        /// }
        /// });
        /// </code></pre>
        /// *
        /// * <p>The fields array is turned into a {@link Ext.util.MixedCollection MixedCollection} automatically by the {@link Ext.ModelMgr ModelMgr}, and all
        /// * other functions and properties are copied to the new Model's prototype.</p>
        /// *
        /// * <p>Now we can create instances of our User model and call any model logic we defined:</p>
        /// *
        /// <pre><code>
        /// var user = Ext.ModelMgr.create({
        /// name : 'Conan',
        /// age  : 24,
        /// phone: '555-555-5555'
        /// }, 'User');
        /// user.changeName();
        /// user.get('name'); //returns "Conan The Barbarian"
        /// </code></pre>
        /// <p><u>Validations</u></p>
        /// <p>Models have built-in support for validations, which are executed against the validator functions in
        /// {@link Ext.data.validations} ({@link Ext.data.validations see all validation functions}). Validations are easy to add to models:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: [
        /// {name: 'name',     type: 'string'},
        /// {name: 'age',      type: 'int'},
        /// {name: 'phone',    type: 'string'},
        /// {name: 'gender',   type: 'string'},
        /// {name: 'username', type: 'string'},
        /// {name: 'alive',    type: 'boolean', defaultValue: true}
        /// ],
        /// validations: [
        /// {type: 'presence',  field: 'age'},
        /// {type: 'length',    field: 'name',     min: 2},
        /// {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
        /// {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
        /// {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
        /// ]
        /// });
        /// </code></pre>
        /// <p>The validations can be run by simply calling the {@link #validate} function, which returns a {@link Ext.data.Errors}
        /// object:</p>
        /// <pre><code>
        /// var instance = Ext.ModelMgr.create({
        /// name: 'Ed',
        /// gender: 'Male',
        /// username: 'edspencer'
        /// }, 'User');
        /// var errors = instance.validate();
        /// </code></pre>
        /// <p><u>Associations</u></p>
        /// <p>Models can have associations with other Models via {@link Ext.data.BelongsToAssociation belongsTo} and
        /// {@link Ext.data.HasManyAssociation hasMany} associations. For example, let's say we're writing a blog administration
        /// application which deals with Users, Posts and Comments. We can express the relationships between these models like this:</p>
        /// <pre><code>
        /// Ext.regModel('Post', {
        /// fields: ['id', 'user_id'],
        /// belongsTo: 'User',
        /// hasMany  : {model: 'Comment', name: 'comments'}
        /// });
        /// Ext.regModel('Comment', {
        /// fields: ['id', 'user_id', 'post_id'],
        /// belongsTo: 'Post'
        /// });
        /// Ext.regModel('User', {
        /// fields: ['id'],
        /// hasMany: [
        /// 'Post',
        /// {model: 'Comment', name: 'comments'}
        /// ]
        /// });
        /// </code></pre>
        /// <p>See the docs for {@link Ext.data.BelongsToAssociation} and {@link Ext.data.HasManyAssociation} for details on the usage
        /// and configuration of associations. Note that associations can also be specified like this:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: ['id'],
        /// associations: [
        /// {type: 'hasMany', model: 'Post',    name: 'posts'},
        /// {type: 'hasMany', model: 'Comment', name: 'comments'}
        /// ]
        /// });
        /// </code></pre>
        /// <p><u>Using a Proxy</u></p>
        /// <p>Models are great for representing types of data and relationships, but sooner or later we're going to want to
        /// load or save that data somewhere. All loading and saving of data is handled via a {@link Ext.data.Proxy Proxy},
        /// which can be set directly on the Model:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: ['id', 'name', 'email'],
        /// proxy: {
        /// type: 'rest',
        /// url : '/users'
        /// }
        /// });
        /// </code></pre>
        /// <p>Here we've set up a {@link Ext.data.RestProxy Rest Proxy}, which knows how to load and save data to and from a
        /// RESTful backend. Let's see how this works:</p>
        /// <pre><code>
        /// var user = Ext.ModelMgr.create({name: 'Ed Spencer', email: 'ed@sencha.com'}, 'User');
        /// user.save(); //POST /users
        /// </code></pre>
        /// <p>Calling {@link #save} on the new Model instance tells the configured RestProxy that we wish to persist this
        /// Model's data onto our server. RestProxy figures out that this Model hasn't been saved before because it doesn't
        /// have an id, and performs the appropriate action - in this case issuing a POST request to the url we configured
        /// (/users). We configure any Proxy on any Model and always follow this API - see {@link Ext.data.Proxy} for a full
        /// list.</p>
        /// <p>Loading data via the Proxy is equally easy:</p>
        /// <pre><code>
        /// //get a reference to the User model class
        /// var User = Ext.ModelMgr.getModel('User');
        /// //Uses the configured RestProxy to make a GET request to /users/123
        /// User.load(123, {
        /// success: function(user) {
        /// console.log(user.getId()); //logs 123
        /// }
        /// });
        /// </code></pre>
        /// <p>Models can also be updated and destroyed easily:</p>
        /// <pre><code>
        /// //the user Model we loaded in the last snippet:
        /// user.set('name', 'Edward Spencer');
        /// //tells the Proxy to save the Model. In this case it will perform a PUT request to /users/123 as this Model already has an id
        /// user.save({
        /// success: function() {
        /// console.log('The User was updated');
        /// }
        /// });
        /// //tells the Proxy to destroy the Model. Performs a DELETE request to /users/123
        /// user.destroy({
        /// success: function() {
        /// console.log('The User was destroyed!');
        /// }
        /// });
        /// </code></pre>
        /// <p><u>Usage in Stores</u></p>
        /// <p>It is very common to want to load a set of Model instances to be displayed and manipulated in the UI. We do this
        /// by creating a {@link Ext.data.Store Store}:</p>
        /// <pre><code>
        /// var store = new Ext.data.Store({
        /// model: 'User'
        /// });
        /// //uses the Proxy we set up on Model to load the Store data
        /// store.load();
        /// </code></pre>
        /// <p>A Store is just a collection of Model instances - usually loaded from a server somewhere. Store can also maintain
        /// a set of added, updated and removed Model instances to be synchronized with the server via the Proxy. See the
        /// {@link Ext.data.Store Store docs} for more information on Stores.</p>
        /// @constructor
        /// @param {Object} data An object containing keys corresponding to this model's fields, and their associated values
        /// @param {Number} id Optional unique ID to assign to this model instance
        /// </summary>
        public bool isModel{get;set;}
        /// <summary>
        /// <tt>true</tt> when the record does not yet exist in a server-side database (see
        /// {@link #setDirty}).  Any record which has a real database pk set as its id property
        /// is NOT a phantom -- it's real.
        /// @property phantom
        /// @type {Boolean}
        /// </summary>
        public bool phantom{get;set;}
        /// <summary>
        /// Returns the configured Proxy for this Model
        /// @return {Ext.data.Proxy} The proxy
        /// Sets the Proxy to use for this model. Accepts any options that can be accepted by {@link Ext.data.ProxyMgr#create}
        /// @param {String/Object/Ext.data.Proxy} proxy The proxy
        /// </summary>
        [JsProperty]
        public Proxy Proxy{[JsMethod(Name="getProxy")]get;[JsMethod(Name="setProxy")]set;}
    }
    #endregion
    #region ModelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ModelConfig
    {
        public ModelConfig(){}
        /// <summary>
        /// The name of the field treated as this Model's unique id (defaults to 'id').
        /// </summary>
        public JsString idProperty{get;set;}
    }
    #endregion
    #region Node
    /// <summary>
    /// @class Ext.data.Node
    /// @extends Ext.util.Observable
    /// @cfg {Boolean} leaf true if this node is a leaf and does not have children
    /// @cfg {String} id The id for this node. If one is not specified, one is generated.
    /// @constructor
    /// @param {Object} attributes The attributes/config for the node
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Node : Observable
    {
        public Node(){}
        public Node(NodeConfig config){}
        /// <summary>
        /// Insert node(s) as the last child node of this node.
        /// @param {Node/Array} node The node or Array of nodes to append
        /// @return {Node} The appended node if single append, or null if an array was passed
        /// </summary>
        public void appendChild(object node){}
        /// <summary>
        /// Bubbles up the tree from this node, calling the specified function with each node. The arguments to the function
        /// will be the args provided or the current node. If the function returns false at any point,
        /// the bubble is stopped.
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
        /// @param {Array} args (optional) The args to call the function with (default to passing the current Node)
        /// </summary>
        public void bubble(JsAction fn, object scope, JsArray args){}
        /// <summary>
        /// Cascades down the tree from this node, calling the specified function with each node. The arguments to the function
        /// will be the args provided or the current node. If the function returns false at any point,
        /// the cascade is stopped on that branch.
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node.
        /// @param {Array} args (optional) The args to call the function with (default to passing the current Node)
        /// </summary>
        public void cascadeBy(JsAction fn, object scope, JsArray args){}
        public void clear(object destroy){}
        /// <summary>
        /// @class Ext.data.Node
        /// @extends Ext.util.Observable
        /// @cfg {Boolean} leaf true if this node is a leaf and does not have children
        /// @cfg {String} id The id for this node. If one is not specified, one is generated.
        /// @constructor
        /// @param {Object} attributes The attributes/config for the node
        /// </summary>
        public Node(object attributes){}
        /// <summary>
        /// Returns true if this node is an ancestor (at any point) of the passed node.
        /// @param {Node} node
        /// @return {Boolean}
        /// </summary>
        public void contains(object node){}
        /// <summary>
        /// Destroys the node.
        /// </summary>
        public void destroy(object silent){}
        /// <summary>
        /// Interates the child nodes of this node, calling the specified function with each node. The arguments to the function
        /// will be the args provided or the current node. If the function returns false at any point,
        /// the iteration stops.
        /// @param {Function} fn The function to call
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the current Node in the iteration.
        /// @param {Array} args (optional) The args to call the function with (default to passing the current Node)
        /// </summary>
        public void eachChild(JsAction fn, object scope, JsArray args){}
        /// <summary>
        /// Finds the first child that has the attribute with the specified value.
        /// @param {String} attribute The attribute name
        /// @param {Mixed} value The value to search for
        /// @param {Boolean} deep (Optional) True to search through nodes deeper than the immediate children
        /// @return {Node} The found child or null if none was found
        /// </summary>
        public void findChild(JsString attribute, object value, bool deep){}
        /// <summary>
        /// Finds the first child by a custom function. The child matches if the function passed returns <code>true</code>.
        /// @param {Function} fn A function which must return <code>true</code> if the passed Node is the required Node.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the Node being tested.
        /// @param {Boolean} deep (Optional) True to search through nodes deeper than the immediate children
        /// @return {Node} The found child or null if none was found
        /// </summary>
        public void findChildBy(JsAction fn, object scope, bool deep){}
        public void fireEvent(object evtName){}
        /// <summary>
        /// Returns the child node at the specified index.
        /// @param {Number} index
        /// @return {Node}
        /// </summary>
        public void getChildAt(JsNumber index){}
        /// <summary>
        /// Returns depth of this node (the root node has a depth of 0)
        /// @return {Number}
        /// </summary>
        public void getDepth(){}
        /// <summary>
        /// Returns the tree this node is in.
        /// @return {Tree}
        /// </summary>
        public void getOwnerTree(){}
        /// <summary>
        /// Returns the path for this node. The path can be used to expand or select this node programmatically.
        /// @param {String} attr (optional) The attr to use for the path (defaults to the node's id)
        /// @return {String} The path
        /// </summary>
        public JsString getPath(JsString attr){return null;}
        /// <summary>
        /// Returns true if this node has one or more child nodes, else false.
        /// @return {Boolean}
        /// </summary>
        public void hasChildNodes(){}
        /// <summary>
        /// Returns the index of a child node
        /// @param {Node} node
        /// @return {Number} The index of the node or -1 if it was not found
        /// </summary>
        public JsNumber indexOf(object child){return null;}
        /// <summary>
        /// Inserts the first node before the second node in this nodes childNodes collection.
        /// @param {Node} node The node to insert
        /// @param {Node} refNode The node to insert before (if null the node is appended)
        /// @return {Node} The inserted node
        /// </summary>
        public void insertBefore(object node, object refNode){}
        /// <summary>
        /// Returns true if the passed node is an ancestor (at any point) of this node.
        /// @param {Node} node
        /// @return {Boolean}
        /// </summary>
        public void isAncestor(object node){}
        /// <summary>
        /// Returns true if this node has one or more child nodes, or if the <tt>expandable</tt>
        /// node attribute is explicitly specified as true (see {@link #attributes}), otherwise returns false.
        /// @return {Boolean}
        /// </summary>
        public void isExpandable(){}
        /// <summary>
        /// Returns true if this node is the first child of its parent
        /// @return {Boolean}
        /// </summary>
        public void isFirst(){}
        /// <summary>
        /// Returns true if this node is the last child of its parent
        /// @return {Boolean}
        /// </summary>
        public void isLast(){}
        /// <summary>
        /// Returns true if this node is a leaf
        /// @return {Boolean}
        /// </summary>
        public void isLeaf(){}
        /// <summary>
        /// Removes this node from its parent
        /// @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
        /// @return {Node} this
        /// </summary>
        public void remove(bool destroy){}
        /// <summary>
        /// Removes all child nodes from this node.
        /// @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
        /// @return {Node} this
        /// </summary>
        public void removeAll(bool destroy){}
        /// <summary>
        /// Removes a child node from this node.
        /// @param {Node} node The node to remove
        /// @param {Boolean} destroy <tt>true</tt> to destroy the node upon removal. Defaults to <tt>false</tt>.
        /// @return {Node} The removed node
        /// </summary>
        public void removeChild(object node, bool destroy){}
        /// <summary>
        /// Replaces one child node in this node with another.
        /// @param {Node} newChild The replacement node
        /// @param {Node} oldChild The node to replace
        /// @return {Node} The replaced node
        /// </summary>
        public void replaceChild(object newChild, object oldChild){}
        public void setFirstChild(object node){}
        /// <summary>
        /// Changes the id of this node.
        /// @param {String} id The new id for the node.
        /// </summary>
        public void setId(JsString id){}
        public void setLastChild(object node){}
        public void setOwnerTree(object tree, object destroy){}
        /// <summary>
        /// Sorts this nodes children using the supplied sort function.
        /// @param {Function} fn A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order.
        /// @param {Object} scope (optional)The scope (<code>this</code> reference) in which the function is executed. Defaults to the browser window.
        /// </summary>
        public void sort(JsAction fn, object scope){}
        public void toString(){}
        [JsProperty]
        public object FirstChild{private get;[JsMethod(Name="setFirstChild")]set;}
        /// <summary>
        /// Changes the id of this node.
        /// @param {String} id The new id for the node.
        /// </summary>
        [JsProperty]
        public JsString Id{private get;[JsMethod(Name="setId")]set;}
        [JsProperty]
        public object LastChild{private get;[JsMethod(Name="setLastChild")]set;}
    }
    #endregion
    #region NodeConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class NodeConfig
    {
        public NodeConfig(){}
        /// <summary>
        /// The id for this node. If one is not specified, one is generated.
        /// @constructor
        /// </summary>
        public JsString id{get;set;}
        /// <summary>
        /// true if this node is a leaf and does not have children
        /// </summary>
        public bool leaf{get;set;}
    }
    #endregion
    #region Operation
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Operation
    /// @extends Object
    /// <p>Represents a single read or write operation performed by a {@link Ext.data.Proxy Proxy}.
    /// Operation objects are used to enable communication between Stores and Proxies. Application
    /// developers should rarely need to interact with Operation objects directly.</p>
    /// <p>Several Operations can be batched together in a {@link Ext.data.Batch batch}.</p>
    /// @constructor
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Operation
    {
        public Operation(){}
        public Operation(OperationConfig config){}
        /// <summary>
        /// Checks whether this operation should cause writing to occur.
        /// @return {Boolean} Whether the operation should cause a write to occur.
        /// </summary>
        public bool allowWrite(){return false;}
        /// <summary>
        /// The error object passed when {@link #setException} was called. This could be any object or primitive.
        /// @property error
        /// @type Mixed
        /// @private
        /// </summary>
        public Operation(object config){}
        /// <summary>
        /// Returns the error string or object that was set using {@link #setException}
        /// @return {Mixed} The error object
        /// </summary>
        public void getError(){}
        /// <summary>
        /// Returns an array of Ext.data.Model instances as set by the Proxy.
        /// @return {Array} Any loaded Records
        /// </summary>
        public JsArray getRecords(){return null;}
        /// <summary>
        /// Returns the ResultSet object (if set by the Proxy). This object will contain the {@link Ext.data.Model model} instances
        /// as well as meta data such as number of instances fetched, number available etc
        /// @return {Ext.data.ResultSet} The ResultSet object
        /// </summary>
        public ResultSet getResultSet(){return null;}
        /// <summary>
        /// Returns true if this Operation encountered an exception (see also {@link #getError})
        /// @return {Boolean} True if there was an exception
        /// </summary>
        public bool hasException(){return false;}
        /// <summary>
        /// Returns true if the Operation has been completed
        /// @return {Boolean} True if the Operation is complete
        /// </summary>
        public bool isComplete(){return false;}
        /// <summary>
        /// Returns true if the Operation has been started but has not yet completed.
        /// @return {Boolean} True if the Operation is currently running
        /// </summary>
        public bool isRunning(){return false;}
        /// <summary>
        /// Returns true if the Operation has been started. Note that the Operation may have started AND completed,
        /// see {@link #isRunning} to test if the Operation is currently running.
        /// @return {Boolean} True if the Operation has started
        /// </summary>
        public bool isStarted(){return false;}
        /// <summary>
        /// @private
        /// </summary>
        public void markCompleted(){}
        /// <summary>
        /// @private
        /// </summary>
        public void markException(){}
        /// <summary>
        /// @private
        /// </summary>
        public void markStarted(){}
        /// <summary>
        /// @private
        /// </summary>
        public void markSuccessful(){}
        /// <summary>
        /// @private
        /// Associates this Operation with a Batch
        /// @param {Ext.data.Batch} batch The batch
        /// </summary>
        public void setBatch(Batch batch){}
        /// <summary>
        /// Marks the Operation as completed
        /// </summary>
        public void setCompleted(){}
        /// <summary>
        /// Marks the Operation as having experienced an exception. Can be supplied with an option error message/object.
        /// @param {Mixed} error Optional error string/object
        /// </summary>
        public void setException(object error){}
        /// <summary>
        /// Marks the Operation as started
        /// </summary>
        public void setStarted(){}
        /// <summary>
        /// Marks the Operation as successful
        /// </summary>
        public void setSuccessful(){}
        /// <summary>
        /// Returns true if the Operation has completed and was successful
        /// @return {Boolean} True if successful
        /// </summary>
        public bool wasSuccessful(){return false;}
        /// <summary>
        /// @private
        /// Associates this Operation with a Batch
        /// @param {Ext.data.Batch} batch The batch
        /// </summary>
        [JsProperty]
        public Batch Batch{private get;[JsMethod(Name="setBatch")]set;}
        /// <summary>
        /// Read-only property tracking the completion status of this Operation. Use {@link #isComplete}.
        /// @property complete
        /// @type Boolean
        /// @private
        /// </summary>
        public bool complete{get;set;}
        /// <summary>
        /// Read-only property tracking the exception status of this Operation. Use {@link #hasException} and see {@link #getError}.
        /// @property exception
        /// @type Boolean
        /// @private
        /// </summary>
        public bool exception{get;set;}
        /// <summary>
        /// Marks the Operation as having experienced an exception. Can be supplied with an option error message/object.
        /// @param {Mixed} error Optional error string/object
        /// </summary>
        [JsProperty]
        public object Exception{private get;[JsMethod(Name="setException")]set;}
        /// <summary>
        /// Returns an array of Ext.data.Model instances as set by the Proxy.
        /// @return {Array} Any loaded Records
        /// </summary>
        [JsProperty]
        public JsArray Records{[JsMethod(Name="getRecords")]get;private set;}
        /// <summary>
        /// Returns the ResultSet object (if set by the Proxy). This object will contain the {@link Ext.data.Model model} instances
        /// as well as meta data such as number of instances fetched, number available etc
        /// @return {Ext.data.ResultSet} The ResultSet object
        /// </summary>
        [JsProperty]
        public ResultSet ResultSet{[JsMethod(Name="getResultSet")]get;private set;}
        /// <summary>
        /// Read-only property tracking the run status of this Operation. Use {@link #isRunning}.
        /// @property running
        /// @type Boolean
        /// @private
        /// </summary>
        public bool running{get;set;}
        /// <summary>
        /// Read-only property tracking the start status of this Operation. Use {@link #isStarted}.
        /// @property started
        /// @type Boolean
        /// @private
        /// </summary>
        public bool started{get;set;}
        /// <summary>
        /// @cfg {Boolean} synchronous True if this Operation is to be executed synchronously (defaults to true). This
        /// property is inspected by a {@link Ext.data.Batch Batch} to see if a series of Operations can be executed in
        /// parallel or not.
        /// </summary>
        public bool synchronous{get;set;}
    }
    #endregion
    #region OperationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class OperationConfig
    {
        public OperationConfig(){}
        /// <summary>
        /// The action being performed by this Operation. Should be one of 'create', 'read', 'update' or 'destroy'
        /// </summary>
        public JsString action{get;set;}
        /// <summary>
        /// The batch that this Operation is a part of (optional)
        /// </summary>
        public Batch batch{get;set;}
        /// <summary>
        /// Optional array of filter objects. Only applies to 'read' actions.
        /// </summary>
        public JsArray filters{get;set;}
        /// <summary>
        /// Optional grouping configuration. Only applies to 'read' actions where grouping is desired.
        /// </summary>
        public object group{get;set;}
        /// <summary>
        /// The number of records to load. Used on 'read' actions when paging is being used.
        /// </summary>
        public JsNumber limit{get;set;}
        /// <summary>
        /// Optional array of sorter objects. Only applies to 'read' actions.
        /// </summary>
        public JsArray sorters{get;set;}
        /// <summary>
        /// The start index (offset), used in paging when running a 'read' action.
        /// </summary>
        public JsNumber start{get;set;}
        /// <summary>
        /// True if this Operation is to be executed synchronously (defaults to true). This
        /// property is inspected by a {@link Ext.data.Batch Batch} to see if a series of Operations can be executed in
        /// parallel or not.
        /// </summary>
        public bool synchronous{get;set;}
    }
    #endregion
    #region PolymorphicAssociation
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.PolymorphicAssociation
    /// @extends Ext.data.Association
    /// @ignore
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class PolymorphicAssociation : Association
    {
        public PolymorphicAssociation(){}
        public PolymorphicAssociation(AssociationConfig config){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.PolymorphicAssociation
        /// @extends Ext.data.Association
        /// @ignore
        /// </summary>
        public PolymorphicAssociation(object config){}
        /// <summary>
        /// @private
        /// Creates the association function that will be injected on the ownerModel. Most of what this is doing
        /// is filtering the dataset down to the appropriate model/id combination, and adding modelDefaults to
        /// any model instances that are created/inserted into the generated store.
        /// @return {Function} The store-generating function
        /// </summary>
        public JsAction createStore(){return null;}
    }
    #endregion
    #region Proxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Proxy
    /// @extends Ext.util.Observable
    /// <p>Proxies are used by {@link Ext.data.Store Stores} to handle the loading and saving of {@link Ext.data.Model Model} data.
    /// Usually developers will not need to create or interact with proxies directly.</p>
    /// <p><u>Types of Proxy</u></p>
    /// <p>There are two main types of Proxy - {@link Ext.data.ClientProxy Client} and {@link Ext.data.ServerProxy Server}. The Client proxies
    /// save their data locally and include the following subclasses:</p>
    /// <ul style="list-style-type: disc; padding-left: 25px">
    /// <li>{@link Ext.data.LocalStorageProxy LocalStorageProxy} - saves its data to localStorage if the browser supports it</li>
    /// <li>{@link Ext.data.SessionStorageProxy SessionStorageProxy} - saves its data to sessionStorage if the browsers supports it</li>
    /// <li>{@link Ext.data.MemoryProxy MemoryProxy} - holds data in memory only, any data is lost when the page is refreshed</li>
    /// </ul>
    /// <p>The Server proxies save their data by sending requests to some remote server. These proxies include:</p>
    /// <ul style="list-style-type: disc; padding-left: 25px">
    /// <li>{@link Ext.data.AjaxProxy AjaxProxy} - sends requests to a server on the same domain</li>
    /// <li>{@link Ext.data.ScriptTagProxy ScriptTagProxy} - uses JSON-P to send requests to a server on a different domain</li>
    /// </ul>
    /// <p>Proxies operate on the principle that all operations performed are either Create, Read, Update or Delete. These four operations
    /// are mapped to the methods {@link #create}, {@link #read}, {@link #update} and {@link #destroy} respectively. Each Proxy subclass
    /// implements these functions.</p>
    /// <p>The CRUD methods each expect an {@link Ext.data.Operation Operation} object as the sole argument. The Operation encapsulates
    /// information about the action the Store wishes to perform, the {@link Ext.data.Model model} instances that are to be modified, etc.
    /// See the {@link Ext.data.Operation Operation} documentation for more details. Each CRUD method also accepts a callback function to be
    /// called asynchronously on completion.</p>
    /// <p>Proxies also support batching of Operations via a {@link Ext.data.Batch batch} object, invoked by the {@link #batch} method.</p>
    /// @constructor
    /// Creates the Proxy
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Proxy : Observable
    {
        public Proxy(){}
        public Proxy(ProxyConfig config){}
        /// <summary>
        /// Performs a batch of {@link Ext.data.Operation Operations}, in the order specified by {@link #batchOrder}. Used internally by
        /// {@link Ext.data.Store}'s {@link Ext.data.Store#sync sync} method. Example usage:
        /// <pre><code>
        /// myProxy.batch({
        /// create : [myModel1, myModel2],
        /// update : [myModel3],
        /// destroy: [myModel4, myModel5]
        /// });
        /// </code></pre>
        /// Where the myModel* above are {@link Ext.data.Model Model} instances - in this case 1 and 2 are new instances and have not been
        /// saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.
        /// @param {Object} operations Object containing the Model instances to act upon, keyed by action name
        /// @param {Object} listeners Optional listeners object passed straight through to the Batch - see {@link Ext.data.Batch}
        /// @return {Ext.data.Batch} The newly created Ext.data.Batch object
        /// </summary>
        public Batch batch(object operations, object listeners){return null;}
        /// <summary>
        /// @cfg {String/Ext.data.Model} model The name of the Model to tie to this Proxy. Can be either the string name of
        /// the Model, or a reference to the Model constructor. Required.
        /// </summary>
        public Proxy(object config){}
        /// <summary>
        /// Returns the model attached to this Proxy
        /// @return {Ext.data.Model} The model
        /// </summary>
        public Model getModel(){return null;}
        /// <summary>
        /// Returns the reader currently attached to this proxy instance
        /// @return {Ext.data.Reader} The Reader instance
        /// </summary>
        public Reader getReader(){return null;}
        /// <summary>
        /// Returns the writer currently attached to this proxy instance
        /// @return {Ext.data.Writer} The Writer instance
        /// </summary>
        public Writer getWriter(){return null;}
        /// <summary>
        /// Sets the model associated with this proxy. This will only usually be called by a Store
        /// @param {String|Ext.data.Model} model The new model. Can be either the model name string,
        /// or a reference to the model's constructor
        /// @param {Boolean} setOnStore Sets the new model on the associated Store, if one is present
        /// </summary>
        public void setModel(object model, bool setOnStore){}
        /// <summary>
        /// Sets the Proxy's Reader by string, config object or Reader instance
        /// @param {String|Object|Ext.data.Reader} reader The new Reader, which can be either a type string, a configuration object
        /// or an Ext.data.Reader instance
        /// @return {Ext.data.Reader} The attached Reader object
        /// </summary>
        public Reader setReader(object reader){return null;}
        /// <summary>
        /// Sets the Proxy's Writer by string, config object or Writer instance
        /// @param {String|Object|Ext.data.Writer} writer The new Writer, which can be either a type string, a configuration object
        /// or an Ext.data.Writer instance
        /// @return {Ext.data.Writer} The attached Writer object
        /// </summary>
        public Writer setWriter(object writer){return null;}
        /// <summary>
        /// @cfg {String} batchOrder
        /// Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this
        /// to set a different order for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'
        /// </summary>
        public JsString batchOrder{get;set;}
        /// <summary>
        /// @cfg {String} defaultReaderType The default registered reader type. Defaults to 'json'
        /// @private
        /// </summary>
        public JsString defaultReaderType{get;set;}
        /// <summary>
        /// @cfg {String} defaultWriterType The default registered writer type. Defaults to 'json'
        /// @private
        /// </summary>
        public JsString defaultWriterType{get;set;}
        /// <summary>
        /// Returns the model attached to this Proxy
        /// @return {Ext.data.Model} The model
        /// </summary>
        [JsProperty]
        public Model Model{[JsMethod(Name="getModel")]get;private set;}
        /// <summary>
        /// Sets the Proxy's Reader by string, config object or Reader instance
        /// @param {String|Object|Ext.data.Reader} reader The new Reader, which can be either a type string, a configuration object
        /// or an Ext.data.Reader instance
        /// @return {Ext.data.Reader} The attached Reader object
        /// Returns the reader currently attached to this proxy instance
        /// @return {Ext.data.Reader} The Reader instance
        /// </summary>
        [JsProperty]
        public object Reader{[JsMethod(Name="getReader")]get;[JsMethod(Name="setReader")]set;}
        /// <summary>
        /// Sets the Proxy's Writer by string, config object or Writer instance
        /// @param {String|Object|Ext.data.Writer} writer The new Writer, which can be either a type string, a configuration object
        /// or an Ext.data.Writer instance
        /// @return {Ext.data.Writer} The attached Writer object
        /// Returns the writer currently attached to this proxy instance
        /// @return {Ext.data.Writer} The Writer instance
        /// </summary>
        [JsProperty]
        public object Writer{[JsMethod(Name="getWriter")]get;[JsMethod(Name="setWriter")]set;}
    }
    #endregion
    #region ProxyConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ProxyConfig
    {
        public ProxyConfig(){}
        /// <summary>
        /// Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this
        /// to set a different order for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'
        /// </summary>
        public JsString batchOrder{get;set;}
        /// <summary>
        /// The default registered reader type. Defaults to 'json'
        /// @private
        /// </summary>
        public JsString defaultReaderType{get;set;}
        /// <summary>
        /// The default registered writer type. Defaults to 'json'
        /// @private
        /// </summary>
        public JsString defaultWriterType{get;set;}
    }
    #endregion
    #region ProxyMgr
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.ProxyMgr
    /// @extends Ext.AbstractManager
    /// @singleton
    /// @ignore
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ProxyMgr
    {
        public ProxyMgr(){}
    }
    #endregion
    #region Reader
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Reader
    /// @extends Object
    /// <p>Readers are used to interpret data to be loaded into a {@link Ext.data.Model Model} instance or a {@link Ext.data.Store Store}
    /// - usually in response to an AJAX request. This is normally handled transparently by passing some configuration to either the
    /// {@link Ext.data.Model Model} or the {@link Ext.data.Store Store} in question - see their documentation for further details.</p>
    /// <p><u>Loading Nested Data</u></p>
    /// <p>Readers have the ability to automatically load deeply-nested data objects based on the {@link Ext.data.Association associations}
    /// configured on each Model. Below is an example demonstrating the flexibility of these associations in a fictional CRM system which
    /// manages a User, their Orders, OrderItems and Products. First we'll define the models:
    /// <pre><code>
    /// Ext.regModel("User", {
    /// fields: [
    /// 'id', 'name'
    /// ],
    /// hasMany: {model: 'Order', name: 'orders'},
    /// proxy: {
    /// type: 'rest',
    /// url : 'users.json',
    /// reader: {
    /// type: 'json',
    /// root: 'users'
    /// }
    /// }
    /// });
    /// Ext.regModel("Order", {
    /// fields: [
    /// 'id', 'total'
    /// ],
    /// hasMany  : {model: 'OrderItem', name: 'orderItems', associationKey: 'order_items'},
    /// belongsTo: 'User'
    /// });
    /// Ext.regModel("OrderItem", {
    /// fields: [
    /// 'id', 'price', 'quantity', 'order_id', 'product_id'
    /// ],
    /// belongsTo: ['Order', {model: 'Product', associationKey: 'product'}]
    /// });
    /// Ext.regModel("Product", {
    /// fields: [
    /// 'id', 'name'
    /// ],
    /// hasMany: 'OrderItem'
    /// });
    /// </code></pre>
    /// <p>This may be a lot to take in - basically a User has many Orders, each of which is composed of several OrderItems. Finally,
    /// each OrderItem has a single Product. This allows us to consume data like this:</p>
    /// <pre><code>
    /// {
    /// "users": [
    /// {
    /// "id": 123,
    /// "name": "Ed",
    /// "orders": [
    /// {
    /// "id": 50,
    /// "total": 100,
    /// "order_items": [
    /// {
    /// "id"      : 20,
    /// "price"   : 40,
    /// "quantity": 2,
    /// "product" : {
    /// "id": 1000,
    /// "name": "MacBook Pro"
    /// }
    /// },
    /// {
    /// "id"      : 21,
    /// "price"   : 20,
    /// "quantity": 3,
    /// "product" : {
    /// "id": 1001,
    /// "name": "iPhone"
    /// }
    /// }
    /// ]
    /// }
    /// ]
    /// }
    /// ]
    /// }
    /// </code></pre>
    /// <p>The JSON response is deeply nested - it returns all Users (in this case just 1 for simplicity's sake), all of the Orders
    /// for each User (again just 1 in this case), all of the OrderItems for each Order (2 order items in this case), and finally
    /// the Product associated with each OrderItem. Now we can read the data and use it as follows:
    /// <pre><code>
    /// var store = new Ext.data.Store({
    /// model: "User"
    /// });
    /// store.load({
    /// callback: function() {
    /// //the user that was loaded
    /// var user = store.first();
    /// console.log("Orders for " + user.get('name') + ":")
    /// //iterate over the Orders for each User
    /// user.orders().each(function(order) {
    /// console.log("Order ID: " + order.getId() + ", which contains items:");
    /// //iterate over the OrderItems for each Order
    /// order.orderItems().each(function(orderItem) {
    /// //we know that the Product data is already loaded, so we can use the synchronous getProduct
    /// //usually, we would use the asynchronous version (see {@link Ext.data.BelongsToAssociation})
    /// var product = orderItem.getProduct();
    /// console.log(orderItem.get('quantity') + ' orders of ' + product.get('name'));
    /// });
    /// });
    /// }
    /// });
    /// </code></pre>
    /// <p>Running the code above results in the following:</p>
    /// <pre><code>
    /// Orders for Ed:
    /// Order ID: 50, which contains items:
    /// 2 orders of MacBook Pro
    /// 3 orders of iPhone
    /// </code></pre>
    /// @constructor
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Reader
    {
        public Reader(){}
        public Reader(ReaderConfig config){}
        /// <summary>
        /// @private
        /// This builds optimized functions for retrieving record data and meta data from an object.
        /// Subclasses may need to implement their own getRoot function.
        /// @param {Boolean} force True to automatically remove existing extractor functions first (defaults to false)
        /// </summary>
        public void buildExtractors(bool force){}
        /// <summary>
        /// @private
        /// </summary>
        public void buildFieldExtractors(){}
        public Reader(object config){}
        /// <summary>
        /// Returns extracted, type-cast rows of data.  Iterates to call #extractValues for each row
        /// @param {Object[]/Object} data-root from server response
        /// @param {Boolean} returnRecords [false] Set true to return instances of Ext.data.Record
        /// @private
        /// </summary>
        public void extractData(object root, bool returnRecords){}
        /// <summary>
        /// @private
        /// Given an object representing a single model instance's data, iterates over the model's fields and
        /// builds an object with the value for each field.
        /// @param {Object} data The data object to convert
        /// @return {Object} Data object suitable for use with a model constructor
        /// </summary>
        public object extractValues(object data){return null;}
        /// <summary>
        /// @private
        /// Used internally by {@link #readAssociated}. Given a data object (which could be json, xml etc) for a specific
        /// record, this should return the relevant part of that data for the given association name. This is only really
        /// needed to support the XML Reader, which has to do a query to get the associated data object
        /// @param {Mixed} data The raw data object
        /// @param {String} associationName The name of the association to get data for (uses associationKey if present)
        /// @return {Mixed} The root
        /// </summary>
        public void getAssociatedDataRoot(object data, JsString associationName){}
        /// <summary>
        /// @private
        /// By default this function just returns what is passed to it. It can be overridden in a subclass
        /// to return something else. See XmlReader for an example.
        /// @param {Object} data The data object
        /// @return {Object} The normalized data object
        /// </summary>
        public object getData(object data){return null;}
        /// <summary>
        /// Takes a raw response object (as passed to this.read) and returns the useful data segment of it. This must be implemented by each subclass
        /// @param {Object} response The responce object
        /// @return {Object} The useful data from the response
        /// </summary>
        public object getResponseData(object response){return null;}
        /// <summary>
        /// @private
        /// This will usually need to be implemented in a subclass. Given a generic data object (the type depends on the type
        /// of data we are reading), this function should return the object as configured by the Reader's 'root' meta data config.
        /// See XmlReader's getRoot implementation for an example. By default the same data object will simply be returned.
        /// @param {Mixed} data The data object
        /// @return {Mixed} The same data object
        /// </summary>
        public void getRoot(object data){}
        /// <summary>
        /// @private
        /// Reconfigures the meta data tied to this Reader
        /// </summary>
        public void onMetaChange(object meta){}
        /// <summary>
        /// Reads the given response object. This method normalizes the different types of response object that may be passed
        /// to it, before handing off the reading of records to the {@link readRecords} function.
        /// @param {Object} response The response object. This may be either an XMLHttpRequest object or a plain JS object
        /// @return {Ext.data.ResultSet} The parsed ResultSet object
        /// </summary>
        public ResultSet read(object response){return null;}
        /// <summary>
        /// @private
        /// Loads a record's associations from the data object. This prepopulates hasMany and belongsTo associations
        /// on the record provided.
        /// @param {Ext.data.Model} record The record to load associations for
        /// @param {Mixed} data The data object
        /// @return {String} Return value description
        /// </summary>
        public JsString readAssociated(Model record, object data){return null;}
        /// <summary>
        /// Abstracts common functionality used by all Reader subclasses. Each subclass is expected to call
        /// this function before running its own logic and returning the Ext.data.ResultSet instance. For most
        /// Readers additional processing should not be needed.
        /// @param {Mixed} data The raw data object
        /// @return {Ext.data.ResultSet} A ResultSet object
        /// </summary>
        public ResultSet readRecords(object data){return null;}
        /// <summary>
        /// Sets a new model for the reader.
        /// @private
        /// @param {Object} model The model to set.
        /// @param {Boolean} setOnProxy True to also set on the Proxy, if one is configured
        /// </summary>
        public void setModel(object model, bool setOnProxy){}
        /// <summary>
        /// @cfg {String} idProperty Name of the property within a row object
        /// that contains a record identifier value.  Defaults to <tt>id</tt>
        /// </summary>
        public JsString idProperty{get;set;}
        /// <summary>
        /// @cfg {Boolean} implicitIncludes True to automatically parse models nested within other models in a response
        /// object. See the Ext.data.Reader intro docs for full explanation. Defaults to true.
        /// </summary>
        public bool implicitIncludes{get;set;}
        /// <summary>
        /// @cfg {String} root <b>Required</b>.  The name of the property
        /// which contains the Array of row objects.  Defaults to <tt>undefined</tt>.
        /// An exception will be thrown if the root property is undefined. The data
        /// packet value for this property should be an empty array to clear the data
        /// or show no data.
        /// </summary>
        public JsString root{get;set;}
        /// <summary>
        /// @cfg {String} successProperty Name of the property from which to
        /// retrieve the success attribute. Defaults to <tt>success</tt>.  See
        /// {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception}
        /// for additional information.
        /// </summary>
        public JsString successProperty{get;set;}
        /// <summary>
        /// @cfg {String} totalProperty Name of the property from which to
        /// retrieve the total number of records in the dataset. This is only needed
        /// if the whole dataset is not passed in one go, but is being paged from
        /// the remote server.  Defaults to <tt>total</tt>.
        /// </summary>
        public JsString totalProperty{get;set;}
    }
    #endregion
    #region ReaderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ReaderConfig
    {
        public ReaderConfig(){}
        /// <summary>
        /// Name of the property within a row object
        /// that contains a record identifier value.  Defaults to <tt>id</tt>
        /// </summary>
        public JsString idProperty{get;set;}
        /// <summary>
        /// True to automatically parse models nested within other models in a response
        /// object. See the Ext.data.Reader intro docs for full explanation. Defaults to true.
        /// </summary>
        public bool implicitIncludes{get;set;}
        /// <summary>
        /// <b>Required</b>.  The name of the property
        /// which contains the Array of row objects.  Defaults to <tt>undefined</tt>.
        /// An exception will be thrown if the root property is undefined. The data
        /// packet value for this property should be an empty array to clear the data
        /// or show no data.
        /// </summary>
        public JsString root{get;set;}
        /// <summary>
        /// Name of the property from which to
        /// retrieve the success attribute. Defaults to <tt>success</tt>.  See
        /// {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception}
        /// for additional information.
        /// </summary>
        public JsString successProperty{get;set;}
        /// <summary>
        /// Name of the property from which to
        /// retrieve the total number of records in the dataset. This is only needed
        /// if the whole dataset is not passed in one go, but is being paged from
        /// the remote server.  Defaults to <tt>total</tt>.
        /// </summary>
        public JsString totalProperty{get;set;}
    }
    #endregion
    #region ReaderMgr
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.ReaderMgr
    /// @extends Ext.AbstractManager
    /// @singleton
    /// @ignore
    /// <p>Maintains the set of all registered {@link Ext.data.Reader Reader} types.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ReaderMgr
    {
        public ReaderMgr(){}
    }
    #endregion
    #region RecordNode
    [JsType(JsMode.Prototype, Export=false)]
    public partial class RecordNode : Node
    {
        public RecordNode(){}
        public RecordNode(NodeConfig config){}
        public RecordNode(object config){}
        public new void destroy(object silent){}
        public void getChildRecords(){}
        public void getRecord(){}
        public void getSubStore(){}
    }
    #endregion
    #region Request
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Request
    /// @extends Object
    /// <p>Simple class that represents a Request that will be made by any {@link Ext.data.ServerProxy} subclass.
    /// All this class does is standardize the representation of a Request as used by any ServerProxy subclass,
    /// it does not contain any actual logic or perform the request itself.</p>
    /// @constructor
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Request
    {
        public Request(){}
        public Request(RequestConfig config){}
        /// <summary>
        /// @cfg {String} url The url to access on this Request
        /// </summary>
        public Request(object config){}
        /// <summary>
        /// @cfg {String} method The HTTP method to use on this Request (defaults to 'GET'). Should be one of 'GET', 'POST', 'PUT' or 'DELETE'
        /// </summary>
        public JsString method{get;set;}
    }
    #endregion
    #region RequestConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class RequestConfig
    {
        public RequestConfig(){}
        /// <summary>
        /// The name of the action this Request represents. Usually one of 'create', 'read', 'update' or 'destroy'
        /// </summary>
        public JsString action{get;set;}
        /// <summary>
        /// The HTTP method to use on this Request (defaults to 'GET'). Should be one of 'GET', 'POST', 'PUT' or 'DELETE'
        /// </summary>
        public JsString method{get;set;}
        /// <summary>
        /// HTTP request params. The Proxy and its Writer have access to and can modify this object.
        /// </summary>
        public object @params{get;set;}
    }
    #endregion
    #region RestProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.RestProxy
    /// @extends Ext.data.AjaxProxy
    /// <p>RestProxy is a specialization of the {@link Ext.data.AjaxProxy AjaxProxy} which simply maps the four actions
    /// (create, read, update and destroy) to RESTful HTTP verbs. For example, let's set up a {@link Ext.data.Model Model}
    /// with an inline RestProxy</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: ['id', 'name', 'email'],
    /// proxy: {
    /// type: 'rest',
    /// url : '/users'
    /// }
    /// });
    /// </code></pre>
    /// <p>Now we can create a new User instance and save it via the RestProxy. Doing this will cause the Proxy to send a
    /// POST request to '/users':
    /// <pre><code>
    /// var user = Ext.ModelMgr.create({name: 'Ed Spencer', email: 'ed@sencha.com'}, 'User');
    /// user.save(); //POST /users
    /// </code></pre>
    /// <p>Let's expand this a little and provide a callback for the {@link Ext.data.Model#save} call to update the Model
    /// once it has been created. We'll assume the creation went successfully and that the server gave this user an ID of
    /// 123:</p>
    /// <pre><code>
    /// user.save({
    /// success: function(user) {
    /// user.set('name', 'Khan Noonien Singh');
    /// user.save(); //PUT /users/123
    /// }
    /// });
    /// </code></pre>
    /// <p>Now that we're no longer creating a new Model instance, the request method is changed to an HTTP PUT, targeting
    /// the relevant url for that user. Now let's delete this user, which will use the DELETE method:</p>
    /// <pre><code>
    /// user.destroy(); //DELETE /users/123
    /// </code></pre>
    /// <p>Finally, when we perform a load of a Model or Store, RestProxy will use the GET method:</p>
    /// <pre><code>
    /// //1. Load via Store
    /// //the Store automatically picks up the Proxy from the User model
    /// var store = new Ext.data.Store({
    /// model: 'User'
    /// });
    /// store.load(); //GET /users
    /// //2. Load directly from the Model
    /// //GET /users/123
    /// Ext.ModelMgr.getModel('User').load(123, {
    /// success: function(user) {
    /// console.log(user.getId()); //outputs 123
    /// }
    /// });
    /// </code></pre>
    /// <p><u>Url generation</u></p>
    /// <p>RestProxy is able to automatically generate the urls above based on two configuration options - {@link #appendId}
    /// and {@link #format}. If appendId is true (it is by default) then RestProxy will automatically append the ID of the
    /// Model instance in question to the configured url, resulting in the '/users/123' that we saw above.</p>
    /// <p>If the request is not for a specific Model instance (e.g. loading a Store), the url is not appended with an id.
    /// RestProxy will automatically insert a '/' before the ID if one is not already present.</p>
    /// <pre><code>
    /// new Ext.data.RestProxy({
    /// url: '/users',
    /// appendId: true //default
    /// });
    /// // Collection url: /users
    /// // Instance url  : /users/123
    /// </code></pre>
    /// <p>RestProxy can also optionally append a format string to the end of any generated url:</p>
    /// <pre><code>
    /// new Ext.data.RestProxy({
    /// url: '/users',
    /// format: 'json'
    /// });
    /// // Collection url: /users.json
    /// // Instance url  : /users/123.json
    /// </code></pre>
    /// <p>If further customization is needed, simply implement the {@link #buildUrl} method and add your custom generated
    /// url onto the {@link Ext.data.Request Request} object that is passed to buildUrl. See
    /// <a href="source/RestProxy.html#method-Ext.data.RestProxy-buildUrl">RestProxy's implementation</a> for an example of
    /// how to achieve this.</p>
    /// <p>Note that RestProxy inherits from {@link Ext.data.AjaxProxy AjaxProxy}, which already injects all of the sorter,
    /// filter, group and paging options into the generated url. See the {@link Ext.data.AjaxProxy AjaxProxy docs} for more
    /// details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class RestProxy : AjaxProxy
    {
        public RestProxy(RestProxyConfig config){}
        public RestProxy(){}
        /// <summary>
        /// Specialized version of buildUrl that incorporates the {@link #appendId} and {@link #format} options into the
        /// generated url. Override this to provide further customizations, but remember to call the superclass buildUrl
        /// so that additional parameters like the cache buster string are appended
        /// </summary>
        public void buildUrl(object request){}
        /// <summary>
        /// @cfg {Boolean} appendId True to automatically append the ID of a Model instance when performing a request based
        /// on that single instance. See RestProxy intro docs for more details. Defaults to true.
        /// </summary>
        public bool appendId{get;set;}
    }
    #endregion
    #region RestProxyConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class RestProxyConfig
    {
        public RestProxyConfig(){}
        /// <summary>
        /// True to automatically append the ID of a Model instance when performing a request based
        /// on that single instance. See RestProxy intro docs for more details. Defaults to true.
        /// </summary>
        public bool appendId{get;set;}
        /// <summary>
        /// Optional data format to send to the server when making any request (e.g. 'json'). See the
        /// RestProxy intro docs for full details. Defaults to undefined.
        /// </summary>
        public JsString format{get;set;}
    }
    #endregion
    #region ResultSet
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.ResultSet
    /// @extends Object
    /// <p>Simple wrapper class that represents a set of records returned by a Proxy.</p>
    /// @constructor
    /// Creates the new ResultSet
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ResultSet
    {
        public ResultSet(){}
        public ResultSet(ResultSetConfig config){}
        /// <summary>
        /// @cfg {Array} records The array of record instances. Required
        /// </summary>
        public ResultSet(object config){}
        /// <summary>
        /// @cfg {Number} count
        /// The number of records in this ResultSet. Note that total may differ from this number
        /// </summary>
        public JsNumber count{get;set;}
        /// <summary>
        /// @cfg {Boolean} loaded
        /// True if the records have already been loaded. This is only meaningful when dealing with
        /// SQL-backed proxies
        /// </summary>
        public bool loaded{get;set;}
        /// <summary>
        /// @cfg {Boolean} success
        /// True if the ResultSet loaded successfully, false if any errors were encountered
        /// </summary>
        public bool success{get;set;}
        /// <summary>
        /// @cfg {Number} total
        /// The total number of records reported by the data source. This ResultSet may form a subset of
        /// those records (see count)
        /// </summary>
        public JsNumber total{get;set;}
    }
    #endregion
    #region ResultSetConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ResultSetConfig
    {
        public ResultSetConfig(){}
        /// <summary>
        /// The number of records in this ResultSet. Note that total may differ from this number
        /// </summary>
        public JsNumber count{get;set;}
        /// <summary>
        /// True if the records have already been loaded. This is only meaningful when dealing with
        /// SQL-backed proxies
        /// </summary>
        public bool loaded{get;set;}
        /// <summary>
        /// True if the ResultSet loaded successfully, false if any errors were encountered
        /// </summary>
        public bool success{get;set;}
        /// <summary>
        /// The total number of records reported by the data source. This ResultSet may form a subset of
        /// those records (see count)
        /// </summary>
        public JsNumber total{get;set;}
    }
    #endregion
    #region ScriptTagProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.ScriptTagProxy
    /// @extends Ext.data.ServerProxy
    /// <p>ScriptTagProxy is useful when you need to load data from a domain other than the one your application is running
    /// on. If your application is running on http://domainA.com it cannot use {@link Ext.data.AjaxProxy Ajax} to load its
    /// data from http://domainB.com because cross-domain ajax requests are prohibited by the browser.</p>
    /// <p>We can get around this using a ScriptTagProxy. ScriptTagProxy injects a &lt;script&gt; tag into the DOM whenever
    /// an AJAX request would usually be made. Let's say we want to load data from http://domainB.com/users - the script tag
    /// that would be injected might look like this:</p>
    /// <pre><code>
    /// &lt;script src="http://domainB.com/users?callback=someCallback"&gt;&lt;/script&gt;
    /// </code></pre>
    /// <p>When we inject the tag above, the browser makes a request to that url and includes the response as if it was any
    /// other type of JavaScript include. By passing a callback in the url above, we're telling domainB's server that we
    /// want to be notified when the result comes in and that it should call our callback function with the data it sends
    /// back. So long as the server formats the response to look like this, everything will work:</p>
    /// <pre><code>
    /// someCallback({
    /// users: [
    /// {
    /// id: 1,
    /// name: "Ed Spencer",
    /// email: "ed@sencha.com"
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>As soon as the script finishes loading, the 'someCallback' function that we passed in the url is called with the
    /// JSON object that the server returned.</p>
    /// <p>ScriptTagProxy takes care of all of this automatically. It formats the url you pass, adding the callback
    /// parameter automatically. It even creates a temporary callback function, waits for it to be called and then puts
    /// the data into the Proxy making it look just like you loaded it through a normal {@link Ext.data.AjaxProxy AjaxProxy}.
    /// Here's how we might set that up:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: ['id', 'name', 'email']
    /// });
    /// var store = new Ext.data.Store({
    /// model: 'User',
    /// proxy: {
    /// type: 'scripttag',
    /// url : 'http://domainB.com/users'
    /// }
    /// });
    /// store.load();
    /// </code></pre>
    /// <p>That's all we need to do - ScriptTagProxy takes care of the rest. In this case the Proxy will have injected a
    /// script tag like this:
    /// <pre><code>
    /// &lt;script src="http://domainB.com/users?callback=stcCallback001" id="stcScript001"&gt;&lt;/script&gt;
    /// </code></pre>
    /// <p><u>Customization</u></p>
    /// <p>Most parts of this script tag can be customized using the {@link #callbackParam}, {@link #callbackPrefix} and
    /// {@link #scriptIdPrefix} configurations. For example:
    /// <pre><code>
    /// var store = new Ext.data.Store({
    /// model: 'User',
    /// proxy: {
    /// type: 'scripttag',
    /// url : 'http://domainB.com/users',
    /// callbackParam: 'theCallbackFunction',
    /// callbackPrefix: 'ABC',
    /// scriptIdPrefix: 'injectedScript'
    /// }
    /// });
    /// store.load();
    /// </code></pre>
    /// <p>Would inject a script tag like this:</p>
    /// <pre><code>
    /// &lt;script src="http://domainB.com/users?theCallbackFunction=ABC001" id="injectedScript001"&gt;&lt;/script&gt;
    /// </code></pre>
    /// <p><u>Implementing on the server side</u></p>
    /// <p>The remote server side needs to be configured to return data in this format. Here are suggestions for how you
    /// might achieve this using Java, PHP and ASP.net:</p>
    /// <p>Java:</p>
    /// <pre><code>
    /// boolean scriptTag = false;
    /// String cb = request.getParameter("callback");
    /// if (cb != null) {
    /// scriptTag = true;
    /// response.setContentType("text/javascript");
    /// } else {
    /// response.setContentType("application/x-json");
    /// }
    /// Writer out = response.getWriter();
    /// if (scriptTag) {
    /// out.write(cb + "(");
    /// }
    /// out.print(dataBlock.toJsonString());
    /// if (scriptTag) {
    /// out.write(");");
    /// }
    /// </code></pre>
    /// <p>PHP:</p>
    /// <pre><code>
    /// $callback = $_REQUEST['callback'];
    /// // Create the output object.
    /// $output = array('a' => 'Apple', 'b' => 'Banana');
    /// //start output
    /// if ($callback) {
    /// header('Content-Type: text/javascript');
    /// echo $callback . '(' . json_encode($output) . ');';
    /// } else {
    /// header('Content-Type: application/x-json');
    /// echo json_encode($output);
    /// }
    /// </code></pre>
    /// <p>ASP.net:</p>
    /// <pre><code>
    /// String jsonString = "{success: true}";
    /// String cb = Request.Params.Get("callback");
    /// String responseString = "";
    /// if (!String.IsNullOrEmpty(cb)) {
    /// responseString = cb + "(" + jsonString + ")";
    /// } else {
    /// responseString = jsonString;
    /// }
    /// Response.Write(responseString);
    /// </code></pre>
    /// *
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ScriptTagProxy : ServerProxy
    {
        public ScriptTagProxy(ScriptTagProxyConfig config){}
        /// <summary>
        /// Aborts the current server request if one is currently running
        /// </summary>
        public void abort(){}
        /// <summary>
        /// Generates a url based on a given Ext.data.Request object. Adds the params and callback function name to the url
        /// @param {Ext.data.Request} request The request object
        /// @return {String} The url
        /// </summary>
        public new JsString buildUrl(Request request){return null;}
        /// <summary>
        /// @cfg {Boolean} autoAppendParams True to automatically append the request's params to the generated url. Defaults to true
        /// </summary>
        public ScriptTagProxy(){}
        /// <summary>
        /// @private
        /// Creates and returns the function that is called when the request has completed. The returned function
        /// should accept a Response object, which contains the response to be read by the configured Reader.
        /// The third argument is the callback that should be called after the request has been completed and the Reader has decoded
        /// the response. This callback will typically be the callback passed by a store, e.g. in proxy.read(operation, theCallback, scope)
        /// theCallback refers to the callback argument received by this function.
        /// See {@link #doRequest} for details.
        /// @param {Ext.data.Request} request The Request object
        /// @param {Ext.data.Operation} operation The Operation being executed
        /// @param {Function} callback The callback function to be called when the request completes. This is usually the callback
        /// passed to doRequest
        /// @param {Object} scope The scope in which to execute the callback function
        /// @return {Function} The callback function
        /// </summary>
        public JsAction createRequestCallback(Request request, Operation operation, JsAction callback, object scope){return null;}
        /// <summary>
        /// @private
        /// Starts a timer with the value of this.timeout - if this fires it means the request took too long so we
        /// cancel the request. If the request was successful this timer is cancelled by this.afterRequest
        /// @param {Ext.data.Request} request The Request to handle
        /// </summary>
        public void createTimeoutHandler(Request request, object operation){}
        public new void destroy(){}
        /// <summary>
        /// @private
        /// Performs the read request to the remote domain. ScriptTagProxy does not actually create an Ajax request,
        /// instead we write out a <script> tag based on the configuration of the internal Ext.data.Request object
        /// @param {Ext.data.Operation} operation The {@link Ext.data.Operation Operation} object to execute
        /// @param {Function} callback A callback function to execute when the Operation has been completed
        /// @param {Object} scope The scope to execute the callback in
        /// </summary>
        public new void doRequest(Operation operation, JsAction callback, object scope){}
        /// <summary>
        /// Encodes an array of records into a string suitable to be appended to the script src url. This is broken
        /// out into its own function so that it can be easily overridden.
        /// @param {Array} records The records array
        /// @return {String} The encoded records string
        /// </summary>
        public JsString encodeRecords(JsArray records){return null;}
        /// <summary>
        /// @private
        /// @return {Boolean} True if there is a current request that hasn't completed yet
        /// </summary>
        public bool isLoading(){return false;}
        /// <summary>
        /// @cfg {Boolean} autoAppendParams True to automatically append the request's params to the generated url. Defaults to true
        /// </summary>
        public bool autoAppendParams{get;set;}
        /// <summary>
        /// @cfg {String} callbackParam (Optional) The name of the parameter to pass to the server which tells
        /// the server the name of the callback function set up by the load call to process the returned data object.
        /// Defaults to "callback".<p>The server-side processing must read this parameter value, and generate
        /// javascript output which calls this named function passing the data object as its only parameter.
        /// </summary>
        public JsString callbackParam{get;set;}
        /// <summary>
        /// @cfg {String} callbackPrefix
        /// The prefix string that is used to create a unique callback function name in the global scope. This can optionally
        /// be modified to give control over how the callback string passed to the remote server is generated. Defaults to 'stcCallback'
        /// </summary>
        public JsString callbackPrefix{get;set;}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.ScriptTagProxy
        /// @extends Ext.data.ServerProxy
        /// <p>ScriptTagProxy is useful when you need to load data from a domain other than the one your application is running
        /// on. If your application is running on http://domainA.com it cannot use {@link Ext.data.AjaxProxy Ajax} to load its
        /// data from http://domainB.com because cross-domain ajax requests are prohibited by the browser.</p>
        /// <p>We can get around this using a ScriptTagProxy. ScriptTagProxy injects a &lt;script&gt; tag into the DOM whenever
        /// an AJAX request would usually be made. Let's say we want to load data from http://domainB.com/users - the script tag
        /// that would be injected might look like this:</p>
        /// <pre><code>
        /// &lt;script src="http://domainB.com/users?callback=someCallback"&gt;&lt;/script&gt;
        /// </code></pre>
        /// <p>When we inject the tag above, the browser makes a request to that url and includes the response as if it was any
        /// other type of JavaScript include. By passing a callback in the url above, we're telling domainB's server that we
        /// want to be notified when the result comes in and that it should call our callback function with the data it sends
        /// back. So long as the server formats the response to look like this, everything will work:</p>
        /// <pre><code>
        /// someCallback({
        /// users: [
        /// {
        /// id: 1,
        /// name: "Ed Spencer",
        /// email: "ed@sencha.com"
        /// }
        /// ]
        /// });
        /// </code></pre>
        /// <p>As soon as the script finishes loading, the 'someCallback' function that we passed in the url is called with the
        /// JSON object that the server returned.</p>
        /// <p>ScriptTagProxy takes care of all of this automatically. It formats the url you pass, adding the callback
        /// parameter automatically. It even creates a temporary callback function, waits for it to be called and then puts
        /// the data into the Proxy making it look just like you loaded it through a normal {@link Ext.data.AjaxProxy AjaxProxy}.
        /// Here's how we might set that up:</p>
        /// <pre><code>
        /// Ext.regModel('User', {
        /// fields: ['id', 'name', 'email']
        /// });
        /// var store = new Ext.data.Store({
        /// model: 'User',
        /// proxy: {
        /// type: 'scripttag',
        /// url : 'http://domainB.com/users'
        /// }
        /// });
        /// store.load();
        /// </code></pre>
        /// <p>That's all we need to do - ScriptTagProxy takes care of the rest. In this case the Proxy will have injected a
        /// script tag like this:
        /// <pre><code>
        /// &lt;script src="http://domainB.com/users?callback=stcCallback001" id="stcScript001"&gt;&lt;/script&gt;
        /// </code></pre>
        /// <p><u>Customization</u></p>
        /// <p>Most parts of this script tag can be customized using the {@link #callbackParam}, {@link #callbackPrefix} and
        /// {@link #scriptIdPrefix} configurations. For example:
        /// <pre><code>
        /// var store = new Ext.data.Store({
        /// model: 'User',
        /// proxy: {
        /// type: 'scripttag',
        /// url : 'http://domainB.com/users',
        /// callbackParam: 'theCallbackFunction',
        /// callbackPrefix: 'ABC',
        /// scriptIdPrefix: 'injectedScript'
        /// }
        /// });
        /// store.load();
        /// </code></pre>
        /// <p>Would inject a script tag like this:</p>
        /// <pre><code>
        /// &lt;script src="http://domainB.com/users?theCallbackFunction=ABC001" id="injectedScript001"&gt;&lt;/script&gt;
        /// </code></pre>
        /// <p><u>Implementing on the server side</u></p>
        /// <p>The remote server side needs to be configured to return data in this format. Here are suggestions for how you
        /// might achieve this using Java, PHP and ASP.net:</p>
        /// <p>Java:</p>
        /// <pre><code>
        /// boolean scriptTag = false;
        /// String cb = request.getParameter("callback");
        /// if (cb != null) {
        /// scriptTag = true;
        /// response.setContentType("text/javascript");
        /// } else {
        /// response.setContentType("application/x-json");
        /// }
        /// Writer out = response.getWriter();
        /// if (scriptTag) {
        /// out.write(cb + "(");
        /// }
        /// out.print(dataBlock.toJsonString());
        /// if (scriptTag) {
        /// out.write(");");
        /// }
        /// </code></pre>
        /// <p>PHP:</p>
        /// <pre><code>
        /// $callback = $_REQUEST['callback'];
        /// // Create the output object.
        /// $output = array('a' => 'Apple', 'b' => 'Banana');
        /// //start output
        /// if ($callback) {
        /// header('Content-Type: text/javascript');
        /// echo $callback . '(' . json_encode($output) . ');';
        /// } else {
        /// header('Content-Type: application/x-json');
        /// echo json_encode($output);
        /// }
        /// </code></pre>
        /// <p>ASP.net:</p>
        /// <pre><code>
        /// String jsonString = "{success: true}";
        /// String cb = Request.Params.Get("callback");
        /// String responseString = "";
        /// if (!String.IsNullOrEmpty(cb)) {
        /// responseString = cb + "(" + jsonString + ")";
        /// } else {
        /// responseString = jsonString;
        /// }
        /// Response.Write(responseString);
        /// </code></pre>
        /// *
        /// </summary>
        public new JsString defaultWriterType{get;set;}
        /// <summary>
        /// @cfg {String} recordParam
        /// The param name to use when passing records to the server (e.g. 'records=someEncodedRecordString').
        /// Defaults to 'records'
        /// </summary>
        public JsString recordParam{get;set;}
        /// <summary>
        /// @cfg {String} scriptIdPrefix
        /// The prefix string that is used to create a unique ID for the injected script tag element (defaults to 'stcScript')
        /// </summary>
        public JsString scriptIdPrefix{get;set;}
    }
    #endregion
    #region ScriptTagProxyConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ScriptTagProxyConfig
    {
        public ScriptTagProxyConfig(){}
        /// <summary>
        /// True to automatically append the request's params to the generated url. Defaults to true
        /// </summary>
        public bool autoAppendParams{get;set;}
        /// <summary>
        /// (Optional) The name of the parameter to pass to the server which tells
        /// the server the name of the callback function set up by the load call to process the returned data object.
        /// Defaults to "callback".<p>The server-side processing must read this parameter value, and generate
        /// javascript output which calls this named function passing the data object as its only parameter.
        /// </summary>
        public JsString callbackParam{get;set;}
        /// <summary>
        /// The prefix string that is used to create a unique callback function name in the global scope. This can optionally
        /// be modified to give control over how the callback string passed to the remote server is generated. Defaults to 'stcCallback'
        /// </summary>
        public JsString callbackPrefix{get;set;}
        /// <summary>
        /// The param name to use when passing records to the server (e.g. 'records=someEncodedRecordString').
        /// Defaults to 'records'
        /// </summary>
        public JsString recordParam{get;set;}
        /// <summary>
        /// The prefix string that is used to create a unique ID for the injected script tag element (defaults to 'stcScript')
        /// </summary>
        public JsString scriptIdPrefix{get;set;}
    }
    #endregion
    #region ServerProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.ServerProxy
    /// @extends Ext.data.Proxy
    /// <p>ServerProxy is a superclass of {@link Ext.data.ScriptTagProxy ScriptTagProxy} and {@link Ext.data.AjaxProxy AjaxProxy},
    /// and would not usually be used directly.</p>
    /// <p>ServerProxy should ideally be named HttpProxy as it is a superclass for all HTTP proxies - for Ext JS 4.x it has been
    /// called ServerProxy to enable any 3.x applications that reference the HttpProxy to continue to work (HttpProxy is now an
    /// alias of AjaxProxy).</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ServerProxy : Proxy
    {
        public ServerProxy(){}
        public ServerProxy(ServerProxyConfig config){}
        /// <summary>
        /// Creates and returns an Ext.data.Request object based on the options passed by the {@link Ext.data.Store Store}
        /// that this Proxy is attached to.
        /// @param {Ext.data.Operation} operation The {@link Ext.data.Operation Operation} object to execute
        /// @return {Ext.data.Request} The request object
        /// </summary>
        public Request buildRequest(Operation operation){return null;}
        /// <summary>
        /// Generates a url based on a given Ext.data.Request object. By default, ServerProxy's buildUrl will
        /// add the cache-buster param to the end of the url. Subclasses may need to perform additional modifications
        /// to the url.
        /// @param {Ext.data.Request} request The request object
        /// @return {String} The url
        /// </summary>
        public JsString buildUrl(Request request){return null;}
        /// <summary>
        /// @ignore
        /// </summary>
        public ServerProxy(object config){}
        public void create(){}
        public void destroy(){}
        /// <summary>
        /// In ServerProxy subclasses, the {@link #create}, {@link #read}, {@link #update} and {@link #destroy} methods all pass
        /// through to doRequest. Each ServerProxy subclass must implement the doRequest method - see {@link Ext.data.ScriptTagProxy}
        /// and {@link Ext.data.AjaxProxy} for examples. This method carries the same signature as each of the methods that delegate to it.
        /// @param {Ext.data.Operation} operation The Ext.data.Operation object
        /// @param {Function} callback The callback function to call when the Operation has completed
        /// @param {Object} scope The scope in which to execute the callback
        /// </summary>
        public void doRequest(Operation operation, JsAction callback, object scope){}
        /// <summary>
        /// Encodes the array of {@link Ext.util.Filter} objects into a string to be sent in the request url. By default,
        /// this simply JSON-encodes the filter data
        /// @param {Array} sorters The array of {@link Ext.util.Filter Filter} objects
        /// @return {String} The encoded filters
        /// </summary>
        public JsString encodeFilters(JsArray filters){return null;}
        /// <summary>
        /// Encodes the grouping object (field and direction) into a string to be sent in the request url. Be default, this
        /// simply JSON-encodes the grouping data
        /// @param {Object} group The group configuration (field and direction)
        /// @return {String} The encoded group string
        /// </summary>
        public JsString encodeGroupers(object group){return null;}
        /// <summary>
        /// Encodes the array of {@link Ext.util.Sorter} objects into a string to be sent in the request url. By default,
        /// this simply JSON-encodes the sorter data
        /// @param {Array} sorters The array of {@link Ext.util.Sorter Sorter} objects
        /// @return {String} The encoded sorters
        /// </summary>
        public JsString encodeSorters(JsArray sorters){return null;}
        /// <summary>
        /// @private
        /// Copy any sorters, filters etc into the params so they can be sent over the wire
        /// </summary>
        public void getParams(object @params, object operation){}
        /// <summary>
        /// Optional callback function which can be used to clean up after a request has been completed.
        /// @param {Ext.data.Request} request The Request object
        /// @param {Boolean} success True if the request was successful
        /// </summary>
        public void onDestroy(){}
        public void read(){}
        public void update(){}
        /// <summary>
        /// @cfg {String} cacheString The name of the cache param added to the url when using noCache (defaults to "_dc")
        /// </summary>
        public JsString cacheString{get;set;}
        /// <summary>
        /// @cfg {String} filterParam The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set
        /// this to undefined if you don't want to send a filter parameter
        /// </summary>
        public JsString filterParam{get;set;}
        /// <summary>
        /// @cfg {String} groupParam The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this
        /// to undefined if you don't want to send a group parameter
        /// </summary>
        public JsString groupParam{get;set;}
        /// <summary>
        /// @cfg {String} limitParam The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this
        /// to undefined if you don't want to send a limit parameter
        /// </summary>
        public JsString limitParam{get;set;}
        /// <summary>
        /// @cfg {Boolean} noCache (optional) Defaults to true. Disable caching by adding a unique parameter
        /// name to the request.
        /// </summary>
        public bool noCache{get;set;}
        /// <summary>
        /// @cfg {String} pageParam The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to
        /// undefined if you don't want to send a page parameter
        /// </summary>
        public JsString pageParam{get;set;}
        /// <summary>
        /// @cfg {String} sortParam The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this
        /// to undefined if you don't want to send a sort parameter
        /// </summary>
        public JsString sortParam{get;set;}
        /// <summary>
        /// @cfg {String} startParam The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this
        /// to undefined if you don't want to send a start parameter
        /// </summary>
        public JsString startParam{get;set;}
        /// <summary>
        /// @cfg {Number} timeout (optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.
        /// </summary>
        public JsNumber timeout{get;set;}
    }
    #endregion
    #region ServerProxyConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ServerProxyConfig
    {
        public ServerProxyConfig(){}
        /// <summary>
        /// The name of the cache param added to the url when using noCache (defaults to "_dc")
        /// </summary>
        public JsString cacheString{get;set;}
        /// <summary>
        /// Extra parameters that will be included on every request. Individual requests with params
        /// of the same name will override these params when they are in conflict.
        /// </summary>
        public object extraParams{get;set;}
        /// <summary>
        /// The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set
        /// this to undefined if you don't want to send a filter parameter
        /// </summary>
        public JsString filterParam{get;set;}
        /// <summary>
        /// The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this
        /// to undefined if you don't want to send a group parameter
        /// </summary>
        public JsString groupParam{get;set;}
        /// <summary>
        /// The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this
        /// to undefined if you don't want to send a limit parameter
        /// </summary>
        public JsString limitParam{get;set;}
        /// <summary>
        /// (optional) Defaults to true. Disable caching by adding a unique parameter
        /// name to the request.
        /// </summary>
        public bool noCache{get;set;}
        /// <summary>
        /// The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to
        /// undefined if you don't want to send a page parameter
        /// </summary>
        public JsString pageParam{get;set;}
        /// <summary>
        /// The Ext.data.Reader to use to decode the server's response. This can
        /// either be a Reader instance, a config object or just a valid Reader type name (e.g. 'json', 'xml').
        /// </summary>
        public object reader{get;set;}
        /// <summary>
        /// The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this
        /// to undefined if you don't want to send a sort parameter
        /// </summary>
        public JsString sortParam{get;set;}
        /// <summary>
        /// The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this
        /// to undefined if you don't want to send a start parameter
        /// </summary>
        public JsString startParam{get;set;}
        /// <summary>
        /// (optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.
        /// </summary>
        public JsNumber timeout{get;set;}
        /// <summary>
        /// The URL from which to request the data object.
        /// </summary>
        public JsString url{get;set;}
        /// <summary>
        /// The Ext.data.Writer to use to encode any request sent to the server.
        /// This can either be a Writer instance, a config object or just a valid Writer type name (e.g. 'json', 'xml').
        /// </summary>
        public object writer{get;set;}
    }
    #endregion
    #region SessionStorageProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.SessionStorageProxy
    /// @extends Ext.data.WebStorageProxy
    /// <p>Proxy which uses HTML5 session storage as its data storage/retrieval mechanism.
    /// If this proxy is used in a browser where session storage is not supported, the constructor will throw an error.
    /// A session storage proxy requires a unique ID which is used as a key in which all record data are stored in the
    /// session storage object.</p>
    /// <p>It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
    /// but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
    /// throw an error.</p>
    /// <p>Proxies are almost always used with a {@link Ext.data.Store store}:<p>
    /// <pre><code>
    /// new Ext.data.Store({
    /// proxy: {
    /// type: 'sessionstorage',
    /// id  : 'myProxyKey'
    /// }
    /// });
    /// </code></pre>
    /// <p>Alternatively you can instantiate the Proxy directly:</p>
    /// <pre><code>
    /// new Ext.data.SessionStorageProxy({
    /// id  : 'myOtherProxyKey'
    /// });
    /// </code></pre>
    /// <p>Note that session storage is different to local storage (see {@link Ext.data.LocalStorageProxy}) - if a browser
    /// session is ended (e.g. by closing the browser) then all data in a SessionStorageProxy are lost. Browser restarts
    /// don't affect the {@link Ext.data.LocalStorageProxy} - the data are preserved.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SessionStorageProxy : WebStorageProxy
    {
        public SessionStorageProxy(){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.SessionStorageProxy
        /// @extends Ext.data.WebStorageProxy
        /// <p>Proxy which uses HTML5 session storage as its data storage/retrieval mechanism.
        /// If this proxy is used in a browser where session storage is not supported, the constructor will throw an error.
        /// A session storage proxy requires a unique ID which is used as a key in which all record data are stored in the
        /// session storage object.</p>
        /// <p>It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
        /// but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
        /// throw an error.</p>
        /// <p>Proxies are almost always used with a {@link Ext.data.Store store}:<p>
        /// <pre><code>
        /// new Ext.data.Store({
        /// proxy: {
        /// type: 'sessionstorage',
        /// id  : 'myProxyKey'
        /// }
        /// });
        /// </code></pre>
        /// <p>Alternatively you can instantiate the Proxy directly:</p>
        /// <pre><code>
        /// new Ext.data.SessionStorageProxy({
        /// id  : 'myOtherProxyKey'
        /// });
        /// </code></pre>
        /// <p>Note that session storage is different to local storage (see {@link Ext.data.LocalStorageProxy}) - if a browser
        /// session is ended (e.g. by closing the browser) then all data in a SessionStorageProxy are lost. Browser restarts
        /// don't affect the {@link Ext.data.LocalStorageProxy} - the data are preserved.</p>
        /// </summary>
        public new void getStorageObject(){}
    }
    #endregion
    #region SortTypes
    [JsType(JsMode.Prototype, Export=false)]
    public partial class SortTypes
    {
        public SortTypes(){}
        /// <summary>
        /// Date sorting
        /// @param {Mixed} s The value being converted
        /// @return {Number} The comparison value
        /// </summary>
        public static JsNumber asDate(object s){return null;}
        /// <summary>
        /// Float sorting
        /// @param {Mixed} s The value being converted
        /// @return {Float} The comparison value
        /// </summary>
        public static void asFloat(object s){}
        /// <summary>
        /// Integer sorting
        /// @param {Mixed} s The value being converted
        /// @return {Number} The comparison value
        /// </summary>
        public static JsNumber asInt(object s){return null;}
        /// <summary>
        /// Strips all HTML tags to sort on text only
        /// @param {Mixed} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public static JsString asText(object s){return null;}
        /// <summary>
        /// Case insensitive string
        /// @param {Mixed} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public static JsString asUCString(object s){return null;}
        /// <summary>
        /// Strips all HTML tags to sort on text only - Case insensitive
        /// @param {Mixed} s The value being converted
        /// @return {String} The comparison value
        /// </summary>
        public static JsString asUCText(object s){return null;}
        /// <summary>
        /// Default sort that does nothing
        /// @param {Mixed} s The value being converted
        /// @return {Mixed} The comparison value
        /// </summary>
        public static void none(object s){}
        /// <summary>
        /// The regular expression used to strip tags
        /// @type {RegExp}
        /// @property
        /// </summary>
        public JsRegExp stripTagsRE{get;set;}
    }
    #endregion
    #region Store
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Store
    /// @extends Ext.data.AbstractStore
    /// *
    /// <p>The Store class encapsulates a client side cache of {@link Ext.data.Model Model} objects. Stores load
    /// data via a {@link Ext.data.Proxy Proxy}, and also provide functions for {@link #sort sorting},
    /// {@link #filter filtering} and querying the {@link Ext.data.Model model} instances contained within it.</p>
    /// *
    /// <p>Creating a Store is easy - we just tell it the Model and the Proxy to use to load and save its data:</p>
    /// *
    /// <pre><code>
    /// // Set up a {@link Ext.data.Model model} to use in our Store
    /// Ext.regModel('User', {
    /// fields: [
    /// {name: 'firstName', type: 'string'},
    /// {name: 'lastName',  type: 'string'},
    /// {name: 'age',       type: 'int'},
    /// {name: 'eyeColor',  type: 'string'}
    /// ]
    /// });
    /// var myStore = new Ext.data.Store({
    /// model: 'User',
    /// proxy: {
    /// type: 'ajax',
    /// url : '/users.json',
    /// reader: {
    /// type: 'json',
    /// root: 'users'
    /// }
    /// },
    /// autoLoad: true
    /// });
    /// </code></pre>
    /// <p>In the example above we configured an AJAX proxy to load data from the url '/users.json'. We told our Proxy
    /// to use a {@link Ext.data.JsonReader JsonReader} to parse the response from the server into Model object -
    /// {@link Ext.data.JsonReader see the docs on JsonReader} for details.</p>
    /// <p><u>Inline data</u></p>
    /// <p>Stores can also load data inline. Internally, Store converts each of the objects we pass in as {@link #data}
    /// into Model instances:</p>
    /// <pre><code>
    /// new Ext.data.Store({
    /// model: 'User',
    /// data : [
    /// {firstName: 'Ed',    lastName: 'Spencer'},
    /// {firstName: 'Tommy', lastName: 'Maintz'},
    /// {firstName: 'Aaron', lastName: 'Conran'},
    /// {firstName: 'Jamie', lastName: 'Avins'}
    /// ]
    /// });
    /// </code></pre>
    /// *
    /// <p>Loading inline data using the method above is great if the data is in the correct format already (e.g. it doesn't need
    /// to be processed by a {@link Ext.data.Reader reader}). If your inline data requires processing to decode the data structure,
    /// use a {@link Ext.data.MemoryProxy MemoryProxy} instead (see the {@link Ext.data.MemoryProxy MemoryProxy} docs for an example).</p>
    /// <p>Additional data can also be loaded locally using {@link #add}.</p>
    /// <p><u>Loading Nested Data</u></p>
    /// <p>Applications often need to load sets of associated data - for example a CRM system might load a User and her Orders.
    /// Instead of issuing an AJAX request for the User and a series of additional AJAX requests for each Order, we can load a nested dataset
    /// and allow the Reader to automatically populate the associated models. Below is a brief example, see the {@link Ext.data.Reader} intro
    /// docs for a full explanation:</p>
    /// <pre><code>
    /// var store = new Ext.data.Store({
    /// autoLoad: true,
    /// model: "User",
    /// proxy: {
    /// type: 'ajax',
    /// url : 'users.json',
    /// reader: {
    /// type: 'json',
    /// root: 'users'
    /// }
    /// }
    /// });
    /// </code></pre>
    /// <p>Which would consume a response like this:</p>
    /// <pre><code>
    /// {
    /// "users": [
    /// {
    /// "id": 1,
    /// "name": "Ed",
    /// "orders": [
    /// {
    /// "id": 10,
    /// "total": 10.76,
    /// "status": "invoiced"
    /// },
    /// {
    /// "id": 11,
    /// "total": 13.45,
    /// "status": "shipped"
    /// }
    /// ]
    /// }
    /// ]
    /// }
    /// </code></pre>
    /// <p>See the {@link Ext.data.Reader} intro docs for a full explanation.</p>
    /// <p><u>Filtering and Sorting</u></p>
    /// <p>Stores can be sorted and filtered - in both cases either remotely or locally. The {@link #sorters} and {@link #filters} are
    /// held inside {@link Ext.util.MixedCollection MixedCollection} instances to make them easy to manage. Usually it is sufficient to
    /// either just specify sorters and filters in the Store configuration or call {@link #sort} or {@link #filter}:
    /// <pre><code>
    /// var store = new Ext.data.Store({
    /// model: 'User',
    /// sorters: [
    /// {
    /// property : 'age',
    /// direction: 'DESC'
    /// },
    /// {
    /// property : 'firstName',
    /// direction: 'ASC'
    /// }
    /// ],
    /// filters: [
    /// {
    /// property: 'firstName',
    /// value   : /Ed/
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>The new Store will keep the configured sorters and filters in the MixedCollection instances mentioned above. By default, sorting
    /// and filtering are both performed locally by the Store - see {@link #remoteSort} and {@link #remoteFilter} to allow the server to
    /// perform these operations instead.</p>
    /// <p>Filtering and sorting after the Store has been instantiated is also easy. Calling {@link #filter} adds another filter to the Store
    /// and automatically filters the dataset (calling {@link #filter} with no arguments simply re-applies all existing filters). Note that by
    /// default {@link #sortOnFilter} is set to true, which means that your sorters are automatically reapplied if using local sorting.</p>
    /// <pre><code>
    /// store.filter('eyeColor', 'Brown');
    /// </code></pre>
    /// <p>Change the sorting at any time by calling {@link #sort}:</p>
    /// <pre><code>
    /// store.sort('height', 'ASC');
    /// </code></pre>
    /// <p>Note that all existing sorters will be removed in favor of the new sorter data (if {@link #sort} is called with no arguments,
    /// the existing sorters are just reapplied instead of being removed). To keep existing sorters and add new ones, just add them
    /// to the MixedCollection:</p>
    /// <pre><code>
    /// store.sorters.add(new Ext.util.Sorter({
    /// property : 'shoeSize',
    /// direction: 'ASC'
    /// }));
    /// store.sort();
    /// </code></pre>
    /// <p><u>Registering with StoreMgr</u></p>
    /// <p>Any Store that is instantiated with a {@link #storeId} will automatically be registed with the {@link Ext.StoreMgr StoreMgr}.
    /// This makes it easy to reuse the same store in multiple views:</p>
    /// <pre><code>
    /// //this store can be used several times
    /// new Ext.data.Store({
    /// model: 'User',
    /// storeId: 'usersStore'
    /// });
    /// new Ext.List({
    /// store: 'usersStore',
    /// //other config goes here
    /// });
    /// new Ext.DataView({
    /// store: 'usersStore',
    /// //other config goes here
    /// });
    /// </code></pre>
    /// <p><u>Further Reading</u></p>
    /// <p>Stores are backed up by an ecosystem of classes that enables their operation. To gain a full understanding of these
    /// pieces and how they fit together, see:</p>
    /// <ul style="list-style-type: disc; padding-left: 25px">
    /// <li>{@link Ext.data.Proxy Proxy} - overview of what Proxies are and how they are used</li>
    /// <li>{@link Ext.data.Model Model} - the core class in the data package</li>
    /// <li>{@link Ext.data.Reader Reader} - used by any subclass of {@link Ext.data.ServerProxy ServerProxy} to read a response</li>
    /// </ul>
    /// *
    /// @constructor
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Store : AbstractStore
    {
        public Store(){}
        public Store(StoreConfig config){}
        /// <summary>
        /// Adds Model instances to the Store by instantiating them based on a JavaScript object. When adding already-
        /// instantiated Models, use {@link #insert} instead. The instances will be added at the end of the existing collection.
        /// This method accepts either a single argument array of Model instances or any number of model instance arguments.
        /// Sample usage:
        /// <pre><code>
        /// myStore.add({some: 'data'}, {some: 'other data'});
        /// </code></pre>
        /// @param {Object} data The data for each model
        /// @return {Array} The array of newly created model instances
        /// </summary>
        public JsArray add(object records){return null;}
        public void clearData(){}
        /// <summary>
        /// Revert to a view of the Record cache with no filtering applied.
        /// @param {Boolean} suppressEvent If <tt>true</tt> the filter is cleared silently without firing the
        /// {@link #datachanged} event.
        /// </summary>
        public void clearFilter(bool suppressEvent){}
        /// <summary>
        /// Collects unique values for a particular dataIndex from this store.
        /// @param {String} dataIndex The property to collect
        /// @param {Boolean} allowNull (optional) Pass true to allow null, undefined or empty string values
        /// @param {Boolean} bypassFilter (optional) Pass true to collect from all records, even ones which are filtered
        /// @return {Array} An array of the unique values
        /// </summary>
        public JsArray collect(JsString dataIndex, bool allowNull, bool bypassFilter){return null;}
        public Store(object config){}
        /// <summary>
        /// @private
        /// Returns a filter function used to test a the given property's value. Defers most of the work to
        /// Ext.util.MixedCollection's createValueMatcher function
        /// @param {String} property The property to create the filter function for
        /// @param {String/RegExp} value The string/regex to compare the property value to
        /// @param {Boolean} anyMatch True if we don't care if the filter value is not the full value (defaults to false)
        /// @param {Boolean} caseSensitive True to create a case-sensitive regex (defaults to false)
        /// @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
        /// Ignored if anyMatch is true.
        /// </summary>
        public void createFilterFn(JsString property, object value, bool anyMatch, bool caseSensitive, bool exactMatch){}
        /// <summary>
        /// Converts a literal to a model, if it's not a model already
        /// @private
        /// @param record {Ext.data.Model/Object} The record to create
        /// @return {Ext.data.Model}
        /// </summary>
        public void createModel(object record){}
        /// <summary>
        /// Calls the specified function for each of the {@link Ext.data.Record Records} in the cache.
        /// @param {Function} fn The function to call. The {@link Ext.data.Record Record} is passed as the first parameter.
        /// Returning <tt>false</tt> aborts and exits the iteration.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed.
        /// Defaults to the current {@link Ext.data.Record Record} in the iteration.
        /// </summary>
        public void each(JsAction fn, object scope){}
        /// <summary>
        /// Filters the loaded set of records by a given set of filters.
        /// @param {Mixed} filters The set of filters to apply to the data. These are stored internally on the store,
        /// but the filtering itself is done on the Store's {@link Ext.util.MixedCollection MixedCollection}. See
        /// MixedCollection's {@link Ext.util.MixedCollection#filter filter} method for filter syntax. Alternatively,
        /// pass in a property string
        /// @param {String} value Optional value to filter by (only if using a property string as the first argument)
        /// </summary>
        public void filter(object filters, JsString value){}
        /// <summary>
        /// Filter by a function. The specified function will be called for each
        /// Record in this Store. If the function returns <tt>true</tt> the Record is included,
        /// otherwise it is filtered out.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
        /// to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// </summary>
        public void filterBy(JsAction fn, object scope){}
        /// <summary>
        /// Finds the index of the first matching Record in this store by a specific field value.
        /// @param {String} fieldName The name of the Record field to test.
        /// @param {String/RegExp} value Either a string that the field value
        /// should begin with, or a RegExp to test against the field.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
        /// @param {Boolean} caseSensitive (optional) True for case sensitive comparison
        /// @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber find(JsString property, object value, JsNumber start, bool anyMatch, bool caseSensitive, bool exactMatch){return null;}
        /// <summary>
        /// Find the index of the first matching Record in this Store by a function.
        /// If the function returns <tt>true</tt> it is considered a match.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
        /// to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber findBy(JsAction fn, object scope, JsNumber start){return null;}
        /// <summary>
        /// Finds the index of the first matching Record in this store by a specific field value.
        /// @param {String} fieldName The name of the Record field to test.
        /// @param {Mixed} value The value to match the field against.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @return {Number} The matched index or -1
        /// </summary>
        public JsNumber findExact(JsString property, object value, JsNumber start){return null;}
        /// <summary>
        /// Finds the first matching Record in this store by a specific field value.
        /// @param {String} fieldName The name of the Record field to test.
        /// @param {String/RegExp} value Either a string that the field value
        /// should begin with, or a RegExp to test against the field.
        /// @param {Number} startIndex (optional) The index to start searching at
        /// @param {Boolean} anyMatch (optional) True to match any part of the string, not just the beginning
        /// @param {Boolean} caseSensitive (optional) True for case sensitive comparison
        /// @param {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
        /// @return {Ext.data.Record} The matched record or null
        /// </summary>
        public void findRecord(){}
        /// <summary>
        /// Convenience function for getting the first model instance in the store
        /// @return {Ext.data.Model/undefined} The first model instance in the store, or undefined
        /// </summary>
        public object first(){return null;}
        /// <summary>
        /// Get the Record at the specified index.
        /// @param {Number} index The index of the Record to find.
        /// @return {Ext.data.Model} The Record at the passed index. Returns undefined if not found.
        /// </summary>
        public Model getAt(JsNumber index){return null;}
        /// <summary>
        /// Get the Record with the specified id.
        /// @param {String} id The id of the Record to find.
        /// @return {Ext.data.Record} The Record with the passed id. Returns undefined if not found.
        /// </summary>
        public void getById(JsString id){}
        /// <summary>
        /// Gets the number of cached records.
        /// <p>If using paging, this may not be the total size of the dataset. If the data object
        /// used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns
        /// the dataset size.  <b>Note</b>: see the Important note in {@link #load}.</p>
        /// @return {Number} The number of Records in the Store's cache.
        /// </summary>
        public new JsNumber getCount(){return null;}
        /// <summary>
        /// Returns an object containing the result of applying grouping to the records in this store. See {@link #groupField},
        /// {@link #groupDir} and {@link #getGroupString}. Example for a store containing records with a color field:
        /// <pre><code>
        /// var myStore = new Ext.data.Store({
        /// groupField: 'color',
        /// groupDir  : 'DESC'
        /// });
        /// myStore.getGroups(); //returns:
        /// [
        /// {
        /// name: 'yellow',
        /// children: [
        /// //all records where the color field is 'yellow'
        /// ]
        /// },
        /// {
        /// name: 'red',
        /// children: [
        /// //all records where the color field is 'red'
        /// ]
        /// }
        /// ]
        /// </code></pre>
        /// @return {Array} The grouped data
        /// </summary>
        public JsArray getGroups(){return null;}
        /// <summary>
        /// Returns the string to group on for a given model instance. The default implementation of this method returns the model's
        /// {@link #groupField}, but this can be overridden to group by an arbitrary string. For example, to group by the first letter
        /// of a model's 'name' field, use the following code:
        /// <pre><code>
        /// new Ext.data.Store({
        /// groupDir: 'ASC',
        /// getGroupString: function(instance) {
        /// return instance.get('name')[0];
        /// }
        /// });
        /// </code></pre>
        /// @param {Ext.data.Model} instance The model instance
        /// @return {String} The string to compare when forming groups
        /// </summary>
        public JsString getGroupString(Model instance){return null;}
        public new void getNewRecords(){}
        /// <summary>
        /// Returns a range of Records between specified indices.
        /// @param {Number} startIndex (optional) The starting index (defaults to 0)
        /// @param {Number} endIndex (optional) The ending index (defaults to the last Record in the Store)
        /// @return {Ext.data.Model[]} An array of Records
        /// </summary>
        public void getRange(JsNumber start, JsNumber end){}
        public new void getUpdatedRecords(){}
        /// <summary>
        /// Get the index within the cache of the passed Record.
        /// @param {Ext.data.Model} record The Ext.data.Model object to find.
        /// @return {Number} The index of the passed Record. Returns -1 if not found.
        /// </summary>
        public JsNumber indexOf(Model record){return null;}
        /// <summary>
        /// Get the index within the cache of the Record with the passed id.
        /// @param {String} id The id of the Record to find.
        /// @return {Number} The index of the Record. Returns -1 if not found.
        /// </summary>
        public JsNumber indexOfId(JsString id){return null;}
        /// <summary>
        /// Inserts Model instances into the Store at the given index and fires the {@link #add} event.
        /// See also <code>{@link #add}</code>.
        /// @param {Number} index The start index at which to insert the passed Records.
        /// @param {Ext.data.Model[]} records An Array of Ext.data.Model objects to add to the cache.
        /// </summary>
        public void insert(JsNumber index, object records){}
        /// <summary>
        /// Returns true if this store is currently filtered
        /// @return {Boolean}
        /// </summary>
        public new void isFiltered(){}
        /// <summary>
        /// Returns true if the Store is currently performing a load operation
        /// @return {Boolean} True if the Store is currently loading
        /// </summary>
        public bool isLoading(){return false;}
        /// <summary>
        /// Convenience function for getting the last model instance in the store
        /// @return {Ext.data.Model/undefined} The last model instance in the store, or undefined
        /// </summary>
        public object last(){return null;}
        /// <summary>
        /// <p>Loads data into the Store via the configured {@link #proxy}. This uses the Proxy to make an
        /// asynchronous call to whatever storage backend the Proxy uses, automatically adding the retrieved
        /// instances into the Store and calling an optional callback if required. Example usage:</p>
        /// <pre><code>
        /// store.load({
        /// scope   : this,
        /// callback: function(records, operation, success) {
        /// //the {@link Ext.data.Operation operation} object contains all of the details of the load operation
        /// console.log(records);
        /// }
        /// });
        /// </code></pre>
        /// <p>If the callback scope does not need to be set, a function can simply be passed:</p>
        /// <pre><code>
        /// store.load(function(records, operation, success) {
        /// console.log('loaded records');
        /// });
        /// </code></pre>
        /// @param {Object/Function} options Optional config object, passed into the Ext.data.Operation object before loading.
        /// </summary>
        public new void load(object options){}
        /// <summary>
        /// Loads an array of data straight into the Store
        /// @param {Array} data Array of data to load. Any non-model instances will be cast into model instances first
        /// @param {Boolean} append True to add the records to the existing records in the store, false to remove the old ones first
        /// </summary>
        public void loadData(JsArray data, bool append){}
        /// <summary>
        /// Loads a given 'page' of data by setting the start and limit values appropriately. Internally this just causes a normal
        /// load operation, passing in calculated 'start' and 'limit' params
        /// @param {Number} page The number of the page to load
        /// </summary>
        public void loadPage(JsNumber page){}
        /// <summary>
        /// Loads an array of {@Ext.data.Model model} instances into the store, fires the datachanged event. This should only usually
        /// be called internally when loading from the {@link Ext.data.Proxy Proxy}, when adding records manually use {@link #add} instead
        /// @param {Array} records The array of records to load
        /// @param {Boolean} add True to add these records to the existing records, false to remove the Store's existing records first
        /// </summary>
        public void loadRecords(JsArray records, bool add){}
        /// <summary>
        /// Loads the next 'page' in the current data set
        /// </summary>
        public void nextPage(){}
        /// <summary>
        /// @private
        /// Called internally when a Proxy has completed a load request
        /// </summary>
        public void onProxyLoad(object operation){}
        /// <summary>
        /// @private
        /// Callback for any write Operation over the Proxy. Updates the Store's MixedCollection to reflect
        /// the updates provided by the Proxy
        /// </summary>
        public void onProxyWrite(object operation){}
        /// <summary>
        /// Loads the previous 'page' in the current data set
        /// </summary>
        public void previousPage(){}
        /// <summary>
        /// Query the cached records in this Store using a filtering function. The specified function
        /// will be called with each record in this Store. If the function returns <tt>true</tt> the record is
        /// included in the results.
        /// @param {Function} fn The function to be called. It will be passed the following parameters:<ul>
        /// <li><b>record</b> : Ext.data.Record<p class="sub-desc">The {@link Ext.data.Record record}
        /// to test for filtering. Access field values using {@link Ext.data.Record#get}.</p></li>
        /// <li><b>id</b> : Object<p class="sub-desc">The ID of the Record passed.</p></li>
        /// </ul>
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to this Store.
        /// @return {MixedCollection} Returns an Ext.util.MixedCollection of the matched records
        /// </summary>
        public void queryBy(JsAction fn, object scope){}
        /// <summary>
        /// Removes the given record from the Store, firing the 'remove' event for each instance that is removed, plus a single
        /// 'datachanged' event after removal.
        /// @param {Ext.data.Model/Array} records The Ext.data.Model instance or array of instances to remove
        /// </summary>
        public void remove(object records){}
        public void removeAll(object silent){}
        /// <summary>
        /// Removes the model instance at the given index
        /// @param {Number} index The record index
        /// </summary>
        public void removeAt(JsNumber index){}
        /// <summary>
        /// <p>Sorts the data in the Store by one or more of its properties. Example usage:</p>
        /// <pre><code>
        /// //sort by a single field
        /// myStore.sort('myField', 'DESC');
        /// //sorting by multiple fields
        /// myStore.sort([
        /// {
        /// property : 'age',
        /// direction: 'ASC'
        /// },
        /// {
        /// property : 'name',
        /// direction: 'DESC'
        /// }
        /// ]);
        /// </code></pre>
        /// <p>Internally, Store converts the passed arguments into an array of {@link Ext.util.Sorter} instances, and delegates the actual
        /// sorting to its internal {@link Ext.util.MixedCollection}.</p>
        /// <p>When passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:</p>
        /// <pre><code>
        /// store.sort('myField');
        /// store.sort('myField');
        /// </code></pre>
        /// <p>Is equivalent to this code, because Store handles the toggling automatically:</p>
        /// <pre><code>
        /// store.sort('myField', 'ASC');
        /// store.sort('myField', 'DESC');
        /// </code></pre>
        /// @param {String|Array} sorters Either a string name of one of the fields in this Store's configured {@link Ext.data.Model Model},
        /// or an Array of sorter configurations.
        /// @param {String} direction The overall direction to sort the data by. Defaults to "ASC".
        /// </summary>
        public void sort(object sorters, JsString direction){}
        /// <summary>
        /// Sums the value of <tt>property</tt> for each {@link Ext.data.Record record} between <tt>start</tt>
        /// and <tt>end</tt> and returns the result.
        /// @param {String} property A field in each record
        /// @param {Number} start (optional) The record index to start at (defaults to <tt>0</tt>)
        /// @param {Number} end (optional) The last record index to include (defaults to length - 1)
        /// @return {Number} The sum
        /// </summary>
        public JsNumber sum(JsString property, JsNumber start, JsNumber end){return null;}
        /// <summary>
        /// @cfg {Boolean} clearOnPageLoad True to empty the store when loading another page via {@link #loadPage},
        /// {@link #nextPage} or {@link #previousPage} (defaults to true). Setting to false keeps existing records, allowing
        /// large data sets to be loaded one page at a time but rendered all together.
        /// </summary>
        public bool clearOnPageLoad{get;set;}
        /// <summary>
        /// Gets the number of cached records.
        /// <p>If using paging, this may not be the total size of the dataset. If the data object
        /// used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns
        /// the dataset size.  <b>Note</b>: see the Important note in {@link #load}.</p>
        /// @return {Number} The number of Records in the Store's cache.
        /// </summary>
        [JsProperty]
        public JsNumber Count{[JsMethod(Name="getCount")]get;private set;}
        /// <summary>
        /// The page that the Store has most recently loaded (see {@link #loadPage})
        /// @property currentPage
        /// @type Number
        /// </summary>
        public object currentPage{get;set;}
        /// <summary>
        /// The direction in which sorting should be applied when grouping. Defaults to "ASC" - the other supported value is "DESC"
        /// @property groupDir
        /// @type String
        /// </summary>
        public JsString groupDir{get;set;}
        /// <summary>
        /// Returns an object containing the result of applying grouping to the records in this store. See {@link #groupField},
        /// {@link #groupDir} and {@link #getGroupString}. Example for a store containing records with a color field:
        /// <pre><code>
        /// var myStore = new Ext.data.Store({
        /// groupField: 'color',
        /// groupDir  : 'DESC'
        /// });
        /// myStore.getGroups(); //returns:
        /// [
        /// {
        /// name: 'yellow',
        /// children: [
        /// //all records where the color field is 'yellow'
        /// ]
        /// },
        /// {
        /// name: 'red',
        /// children: [
        /// //all records where the color field is 'red'
        /// ]
        /// }
        /// ]
        /// </code></pre>
        /// @return {Array} The grouped data
        /// </summary>
        [JsProperty]
        public JsArray Groups{[JsMethod(Name="getGroups")]get;private set;}
        /// <summary>
        /// True if a model was created implicitly for this Store. This happens if a fields array is passed to the Store's constructor
        /// instead of a model constructor or name.
        /// @property implicitModel
        /// @type Boolean
        /// @private
        /// </summary>
        public new bool implicitModel{get;set;}
        /// <summary>
        /// @cfg {Boolean} sortOnFilter For local filtering only, causes {@link #sort} to be called whenever {@link #filter} is called,
        /// causing the sorters to be reapplied after filtering. Defaults to true
        /// </summary>
        public new bool isStore{get;set;}
        /// <summary>
        /// True if the Store is currently loading via its Proxy
        /// @property loading
        /// @type Boolean
        /// @private
        /// </summary>
        public bool loading{get;set;}
        /// <summary>
        /// The number of records considered to form a 'page'. This is used to power the built-in
        /// paging using the nextPage and previousPage functions. Defaults to 25.
        /// @property pageSize
        /// @type Number
        /// </summary>
        public object pageSize{get;set;}
        /// <summary>
        /// @cfg {Boolean} remoteFilter
        /// True to defer any filtering operation to the server. If false, filtering is done locally on the client. Defaults to <tt>false</tt>.
        /// </summary>
        public new bool remoteFilter{get;set;}
        /// <summary>
        /// @cfg {Boolean} remoteSort
        /// True to defer any sorting operation to the server. If false, sorting is done locally on the client. Defaults to <tt>false</tt>.
        /// </summary>
        public new bool remoteSort{get;set;}
        /// <summary>
        /// @cfg {Boolean} sortOnFilter For local filtering only, causes {@link #sort} to be called whenever {@link #filter} is called,
        /// causing the sorters to be reapplied after filtering. Defaults to true
        /// </summary>
        public bool sortOnFilter{get;set;}
    }
    #endregion
    #region StoreConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class StoreConfig
    {
        public StoreConfig(){}
        /// <summary>
        /// True to empty the store when loading another page via {@link #loadPage},
        /// {@link #nextPage} or {@link #previousPage} (defaults to true). Setting to false keeps existing records, allowing
        /// large data sets to be loaded one page at a time but rendered all together.
        /// </summary>
        public bool clearOnPageLoad{get;set;}
        /// <summary>
        /// Optional array of Model instances or data objects to load locally. See "Inline data" above for details.
        /// </summary>
        public JsArray data{get;set;}
        /// <summary>
        /// The Proxy to use for this Store. This can be either a string, a config
        /// object or a Proxy instance - see {@link #setProxy} for details.
        /// </summary>
        public object proxy{get;set;}
        /// <summary>
        /// True to defer any filtering operation to the server. If false, filtering is done locally on the client. Defaults to <tt>false</tt>.
        /// </summary>
        public bool remoteFilter{get;set;}
        /// <summary>
        /// True to defer any sorting operation to the server. If false, sorting is done locally on the client. Defaults to <tt>false</tt>.
        /// </summary>
        public bool remoteSort{get;set;}
    }
    #endregion
    #region Tree
    /// <summary>
    /// @class Ext.data.Tree
    /// @extends Ext.util.Observable
    /// Represents a tree data structure and bubbles all the events for its nodes. The nodes
    /// in the tree have most standard DOM functionality.
    /// @constructor
    /// @param {Node} root (optional) The root node
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Tree : Observable
    {
        public Tree(){}
        public Tree(TreeConfig config){}
        /// <summary>
        /// @class Ext.data.Tree
        /// @extends Ext.util.Observable
        /// Represents a tree data structure and bubbles all the events for its nodes. The nodes
        /// in the tree have most standard DOM functionality.
        /// @constructor
        /// @param {Node} root (optional) The root node
        /// </summary>
        public Tree(object root){}
        /// <summary>
        /// Gets a node in this tree by its id.
        /// @param {String} id
        /// @return {Node}
        /// </summary>
        public void getNodeById(JsString id){}
        /// <summary>
        /// Returns the root node for this tree.
        /// @return {Node}
        /// </summary>
        public void getRootNode(){}
        public void proxyNodeEvent(){}
        public void registerNode(object node){}
        /// <summary>
        /// Sets the root node for this tree.
        /// @param {Node} node
        /// @return {Node}
        /// </summary>
        public void setRootNode(object node){}
        public void toString(){}
        public void unregisterNode(object node){}
        /// <summary>
        /// @cfg {String} pathSeparator
        /// The token used to separate paths in node ids (defaults to '/').
        /// </summary>
        public JsString pathSeparator{get;set;}
        /// <summary>
        /// Sets the root node for this tree.
        /// @param {Node} node
        /// @return {Node}
        /// </summary>
        [JsProperty]
        public object RootNode{private get;[JsMethod(Name="setRootNode")]set;}
    }
    #endregion
    #region TreeConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TreeConfig
    {
        public TreeConfig(){}
        /// <summary>
        /// The token used to separate paths in node ids (defaults to '/').
        /// </summary>
        public JsString pathSeparator{get;set;}
    }
    #endregion
    #region TreeReader
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TreeReader : JsonReader
    {
        public TreeReader(){}
        public new void extractData(object root, object returnRecords){}
    }
    #endregion
    #region TreeStore
    /// <summary>
    /// @author Aaron Conran
    /// @class Ext.data.TreeStore
    /// @extends Ext.data.AbstractStore
    /// *
    /// <p>A store class that allows the representation of hierarchical data.</p>
    /// @constructor
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TreeStore : AbstractStore
    {
        public TreeStore(){}
        public TreeStore(TreeStoreConfig config){}
        /// <summary>
        /// @cfg {String} defaultRootId
        /// The default root id. Defaults to 'root'
        /// </summary>
        public TreeStore(object config){}
        public void fillNode(object node, object records){}
        /// <summary>
        /// Returns the record node by id
        /// @return {Ext.data.RecordNode}
        /// </summary>
        public void getNodeById(object id){}
        /// <summary>
        /// Returns the root node for this tree.
        /// @return {Ext.data.RecordNode}
        /// </summary>
        public void getRootNode(){}
        /// <summary>
        /// Returns a flat Ext.data.Store with the correct type of model.
        /// @param {Ext.data.RecordNode/Ext.data.Record} record
        /// @returns Ext.data.Store
        /// </summary>
        public void getSubStore(object node){}
        public new void load(object options){}
        public void onProxyLoad(object operation){}
        public new void removeAll(){}
        /// <summary>
        /// @cfg {Boolean} clearOnLoad (optional) Default to true. Remove previously existing
        /// child nodes before loading.
        /// </summary>
        public bool clearOnLoad{get;set;}
        /// <summary>
        /// @cfg {String} defaultRootId
        /// The default root id. Defaults to 'root'
        /// </summary>
        public JsString defaultRootId{get;set;}
        /// <summary>
        /// @cfg {String} nodeParam The name of the parameter sent to the server which contains
        /// the identifier of the node. Defaults to <tt>'node'</tt>.
        /// </summary>
        public JsString nodeParam{get;set;}
    }
    #endregion
    #region TreeStoreConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TreeStoreConfig
    {
        public TreeStoreConfig(){}
        /// <summary>
        /// (optional) Default to true. Remove previously existing
        /// child nodes before loading.
        /// </summary>
        public bool clearOnLoad{get;set;}
        /// <summary>
        /// The default root id. Defaults to 'root'
        /// </summary>
        public JsString defaultRootId{get;set;}
        /// <summary>
        /// The name of the parameter sent to the server which contains
        /// the identifier of the node. Defaults to <tt>'node'</tt>.
        /// </summary>
        public JsString nodeParam{get;set;}
    }
    #endregion
    #region Types
    /// <summary>
    /// @class Ext.data.Types
    /// @ignore
    /// <p>This is s static class containing the system-supplied data types which may be given to a {@link Ext.data.Field Field}.<p/>
    /// <p>The properties in this class are used as type indicators in the {@link Ext.data.Field Field} class, so to
    /// test whether a Field is of a certain type, compare the {@link Ext.data.Field#type type} property against properties
    /// of this class.</p>
    /// <p>Developers may add their own application-specific data types to this class. Definition names must be UPPERCASE.
    /// each type definition must contain three properties:</p>
    /// <div class="mdetail-params"><ul>
    /// <li><code>convert</code> : <i>Function</i><div class="sub-desc">A function to convert raw data values from a data block into the data
    /// to be stored in the Field. The function is passed the collowing parameters:
    /// <div class="mdetail-params"><ul>
    /// <li><b>v</b> : Mixed<div class="sub-desc">The data value as read by the Reader, if undefined will use
    /// the configured <tt>{@link Ext.data.Field#defaultValue defaultValue}</tt>.</div></li>
    /// <li><b>rec</b> : Mixed<div class="sub-desc">The data object containing the row as read by the Reader.
    /// Depending on the Reader type, this could be an Array ({@link Ext.data.ArrayReader ArrayReader}), an object
    /// ({@link Ext.data.JsonReader JsonReader}), or an XML element ({@link Ext.data.XMLReader XMLReader}).</div></li>
    /// </ul></div></div></li>
    /// <li><code>sortType</code> : <i>Function</i> <div class="sub-desc">A function to convert the stored data into comparable form, as defined by {@link Ext.data.SortTypes}.</div></li>
    /// <li><code>type</code> : <i>String</i> <div class="sub-desc">A textual data type name.</div></li>
    /// </ul></div>
    /// <p>For example, to create a VELatLong field (See the Microsoft Bing Mapping API) containing the latitude/longitude value of a datapoint on a map from a JsonReader data block
    /// which contained the properties <code>lat</code> and <code>long</code>, you would define a new data type like this:</p>
    /// *<pre><code>
    /// // Add a new Field data type which stores a VELatLong object in the Record.
    /// Ext.data.Types.VELATLONG = {
    /// convert: function(v, data) {
    /// return new VELatLong(data.lat, data.long);
    /// },
    /// sortType: function(v) {
    /// return v.Latitude;  // When sorting, order by latitude
    /// },
    /// type: 'VELatLong'
    /// };
    /// </code></pre>
    /// <p>Then, when declaring a Record, use <pre><code>
    /// var types = Ext.data.Types; // allow shorthand type access
    /// UnitRecord = Ext.data.Record.create([
    /// { name: 'unitName', mapping: 'UnitName' },
    /// { name: 'curSpeed', mapping: 'CurSpeed', type: types.INT },
    /// { name: 'latitude', mapping: 'lat', type: types.FLOAT },
    /// { name: 'latitude', mapping: 'lat', type: types.FLOAT },
    /// { name: 'position', type: types.VELATLONG }
    /// ]);
    /// </code></pre>
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Types
    {
        public Types(){}
    }
    #endregion
    #region validations
    [JsType(JsMode.Prototype, Export=false)]
    public partial class validations
    {
        public validations(){}
        /// <summary>
        /// Validates that the given value is present in the configured {@link #list}
        /// @param {Object} config Optional config object
        /// @param {String} value The value to validate
        /// @return {Boolean} True if the value is not present in the list
        /// </summary>
        public static bool exclusion(object config, JsString value){return false;}
        /// <summary>
        /// Returns true if the given value passes validation against the configured {@link #matcher} regex
        /// @param {Object} config Optional config object
        /// @param {String} value The value to validate
        /// @return {Boolean} True if the value passes the format validation
        /// </summary>
        public static bool format(object config, JsString value){return false;}
        /// <summary>
        /// Validates that the given value is present in the configured {@link #list}
        /// @param {String} value The value to validate
        /// @return {Boolean} True if the value is present in the list
        /// </summary>
        public static bool inclusion(object config, JsString value){return false;}
        /// <summary>
        /// Returns true if the given value is between the configured min and max values
        /// @param {Object} config Optional config object
        /// @param {String} value The value to validate
        /// @return {Boolean} True if the value passes validation
        /// </summary>
        public static bool length(object config, JsString value){return false;}
        /// <summary>
        /// Validates that the given value is present
        /// @param {Object} config Optional config object
        /// @param {Mixed} value The value to validate
        /// @return {Boolean} True if validation passed
        /// </summary>
        public static bool presence(object config, object value){return false;}
        /// <summary>
        /// The default error message used when an exclusion validation fails
        /// @property exclusionMessage
        /// @type String
        /// </summary>
        public static JsString exclusionMessage{get;set;}
        /// <summary>
        /// The default error message used when a format validation fails
        /// @property formatMessage
        /// @type Boolean
        /// </summary>
        public static JsString formatMessage{get;set;}
        /// <summary>
        /// The default error message used when an inclusion validation fails
        /// @property inclusionMessage
        /// @type String
        /// </summary>
        public static JsString inclusionMessage{get;set;}
        /// <summary>
        /// The default error message used when a length validation fails
        /// @property lengthMessage
        /// @type String
        /// </summary>
        public static JsString lengthMessage{get;set;}
        /// <summary>
        /// The default error message used when a presence validation fails
        /// @property presenceMessage
        /// @type String
        /// </summary>
        public static JsString presenceMessage{get;set;}
    }
    #endregion
    #region WebStorageProxy
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.WebStorageProxy
    /// @extends Ext.data.ClientProxy
    /// <p>WebStorageProxy is simply a superclass for the {@link Ext.data.LocalStorageProxy localStorage} and
    /// {@link Ext.data.SessionStorageProxy sessionStorage} proxies. It uses the new HTML5 key/value client-side storage
    /// objects to save {@link Ext.data.Model model instances} for offline use.</p>
    /// @constructor
    /// Creates the proxy, throws an error if local storage is not supported in the current browser
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class WebStorageProxy : ClientProxy
    {
        public WebStorageProxy(){}
        public WebStorageProxy(WebStorageProxyConfig config){}
        /// <summary>
        /// Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage object
        /// </summary>
        public new void clear(){}
        /// <summary>
        /// @ignore
        /// </summary>
        public WebStorageProxy(object config){}
        public void create(object operation, object callback, object scope){}
        public void destroy(object operation, object callback, object scope){}
        /// <summary>
        /// @private
        /// Returns the array of record IDs stored in this Proxy
        /// @return {Array} The record IDs. Each is cast as a Number
        /// </summary>
        public JsArray getIds(){return null;}
        /// <summary>
        /// @private
        /// Returns the next numerical ID that can be used when realizing a model instance (see getRecordCounterKey). Increments
        /// the counter.
        /// @return {Number} The id
        /// </summary>
        public JsNumber getNextId(){return null;}
        /// <summary>
        /// @private
        /// Fetches a model instance from the Proxy by ID. Runs each field's decode function (if present) to decode the data
        /// @param {String} id The record's unique ID
        /// @return {Ext.data.Model} The model instance
        /// </summary>
        public Model getRecord(JsString id){return null;}
        /// <summary>
        /// @private
        /// Returns the unique key used to store the current record counter for this proxy. This is used internally when
        /// realizing models (creating them when they used to be phantoms), in order to give each model instance a unique id.
        /// @return {String} The counter key
        /// </summary>
        public JsString getRecordCounterKey(){return null;}
        /// <summary>
        /// @private
        /// Given the id of a record, returns a unique string based on that id and the id of this proxy. This is used when
        /// storing data in the local storage object and should prevent naming collisions.
        /// @param {String|Number|Ext.data.Model} id The record id, or a Model instance
        /// @return {String} The unique key for this record
        /// </summary>
        public JsString getRecordKey(object id){return null;}
        /// <summary>
        /// @private
        /// Abstract function which should return the storage object that data will be saved to. This must be implemented
        /// in each subclass.
        /// @return {Object} The storage object
        /// </summary>
        public object getStorageObject(){return null;}
        /// <summary>
        /// @private
        /// Sets up the Proxy by claiming the key in the storage object that corresponds to the unique id of this Proxy. Called
        /// automatically by the constructor, this should not need to be called again unless {@link #clear} has been called.
        /// </summary>
        public void initialize(){}
        public void read(object operation, object callback, object scope){}
        /// <summary>
        /// @private
        /// Physically removes a given record from the local storage. Used internally by {@link #destroy}, which you should
        /// use instead because it updates the list of currently-stored record ids
        /// @param {String|Number|Ext.data.Model} id The id of the record to remove, or an Ext.data.Model instance
        /// </summary>
        public void removeRecord(object id, object updateIds){}
        /// <summary>
        /// @private
        /// Saves the array of ids representing the set of all records in the Proxy
        /// @param {Array} ids The ids to set
        /// </summary>
        public void setIds(JsArray ids){}
        /// <summary>
        /// Saves the given record in the Proxy. Runs each field's encode function (if present) to encode the data
        /// @param {Ext.data.Model} record The model instance
        /// @param {String} id The id to save the record under (defaults to the value of the record's getId() function)
        /// </summary>
        public void setRecord(Model record, JsString id){}
        public void update(object operation, object callback, object scope){}
        /// <summary>
        /// @private
        /// Returns the array of record IDs stored in this Proxy
        /// @return {Array} The record IDs. Each is cast as a Number
        /// @private
        /// Saves the array of ids representing the set of all records in the Proxy
        /// @param {Array} ids The ids to set
        /// </summary>
        [JsProperty]
        public JsArray Ids{[JsMethod(Name="getIds")]get;[JsMethod(Name="setIds")]set;}
        /// <summary>
        /// @private
        /// Returns the next numerical ID that can be used when realizing a model instance (see getRecordCounterKey). Increments
        /// the counter.
        /// @return {Number} The id
        /// </summary>
        [JsProperty]
        public JsNumber NextId{[JsMethod(Name="getNextId")]get;private set;}
        /// <summary>
        /// @private
        /// Returns the unique key used to store the current record counter for this proxy. This is used internally when
        /// realizing models (creating them when they used to be phantoms), in order to give each model instance a unique id.
        /// @return {String} The counter key
        /// </summary>
        [JsProperty]
        public JsString RecordCounterKey{[JsMethod(Name="getRecordCounterKey")]get;private set;}
        /// <summary>
        /// @private
        /// Abstract function which should return the storage object that data will be saved to. This must be implemented
        /// in each subclass.
        /// @return {Object} The storage object
        /// </summary>
        [JsProperty]
        public object StorageObject{[JsMethod(Name="getStorageObject")]get;private set;}
    }
    #endregion
    #region WebStorageProxyConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class WebStorageProxyConfig
    {
        public WebStorageProxyConfig(){}
        /// <summary>
        /// The unique ID used as the key in which all record data are stored in the local storage object
        /// </summary>
        public JsString id{get;set;}
    }
    #endregion
    #region Writer
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.Writer
    /// @extends Object
    /// <p>Base Writer class used by most subclasses of {@link Ext.data.ServerProxy}. This class is
    /// responsible for taking a set of {@link Ext.data.Operation} objects and a {@link Ext.data.Request}
    /// object and modifying that request based on the Operations.</p>
    /// <p>For example a {@link Ext.data.JsonWriter} would format the Operations and their {@link Ext.data.Model}
    /// instances based on the config options passed to the {@link Ext.data.JsonWriter JsonWriter's} constructor.</p>
    /// <p>Writers are not needed for any kind of local storage - whether via a
    /// {@link Ext.data.WebStorageProxy Web Storage proxy} (see {@link Ext.data.LocalStorageProxy localStorage}
    /// and {@link Ext.data.SessionStorageProxy sessionStorage}) or just in memory via a
    /// {@link Ext.data.MemoryProxy MemoryProxy}.</p>
    /// @constructor
    /// @param {Object} config Optional config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Writer
    {
        public Writer(){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.data.Writer
        /// @extends Object
        /// <p>Base Writer class used by most subclasses of {@link Ext.data.ServerProxy}. This class is
        /// responsible for taking a set of {@link Ext.data.Operation} objects and a {@link Ext.data.Request}
        /// object and modifying that request based on the Operations.</p>
        /// <p>For example a {@link Ext.data.JsonWriter} would format the Operations and their {@link Ext.data.Model}
        /// instances based on the config options passed to the {@link Ext.data.JsonWriter JsonWriter's} constructor.</p>
        /// <p>Writers are not needed for any kind of local storage - whether via a
        /// {@link Ext.data.WebStorageProxy Web Storage proxy} (see {@link Ext.data.LocalStorageProxy localStorage}
        /// and {@link Ext.data.SessionStorageProxy sessionStorage}) or just in memory via a
        /// {@link Ext.data.MemoryProxy MemoryProxy}.</p>
        /// @constructor
        /// @param {Object} config Optional config object
        /// </summary>
        public Writer(object config){}
        /// <summary>
        /// Formats the data for each record before sending it to the server. This
        /// method should be overridden to format the data in a way that differs from the default.
        /// @param {Object} record The record that we are writing to the server.
        /// @return {Object} An object literal of name/value keys to be written to the server.
        /// By default this method returns the data property on the record.
        /// </summary>
        public object getRecordData(object record){return null;}
        /// <summary>
        /// Prepares a Proxy's Ext.data.Request object
        /// @param {Ext.data.Request} request The request object
        /// @return {Ext.data.Request} The modified request object
        /// </summary>
        public Request write(Request request){return null;}
    }
    #endregion
    #region WriterMgr
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.WriterMgr
    /// @extends Ext.AbstractManager
    /// @ignore
    /// <p>Keeps track of all of the registered {@link Ext.data.Writer Writers}</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class WriterMgr
    {
        public WriterMgr(){}
    }
    #endregion
    #region XmlReader
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.XmlReader
    /// @extends Ext.data.Reader
    /// <p>The XML Reader is used by a Proxy to read a server response that is sent back in XML format. This usually
    /// happens as a result of loading a Store - for example we might create something like this:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: ['id', 'name', 'email']
    /// });
    /// var store = new Ext.data.Store({
    /// model: 'User',
    /// proxy: {
    /// type: 'ajax',
    /// url : 'users.xml',
    /// reader: {
    /// type: 'xml',
    /// record: 'user'
    /// }
    /// }
    /// });
    /// </code></pre>
    /// <p>The example above creates a 'User' model. Models are explained in the {@link Ext.data.Model Model} docs if you're
    /// not already familiar with them.</p>
    /// <p>We created the simplest type of XML Reader possible by simply telling our {@link Ext.data.Store Store}'s
    /// {@link Ext.data.Proxy Proxy} that we want a XML Reader. The Store automatically passes the configured model to the
    /// Store, so it is as if we passed this instead:
    /// <pre><code>
    /// reader: {
    /// type : 'xml',
    /// model: 'User',
    /// record: 'user'
    /// }
    /// </code></pre>
    /// <p>The reader we set up is ready to read data from our server - at the moment it will accept a response like this:</p>
    /// *
    /// <pre><code>
    /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    /// &lt;user&gt;
    /// &lt;id&gt;1&lt;/id&gt;
    /// &lt;name&gt;Ed Spencer&lt;/name&gt;
    /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
    /// &lt;/user&gt;
    /// &lt;user&gt;
    /// &lt;id&gt;2&lt;/id&gt;
    /// &lt;name&gt;Abe Elias&lt;/name&gt;
    /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
    /// &lt;/user&gt;
    /// </code></pre>
    /// <p>The XML Reader uses the configured {@link #record} option to pull out the data for each record - in this case we
    /// set record to 'user', so each &lt;user&gt; above will be converted into a User model.</p>
    /// <p><u>Reading other XML formats</u></p>
    /// <p>If you already have your XML format defined and it doesn't look quite like what we have above, you can usually
    /// pass XmlReader a couple of configuration options to make it parse your format. For example, we can use the
    /// {@link #root} configuration to parse data that comes back like this:</p>
    /// <pre><code>
    /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    /// &lt;users&gt;
    /// &lt;user&gt;
    /// &lt;id&gt;1&lt;/id&gt;
    /// &lt;name&gt;Ed Spencer&lt;/name&gt;
    /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
    /// &lt;/user&gt;
    /// &lt;user&gt;
    /// &lt;id&gt;2&lt;/id&gt;
    /// &lt;name&gt;Abe Elias&lt;/name&gt;
    /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
    /// &lt;/user&gt;
    /// &lt;/users&gt;
    /// </code></pre>
    /// <p>To parse this we just pass in a {@link #root} configuration that matches the 'users' above:</p>
    /// <pre><code>
    /// reader: {
    /// type  : 'xml',
    /// root  : 'users',
    /// record: 'user'
    /// }
    /// </code></pre>
    /// <p>Note that XmlReader doesn't care whether your {@link #root} and {@link #record} elements are nested deep inside
    /// a larger structure, so a response like this will still work:
    /// <pre><code>
    /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    /// &lt;deeply&gt;
    /// &lt;nested&gt;
    /// &lt;xml&gt;
    /// &lt;users&gt;
    /// &lt;user&gt;
    /// &lt;id&gt;1&lt;/id&gt;
    /// &lt;name&gt;Ed Spencer&lt;/name&gt;
    /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
    /// &lt;/user&gt;
    /// &lt;user&gt;
    /// &lt;id&gt;2&lt;/id&gt;
    /// &lt;name&gt;Abe Elias&lt;/name&gt;
    /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
    /// &lt;/user&gt;
    /// &lt;/users&gt;
    /// &lt;/xml&gt;
    /// &lt;/nested&gt;
    /// &lt;/deeply&gt;
    /// </code></pre>
    /// <p><u>Response metadata</u></p>
    /// <p>The server can return additional data in its response, such as the {@link #totalProperty total number of records}
    /// and the {@link #successProperty success status of the response}. These are typically included in the XML response
    /// like this:</p>
    /// <pre><code>
    /// &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    /// &lt;total&gt;100&lt;/total&gt;
    /// &lt;success&gt;true&lt;/success&gt;
    /// &lt;users&gt;
    /// &lt;user&gt;
    /// &lt;id&gt;1&lt;/id&gt;
    /// &lt;name&gt;Ed Spencer&lt;/name&gt;
    /// &lt;email&gt;ed@sencha.com&lt;/email&gt;
    /// &lt;/user&gt;
    /// &lt;user&gt;
    /// &lt;id&gt;2&lt;/id&gt;
    /// &lt;name&gt;Abe Elias&lt;/name&gt;
    /// &lt;email&gt;abe@sencha.com&lt;/email&gt;
    /// &lt;/user&gt;
    /// &lt;/users&gt;
    /// </code></pre>
    /// <p>If these properties are present in the XML response they can be parsed out by the XmlReader and used by the
    /// Store that loaded it. We can set up the names of these properties by specifying a final pair of configuration
    /// options:</p>
    /// <pre><code>
    /// reader: {
    /// type: 'xml',
    /// root: 'users',
    /// totalProperty  : 'total',
    /// successProperty: 'success'
    /// }
    /// </code></pre>
    /// <p>These final options are not necessary to make the Reader work, but can be useful when the server needs to report
    /// an error or if it needs to indicate that there is a lot of data available of which only a subset is currently being
    /// returned.</p>
    /// <p><u>Response format</u></p>
    /// <p><b>Note:</b> in order for the browser to parse a returned XML document, the Content-Type header in the HTTP
    /// response must be set to "text/xml" or "application/xml". This is very important - the XmlReader will not
    /// work correctly otherwise.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class XmlReader : Reader
    {
        public XmlReader(){}
        public XmlReader(XmlReaderConfig config){}
        public XmlReader(ReaderConfig config){}
        /// <summary>
        /// @constructor
        /// @ignore
        /// TODO: This can be removed in 5.0 as all it does is support some deprecated config
        /// </summary>
        public XmlReader(object config){}
        /// <summary>
        /// @private
        /// We're just preparing the data for the superclass by pulling out the record nodes we want
        /// @param {Element} root The XML root node
        /// @return {Array} The records
        /// </summary>
        public JsArray extractData(Element root, object returnRecords){return null;}
        /// <summary>
        /// @private
        /// See Ext.data.Reader's getAssociatedDataRoot docs
        /// @param {Mixed} data The raw data object
        /// @param {String} associationName The name of the association to get data for (uses associationKey if present)
        /// @return {Mixed} The root
        /// </summary>
        public new void getAssociatedDataRoot(object data, JsString associationName){}
        /// <summary>
        /// Normalizes the data object
        /// @param {Object} data The raw data object
        /// @return {Object} Returns the documentElement property of the data object if present, or the same object if not
        /// </summary>
        public new object getData(object data){return null;}
        public new void getResponseData(object response){}
        /// <summary>
        /// @private
        /// Given an XML object, returns the Element that represents the root as configured by the Reader's meta data
        /// @param {Object} data The XML data object
        /// @return {Element} The root node element
        /// </summary>
        public new Element getRoot(object data){return null;}
        /// <summary>
        /// Parses an XML document and returns a ResultSet containing the model instances
        /// @param {Object} doc Parsed XML document
        /// @return {Ext.data.ResultSet} The parsed result set
        /// </summary>
        public new ResultSet readRecords(object doc){return null;}
    }
    #endregion
    #region XmlReaderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class XmlReaderConfig
    {
        public XmlReaderConfig(){}
        /// <summary>
        /// DEPRECATED - this will be removed in Ext JS 5.0. Please use idProperty instead
        /// </summary>
        public JsString id{get;set;}
        /// <summary>
        /// DEPRECATED - this will be removed in Ext JS 5.0. Please use idProperty instead
        /// </summary>
        public JsString idPath{get;set;}
        /// <summary>
        /// The DomQuery path to the repeated element which contains record information.
        /// <b>This is an alias for the {@link #root} config option.</b>
        /// </summary>
        public JsString record{get;set;}
        /// <summary>
        /// DEPRECATED - this will be removed in Ext JS 5.0. Please use successProperty instead
        /// </summary>
        public JsString success{get;set;}
    }
    #endregion
    #region XmlStore
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.XmlStore
    /// @extends Ext.data.Store
    /// @private
    /// @ignore
    /// <p>Small helper class to make creating {@link Ext.data.Store}s from XML data easier.
    /// A XmlStore will be automatically configured with a {@link Ext.data.XmlReader}.</p>
    /// <p>A store configuration would be something like:<pre><code>
    /// var store = new Ext.data.XmlStore({
    /// // store configs
    /// autoDestroy: true,
    /// storeId: 'myStore',
    /// url: 'sheldon.xml', // automatically configures a HttpProxy
    /// // reader configs
    /// record: 'Item', // records will have an "Item" tag
    /// idPath: 'ASIN',
    /// totalRecords: '@TotalResults'
    /// fields: [
    /// // set up the fields mapping into the xml doc
    /// // The first needs mapping, the others are very basic
    /// {name: 'Author', mapping: 'ItemAttributes > Author'},
    /// 'Title', 'Manufacturer', 'ProductGroup'
    /// ]
    /// });
    /// </code></pre></p>
    /// <p>This store is configured to consume a returned object of the form:<pre><code>
    /// &#60?xml version="1.0" encoding="UTF-8"?>
    /// &#60ItemSearchResponse xmlns="http://webservices.amazon.com/AWSECommerceService/2009-05-15">
    /// &#60Items>
    /// &#60Request>
    /// &#60IsValid>True&#60/IsValid>
    /// &#60ItemSearchRequest>
    /// &#60Author>Sidney Sheldon&#60/Author>
    /// &#60SearchIndex>Books&#60/SearchIndex>
    /// &#60/ItemSearchRequest>
    /// &#60/Request>
    /// &#60TotalResults>203&#60/TotalResults>
    /// &#60TotalPages>21&#60/TotalPages>
    /// &#60Item>
    /// &#60ASIN>0446355453&#60/ASIN>
    /// &#60DetailPageURL>
    /// http://www.amazon.com/
    /// &#60/DetailPageURL>
    /// &#60ItemAttributes>
    /// &#60Author>Sidney Sheldon&#60/Author>
    /// &#60Manufacturer>Warner Books&#60/Manufacturer>
    /// &#60ProductGroup>Book&#60/ProductGroup>
    /// &#60Title>Master of the Game&#60/Title>
    /// &#60/ItemAttributes>
    /// &#60/Item>
    /// &#60/Items>
    /// &#60/ItemSearchResponse>
    /// </code></pre>
    /// An object literal of this form could also be used as the {@link #data} config option.</p>
    /// <p><b>Note:</b> Although not listed here, this class accepts all of the configuration options of
    /// <b>{@link Ext.data.XmlReader XmlReader}</b>.</p>
    /// @constructor
    /// @param {Object} config
    /// @xtype xmlstore
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class XmlStore : Store
    {
        public XmlStore(){}
        public XmlStore(StoreConfig config){}
        /// <summary>
        /// @cfg {Ext.data.DataReader} reader @hide
        /// </summary>
        public XmlStore(object config){}
    }
    #endregion
    #region XmlWriter
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.data.XmlWriter
    /// @extends Ext.data.Writer
    /// <p>Writer that outputs model data in XML format</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class XmlWriter : Writer
    {
        public XmlWriter(XmlWriterConfig config){}
        public XmlWriter(){}
        public void buildTpl(object request, object data){}
        public void writeRecords(object request, object data){}
        /// <summary>
        /// @cfg {String} documentRoot The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.
        /// </summary>
        public JsString documentRoot{get;set;}
        /// <summary>
        /// @cfg {String} header A header to use in the XML document (such as setting the encoding or version).
        /// Defaults to <tt>''</tt>.
        /// </summary>
        public JsString header{get;set;}
        /// <summary>
        /// @cfg {String} record The name of the node to use for each record. Defaults to <tt>'record'</tt>.
        /// </summary>
        public JsString record{get;set;}
    }
    #endregion
    #region XmlWriterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class XmlWriterConfig
    {
        public XmlWriterConfig(){}
        /// <summary>
        /// The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.
        /// </summary>
        public JsString documentRoot{get;set;}
        /// <summary>
        /// A header to use in the XML document (such as setting the encoding or version).
        /// Defaults to <tt>''</tt>.
        /// </summary>
        public JsString header{get;set;}
        /// <summary>
        /// The name of the node to use for each record. Defaults to <tt>'record'</tt>.
        /// </summary>
        public JsString record{get;set;}
    }
    #endregion
}
#endregion
#region Ext.form
namespace Ext.form
{
    #region Checkbox
    /// <summary>
    /// @class Ext.form.Checkbox
    /// @extends Ext.form.Field
    /// Simple Checkbox class. Can be used as a direct replacement for traditional checkbox fields.
    /// @constructor
    /// @param {Object} config Optional config object
    /// @xtype checkboxfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Checkbox : Ext.form.Field
    {
        public Checkbox(){}
        public Checkbox(CheckboxConfig config){}
        /// <summary>
        /// Set the checked state of the checkbox to true
        /// @return {Ext.form.Checkbox} this This checkbox
        /// </summary>
        public Checkbox check(){return null;}
        public Checkbox(object config){}
        public void getBooleanIsChecked(object value){}
        /// <summary>
        /// Returns an array of values from the checkboxes in the group that are checked,
        /// @return {Array}
        /// </summary>
        public void getGroupValues(){}
        public void getSameGroupFields(){}
        /// <summary>
        /// Returns the checked state of the checkbox.
        /// @return {Boolean} True if checked, else otherwise
        /// </summary>
        public bool isChecked(){return false;}
        public void onChange(object e){}
        public new void onRender(){}
        public new void reset(){}
        /// <summary>
        /// Set the checked state of the checkbox.
        /// @return {Ext.form.Checkbox} this This checkbox
        /// </summary>
        public Checkbox setChecked(object @checked){return null;}
        /// <summary>
        /// Set the status of all matched checkboxes in the same group to checked
        /// @param {Array} values An array of values
        /// @return {Ext.form.Checkbox} This checkbox
        /// </summary>
        public Checkbox setGroupValues(JsArray values){return null;}
        public new void setValue(object value){}
        /// <summary>
        /// Set the checked state of the checkbox to false
        /// @return {Ext.form.Checkbox} this This checkbox
        /// </summary>
        public Checkbox uncheck(){return null;}
        /// <summary>
        /// @cfg {Boolean} checked <tt>true</tt> if the checkbox should render initially checked (defaults to <tt>false</tt>)
        /// </summary>
        public bool @checked{get;set;}
        /// <summary>
        /// Set the checked state of the checkbox.
        /// @return {Ext.form.Checkbox} this This checkbox
        /// </summary>
        [JsProperty]
        public object Checked{private get;[JsMethod(Name="setChecked")]set;}
        /// <summary>
        /// Set the status of all matched checkboxes in the same group to checked
        /// @param {Array} values An array of values
        /// @return {Ext.form.Checkbox} This checkbox
        /// </summary>
        [JsProperty]
        public JsArray GroupValues{private get;[JsMethod(Name="setGroupValues")]set;}
        public new JsString inputType{get;set;}
        /// <summary>
        /// @class Ext.form.Checkbox
        /// @extends Ext.form.Field
        /// Simple Checkbox class. Can be used as a direct replacement for traditional checkbox fields.
        /// @constructor
        /// @param {Object} config Optional config object
        /// @xtype checkboxfield
        /// </summary>
        public JsString ui{get;set;}
        /// <summary>
        /// @cfg {String} value The string value to submit if the item is in a checked state.
        /// </summary>
        public JsString value{get;set;}
        [JsProperty]
        public object Value{private get;[JsMethod(Name="setValue")]set;}
    }
    #endregion
    #region CheckboxConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class CheckboxConfig
    {
        public CheckboxConfig(){}
        /// <summary>
        /// <tt>true</tt> if the checkbox should render initially checked (defaults to <tt>false</tt>)
        /// </summary>
        public bool @checked{get;set;}
        /// <summary>
        /// The string value to submit if the item is in a checked state.
        /// </summary>
        public JsString value{get;set;}
    }
    #endregion
    #region DatePicker
    /// <summary>
    /// @class Ext.form.DatePicker
    /// @extends Ext.form.Field
    /// <p>Specialized field which has a button which when pressed, shows a {@link Ext.DatePicker}.</p>
    /// @xtype datepickerfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DatePicker : Ext.form.Field
    {
        public DatePicker(Ext.form.DatePickerConfig config){}
        public DatePicker(){}
        /// <summary>
        /// Get an instance of the internal date picker; will create a new instance if not exist.
        /// @return {Ext.DatePicker} datePicker
        /// </summary>
        public Ext.DatePicker getDatePicker(){return null;}
        /// <summary>
        /// Returns the value of the field, which will be a {@link Date} unless the <tt>format</tt> parameter is true.
        /// @param {Boolean} format True to format the value with <tt>Ext.util.Format.defaultDateFormat</tt>
        /// </summary>
        public void getValue(bool format){}
        public new void initComponent(){}
        public new void onDestroy(){}
        /// <summary>
        /// @private
        /// Listener to the tap event of the mask element. Shows the internal {@link #datePicker} component when the button has been tapped.
        /// </summary>
        public void onMaskTap(){}
        /// <summary>
        /// Called when the picker changes its value
        /// @param {Ext.DatePicker} picker The date picker
        /// @param {Object} value The new value from the date picker
        /// @private
        /// </summary>
        public void onPickerChange(Ext.DatePicker picker, object value){}
        /// <summary>
        /// Destroys the picker when it is hidden, if
        /// {@link Ext.form.DatePicker#destroyPickerOnHide destroyPickerOnHide} is set to true
        /// @private
        /// </summary>
        public void onPickerHide(){}
        public void setValue(object value, object animated){}
        /// <summary>
        /// Get an instance of the internal date picker; will create a new instance if not exist.
        /// @return {Ext.DatePicker} datePicker
        /// </summary>
        [JsProperty]
        public Ext.DatePicker DatePicker2{[JsMethod(Name="getDatePicker")]get;private set;}
        /// <summary>
        /// @cfg {Boolean} destroyPickerOnHide
        /// Whether or not to destroy the picker widget on hide. This save memory if it's not used frequently,
        /// but increase delay time on the next show due to re-instantiation. Defaults to false
        /// </summary>
        public bool destroyPickerOnHide{get;set;}
        /// <summary>
        /// @cfg {Object/Ext.DatePicker} picker
        /// An object that is used when creating the internal {@link Ext.DatePicker} component or a direct instance of {@link Ext.DatePicker}
        /// Defaults to null
        /// </summary>
        public object picker{get;set;}
        /// <summary>
        /// @class Ext.form.DatePicker
        /// @extends Ext.form.Field
        /// <p>Specialized field which has a button which when pressed, shows a {@link Ext.DatePicker}.</p>
        /// @xtype datepickerfield
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region DatePickerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DatePickerConfig
    {
        public DatePickerConfig(){}
        /// <summary>
        /// Whether or not to destroy the picker widget on hide. This save memory if it's not used frequently,
        /// but increase delay time on the next show due to re-instantiation. Defaults to false
        /// </summary>
        public bool destroyPickerOnHide{get;set;}
        /// <summary>
        /// An object that is used when creating the internal {@link Ext.DatePicker} component or a direct instance of {@link Ext.DatePicker}
        /// Defaults to null
        /// </summary>
        public object picker{get;set;}
        /// <summary>
        /// Default value for the field and the internal {@link Ext.DatePicker} component. Accepts an object of 'year',
        /// 'month' and 'day' values, all of which should be numbers, or a {@link Date}.
        /// Example: {year: 1989, day: 1, month: 5} = 1st May 1989 or new Date()
        /// </summary>
        public object value{get;set;}
    }
    #endregion
    #region Email
    /// <summary>
    /// @class Ext.form.Email
    /// @extends Ext.form.Text
    /// <p>Wraps an HTML5 email field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
    /// @xtype emailfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Email : Text
    {
        public Email(TextConfig config){}
        public Email(){}
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// @class Ext.form.Email
        /// @extends Ext.form.Text
        /// <p>Wraps an HTML5 email field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
        /// @xtype emailfield
        /// </summary>
        public new JsString inputType{get;set;}
    }
    #endregion
    #region Field
    /// <summary>
    /// @class Ext.form.Field
    /// @extends Ext.Container
    /// <p>Base class for form fields that provides default event handling, sizing, value handling and other functionality. Ext.form.Field
    /// is not used directly in applications, instead the subclasses such as {@link Ext.form.Text} should be used.</p>
    /// @constructor
    /// Creates a new Field
    /// @param {Object} config Configuration options
    /// @xtype field
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Field : Ext.Component
    {
        public Field(Ext.form.FieldConfig config){}
        public Field(){}
        /// <summary>
        /// @private
        /// </summary>
        public new void afterRender(){}
        /// <summary>
        /// @private
        /// </summary>
        public new void applyRenderSelectors(){}
        /// <summary>
        /// Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
        /// attribute of the field if available.
        /// @return {String} name The field {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
        /// </summary>
        public JsString getName(){return null;}
        /// <summary>
        /// Returns the field data value
        /// @return {Mixed} value The field value
        /// </summary>
        public void getValue(){}
        public void hideMask(object e){}
        public new void initComponent(){}
        public new void initEvents(){}
        /// <summary>
        /// @private
        /// </summary>
        public new void initRenderData(){}
        public void initValue(){}
        /// <summary>
        /// <p>Returns true if the value of this Field has been changed from its original value.
        /// Will return false if the field is disabled or has not been rendered yet.</p>
        /// <p>Note that if the owning {@link Ext.form.BasicForm form} was configured with
        /// {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
        /// then the <i>original value</i> is updated when the values are loaded by
        /// {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#setValues setValues}.</p>
        /// @return {Boolean} True if this field has been changed from its original value (and
        /// is not disabled), false otherwise.
        /// </summary>
        public bool isDirty(){return false;}
        public new void isDisabled(){}
        public void onDisable(){}
        public void onEnable(){}
        public void onMaskTap(object e){}
        /// <summary>
        /// @private
        /// </summary>
        public new void onRender(){}
        /// <summary>
        /// Resets the current field value to the originally loaded value and clears any validation messages.
        /// See {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
        /// </summary>
        public void reset(){}
        /// <summary>
        /// Set the label width
        /// @param {Mixed} width The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'
        /// @return {Ext.form.Field} this
        /// </summary>
        public Ext.form.Field setLabelWidth(object width){return null;}
        /// <summary>
        /// Set the field data value
        /// @param {Mixed} value The value to set
        /// @return {Ext.form.Field} this
        /// </summary>
        public Ext.form.Field setValue(object value){return null;}
        public void showMask(object e){}
        /// <summary>
        /// @cfg {Boolean} autoCreateField True to automatically create the field input element on render.
        /// This is true by default, but should be set to false for any Ext.Field subclasses that don't
        /// need an HTML input (e.g. Ext.Slider and similar)
        /// </summary>
        public bool autoCreateField{get;set;}
        /// <summary>
        /// @cfg {String} fieldCls The default CSS class for the field (defaults to 'x-form-field')
        /// </summary>
        public new JsString baseCls{get;set;}
        /// <summary>
        /// @cfg {Boolean} disabled True to disable the field (defaults to false).
        /// <p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
        /// disabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>
        /// </summary>
        public new bool disabled{get;set;}
        /// <summary>
        /// @cfg {String} fieldCls The default CSS class for the field (defaults to 'x-form-field')
        /// </summary>
        public JsString fieldCls{get;set;}
        /// <summary>
        /// @cfg {String} inputType The type attribute for input fields -- e.g. radio, text, password, file (defaults
        /// to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are
        /// no separate Ext components for those. Note that if you use <tt>inputType:'file'</tt>, {@link #emptyText}
        /// is not supported and should be avoided.
        /// </summary>
        public JsString inputType{get;set;}
        /// <summary>
        /// Set to true on all Ext.form.Field subclasses. This is used by {@link Ext.form.FormPanel#getValues} to determine which
        /// components inside a form are fields.
        /// @property isField
        /// @type Boolean
        /// </summary>
        public bool isField{get;set;}
        public bool isFormField{get;set;}
        /// <summary>
        /// @cfg {String} label The label to associate with this field. Defaults to <tt>null</tt>.
        /// </summary>
        public JsString label{get;set;}
        /// <summary>
        /// @cfg {String} labelAlign The location to render the label of the field. Acceptable values are 'top' and 'left'.
        /// Defaults to <tt>'left'</tt>
        /// </summary>
        public JsString labelAlign{get;set;}
        /// <summary>
        /// @cfg {Mixed} labelWidth The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'.
        /// Defaults to <tt>'30%'</tt>
        /// </summary>
        public object labelWidth{get;set;}
        /// <summary>
        /// Set the label width
        /// @param {Mixed} width The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'
        /// @return {Ext.form.Field} this
        /// </summary>
        [JsProperty]
        public object LabelWidth{private get;[JsMethod(Name="setLabelWidth")]set;}
        /// <summary>
        /// Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
        /// attribute of the field if available.
        /// @return {String} name The field {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
        /// </summary>
        [JsProperty]
        public JsString Name{[JsMethod(Name="getName")]get;private set;}
        /// <summary>
        /// @cfg {Boolean} required True to make this field required. Note: this only causes a visual indication.
        /// Doesn't prevent user from submitting the form.
        /// </summary>
        public bool required{get;set;}
        public bool useMask{get;set;}
        /// <summary>
        /// Set the field data value
        /// @param {Mixed} value The value to set
        /// @return {Ext.form.Field} this
        /// </summary>
        [JsProperty]
        public object Value{private get;[JsMethod(Name="setValue")]set;}
    }
    #endregion
    #region FieldConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldConfig
    {
        public FieldConfig(){}
        /// <summary>
        /// True to automatically create the field input element on render.
        /// This is true by default, but should be set to false for any Ext.Field subclasses that don't
        /// need an HTML input (e.g. Ext.Slider and similar)
        /// </summary>
        public bool autoCreateField{get;set;}
        /// <summary>
        /// A custom CSS class to apply to the field's underlying element (defaults to '').
        /// </summary>
        public JsString cls{get;set;}
        /// <summary>
        /// True to disable the field (defaults to false).
        /// <p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
        /// disabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// Optional CSS class that will be added to the actual <input> element (or whichever different element is
        /// defined by {@link inputAutoEl}). Defaults to undefined.
        /// </summary>
        public JsString inputCls{get;set;}
        /// <summary>
        /// The type attribute for input fields -- e.g. radio, text, password, file (defaults
        /// to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are
        /// no separate Ext components for those. Note that if you use <tt>inputType:'file'</tt>, {@link #emptyText}
        /// is not supported and should be avoided.
        /// </summary>
        public JsString inputType{get;set;}
        /// <summary>
        /// The label to associate with this field. Defaults to <tt>null</tt>.
        /// </summary>
        public JsString label{get;set;}
        /// <summary>
        /// The location to render the label of the field. Acceptable values are 'top' and 'left'.
        /// Defaults to <tt>'left'</tt>
        /// </summary>
        public JsString labelAlign{get;set;}
        /// <summary>
        /// The width of the label, can be any valid CSS size. E.g '20%', '6em', '100px'.
        /// Defaults to <tt>'30%'</tt>
        /// </summary>
        public object labelWidth{get;set;}
        /// <summary>
        /// The field's HTML name attribute (defaults to '').
        /// <b>Note</b>: this property must be set if this field is to be automatically included with
        /// {@link Ext.form.FormPanel#submit form submit()}.
        /// </summary>
        public JsString name{get;set;}
        /// <summary>
        /// True to make this field required. Note: this only causes a visual indication.
        /// Doesn't prevent user from submitting the form.
        /// </summary>
        public bool required{get;set;}
        /// <summary>
        /// The tabIndex for this field. Note this only applies to fields that are rendered,
        /// not those which are built via applyTo (defaults to undefined).
        /// </summary>
        public JsNumber tabIndex{get;set;}
        /// <summary>
        /// A value to initialize this field with (defaults to undefined).
        /// </summary>
        public object value{get;set;}
    }
    #endregion
    #region FieldSet
    /// <summary>
    /// @class Ext.form.FieldSet
    /// @extends Ext.Container
    /// <p>Simple FieldSet, can contain fields as items. FieldSets do not add any behavior, other than an optional title, and
    /// are just used to group similar fields together. Example usage (within a form):</p>
    /// <pre><code>
    /// new Ext.form.FormPanel({
    /// items: [
    /// {
    /// xtype: 'fieldset',
    /// title: 'About Me',
    /// items: [
    /// {
    /// xtype: 'textfield',
    /// name : 'firstName',
    /// label: 'First Name'
    /// },
    /// {
    /// xtype: 'textfield',
    /// name : 'lastName',
    /// label: 'Last Name'
    /// }
    /// ]
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// @xtype fieldset
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class FieldSet : Ext.Panel
    {
        public FieldSet(FieldSetConfig config){}
        public FieldSet(){}
        /// <summary>
        /// @cfg {String} instructions Optional fieldset instructions, rendered just below the grouped fields
        /// </summary>
        public new void afterLayout(object layout){}
        public new void initComponent(){}
        /// <summary>
        /// Sets the instructions of the current fieldset.
        /// @param {String} instructions The new instructions
        /// @return {Ext.form.FieldSet} this
        /// </summary>
        public FieldSet setInstructions(JsString instructions){return null;}
        /// <summary>
        /// Sets the title of the current fieldset.
        /// @param {String} title The new title
        /// @return {Ext.form.FieldSet} this
        /// </summary>
        public FieldSet setTitle(JsString title){return null;}
        /// <summary>
        /// @class Ext.form.FieldSet
        /// @extends Ext.Container
        /// <p>Simple FieldSet, can contain fields as items. FieldSets do not add any behavior, other than an optional title, and
        /// are just used to group similar fields together. Example usage (within a form):</p>
        /// <pre><code>
        /// new Ext.form.FormPanel({
        /// items: [
        /// {
        /// xtype: 'fieldset',
        /// title: 'About Me',
        /// items: [
        /// {
        /// xtype: 'textfield',
        /// name : 'firstName',
        /// label: 'First Name'
        /// },
        /// {
        /// xtype: 'textfield',
        /// name : 'lastName',
        /// label: 'Last Name'
        /// }
        /// ]
        /// }
        /// ]
        /// });
        /// </code></pre>
        /// @xtype fieldset
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// Sets the instructions of the current fieldset.
        /// @param {String} instructions The new instructions
        /// @return {Ext.form.FieldSet} this
        /// </summary>
        [JsProperty]
        public JsString Instructions{private get;[JsMethod(Name="setInstructions")]set;}
        /// <summary>
        /// Sets the title of the current fieldset.
        /// @param {String} title The new title
        /// @return {Ext.form.FieldSet} this
        /// </summary>
        [JsProperty]
        public JsString Title{private get;[JsMethod(Name="setTitle")]set;}
    }
    #endregion
    #region FieldSetConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FieldSetConfig
    {
        public FieldSetConfig(){}
        /// <summary>
        /// Optional fieldset title, rendered just above the grouped fields
        /// </summary>
        public JsString title{get;set;}
    }
    #endregion
    #region FormPanel
    /// <summary>
    /// @class Ext.form.FormPanel
    /// @extends Ext.Panel
    /// <p>Simple form panel which enables easy getting and setting of field values. Can load model instances. Example usage:</p>
    /// <pre><code>
    /// var form = new Ext.form.FormPanel({
    /// items: [
    /// {
    /// xtype: 'textfield',
    /// name : 'first',
    /// label: 'First name'
    /// },
    /// {
    /// xtype: 'textfield',
    /// name : 'last',
    /// label: 'Last name'
    /// },
    /// {
    /// xtype: 'numberfield',
    /// name : 'age',
    /// label: 'Age'
    /// },
    /// {
    /// xtype: 'urlfield',
    /// name : 'url',
    /// label: 'Website'
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// <p>Loading model instances:</p>
    /// <pre><code>
    /// Ext.regModel('User', {
    /// fields: [
    /// {name: 'first', type: 'string'},
    /// {name: 'last',  type: 'string'},
    /// {name: 'age',   type: 'int'},
    /// {name: 'url',   type: 'string'}
    /// ]
    /// });
    /// var user = Ext.ModelMgr.create({
    /// first: 'Ed',
    /// last : 'Spencer',
    /// age  : 24,
    /// url  : 'http://extjs.com'
    /// }, 'User');
    /// form.load(user);
    /// </code></pre>
    /// @xtype form
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class FormPanel : Ext.Panel
    {
        public FormPanel(FormPanelConfig config){}
        public FormPanel(){}
        public new void afterRender(){}
        /// <summary>
        /// A convenient method to disable all fields in this forms
        /// @return {Ext.form.FormPanel} this This form
        /// </summary>
        public new FormPanel disable(){return null;}
        /// <summary>
        /// A convenient method to enable all fields in this forms
        /// @return {Ext.form.FormPanel} this This form
        /// </summary>
        public new FormPanel enable(){return null;}
        /// <summary>
        /// @cfg {Object} submitOnAction
        /// When this is set to true, the form will automatically submit itself whenever the 'action'
        /// event fires on a field in this form. The action event usually fires whenever you press
        /// go or enter inside a textfield.
        /// </summary>
        public new void getElConfig(){}
        /// <summary>
        /// @private
        /// Returns all {@link Ext.Field field} instances inside this form
        /// @param byName return only fields that match the given name, otherwise return all fields.
        /// @return {Object/Array} All field instances, mapped by field name; or an array if byName is passed
        /// </summary>
        public object getFields(object byName){return null;}
        public void getFieldsAsArray(){}
        public void getFieldsFromItem(){}
        /// <summary>
        /// Returns the Model instance currently loaded into this form (if any)
        /// @return {Ext.data.Model} The Model instance
        /// </summary>
        public Model getRecord(){return null;}
        /// <summary>
        /// Returns an object containing the value of each field in the form, keyed to the field's name.
        /// For groups of checkbox fields with the same name, it will be arrays of values. For examples:
        /// <pre><code>
        /// {
        /// name: "Jacky Nguyen", // From a TextField
        /// favorites: [
        /// 'pizza',
        /// 'noodle',
        /// 'cake'
        /// ]
        /// }
        /// </code></pre>
        /// @param {Boolean} enabled <tt>true</tt> to return only enabled fields
        /// @return {Object} Object mapping field name to its value
        /// </summary>
        public object getValues(bool enabled){return null;}
        /// <summary>
        /// Hides a previously shown wait mask (See {@link #showMask})
        /// @return {Ext.form.FormPanel} this
        /// </summary>
        public FormPanel hideMask(){return null;}
        public new void initComponent(){}
        /// <summary>
        /// @private
        /// Backwards-compatibility for a poorly-named function
        /// </summary>
        public void loadModel(){}
        /// <summary>
        /// Loads matching fields from a model instance into this form
        /// @param {Ext.data.Model} instance The model instance
        /// @return {Ext.form.FormPanel} this
        /// </summary>
        public FormPanel loadRecord(Model instance){return null;}
        public void onFieldAction(object field){}
        public void onSubmit(object e, object t){}
        /// <summary>
        /// Resets all fields in the form back to their original values
        /// @return {Ext.form.FormPanel} this This form
        /// </summary>
        public FormPanel reset(){return null;}
        /// <summary>
        /// Sets the values of form fields in bulk. Example usage:
        /// <pre><code>
        /// myForm.setValues({
        /// name: 'Ed',
        /// crazy: true,
        /// username: 'edspencer'
        /// });
        /// </code></pre>
        /// If there groups of checkbox fields with the same name, pass their values in an array. For example:
        /// <pre><code>
        /// myForm.setValues({
        /// name: 'Jacky',
        /// crazy: false,
        /// hobbies: [
        /// 'reading',
        /// 'cooking',
        /// 'gaming'
        /// ]
        /// });
        /// </code></pre>
        /// @param {Object} values field name => value mapping object
        /// @return {Ext.form.FormPanel} this
        /// </summary>
        public FormPanel setValues(object values){return null;}
        /// <summary>
        /// Shows a generic/custom mask over a designated Element.
        /// @param {String/Object} cfg Either a string message or a configuration object supporting
        /// the following options:
        /// <pre><code>
        /// {
        /// message : 'Please Wait',
        /// transparent : false,
        /// target  : Ext.getBody(),  //optional target Element
        /// cls : 'form-mask',
        /// customImageUrl : 'trident.jpg'
        /// }
        /// </code></pre>This object is passed to the {@link #waitTpl} for use with a custom masking implementation.
        /// @param {String/Element} target The target Element instance or Element id to use
        /// as the masking agent for the operation (defaults the container Element of the component)
        /// @return {Ext.form.FormPanel} this
        /// </summary>
        public FormPanel showMask(object cfg, object target){return null;}
        /// <summary>
        /// Performs a Ajax-based submission of form values (if standardSubmit is false) or otherwise
        /// executes a standard HTML Form submit action.
        /// @param {Object} options Unless otherwise noted, options may include the following:
        /// <ul>
        /// <li><b>url</b> : String
        /// <div class="sub-desc">
        /// The url for the action (defaults to the form's {@link #url url}.)
        /// </div></li>
        /// *
        /// <li><b>method</b> : String
        /// <div class="sub-desc">
        /// The form method to use (defaults to the form's method, or POST if not defined)
        /// </div></li>
        /// *
        /// <li><b>params</b> : String/Object
        /// <div class="sub-desc">
        /// The params to pass
        /// (defaults to the FormPanel's baseParams, or none if not defined)
        /// Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.
        /// </div></li>
        /// *
        /// <li><b>headers</b> : Object
        /// <div class="sub-desc">
        /// Request headers to set for the action
        /// (defaults to the form's default headers)
        /// </div></li>
        /// <li><b>autoAbort</b> : Boolean
        /// <div class="sub-desc">
        /// <tt>true</tt> to abort any pending Ajax request prior to submission (defaults to false)
        /// Note: Has no effect when standardSubmit is enabled.
        /// </div></li>
        /// <li><b>submitDisabled</b> : Boolean
        /// <div class="sub-desc">
        /// <tt>true</tt> to submit all fields regardless of disabled state (defaults to false)
        /// Note: Has no effect when standardSubmit is enabled.
        /// </div></li>
        /// *
        /// <li><b>waitMsg</b> : String/Config
        /// <div class="sub-desc">
        /// If specified, the value is applied to the {@link #waitTpl} if defined, and rendered to the
        /// {@link #waitMsgTarget} prior to a Form submit action.
        /// </div></li>
        /// <li><b>success</b> : Function
        /// <div class="sub-desc">
        /// The callback that will be invoked after a successful response. A response is successful if
        /// a response is received from the server and is a JSON object where the success property is set
        /// to true, {"success": true}
        /// The function is passed the following parameters:
        /// <ul>
        /// <li>form : Ext.FormPanel The form that requested the action</li>
        /// <li>result : The result object returned by the server as a result of the submit request.</li>
        /// </ul>
        /// </div></li>
        /// *
        /// <li><b>failure</b> : Function
        /// <div class="sub-desc">
        /// The callback that will be invoked after a
        /// failed transaction attempt. The function is passed the following parameters:
        /// <ul>
        /// <li>form : The Ext.FormPanel that requested the submit.</li>
        /// <li>result : The failed response or result object returned by the server which performed the operation.</li>
        /// </ul>
        /// </div></li>
        /// <li><b>scope</b> : Object
        /// <div class="sub-desc">
        /// The scope in which to call the callback functions (The this reference for the callback functions).
        /// </div></li>
        /// </ul>
        /// *
        /// @return {Ext.data.Connection} request Object
        /// </summary>
        public Connection submit(object options){return null;}
        /// <summary>
        /// Updates a model instance with the current values of this form
        /// @param {Ext.data.Model} instance The model instance
        /// @param {Boolean} enabled <tt>true</tt> to update the Model with values from enabled fields only
        /// @return {Ext.form.FormPanel} this
        /// </summary>
        public FormPanel updateRecord(Model instance, bool enabled){return null;}
        /// <summary>
        /// @cfg {Boolean} standardSubmit
        /// Wether or not we want to perform a standard form submit. Defaults to false
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// Returns the Model instance currently loaded into this form (if any)
        /// @return {Ext.data.Model} The Model instance
        /// </summary>
        [JsProperty]
        public Model Record{[JsMethod(Name="getRecord")]get;private set;}
        /// <summary>
        /// @cfg {Boolean} standardSubmit
        /// Wether or not we want to perform a standard form submit. Defaults to false
        /// </summary>
        public bool standardSubmit{get;set;}
        /// <summary>
        /// @cfg {Object} submitOnAction
        /// When this is set to true, the form will automatically submit itself whenever the 'action'
        /// event fires on a field in this form. The action event usually fires whenever you press
        /// go or enter inside a textfield.
        /// </summary>
        public object submitOnAction{get;set;}
        /// <summary>
        /// Sets the values of form fields in bulk. Example usage:
        /// <pre><code>
        /// myForm.setValues({
        /// name: 'Ed',
        /// crazy: true,
        /// username: 'edspencer'
        /// });
        /// </code></pre>
        /// If there groups of checkbox fields with the same name, pass their values in an array. For example:
        /// <pre><code>
        /// myForm.setValues({
        /// name: 'Jacky',
        /// crazy: false,
        /// hobbies: [
        /// 'reading',
        /// 'cooking',
        /// 'gaming'
        /// ]
        /// });
        /// </code></pre>
        /// @param {Object} values field name => value mapping object
        /// @return {Ext.form.FormPanel} this
        /// </summary>
        [JsProperty]
        public object Values{private get;[JsMethod(Name="setValues")]set;}
    }
    #endregion
    #region FormPanelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FormPanelConfig
    {
        public FormPanelConfig(){}
        /// <summary>
        /// Optional hash of params to be sent (when standardSubmit configuration is false) on every submit.
        /// </summary>
        public object baseParams{get;set;}
        /// <summary>
        /// When this is set to true, the form will automatically submit itself whenever the 'action'
        /// event fires on a field in this form. The action event usually fires whenever you press
        /// go or enter inside a textfield.
        /// </summary>
        public object submitOnAction{get;set;}
        /// <summary>
        /// The default Url for submit actions
        /// </summary>
        public JsString url{get;set;}
        /// <summary>
        /// The defined {@link #waitMsg} template.  Used for precise control over the masking agent used
        /// to mask the FormPanel (or other Element) during form Ajax/submission actions. For more options, see
        /// {@link #showMask} method.
        /// </summary>
        public object waitTpl{get;set;}
    }
    #endregion
    #region Hidden
    /// <summary>
    /// @class Ext.form.Hidden
    /// @extends Ext.form.Field
    /// <p>Wraps a hidden field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
    /// @xtype hiddenfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Hidden : Ext.form.Field
    {
        public Hidden(Ext.form.FieldConfig config){}
        public Hidden(){}
        public new JsString inputType{get;set;}
        /// <summary>
        /// @class Ext.form.Hidden
        /// @extends Ext.form.Field
        /// <p>Wraps a hidden field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
        /// @xtype hiddenfield
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region HiddenField
    /// <summary>
    /// @class Ext.form.HiddenField
    /// @extends Ext.form.Hidden
    /// @private
    /// @hidden
    /// DEPRECATED - remove this in 1.0. See RC1 Release Notes for details
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HiddenField : Hidden
    {
        /// <summary>
        /// @class Ext.form.HiddenField
        /// @extends Ext.form.Hidden
        /// @private
        /// @hidden
        /// DEPRECATED - remove this in 1.0. See RC1 Release Notes for details
        /// </summary>
        public HiddenField(){}
    }
    #endregion
    #region Number
    /// <summary>
    /// @class Ext.form.Number
    /// @extends Ext.form.Text
    /// <p>Wraps an HTML5 number field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
    /// @xtype numberfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Number : Text
    {
        public Number(TextConfig config){}
        public Number(){}
        public new void onRender(){}
        public new JsString inputType{get;set;}
        /// <summary>
        /// @class Ext.form.Number
        /// @extends Ext.form.Text
        /// <p>Wraps an HTML5 number field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
        /// @xtype numberfield
        /// </summary>
        public new JsString ui{get;set;}
    }
    #endregion
    #region Password
    /// <summary>
    /// @class Ext.form.Password
    /// @extends Ext.form.Text
    /// <p>Wraps an HTML5 password field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
    /// @xtype passwordfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Password : Text
    {
        public Password(TextConfig config){}
        public Password(){}
        /// <summary>
        /// @class Ext.form.Password
        /// @extends Ext.form.Text
        /// <p>Wraps an HTML5 password field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
        /// @xtype passwordfield
        /// </summary>
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// @class Ext.form.Password
        /// @extends Ext.form.Text
        /// <p>Wraps an HTML5 password field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
        /// @xtype passwordfield
        /// </summary>
        public new JsString inputType{get;set;}
    }
    #endregion
    #region Radio
    /// <summary>
    /// @class Ext.form.Radio
    /// @extends Ext.form.Checkbox
    /// <p>Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
    /// Radio grouping is handled automatically by the browser if you give each radio in a group the same name.</p>
    /// @constructor
    /// Creates a new Radio
    /// @param {Object} config Configuration options
    /// @xtype radiofield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Radio : Checkbox
    {
        public Radio(RadioConfig config){}
        public Radio(CheckboxConfig config){}
        public Radio(){}
        /// <summary>
        /// Returns the selected value if this radio is part of a group (other radio fields with the same name, in the same FormPanel),
        /// @return {String}
        /// </summary>
        public void getGroupValue(){}
        /// <summary>
        /// Set the matched radio field's status (that has the same value as the given string) to checked
        /// @param {String} value The value of the radio field to check
        /// @return {String}
        /// </summary>
        public void setGroupValue(JsString value){}
        /// <summary>
        /// Set the matched radio field's status (that has the same value as the given string) to checked
        /// @param {String} value The value of the radio field to check
        /// @return {String}
        /// </summary>
        [JsProperty]
        public JsString GroupValue{private get;[JsMethod(Name="setGroupValue")]set;}
        /// <summary>
        /// @class Ext.form.Radio
        /// @extends Ext.form.Checkbox
        /// <p>Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
        /// Radio grouping is handled automatically by the browser if you give each radio in a group the same name.</p>
        /// @constructor
        /// Creates a new Radio
        /// @param {Object} config Configuration options
        /// @xtype radiofield
        /// </summary>
        public new JsString inputType{get;set;}
        public new JsString ui{get;set;}
    }
    #endregion
    #region RadioConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class RadioConfig
    {
        public RadioConfig(){}
        /// <summary>
        /// @hide
        /// </summary>
        public bool useClearIcon{get;set;}
    }
    #endregion
    #region Search
    /// <summary>
    /// @class Ext.form.Search
    /// @extends Ext.form.Text
    /// Wraps an HTML5 search field. See {@link Ext.form.FormPanel FormPanel} for example usage.
    /// @xtype searchfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Search : Text
    {
        public Search(SearchConfig config){}
        public Search(TextConfig config){}
        public Search(){}
        /// <summary>
        /// @class Ext.form.Search
        /// @extends Ext.form.Text
        /// Wraps an HTML5 search field. See {@link Ext.form.FormPanel FormPanel} for example usage.
        /// @xtype searchfield
        /// </summary>
        public new JsString inputType{get;set;}
    }
    #endregion
    #region SearchConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SearchConfig
    {
        public SearchConfig(){}
        /// <summary>
        /// @hide
        /// </summary>
        public bool useClearIcon{get;set;}
    }
    #endregion
    #region Select
    /// <summary>
    /// @class Ext.form.Select
    /// @extends Ext.form.Text
    /// Simple Select field wrapper. Example usage:
    /// <pre><code>
    /// new Ext.form.Select({
    /// options: [
    /// {text: 'First Option',  value: 'first'},
    /// {text: 'Second Option', value: 'second'},
    /// {text: 'Third Option',  value: 'third'}
    /// ]
    /// });
    /// </code></pre>
    /// @xtype selectfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Select : Text
    {
        public Select(SelectConfig config){}
        public Select(){}
        public new void destroy(){}
        public void getListPanel(){}
        public void getPicker(){}
        public new void getValue(){}
        public new void initComponent(){}
        public void onListSelect(object selModel, object selected){}
        public void onMaskTap(){}
        public void onOrientationChange(){}
        public void onPickerChange(object picker, object value){}
        public new void onRender(){}
        /// <summary>
        /// Updates the underlying &lt;options&gt; list with new values.
        /// @param {Array} options An array of options configurations to insert or append.
        /// @param {Boolean} append <tt>true</tt> to append the new options existing values.
        /// <pre><code>
        /// selectBox.setOptions(
        /// [   {text: 'First Option',  value: 'first'},
        /// {text: 'Second Option', value: 'second'},
        /// {text: 'Third Option',  value: 'third'}
        /// ]).setValue('third');
        /// </code></pre>
        /// Note: option object member names should correspond with defined {@link #valueField valueField} and
        /// {@link #displayField displayField} values.
        /// @return {Ext.form.Select} this
        /// </summary>
        public Select setOptions(JsArray options, bool append){return null;}
        public new void setValue(object value){}
        public void showComponent(){}
        /// <summary>
        /// @cfg {String/Integer} displayField The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
        /// Select control. This resolved value is the visibly rendered value of the available selection options.
        /// (defaults to 'text')
        /// </summary>
        public object displayField{get;set;}
        public new bool monitorOrientation{get;set;}
        /// <summary>
        /// @class Ext.form.Select
        /// @extends Ext.form.Text
        /// Simple Select field wrapper. Example usage:
        /// <pre><code>
        /// new Ext.form.Select({
        /// options: [
        /// {text: 'First Option',  value: 'first'},
        /// {text: 'Second Option', value: 'second'},
        /// {text: 'Third Option',  value: 'third'}
        /// ]
        /// });
        /// </code></pre>
        /// @xtype selectfield
        /// </summary>
        public new JsString ui{get;set;}
        public new bool useMask{get;set;}
        [JsProperty]
        public object Value{private get;[JsMethod(Name="setValue")]set;}
        /// <summary>
        /// @cfg {String/Integer} valueField The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
        /// Select control. (defaults to 'value')
        /// </summary>
        public object valueField{get;set;}
    }
    #endregion
    #region SelectConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SelectConfig
    {
        public SelectConfig(){}
        /// <summary>
        /// The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
        /// Select control. This resolved value is the visibly rendered value of the available selection options.
        /// (defaults to 'text')
        /// </summary>
        public object displayField{get;set;}
        /// <summary>
        /// Specify a hiddenName if you're using the {@link Ext.form.FormPanel#standardSubmit standardSubmit} option.
        /// This name will be used to post the underlying value of the select to the server.
        /// </summary>
        public JsString hiddenName{get;set;}
        /// <summary>
        /// (Optional) An array of select options.
        /// <pre><code>
        /// [
        /// {text: 'First Option',  value: 'first'},
        /// {text: 'Second Option', value: 'second'},
        /// {text: 'Third Option',  value: 'third'}
        /// ]
        /// </code></pre>
        /// Note: option object member names should correspond with defined {@link #valueField valueField} and {@link #displayField displayField} values.
        /// This config will be ignore if a {@link #store store} instance is provided
        /// </summary>
        public JsArray options{get;set;}
        /// <summary>
        /// (Optional) store instance used to provide selection options data.
        /// </summary>
        public Store store{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public bool useClearIcon{get;set;}
        /// <summary>
        /// The underlying {@link Ext.data.Field#name data value name} (or numeric Array index) to bind to this
        /// Select control. (defaults to 'value')
        /// </summary>
        public object valueField{get;set;}
    }
    #endregion
    #region Slider
    /// <summary>
    /// @class Ext.form.Slider
    /// @extends Ext.form.Field
    /// <p>Form component allowing a user to move a 'thumb' along a slider axis to choose a value. Sliders can equally be used outside
    /// of the context of a form. Example usage:</p>
    /// <pre><code>
    /// new Ext.form.FormPanel({
    /// items: [
    /// {
    /// xtype   : 'sliderfield',
    /// label   : 'Volume',
    /// value   : 5,
    /// minValue: 0,
    /// maxValue: 10
    /// }
    /// ]
    /// });
    /// </code></pre>
    /// Or as a standalone component:
    /// <pre><code>
    /// var slider = new Ext.form.Slider({
    /// value: 5,
    /// minValue: 0,
    /// maxValue: 10
    /// });
    /// slider.setValue(8); //will update the value and move the thumb;
    /// slider.getValue(); //returns 8
    /// </code></pre>
    /// @xtype sliderfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Slider : Ext.form.Field
    {
        /// <summary>
        /// @class Ext.form.Slider.Thumb
        /// @extends Ext.form.Field
        /// @xtype thumb
        /// @ignore
        /// Utility class used by Ext.form.Slider - should never need to be used directly.
        /// </summary>
        [JsType(JsMode.Prototype, Export=false)]
        public partial class Thumb : Ext.form.Field
        {
            public Thumb(ThumbConfig config){}
            public Thumb(){}
            public new void getValue(){}
            /// <summary>
            /// @cfg {Ext.form.Slider} slider The Slider that this thumb is attached to. Required
            /// </summary>
            public new void onRender(){}
            public new void setValue(object newValue){}
            public new bool autoCreateField{get;set;}
            /// <summary>
            /// @class Ext.form.Slider.Thumb
            /// @extends Ext.form.Field
            /// @xtype thumb
            /// @ignore
            /// Utility class used by Ext.form.Slider - should never need to be used directly.
            /// </summary>
            public new JsString baseCls{get;set;}
            public new bool draggable{get;set;}
            /// <summary>
            /// @class Ext.form.Slider.Thumb
            /// @extends Ext.form.Field
            /// @xtype thumb
            /// @ignore
            /// Utility class used by Ext.form.Slider - should never need to be used directly.
            /// </summary>
            public new bool isField{get;set;}
            /// <summary>
            /// @cfg {Number} value The value to initialize this thumb with (defaults to 0)
            /// </summary>
            public JsNumber value{get;set;}
            [JsProperty]
            public object Value{private get;[JsMethod(Name="setValue")]set;}
        }
        [JsType(JsMode.Json, Export=false)]
        public partial class ThumbConfig
        {
            public ThumbConfig(){}
            /// <summary>
            /// The value to initialize this thumb with (defaults to 0)
            /// </summary>
            public JsNumber value{get;set;}
        }
        public Slider(){}
        public Slider(SliderConfig config){}
        public void afterRender(object ct){}
        /// <summary>
        /// @private
        /// Takes a desired value of a thumb and returns the nearest snap value. e.g if minValue = 0, maxValue = 100, increment = 10 and we
        /// pass a value of 67 here, the returned value will be 70. The returned number is constrained within {@link minValue} and {@link maxValue},
        /// so in the above example 68 would be returned if {@link maxValue} was set to 68.
        /// @param {Number} value The value to snap
        /// @return {Number} The snapped value
        /// </summary>
        public JsNumber constrain(JsNumber value){return null;}
        /// <summary>
        /// @cfg {Array} thumbs Optional array of Ext.form.Slider.Thumb instances. Usually {@link values} should be used instead
        /// </summary>
        public Slider(object config){}
        /// <summary>
        /// Disables the slider by calling the internal {@link #setThumbsDisabled} method
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enables the slider by calling the internal {@link #setThumbsDisabled} method.
        /// </summary>
        public void enable(){}
        /// <summary>
        /// @private
        /// Finds and returns the nearest {@link Ext.form.Slider.Thumb thumb} to the given value.
        /// @param {Number} value The value
        /// @return {Ext.form.Slider.Thumb} The nearest thumb
        /// </summary>
        public void getNearest(JsNumber value){}
        /// <summary>
        /// @private
        /// might represent), this returns the pixel on the rendered slider that the thumb should be positioned at
        /// @param {Number} value The internal slider value
        /// @return {Number} The pixel value, rounded and relative to the left edge of the scroller
        /// </summary>
        public JsNumber getPixelValue(JsNumber value, object thumb){return null;}
        /// <summary>
        /// @private
        /// Maps a pixel value to a slider value. If we have a slider that is 200px wide, where minValue is 100 and maxValue is 500,
        /// passing a pixelValue of 38 will return a mapped value of 176
        /// @param {Number} pixelValue The pixel value, relative to the left edge of the slider
        /// @return {Number} The value based on slider units
        /// </summary>
        public JsNumber getSliderValue(JsNumber pixelValue, object thumb){return null;}
        /// <summary>
        /// Returns the Thumb instance bound to this Slider
        /// @return {Ext.form.Slider.Thumb} The thumb instance
        /// </summary>
        public void getThumb(){}
        public void getThumbClass(){}
        /// <summary>
        /// @private
        /// Get the value for a draggable thumb.
        /// </summary>
        public void getThumbValue(object draggable){}
        /// <summary>
        /// Returns the current value of the Slider's thumb
        /// @return {Number} The thumb value
        /// </summary>
        public new JsNumber getValue(){return null;}
        public new void initComponent(){}
        public new void initValue(){}
        /// <summary>
        /// @private
        /// Moves the thumb element. Should only ever need to be called from within {@link setValue}
        /// @param {Ext.form.Slider.Thumb} thumb The thumb to move
        /// @param {Number} pixel The pixel the thumb should be centered on
        /// @param {Boolean} animationDuration True to animationDuration the movement
        /// </summary>
        public void moveThumb(object thumb, JsNumber pixel, bool animationDuration){}
        /// <summary>
        /// @private
        /// Fires drag events so the user can interact.
        /// </summary>
        public void onDrag(object draggable){}
        public void onOrientationChange(){}
        /// <summary>
        /// @private
        /// Updates the value of the nearest thumb on tap events
        /// </summary>
        public void onTap(object e){}
        /// <summary>
        /// @private
        /// Updates a thumb after it has been dragged
        /// </summary>
        public void onThumbDragEnd(object draggable){}
        /// <summary>
        /// @private
        /// Creates an Ext.form.Slider.Thumb instance for each configured {@link values value}. Assumes that this.el is already present
        /// </summary>
        public void renderThumbs(){}
        /// <summary>
        /// @private
        /// Loops through each of the sliders {@link #thumbs} and calls disable/enable on each of them depending
        /// on the param specified.
        /// @param {Boolean} disable True to disable, false to enable
        /// </summary>
        public void setThumbsDisabled(bool disable){}
        /// <summary>
        /// Sets the new value of the slider, constraining it within {@link minValue} and {@link maxValue}, and snapping to the nearest
        /// {@link increment} if set
        /// @param {Number} value The new value
        /// @param {Number} animationDuration Animation duration, 0 for no animation
        /// @param {Boolean} moveThumb Whether or not to move the thumb as well. Defaults to true
        /// @return {Ext.form.Slider} this This Slider
        /// </summary>
        public Slider setValue(JsNumber value, JsNumber animationDuration, bool moveThumb){return null;}
        /// <summary>
        /// @cfg {Number} animationDuration When set to a number greater than 0, it will be the animation duration in ms, defaults to 200
        /// </summary>
        public JsNumber animationDuration{get;set;}
        /// <summary>
        /// @cfg {Number} increment The increment by which to snap each thumb when its value changes. Defaults to 1. Any thumb movement
        /// will be snapped to the nearest value that is a multiple of the increment (e.g. if increment is 10 and the user tries to move
        /// the thumb to 67, it will be snapped to 70 instead)
        /// </summary>
        public JsNumber increment{get;set;}
        /// <summary>
        /// @cfg {String} inputCls Overrides {@link Ext.form.Field}'s inputCls. Defaults to 'x-slider'
        /// </summary>
        public JsString inputCls{get;set;}
        /// <summary>
        /// @cfg {String} inputCls Overrides {@link Ext.form.Field}'s inputCls. Defaults to 'x-slider'
        /// </summary>
        public new JsString inputType{get;set;}
        /// <summary>
        /// @cfg {Number} maxValue The highest value any thumb on this slider can be set to (defaults to 100)
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// @cfg {Number} minValue The lowest value any thumb on this slider can be set to (defaults to 0)
        /// </summary>
        public JsNumber minValue{get;set;}
        /// <summary>
        /// @private
        /// @cfg {Number} trackWidth The current track width. Used when the field is hidden so setValue will continue to work (needs
        /// the fieldEls width).
        /// </summary>
        public new bool monitorOrientation{get;set;}
        /// <summary>
        /// @private
        /// Loops through each of the sliders {@link #thumbs} and calls disable/enable on each of them depending
        /// on the param specified.
        /// @param {Boolean} disable True to disable, false to enable
        /// </summary>
        [JsProperty]
        public bool ThumbsDisabled{private get;[JsMethod(Name="setThumbsDisabled")]set;}
        /// <summary>
        /// @private
        /// @cfg {Number} trackWidth The current track width. Used when the field is hidden so setValue will continue to work (needs
        /// the fieldEls width).
        /// </summary>
        public JsNumber trackWidth{get;set;}
        /// <summary>
        /// @class Ext.form.Slider
        /// @extends Ext.form.Field
        /// <p>Form component allowing a user to move a 'thumb' along a slider axis to choose a value. Sliders can equally be used outside
        /// of the context of a form. Example usage:</p>
        /// <pre><code>
        /// new Ext.form.FormPanel({
        /// items: [
        /// {
        /// xtype   : 'sliderfield',
        /// label   : 'Volume',
        /// value   : 5,
        /// minValue: 0,
        /// maxValue: 10
        /// }
        /// ]
        /// });
        /// </code></pre>
        /// Or as a standalone component:
        /// <pre><code>
        /// var slider = new Ext.form.Slider({
        /// value: 5,
        /// minValue: 0,
        /// maxValue: 10
        /// });
        /// slider.setValue(8); //will update the value and move the thumb;
        /// slider.getValue(); //returns 8
        /// </code></pre>
        /// @xtype sliderfield
        /// </summary>
        public JsString ui{get;set;}
        /// <summary>
        /// @cfg {Number} value The value to initialize the thumb at (defaults to 0)
        /// </summary>
        public JsNumber value{get;set;}
        /// <summary>
        /// Returns the current value of the Slider's thumb
        /// @return {Number} The thumb value
        /// </summary>
        [JsProperty]
        public JsNumber Value{[JsMethod(Name="getValue")]get;private set;}
    }
    #endregion
    #region SliderConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SliderConfig
    {
        public SliderConfig(){}
        /// <summary>
        /// When set to a number greater than 0, it will be the animation duration in ms, defaults to 200
        /// </summary>
        public JsNumber animationDuration{get;set;}
        /// <summary>
        /// The increment by which to snap each thumb when its value changes. Defaults to 1. Any thumb movement
        /// will be snapped to the nearest value that is a multiple of the increment (e.g. if increment is 10 and the user tries to move
        /// the thumb to 67, it will be snapped to 70 instead)
        /// </summary>
        public JsNumber increment{get;set;}
        /// <summary>
        /// The highest value any thumb on this slider can be set to (defaults to 100)
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// The lowest value any thumb on this slider can be set to (defaults to 0)
        /// </summary>
        public JsNumber minValue{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public bool useClearIcon{get;set;}
        /// <summary>
        /// The value to initialize the thumb at (defaults to 0)
        /// </summary>
        public JsNumber value{get;set;}
        /// <summary>
        /// The values to initialize each thumb with. One thumb will be created for each value. This configuration
        /// should always be defined but if it is not then it will be treated as though [0] was passed.
        /// *
        /// This is intentionally doc'd as private and is not fully supported/implemented yet.
        /// @private
        /// </summary>
        public JsArray values{get;set;}
    }
    #endregion
    #region Spinner
    /// <summary>
    /// @class Ext.form.Spinner
    /// @extends Ext.form.Number
    /// <p>Wraps an HTML5 number field. Example usage:
    /// <pre><code>
    /// new Ext.form.Spinner({
    /// minValue: 0,
    /// maxValue: 100,
    /// incrementValue: 2,
    /// cycle: true
    /// });
    /// </code></pre>
    /// @xtype spinnerfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Spinner : Number
    {
        public Spinner(SpinnerConfig config){}
        public Spinner(){}
        public void createRepeater(object el, object fn){}
        public new void destroy(){}
        public new void initComponent(){}
        public new void initValue(){}
        public new void onKeyUp(object e){}
        public new void onRender(){}
        public void onSpinDown(){}
        public void onSpinUp(){}
        public void onTouchEnd(object btn){}
        public void onTouchStart(object btn){}
        public new void setValue(object value){}
        public void spin(object down){}
        /// <summary>
        /// @cfg {Boolean} accelerateOnTapHold True if autorepeating should start slowly and accelerate.
        /// Defaults to <tt>true</tt>.
        /// </summary>
        public bool accelerateOnTapHold{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoCapitalize @hide
        /// </summary>
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// @cfg {Boolean} useClearIcon @hide
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// @cfg {Boolean} cycle When set to true, it will loop the values of a minimum or maximum is reached.
        /// If the maximum value is reached, the value will be set to the minimum.
        /// If the minimum value is reached, the value will be set to the maximum.
        /// Defaults to <tt>false</tt>.
        /// </summary>
        public bool cycle{get;set;}
        public object defaultValue{get;set;}
        /// <summary>
        /// @cfg {Boolean} disableInput True to disable the input field, meaning that only the spinner buttons
        /// can be used. Defaults to <tt>false</tt>.
        /// </summary>
        public bool disableInput{get;set;}
        /// <summary>
        /// @cfg {Number} incrementValue Value that is added or subtracted from the current value when a spinner is used.
        /// Defaults to <tt>1</tt>.
        /// </summary>
        public JsNumber incrementValue{get;set;}
        /// <summary>
        /// @cfg {Boolean} useClearIcon @hide
        /// </summary>
        public bool useClearIcon{get;set;}
        [JsProperty]
        public object Value{private get;[JsMethod(Name="setValue")]set;}
    }
    #endregion
    #region SpinnerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SpinnerConfig
    {
        public SpinnerConfig(){}
        /// <summary>
        /// True if autorepeating should start slowly and accelerate.
        /// Defaults to <tt>true</tt>.
        /// </summary>
        public bool accelerateOnTapHold{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// When set to true, it will loop the values of a minimum or maximum is reached.
        /// If the maximum value is reached, the value will be set to the minimum.
        /// If the minimum value is reached, the value will be set to the maximum.
        /// Defaults to <tt>false</tt>.
        /// </summary>
        public bool cycle{get;set;}
        /// <summary>
        /// True to disable the input field, meaning that only the spinner buttons
        /// can be used. Defaults to <tt>false</tt>.
        /// </summary>
        public bool disableInput{get;set;}
        /// <summary>
        /// Value that is added or subtracted from the current value when a spinner is used.
        /// Defaults to <tt>1</tt>.
        /// </summary>
        public JsNumber incrementValue{get;set;}
        /// <summary>
        /// The maximum allowed value (defaults to Number.MAX_VALUE)
        /// </summary>
        public JsNumber maxValue{get;set;}
        /// <summary>
        /// The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)
        /// </summary>
        public JsNumber minValue{get;set;}
    }
    #endregion
    #region Text
    /// <summary>
    /// @class Ext.form.Text
    /// @extends Ext.form.Field
    /// <p>Simple text input field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
    /// @xtype textfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Text : Ext.form.Field
    {
        public Text(TextConfig config){}
        public Text(){}
        public new void afterRender(){}
        public new void applyRenderSelectors(){}
        /// <summary>
        /// Attempts to forcefully blur input focus for the field.
        /// @return {Ext.form.Text} this
        /// </summary>
        public Text blur(){return null;}
        /// <summary>
        /// Attempts to set the field as the active input focus.
        /// @return {Ext.form.Text} this
        /// </summary>
        public Text focus(){return null;}
        public void hideClearIcon(){}
        public new void initComponent(){}
        public new void initEvents(){}
        public new void initRenderData(){}
        public void onBeforeFocus(object e){}
        public void onBlur(object e){}
        public void onClearIconTap(){}
        public new void onDisable(){}
        public new void onEnable(){}
        public void onFocus(object e){}
        public void onKeyUp(object e){}
        public new void onMaskTap(object e){}
        public void setValue(){}
        public void showClearIcon(){}
        public void updateClearIconVisibility(){}
        /// <summary>
        /// @cfg {String} focusCls The CSS class to use when the field receives focus (defaults to 'x-field-focus')
        /// </summary>
        public JsString focusCls{get;set;}
        public bool isClearIconVisible{get;set;}
        /// <summary>
        /// @property {Boolean} <tt>True</tt> if the field currently has focus.
        /// </summary>
        public bool isFocused{get;set;}
        /// <summary>
        /// @cfg {Integer} maxLength The maximum number of permitted input characters (defaults to 0).
        /// </summary>
        public object maxLength{get;set;}
        /// <summary>
        /// @class Ext.form.Text
        /// @extends Ext.form.Field
        /// <p>Simple text input field. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
        /// @xtype textfield
        /// </summary>
        public JsString ui{get;set;}
    }
    #endregion
    #region TextArea
    /// <summary>
    /// @class Ext.form.TextArea
    /// @extends Ext.form.Text
    /// <p>Wraps a textarea. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
    /// @xtype textareafield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TextArea : Text
    {
        public TextArea(TextAreaConfig config){}
        public TextArea(){}
        public new void onKeyUp(object e){}
        public new void onRender(){}
        /// <summary>
        /// @cfg {Integer} maxRows The maximum number of lines made visible by the input.
        /// </summary>
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// @class Ext.form.TextArea
        /// @extends Ext.form.Text
        /// <p>Wraps a textarea. See {@link Ext.form.FormPanel FormPanel} for example usage.</p>
        /// @xtype textareafield
        /// </summary>
        public new JsString ui{get;set;}
    }
    #endregion
    #region TextAreaConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TextAreaConfig
    {
        public TextAreaConfig(){}
        /// <summary>
        /// The maximum number of lines made visible by the input.
        /// </summary>
        public object maxRows{get;set;}
    }
    #endregion
    #region TextConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class TextConfig
    {
        public TextConfig(){}
        /// <summary>
        /// </summary>
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// </summary>
        public bool autoComplete{get;set;}
        /// <summary>
        /// </summary>
        public bool autoCorrect{get;set;}
        /// <summary>
        /// The CSS class to use when the field receives focus (defaults to 'x-field-focus')
        /// </summary>
        public JsString focusCls{get;set;}
        /// <summary>
        /// A string value displayed in the input (if supported) when the control is empty.
        /// </summary>
        public JsString placeHolder{get;set;}
    }
    #endregion
    #region TextField
    /// <summary>
    /// @class Ext.form.TextField
    /// @extends Ext.form.Text
    /// @private
    /// @hidden
    /// DEPRECATED - remove this in 1.0. See RC1 Release Notes for details
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TextField : Text
    {
        public TextField(TextConfig config){}
        /// <summary>
        /// @class Ext.form.TextField
        /// @extends Ext.form.Text
        /// @private
        /// @hidden
        /// DEPRECATED - remove this in 1.0. See RC1 Release Notes for details
        /// </summary>
        public TextField(){}
    }
    #endregion
    #region Toggle
    /// <summary>
    /// @class Ext.form.Toggle
    /// @extends Ext.form.Slider
    /// <p>Specialized Slider with a single thumb and only two values. By default the toggle component can
    /// be switched between the values of 0 and 1.</p>
    /// @xtype togglefield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Toggle : Slider
    {
        ///// <summary>
        ///// @class Ext.form.Toggle.Thumb
        ///// @extends Ext.form.Slider.Thumb
        ///// @private
        ///// @ignore
        ///// </summary>
        //[JsType(JsMode.Prototype, Export=false)]
        //public new partial class Thumb : Thumb
        //{
        //    public Thumb(ThumbConfig config){}
        //    public Thumb(){}
        //    /// <summary>
        //    /// @class Ext.form.Toggle.Thumb
        //    /// @extends Ext.form.Slider.Thumb
        //    /// @private
        //    /// @ignore
        //    /// </summary>
        //    public new void onRender(){}
        //}
        public Toggle(ToggleConfig config){}
        public Toggle(){}
        public new void getThumbClass(){}
        /// <summary>
        /// @private
        /// Listener to the tap event, just toggles the value
        /// </summary>
        public void onTap(){}
        public new void setValue(object value){}
        /// <summary>
        /// Toggles between the minValue (0 by default) and the maxValue (1 by default)
        /// </summary>
        public void toggle(){}
        public new object animationDuration{get;set;}
        public new JsString inputType{get;set;}
        public new object maxValue{get;set;}
        /// <summary>
        /// @cfg {String} maxValueCls CSS class added to the field when toggled to its maxValue
        /// </summary>
        public JsString maxValueCls{get;set;}
        /// <summary>
        /// @class Ext.form.Toggle
        /// @extends Ext.form.Slider
        /// <p>Specialized Slider with a single thumb and only two values. By default the toggle component can
        /// be switched between the values of 0 and 1.</p>
        /// @xtype togglefield
        /// </summary>
        public new object minValue{get;set;}
        /// <summary>
        /// @cfg {String} minValueCls CSS class added to the field when toggled to its minValue
        /// </summary>
        public JsString minValueCls{get;set;}
        public new JsString ui{get;set;}
        [JsProperty]
        public object Value{private get;[JsMethod(Name="setValue")]set;}
    }
    #endregion
    #region ToggleConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ToggleConfig
    {
        public ToggleConfig(){}
        /// <summary>
        /// CSS class added to the field when toggled to its maxValue
        /// </summary>
        public JsString maxValueCls{get;set;}
        /// <summary>
        /// CSS class added to the field when toggled to its minValue
        /// </summary>
        public JsString minValueCls{get;set;}
        /// <summary>
        /// @hide
        /// </summary>
        public bool useClearIcon{get;set;}
    }
    #endregion
    #region Url
    /// <summary>
    /// @class Ext.form.Url
    /// @extends Ext.form.Text
    /// Wraps an HTML5 url field. See {@link Ext.form.FormPanel FormPanel} for example usage.
    /// @xtype urlfield
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Url : Text
    {
        public Url(TextConfig config){}
        public Url(){}
        public bool autoCapitalize{get;set;}
        /// <summary>
        /// @class Ext.form.Url
        /// @extends Ext.form.Text
        /// Wraps an HTML5 url field. See {@link Ext.form.FormPanel FormPanel} for example usage.
        /// @xtype urlfield
        /// </summary>
        public new JsString inputType{get;set;}
    }
    #endregion
}
#endregion
#region Ext.gesture
namespace Ext.gesture
{
    #region Drag
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Drag : Touch
    {
        public Drag(){}
        public void isDragging(object info){}
        /// <summary>
        /// Method to determine whether this Sortable is currently sorting.
        /// @return {Boolean} the sorting state of this Sortable.
        /// </summary>
        public bool isHorizontal(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently disabled.
        /// @return {Boolean} the disabled state of this Sortable.
        /// </summary>
        public bool isVertical(){return false;}
        public new void onTouchEnd(object e){}
        public new void onTouchMove(object e, object touch){}
        public new void onTouchStart(object e, object touch){}
        public JsString direction{get;set;}
        public object dragThreshold{get;set;}
        public bool horizontal{get;set;}
        public bool vertical{get;set;}
    }
    #endregion
    #region Gesture
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Gesture
    {
        public Gesture(){}
        public void addListener(object name, object listener){}
        public Gesture(object config){}
        public void destroy(){}
        public void fire(object type, object e, object args){}
        public void getLockingGesture(object type){}
        public void isLocked(object type){}
        public void @lock(){}
        public void removeListener(object name, object listener){}
        public void stop(){}
        public void unlock(){}
        public bool disableLocking{get;set;}
        public bool listenForEnd{get;set;}
        public bool listenForMove{get;set;}
        public bool listenForStart{get;set;}
        public object touches{get;set;}
    }
    #endregion
    #region Manager
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Manager
    {
        public Manager(){}
    }
    #endregion
    #region Pinch
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Pinch : Gesture
    {
        public Pinch(){}
        public void getDistance(){}
        public void getPinchInfo(){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e){}
        public void onTouchStart(object e){}
        public new object touches{get;set;}
    }
    #endregion
    #region Swipe
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Swipe : Gesture
    {
        public Swipe(){}
        public void onTouchMove(object e, object touch){}
        public void onTouchStart(object e, object touch){}
        public new bool listenForEnd{get;set;}
        public object swipeThreshold{get;set;}
        public object swipeTime{get;set;}
    }
    #endregion
    #region Tap
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Tap : Gesture
    {
        public Tap(){}
        public void fireTapEvent(object e, object info){}
        public void getInfo(object touch){}
        public void isCancel(object touch){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e, object touch){}
        public void onTouchStart(object e, object touch){}
        public object cancelThreshold{get;set;}
        public object doubleTapThreshold{get;set;}
        public bool fireClickEvent{get;set;}
        public object holdThreshold{get;set;}
        public object singleTapThreshold{get;set;}
    }
    #endregion
    #region Touch
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Touch : Gesture
    {
        public Touch(){}
        public void getInfo(object touch){}
        public void onTouchEnd(object e){}
        public void onTouchMove(object e, object touch){}
        public void onTouchStart(object e, object touch){}
        public void touchDownHandler(){}
        public object touchDownInterval{get;set;}
    }
    #endregion
}
#endregion
#region Ext.layout
namespace Ext.layout
{
    #region AutoComponentLayout
    /// <summary>
    /// @class Ext.layout.AutoComponentLayout
    /// @extends Ext.layout.ComponentLayout
    /// *
    /// <p>The AutoLayout is the default layout manager delegated by {@link Ext.Component} to
    /// render any child Elements when no <tt>{@link Ext.Component#layout layout}</tt> is configured.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AutoComponentLayout : ComponentLayout
    {
        public AutoComponentLayout(){}
        public void onLayout(object width, object height){}
        /// <summary>
        /// @class Ext.layout.AutoComponentLayout
        /// @extends Ext.layout.ComponentLayout
        /// *
        /// <p>The AutoLayout is the default layout manager delegated by {@link Ext.Component} to
        /// render any child Elements when no <tt>{@link Ext.Component#layout layout}</tt> is configured.</p>
        /// </summary>
        public new JsString type{get;set;}
    }
    #endregion
    #region AutoContainerLayout
    /// <summary>
    /// @class Ext.layout.AutoContainerLayout
    /// @extends Ext.layout.ContainerLayout
    /// *
    /// <p>The AutoLayout is the default layout manager delegated by {@link Ext.Container} to
    /// render any child Components when no <tt>{@link Ext.Container#layout layout}</tt> is configured into
    /// a <tt>{@link Ext.Container Container}.</tt>.  AutoLayout provides only a passthrough of any layout calls
    /// to any child containers.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class AutoContainerLayout : ContainerLayout
    {
        public AutoContainerLayout(){}
        public void onLayout(object owner, object target){}
        /// <summary>
        /// @class Ext.layout.AutoContainerLayout
        /// @extends Ext.layout.ContainerLayout
        /// *
        /// <p>The AutoLayout is the default layout manager delegated by {@link Ext.Container} to
        /// render any child Components when no <tt>{@link Ext.Container#layout layout}</tt> is configured into
        /// a <tt>{@link Ext.Container Container}.</tt>.  AutoLayout provides only a passthrough of any layout calls
        /// to any child containers.</p>
        /// </summary>
        public new JsString type{get;set;}
    }
    #endregion
    #region BoxLayout
    /// <summary>
    /// @class Ext.layout.BoxLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class BoxLayout : ContainerLayout
    {
        public BoxLayout(BoxLayoutConfig config){}
        public BoxLayout(){}
        public void createBoxEl(object item){}
        public new void getTarget(){}
        /// <summary>
        /// @private
        /// Runs the child box calculations and caches them in childBoxCache. Subclasses can used these cached values
        /// when laying out
        /// </summary>
        public void onLayout(){}
        public void prepareFlexedItems(){}
        public void setFlexedItems(){}
        public JsString align{get;set;}
        /// <summary>
        /// @cfg {String} direction Specifies the direction in which child components are laid out. Defaults
        /// to <tt>'normal'</tt>, which means they are laid out in the order they are added. You can use the
        /// <tt>'reverse'</tt> option to have them laid out in reverse.
        /// </summary>
        public JsString direction{get;set;}
        public bool fixedLayout{get;set;}
        public JsString innerCls{get;set;}
        public bool notifyOwnerCtContainer{get;set;}
        public JsString pack{get;set;}
        public JsString targetCls{get;set;}
        /// <summary>
        /// @class Ext.layout.BoxLayout
        /// @extends Ext.layout.ContainerLayout
        /// <p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>
        /// </summary>
        public new JsString type{get;set;}
    }
    #endregion
    #region BoxLayoutConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class BoxLayoutConfig
    {
        public BoxLayoutConfig(){}
        /// <summary>
        /// Specifies the direction in which child components are laid out. Defaults
        /// to <tt>'normal'</tt>, which means they are laid out in the order they are added. You can use the
        /// <tt>'reverse'</tt> option to have them laid out in reverse.
        /// </summary>
        public JsString direction{get;set;}
    }
    #endregion
    #region CardLayout
    /// <summary>
    /// @class Ext.layout.CardLayout
    /// @extends Ext.layout.FitLayout
    /// <p>This layout manages multiple child Components, each is fit to the Container, where only a single child Component
    /// can be visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
    /// This class is intended to be extended or created via the layout:'card' {@link Ext.Container#layout} config,
    /// and should generally not need to be created directly via the new keyword.</p>
    /// <p>The CardLayout's focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,
    /// the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
    /// the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
    /// so that functionality must be provided by the developer.</p>
    /// <p>Containers that are configured with a card layout will have a method setActiveItem dynamically added to it.
    /// <pre><code>
    /// var p = new Ext.Panel({
    /// fullscreen: true,
    /// layout: 'card',
    /// items: [{
    /// html: 'Card 1'
    /// },{
    /// html: 'Card 2'
    /// }]
    /// });
    /// p.setActiveItem(1);
    /// </code></pre>
    /// </p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class CardLayout : FitLayout
    {
        public CardLayout(){}
        public new void beforeLayout(){}
        public new void configureItem(object item, object position){}
        /// <summary>
        /// Return the active (visible) component in the layout.
        /// @returns {Ext.Component}
        /// </summary>
        public void getActiveItem(){}
        public void getAnimation(object newCard, object owner){}
        /// <summary>
        /// Return the active (visible) component in the layout to the next card, optional wrap parameter to wrap to the first
        /// card when the end of the stack is reached.
        /// @param {boolean} wrap Wrap to the first card when the end of the stack is reached.
        /// @returns {Ext.Component}
        /// </summary>
        public void getNext(object wrap){}
        /// <summary>
        /// Return the active (visible) component in the layout to the previous card, optional wrap parameter to wrap to
        /// the last card when the beginning of the stack is reached.
        /// @param {boolean} wrap Wrap to the first card when the end of the stack is reached.
        /// @returns {Ext.Component}
        /// </summary>
        public void getPrev(object wrap){}
        /// <summary>
        /// Sets the active (visible) component in the layout to the next card, optional wrap parameter to wrap to the first
        /// card when the end of the stack is reached.
        /// @param {Mixed} anim Animation to use for the card transition
        /// @param {boolean} wrap Wrap to the first card when the end of the stack is reached.
        /// </summary>
        public void next(object anim, object wrap){}
        public new void onLayout(){}
        public void onRemove(object component){}
        public void parseActiveItem(object item){}
        /// <summary>
        /// Sets the active (visible) component in the layout to the previous card, optional wrap parameter to wrap to
        /// the last card when the beginning of the stack is reached.
        /// @param {Mixed} anim Animation to use for the card transition
        /// @param {boolean} wrap Wrap to the first card when the end of the stack is reached.
        /// </summary>
        public void prev(object anim, object wrap){}
        /// <summary>
        /// Sets the active (visible) item in the layout.
        /// @param {String/Number} item The string component id or numeric index of the item to activate
        /// </summary>
        public void setActiveItem(object newCard, object animation){}
        public bool hideInactive{get;set;}
        public bool sizeAllCards{get;set;}
        /// <summary>
        /// @class Ext.layout.CardLayout
        /// @extends Ext.layout.FitLayout
        /// <p>This layout manages multiple child Components, each is fit to the Container, where only a single child Component
        /// can be visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
        /// This class is intended to be extended or created via the layout:'card' {@link Ext.Container#layout} config,
        /// and should generally not need to be created directly via the new keyword.</p>
        /// <p>The CardLayout's focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,
        /// the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
        /// the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
        /// so that functionality must be provided by the developer.</p>
        /// <p>Containers that are configured with a card layout will have a method setActiveItem dynamically added to it.
        /// <pre><code>
        /// var p = new Ext.Panel({
        /// fullscreen: true,
        /// layout: 'card',
        /// items: [{
        /// html: 'Card 1'
        /// },{
        /// html: 'Card 2'
        /// }]
        /// });
        /// p.setActiveItem(1);
        /// </code></pre>
        /// </p>
        /// </summary>
        public new JsString type{get;set;}
    }
    #endregion
    #region ComponentLayout
    /// <summary>
    /// * @class Ext.layout.ComponentLayout
    /// * @extends Ext.layout.Layout
    /// * <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Component#componentLayout layout}</b></tt>
    /// * configuration property.  See <tt><b>{@link Ext.Component#componentLayout}</b></tt> for additional details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ComponentLayout : Layout
    {
        public ComponentLayout(){}
        public void afterLayout(){}
        public void beforeLayout(object width, object height){}
        /// <summary>
        /// Returns the owner component's resize element.
        /// @return {Ext.Element}
        /// </summary>
        public void getTarget(){}
        /// <summary>
        /// Check if the new size is different from the current size and only
        /// trigger a layout if it is necessary.
        /// @param {Mixed} width The new width to set.
        /// @param {Mixed} height The new height to set.
        /// </summary>
        public void needsLayout(object width, object height){}
        /// <summary>
        /// Set the size of any element supporting undefined, null, and values.
        /// @param {Mixed} width The new width to set.
        /// @param {Mixed} height The new height to set.
        /// </summary>
        public void setElementSize(object el, object width, object height){}
        /// <summary>
        /// Set the size of the target element.
        /// @param {Mixed} width The new width to set.
        /// @param {Mixed} height The new height to set.
        /// </summary>
        public void setTargetSize(object width, object height){}
        public bool monitorChildren{get;set;}
        /// <summary>
        /// * @class Ext.layout.ComponentLayout
        /// * @extends Ext.layout.Layout
        /// * <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Component#componentLayout layout}</b></tt>
        /// * configuration property.  See <tt><b>{@link Ext.Component#componentLayout}</b></tt> for additional details.</p>
        /// </summary>
        public JsString type{get;set;}
    }
    #endregion
    #region ContainerLayout
    /// <summary>
    /// * @class Ext.layout.ContainerLayout
    /// * @extends Ext.layout.Layout
    /// * <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
    /// * configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ContainerLayout : Layout
    {
        public ContainerLayout(ContainerLayoutConfig config){}
        public ContainerLayout(){}
        public void afterLayout(){}
        /// <summary>
        /// Returns an array of child components.
        /// @return {Array} of child components
        /// </summary>
        public new JsArray getLayoutItems(){return null;}
        /// <summary>
        /// Returns the owner component's resize element.
        /// @return {Ext.Element}
        /// </summary>
        public void getTarget(){}
        /// <summary>
        /// Returns an array of child components.
        /// @return {Array} of child components
        /// </summary>
        [JsProperty]
        public JsArray LayoutItems{[JsMethod(Name="getLayoutItems")]get;private set;}
        /// <summary>
        /// * @class Ext.layout.ContainerLayout
        /// * @extends Ext.layout.Layout
        /// * <p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
        /// * configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
        /// </summary>
        public JsString type{get;set;}
    }
    #endregion
    #region ContainerLayoutConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ContainerLayoutConfig
    {
        public ContainerLayoutConfig(){}
        /// <summary>
        /// <p>An optional extra CSS class that will be added to the container. This can be useful for adding
        /// customized styles to the container or any of its children using standard CSS rules. See
        /// {@link Ext.Component}.{@link Ext.Component#ctCls ctCls} also.</p>
        /// </p>
        /// </summary>
        public JsString itemCls{get;set;}
    }
    #endregion
    #region DockLayout
    /// <summary>
    /// @class Ext.layout.DockLayout
    /// @extends Ext.layout.ComponentLayout
    /// This ComponentLayout handles docking for Panels. It takes care of panels that are
    /// part of a ContainerLayout that sets this Panel's size and Panels that are part of
    /// an AutoContainerLayout in which this panel get his height based of the CSS or
    /// or its content.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DockLayout : ComponentLayout
    {
        public DockLayout(){}
        /// <summary>
        /// @protected
        /// This method will adjust the position of the docked item inside an AutoContainerLayout
        /// and adjust the body box accordingly.
        /// @param {Object} box The box containing information about the width and height
        /// of this docked item
        /// @param {Number} index The index position of this docked item
        /// @return {Object} The adjusted box
        /// </summary>
        public object adjustAutoBox(object box, JsNumber index){return null;}
        /// <summary>
        /// @protected
        /// This method will adjust the position of the docked item and adjust the body box
        /// accordingly.
        /// @param {Object} box The box containing information about the width and height
        /// of this docked item
        /// @param {Number} index The index position of this docked item
        /// @return {Object} The adjusted box
        /// </summary>
        public object adjustSizedBox(object box, JsNumber index){return null;}
        public new void afterLayout(){}
        public new void afterRemove(object item){}
        /// <summary>
        /// @protected
        /// This method will set up some initial information about the panel size and bodybox
        /// and then loop over all the items you pass it to take care of stretching, aligning,
        /// dock position and all calculations involved with adjusting the body box.
        /// @param {Array} items Array containing all the docked items we have to layout
        /// </summary>
        public void calculateDockBoxes(JsArray autoWidth, object autoHeight){}
        /// <summary>
        /// @protected
        /// We are overriding the Ext.layout.Layout configureItem method to also add a class that
        /// indicates the position of the docked item. We use the itemCls (x-docked) as a prefix.
        /// An example of a class added to a dock: right item is x-docked-right
        /// @param {Ext.Component} item The item we are configuring
        /// </summary>
        public void configureItem(Ext.Component item, object pos){}
        /// <summary>
        /// @protected
        /// This method will first update all the information about the docked items,
        /// body dimensions and position, the panel's total size. It will then
        /// set all these values on the docked items and panel body.
        /// @param {Array} items Array containing all the docked items
        /// @param {Boolean} autoBoxes Set this to true if the Panel is part of an
        /// AutoContainerLayout
        /// </summary>
        public void dockItems(JsArray autoWidth, bool autoHeight){}
        /// <summary>
        /// @protected
        /// Returns an array containing all the docked items inside this layout's owner panel
        /// @return {Array} An array containing all the docked items of the Panel
        /// </summary>
        public new JsArray getLayoutItems(){return null;}
        /// <summary>
        /// @protected
        /// This method will create a box object, with a reference to the item, the type of dock
        /// (top, left, bottom, right). It will also take care of stretching and aligning of the
        /// docked items.
        /// @param {Ext.Component} item The docked item we want to initialize the box for
        /// @return {Object} The initial box containing width and height and other useful information
        /// </summary>
        public object initBox(Ext.Component item){return null;}
        /// <summary>
        /// @protected
        /// @param {Ext.Component} owner The Panel that owns this DockLayout
        /// @param {Ext.Element} target The target in which we are going to render the docked items
        /// @param {Array} args The arguments passed to the ComponentLayout.layout method
        /// </summary>
        public void onLayout(Ext.Component width, Element height){}
        /// <summary>
        /// @protected
        /// This function will be called by the dockItems method. Since the body is positioned absolute,
        /// we need to give it dimensions and a position so that it is in the middle surrounded by
        /// docked items
        /// @param {Object} box An object containing new x, y, width and height values for the
        /// Panel's body
        /// </summary>
        public void setBodyBox(object box){}
        /// <summary>
        /// @protected
        /// This function will be called by the dockItems method. Since the body is positioned absolute,
        /// we need to give it dimensions and a position so that it is in the middle surrounded by
        /// docked items
        /// @param {Object} box An object containing new x, y, width and height values for the
        /// Panel's body
        /// </summary>
        [JsProperty]
        public object BodyBox{private get;[JsMethod(Name="setBodyBox")]set;}
        /// <summary>
        /// @property itemCls
        /// @type String
        /// This class is automatically added to each docked item within this layout.
        /// We also use this as a prefix for the position class e.g. x-docked-bottom
        /// </summary>
        public JsString itemCls{get;set;}
        /// <summary>
        /// @protected
        /// Returns an array containing all the docked items inside this layout's owner panel
        /// @return {Array} An array containing all the docked items of the Panel
        /// </summary>
        [JsProperty]
        public JsArray LayoutItems{[JsMethod(Name="getLayoutItems")]get;private set;}
        /// <summary>
        /// @class Ext.layout.DockLayout
        /// @extends Ext.layout.ComponentLayout
        /// This ComponentLayout handles docking for Panels. It takes care of panels that are
        /// part of a ContainerLayout that sets this Panel's size and Panels that are part of
        /// an AutoContainerLayout in which this panel get his height based of the CSS or
        /// or its content.
        /// </summary>
        public new JsString type{get;set;}
    }
    #endregion
    #region FieldLayout
    /// <summary>
    /// @class Ext.layout.FieldLayout
    /// @extends Ext.layout.ComponentLayout
    /// *
    /// <p>The FieldLayout is the default layout manager delegated by {@link Ext.Field} to
    /// render field Elements.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class FieldLayout : ComponentLayout
    {
        public FieldLayout(){}
        public void handleLabel(){}
        public void onLayout(object width, object height){}
        /// <summary>
        /// @class Ext.layout.FieldLayout
        /// @extends Ext.layout.ComponentLayout
        /// *
        /// <p>The FieldLayout is the default layout manager delegated by {@link Ext.Field} to
        /// render field Elements.</p>
        /// </summary>
        public new JsString type{get;set;}
    }
    #endregion
    #region FitLayout
    /// <summary>
    /// @class Ext.layout.FitLayout
    /// @extends Ext.layout.ContainerLayout
    /// <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
    /// container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
    /// config, and should generally not need to be created directly via the new keyword.</p>
    /// <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
    /// using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
    /// multiple panels, only the first one will be displayed.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class FitLayout : ContainerLayout
    {
        public FitLayout(){}
        public void getTargetBox(){}
        public void onLayout(){}
        public void setItemBox(object item, object box){}
        /// <summary>
        /// @class Ext.layout.FitLayout
        /// @extends Ext.layout.ContainerLayout
        /// <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
        /// container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
        /// config, and should generally not need to be created directly via the new keyword.</p>
        /// <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
        /// using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
        /// multiple panels, only the first one will be displayed.</p>
        /// </summary>
        public JsString itemCls{get;set;}
        /// <summary>
        /// @class Ext.layout.FitLayout
        /// @extends Ext.layout.ContainerLayout
        /// <p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
        /// container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
        /// config, and should generally not need to be created directly via the new keyword.</p>
        /// <p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
        /// using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
        /// multiple panels, only the first one will be displayed.</p>
        /// </summary>
        public JsString targetCls{get;set;}
        public new JsString type{get;set;}
    }
    #endregion
    #region HBoxLayout
    /// <summary>
    /// @class Ext.layout.HBoxLayout
    /// @extends Ext.layout.BoxLayout
    /// <p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal
    /// space between child items containing a numeric <code>flex</code> configuration. The flex option is a ratio that
    /// distributes width after any items with explicit widths have been accounted for. In the code below, the width is calculated
    /// as follows:
    /// <ul>
    /// <li>The fixed width item is subtracted, leaving us with 300 width</li>
    /// <li>The total flex number is counted, in this case, it is 3</li>
    /// <li>The ratio is then calculated, 300 / 3 = 100</li>
    /// <li>The first item has a flex of 2, so it is set to 2 * 100</li>
    /// <li>The other remaining item is set to 1 * 100</li>
    /// </ul></p>
    /// <pre><code>
    /// new Ext.Container({
    /// width: 400,
    /// height: 300,
    /// layout: {
    /// type: 'hbox',
    /// align: 'stretch'
    /// },
    /// items: [{
    /// flex: 2,
    /// html: 'First'
    /// },{
    /// width: 100,
    /// html: 'Second'
    /// },{
    /// flex: 1,
    /// html: 'Third'
    /// }]
    /// });
    /// </code></pre>
    /// This layout may also be used to set the heights of child items by configuring it with the {@link #align} option.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HBoxLayout : BoxLayout
    {
        public HBoxLayout(HBoxLayoutConfig config){}
        public HBoxLayout(BoxLayoutConfig config){}
        public HBoxLayout(){}
        /// <summary>
        /// @class Ext.layout.HBoxLayout
        /// @extends Ext.layout.BoxLayout
        /// <p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal
        /// space between child items containing a numeric <code>flex</code> configuration. The flex option is a ratio that
        /// distributes width after any items with explicit widths have been accounted for. In the code below, the width is calculated
        /// as follows:
        /// <ul>
        /// <li>The fixed width item is subtracted, leaving us with 300 width</li>
        /// <li>The total flex number is counted, in this case, it is 3</li>
        /// <li>The ratio is then calculated, 300 / 3 = 100</li>
        /// <li>The first item has a flex of 2, so it is set to 2 * 100</li>
        /// <li>The other remaining item is set to 1 * 100</li>
        /// </ul></p>
        /// <pre><code>
        /// new Ext.Container({
        /// width: 400,
        /// height: 300,
        /// layout: {
        /// type: 'hbox',
        /// align: 'stretch'
        /// },
        /// items: [{
        /// flex: 2,
        /// html: 'First'
        /// },{
        /// width: 100,
        /// html: 'Second'
        /// },{
        /// flex: 1,
        /// html: 'Third'
        /// }]
        /// });
        /// </code></pre>
        /// This layout may also be used to set the heights of child items by configuring it with the {@link #align} option.
        /// </summary>
        public JsString orientation{get;set;}
    }
    #endregion
    #region HBoxLayoutConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class HBoxLayoutConfig
    {
        public HBoxLayoutConfig(){}
        /// <summary>
        /// Specifies the vertical alignment of child components. Defaults to <tt>'center'</tt>. Acceptable values are:
        /// <ul>
        /// <li><b>center</b> : <div class="sub-desc">
        /// Aligned to the center of the container.
        /// </div></li>
        /// <li><b>end</b> : <div class="sub-desc">
        /// Aligned to the bottom of the container.
        /// </div></li>
        /// <li><b>start</b> : <div class="sub-desc">
        /// Aligned to the top of the container.
        /// </div></li>
        /// <li><b>stretch</b> : <div class="sub-desc">
        /// Components are stretched vertically to fill the container.
        /// </div></li>
        /// </ul>
        /// </summary>
        public JsString align{get;set;}
        /// <summary>
        /// Specifies the horizontal alignment of child components. Defaults to <tt>'start'</tt>. Acceptable values are:
        /// <ul>
        /// <li><b>center</b> : <div class="sub-desc">
        /// Aligned to the center of the container.
        /// </div></li>
        /// <li><b>end</b> : <div class="sub-desc">
        /// Aligned to the right of the container.
        /// </div></li>
        /// <li><b>justify</b> : <div class="sub-desc">
        /// Justified with both the left and right of the container.
        /// </div></li>
        /// <li><b>start</b> : <div class="sub-desc">
        /// Aligned to the left of the container.
        /// </div></li>
        /// </ul>
        /// </summary>
        public JsString pack{get;set;}
    }
    #endregion
    #region Layout
    /// <summary>
    /// @class Ext.layout.Layout
    /// @extends Object
    /// Base Layout class - extended by ComponentLayout and ContainerLayout
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Layout
    {
        public Layout(){}
        /// <summary>
        /// @private
        /// Removes itemCls
        /// </summary>
        public void afterRemove(object item){}
        public void beforeLayout(){}
        /// <summary>
        /// @private
        /// Applies itemCls
        /// </summary>
        public void configureItem(object item, object position){}
        public Layout(object config){}
        /// <summary>
        /// Destroys this layout. This is a template method that is empty by default, but should be implemented
        /// by subclasses that require explicit destruction to purge event handlers or remove DOM nodes.
        /// @protected
        /// </summary>
        public void destroy(){}
        public void getLayoutItems(){}
        /// <summary>
        /// @private
        /// Adds the layout's targetCls if necessary and sets
        /// initialized flag when complete.
        /// </summary>
        public void initLayout(){}
        public void isValidParent(object item, object target){}
        /// <summary>
        /// @private
        /// </summary>
        public void layout(){}
        /// <summary>
        /// @private
        /// Moved Component to the provided target instead.
        /// </summary>
        public void moveItem(object item, object position, object target){}
        /// <summary>
        /// @private
        /// Renders the given Component into the target Element.
        /// @param {Ext.Component} c The Component to render
        /// @param {Number} position The position within the target to render the item to
        /// @param {Ext.Element} target The target Element
        /// </summary>
        public void renderItem(Ext.Component item, JsNumber position, Element target){}
        /// <summary>
        /// @private
        /// Iterates over all passed items, ensuring they are rendered.  If the items are already rendered,
        /// also determines if the items are in the proper place dom.
        /// </summary>
        public void renderItems(object items, object target){}
        public void setOwner(object owner){}
        public bool initialized{get;set;}
        /// <summary>
        /// @class Ext.layout.Layout
        /// @extends Object
        /// Base Layout class - extended by ComponentLayout and ContainerLayout
        /// </summary>
        public bool isLayout{get;set;}
        [JsProperty]
        public object Owner{private get;[JsMethod(Name="setOwner")]set;}
    }
    #endregion
    #region LayoutManager
    /// <summary>
    /// @class Ext.LayoutManager
    /// <p>Provides a registry of all Layouts (instances of {@link Ext.layout.Layout} or any subclass
    /// thereof) on a page.
    /// @singleton
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class LayoutManager
    {
        public LayoutManager(){}
    }
    #endregion
    #region VBoxLayout
    /// <summary>
    /// @class Ext.layout.VBoxLayout
    /// @extends Ext.layout.BoxLayout
    /// <p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical
    /// space between child items containing a numeric <code>flex</code> configuration. The flex option is a ratio that
    /// distributes height after any items with explicit heights have been accounted for. In the code below, the height is calculated
    /// as follows:
    /// <ul>
    /// <li>The fixed height item is subtracted, leaving us with 300 height</li>
    /// <li>The total flex number is counted, in this case, it is 3</li>
    /// <li>The ratio is then calculated, 300 / 3 = 100</li>
    /// <li>The first item has a flex of 2, so it is set to 2 * 100</li>
    /// <li>The other remaining item is set to 1 * 100</li>
    /// </ul></p>
    /// <pre><code>
    /// new Ext.Container({
    /// width: 300,
    /// height: 400,
    /// layout: {
    /// type: 'vbox',
    /// align: 'stretch'
    /// },
    /// items: [{
    /// flex: 2,
    /// html: 'First'
    /// },{
    /// width: 100,
    /// html: 'Second'
    /// },{
    /// flex: 1,
    /// html: 'Third'
    /// }]
    /// });
    /// </code></pre>
    /// This layout may also be used to set the widths of child items by configuring it with the {@link #align} option.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class VBoxLayout : BoxLayout
    {
        public VBoxLayout(VBoxLayoutConfig config){}
        public VBoxLayout(BoxLayoutConfig config){}
        public VBoxLayout(){}
        /// <summary>
        /// @class Ext.layout.VBoxLayout
        /// @extends Ext.layout.BoxLayout
        /// <p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical
        /// space between child items containing a numeric <code>flex</code> configuration. The flex option is a ratio that
        /// distributes height after any items with explicit heights have been accounted for. In the code below, the height is calculated
        /// as follows:
        /// <ul>
        /// <li>The fixed height item is subtracted, leaving us with 300 height</li>
        /// <li>The total flex number is counted, in this case, it is 3</li>
        /// <li>The ratio is then calculated, 300 / 3 = 100</li>
        /// <li>The first item has a flex of 2, so it is set to 2 * 100</li>
        /// <li>The other remaining item is set to 1 * 100</li>
        /// </ul></p>
        /// <pre><code>
        /// new Ext.Container({
        /// width: 300,
        /// height: 400,
        /// layout: {
        /// type: 'vbox',
        /// align: 'stretch'
        /// },
        /// items: [{
        /// flex: 2,
        /// html: 'First'
        /// },{
        /// width: 100,
        /// html: 'Second'
        /// },{
        /// flex: 1,
        /// html: 'Third'
        /// }]
        /// });
        /// </code></pre>
        /// This layout may also be used to set the widths of child items by configuring it with the {@link #align} option.
        /// </summary>
        public JsString orientation{get;set;}
    }
    #endregion
    #region VBoxLayoutConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class VBoxLayoutConfig
    {
        public VBoxLayoutConfig(){}
        /// <summary>
        /// Specifies the horizontal alignignment of child components. Defaults to <tt>'center'</tt>. Acceptable values are:
        /// <ul>
        /// <li><b>center</b> : <div class="sub-desc">
        /// Aligned to the center of the container.
        /// </div></li>
        /// <li><b>end</b> : <div class="sub-desc">
        /// Aligned to the right of the container.
        /// </div></li>
        /// <li><b>start</b> : <div class="sub-desc">
        /// Aligned to the left of the container.
        /// </div></li>
        /// <li><b>stretch</b> : <div class="sub-desc">
        /// Components are stretched horizontally to fill the container.
        /// </div></li>
        /// </ul>
        /// </summary>
        public JsString align{get;set;}
        /// <summary>
        /// Specifies the vertical alignment of child components. Defaults to <tt>'start'</tt>. Acceptable values are:
        /// <ul>
        /// <li><b>center</b> : <div class="sub-desc">
        /// Aligned to the center of the container.
        /// </div></li>
        /// <li><b>end</b> : <div class="sub-desc">
        /// Aligned to the bottom of the container.
        /// </div></li>
        /// <li><b>justify</b> : <div class="sub-desc">
        /// Justified with both the top and bottom of the container.
        /// </div></li>
        /// <li><b>start</b> : <div class="sub-desc">
        /// Aligned to the top of the container.
        /// </div></li>
        /// </ul>
        /// </summary>
        public JsString pack{get;set;}
    }
    #endregion
}
#endregion
#region Ext.lib
namespace Ext.lib
{
    #region Component
    /// <summary>
    /// @class Ext.lib.Component
    /// @extends Ext.util.Observable
    /// Shared Component class
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Component : Observable
    {
        public Component(){}
        public Component(Ext.lib.ComponentConfig config){}
        public void addClass(){}
        /// <summary>
        /// Adds a CSS class to the top level element representing this component.
        /// @returns {Ext.Component} Returns the Component to allow method chaining.
        /// </summary>
        public void addCls(){}
        public void addListener(object element, object listeners, object scope, object options){}
        public void afterRender(){}
        /// <summary>
        /// Sets references to elements inside the component. E.g body -> x-panel-body
        /// @private
        /// </summary>
        public void applyRenderSelectors(){}
        /// <summary>
        /// Read-only property indicating whether or not the component has been rendered.
        /// @property rendered
        /// @type {Boolean}
        /// </summary>
        public Component(object config){}
        /// <summary>
        /// Destroys the Component.
        /// </summary>
        public void destroy(){}
        /// <summary>
        /// Disable the component.
        /// @param {Boolean} silent
        /// Passing true, will supress the 'disable' event from being fired.
        /// </summary>
        public void disable(bool silent){}
        /// <summary>
        /// This method needs to be called whenever you change something on this component that requires the components
        /// layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
        /// label of a form field. After a component layout, the container layout will automatically be run. So you could
        /// be on the safe side and always call doComponentLayout instead of doLayout.
        /// @return {Ext.Container} this
        /// </summary>
        public Ext.Container doComponentLayout(object width, object height, object isSetSize){return null;}
        /// <summary>
        /// Enable the component
        /// @param {Boolean} silent
        /// Passing false will supress the 'enable' event from being fired.
        /// </summary>
        public void enable(bool silent){}
        /// <summary>
        /// Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.
        /// @return {Ext.Container} the Container which owns this Component.
        /// </summary>
        public Ext.Container getBubbleTarget(){return null;}
        public void getComponentLayout(){}
        /// <summary>
        /// Retrieves the top level element representing this component.
        /// </summary>
        public void getEl(){}
        public void getElConfig(){}
        /// <summary>
        /// Gets the current height of the component's underlying element.
        /// @return {Number}
        /// </summary>
        public void getHeight(){}
        /// <summary>
        /// Retrieves the id of this component.
        /// Will autogenerate an id if one has not already been set.
        /// </summary>
        public void getId(){}
        /// <summary>
        /// This function takes the position argument passed to onRender and returns a
        /// DOM element that you can use in the insertBefore.
        /// @param {String/Number/Element/HTMLElement} position Index, element id or element you want
        /// to put this component before.
        /// @return {HTMLElement} DOM element that you can use in the insertBefore
        /// </summary>
        public HtmlElement getInsertPosition(object position){return null;}
        public void getItemId(){}
        /// <summary>
        /// Gets the current size of the component's underlying element.
        /// @return {Object} An object containing the element's size {width: (element width), height: (element height)}
        /// </summary>
        public object getSize(){return null;}
        /// <summary>
        /// This is used to determine where to insert the 'html', 'contentEl' and 'items' in this component.
        /// @private
        /// </summary>
        public void getTargetEl(){}
        /// <summary>
        /// Gets the current width of the component's underlying element.
        /// @return {Number}
        /// </summary>
        public void getWidth(){}
        /// <summary>
        /// <p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
        /// available xtypes, see the {@link Ext.Component} header.</p>
        /// <p><b>If using your own subclasses, be aware that a Component must register its own xtype
        /// to participate in determination of inherited xtypes.</b></p>
        /// <p>Example usage:</p>
        /// <pre><code>
        /// var t = new Ext.form.Text();
        /// alert(t.getXTypes());  // alerts 'component/field/textfield'
        /// </code></pre>
        /// @return {String} The xtype hierarchy string
        /// </summary>
        public JsString getXTypes(){return null;}
        /// <summary>
        /// <p>Creates an array of class names from the configurations to add to this Component's <code>el</code> on render.</p>
        /// <p>Private, but (possibly) used by ComponentQuery for selection by class name if Component is not rendered.</p>
        /// @return {Array} An array of class names with which the Component's element will be rendered.
        /// @private
        /// </summary>
        public JsArray initCls(){return null;}
        /// <summary>
        /// Adds ctCls to container.
        /// @return {Ext.Element} The initialized container
        /// @private
        /// </summary>
        public Element initContainer(object container){return null;}
        /// <summary>
        /// Initializes this components contents. It checks for the properties
        /// html, contentEl and tpl/data.
        /// @private
        /// </summary>
        public void initContent(){}
        public void initEvents(){}
        public void initPlugin(object plugin){}
        /// <summary>
        /// Initialized the renderData to be used when rendering the renderTpl.
        /// @return {Object} Object with keys and values that are going to be applied to the renderTpl
        /// @private
        /// </summary>
        public object initRenderData(){return null;}
        /// <summary>
        /// Initializes the renderTpl.
        /// @return {Ext.XTemplate} The renderTpl XTemplate instance.
        /// @private
        /// </summary>
        public XTemplate initRenderTpl(){return null;}
        /// <summary>
        /// Function description
        /// @return {String} A CSS style string with style, padding, margin and border.
        /// @private
        /// </summary>
        public JsString initStyles(){return null;}
        public void @is(object selector){}
        /// <summary>
        /// Method to determine whether this Component is currently disabled.
        /// @return {Boolean} the disabled state of this Component.
        /// </summary>
        public bool isDisabled(){return false;}
        /// <summary>
        /// Method to determine whether this Component is draggable.
        /// @return {Boolean} the draggable state of this component.
        /// </summary>
        public bool isDraggable(){return false;}
        /// <summary>
        /// Method to determine whether this Component is droppable.
        /// @return {Boolean} the droppable state of this component.
        /// </summary>
        public bool isDroppable(){return false;}
        /// <summary>
        /// Method to determine whether this Component is floating.
        /// @return {Boolean} the floating state of this component.
        /// </summary>
        public bool isFloating(){return false;}
        /// <summary>
        /// Method to determine whether this Component is currently set to hidden.
        /// @return {Boolean} the hidden state of this Component.
        /// </summary>
        public bool isHidden(){return false;}
        /// <summary>
        /// Returns true if this component is visible.
        /// @return {Boolean} True if this component is visible, false otherwise.
        /// </summary>
        public bool isVisible(){return false;}
        /// <summary>
        /// <p>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
        /// from the xtype (default) or whether it is directly of the xtype specified (shallow = true).</p>
        /// <p><b>If using your own subclasses, be aware that a Component must register its own xtype
        /// to participate in determination of inherited xtypes.</b></p>
        /// <p>For a list of all available xtypes, see the {@link Ext.Component} header.</p>
        /// <p>Example usage:</p>
        /// <pre><code>
        /// var t = new Ext.form.Text();
        /// var isText = t.isXType('textfield');        // true
        /// var isBoxSubclass = t.isXType('field');       // true, descended from Ext.form.Field
        /// var isBoxInstance = t.isXType('field', true); // false, not a direct Ext.form.Field instance
        /// </code></pre>
        /// @param {String} xtype The xtype to check for this Component
        /// @param {Boolean} shallow (optional) False to check whether this Component is descended from the xtype (this is
        /// the default), or true to check whether this Component is directly of the specified xtype.
        /// @return {Boolean} True if this component descends from the specified xtype, false otherwise.
        /// </summary>
        public bool isXType(JsString xtype, bool shallow){return false;}
        /// <summary>
        /// <p>Returns the next sibling of this Component.</p>
        /// <p>Optionally selects the next sibling which matches the passed {@link Ext.ComponentQuery ComponentQuery} selector.</p>
        /// <p>May also be refered to as <code><b>prev()</b></code></p>
        /// @param selector Optional. A {@link Ext.ComponentQuery ComponentQuery} selector to filter the following items.
        /// @returns The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling.
        /// </summary>
        public void nextSibling(object selector){}
        /// <summary>
        /// @private
        /// Method to manage awareness of when components are added to their
        /// respective Container, firing an added event.
        /// References are established at add time rather than at render time.
        /// @param {Ext.Container} container Container which holds the component
        /// @param {number} pos Position at which the component was added
        /// </summary>
        public void onAdded(Ext.Container container, object pos){}
        public void onDestroy(){}
        /// <summary>
        /// @private
        /// Method to manage awareness of when components are removed from their
        /// respective Container, firing an removed event. References are properly
        /// cleaned up after removing a component from its owning container.
        /// </summary>
        public void onRemoved(){}
        public void onRender(object container, object position){}
        public void onShow(){}
        /// <summary>
        /// <p>Returns the previous sibling of this Component.</p>
        /// <p>Optionally selects the previous sibling which matches the passed {@link Ext.ComponentQuery ComponentQuery} selector.</p>
        /// <p>May also be refered to as <code><b>prev()</b></code></p>
        /// @param selector Optional. A {@link Ext.ComponentQuery ComponentQuery} selector to filter the preceding items.
        /// @returns The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling.
        /// </summary>
        public void previousSibling(object selector){}
        public void removeClass(){}
        /// <summary>
        /// Removes a CSS class from the top level element representing this component.
        /// @returns {Ext.Component} Returns the Component to allow method chaining.
        /// </summary>
        public void removeCls(){}
        public void render(object container, object position){}
        public void setCalculatedSize(object width, object height){}
        public void setComponentLayout(object layout){}
        /// <summary>
        /// Enable or disable the component.
        /// @param {Boolean} disabled
        /// </summary>
        public void setDisabled(bool disabled){}
        /// <summary>
        /// Sets the dock position of this component in its parent panel. Note that
        /// this only has effect if this item is part of the dockedItems collection
        /// of a parent that has a DockLayout (note that any Panel has a DockLayout
        /// by default)
        /// @return {Component} this
        /// </summary>
        public void setDocked(object dock, object layoutParent){}
        /// <summary>
        /// Sets the height of the component.  This method fires the {@link #resize} event.
        /// @param {Number} height The new height to set. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style.</li>
        /// <li><i>undefined</i> to leave the height unchanged.</li>
        /// </ul></div>
        /// @return {Ext.Component} this
        /// </summary>
        public Ext.Component setHeight(JsNumber height){return null;}
        /// <summary>
        /// This method allows you to show or hide a LoadMask on top of this component.
        /// @param {Boolean/Object} load True to show the default LoadMask or a config object
        /// that will be passed to the LoadMask constructor. False to hide the current LoadMask.
        /// @param {Boolean} targetEl True to mask the targetEl of this Component instead of the this.el.
        /// For example, setting this to true on a Panel will cause only the body to be masked. (defaults to false)
        /// @return {Ext.LoadMask} The LoadMask instance that has just been shown.
        /// </summary>
        public LoadMask setLoading(object load, bool targetEl){return null;}
        /// <summary>
        /// Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.
        /// This method fires the {@link #move} event.
        /// @param {Number} left The new left
        /// @param {Number} top The new top
        /// @return {Ext.Component} this
        /// </summary>
        public Ext.Component setPosition(JsNumber x, JsNumber y){return null;}
        /// <summary>
        /// Sets the width and height of this Component. This method fires the {@link #resize} event. This method can accept
        /// either width and height as separate arguments, or you can pass a size object like <code>{width:10, height:20}</code>.
        /// @param {Mixed} width The new width to set. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style.</li>
        /// <li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>
        /// <li><code>undefined</code> to leave the width unchanged.</li>
        /// </ul></div>
        /// @param {Mixed} height The new height to set (not required if a size object is passed as the first arg).
        /// This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
        /// <li><code>undefined</code> to leave the height unchanged.</li>
        /// </ul></div>
        /// @return {Ext.Component} this
        /// </summary>
        public Ext.Component setSize(object width, object height){return null;}
        /// <summary>
        /// Convenience function to hide or show this component by boolean.
        /// @param {Boolean} visible True to show, false to hide
        /// @return {Ext.Component} this
        /// </summary>
        public Ext.Component setVisible(bool visible){return null;}
        /// <summary>
        /// Sets the width of the component.  This method fires the {@link #resize} event.
        /// @param {Number} width The new width to setThis may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style.</li>
        /// </ul></div>
        /// @return {Ext.Component} this
        /// </summary>
        public Ext.Component setWidth(JsNumber width){return null;}
        /// <summary>
        /// <p>Walks up the <code>ownerCt</code> axis looking for an ancestor Container which matches
        /// the passed simple selector.</p>
        /// <p>Example:<pre><code>
        /// var owningTabContainer = grid.up('tabcontainer');
        /// </code></pre>
        /// @param {String} selector Optional. The simple selector to test.
        /// @return {Ext.Container} The matching ancestor Container (or <code>undefined</code> if no match was found).
        /// </summary>
        public Ext.Container up(JsString selector){return null;}
        /// <summary>
        /// Update the content area of a component.
        /// @param {Mixed} htmlOrData
        /// If this component has been configured with a template via the tpl config
        /// then it will use this argument as data to populate the template.
        /// If this component was not configured with a template, the components
        /// content area will be updated via Ext.Element update
        /// @param {Boolean} loadScripts
        /// (optional) Only legitimate when using the html configuration. Defaults to false
        /// @param {Function} callback
        /// (optional) Only legitimate when using the html configuration. Callback to execute when scripts have finished loading
        /// </summary>
        public void update(object htmlOrData, bool loadScripts, JsAction cb){}
        /// <summary>
        /// @cfg {Number} maxWidth
        /// <p>The maximum value in pixels which this Component will set its width to.</p>
        /// <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
        /// </summary>
        public bool allowDomMove{get;set;}
        public bool autoRender{get;set;}
        public bool autoShow{get;set;}
        /// <summary>
        /// @cfg {String} baseCls
        /// The base CSS class to apply to this components's element. This will also be prepended to
        /// elements within this component like Panel's body will get a class x-panel-body. This means
        /// that if you create a subclass of Panel, and you want it to get all the Panels styling for the
        /// element and the body, you leave the baseCls x-panel and use componentCls to add specific styling for this
        /// component.
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.
        /// @return {Ext.Container} the Container which owns this Component.
        /// </summary>
        [JsProperty]
        public Ext.Container BubbleTarget{[JsMethod(Name="getBubbleTarget")]get;private set;}
        [JsProperty]
        public object ComponentLayout{private get;[JsMethod(Name="setComponentLayout")]set;}
        /// <summary>
        /// @cfg {Boolean} disabled
        /// Defaults to false.
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// Enable or disable the component.
        /// @param {Boolean} disabled
        /// </summary>
        [JsProperty]
        public bool Disabled{private get;[JsMethod(Name="setDisabled")]set;}
        /// <summary>
        /// @cfg {String} disabledCls
        /// CSS class to add when the Component is disabled. Defaults to 'x-item-disabled'.
        /// </summary>
        public JsString disabledCls{get;set;}
        /// <summary>
        /// Read-only property indicating whether or not the component can be dragged
        /// @property draggable
        /// @type {Boolean}
        /// </summary>
        public bool draggable{get;set;}
        /// <summary>
        /// @cfg {Boolean} floating
        /// Create the Component as a floating and use absolute positioning.
        /// Defaults to false.
        /// </summary>
        public bool floating{get;set;}
        /// <summary>
        /// Sets the height of the component.  This method fires the {@link #resize} event.
        /// @param {Number} height The new height to set. This may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS height style.</li>
        /// <li><i>undefined</i> to leave the height unchanged.</li>
        /// </ul></div>
        /// @return {Ext.Component} this
        /// </summary>
        [JsProperty]
        public JsNumber Height{private get;[JsMethod(Name="setHeight")]set;}
        /// <summary>
        /// @cfg {Boolean} hidden
        /// Defaults to false.
        /// </summary>
        public bool hidden{get;set;}
        /// <summary>
        /// @class Ext.lib.Component
        /// @extends Ext.util.Observable
        /// Shared Component class
        /// </summary>
        public bool isComponent{get;set;}
        public bool needsLayout{get;set;}
        /// <summary>
        /// Read-only property indicating whether or not the component has been rendered.
        /// @property rendered
        /// @type {Boolean}
        /// </summary>
        public bool rendered{get;set;}
        /// <summary>
        /// @cfg {Mixed} renderTpl
        /// <p>An {@link Ext.XTemplate XTemplate} used to create the internal structure inside this Component's
        /// encapsulating {@link #getEl Element}.</p>
        /// <p>You do not normally need to specify this. For the base classes {@link Ext.Component}
        /// and {@link Ext.Container}, this defaults to <b><code>null</code></b> which means that they will be initially rendered
        /// with no internal structure; they render their {@link #getEl Element} empty. The more specialized ExtJS and Touch classes
        /// which use a more complex DOM structure, provide their own template definitions.</p>
        /// <p>This is intended to allow the developer to create application-specific utility Components with customized
        /// internal structure.</p>
        /// <p>Upon rendering, any created child elements may be automatically imported into object properties using the
        /// {@link #renderSelectors} option.</p>
        /// </summary>
        public object renderTpl{get;set;}
        /// <summary>
        /// Gets the current size of the component's underlying element.
        /// @return {Object} An object containing the element's size {width: (element width), height: (element height)}
        /// </summary>
        [JsProperty]
        public object Size{[JsMethod(Name="getSize")]get;private set;}
        /// <summary>
        /// @cfg {String} styleHtmlCls
        /// The class that is added to the content target when you set styleHtmlContent to true.
        /// Defaults to 'x-html'
        /// </summary>
        public JsString styleHtmlCls{get;set;}
        /// <summary>
        /// @cfg {String} styleHtmlContent
        /// True to automatically style the html inside the content target of this component (body for panels).
        /// Defaults to false.
        /// </summary>
        public JsString styleHtmlContent{get;set;}
        /// <summary>
        /// @cfg {String} tplWriteMode The Ext.(X)Template method to use when
        /// updating the content area of the Component. Defaults to <code>'overwrite'</code>
        /// (see <code>{@link Ext.XTemplate#overwrite}</code>).
        /// </summary>
        public JsString tplWriteMode{get;set;}
        /// <summary>
        /// Convenience function to hide or show this component by boolean.
        /// @param {Boolean} visible True to show, false to hide
        /// @return {Ext.Component} this
        /// </summary>
        [JsProperty]
        public bool Visible{private get;[JsMethod(Name="setVisible")]set;}
        /// <summary>
        /// Sets the width of the component.  This method fires the {@link #resize} event.
        /// @param {Number} width The new width to setThis may be one of:<div class="mdetail-params"><ul>
        /// <li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
        /// <li>A String used to set the CSS width style.</li>
        /// </ul></div>
        /// @return {Ext.Component} this
        /// </summary>
        [JsProperty]
        public JsNumber Width{private get;[JsMethod(Name="setWidth")]set;}
        /// <summary>
        /// <p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
        /// available xtypes, see the {@link Ext.Component} header.</p>
        /// <p><b>If using your own subclasses, be aware that a Component must register its own xtype
        /// to participate in determination of inherited xtypes.</b></p>
        /// <p>Example usage:</p>
        /// <pre><code>
        /// var t = new Ext.form.Text();
        /// alert(t.getXTypes());  // alerts 'component/field/textfield'
        /// </code></pre>
        /// @return {String} The xtype hierarchy string
        /// </summary>
        [JsProperty]
        public JsString XTypes{[JsMethod(Name="getXTypes")]get;private set;}
    }
    #endregion
    #region ComponentConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ComponentConfig
    {
        public ComponentConfig(){}
        /// <summary>
        /// The base CSS class to apply to this components's element. This will also be prepended to
        /// elements within this component like Panel's body will get a class x-panel-body. This means
        /// that if you create a subclass of Panel, and you want it to get all the Panels styling for the
        /// element and the body, you leave the baseCls x-panel and use componentCls to add specific styling for this
        /// component.
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// Specifies the border for this component. The border can be a single numeric value to apply to all sides or
        /// it can be a CSS style specification for each style, for example: '10 5 3 10'.
        /// </summary>
        public object border{get;set;}
        /// <summary>
        /// An optional extra CSS class that will be added to this component's Element (defaults to '').  This can be
        /// useful for adding customized styles to the component or any of its children using standard CSS rules.
        /// </summary>
        public JsString cls{get;set;}
        /// <summary>
        /// CSS Class to be added to a components root level element to give distinction to it
        /// via styling.
        /// </summary>
        public JsString componentCls{get;set;}
        /// <summary>
        /// <br><p>The sizing and positioning of the component Elements is the responsibility of
        /// the Component's layout manager which creates and manages the type of layout specific to the component.
        /// <p>If the {@link #layout} configuration is not explicitly specified for
        /// a general purpose compopnent the
        /// {@link Ext.layout.AutoComponentLayout default layout manager} will be used.
        /// </summary>
        public object componentLayout{get;set;}
        /// <summary>
        /// <p>Optional. Specify an existing HTML element, or the <code>id</code> of an existing HTML element to use as the content
        /// for this component.</p>
        /// <ul>
        /// <li><b>Description</b> :
        /// <div class="sub-desc">This config option is used to take an existing HTML element and place it in the layout element
        /// of a new component (it simply moves the specified DOM element <i>after the Component is rendered</i> to use as the content.</div></li>
        /// <li><b>Notes</b> :
        /// <div class="sub-desc">The specified HTML element is appended to the layout element of the component <i>after any configured
        /// {@link #html HTML} has been inserted</i>, and so the document will not contain this element at the time the {@link #render} event is fired.</div>
        /// <div class="sub-desc">The specified HTML element used will not participate in any <code><b>{@link Ext.Container#layout layout}</b></code>
        /// scheme that the Component may use. It is just HTML. Layouts operate on child <code><b>{@link Ext.Container#items items}</b></code>.</div>
        /// <div class="sub-desc">Add either the <code>x-hidden</code> or the <code>x-hide-display</code> CSS class to
        /// prevent a brief flicker of the content before it is rendered to the panel.</div></li>
        /// </ul>
        /// </summary>
        public JsString contentEl{get;set;}
        /// <summary>
        /// The initial set of data to apply to the <code>{@link #tpl}</code> to
        /// update the content area of the Component.
        /// </summary>
        public object data{get;set;}
        /// <summary>
        /// Defaults to false.
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// CSS class to add when the Component is disabled. Defaults to 'x-item-disabled'.
        /// </summary>
        public JsString disabledCls{get;set;}
        /// <summary>
        /// Allows the component to be dragged via the touch event.
        /// </summary>
        public bool draggable{get;set;}
        /// <summary>
        /// Create the Component as a floating and use absolute positioning.
        /// Defaults to false.
        /// </summary>
        public bool floating{get;set;}
        /// <summary>
        /// The height of this component in pixels.
        /// </summary>
        public JsNumber height{get;set;}
        /// <summary>
        /// Defaults to false.
        /// </summary>
        public bool hidden{get;set;}
        /// <summary>
        /// An HTML fragment, or a {@link Ext.DomHelper DomHelper} specification to use as the layout element
        /// content (defaults to ''). The HTML content is added after the component is rendered,
        /// so the document will not contain this HTML at the time the {@link #render} event is fired.
        /// This content is inserted into the body <i>before</i> any configured {@link #contentEl} is appended.
        /// </summary>
        public object html{get;set;}
        /// <summary>
        /// Specifies the margin for this component. The margin can be a single numeric value to apply to all sides or
        /// it can be a CSS style specification for each style, for example: '10 5 3 10'.
        /// </summary>
        public object margin{get;set;}
        /// <summary>
        /// <p>The maximum value in pixels which this Component will set its height to.</p>
        /// <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
        /// </summary>
        public JsNumber maxHeight{get;set;}
        /// <summary>
        /// <p>The maximum value in pixels which this Component will set its width to.</p>
        /// <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
        /// </summary>
        public JsNumber maxWidth{get;set;}
        /// <summary>
        /// <p>The minimum value in pixels which this Component will set its height to.</p>
        /// <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
        /// </summary>
        public JsNumber minHeight{get;set;}
        /// <summary>
        /// <p>The minimum value in pixels which this Component will set its width to.</p>
        /// <p><b>Warning:</b> This will override any size management applied by layout managers.</p>
        /// </summary>
        public JsNumber minWidth{get;set;}
        /// <summary>
        /// Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or
        /// it can be a CSS style specification for each style, for example: '10 5 3 10'.
        /// </summary>
        public object padding{get;set;}
        /// <summary>
        /// An object or array of objects that will provide custom functionality for this component.  The only
        /// requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component.
        /// When a component is created, if any plugins are available, the component will call the init method on each
        /// plugin, passing a reference to itself.  Each plugin can then call methods or respond to events on the
        /// component as needed to provide its functionality.
        /// </summary>
        public object plugins{get;set;}
        /// <summary>
        /// <p>An object containing properties specifying {@link Ext.DomQuery DomQuery} selectors which identify child elements
        /// created by the render process.</p>
        /// <p>After the Component's internal structure is rendered according to the {@link renderTpl}, this object is iterated through,
        /// and the found Elements are added as properties to the Component using the <code>renderSelector</code> property name.</p>
        /// <p>For example, a Component which rendered an image, and description into its element might use the following properties
        /// coded into its prototype:<pre><code>
        /// renderTpl: '<img src="{imageUrl}" class="x-image-component-img"><div class="x-image-component-desc">{description}</div>',
        /// renderSelectors: {
        /// image: 'img.x-image-component-img',
        /// descEl: 'div.x-image-component-desc'
        /// }
        /// </code></pre>
        /// <p>After rendering, the Component would have a property <code>image</code> referencing its child <code>img</code> Element,
        /// and a property <code>descEl</code> referencing the <code>div</code> Element which contains the description.</p>
        /// </summary>
        public object renderSelectors{get;set;}
        /// <summary>
        /// <p>Specify the id of the element, a DOM element or an existing Element that this component
        /// will be rendered into.</p><div><ul>
        /// <li><b>Notes</b> : <ul>
        /// <div class="sub-desc">Do <u>not</u> use this option if the Component is to be a child item of
        /// a {@link Ext.Container Container}. It is the responsibility of the
        /// {@link Ext.Container Container}'s {@link Ext.Container#layout layout manager}
        /// to render and manage its child items.</div>
        /// <div class="sub-desc">When using this config, a call to render() is not required.</div>
        /// </ul></li>
        /// </ul></div>
        /// <p>See <code>{@link #render}</code> also.</p>
        /// </summary>
        public object renderTo{get;set;}
        /// <summary>
        /// <p>An {@link Ext.XTemplate XTemplate} used to create the internal structure inside this Component's
        /// encapsulating {@link #getEl Element}.</p>
        /// <p>You do not normally need to specify this. For the base classes {@link Ext.Component}
        /// and {@link Ext.Container}, this defaults to <b><code>null</code></b> which means that they will be initially rendered
        /// with no internal structure; they render their {@link #getEl Element} empty. The more specialized ExtJS and Touch classes
        /// which use a more complex DOM structure, provide their own template definitions.</p>
        /// <p>This is intended to allow the developer to create application-specific utility Components with customized
        /// internal structure.</p>
        /// <p>Upon rendering, any created child elements may be automatically imported into object properties using the
        /// {@link #renderSelectors} option.</p>
        /// </summary>
        public object renderTpl{get;set;}
        /// <summary>
        /// A custom style specification to be applied to this component's Element.  Should be a valid argument to
        /// {@link Ext.Element#applyStyles}.
        /// <pre><code>
        /// new Ext.Panel({
        /// title: 'Some Title',
        /// renderTo: Ext.getBody(),
        /// width: 400, height: 300,
        /// layout: 'form',
        /// items: [{
        /// xtype: 'textareafield',
        /// style: {
        /// width: '95%',
        /// marginBottom: '10px'
        /// }
        /// },
        /// new Ext.Button({
        /// text: 'Send',
        /// minWidth: '100',
        /// style: {
        /// marginBottom: '10px'
        /// }
        /// })
        /// ]
        /// });
        /// </code></pre>
        /// </summary>
        public JsString style{get;set;}
        /// <summary>
        /// The class that is added to the content target when you set styleHtmlContent to true.
        /// Defaults to 'x-html'
        /// </summary>
        public JsString styleHtmlCls{get;set;}
        /// <summary>
        /// True to automatically style the html inside the content target of this component (body for panels).
        /// Defaults to false.
        /// </summary>
        public JsString styleHtmlContent{get;set;}
        /// <summary>
        /// An <bold>{@link Ext.Template}</bold>, <bold>{@link Ext.XTemplate}</bold>
        /// or an array of strings to form an Ext.XTemplate.
        /// Used in conjunction with the <code>{@link #data}</code> and
        /// <code>{@link #tplWriteMode}</code> configurations.
        /// </summary>
        public object tpl{get;set;}
        /// <summary>
        /// The Ext.(X)Template method to use when
        /// updating the content area of the Component. Defaults to <code>'overwrite'</code>
        /// (see <code>{@link Ext.XTemplate#overwrite}</code>).
        /// </summary>
        public JsString tplWriteMode{get;set;}
        /// <summary>
        /// A set of predefined ui styles for individual components.
        /// *
        /// Most components support 'light' and 'dark'.
        /// *
        /// Extra string added to the baseCls with an extra '-'.
        /// <pre><code>
        /// new Ext.Panel({
        /// title: 'Some Title',
        /// baseCls: 'x-component'
        /// ui: 'green'
        /// });
        /// </code></pre>
        /// <p>The ui configuration in this example would add 'x-component-green' as an additional class.</p>
        /// </summary>
        public JsString ui{get;set;}
        /// <summary>
        /// The width of this component in pixels.
        /// </summary>
        public JsNumber width{get;set;}
    }
    #endregion
    #region Container
    /// <summary>
    /// @class Ext.lib.Container
    /// @extends Ext.Component
    /// Shared Container class
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Container : Ext.Component
    {
        public Container(Ext.lib.ContainerConfig config){}
        public Container(Ext.ComponentConfig config){}
        public Container(){}
        /// <summary>
        /// <p>Adds {@link Ext.Component Component}(s) to this Container.</p>
        /// <br><p><b>Description</b></u> :
        /// <div><ul class="mdetail-params">
        /// <li>Fires the {@link #beforeadd} event before adding</li>
        /// <li>The Container's {@link #defaults default config values} will be applied
        /// accordingly (see <code>{@link #defaults}</code> for details).</li>
        /// <li>Fires the {@link #add} event after the component has been added.</li>
        /// </ul></div>
        /// <br><p><b>Notes</b></u> :
        /// <div><ul class="mdetail-params">
        /// <li>If the Container is <i>already rendered</i> when <code>add</code>
        /// is called, you may need to call {@link #doLayout} to refresh the view which causes
        /// any unrendered child Components to be rendered. This is required so that you can
        /// <code>add</code> multiple child components if needed while only refreshing the layout
        /// once. For example:<pre><code>
        /// var tb = new {@link Ext.Toolbar}();
        /// tb.render(document.body);  // toolbar is rendered
        /// tb.add({text:'Button 1'}); // add multiple items ({@link #defaultType} for {@link Ext.Toolbar Toolbar} is 'button')
        /// tb.add({text:'Button 2'});
        /// tb.{@link #doLayout}();             // refresh the layout
        /// </code></pre></li>
        /// <li><i>Warning:</i> Containers directly managed by the BorderLayout layout manager
        /// may not be removed or added.  See the Notes for {@link Ext.layout.BorderLayout BorderLayout}
        /// for more details.</li>
        /// </ul></div>
        /// @param {...Object/Array} component
        /// <p>Either one or more Components to add or an Array of Components to add.  See
        /// <code>{@link #items}</code> for additional information.</p>
        /// @return {Ext.Component/Array} The Components that were added.
        /// </summary>
        public object add(){return null;}
        public void afterLayout(object layout){}
        public new void afterRender(){}
        public void applyDefaults(object config){}
        public new void beforeDestroy(){}
        /// <summary>
        /// Retrieves the first direct child of this container which matches the passed selector.
        /// The passed in selector must comply with an Ext.ComponentQuery selector.
        /// @param {String} selector An Ext.ComponentQuery selector
        /// @return Ext.Component
        /// </summary>
        public void child(JsString selector){}
        public void createComponent(object config, object defaultType){}
        /// <summary>
        /// Force this container's layout to be recalculated. A call to this function is required after adding a new component
        /// to an already rendered container, or possibly after changing sizing/position properties of child components.
        /// @return {Ext.Container} this
        /// </summary>
        public Ext.Container doLayout(){return null;}
        public void doRemove(object component, object autoDestroy){}
        /// <summary>
        /// Retrieves the first descendant of this container which matches the passed selector.
        /// The passed in selector must comply with an Ext.ComponentQuery selector.
        /// @param {String} selector An Ext.ComponentQuery selector
        /// @return Ext.Component
        /// </summary>
        public void down(JsString selector){}
        /// <summary>
        /// Examines this container's <code>{@link #items}</code> <b>property</b>
        /// and gets a direct child component of this container.
        /// @param {String/Number} comp This parameter may be any of the following:
        /// <div><ul class="mdetail-params">
        /// <li>a <b><code>String</code></b> : representing the <code>{@link Ext.Component#itemId itemId}</code>
        /// or <code>{@link Ext.Component#id id}</code> of the child component </li>
        /// <li>a <b><code>Number</code></b> : representing the position of the child component
        /// within the <code>{@link #items}</code> <b>property</b></li>
        /// </ul></div>
        /// <p>For additional information see {@link Ext.util.MixedCollection#get}.
        /// @return Ext.Component The component (if found).
        /// </summary>
        public void getComponent(object comp){}
        public void getComponentId(object comp){}
        /// <summary>
        /// Returns the {@link Ext.layout.ContainerLayout layout} instance currently associated with this Container.
        /// If a layout has not been instantiated yet, that is done first
        /// @return {Ext.layout.ContainerLayout} The layout
        /// </summary>
        public ContainerLayout getLayout(){return null;}
        public void getRefItems(object deep){}
        public new void initComponent(){}
        public void initItems(){}
        /// <summary>
        /// Inserts a Component into this Container at a specified index. Fires the
        /// {@link #beforeadd} event before inserting, then fires the {@link #add} event after the
        /// Component has been inserted.
        /// @param {Number} index The index at which the Component will be inserted
        /// into the Container's items collection
        /// @param {Ext.Component} component The child Component to insert.<br><br>
        /// Ext uses lazy rendering, and will only render the inserted Component should
        /// it become necessary.<br><br>
        /// A Component config object may be passed in order to avoid the overhead of
        /// constructing a real Component object if lazy rendering might mean that the
        /// inserted Component will not be rendered immediately. To take advantage of
        /// this 'lazy instantiation', set the {@link Ext.Component#xtype} config
        /// property to the registered type of the Component wanted.<br><br>
        /// For a list of all available xtypes, see {@link Ext.Component}.
        /// @return {Ext.Component} component The Component (or config object) that was
        /// inserted with the Container's default config values applied.
        /// </summary>
        public Ext.Component insert(JsNumber index, Ext.Component comp){return null;}
        public void lookupComponent(object comp){}
        public void onBeforeAdd(object item){}
        public void prepareItems(object items, object applyDefaults){}
        /// <summary>
        /// Retrieves all descendant components which match the passed selector.
        /// Executes an Ext.ComponentQuery.query using this container as its root.
        /// @param {String} selector Selector complying to an Ext.ComponentQuery selector
        /// @return {Array} Ext.Component's which matched the selector
        /// </summary>
        public JsArray query(JsString selector){return null;}
        /// <summary>
        /// Removes a component from this container.  Fires the {@link #beforeremove} event before removing, then fires
        /// the {@link #remove} event after the component has been removed.
        /// @param {Component/String} component The component reference or id to remove.
        /// @param {Boolean} autoDestroy (optional) True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
        /// Defaults to the value of this Container's {@link #autoDestroy} config.
        /// @return {Ext.Component} component The Component that was removed.
        /// </summary>
        public Ext.Component remove(object comp, bool autoDestroy){return null;}
        /// <summary>
        /// Removes all components from this container.
        /// @param {Boolean} autoDestroy (optional) True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
        /// Defaults to the value of this Container's {@link #autoDestroy} config.
        /// @return {Array} Array of the destroyed components
        /// </summary>
        public JsArray removeAll(bool autoDestroy){return null;}
        public void setLayout(object layout){}
        public void show(){}
        /// <summary>
        /// If true the container will automatically destroy any contained component that is removed from it, else
        /// destruction must be handled manually (defaults to true).
        /// </summary>
        public bool autoDestroy{get;set;}
        public new JsString baseCls{get;set;}
        /// <summary>
        /// <p>The default {@link Ext.Component xtype} of child Components to create in this Container when
        /// a child item is specified as a raw configuration object, rather than as an instantiated Component.</p>
        /// <p>Defaults to <code>'panel'</code>.</p>
        /// </summary>
        public JsString defaultType{get;set;}
        /// <summary>
        /// <p>The default {@link Ext.Component xtype} of child Components to create in this Container when
        /// a child item is specified as a raw configuration object, rather than as an instantiated Component.</p>
        /// <p>Defaults to <code>'panel'</code>.</p>
        /// </summary>
        public bool isContainer{get;set;}
        /// <summary>
        /// Returns the {@link Ext.layout.ContainerLayout layout} instance currently associated with this Container.
        /// If a layout has not been instantiated yet, that is done first
        /// @return {Ext.layout.ContainerLayout} The layout
        /// </summary>
        [JsProperty]
        public object Layout{[JsMethod(Name="getLayout")]get;[JsMethod(Name="setLayout")]set;}
    }
    #endregion
    #region ContainerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ContainerConfig
    {
        public ContainerConfig(){}
        /// <summary>
        /// A string component id or the numeric index of the component that should be initially activated within the
        /// container's layout on render.  For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first
        /// item in the container's collection).  activeItem only applies to layout styles that can display
        /// items one at a time (like {@link Ext.layout.CardLayout} and
        /// {@link Ext.layout.FitLayout}).  Related to {@link Ext.layout.ContainerLayout#activeItem}.
        /// </summary>
        public object activeItem{get;set;}
        /// <summary>
        /// <p>An array of events that, when fired, should be bubbled to any parent container.
        /// See {@link Ext.util.Observable#enableBubble}.
        /// Defaults to <code>['add', 'remove']</code>.
        /// </summary>
        public JsArray bubbleEvents{get;set;}
        /// <summary>
        /// <p>This option is a means of applying default settings to all added items whether added through the {@link #items}
        /// config or via the {@link #add} or {@link #insert} methods.</p>
        /// <p>If an added item is a config object, and <b>not</b> an instantiated Component, then the default properties are
        /// unconditionally applied. If the added item <b>is</b> an instantiated Component, then the default properties are
        /// applied conditionally so as not to override existing properties in the item.</p>
        /// <p>If the defaults option is specified as a function, then the function will be called using this Container as the
        /// scope (<code>this</code> reference) and passing the added item as the first parameter. Any resulting object
        /// from that call is then applied to the item as default properties.</p>
        /// <p>For example, to automatically apply padding to the body of each of a set of
        /// contained {@link Ext.Panel} items, you could pass: <code>defaults: {bodyStyle:'padding:15px'}</code>.</p>
        /// <p>Usage:</p><pre><code>
        /// defaults: {               // defaults are applied to items, not the container
        /// autoScroll:true
        /// },
        /// items: [
        /// {
        /// xtype: 'panel',   // defaults <b>do not</b> have precedence over
        /// id: 'panel1',     // options in config objects, so the defaults
        /// autoScroll: false // will not be applied here, panel1 will be autoScroll:false
        /// },
        /// new Ext.Panel({       // defaults <b>do</b> have precedence over options
        /// id: 'panel2',     // options in components, so the defaults
        /// autoScroll: false // will be applied here, panel2 will be autoScroll:true.
        /// })
        /// ]
        /// </code></pre>
        /// </summary>
        public object defaults{get;set;}
        /// <summary>
        /// <pre><b>** IMPORTANT</b>: be sure to <b>{@link #layout specify a <code>layout</code>} if needed ! **</b></pre>
        /// <p>A single item, or an array of child Components to be added to this container,
        /// for example:</p>
        /// <pre><code>
        /// // specifying a single item
        /// items: {...},
        /// layout: 'fit',    // specify a layout!
        /// // specifying multiple items
        /// items: [{...}, {...}],
        /// layout: 'hbox', // specify a layout!
        /// </code></pre>
        /// <p>Each item may be:</p>
        /// <div><ul class="mdetail-params">
        /// <li>any type of object based on {@link Ext.Component}</li>
        /// <li>a fully instanciated object or</li>
        /// <li>an object literal that:</li>
        /// <div><ul class="mdetail-params">
        /// <li>has a specified <code>{@link Ext.Component#xtype xtype}</code></li>
        /// <li>the {@link Ext.Component#xtype} specified is associated with the Component
        /// desired and should be chosen from one of the available xtypes as listed
        /// in {@link Ext.Component}.</li>
        /// <li>If an <code>{@link Ext.Component#xtype xtype}</code> is not explicitly
        /// specified, the {@link #defaultType} for that Container is used.</li>
        /// <li>will be "lazily instanciated", avoiding the overhead of constructing a fully
        /// instanciated Component object</li>
        /// </ul></div></ul></div>
        /// <p><b>Notes</b>:</p>
        /// <div><ul class="mdetail-params">
        /// <li>Ext uses lazy rendering. Child Components will only be rendered
        /// should it become necessary. Items are automatically laid out when they are first
        /// shown (no sizing is done while hidden), or in response to a {@link #doLayout} call.</li>
        /// <li>Do not specify <code>{@link Ext.Panel#contentEl contentEl}</code>/
        /// <code>{@link Ext.Panel#html html}</code> with <code>items</code>.</li>
        /// </ul></div>
        /// </summary>
        public object items{get;set;}
        /// <summary>
        /// <p><b>*Important</b>: In order for child items to be correctly sized and
        /// positioned, typically a layout manager <b>must</b> be specified through
        /// the <code>layout</code> configuration option.</p>
        /// <br><p>The sizing and positioning of child {@link items} is the responsibility of
        /// the Container's layout manager which creates and manages the type of layout
        /// you have in mind.  For example:</p>
        /// <p>If the {@link #layout} configuration is not explicitly specified for
        /// a general purpose container (e.g. Container or Panel) the
        /// {@link Ext.layout.AutoContainerLayout default layout manager} will be used
        /// which does nothing but render child components sequentially into the
        /// Container (no sizing or positioning will be performed in this situation).</p>
        /// <br><p><b><code>layout</code></b> may be specified as either as an Object or
        /// as a String:</p><div><ul class="mdetail-params">
        /// *
        /// <li><u>Specify as an Object</u></li>
        /// <div><ul class="mdetail-params">
        /// <li>Example usage:</li>
        /// <pre><code>
        /// layout: {
        /// type: 'vbox',
        /// align: 'left'
        /// }
        /// </code></pre>
        /// *
        /// <li><code><b>type</b></code></li>
        /// <br/><p>The layout type to be used for this container.  If not specified,
        /// a default {@link Ext.layout.ContainerLayout} will be created and used.</p>
        /// <br/><p>Valid layout <code>type</code> values are:</p>
        /// <div class="sub-desc"><ul class="mdetail-params">
        /// <li><code><b>{@link Ext.layout.ContainerLayout auto}</b></code> &nbsp;&nbsp;&nbsp; <b>Default</b></li>
        /// <li><code><b>{@link Ext.layout.CardLayout card}</b></code></li>
        /// <li><code><b>{@link Ext.layout.FitLayout fit}</b></code></li>
        /// <li><code><b>{@link Ext.layout.HBoxLayout hbox}</b></code></li>
        /// <li><code><b>{@link Ext.layout.VBoxLayout vbox}</b></code></li>
        /// </ul></div>
        /// *
        /// <li>Layout specific configuration properties</li>
        /// <br/><p>Additional layout specific configuration properties may also be
        /// specified. For complete details regarding the valid config options for
        /// each layout type, see the layout class corresponding to the <code>type</code>
        /// specified.</p>
        /// *
        /// </ul></div>
        /// *
        /// <li><u>Specify as a String</u></li>
        /// <div><ul class="mdetail-params">
        /// <li>Example usage:</li>
        /// <pre><code>
        /// layout: {
        /// type: 'vbox',
        /// padding: '5',
        /// align: 'left'
        /// }
        /// </code></pre>
        /// <li><code><b>layout</b></code></li>
        /// <br/><p>The layout <code>type</code> to be used for this container (see list
        /// of valid layout type values above).</p><br/>
        /// <br/><p>Additional layout specific configuration properties. For complete
        /// details regarding the valid config options for each layout type, see the
        /// layout class corresponding to the <code>layout</code> specified.</p>
        /// </ul></div></ul></div>
        /// </summary>
        public object layout{get;set;}
    }
    #endregion
    #region Panel
    /// <summary>
    /// @class Ext.lib.Panel
    /// @extends Ext.Container
    /// Shared Panel class
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Panel : Ext.Container
    {
        public Panel(PanelConfig config){}
        public Panel(){}
        /// <summary>
        /// Adds docked item(s) to the panel.
        /// @param {Object/Array} component. The Component or array of components to add. The components
        /// must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right',
        /// 'bottom', 'left').
        /// @param {Number} pos (optional) The index at which the Component will be added
        /// </summary>
        public void addDocked(object items, JsNumber pos){}
        public new void beforeDestroy(){}
        /// <summary>
        /// Attempts a default component lookup (see {@link Ext.Container#getComponent}). If the component is not found in the normal
        /// items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).
        /// @param {String/Number} comp The docked component id or itemId to find
        /// @return {Ext.Component} The docked component, if found
        /// </summary>
        public new Ext.Component getComponent(object comp){return null;}
        /// <summary>
        /// Finds a docked component by id, itemId or position
        /// @param {String/Number} comp The id, itemId or position of the child component (see {@link #getComponent} for details)
        /// @return {Ext.Component} The component (if found)
        /// </summary>
        public Ext.Component getDockedComponent(object comp){return null;}
        /// <summary>
        /// Retrieve an array of all currently docked components.
        /// @return {Array} An array of components.
        /// </summary>
        public JsArray getDockedItems(){return null;}
        public new void getRefItems(object deep){}
        public new void getTargetEl(){}
        /// <summary>
        /// Function description
        /// @return {String} A CSS style string with style, padding, margin and border.
        /// @private
        /// </summary>
        public JsString initBodyStyles(){return null;}
        /// <summary>
        /// @cfg {Object/Array} dockedItems
        /// A component or series of components to be added as docked items to this panel.
        /// The docked items can be docked to either the top, right, left or bottom of a panel.
        /// This is typically used for things like toolbars or tab bars:
        /// <pre><code>
        /// var panel = new Ext.Panel({
        /// fullscreen: true,
        /// dockedItems: [{
        /// xtype: 'toolbar',
        /// dock: 'top',
        /// items: [{
        /// text: 'Docked to the bottom'
        /// }]
        /// }]
        /// });</pre></code>
        /// </summary>
        public new void initComponent(){}
        public new void initItems(){}
        /// <summary>
        /// Initialized the renderData to be used when rendering the renderTpl.
        /// @return {Object} Object with keys and values that are going to be applied to the renderTpl
        /// @private
        /// </summary>
        public new object initRenderData(){return null;}
        /// <summary>
        /// Inserts docked item(s) to the panel at the indicated position.
        /// @param {Number} pos The index at which the Component will be inserted
        /// @param {Object/Array} component. The Component or array of components to add. The components
        /// must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right',
        /// 'bottom', 'left').
        /// </summary>
        public void insertDocked(JsNumber pos, object items){}
        /// <summary>
        /// Removes the docked item from the panel.
        /// @param {Ext.Component} item. The Component to remove.
        /// @param {Boolean} autoDestroy (optional) Destroy the component after removal.
        /// </summary>
        public void removeDocked(Ext.Component item, bool autoDestroy){}
        /// <summary>
        /// @cfg {String} baseCls
        /// The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).
        /// </summary>
        public new JsString baseCls{get;set;}
        public JsString componentLayout{get;set;}
        /// <summary>
        /// Retrieve an array of all currently docked components.
        /// @return {Array} An array of components.
        /// </summary>
        [JsProperty]
        public JsArray DockedItems{[JsMethod(Name="getDockedItems")]get;private set;}
        /// <summary>
        /// @cfg {Number/Boolean} bodyBorder
        /// A shortcut for setting a border style on the body element. The value can either be
        /// a number to be applied to all sides, or a normal css string describing borders.
        /// Defaults to <tt>undefined</tt>.
        /// </summary>
        public bool isPanel{get;set;}
    }
    #endregion
    #region PanelConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PanelConfig
    {
        public PanelConfig(){}
        /// <summary>
        /// The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// A shortcut for setting a border style on the body element. The value can either be
        /// a number to be applied to all sides, or a normal css string describing borders.
        /// Defaults to <tt>undefined</tt>.
        /// </summary>
        public object bodyBorder{get;set;}
        /// <summary>
        /// A shortcut for setting a margin style on the body element. The value can either be
        /// a number to be applied to all sides, or a normal css string describing margins.
        /// Defaults to <tt>undefined</tt>.
        /// </summary>
        public object bodyMargin{get;set;}
        /// <summary>
        /// A shortcut for setting a padding style on the body element. The value can either be
        /// a number to be applied to all sides, or a normal css string describing padding.
        /// Defaults to <tt>undefined</tt>.
        /// </summary>
        public object bodyPadding{get;set;}
    }
    #endregion
}
#endregion
#region Ext.plugins
namespace Ext.plugins
{
    #region ListPagingPlugin
    /// <summary>
    /// @class Ext.plugins.ListPagingPlugin
    /// @extends Ext.util.Observable
    /// Adds a Load More button at the bottom of the list. When the user presses this button,
    /// the next page of data will be loaded into the store and appended to the List.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ListPagingPlugin : Observable
    {
        public ListPagingPlugin(ListPagingPluginConfig config){}
        public ListPagingPlugin(){}
        /// <summary>
        /// @cfg {String} loadMoreText The text used as the label of the Load More button.
        /// </summary>
        public void init(object list){}
        public void onBeforeLoad(){}
        public void onListUpdate(){}
        /// <summary>
        /// Here we listen for taps on the loadingEl and load the store's next page. Adding the 'x-loading' class to the
        /// loadingEl hides the 'Load next page' text.
        /// </summary>
        public void onPagingTap(object e){}
        public void onScrollEnd(object scroller, object pos){}
        public void render(){}
        /// <summary>
        /// @cfg {Boolean} autoPaging True to automatically load the next page when you scroll to the bottom of the list.
        /// Defaults to false.
        /// </summary>
        public bool autoPaging{get;set;}
        /// <summary>
        /// @cfg {String} loadMoreText The text used as the label of the Load More button.
        /// </summary>
        public JsString loadMoreText{get;set;}
    }
    #endregion
    #region ListPagingPluginConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ListPagingPluginConfig
    {
        public ListPagingPluginConfig(){}
        /// <summary>
        /// True to automatically load the next page when you scroll to the bottom of the list.
        /// Defaults to false.
        /// </summary>
        public bool autoPaging{get;set;}
        /// <summary>
        /// The text used as the label of the Load More button.
        /// </summary>
        public JsString loadMoreText{get;set;}
    }
    #endregion
    #region PullRefreshPlugin
    /// <summary>
    /// @class Ext.plugins.ListPagingPlugin
    /// @extends Ext.util.Observable
    /// This plugin adds pull to refresh functionality to the List.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class PullRefreshPlugin : Observable
    {
        public PullRefreshPlugin(PullRefreshPluginConfig config){}
        public PullRefreshPlugin(){}
        public void init(object list){}
        /// <summary>
        /// This function makes sure that the List's LoadMask is not shown when the list is being reloaded by
        /// this plugin.
        /// @private
        /// </summary>
        public void onBeforeLoad(){}
        public void onBounceEnd(object scroller, object info){}
        public void onBounceStart(object scroller, object info){}
        /// <summary>
        /// This function renders the pull to refresh markup into the list if it doesnt exist yet. It also makes sure
        /// that the pull to refresh element is inserted to the beginning of the list again after the List items have
        /// been updated.
        /// @private
        /// </summary>
        public void onListUpdate(){}
        /// <summary>
        /// This function is called after the List has been refreshed. It resets the Pull to Refresh markup and
        /// updates the last updated date. It also animates the pull to refresh markup away.
        /// @private
        /// </summary>
        public void onLoadComplete(){}
        public void onOffsetBoundaryUpdate(object scroller, object offsetBoundary){}
        public void onOffsetChange(object scroller, object offset){}
        /// <summary>
        /// This function renders the pull to refresh markup into the list and binds listeners to the scroller.
        /// @private
        /// </summary>
        public void render(){}
        public void setViewState(object state){}
        public JsString currentViewState{get;set;}
        public bool isLoading{get;set;}
        public bool isRefreshing{get;set;}
        /// <summary>
        /// @cfg {String} pullRefreshText The text that will be shown while the list is refreshing.
        /// </summary>
        public JsString loadingText{get;set;}
        /// <summary>
        /// @cfg {String} pullRefreshText The text that will be shown while you are pulling down.
        /// </summary>
        public JsString pullRefreshText{get;set;}
        /// <summary>
        /// @cfg {Function} refreshFn The function that will be called to refresh the list. If this is not defined, the store's load
        /// function will be called. The refresh function gets called with two parameters. The first one is the callback function
        /// that should be called after your refresh is complete. The second one is a reference to this plugin instance.
        /// </summary>
        public JsAction refreshFn{get;set;}
        /// <summary>
        /// @cfg {String} pullRefreshText The text that will be shown after you have pulled down enough to show the release message.
        /// </summary>
        public JsString releaseRefreshText{get;set;}
        /// <summary>
        /// @cfg {String} snappingAnimationDuration The duration for snapping back animation after the data has been refreshed
        /// </summary>
        public JsString snappingAnimationDuration{get;set;}
        [JsProperty]
        public object ViewState{private get;[JsMethod(Name="setViewState")]set;}
    }
    #endregion
    #region PullRefreshPluginConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class PullRefreshPluginConfig
    {
        public PullRefreshPluginConfig(){}
        /// <summary>
        /// The template being used for the pull to refresh markup.
        /// </summary>
        public object pullTpl{get;set;}
        /// <summary>
        /// The function that will be called to refresh the list. If this is not defined, the store's load
        /// function will be called. The refresh function gets called with two parameters. The first one is the callback function
        /// that should be called after your refresh is complete. The second one is a reference to this plugin instance.
        /// </summary>
        public JsAction refreshFn{get;set;}
        /// <summary>
        /// The duration for snapping back animation after the data has been refreshed
        /// </summary>
        public JsString snappingAnimationDuration{get;set;}
    }
    #endregion
}
#endregion
#region Ext.util
namespace Ext.util
{
    #region Date
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Date
    {
        public Date(){}
        /// <summary>
        /// Returns the number of milliseconds between two dates
        /// @param {Date} dateA
        /// @param {Date} dateB (optional) Defaults to now
        /// @return {Number} The diff in milliseconds
        /// </summary>
        public static JsNumber getElapsed(JsDate dateA, JsDate dateB){return null;}
    }
    #endregion
    #region DelayedTask
    /// <summary>
    /// @class Ext.util.DelayedTask
    /// <p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
    /// performing setTimeout where a new timeout cancels the old timeout. When called, the
    /// task will wait the specified time period before executing. If durng that time period,
    /// the task is called again, the original call will be cancelled. This continues so that
    /// the function is only called a single time for each iteration.</p>
    /// <p>This method is especially useful for things like detecting whether a user has finished
    /// typing in a text field. An example would be performing validation on a keypress. You can
    /// use this class to buffer the keypress events for a certain number of milliseconds, and
    /// perform only if they stop for that amount of time.  Usage:</p><pre><code>
    /// var task = new Ext.util.DelayedTask(function(){
    /// alert(Ext.getDom('myInputField').value.length);
    /// });
    /// // Wait 500ms before calling our function. If the user presses another key
    /// // during that 500ms, it will be cancelled and we'll wait another 500ms.
    /// Ext.get('myInputField').on('keypress', function(){
    /// task.{@link #delay}(500);
    /// });
    /// </code></pre>
    /// <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
    /// option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
    /// also setup a delayed task for you to buffer events.</p>
    /// @constructor The parameters to this constructor serve as defaults and are not required.
    /// @param {Function} fn (optional) The default function to call.
    /// @param {Object} scope The default scope (The <code><b>this</b></code> reference) in which the
    /// function is called. If not specified, <code>this</code> will refer to the browser window.
    /// @param {Array} args (optional) The default Array of arguments.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class DelayedTask
    {
        public DelayedTask(){}
        /// <summary>
        /// @class Ext.util.DelayedTask
        /// <p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
        /// performing setTimeout where a new timeout cancels the old timeout. When called, the
        /// task will wait the specified time period before executing. If durng that time period,
        /// the task is called again, the original call will be cancelled. This continues so that
        /// the function is only called a single time for each iteration.</p>
        /// <p>This method is especially useful for things like detecting whether a user has finished
        /// typing in a text field. An example would be performing validation on a keypress. You can
        /// use this class to buffer the keypress events for a certain number of milliseconds, and
        /// perform only if they stop for that amount of time.  Usage:</p><pre><code>
        /// var task = new Ext.util.DelayedTask(function(){
        /// alert(Ext.getDom('myInputField').value.length);
        /// });
        /// // Wait 500ms before calling our function. If the user presses another key
        /// // during that 500ms, it will be cancelled and we'll wait another 500ms.
        /// Ext.get('myInputField').on('keypress', function(){
        /// task.{@link #delay}(500);
        /// });
        /// </code></pre>
        /// <p>Note that we are using a DelayedTask here to illustrate a point. The configuration
        /// option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
        /// also setup a delayed task for you to buffer events.</p>
        /// @constructor The parameters to this constructor serve as defaults and are not required.
        /// @param {Function} fn (optional) The default function to call.
        /// @param {Object} scope The default scope (The <code><b>this</b></code> reference) in which the
        /// function is called. If not specified, <code>this</code> will refer to the browser window.
        /// @param {Array} args (optional) The default Array of arguments.
        /// </summary>
        public DelayedTask(JsAction fn, object scope, JsArray args){}
    }
    #endregion
    #region Dispatcher
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.util.Dispatcher
    /// @extends Ext.util.Observable
    /// <p>The Dispatcher class is used to send requests through to a controller action. Usually, only a single Dispatcher
    /// is required on the page, and by default a single instance is already created - {@link Ext.Dispatcher}. See the
    /// {@link Ext.Dispatcher Dispatcher docs} for details on how this works.</p>
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Dispatcher : Observable
    {
        public Dispatcher(){}
        public Dispatcher(ObservableConfig config){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.util.Dispatcher
        /// @extends Ext.util.Observable
        /// <p>The Dispatcher class is used to send requests through to a controller action. Usually, only a single Dispatcher
        /// is required on the page, and by default a single instance is already created - {@link Ext.Dispatcher}. See the
        /// {@link Ext.Dispatcher Dispatcher docs} for details on how this works.</p>
        /// @constructor
        /// </summary>
        public Dispatcher(object config){}
        /// <summary>
        /// Convenience method which returns a function that calls Ext.Dispatcher.redirect. Useful when setting
        /// up several listeners that should redirect, e.g.:
        /// <pre><code>
        /// myComponent.on({
        /// homeTap : Ext.Dispatcher.createRedirect('home'),
        /// inboxTap: Ext.Dispatcher.createRedirect('inbox'),
        /// });
        /// </code></pre>
        /// @param {String/Object} url The url to create the redirect function for
        /// @return {Function} The redirect function
        /// </summary>
        public JsAction createRedirect(object url){return null;}
        /// <summary>
        /// Dispatches a single interaction to a controller/action pair
        /// @param {Object} options Options representing at least the controller and action to dispatch to
        /// </summary>
        public void dispatch(object options){}
        /// <summary>
        /// Dispatches to a controller/action pair, adding a new url to the History stack
        /// </summary>
        public void redirect(object options){}
    }
    #endregion
    #region Draggable
    /// <summary>
    /// @class Ext.util.Draggable
    /// @extends Ext.util.Observable
    /// A core util class to bring Draggable behavior to any DOM element, acts as a base class for Scroller and Sortable
    /// @constructor
    /// @param {Mixed} el The element you want to make draggable.
    /// @param {Object} config The configuration object for this Draggable.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Draggable : Observable
    {
        [JsType(JsMode.Prototype, Export=false)]
        public partial class Animation
        {
            public Animation(){}
        }
        public Draggable(){}
        public Draggable(DraggableConfig config){}
        public Draggable(object el, object config){}
        /// <summary>
        /// Destroys this Draggable instance.
        /// </summary>
        public void destroy(){}
        /// <summary>
        /// Disable the Draggable.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// </summary>
        public Draggable disable(){return null;}
        /// <summary>
        /// Enable the Draggable.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// </summary>
        public Draggable enable(){return null;}
        public void getFrameDuration(){}
        /// <summary>
        /// Gets the new offset from a touch offset.
        /// @param {Ext.util.Offset} touchPoint The touch offset instance.
        /// @private
        /// </summary>
        public void getNewOffsetFromTouchPoint(Offset touchPoint){}
        /// <summary>
        /// Returns the current offset relative to the original location of this Draggable.
        /// @return {Ext.util.Offset} offset An Ext.util.Offset instance containing the offset.
        /// </summary>
        public Offset getOffset(){return null;}
        /// <summary>
        /// Returns the element thats is being visually dragged.
        /// @returns {Ext.Element} proxy The proxy element.
        /// </summary>
        public void getProxyEl(){}
        /// <summary>
        /// Internal method that handles a frame of the offset animation.
        /// @private
        /// </summary>
        public void handleAnimationFrame(){}
        /// <summary>
        /// Method to determine whether this Draggable is currently dragging.
        /// @return {Boolean}
        /// </summary>
        public void isDragging(){}
        /// <summary>
        /// Method to determine whether this Draggable can be dragged on the x-axis
        /// @return {Boolean}
        /// </summary>
        public void isHorizontal(){}
        /// <summary>
        /// Method to determine whether this Draggable can be dragged on the y-axis
        /// @return {Boolean}
        /// </summary>
        public void isVertical(){}
        /// <summary>
        /// Use this to move the draggable to a coordinate on the screen.
        /// @param {Number} x the vertical coordinate in pixels
        /// @param {Number} y the horizontal coordinate in pixels
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// </summary>
        public Draggable moveTo(JsNumber x, JsNumber y){return null;}
        /// <summary>
        /// Fires when a drag events happens. Internal use only.
        /// @param {Event} e The event object for the drag event
        /// @private
        /// </summary>
        public void onDrag(object e){}
        /// <summary>
        /// Fires when a dragend event happens. Internal use only.
        /// @param {Event} e The event object for the dragend event
        /// @private
        /// </summary>
        public void onDragEnd(object e){}
        /// <summary>
        /// Fires when the orientation changes. Internal use only.
        /// @private
        /// </summary>
        public void onOrientationChange(){}
        /// <summary>
        /// Fires when the Drag operation starts. Internal use only.
        /// @param {Event} e The event object for the drag operation
        /// @private
        /// </summary>
        public void onStart(object e){}
        public void onTouchStart(){}
        /// <summary>
        /// This method will reset the initial region of the Draggable.
        /// @private
        /// </summary>
        public void reset(){}
        /// <summary>
        /// Sets the dragging flag and adds a dragging class to the element.
        /// @param {Boolean} dragging True to enable dragging, false to disable.
        /// @private
        /// </summary>
        public void setDragging(bool dragging){}
        /// <summary>
        /// Combined method to disable or enable the Draggable. This method is called by the enable and
        /// disable methods.
        /// @param {Boolean} enabled True to enable, false to disable. Defaults to false.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// </summary>
        public Draggable setEnabled(bool enabled){return null;}
        /// <summary>
        /// Sets the offset of this Draggable relatively to its original offset.
        /// @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
        /// x and y coordinates.
        /// @param {Boolean/Number} animate Whether or not to animate the setting of the offset. True
        /// to use the default animationDuration, a number to specify the duration for this operation.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// </summary>
        public Draggable setOffset(object offset, object animate){return null;}
        /// <summary>
        /// Internal method that sets the left and top of the proxyEl.
        /// @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
        /// x and y coordinates.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// @private
        /// </summary>
        public Draggable setStyleOffset(object offset){return null;}
        /// <summary>
        /// Internal method that sets the transform of the proxyEl.
        /// @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
        /// x and y coordinates for the transform.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// @private
        /// </summary>
        public Draggable setTransformOffset(object offset, object clean){return null;}
        /// <summary>
        /// Change the Draggable to use css transforms instead of style offsets
        /// or the other way around.
        /// @param {Boolean} useCssTransform True to use css transforms instead of style offsets.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// @public
        /// </summary>
        public Draggable setUseCssTransform(bool useCssTransform){return null;}
        /// <summary>
        /// Internal method that sets the offset of the Draggable using an animation
        /// @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
        /// x and y coordinates for the transform.
        /// @param {Boolean/Number} animate Whether or not to animate the setting of the offset. True
        /// to use the default animationDuration, a number to specify the duration for this operation.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// @private
        /// </summary>
        public Draggable startAnimation(object offset, object animate){return null;}
        /// <summary>
        /// Internal method that stops the current offset animation
        /// @private
        /// </summary>
        public void stopAnimation(){}
        /// <summary>
        /// Updates the boundary information for this Draggable. This method shouldn't
        /// have to be called by the developer and is mostly used for internal purposes.
        /// Might be useful when creating subclasses of Draggable.
        /// @param {Boolean} init Whether or not this is happing during instantiation, which we need
        /// to apply the transform / style to the DOM element
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// @private
        /// </summary>
        public Draggable updateBoundary(bool init){return null;}
        /// <summary>
        /// How long animations for this draggable take by default when using setOffset with animate being true.
        /// Defaults to 300.
        /// @type Number
        /// </summary>
        public object animationDuration{get;set;}
        /// <summary>
        /// @class Ext.util.Draggable
        /// @extends Ext.util.Observable
        /// A core util class to bring Draggable behavior to any DOM element, acts as a base class for Scroller and Sortable
        /// @constructor
        /// @param {Mixed} el The element you want to make draggable.
        /// @param {Object} config The configuration object for this Draggable.
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// @cfg {String} cancelSelector
        /// A simple CSS selector that represents elements within the draggable
        /// that should NOT initiate a drag.
        /// </summary>
        public JsString cancelSelector{get;set;}
        /// <summary>
        /// @cfg {Number} delay
        /// How many milliseconds a user must hold the draggable before starting a
        /// drag operation. Defaults to 0 or immediate.
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// @cfg {String} direction
        /// Possible values: 'vertical', 'horizontal', or 'both'
        /// Defaults to 'both'
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// @cfg {Boolean} disabled
        /// Whether or not the draggable behavior is disabled on instantiation
        /// Defaults to false
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// Read-only Property representing whether or not the Draggable is currently
        /// dragging or not.
        /// @type Boolean
        /// </summary>
        public bool dragging{get;set;}
        /// <summary>
        /// Sets the dragging flag and adds a dragging class to the element.
        /// @param {Boolean} dragging True to enable dragging, false to disable.
        /// @private
        /// </summary>
        [JsProperty]
        public bool Dragging{private get;[JsMethod(Name="setDragging")]set;}
        public JsString draggingCls{get;set;}
        /// <summary>
        /// Combined method to disable or enable the Draggable. This method is called by the enable and
        /// disable methods.
        /// @param {Boolean} enabled True to enable, false to disable. Defaults to false.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// </summary>
        [JsProperty]
        public bool Enabled{private get;[JsMethod(Name="setEnabled")]set;}
        public object grid{get;set;}
        /// <summary>
        /// @cfg {String} group
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting. Defaults to 'base'
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// Read-only value representing whether the Draggable can be moved horizontally.
        /// This is automatically calculated by Draggable by the direction configuration.
        /// @type Boolean
        /// </summary>
        public bool horizontal{get;set;}
        public bool monitorOrientation{get;set;}
        /// <summary>
        /// Returns the current offset relative to the original location of this Draggable.
        /// @return {Ext.util.Offset} offset An Ext.util.Offset instance containing the offset.
        /// </summary>
        [JsProperty]
        public Offset Offset{[JsMethod(Name="getOffset")]get;private set;}
        /// <summary>
        /// Read-only Property representing the region that the Draggable
        /// is constrained to.
        /// @type Ext.util.Region
        /// </summary>
        public object offsetBoundary{get;set;}
        public object outOfBoundRestrictFactor{get;set;}
        public object proxy{get;set;}
        public JsString proxyCls{get;set;}
        /// <summary>
        /// @cfg {Boolean} revert
        /// Whether or not the element or it's proxy will be reverted back (with animation)
        /// when it's not dropped and held by a Droppable
        /// </summary>
        public bool revert{get;set;}
        public object snap{get;set;}
        public bool stack{get;set;}
        /// <summary>
        /// Internal method that sets the left and top of the proxyEl.
        /// @param {Ext.util.Offset/Object} offset An object or Ext.util.Offset instance containing the
        /// x and y coordinates.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// @private
        /// </summary>
        [JsProperty]
        public object StyleOffset{private get;[JsMethod(Name="setStyleOffset")]set;}
        /// <summary>
        /// The amount of pixels you have to move before the drag operation starts.
        /// Defaults to 0
        /// @type Number
        /// </summary>
        public object threshold{get;set;}
        /// <summary>
        /// Whether or not to automatically re-calculate the Scroller's and its container's size on every
        /// touchstart.
        /// Defaults to true
        /// @type Boolean
        /// </summary>
        public bool updateBoundaryOnTouchStart{get;set;}
        /// <summary>
        /// @cfg {Boolean} useCssTransform
        /// Whether or not to translate the element using CSS Transform (much faster) instead of
        /// left and top properties, defaults to true
        /// </summary>
        public bool useCssTransform{get;set;}
        /// <summary>
        /// Change the Draggable to use css transforms instead of style offsets
        /// or the other way around.
        /// @param {Boolean} useCssTransform True to use css transforms instead of style offsets.
        /// @return {Ext.util.Draggable} this This Draggable instance
        /// @public
        /// </summary>
        [JsProperty]
        public bool UseCssTransform{private get;[JsMethod(Name="setUseCssTransform")]set;}
        /// <summary>
        /// Read-only value representing whether the Draggable can be moved vertically.
        /// This is automatically calculated by Draggable by the direction configuration.
        /// @type Boolean
        /// </summary>
        public bool vertical{get;set;}
    }
    #endregion
    #region DraggableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DraggableConfig
    {
        public DraggableConfig(){}
        /// <summary>
        /// A simple CSS selector that represents elements within the draggable
        /// that should NOT initiate a drag.
        /// </summary>
        public JsString cancelSelector{get;set;}
        /// <summary>
        /// Can be either a DOM element, an instance of Ext.Element, 'parent' or null for no constrain
        /// </summary>
        public object constrain{get;set;}
        /// <summary>
        /// How many milliseconds a user must hold the draggable before starting a
        /// drag operation. Defaults to 0 or immediate.
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// Possible values: 'vertical', 'horizontal', or 'both'
        /// Defaults to 'both'
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// Whether or not the draggable behavior is disabled on instantiation
        /// Defaults to false
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// The element to actually bind touch events to, the only string accepted is 'parent'
        /// for convenience.
        /// Defaults to this class' element itself
        /// </summary>
        public object eventTarget{get;set;}
        /// <summary>
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting. Defaults to 'base'
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// Whether or not the element or it's proxy will be reverted back (with animation)
        /// when it's not dropped and held by a Droppable
        /// </summary>
        public bool revert{get;set;}
        /// <summary>
        /// Whether or not to translate the element using CSS Transform (much faster) instead of
        /// left and top properties, defaults to true
        /// </summary>
        public bool useCssTransform{get;set;}
    }
    #endregion
    #region Droppable
    /// <summary>
    /// @class Ext.util.Droppable
    /// @extends Ext.util.Observable
    /// @constructor
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Droppable : Observable
    {
        public Droppable(){}
        public Droppable(DroppableConfig config){}
        /// <summary>
        /// @constructor
        /// @param el {Mixed} String, HtmlElement or Ext.Element representing an
        /// element on the page.
        /// @param config {Object} Configuration options for this class.
        /// </summary>
        public Droppable(object el, object config){}
        /// <summary>
        /// Disable the Droppable target.
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enable the Droppable target.
        /// This is invoked immediately after constructing a Droppable if the
        /// disabled parameter is NOT set to true.
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Method to determine whether this Component is currently disabled.
        /// @return {Boolean} the disabled state of this Component.
        /// </summary>
        public bool isDisabled(){return false;}
        public void isDragOver(object draggable, object region){}
        /// <summary>
        /// Method to determine whether this Droppable is currently monitoring drag operations of Draggables.
        /// @return {Boolean} the monitoring state of this Droppable
        /// </summary>
        public bool isMonitoring(){return false;}
        public void onBeforeDragEnd(object draggable, object e){}
        public void onDrag(object draggable, object e){}
        public void onDragEnd(object draggable, object e){}
        public void onDragStart(object draggable, object e){}
        public void setCanDrop(object canDrop, object draggable, object e){}
        /// <summary>
        /// @cfg {String} activeCls
        /// The CSS added to a Droppable when a Draggable in the same group is being
        /// dragged. Defaults to 'x-drop-active'.
        /// </summary>
        public JsString activeCls{get;set;}
        /// <summary>
        /// @class Ext.util.Droppable
        /// @extends Ext.util.Observable
        /// @constructor
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// @cfg {Boolean} disabled
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// @cfg {String} group
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting. Defaults to 'base'
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// @cfg {String} hoverCls
        /// The CSS class to add to the droppable when hovering over a valid drop. (Defaults to 'x-drop-hover')
        /// </summary>
        public JsString hoverCls{get;set;}
        /// <summary>
        /// @cfg {String} invalidCls
        /// The CSS class to add to the droppable when dragging a draggable that is
        /// not in the same group. Defaults to 'x-drop-invalid'.
        /// </summary>
        public JsString invalidCls{get;set;}
        public bool monitoring{get;set;}
        public object tolerance{get;set;}
        /// <summary>
        /// @cfg {String} validDropMode
        /// Determines when a drop is considered 'valid' whether it simply need to
        /// intersect the region or if it needs to be contained within the region.
        /// Valid values are: 'intersects' or 'contains'
        /// </summary>
        public JsString validDropMode{get;set;}
    }
    #endregion
    #region DroppableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class DroppableConfig
    {
        public DroppableConfig(){}
        /// <summary>
        /// The CSS added to a Droppable when a Draggable in the same group is being
        /// dragged. Defaults to 'x-drop-active'.
        /// </summary>
        public JsString activeCls{get;set;}
        /// <summary>
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting. Defaults to 'base'
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// The CSS class to add to the droppable when hovering over a valid drop. (Defaults to 'x-drop-hover')
        /// </summary>
        public JsString hoverCls{get;set;}
        /// <summary>
        /// The CSS class to add to the droppable when dragging a draggable that is
        /// not in the same group. Defaults to 'x-drop-invalid'.
        /// </summary>
        public JsString invalidCls{get;set;}
        /// <summary>
        /// Determines when a drop is considered 'valid' whether it simply need to
        /// intersect the region or if it needs to be contained within the region.
        /// Valid values are: 'intersects' or 'contains'
        /// </summary>
        public JsString validDropMode{get;set;}
    }
    #endregion
    #region Event
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Event
    {
        public Event(){}
        public void addListener(object fn, object scope, object options){}
        public void clearListeners(){}
        public Event(object observable, object name){}
        public void createListener(object fn, object scope, object o){}
        public void findListener(object fn, object scope){}
        public void fire(){}
        public void isListening(object fn, object scope){}
        public void removeListener(object fn, object scope){}
        public bool isEvent{get;set;}
    }
    #endregion
    #region EventRecorder
    [JsType(JsMode.Prototype, Export=false)]
    public partial class EventRecorder : Observable
    {
        public EventRecorder(ObservableConfig config){}
        public EventRecorder(){}
        public void end(){}
        public void erase(object name){}
        public void getEventSet(object name){}
        public void getEventSimulator(){}
        public void record(object name, object @event){}
        public void replay(object name, object startIndex){}
        public void resumeReplay(object name){}
        public void save(object name){}
        public void setEventSet(object name, object events){}
        public void setEventSimulator(object eventSimulator){}
        public void start(object name){}
        public void stopReplay(){}
        public object currentEventSetName{get;set;}
        public object eventCollection{get;set;}
        [JsProperty]
        public object EventSimulator{private get;[JsMethod(Name="setEventSimulator")]set;}
    }
    #endregion
    #region EventSimulator
    [JsType(JsMode.Prototype, Export=false)]
    public partial class EventSimulator
    {
        public EventSimulator(){}
        public void createEvent(object data, object serializable){}
        public void createEventData(object @event, object serializable){}
        public void createMouseEvent(object type, object data){}
        public void createMouseEventData(object type, object target, object options, object serializable){}
        public void createTouch(object target, object options, object serializable){}
        public void createTouchEvent(object type, object data){}
        public void createTouchEventData(object type, object target, object options, object serializable){}
        public void createTouchList(object data, object target, object serializable){}
        public void fire(object type, object target, object options){}
        /// <summary>
        /// Mouse events =======================================================================================
        /// </summary>
        public void fireMouseEvent(object type, object target, object options){}
        /// <summary>
        /// Touch events ==========================================================================
        /// </summary>
        public void fireTouchEvent(object type, object target, object options){}
        public void getEventTypeByName(object name){}
    }
    #endregion
    #region Filter
    /// <summary>
    /// @class Ext.util.Filter
    /// @extends Object
    /// <p>Represents a filter that can be applied to a {@link Ext.data.MixedCollection MixedCollection}. Can either simply
    /// filter on a property/value pair or pass in a filter function with custom logic. Filters are always used in the context
    /// of MixedCollections, though {@link Ext.data.Store Store}s frequently create them when filtering and searching on their
    /// records. Example usage:</p>
    /// <pre><code>
    /// //set up a fictional MixedCollection containing a few people to filter on
    /// var allNames = new Ext.util.MixedCollection();
    /// allNames.addAll([
    /// {id: 1, name: 'Ed',    age: 25},
    /// {id: 2, name: 'Jamie', age: 37},
    /// {id: 3, name: 'Abe',   age: 32},
    /// {id: 4, name: 'Aaron', age: 26},
    /// {id: 5, name: 'David', age: 32}
    /// ]);
    /// var ageFilter = new Ext.util.Filter({
    /// property: 'age',
    /// value   : 32
    /// });
    /// var longNameFilter = new Ext.util.Filter({
    /// filterFn: function(item) {
    /// return item.name.length > 4;
    /// }
    /// });
    /// //a new MixedCollection with the 3 names longer than 4 characters
    /// var longNames = allNames.filter(longNameFilter);
    /// //a new MixedCollection with the 2 people of age 24:
    /// var youngFolk = allNames.filter(ageFilter);
    /// </code></pre>
    /// @constructor
    /// @param {Object} config Config object
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Filter
    {
        public Filter(){}
        public Filter(FilterConfig config){}
        /// <summary>
        /// @cfg {String} root Optional root property. This is mostly useful when filtering a Store, in which case we set the
        /// root to 'data' to make the filter pull the {@link #property} out of the data object of each item
        /// </summary>
        public Filter(object config){}
        /// <summary>
        /// @private
        /// Creates a filter function for the configured property/value/anyMatch/caseSensitive options for this Filter
        /// </summary>
        public void createFilterFn(){}
        /// <summary>
        /// @private
        /// Returns a regular expression based on the given value and matching options
        /// </summary>
        public void createValueMatcher(){}
        /// <summary>
        /// @private
        /// Returns the root property of the given item, based on the configured {@link #root} property
        /// @param {Object} item The item
        /// @return {Object} The root property of the object
        /// </summary>
        public object getRoot(object item){return null;}
        /// <summary>
        /// @cfg {Boolean} anyMatch True to allow any match - no regex start/end line anchors will be added. Defaults to false
        /// </summary>
        public bool anyMatch{get;set;}
        /// <summary>
        /// @cfg {Boolean} caseSensitive True to make the regex case sensitive (adds 'i' switch to regex). Defaults to false.
        /// </summary>
        public bool caseSensitive{get;set;}
        /// <summary>
        /// @cfg {Boolean} exactMatch True to force exact match (^ and $ characters added to the regex). Defaults to false.
        /// Ignored if anyMatch is true.
        /// </summary>
        public bool exactMatch{get;set;}
    }
    #endregion
    #region FilterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class FilterConfig
    {
        public FilterConfig(){}
        /// <summary>
        /// True to allow any match - no regex start/end line anchors will be added. Defaults to false
        /// </summary>
        public bool anyMatch{get;set;}
        /// <summary>
        /// True to make the regex case sensitive (adds 'i' switch to regex). Defaults to false.
        /// </summary>
        public bool caseSensitive{get;set;}
        /// <summary>
        /// True to force exact match (^ and $ characters added to the regex). Defaults to false.
        /// Ignored if anyMatch is true.
        /// </summary>
        public bool exactMatch{get;set;}
        /// <summary>
        /// A custom filter function which is passed each item in the {@link Ext.util.MixedCollection}
        /// in turn. Should return true to accept each item or false to reject it
        /// </summary>
        public JsAction filterFn{get;set;}
        /// <summary>
        /// The property to filter on. Required unless a {@link #filter} is passed
        /// </summary>
        public JsString property{get;set;}
    }
    #endregion
    #region Format
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Format
    {
        public Format(){}
        /// <summary>
        /// Parse a value into a formatted date using the specified format pattern.
        /// @param {String/Date} value The value to format (Strings must conform to the format expected by the javascript
        /// Date object's <a href="http://www.w3schools.com/jsref/jsref_parse.asp">parse()</a> method)
        /// @param {String} format (optional) Any valid date format string (defaults to 'm/d/Y')
        /// @return {String} The formatted date string
        /// </summary>
        public static JsString date(object v, JsString format){return null;}
        /// <summary>
        /// Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
        /// @param {String} value The string to truncate
        /// @param {Number} length The maximum length to allow before truncating
        /// @param {Boolean} word True to try to find a common word break
        /// @return {String} The converted text
        /// </summary>
        public static JsString ellipsis(JsString value, JsNumber len, bool word){return null;}
        /// <summary>
        /// Escapes the passed string for ' and \
        /// @param {String} string The string to escape
        /// @return {String} The escaped string
        /// @static
        /// </summary>
        public static JsString escape(JsString @string){return null;}
        /// <summary>
        /// Escapes the passed string for use in a regular expression
        /// @param {String} str
        /// @return {String}
        /// </summary>
        public static void escapeRegex(JsString s){}
        /// <summary>
        /// Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
        /// token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
        /// <pre><code>
        /// var cls = 'my-class', text = 'Some text';
        /// var s = Ext.util.Format.format('&lt;div class="{0}">{1}&lt;/div>', cls, text);
        /// // s now contains the string: '&lt;div class="my-class">Some text&lt;/div>'
        /// </code></pre>
        /// @param {String} string The tokenized string to be formatted
        /// @param {String} value1 The value to replace token {0}
        /// @param {String} value2 Etc...
        /// @return {String} The formatted string
        /// @static
        /// </summary>
        public static JsString format(JsString format){return null;}
        /// <summary>
        /// Convert certain characters (&, <, >, and ') from their HTML character equivalents.
        /// @param {String} value The string to decode
        /// @return {String} The decoded text
        /// </summary>
        public static JsString htmlDecode(JsString value){return null;}
        /// <summary>
        /// Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.
        /// @param {String} value The string to encode
        /// @return {String} The encoded text
        /// </summary>
        public static JsString htmlEncode(JsString value){return null;}
        /// <summary>
        /// Pads the left side of a string with a specified character.  This is especially useful
        /// for normalizing number and date strings.  Example usage:
        /// *
        /// <pre><code>
        /// var s = Ext.util.Format.leftPad('123', 5, '0');
        /// // s now contains the string: '00123'
        /// </code></pre>
        /// @param {String} string The original string
        /// @param {Number} size The total length of the output string
        /// @param {String} char (optional) The character with which to pad the original string (defaults to empty string " ")
        /// @return {String} The padded string
        /// @static
        /// </summary>
        public static JsString leftPad(JsString val, JsNumber size, JsString ch){return null;}
        /// <summary>
        /// Utility function that allows you to easily switch a string between two alternating values.  The passed value
        /// is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
        /// they are already different, the first value passed in is returned.  Note that this method returns the new value
        /// but does not change the current string.
        /// <pre><code>
        /// // alternate sort directions
        /// sort = Ext.util.Format.toggle(sort, 'ASC', 'DESC');
        /// // instead of conditional logic:
        /// sort = (sort == 'ASC' ? 'DESC' : 'ASC');
        /// </code></pre>
        /// @param {String} string The current string
        /// @param {String} value The value to compare to the current string
        /// @param {String} other The new value to use if the string already equals the first value passed in
        /// @return {String} The new value
        /// </summary>
        public static JsString toggle(JsString @string, JsString value, JsString other){return null;}
        /// <summary>
        /// Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
        /// <pre><code>
        /// var s = '  foo bar  ';
        /// alert('-' + s + '-');         //alerts "- foo bar -"
        /// alert('-' + Ext.util.Format.trim(s) + '-');  //alerts "-foo bar-"
        /// </code></pre>
        /// @param {String} string The string to escape
        /// @return {String} The trimmed string
        /// </summary>
        public static JsString trim(JsString @string){return null;}
        /// <summary>
        /// @class Ext.util.Format
        /// Reusable data formatting functions
        /// @singleton
        /// </summary>
        public static JsString defaultDateFormat{get;set;}
        /// <summary>
        /// @class Ext.util.Format
        /// Reusable data formatting functions
        /// @singleton
        /// </summary>
        public JsRegExp escapeRe{get;set;}
        public JsRegExp escapeRegexRe{get;set;}
        public JsRegExp formatRe{get;set;}
        public JsRegExp trimRe{get;set;}
    }
    #endregion
    #region Functions
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Functions
    {
        public Functions(){}
        /// <summary>
        /// Creates a delegate (callback) that sets the scope to obj.
        /// Call directly on any function. Example: <code>Ext.createDelegate(this.myFunction, this, [arg1, arg2])</code>
        /// Will create a function that is automatically scoped to obj so that the <tt>this</tt> variable inside the
        /// callback points to obj. Example usage:
        /// <pre><code>
        /// var sayHi = function(name){
        /// // Note this use of "this.text" here.  This function expects to
        /// // execute within a scope that contains a text property.  In this
        /// // example, the "this" variable is pointing to the btn object that
        /// // was passed in createDelegate below.
        /// alert('Hi, ' + name + '. You clicked the "' + this.text + '" button.');
        /// }
        /// var btn = new Ext.Button({
        /// text: 'Say Hi',
        /// renderTo: Ext.getBody()
        /// });
        /// // This callback will execute in the scope of the
        /// // button instance. Clicking the button alerts
        /// // "Hi, Fred. You clicked the "Say Hi" button."
        /// btn.on('click', Ext.createDelegate(sayHi, btn, ['Fred']));
        /// </code></pre>
        /// @param {Function} fn The function to delegate.
        /// @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the function is executed.
        /// <b>If omitted, defaults to the browser window.</b>
        /// @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
        /// @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position
        /// @return {Function} The new function
        /// </summary>
        public static JsAction createDelegate(JsAction fn, object obj, JsArray args, object appendArgs){return null;}
        /// <summary>
        /// Creates an interceptor function. The passed function is called before the original one. If it returns false,
        /// the original one is not called. The resulting function returns the results of the original function.
        /// The passed function is called with the parameters of the original function. Example usage:
        /// <pre><code>
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// sayHi('Fred'); // alerts "Hi, Fred"
        /// // create a new function that validates input without
        /// // directly modifying the original function:
        /// var sayHiToFriend = Ext.createInterceptor(sayHi, function(name){
        /// return name == 'Brian';
        /// });
        /// sayHiToFriend('Fred');  // no alert
        /// sayHiToFriend('Brian'); // alerts "Hi, Brian"
        /// </code></pre>
        /// @param {Function} origFn The original function.
        /// @param {Function} newFn The function to call before the original
        /// @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the passed function is executed.
        /// <b>If omitted, defaults to the scope in which the original function is called or the browser window.</b>
        /// @param {Mixed} returnValue (optional) The value to return if the passed function return false (defaults to null).
        /// @return {Function} The new function
        /// </summary>
        public static JsAction createInterceptor(JsAction origFn, JsAction newFn, object scope, object returnValue){return null;}
        /// <summary>
        /// Create a combined function call sequence of the original function + the passed function.
        /// The resulting function returns the results of the original function.
        /// The passed fcn is called with the parameters of the original function. Example usage:
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// sayHi('Fred'); // alerts "Hi, Fred"
        /// var sayGoodbye = Ext.createSequence(sayHi, function(name){
        /// alert('Bye, ' + name);
        /// });
        /// sayGoodbye('Fred'); // both alerts show
        /// @param {Function} origFn The original function.
        /// @param {Function} newFn The function to sequence
        /// @param {Object} scope (optional) The scope (this reference) in which the passed function is executed.
        /// If omitted, defaults to the scope in which the original function is called or the browser window.
        /// @return {Function} The new function
        /// </summary>
        public static JsAction createSequence(JsAction origFn, JsAction newFn, object scope){return null;}
        /// <summary>
        /// Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
        /// <pre><code>
        /// var sayHi = function(name){
        /// alert('Hi, ' + name);
        /// }
        /// // executes immediately:
        /// sayHi('Fred');
        /// // executes after 2 seconds:
        /// Ext.defer(sayHi, 2000, this, ['Fred']);
        /// // this syntax is sometimes useful for deferring
        /// // execution of an anonymous function:
        /// Ext.defer(function(){
        /// alert('Anonymous');
        /// }, 100);
        /// </code></pre>
        /// @param {Function} fn The function to defer.
        /// @param {Number} millis The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)
        /// @param {Object} scope (optional) The scope (<code><b>this</b></code> reference) in which the function is executed.
        /// <b>If omitted, defaults to the browser window.</b>
        /// @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
        /// @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
        /// if a number the args are inserted at the specified position
        /// @return {Number} The timeout id that can be used with clearTimeout
        /// </summary>
        public static JsNumber defer(JsAction fn, JsNumber millis, object obj, JsArray args, object appendArgs){return null;}
    }
    #endregion
    #region GeoLocation
    /// <summary>
    /// @class Ext.util.GeoLocation
    /// @extends Ext.util.Observable
    /// *
    /// Provides a cross browser class for retrieving location information.<br/>
    /// <br/>
    /// Based on the <a href="http://dev.w3.org/geo/api/spec-source.html">Geolocation API Specification</a>.<br/>
    /// If the browser does not implement that specification (Internet Explorer 6-8), it can fallback on Google Gears
    /// as long as the browser has it installed, and the following javascript file from google is included on the page:
    /// <pre><code>&lt;script type="text/javascript" src="http://code.google.com/apis/gears/gears_init.js"&gt;&lt;/script&gt;</code></pre>
    /// <br/>
    /// Note: Location implementations are only required to return timestamp, longitude, latitude, and accuracy.<br/>
    /// Other properties (altitude, altitudeAccuracy, heading, speed) can be null or sporadically returned.<br/>
    /// <br/>
    /// When instantiated, by default this class immediately begins tracking location information,
    /// firing a {@link #locationupdate} event when new location information is available.  To disable this
    /// location tracking (which may be battery intensive on mobile devices), set {@link #autoUpdate} to false.<br/>
    /// When this is done, only calls to {@link #updateLocation} will trigger a location retrieval.<br/>
    /// <br/>
    /// A {@link #locationerror} event is raised when an error occurs retrieving the location, either due to a user
    /// denying the application access to it, or the browser not supporting it.<br/>
    /// <br/>
    /// The below code shows a GeoLocation making a single retrieval of location information.
    /// <pre><code>
    /// var geo = new Ext.util.GeoLocation({
    /// autoUpdate: false,
    /// listeners: {
    /// locationupdate: function (geo) {
    /// alert('New latitude: ' + geo.latitude);
    /// },
    /// locationerror: function (   geo,
    /// bTimeout,
    /// bPermissionDenied,
    /// bLocationUnavailable,
    /// message) {
    /// if(bTimeout){
    /// alert('Timeout occurred.');
    /// }
    /// else{
    /// alert('Error occurred.');
    /// }
    /// }
    /// }
    /// });
    /// geo.updateLocation();</code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class GeoLocation : Observable
    {
        public GeoLocation(){}
        public GeoLocation(GeoLocationConfig config){}
        public GeoLocation(object config){}
        public void fireError(object error){}
        public void fireUpdate(object position){}
        /// <summary>
        /// @private
        /// Returns cached coordinates, and updates if there are no cached coords yet.
        /// @deprecated
        /// </summary>
        public void getLocation(object callback, object scope){}
        public void parseOptions(){}
        /// <summary>
        /// Changes the {@link #allowHighAccuracy} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} allowHighAccuracy The value to set the allowHighAccuracy option to.
        /// </summary>
        public void setAllowHighAccuracy(JsNumber allowHighAccuracy){}
        /// <summary>
        /// Enabled/disables the auto-retrieval of the location information.<br/>
        /// If called with autoUpdate=true, it will execute an immediate location update
        /// and continue monitoring for location updates.<br/>
        /// If autoUpdate=false, any current location change monitoring will be disabled.
        /// @param {Boolean} autoUpdate Whether to start/stop location monitoring.
        /// @return {Boolean} If enabling autoUpdate, returns false if the location tracking
        /// cannot begin due to an error supporting geolocation.
        /// A locationerror event is also fired.
        /// </summary>
        public bool setAutoUpdate(bool autoUpdate){return false;}
        /// <summary>
        /// Changes the {@link #maximumAge} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} maximumAge The value to set the maximumAge option to.
        /// </summary>
        public void setMaximumAge(JsNumber maximumAge){}
        /// <summary>
        /// Changes the {@link #timeout} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} timeout The value to set the timeout option to.
        /// </summary>
        public void setTimeout(JsNumber timeout){}
        /// <summary>
        /// Executes a onetime location update operation,
        /// raising either a {@link #locationupdate} or {@link #locationerror} event.<br/>
        /// Does not interfere with or restart ongoing location monitoring.
        /// @param {Function} callback
        /// A callback method to be called when the location retrieval has been completed.<br/>
        /// Will be called on both success and failure.<br/>
        /// The method will be passed one parameter, {@link Ext.GeoLocation} (<b>this</b> reference),
        /// set to null on failure.
        /// <pre><code>
        /// geo.updateLocation(function (geo) {
        /// alert('Latitude: ' + (geo != null ? geo.latitude : 'failed'));
        /// });
        /// </code></pre>
        /// @param {Object} scope (optional)
        /// (optional) The scope (<b>this</b> reference) in which the handler function is executed.
        /// <b>If omitted, defaults to the object which fired the event.</b>
        /// <!--positonOptions undocumented param, see W3C spec-->
        /// </summary>
        public void updateLocation(JsAction callback, object scope, object positionOptions){}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// accuracy level of the latitude and longitude coordinates,
        /// specified in meters.<br/>
        /// This will always be a non-negative number.<br/>
        /// This corresponds to a 95% confidence level.
        /// @type Number
        /// </summary>
        public object accuracy{get;set;}
        /// <summary>
        /// @cfg {Boolean} allowHighAccuracy
        /// Defaults to false.<br/>
        /// When set to true, provide a hint that the application would like to receive
        /// the best possible results. This may result in slower response times or increased power consumption.
        /// The user might also deny this capability, or the device might not be able to provide more accurate
        /// results than if this option was set to false.
        /// </summary>
        public bool allowHighAccuracy{get;set;}
        /// <summary>
        /// Changes the {@link #allowHighAccuracy} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} allowHighAccuracy The value to set the allowHighAccuracy option to.
        /// </summary>
        [JsProperty]
        public JsNumber AllowHighAccuracy{private get;[JsMethod(Name="setAllowHighAccuracy")]set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// height of the position, specified in meters above the ellipsoid
        /// <a href="http://dev.w3.org/geo/api/spec-source.html#ref-wgs">[WGS84]</a>.
        /// @type Number/null
        /// </summary>
        public object altitude{get;set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// accuracy level of the altitude coordinate, specified in meters.<br/>
        /// If altitude is not null then this will be a non-negative number.
        /// Otherwise this returns null.<br/>
        /// This corresponds to a 95% confidence level.
        /// @type Number/null
        /// </summary>
        public object altitudeAccuracy{get;set;}
        /// <summary>
        /// @cfg {Boolean} autoUpdate
        /// Defaults to true.<br/>
        /// When set to true, continually monitor the location of the device
        /// (beginning immediately) and fire {@link #locationupdate}/{@link #locationerror} events.<br/>
        /// <br/>
        /// When using google gears, if the user denies access or another error occurs, this will be reset to false.
        /// </summary>
        public bool autoUpdate{get;set;}
        /// <summary>
        /// Enabled/disables the auto-retrieval of the location information.<br/>
        /// If called with autoUpdate=true, it will execute an immediate location update
        /// and continue monitoring for location updates.<br/>
        /// If autoUpdate=false, any current location change monitoring will be disabled.
        /// @param {Boolean} autoUpdate Whether to start/stop location monitoring.
        /// @return {Boolean} If enabling autoUpdate, returns false if the location tracking
        /// cannot begin due to an error supporting geolocation.
        /// A locationerror event is also fired.
        /// </summary>
        [JsProperty]
        public bool AutoUpdate{private get;[JsMethod(Name="setAutoUpdate")]set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// direction of travel of the hosting device,
        /// specified in non-negative degrees between 0 and 359,
        /// counting clockwise relative to the true north.<br/>
        /// If speed is 0 (device is stationary), then this returns NaN
        /// @type Number/null
        /// </summary>
        public object heading{get;set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// geographical coordinate specified in degrees.
        /// @type Number
        /// </summary>
        public object latitude{get;set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// geographical coordinate specified in degrees.
        /// @type Number
        /// </summary>
        public object longitude{get;set;}
        /// <summary>
        /// @cfg {Number} maximumAge
        /// Defaults to 0.<br/>
        /// This option indicates that the application is willing to accept cached location information whose age
        /// is no greater than the specified time in milliseconds. If maximumAge is set to 0, an attempt to retrieve
        /// new location information is made immediately.<br/>
        /// Setting the maximumAge to Infinity returns a cached position regardless of its age.<br/>
        /// If the device does not have cached location information available whose age is no
        /// greater than the specified maximumAge, then it must acquire new location information.<br/>
        /// For example, if location information no older than 10 minutes is required, set this property to 600000.
        /// </summary>
        public JsNumber maximumAge{get;set;}
        /// <summary>
        /// Changes the {@link #maximumAge} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} maximumAge The value to set the maximumAge option to.
        /// </summary>
        [JsProperty]
        public JsNumber MaximumAge{private get;[JsMethod(Name="setMaximumAge")]set;}
        public object provider{get;set;}
        /// <summary>
        /// Read-only property representing the last retrieved
        /// current ground speed of the device, specified in meters per second.<br/>
        /// If this feature is unsupported by the device, this returns null.<br/>
        /// If the device is stationary, this returns 0,
        /// otherwise it returns a non-negative number.
        /// @type Number/null
        /// </summary>
        public object speed{get;set;}
        /// <summary>
        /// Changes the {@link #timeout} option and restarts any active
        /// location monitoring with the updated setting.
        /// @param {Number} timeout The value to set the timeout option to.
        /// </summary>
        [JsProperty]
        public JsNumber Timeout{private get;[JsMethod(Name="setTimeout")]set;}
        /// <summary>
        /// Read-only property representing when the last retrieved
        /// positioning information was acquired by the device.
        /// @type Date
        /// </summary>
        public object timestamp{get;set;}
        public object watchOperation{get;set;}
    }
    #endregion
    #region GeoLocationConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class GeoLocationConfig
    {
        public GeoLocationConfig(){}
        /// <summary>
        /// Defaults to false.<br/>
        /// When set to true, provide a hint that the application would like to receive
        /// the best possible results. This may result in slower response times or increased power consumption.
        /// The user might also deny this capability, or the device might not be able to provide more accurate
        /// results than if this option was set to false.
        /// </summary>
        public bool allowHighAccuracy{get;set;}
        /// <summary>
        /// Defaults to true.<br/>
        /// When set to true, continually monitor the location of the device
        /// (beginning immediately) and fire {@link #locationupdate}/{@link #locationerror} events.<br/>
        /// <br/>
        /// When using google gears, if the user denies access or another error occurs, this will be reset to false.
        /// </summary>
        public bool autoUpdate{get;set;}
        /// <summary>
        /// Defaults to 0.<br/>
        /// This option indicates that the application is willing to accept cached location information whose age
        /// is no greater than the specified time in milliseconds. If maximumAge is set to 0, an attempt to retrieve
        /// new location information is made immediately.<br/>
        /// Setting the maximumAge to Infinity returns a cached position regardless of its age.<br/>
        /// If the device does not have cached location information available whose age is no
        /// greater than the specified maximumAge, then it must acquire new location information.<br/>
        /// For example, if location information no older than 10 minutes is required, set this property to 600000.
        /// </summary>
        public JsNumber maximumAge{get;set;}
        /// <summary>
        /// Defaults to Infinity.<br/>
        /// The maximum number of milliseconds allowed to elapse between a location update operation
        /// and the corresponding {@link #locationupdate} event being raised.  If a location was not successfully
        /// acquired before the given timeout elapses (and no other internal errors have occurred in this interval),
        /// then a {@link #locationerror} event will be raised indicating a timeout as the cause.<br/>
        /// Note that the time that is spent obtaining the user permission is <b>not</b> included in the period
        /// covered by the timeout.  The timeout attribute only applies to the location acquisition operation.<br/>
        /// In the case of calling updateLocation, the {@link #locationerror} event will be raised only once.<br/>
        /// If {@link #autoUpdate} is set to true, the {@link #locationerror} event could be raised repeatedly.
        /// The first timeout is relative to the moment {@link #autoUpdate} was set to true
        /// (or this {@link Ext.util.GeoLocation} was initialized with the {@link #autoUpdate} config option set to true).
        /// Subsequent timeouts are relative to the moment when the device determines that it's position has changed.
        /// </summary>
        public JsNumber timeout{get;set;}
    }
    #endregion
    #region HashMap
    /// <summary>
    /// @class Ext.util.HashMap
    /// @extends Ext.util.Observable
    /// <p>A simple unordered dictionary implementation to store key/value pairs.</p>
    /// @cfg {Function} keyFn A function that is used to retrieve a default key for a passed object.
    /// A default is provided that returns the <b>id</b> property on the object. This function is only used
    /// if the add method is called with a single argument.
    /// @constructor
    /// @param {Object} config The configuration options
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class HashMap : Observable
    {
        public HashMap(){}
        public HashMap(HashMapConfig config){}
        /// <summary>
        /// Add a new item to the hash. An exception will be thrown if the key already exists.
        /// @param {String} key The key of the new item.
        /// @param {Object} value The value of the new item.
        /// @return {Object} The value of the new item added.
        /// </summary>
        public object add(JsString key, object value){return null;}
        /// <summary>
        /// private
        /// </summary>
        public void clear(object initial){}
        /// <summary>
        /// Performs a shallow copy on this hash.
        /// @return {Ext.util.HashMap} The new hash object.
        /// </summary>
        public HashMap clone(){return null;}
        /// <summary>
        /// @class Ext.util.HashMap
        /// @extends Ext.util.Observable
        /// <p>A simple unordered dictionary implementation to store key/value pairs.</p>
        /// @cfg {Function} keyFn A function that is used to retrieve a default key for a passed object.
        /// A default is provided that returns the <b>id</b> property on the object. This function is only used
        /// if the add method is called with a single argument.
        /// @constructor
        /// @param {Object} config The configuration options
        /// </summary>
        public HashMap(object config){}
        /// <summary>
        /// Checks whether a value exists in the hash.
        /// @param {Object} value The value to check for.
        /// @return {Boolean} True if the value exists in the dictionary.
        /// </summary>
        public bool contains(object value){return false;}
        /// <summary>
        /// Checks whether a key exists in the hash.
        /// @param {String} key The key to check for.
        /// @return {Boolean} True if they key exists in the hash.
        /// </summary>
        public bool containsKey(JsString key){return false;}
        /// <summary>
        /// Executes the specified function once for each item in the hash.
        /// Returning false from the function will cease iteration.
        /// The paramaters passed to the function are:
        /// <div class="mdetail-params"><ul>
        /// <li><b>key</b> : String<p class="sub-desc">The key of the item</p></li>
        /// <li><b>value</b> : Number<p class="sub-desc">The value of the item</p></li>
        /// <li><b>length</b> : Number<p class="sub-desc">The total number of items in the hash</p></li>
        /// </ul></div>
        /// @param {Function} fn The function to execute.
        /// @param {Object} scope The scope to execute in. Defaults to <tt>this</tt>.
        /// @return {Ext.util.HashMap} this
        /// </summary>
        public HashMap each(JsAction fn, object scope){return null;}
        /// <summary>
        /// @private
        /// Find the key for a value.
        /// @param {Object} value The value to find.
        /// @return {Object} The value of the item. Returns <tt>undefined</tt> if not found.
        /// </summary>
        public object findKey(object value){return null;}
        /// <summary>
        /// Retrieves an item with a particular key.
        /// @param {String} key The key to lookup.
        /// @return {Object} The value at that key. If it doesn't exist, <tt>undefined</tt> is returned.
        /// </summary>
        public object get(JsString key){return null;}
        /// <summary>
        /// Gets either the keys/values in an array from the hash.
        /// @private
        /// @param {Boolean} isKey True to extract the keys, otherwise, the value
        /// @return {Array} An array of either keys/values from the hash.
        /// </summary>
        public JsArray getArray(bool isKey){return null;}
        /// <summary>
        /// Gets the number of items in the hash.
        /// @return {Number} The number of items in the hash.
        /// </summary>
        public JsNumber getCount(){return null;}
        /// <summary>
        /// Implementation for being able to extract the key from an object if only
        /// a single argument is passed.
        /// @private
        /// @param {String} key The key
        /// @param {Object} value The value
        /// @return {Array} [key, value]
        /// </summary>
        public JsArray getData(JsString key, object value){return null;}
        /// <summary>
        /// Extracts the key from an object. This is a default implementation, it may be overridden
        /// @private
        /// @param {Object} o The object to get the key from
        /// @return {String} The key to use.
        /// </summary>
        public JsString getKey(object o){return null;}
        /// <summary>
        /// Return all of the keys in the hash.
        /// @return {Array} An array of keys.
        /// </summary>
        public JsArray getKeys(){return null;}
        /// <summary>
        /// Return all of the values in the hash.
        /// @return {Array} An array of values.
        /// </summary>
        public JsArray getValues(){return null;}
        /// <summary>
        /// Remove an item from the hash.
        /// @param {Object} o The value of the item to remove.
        /// @return {Boolean} True if the item was successfully removed.
        /// </summary>
        public bool remove(object o){return false;}
        /// <summary>
        /// Remove an item from the hash.
        /// @param {String} key The key to remove.
        /// @return {Boolean} True if the item was successfully removed.
        /// </summary>
        public bool removeByKey(JsString key){return false;}
        /// <summary>
        /// Replaces an item in the hash. If the key doesn't exist, the
        /// {@link #add} method will be used.
        /// @param {String} key The key of the item.
        /// @param {Object} value The new value for the item.
        /// @return {Object} The new value of the item.
        /// </summary>
        public object replace(JsString key, object value){return null;}
        /// <summary>
        /// Gets the number of items in the hash.
        /// @return {Number} The number of items in the hash.
        /// </summary>
        [JsProperty]
        public JsNumber Count{[JsMethod(Name="getCount")]get;private set;}
        /// <summary>
        /// Return all of the keys in the hash.
        /// @return {Array} An array of keys.
        /// </summary>
        [JsProperty]
        public JsArray Keys{[JsMethod(Name="getKeys")]get;private set;}
        /// <summary>
        /// Return all of the values in the hash.
        /// @return {Array} An array of values.
        /// </summary>
        [JsProperty]
        public JsArray Values{[JsMethod(Name="getValues")]get;private set;}
    }
    #endregion
    #region HashMapConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class HashMapConfig
    {
        public HashMapConfig(){}
        /// <summary>
        /// A function that is used to retrieve a default key for a passed object.
        /// A default is provided that returns the <b>id</b> property on the object. This function is only used
        /// if the add method is called with a single argument.
        /// @constructor
        /// </summary>
        public JsAction keyFn{get;set;}
    }
    #endregion
    #region JSON
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JSON
    {
        public JSON(){}
        public static void decode(object s){}
        /// <summary>
        /// @class Ext.util.JSON
        /// Modified version of Douglas Crockford"s json.js that doesn"t
        /// mess with the Object prototype
        /// http://www.json.org/js.html
        /// @singleton
        /// </summary>
        public static void encode(object o){}
    }
    #endregion
    #region JSONP
    [JsType(JsMode.Prototype, Export=false)]
    public partial class JSONP
    {
        public JSONP(){}
        public static void callback(object json){}
        public static void next(){}
        /// <summary>
        /// Make a cross-domain request using JSONP.
        /// @param {Object} config
        /// Valid configurations are:
        /// <ul>
        /// <li>url - {String} - Url to request data from. (required) </li>
        /// <li>params - {Object} - A set of key/value pairs to be url encoded and passed as GET parameters in the request.</li>
        /// <li>callbackKey - {String} - Key specified by the server-side provider.</li>
        /// <li>callback - {Function} - Will be passed a single argument of the result of the request.</li>
        /// <li>scope - {Scope} - Scope to execute your callback in.</li>
        /// </ul>
        /// </summary>
        public static void request(object o){}
        /// <summary>
        /// Read-only current executing request
        /// @type Object
        /// </summary>
        public static object current{get;set;}
    }
    #endregion
    #region MixedCollection
    /// <summary>
    /// @class Ext.util.MixedCollection
    /// @extends Ext.util.Observable
    /// A Collection class that maintains both numeric indexes and keys and exposes events.
    /// @constructor
    /// @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
    /// function should add function references to the collection. Defaults to
    /// <tt>false</tt>.
    /// @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
    /// and return the key value for that item.  This is used when available to look up the key on items that
    /// were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
    /// equivalent to providing an implementation for the {@link #getKey} method.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class MixedCollection
    {
        public MixedCollection(){}
        /// <summary>
        /// @class Ext.util.MixedCollection
        /// @extends Ext.util.Observable
        /// A Collection class that maintains both numeric indexes and keys and exposes events.
        /// @constructor
        /// @param {Boolean} allowFunctions Specify <tt>true</tt> if the {@link #addAll}
        /// function should add function references to the collection. Defaults to
        /// <tt>false</tt>.
        /// @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
        /// and return the key value for that item.  This is used when available to look up the key on items that
        /// were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
        /// equivalent to providing an implementation for the {@link #getKey} method.
        /// </summary>
        public MixedCollection(bool allowFunctions, JsAction keyFn){}
    }
    #endregion
    #region Numbers
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Numbers
    {
        public Numbers(){}
        /// <summary>
        /// Checks whether or not the current number is within a desired range.  If the number is already within the
        /// range it is returned, otherwise the min or max value is returned depending on which side of the range is
        /// exceeded.  Note that this method returns the constrained value but does not change the current number.
        /// @param {Number} number The number to check
        /// @param {Number} min The minimum number in the range
        /// @param {Number} max The maximum number in the range
        /// @return {Number} The constrained value if outside the range, otherwise the current value
        /// </summary>
        public static JsNumber constrain(JsNumber number, JsNumber min, JsNumber max){return null;}
        /// <summary>
        /// Formats a number using fixed-point notation
        /// @param {Number} value The number to format
        /// @param {Number} precision The number of digits to show after the decimal point
        /// </summary>
        public static void toFixed(JsNumber value, JsNumber precision){}
    }
    #endregion
    #region Observable
    /// <summary>
    /// @class Ext.util.Observable
    /// Base class that provides a common interface for publishing events. Subclasses are expected to
    /// to have a property "events" with all the events defined, and, optionally, a property "listeners"
    /// with configured listeners defined.<br>
    /// For example:
    /// <pre><code>
    /// Employee = Ext.extend(Ext.util.Observable, {
    /// constructor: function(config){
    /// this.name = config.name;
    /// this.addEvents({
    /// "fired" : true,
    /// "quit" : true
    /// });
    /// // Copy configured listeners into *this* object so that the base class&#39;s
    /// // constructor will add them.
    /// this.listeners = config.listeners;
    /// // Call our superclass constructor to complete construction process.
    /// Employee.superclass.constructor.call(this, config)
    /// }
    /// });
    /// </code></pre>
    /// This could then be used like this:<pre><code>
    /// var newEmployee = new Employee({
    /// name: employeeName,
    /// listeners: {
    /// quit: function() {
    /// // By default, "this" will be the object that fired the event.
    /// alert(this.name + " has quit!");
    /// }
    /// }
    /// });
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Observable
    {
        public Observable(){}
        public Observable(ObservableConfig config){}
        /// <summary>
        /// Adds the specified events to the list of events which this Observable may fire.
        /// @param {Object|String} o Either an object with event names as properties with a value of <code>true</code>
        /// or the first event name string if multiple event names are being passed as separate parameters.
        /// @param {string} Optional. Event name if multiple event names are being passed as separate parameters.
        /// Usage:<pre><code>
        /// this.addEvents('storeloaded', 'storecleared');
        /// </code></pre>
        /// </summary>
        public void addEvents(object o){}
        /// <summary>
        /// Appends an event handler to this object.
        /// @param {String}   eventName The name of the event to listen for. May also be an object who's property names are event names. See
        /// @param {Function} handler The method the event invokes.
        /// @param {Object}   scope (optional) The scope (<code><b>this</b></code> reference) in which the handler function is executed.
        /// <b>If omitted, defaults to the object which fired the event.</b>
        /// @param {Object}   options (optional) An object containing handler configuration.
        /// properties. This may contain any of the following properties:<ul>
        /// <li><b>scope</b> : Object<div class="sub-desc">The scope (<code><b>this</b></code> reference) in which the handler function is executed.
        /// <b>If omitted, defaults to the object which fired the event.</b></div></li>
        /// <li><b>delay</b> : Number<div class="sub-desc">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>
        /// <li><b>single</b> : Boolean<div class="sub-desc">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>
        /// <li><b>buffer</b> : Number<div class="sub-desc">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed
        /// by the specified number of milliseconds. If the event fires again within that time, the original
        /// handler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>
        /// <li><b>target</b> : Observable<div class="sub-desc">Only call the handler if the event was fired on the target Observable, <i>not</i>
        /// if the event was bubbled up from a child Observable.</div></li>
        /// <li><b>element</b> : String<div class="sub-desc"><b>This option is only valid for listeners bound to {@link Ext.Component Components}.</b>
        /// The name of a Component property which references an element to add a listener to.
        /// <p>This option is useful during Component construction to add DOM event listeners to elements of {@link Ext.Component Components} which
        /// will exist only after the Component is rendered. For example, to add a click listener to a Panel's body:<pre><code>
        /// new Ext.Panel({
        /// title: 'The title',
        /// listeners: {
        /// click: this.handlePanelClick,
        /// element: 'body'
        /// }
        /// });
        /// </code></pre></p>
        /// <p>When added in this way, the options available are the options applicable to {@link Ext.Element#addListener}</p></div></li>
        /// </ul><br>
        /// <p>
        /// <b>Combining Options</b><br>
        /// Using the options argument, it is possible to combine different types of listeners:<br>
        /// <br>
        /// A delayed, one-time listener.
        /// <pre><code>
        /// myPanel.on('hide', this.handleClick, this, {
        /// single: true,
        /// delay: 100
        /// });</code></pre>
        /// <p>
        /// <b>Attaching multiple handlers in 1 call</b><br>
        /// The method also allows for a single argument to be passed which is a config object containing properties
        /// which specify multiple events. For example:<pre><code>
        /// myGridPanel.on({
        /// cellClick: this.onCellClick,
        /// mouseover: this.onMouseOver,
        /// mouseout: this.onMouseOut,
        /// scope: this // Important. Ensure "this" is correct during handler execution
        /// });
        /// </code></pre>.
        /// <p>
        /// </summary>
        public void addListener(JsString ename, JsAction fn, object scope, object o){}
        /// <summary>
        /// <p>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
        /// is destroyed.
        /// @param {Observable|Element} item The item to which to add a listener/listeners.
        /// @param {Object|String} ename The event name, or an object containing event name properties.
        /// @param {Function} fn Optional. If the <code>ename</code> parameter was an event name, this
        /// is the handler function.
        /// @param {Object} scope Optional. If the <code>ename</code> parameter was an event name, this
        /// is the scope (<code>this</code> reference) in which the handler function is executed.
        /// @param {Object} opt Optional. If the <code>ename</code> parameter was an event name, this
        /// is the {@link Ext.util.Observable#addListener addListener} options.
        /// </summary>
        public void addManagedListener(object item, object ename, JsAction fn, object scope, object options){}
        /// <summary>
        /// Starts capture on the specified Observable. All events will be passed
        /// to the supplied function with the event name + standard signature of the event
        /// <b>before</b> the event is fired. If the supplied function returns false,
        /// the event will not fire.
        /// @param {Observable} o The Observable to capture events from.
        /// @param {Function} fn The function to call when an event is fired.
        /// @param {Object} scope (optional) The scope (<code>this</code> reference) in which the function is executed. Defaults to the Observable firing the event.
        /// @static
        /// </summary>
        public static void capture(object o, JsAction fn, object scope){}
        /// <summary>
        /// Removes all listeners for this object including the managed listeners
        /// </summary>
        public void clearListeners(){}
        /// <summary>
        /// Removes all managed listeners for this object.
        /// </summary>
        public void clearManagedListeners(){}
        public Observable(object config){}
        /// <summary>
        /// <p>Enables events fired by this Observable to bubble up an owner hierarchy by calling
        /// <code>this.getBubbleTarget()</code> if present. There is no implementation in the Observable base class.</p>
        /// <p>This is commonly used by Ext.Components to bubble events to owner Containers. See {@link Ext.Component.getBubbleTarget}. The default
        /// implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
        /// access the required target more quickly.</p>
        /// <p>Example:</p><pre><code>
        /// Ext.override(Ext.form.Field, {
        /// //  Add functionality to Field&#39;s initComponent to enable the change event to bubble
        /// initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
        /// this.enableBubble('change');
        /// }),
        /// //  We know that we want Field&#39;s events to bubble directly to the FormPanel.
        /// getBubbleTarget : function() {
        /// if (!this.formPanel) {
        /// this.formPanel = this.findParentByType('form');
        /// }
        /// return this.formPanel;
        /// }
        /// });
        /// var myForm = new Ext.formPanel({
        /// title: 'User Details',
        /// items: [{
        /// ...
        /// }],
        /// listeners: {
        /// change: function() {
        /// // Title goes red if form has been modified.
        /// myForm.header.setStyle('color', 'red');
        /// }
        /// }
        /// });
        /// </code></pre>
        /// @param {String/Array} events The event name to bubble, or an Array of event names.
        /// </summary>
        public void enableBubble(object events){}
        /// <summary>
        /// <p>Fires the specified event with the passed parameters (minus the event name).</p>
        /// <p>An event may be set to bubble up an Observable parent hierarchy (See {@link Ext.Component#getBubbleTarget})
        /// by calling {@link #enableBubble}.</p>
        /// @param {String} eventName The name of the event to fire.
        /// @param {Object...} args Variable number of parameters are passed to handlers.
        /// @return {Boolean} returns false if any of the handlers return false otherwise it returns true.
        /// </summary>
        public bool fireEvent(){return false;}
        /// <summary>
        /// Checks to see if this object has any listeners for a specified event
        /// @param {String} eventName The name of the event to check for
        /// @return {Boolean} True if the event is being listened for, else false
        /// </summary>
        public bool hasListener(JsString ename){return false;}
        /// <summary>
        /// Sets observability on the passed class constructor.<p>
        /// <p>This makes any event fired on any instance of the passed class also fire a single event through
        /// the <i>class</i> allowing for central handling of events on many instances at once.</p>
        /// <p>Usage:</p><pre><code>
        /// Ext.util.Observable.observe(Ext.data.Connection);
        /// Ext.data.Connection.on('beforerequest', function(con, options) {
        /// console.log('Ajax request made to ' + options.url);
        /// });</code></pre>
        /// @param {Function} c The class constructor to make observable.
        /// @param {Object} listeners An object containing a series of listeners to add. See {@link #addListener}.
        /// @static
        /// </summary>
        public static void observe(JsAction cls, object listeners){}
        public void purgeListeners(){}
        public void purgeManagedListeners(){}
        /// <summary>
        /// Relays selected events from the specified Observable as if the events were fired by <tt><b>this</b></tt>.
        /// @param {Object} o The Observable whose events this object is to relay.
        /// @param {Array} events Array of event names to relay.
        /// </summary>
        public void relayEvents(object origin, JsArray events, object prefix){}
        /// <summary>
        /// Removes <b>all</b> added captures from the Observable.
        /// @param {Observable} o The Observable to release
        /// @static
        /// </summary>
        public static void releaseCapture(object o){}
        /// <summary>
        /// Removes an event handler.
        /// @param {String}   eventName The type of event the handler was associated with.
        /// @param {Function} handler   The handler to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>
        /// @param {Object}   scope     (optional) The scope originally specified for the handler.
        /// </summary>
        public void removeListener(JsString ename, JsAction fn, object scope){}
        /// <summary>
        /// Removes listeners that were added by the {@link #mon} method.
        /// @param {Observable|Element} item The item from which to remove a listener/listeners.
        /// @param {Object|String} ename The event name, or an object containing event name properties.
        /// @param {Function} fn Optional. If the <code>ename</code> parameter was an event name, this
        /// is the handler function.
        /// @param {Object} scope Optional. If the <code>ename</code> parameter was an event name, this
        /// is the scope (<code>this</code> reference) in which the handler function is executed.
        /// </summary>
        public void removeManagedListener(object item, object ename, JsAction fn, object scope){}
        /// <summary>
        /// Resume firing events. (see {@link #suspendEvents})
        /// If events were suspended using the <tt><b>queueSuspended</b></tt> parameter, then all
        /// events fired during event suspension will be sent to any listeners now.
        /// </summary>
        public void resumeEvents(){}
        /// <summary>
        /// Suspend the firing of all events. (see {@link #resumeEvents})
        /// @param {Boolean} queueSuspended Pass as true to queue up suspended events to be fired
        /// after the {@link #resumeEvents} call instead of discarding all suspended events;
        /// </summary>
        public void suspendEvents(bool queueSuspended){}
        public JsRegExp eventOptionsRe{get;set;}
        /// <summary>
        /// @cfg {Object} listeners (optional) <p>A config object containing one or more event handlers to be added to this
        /// object during initialization.  This should be a valid listeners config object as specified in the
        /// {@link #addListener} example for attaching multiple handlers at once.</p>
        /// <br><p><b><u>DOM events from ExtJs {@link Ext.Component Components}</u></b></p>
        /// <br><p>While <i>some</i> ExtJs Component classes export selected DOM events (e.g. "click", "mouseover" etc), this
        /// is usually only done when extra value can be added. For example the {@link Ext.DataView DataView}'s
        /// <b><code>{@link Ext.DataView#click click}</code></b> event passing the node clicked on. To access DOM
        /// events directly from a child element of a Component, we need to specify the <code>element</code> option to
        /// identify the Component property to add a DOM listener to:
        /// <pre><code>
        /// new Ext.Panel({
        /// width: 400,
        /// height: 200,
        /// dockedItems: [{
        /// xtype: 'toolbar'
        /// }],
        /// listeners: {
        /// click: {
        /// element: 'el', //bind to the underlying el property on the panel
        /// fn: function(){ console.log('click el'); }
        /// },
        /// dblclick: {
        /// element: 'body', //bind to the underlying body property on the panel
        /// fn: function(){ console.log('dblclick body'); }
        /// }
        /// }
        /// });
        /// </code></pre>
        /// </p>
        /// </summary>
        public bool isObservable{get;set;}
    }
    #endregion
    #region ObservableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ObservableConfig
    {
        public ObservableConfig(){}
        /// <summary>
        /// (optional) <p>A config object containing one or more event handlers to be added to this
        /// object during initialization.  This should be a valid listeners config object as specified in the
        /// {@link #addListener} example for attaching multiple handlers at once.</p>
        /// <br><p><b><u>DOM events from ExtJs {@link Ext.Component Components}</u></b></p>
        /// <br><p>While <i>some</i> ExtJs Component classes export selected DOM events (e.g. "click", "mouseover" etc), this
        /// is usually only done when extra value can be added. For example the {@link Ext.DataView DataView}'s
        /// <b><code>{@link Ext.DataView#click click}</code></b> event passing the node clicked on. To access DOM
        /// events directly from a child element of a Component, we need to specify the <code>element</code> option to
        /// identify the Component property to add a DOM listener to:
        /// <pre><code>
        /// new Ext.Panel({
        /// width: 400,
        /// height: 200,
        /// dockedItems: [{
        /// xtype: 'toolbar'
        /// }],
        /// listeners: {
        /// click: {
        /// element: 'el', //bind to the underlying el property on the panel
        /// fn: function(){ console.log('click el'); }
        /// },
        /// dblclick: {
        /// element: 'body', //bind to the underlying body property on the panel
        /// fn: function(){ console.log('dblclick body'); }
        /// }
        /// }
        /// });
        /// </code></pre>
        /// </p>
        /// </summary>
        public object listeners{get;set;}
    }
    #endregion
    #region Offset
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Offset
    {
        public Offset(){}
        public Offset(object x, object y){}
        public void copy(){}
        public void copyFrom(object p){}
        public void equals(object offset){}
        public static void fromObject(object obj){}
        public void isZero(){}
        public void round(object to){}
        public void toString(){}
    }
    #endregion
    #region Point
    /// <summary>
    /// @class Ext.util.Point
    /// @extends Object
    /// *
    /// Represents a 2D point with x and y properties, useful for comparison and instantiation
    /// from an event:
    /// <pre><code>
    /// var point = Ext.util.Point.fromEvent(e);
    /// </code></pre>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Point
    {
        public Point(){}
        /// <summary>
        /// @class Ext.util.Point
        /// @extends Object
        /// *
        /// Represents a 2D point with x and y properties, useful for comparison and instantiation
        /// from an event:
        /// <pre><code>
        /// var point = Ext.util.Point.fromEvent(e);
        /// </code></pre>
        /// </summary>
        public Point(object x, object y){}
        /// <summary>
        /// Copy a new instance of this point
        /// @return {Ext.util.Point} the new point
        /// </summary>
        public Point copy(){return null;}
        /// <summary>
        /// Copy the x and y values of another point / object to this point itself
        /// @param {}
        /// @return {Ext.util.Point} this This point
        /// </summary>
        public Point copyFrom(object p){return null;}
        /// <summary>
        /// Compare this point and another point
        /// @param {Ext.util.Point/Object} The point to compare with, either an instance
        /// of Ext.util.Point or an object with x and y properties
        /// @return {Boolean} Returns whether they are equivalent
        /// </summary>
        public bool equals(object p){return false;}
        /// <summary>
        /// Returns a new instance of Ext.util.Point base on the pageX / pageY values of the given event
        /// @static
        /// @param {Event} e The event
        /// @returns Ext.util.Point
        /// </summary>
        public static void fromEvent(object e){}
        /// <summary>
        /// Whether the given point is not away from this point within the given threshold amount
        /// @param {Ext.util.Point/Object} The point to check with, either an instance
        /// of Ext.util.Point or an object with x and y properties
        /// @param {Object/Number} threshold Can be either an object with x and y properties or a number
        /// @return {Boolean}
        /// </summary>
        public void isWithin(object p, object threshold){}
        /// <summary>
        /// Compare this point with another point when the x and y values of both points are rounded. E.g:
        /// [100.3,199.8] will equals to [100, 200]
        /// @param {Ext.util.Point/Object} The point to compare with, either an instance
        /// of Ext.util.Point or an object with x and y properties
        /// @return {Boolean}
        /// </summary>
        public void roundedEquals(object p){}
        /// <summary>
        /// Returns a human-eye-friendly string that represents this point,
        /// useful for debugging
        /// @return {String}
        /// </summary>
        public void toString(){}
        /// <summary>
        /// Translate this point by the given amounts
        /// @param {Number} x Amount to translate in the x-axis
        /// @param {Number} y Amount to translate in the y-axis
        /// @return {Boolean}
        /// </summary>
        public void translate(JsNumber x, JsNumber y){}
    }
    #endregion
    #region Region
    /// <summary>
    /// @class Ext.util.Region
    /// @extends Object
    /// *
    /// Represents a rectangular region and provides a number of utility methods
    /// to compare regions.
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Region
    {
        public Region(){}
        /// <summary>
        /// Modifies the current region to be adjusted by offsets.
        /// @param {Number} top top offset
        /// @param {Number} right right offset
        /// @param {Number} bottom bottom offset
        /// @param {Number} left left offset
        /// </summary>
        public void adjust(JsNumber t, JsNumber r, JsNumber b, JsNumber l){}
        /// <summary>
        /// Modifies the current region to be constrained to the targetRegion.
        /// @param {Ext.util.Region} targetRegion
        /// </summary>
        public void constrainTo(Region r){}
        /// <summary>
        /// @constructor
        /// @param {Number} top Top
        /// @param {Number} right Right
        /// @param {Number} bottom Bottom
        /// @param {Number} left Left
        /// </summary>
        public Region(JsNumber t, JsNumber r, JsNumber b, JsNumber l){}
        /// <summary>
        /// Checks if this region completely contains the region that is passed in.
        /// @param {Ext.util.Region} region
        /// </summary>
        public void contains(Region region){}
        /// <summary>
        /// Copy a new instance
        /// @return {Ext.util.Region}
        /// </summary>
        public void copy(){}
        /// <summary>
        /// Check whether this region is equivalent to the given region
        /// @param {Ext.util.Region} region The region to compare with
        /// @return {Boolean}
        /// </summary>
        public void equals(Region region){}
        /// <summary>
        /// @static
        /// @param {Object} o An object with top, right, bottom, left properties
        /// @return {Ext.util.Region} region The region constructed based on the passed object
        /// </summary>
        public static Region from(object o){return null;}
        /// <summary>
        /// Get the offset amount of a point outside the region
        /// @param {String} axis optional
        /// @param {Ext.util.Point} p the point
        /// @return {Ext.util.Offset}
        /// </summary>
        public void getOutOfBoundOffset(JsString axis, Point p){}
        /// <summary>
        /// Get the offset amount on the x-axis
        /// @param {Number} p the offset
        /// @return {Number}
        /// </summary>
        public void getOutOfBoundOffsetX(JsNumber p){}
        /// <summary>
        /// Get the offset amount on the y-axis
        /// @param {Number} p the offset
        /// @return {Number}
        /// </summary>
        public void getOutOfBoundOffsetY(JsNumber p){}
        /// <summary>
        /// @static
        /// @param {Mixed} el A string, DomElement or Ext.Element representing an element
        /// on the page.
        /// @returns {Ext.util.Region} region
        /// Retrieves an Ext.util.Region for a particular element.
        /// </summary>
        public static void getRegion(object el){}
        /// <summary>
        /// Get the width / height of this region
        /// @return {Object} an object with width and height properties
        /// </summary>
        public object getSize(){return null;}
        /// <summary>
        /// Checks if this region intersects the region passed in.
        /// @param {Ext.util.Region} region
        /// @return {Ext.util.Region/Boolean} Returns the intersected region or false if there is no intersection.
        /// </summary>
        public object intersect(Region region){return null;}
        /// <summary>
        /// Check whether the point / offset is out of bound
        /// @param {String} axis optional
        /// @param {Ext.util.Point/Number} p the point / offset
        /// @return {Boolean}
        /// </summary>
        public void isOutOfBound(JsString axis, object p){}
        /// <summary>
        /// Check whether the offset is out of bound in the x-axis
        /// @param {Number} p the offset
        /// @return {Boolean}
        /// </summary>
        public void isOutOfBoundX(JsNumber p){}
        /// <summary>
        /// Check whether the offset is out of bound in the y-axis
        /// @param {Number} p the offset
        /// @return {Boolean}
        /// </summary>
        public void isOutOfBoundY(JsNumber p){}
        /// <summary>
        /// Restrict a point within the region by a certain factor.
        /// @param {String} axis Optional
        /// @param {Ext.util.Point/Ext.util.Offset/Object} p
        /// @param {Number} factor
        /// @return {Ext.util.Point/Ext.util.Offset/Object/Number}
        /// </summary>
        public void restrict(JsString axis, object p, JsNumber factor){}
        /// <summary>
        /// Restrict an offset within the region by a certain factor, on the x-axis
        /// @param {Number} p
        /// @param {Number} factor The factor, optional, defaults to 1
        /// @return
        /// </summary>
        public void restrictX(JsNumber p, JsNumber factor){}
        /// <summary>
        /// Restrict an offset within the region by a certain factor, on the y-axis
        /// @param {Number} p
        /// @param {Number} factor The factor, optional, defaults to 1
        /// </summary>
        public void restrictY(JsNumber p, JsNumber factor){}
        /// <summary>
        /// Round all the properties of this region
        /// @return {Ext.util.Region} this This Region
        /// </summary>
        public Region round(){return null;}
        /// <summary>
        /// Dump this to an eye-friendly string, great for debugging
        /// @return {String}
        /// </summary>
        public void toString(){}
        /// <summary>
        /// Translate this region by the given offset amount
        /// @param {Ext.util.Offset/Object} offset
        /// @return {Ext.util.Region} this This Region
        /// </summary>
        public Region translateBy(object offset){return null;}
        /// <summary>
        /// Returns the smallest region that contains the current AND targetRegion.
        /// @param {Ext.util.Region} region
        /// </summary>
        public void union(Region region){}
        /// <summary>
        /// Get the width / height of this region
        /// @return {Object} an object with width and height properties
        /// </summary>
        [JsProperty]
        public object Size{[JsMethod(Name="getSize")]get;private set;}
    }
    #endregion
    #region Route
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.util.Route
    /// @extends Object
    /// @ignore
    /// <p>Represents a mapping between a url and a controller/action pair. May also contain additional params</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Route
    {
        public Route(){}
        /// <summary>
        /// @cfg {String} url The url string to match. Required.
        /// </summary>
        public Route(object config){}
        /// <summary>
        /// @private
        /// Takes the configured url string including wildcards and returns a regex that can be used to match
        /// against a url
        /// @param {String} url The url string
        /// @return {RegExp} The matcher regex
        /// </summary>
        public JsRegExp createMatcherRegex(JsString url){return null;}
        /// <summary>
        /// @private
        /// Returns a hash of matching url segments for the given url.
        /// @param {String} url The url to extract matches for
        /// @return {Object} matching url segments
        /// </summary>
        public object matchesFor(JsString url){return null;}
        /// <summary>
        /// Attempts to recognize a given url string and return controller/action pair for it
        /// @param {String} url The url to recognize
        /// @return {Object} The matched data, or false if no match
        /// </summary>
        public object recognize(JsString url){return null;}
        /// <summary>
        /// Returns true if this Route matches the given url string
        /// @param {String} url The url to test
        /// @return {Boolean} True if this Route recognizes the url
        /// </summary>
        public bool recognizes(JsString url){return false;}
        /// <summary>
        /// Constructs a url for the given config object by replacing wildcard placeholders in the Route's url
        /// @param {Object} config The config object
        /// @return {String} The constructed url
        /// </summary>
        public JsString urlFor(object config){return null;}
    }
    #endregion
    #region Router
    /// <summary>
    /// @author Ed Spencer
    /// @class Ext.util.Router
    /// @extends Ext.util.Observable
    /// <p>See {@link Ext.Router}.</p>
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Router : Observable
    {
        public Router(){}
        public Router(ObservableConfig config){}
        /// <summary>
        /// Connects a url-based route to a controller/action pair plus additional params
        /// @param {String} url The url to recognize
        /// </summary>
        public void connect(JsString url, object @params){}
        /// <summary>
        /// @author Ed Spencer
        /// @class Ext.util.Router
        /// @extends Ext.util.Observable
        /// <p>See {@link Ext.Router}.</p>
        /// </summary>
        public Router(object config){}
        /// <summary>
        /// Convenience method which just calls the supplied function with the Router instance. Example usage:
        /// <pre><code>
        /// Ext.Router.draw(function(map) {
        /// map.connect('activate/:token', {controller: 'users', action: 'activate'});
        /// map.connect('home',            {controller: 'index', action: 'home'});
        /// });
        /// </code></pre>
        /// @param {Function} fn The fn to call
        /// </summary>
        public void draw(JsAction fn){}
        /// <summary>
        /// Recognizes a url string connected to the Router, return the controller/action pair plus any additional
        /// config associated with it
        /// @param {String} url The url to recognize
        /// @return {Object/undefined} If the url was recognized, the controller and action to call, else undefined
        /// </summary>
        public object recognize(JsString url){return null;}
    }
    #endregion
    #region Scroller
    /// <summary>
    /// @class Ext.util.Scroller
    /// @extends Ext.util.Draggable
    /// *
    /// Provide the native scrolling experience on iDevices for any DOM element
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Scroller : Draggable
    {
        [JsType(JsMode.Prototype, Export=false)]
        public new partial class Animation
        {
            public Animation(){}
        }
        /// <summary>
        /// @class Ext.util.Indicator
        /// @extends Object
        /// *
        /// Represent the Scroll Indicator to be used in a {@link Ext.util.ScrollView ScrollView}
        /// </summary>
        [JsType(JsMode.Prototype, Export=false)]
        public partial class Indicator
        {
            public Indicator(){}
            public Indicator(IndicatorConfig config){}
            /// <summary>
            /// @cfg {String} type
            /// The type of this Indicator, valid values are 'vertical' or 'horizontal'
            /// </summary>
            public Indicator(object container, object config){}
            /// <summary>
            /// Hide this Indicator
            /// @return {Ext.util.Scroller.Indicator} this This Indicator
            /// </summary>
            public void hide(){}
            /// <summary>
            /// Set the offset position of this Indicator, relative to its container
            /// @param {Number} offset The new offset
            /// @return {Ext.util.Scroller.Indicator} this This Indicator
            /// </summary>
            public void setOffset(JsNumber offset){}
            /// <summary>
            /// Adjust the size of this Indicator, will change the height if {@link Ext.util.Scroller.Indicator#type type}
            /// is 'vertical', and width for 'horizontal'
            /// @param {Number} size The new size to change to
            /// @return {Ext.util.Scroller.Indicator} this This Indicator
            /// </summary>
            public void setSize(JsNumber size){}
            /// <summary>
            /// Set the visibility of this Indicator, a wrapper function for
            /// {@link Ext.util.Scroller.Indicator#show show} and {@link Ext.util.Scroller.Indicator#show hide}
            /// @param {Boolean} isVisible True to show this Indicator, false to hide
            /// @return {Ext.util.Scroller.Indicator} this This Indicator
            /// </summary>
            public void setVisibility(bool isVisible){}
            /// <summary>
            /// Show this Indicator
            /// @return {Ext.util.Scroller.Indicator} this This Indicator
            /// </summary>
            public void show(){}
            /// <summary>
            /// @class Ext.util.Indicator
            /// @extends Object
            /// *
            /// Represent the Scroll Indicator to be used in a {@link Ext.util.ScrollView ScrollView}
            /// </summary>
            public JsString baseCls{get;set;}
            /// <summary>
            /// Set the offset position of this Indicator, relative to its container
            /// @param {Number} offset The new offset
            /// @return {Ext.util.Scroller.Indicator} this This Indicator
            /// </summary>
            [JsProperty]
            public JsNumber Offset{private get;[JsMethod(Name="setOffset")]set;}
            /// <summary>
            /// Adjust the size of this Indicator, will change the height if {@link Ext.util.Scroller.Indicator#type type}
            /// is 'vertical', and width for 'horizontal'
            /// @param {Number} size The new size to change to
            /// @return {Ext.util.Scroller.Indicator} this This Indicator
            /// </summary>
            [JsProperty]
            public JsNumber Size{private get;[JsMethod(Name="setSize")]set;}
            /// <summary>
            /// @cfg {String} type
            /// The type of this Indicator, valid values are 'vertical' or 'horizontal'
            /// </summary>
            public JsString type{get;set;}
            public JsString ui{get;set;}
            /// <summary>
            /// Set the visibility of this Indicator, a wrapper function for
            /// {@link Ext.util.Scroller.Indicator#show show} and {@link Ext.util.Scroller.Indicator#show hide}
            /// @param {Boolean} isVisible True to show this Indicator, false to hide
            /// @return {Ext.util.Scroller.Indicator} this This Indicator
            /// </summary>
            [JsProperty]
            public bool Visibility{private get;[JsMethod(Name="setVisibility")]set;}
        }
        [JsType(JsMode.Json, Export=false)]
        public partial class IndicatorConfig
        {
            public IndicatorConfig(){}
            /// <summary>
            /// The type of this Indicator, valid values are 'vertical' or 'horizontal'
            /// </summary>
            public JsString type{get;set;}
        }
        public Scroller(){}
        public Scroller(ScrollerConfig config){}
        public Scroller(object el, object config){}
        public new void destroy(){}
        public void fireScrollEndEvent(){}
        /// <summary>
        /// Get the last actual fps performed by this Scroller. Useful for benchmarking
        /// @return {Number} The actual fps
        /// </summary>
        public JsNumber getLastActualFps(){return null;}
        /// <summary>
        /// @private
        /// </summary>
        public void handleMomentumAnimationFrame(){}
        public new void onDrag(object e){}
        public new void onDragEnd(object e){}
        public void onDragStart(object e){}
        public void onOffsetChange(object scroller, object offset){}
        public new void onOrientationChange(){}
        public new void onStart(object e){}
        public void onTouchStart(object e){}
        /// <summary>
        /// Change the scroll offset by the given amount
        /// @param {Ext.util.Offset/Object} offset The amount to scroll by, e.g {x: 100, y: 200}
        /// @param {Number/Boolean} animate Whether or not to animate while changing the scroll position.
        /// If it's a number, will be treated as the duration in ms
        /// @return {Ext.util.Scroller} this This Scroller
        /// </summary>
        public Scroller scrollBy(object offset, object animate){return null;}
        /// <summary>
        /// Similar to {@link Ext.util.Scroller#setOffset setOffset}, but will stop any existing animation
        /// @param {Object} pos The new scroll position, e.g {x: 100, y: 200}
        /// @param {Number/Boolean} animate Whether or not to animate while changing the scroll position.
        /// If it's a number, will be treated as the duration in ms
        /// @return {Ext.util.Scroller} this This Scroller
        /// </summary>
        public Scroller scrollTo(object pos, object animate){return null;}
        public void setSnap(object snap){}
        public void setStartTime(object e){}
        /// <summary>
        /// Snap this scrollable content back to the container's boundary, if it's currently out of bound
        /// @return {Ext.util.Scroller} this This Scroller
        /// </summary>
        public Scroller snapToBoundary(object animate){return null;}
        public void snapToSlot(){}
        public void startMomentumAnimation(object e){}
        public void stopMomentumAnimation(){}
        public void updateBoundary(object animate){}
        /// <summary>
        /// @cfg {Number} acceleration
        /// A higher acceleration gives the scroller more initial velocity. Defaults to 30
        /// </summary>
        public JsNumber acceleration{get;set;}
        /// <summary>
        /// @cfg {Number} fps
        /// The desired fps of the deceleration. Defaults to 70.
        /// </summary>
        public bool autoAdjustFps{get;set;}
        /// <summary>
        /// @class Ext.util.Scroller
        /// @extends Ext.util.Draggable
        /// *
        /// Provide the native scrolling experience on iDevices for any DOM element
        /// </summary>
        public new JsString baseCls{get;set;}
        /// <summary>
        /// @cfg {Boolean/String} bounces
        /// Enable bouncing during scrolling past the bounds. Defaults to true. (Which is 'both').
        /// You can also specify 'vertical', 'horizontal', or 'both'
        /// </summary>
        public object bounces{get;set;}
        /// <summary>
        /// @cfg {Boolean} momentum
        /// Whether or not to enable scrolling momentum. Defaults to true
        /// </summary>
        public bool cancelRevert{get;set;}
        public JsString constrain{get;set;}
        public new JsString direction{get;set;}
        public new JsString draggingCls{get;set;}
        /// <summary>
        /// @cfg {Number} friction
        /// The friction of the scroller.
        /// By raising this value the length that momentum scrolls becomes shorter. This value is best kept
        /// between 0 and 1. The default value is 0.5
        /// </summary>
        public JsNumber friction{get;set;}
        /// <summary>
        /// Get the last actual fps performed by this Scroller. Useful for benchmarking
        /// @return {Number} The actual fps
        /// </summary>
        [JsProperty]
        public JsNumber LastActualFps{[JsMethod(Name="getLastActualFps")]get;private set;}
        /// <summary>
        /// @cfg {Number} minVelocityForAnimation
        /// The minimum velocity to keep animating. Defaults to 1 (1px per second)
        /// </summary>
        public JsNumber minVelocityForAnimation{get;set;}
        /// <summary>
        /// @cfg {Boolean} momentum
        /// Whether or not to enable scrolling momentum. Defaults to true
        /// </summary>
        public bool momentum{get;set;}
        /// <summary>
        /// @cfg {Number} outOfBoundRestrictFactor
        /// Determines the offset ratio when the scroller is pulled / pushed out of bound (when it's not decelerating)
        /// A value of 0.5 means 1px allowed for every 2px. Defaults to 0.5
        /// </summary>
        public new JsNumber outOfBoundRestrictFactor{get;set;}
        [JsProperty]
        public object Snap{private get;[JsMethod(Name="setSnap")]set;}
        /// <summary>
        /// @cfg {Number} springTension
        /// The tension of the spring that is attached to the scroller when it bounces.
        /// By raising this value the bounce becomes shorter. This value is best kept
        /// between 0 and 1. The default value is 0.3
        /// </summary>
        public JsNumber springTension{get;set;}
        /// <summary>
        /// @cfg {Number} startMomentumResetTime
        /// The time duration in ms to reset the start time of momentum
        /// Defaults to 350
        /// </summary>
        public JsNumber startMomentumResetTime{get;set;}
        [JsProperty]
        public object StartTime{private get;[JsMethod(Name="setStartTime")]set;}
        public new object threshold{get;set;}
    }
    #endregion
    #region ScrollerConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ScrollerConfig
    {
        public ScrollerConfig(){}
        /// <summary>
        /// A higher acceleration gives the scroller more initial velocity. Defaults to 30
        /// </summary>
        public JsNumber acceleration{get;set;}
        /// <summary>
        /// Enable bouncing during scrolling past the bounds. Defaults to true. (Which is 'both').
        /// You can also specify 'vertical', 'horizontal', or 'both'
        /// </summary>
        public object bounces{get;set;}
        /// <summary>
        /// The desired fps of the deceleration. Defaults to 70.
        /// </summary>
        public JsNumber fps{get;set;}
        /// <summary>
        /// The friction of the scroller.
        /// By raising this value the length that momentum scrolls becomes shorter. This value is best kept
        /// between 0 and 1. The default value is 0.5
        /// </summary>
        public JsNumber friction{get;set;}
        /// <summary>
        /// The minimum velocity to keep animating. Defaults to 1 (1px per second)
        /// </summary>
        public JsNumber minVelocityForAnimation{get;set;}
        /// <summary>
        /// Determines the offset ratio when the scroller is pulled / pushed out of bound (when it's not decelerating)
        /// A value of 0.5 means 1px allowed for every 2px. Defaults to 0.5
        /// </summary>
        public JsNumber outOfBoundRestrictFactor{get;set;}
        /// <summary>
        /// The tension of the spring that is attached to the scroller when it bounces.
        /// By raising this value the bounce becomes shorter. This value is best kept
        /// between 0 and 1. The default value is 0.3
        /// </summary>
        public JsNumber springTension{get;set;}
        /// <summary>
        /// The time duration in ms to reset the start time of momentum
        /// Defaults to 350
        /// </summary>
        public JsNumber startMomentumResetTime{get;set;}
    }
    #endregion
    #region ScrollView
    /// <summary>
    /// @class Ext.util.ScrollView
    /// @extends Ext.util.Observable
    /// *
    /// A wrapper class around {@link Ext.util.Scroller Ext.util.Scroller} and {@link Ext.util.Scroller.Indicator Ext.util.Scroller.Indicator}
    /// that listens to scroll events and control the scroll indicators
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class ScrollView : Observable
    {
        public ScrollView(){}
        public ScrollView(ScrollViewConfig config){}
        /// <summary>
        /// @cfg {Number} indicatorMargin
        /// The margin value for the indicator relatively to the container.
        /// Defaults to <tt>4</tt>
        /// </summary>
        public ScrollView(object el, object config){}
        public void destroy(){}
        /// <summary>
        /// Hide the indicators if they are enabled; called automatically when the scrolling ends
        /// @return {Ext.util.ScrollView} this This ScrollView
        /// </summary>
        public ScrollView hideIndicators(){return null;}
        public void onScroll(object scroller){}
        public void onScrollEnd(){}
        public void onScrollStart(){}
        /// <summary>
        /// Show the indicators if they are enabled; called automatically when the Scroller starts moving
        /// @return {Ext.util.ScrollView} this This ScrollView
        /// </summary>
        public ScrollView showIndicators(){return null;}
        /// <summary>
        /// @cfg {Number} indicatorMargin
        /// The margin value for the indicator relatively to the container.
        /// Defaults to <tt>4</tt>
        /// </summary>
        public JsNumber indicatorMargin{get;set;}
        /// <summary>
        /// @cfg {Boolean/String} useIndicators
        /// Whether or not to use indicators. Can be either: <ul>
        /// <li>{Boolean} true to display both directions, false otherwise</li>
        /// <li>{String} 'vertical' or 'horizontal' to display for that specific direction only</li>
        /// Defaults to true
        /// </summary>
        public object useIndicators{get;set;}
    }
    #endregion
    #region ScrollViewConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class ScrollViewConfig
    {
        public ScrollViewConfig(){}
        /// <summary>
        /// A valid config object for {@link Ext.util.Scroller.Indicator Ext.util.Scroller.Indicator}
        /// </summary>
        public object indicatorConfig{get;set;}
        /// <summary>
        /// The margin value for the indicator relatively to the container.
        /// Defaults to <tt>4</tt>
        /// </summary>
        public JsNumber indicatorMargin{get;set;}
        /// <summary>
        /// Whether or not to use indicators. Can be either: <ul>
        /// <li>{Boolean} true to display both directions, false otherwise</li>
        /// <li>{String} 'vertical' or 'horizontal' to display for that specific direction only</li>
        /// Defaults to true
        /// </summary>
        public object useIndicators{get;set;}
    }
    #endregion
    #region Sortable
    /// <summary>
    /// @class Ext.util.Sortable
    /// @extends Ext.util.Observable
    /// @constructor
    /// @param {Mixed} el
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Sortable : Observable
    {
        public Sortable(){}
        public Sortable(SortableConfig config){}
        public void calculateBoxes(){}
        /// <summary>
        /// Read-only value representing whether the Draggable can be moved horizontally.
        /// This is automatically calculated by Draggable by the direction configuration.
        /// @type Boolean
        /// @private
        /// </summary>
        public Sortable(object el, object config){}
        /// <summary>
        /// Disables sorting for this Sortable.
        /// </summary>
        public void disable(){}
        /// <summary>
        /// Enables sorting for this Sortable.
        /// This method is invoked immediately after construction of a Sortable unless
        /// the disabled configuration is set to true.
        /// </summary>
        public void enable(){}
        /// <summary>
        /// Method to determine whether this Sortable is currently disabled.
        /// @return {Boolean} the disabled state of this Sortable.
        /// </summary>
        public bool isDisabled(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently sorting.
        /// @return {Boolean} the sorting state of this Sortable.
        /// </summary>
        public bool isHorizontal(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently sorting.
        /// @return {Boolean} the sorting state of this Sortable.
        /// </summary>
        public bool isSorting(){return false;}
        /// <summary>
        /// Method to determine whether this Sortable is currently disabled.
        /// @return {Boolean} the disabled state of this Sortable.
        /// </summary>
        public bool isVertical(){return false;}
        public void onDrag(object draggable, object e){}
        public void onDragEnd(object draggable, object e){}
        public void onSortStart(object e, object t){}
        public void onStart(object e, object t){}
        /// <summary>
        /// @class Ext.util.Sortable
        /// @extends Ext.util.Observable
        /// @constructor
        /// @param {Mixed} el
        /// @param {Object} config
        /// </summary>
        public JsString baseCls{get;set;}
        /// <summary>
        /// @cfg {String} cancelSelector
        /// A simple CSS selector that represents elements within the draggable
        /// that should NOT initiate a drag.
        /// </summary>
        public JsString cancelSelector{get;set;}
        /// <summary>
        /// @cfg {Number} delay
        /// How many milliseconds a user must hold the draggable before starting a
        /// drag operation. Defaults to 0 or immediate.
        /// @private
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// @cfg {String} direction
        /// Possible values: 'vertical', 'horizontal'
        /// Defaults to 'vertical'
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// @cfg {Boolean} disabled
        /// Passing in true will disable this Sortable.
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// @cfg {String} group
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting. Defaults to 'base'
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// @cfg {String} handleSelector
        /// A simple CSS selector to indicate what is the handle to drag the Sortable.
        /// </summary>
        public JsString handleSelector{get;set;}
        /// <summary>
        /// @cfg {String} itemSelector
        /// A simple CSS selector that represents individual items within the Sortable.
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// @cfg {Boolean} revert
        /// This should NOT be changed.
        /// @private
        /// </summary>
        public bool revert{get;set;}
        /// <summary>
        /// Read-only property that indicates whether a Sortable is currently sorting.
        /// @type Boolean
        /// @private
        /// </summary>
        public bool sorting{get;set;}
    }
    #endregion
    #region SortableConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SortableConfig
    {
        public SortableConfig(){}
        /// <summary>
        /// A simple CSS selector that represents elements within the draggable
        /// that should NOT initiate a drag.
        /// </summary>
        public JsString cancelSelector{get;set;}
        /// <summary>
        /// An Element to constrain the Sortable dragging to. Defaults to <tt>window</tt>.
        /// If <tt>true</tt> is specified, the dragging will be constrained to the element
        /// of the sortable.
        /// </summary>
        public object constrain{get;set;}
        /// <summary>
        /// How many milliseconds a user must hold the draggable before starting a
        /// drag operation. Defaults to 0 or immediate.
        /// @private
        /// </summary>
        public JsNumber delay{get;set;}
        /// <summary>
        /// Possible values: 'vertical', 'horizontal'
        /// Defaults to 'vertical'
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// Passing in true will disable this Sortable.
        /// </summary>
        public bool disabled{get;set;}
        /// <summary>
        /// Draggable and Droppable objects can participate in a group which are
        /// capable of interacting. Defaults to 'base'
        /// </summary>
        public JsString group{get;set;}
        /// <summary>
        /// A simple CSS selector to indicate what is the handle to drag the Sortable.
        /// </summary>
        public JsString handleSelector{get;set;}
        /// <summary>
        /// A simple CSS selector that represents individual items within the Sortable.
        /// </summary>
        public JsString itemSelector{get;set;}
        /// <summary>
        /// This should NOT be changed.
        /// @private
        /// </summary>
        public bool revert{get;set;}
    }
    #endregion
    #region Sorter
    /// <summary>
    /// @class Ext.util.Sorter
    /// @extends Object
    /// Represents a single sorter that can be applied to a Store
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Sorter
    {
        public Sorter(){}
        public Sorter(SorterConfig config){}
        /// <summary>
        /// @cfg {String} direction The direction to sort by. Defaults to ASC
        /// </summary>
        public Sorter(object config){}
        /// <summary>
        /// @private
        /// Creates and returns a function which sorts an array by the given property and direction
        /// @return {Function} A function which sorts by the property/direction combination provided
        /// </summary>
        public JsAction createSortFunction(object sorterFn){return null;}
        /// <summary>
        /// @private
        /// Basic default sorter function that just compares the defined property of each object
        /// </summary>
        public void defaultSorterFn(object o1, object o2){}
        /// <summary>
        /// @private
        /// Returns the root property of the given item, based on the configured {@link #root} property
        /// @param {Object} item The item
        /// @return {Object} The root property of the object
        /// </summary>
        public object getRoot(object item){return null;}
        /// <summary>
        /// @cfg {String} direction The direction to sort by. Defaults to ASC
        /// </summary>
        public JsString direction{get;set;}
    }
    #endregion
    #region SorterConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class SorterConfig
    {
        public SorterConfig(){}
        /// <summary>
        /// The direction to sort by. Defaults to ASC
        /// </summary>
        public JsString direction{get;set;}
        /// <summary>
        /// The property to sort by. Required unless {@link #sorter} is provided
        /// </summary>
        public JsString property{get;set;}
        /// <summary>
        /// Optional root property. This is mostly useful when sorting a Store, in which case we set the
        /// root to 'data' to make the filter pull the {@link #property} out of the data object of each item
        /// </summary>
        public JsString root{get;set;}
        /// <summary>
        /// A specific sorter function to execute. Can be passed instead of {@link #property}
        /// </summary>
        public JsAction sorterFn{get;set;}
    }
    #endregion
    #region Stateful
    /// <summary>
    /// @class Ext.util.Stateful
    /// @extends Ext.util.Observable
    /// Represents any object whose data can be saved by a {@link Ext.data.Proxy Proxy}. Ext.Model
    /// and Ext.View both inherit from this class as both can save state (Models save field state,
    /// Views save configuration)
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class Stateful : Observable
    {
        public Stateful(){}
        public Stateful(StatefulConfig config){}
        /// <summary>
        /// Usually called by the {@link Ext.data.Store} which owns the model instance.
        /// Commits all changes made to the instance since either creation or the last commit operation.
        /// <p>Developers should subscribe to the {@link Ext.data.Store#update} event
        /// to have their code notified of commit operations.</p>
        /// @param {Boolean} silent (optional) True to skip notification of the owning
        /// store of the change (defaults to false)
        /// </summary>
        public void commit(bool silent){}
        /// <summary>
        /// @cfg {String} persistanceProperty The property on this Persistable object that its data is saved to.
        /// Defaults to 'data' (e.g. all persistable data resides in this.data.)
        /// </summary>
        public Stateful(object config){}
        /// <summary>
        /// Creates a copy (clone) of this Model instance.
        /// @param {String} id (optional) A new id, defaults to the id
        /// of the instance being copied. See <code>{@link #id}</code>.
        /// To generate a phantom instance with a new id use:<pre><code>
        /// var rec = record.copy(); // clone the record
        /// Ext.data.Model.id(rec); // automatically generate a unique sequential id
        /// </code></pre>
        /// @return {Record}
        /// </summary>
        public void copy(JsString newId){}
        /// <summary>
        /// Returns the value of the given field
        /// @param {String} fieldName The field to fetch the value for
        /// @return {Mixed} The value
        /// </summary>
        public void get(JsString field){}
        /// <summary>
        /// Gets a hash of only the fields that have been modified since this Model was created or commited.
        /// @return Object
        /// </summary>
        public void getChanges(){}
        /// <summary>
        /// Returns <tt>true</tt> if the passed field name has been <code>{@link #modified}</code>
        /// since the load or last commit.
        /// @param {String} fieldName {@link Ext.data.Field#name}
        /// @return {Boolean}
        /// </summary>
        public void isModified(JsString fieldName){}
        public void markDirty(){}
        /// <summary>
        /// Usually called by the {@link Ext.data.Store} to which this model instance has been {@link #join joined}.
        /// Rejects all changes made to the model instance since either creation, or the last commit operation.
        /// Modified fields are reverted to their original values.
        /// <p>Developers should subscribe to the {@link Ext.data.Store#update} event
        /// to have their code notified of reject operations.</p>
        /// @param {Boolean} silent (optional) True to skip notification of the owning
        /// store of the change (defaults to false)
        /// </summary>
        public void reject(bool silent){}
        /// <summary>
        /// Sets the given field to the given value, marks the instance as dirty
        /// @param {String|Object} fieldName The field to set, or an object containing key/value pairs
        /// @param {Mixed} value The value to set
        /// </summary>
        public void set(object fieldName, object value){}
        /// <summary>
        /// <p>Marks this <b>Record</b> as <code>{@link #dirty}</code>.  This method
        /// is used interally when adding <code>{@link #phantom}</code> records to a
        /// {@link Ext.data.Store#writer writer enabled store}.</p>
        /// <br><p>Marking a record <code>{@link #dirty}</code> causes the phantom to
        /// be returned by {@link Ext.data.Store#getModifiedRecords} where it will
        /// have a create action composed for it during {@link Ext.data.Store#save store save}
        /// operations.</p>
        /// </summary>
        public void setDirty(){}
        /// <summary>
        /// Readonly flag - true if this Record has been modified.
        /// @type Boolean
        /// </summary>
        public bool dirty{get;set;}
        /// <summary>
        /// Internal flag used to track whether or not the model instance is currently being edited. Read-only
        /// @property editing
        /// @type Boolean
        /// </summary>
        public bool editing{get;set;}
        /// <summary>
        /// @cfg {String} persistanceProperty The property on this Persistable object that its data is saved to.
        /// Defaults to 'data' (e.g. all persistable data resides in this.data.)
        /// </summary>
        public JsString persistanceProperty{get;set;}
    }
    #endregion
    #region StatefulConfig
    [JsType(JsMode.Json, Export=false)]
    public partial class StatefulConfig
    {
        public StatefulConfig(){}
        /// <summary>
        /// The property on this Persistable object that its data is saved to.
        /// Defaults to 'data' (e.g. all persistable data resides in this.data.)
        /// </summary>
        public JsString persistanceProperty{get;set;}
    }
    #endregion
    #region TapRepeater
    /// <summary>
    /// @class Ext.util.TapRepeater
    /// @extends Ext.util.Observable
    /// *
    /// A wrapper class which can be applied to any element. Fires a "tap" event while
    /// touching the device. The interval between firings may be specified in the config but
    /// defaults to 20 milliseconds.
    /// *
    /// @constructor
    /// @param {Mixed} el The element to listen on
    /// @param {Object} config
    /// </summary>
    [JsType(JsMode.Prototype, Export=false)]
    public partial class TapRepeater : Observable
    {
        public TapRepeater(){}
        public TapRepeater(ObservableConfig config){}
        /// <summary>
        /// @class Ext.util.TapRepeater
        /// @extends Ext.util.Observable
        /// *
        /// A wrapper class which can be applied to any element. Fires a "tap" event while
        /// touching the device. The interval between firings may be specified in the config but
        /// defaults to 20 milliseconds.
        /// *
        /// @constructor
        /// @param {Mixed} el The element to listen on
        /// @param {Object} config
        /// </summary>
        public TapRepeater(object el, object config){}
        public void destroy(){}
        public void easeOutExpo(object t, object b, object c, object d){}
        public void eventOptions(object e){}
        public void onTouchEnd(object e){}
        public void onTouchStart(object e){}
        public void tap(object e){}
        public object delay{get;set;}
        public object interval{get;set;}
        public bool preventDefault{get;set;}
        public bool stopDefault{get;set;}
        public object timer{get;set;}
    }
    #endregion
}
#endregion
//#region Ext.util.Draggable.Animation
//namespace Ext.util.Draggable.Animation
//{
//    #region Abstract
//    /// <summary>
//    /// @class Ext.util.Draggable.Animation.Abstract
//    /// @extends Object
//    /// *
//    /// Provides the abstract methods for a Draggable animation.
//    /// @private
//    /// @ignore
//    /// </summary>
//    [JsType(JsMode.Prototype, Export=false)]
//    public partial class Abstract
//    {
//        public Abstract(){}
//        public Abstract(AbstractConfig config){}
//        /// <summary>
//        /// The constructor for an Abstract animation. Applies the config to the Animation.
//        /// @param {Object} config Object containing the configuration for this Animation.
//        /// @private
//        /// </summary>
//        public Abstract(object config){}
//        /// <summary>
//        /// Sets a config value for this Animation.
//        /// @param {String} name The name of this configuration
//        /// @param {Mixed} value The value for this configuration
//        /// </summary>
//        public void set(JsString name, object value){}
//        /// <summary>
//        /// @cfg {Object/Ext.util.Offset} startOffset Object containing the x and y coordinates the
//        /// Draggable had when the Animation started.
//        /// @private
//        /// </summary>
//        public object startOffset{get;set;}
//        /// <summary>
//        /// @cfg {Number} startTime The time the Animation started
//        /// @private
//        /// </summary>
//        public JsNumber startTime{get;set;}
//    }
//    #endregion
//    #region AbstractConfig
//    [JsType(JsMode.Json, Export=false)]
//    public partial class AbstractConfig
//    {
//        public AbstractConfig(){}
//        /// <summary>
//        /// Object containing the x and y coordinates the
//        /// Draggable had when the Animation started.
//        /// @private
//        /// </summary>
//        public object startOffset{get;set;}
//        /// <summary>
//        /// The time the Animation started
//        /// @private
//        /// </summary>
//        public JsNumber startTime{get;set;}
//    }
//    #endregion
//    #region Linear
//    /// <summary>
//    /// @class Ext.util.Draggable.Animation.Linear
//    /// @extends Ext.util.Draggable.Animation.Abstract
//    /// *
//    /// A linear animation that is being used by Draggable's setOffset by default.
//    /// @private
//    /// @ignore
//    /// </summary>
//    [JsType(JsMode.Prototype, Export=false)]
//    public partial class Linear : Abstract
//    {
//        public Linear(LinearConfig config){}
//        public Linear(){}
//        /// <summary>
//        /// @cfg {Object/Ext.util.Offset} endOffset Object containing the x and y coordinates the
//        /// Draggable is animating to.
//        /// @private
//        /// </summary>
//        public void getOffset(){}
//        /// <summary>
//        /// @cfg {Number} duration The duration of this animation in milliseconds.
//        /// </summary>
//        public JsNumber duration{get;set;}
//        /// <summary>
//        /// @cfg {Object/Ext.util.Offset} endOffset Object containing the x and y coordinates the
//        /// Draggable is animating to.
//        /// @private
//        /// </summary>
//        public object endOffset{get;set;}
//    }
//    #endregion
//    #region LinearConfig
//    [JsType(JsMode.Json, Export=false)]
//    public partial class LinearConfig
//    {
//        public LinearConfig(){}
//        /// <summary>
//        /// The duration of this animation in milliseconds.
//        /// </summary>
//        public JsNumber duration{get;set;}
//        /// <summary>
//        /// Object containing the x and y coordinates the
//        /// Draggable is animating to.
//        /// @private
//        /// </summary>
//        public object endOffset{get;set;}
//    }
//    #endregion
//}
//#endregion
//#region Ext.util.Scroller.Animation
//namespace Ext.util.Scroller.Animation
//{
//    #region Bouncing
//    [JsType(JsMode.Prototype, Export=false)]
//    public partial class Bouncing : Abstract
//    {
//        public Bouncing(AbstractConfig config){}
//        public Bouncing(){}
//        public void getOffset(){}
//        public object acceleration{get;set;}
//        public object springTension{get;set;}
//        public object startVelocity{get;set;}
//    }
//    #endregion
//    #region Deceleration
//    [JsType(JsMode.Prototype, Export=false)]
//    public partial class Deceleration : Abstract
//    {
//        public Deceleration(AbstractConfig config){}
//        public Deceleration(){}
//        public void getFrictionFactor(){}
//        public void getOffset(){}
//        public object acceleration{get;set;}
//        public object startVelocity{get;set;}
//        public object theta{get;set;}
//    }
//    #endregion
//}
//#endregion
