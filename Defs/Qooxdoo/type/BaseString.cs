// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.type
{
    /// <summary>
	/// <para>This class emulates the built-in JavaScript String class. It can be used as
	/// base class for classes, which need to derive from String.</para>
	/// <para>Instances of this class can be used in any place a JavaScript string can.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.type.BaseString", OmitOptionalParameters = true, Export = false)]
    public partial class BaseString : object
    {
		#region Methods

		public BaseString() { throw new NotImplementedException(); }

		/// <param name="txt">Initialize with this string</param>
		public BaseString(string txt = "") { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Call the same method of the super class.</para>
		/// </summary>
		/// <param name="args">the arguments variable of the calling method</param>
		/// <param name="varags">variable number of arguments passed to the overwritten function</param>
		/// <returns>the return value of the method of the base class.</returns>
		[JsMethod(Name = "base")]
		public object Base(JsArguments args, object varags) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the specified character from a string.</para>
		/// <para>Characters in a string are indexed from left to right. The index of the
		/// first character is 0, and the index of the last character in a string
		/// called stringName is stringName.length &#8211; 1. If the index you supply is
		/// out of range, JavaScript returns an empty string.</para>
		/// </summary>
		/// <param name="index">An integer between 0 and 1 less than the length of the string.</param>
		/// <returns>The character.</returns>
		[JsMethod(Name = "charAt")]
		public string CharAt(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a number indicating the Unicode value of the character at the given index.</para>
		/// </summary>
		/// <param name="index">An integer greater than 0 and less than the length of the string; if it is not a number, it defaults to 0.</param>
		/// <returns>The number.</returns>
		[JsMethod(Name = "charCodeAt")]
		public double CharCodeAt(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Combines the text of two or more strings and returns a new string.
		/// Changes to the text in one string do not affect the other string.</para>
		/// </summary>
		/// <param name="stringN">One or more strings to be combined.</param>
		/// <returns>The combined string.</returns>
		[JsMethod(Name = "concat")]
		public string Concat(string stringN) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the index within the calling String object of the first
		/// occurrence of the specified value, starting the search at fromIndex,
		/// returns -1 if the value is not found.</para>
		/// </summary>
		/// <param name="index">A string representing the value to search for.</param>
		/// <param name="offset">The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is 0.</param>
		/// <returns>The index or -1.</returns>
		[JsMethod(Name = "indexOf")]
		public double IndexOf(string index, double offset = 0) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the index within the calling String object of the last occurrence
		/// of the specified value, or -1 if not found. The calling string is
		/// searched backward, starting at fromIndex.</para>
		/// </summary>
		/// <param name="index">A string representing the value to search for.</param>
		/// <param name="offset">The location within the calling string to start the search from, indexed from left to right. It can be any integer between 0 and the length of the string. The default value is the length of the string.</param>
		/// <returns>The index or -1.</returns>
		[JsMethod(Name = "lastIndexOf")]
		public double LastIndexOf(string index, double offset = 0) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Used to retrieve the matches when matching a string against a regular
		/// expression.</para>
		/// <para>If the regular expression does not include the g flag, returns the same
		/// result as regexp.exec(string). If the regular expression includes the g
		/// flag, the method returns an Array containing all matches.</para>
		/// </summary>
		/// <param name="regexp">A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).</param>
		/// <returns>The matching RegExp object or an array containing all matches.</returns>
		[JsMethod(Name = "match")]
		public object Match(object regexp) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Finds a match between a regular expression and a string, and replaces the
		/// matched substring with a new substring.</para>
		/// </summary>
		/// <param name="regexp">A RegExp object. The match is replaced by the return value of parameter #2. Or a String that is to be replaced by newSubStr.</param>
		/// <param name="aFunction">A function to be invoked to create the new substring (to put in place of the substring received from parameter #1).</param>
		/// <returns>The new substring.</returns>
		[JsMethod(Name = "replace")]
		public string Replace(object regexp, Action<object> aFunction) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Executes the search for a match between a regular expression and this
		/// String object.</para>
		/// <para>If successful, search returns the index of the regular expression inside
		/// the string. Otherwise, it returns -1.</para>
		/// </summary>
		/// <param name="regexp">A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).</param>
		/// <returns>The matching RegExp object or -1. matches.</returns>
		[JsMethod(Name = "search")]
		public object Search(object regexp) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Extracts a section of a string and returns a new string.</para>
		/// <para>Slice extracts the text from one string and returns a new string. Changes
		/// to the text in one string do not affect the other string.
		/// As a negative index, endSlice indicates an offset from the end of the
		/// string.</para>
		/// </summary>
		/// <param name="beginslice">The zero-based index at which to begin extraction.</param>
		/// <param name="endSlice">The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string.</param>
		/// <returns>The extracted string.</returns>
		[JsMethod(Name = "slice")]
		public string Slice(double beginslice, double? endSlice = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Splits a String object into an array of strings by separating the string
		/// into substrings.</para>
		/// <para>When found, separator is removed from the string and the substrings are
		/// returned in an array. If separator is omitted, the array contains one
		/// element consisting of the entire string.</para>
		/// <para>If separator is a regular expression that contains capturing parentheses,
		/// then each time separator is matched the results (including any undefined
		/// results) of the capturing parentheses are spliced into the output array.
		/// However, not all browsers support this capability.</para>
		/// <para>Note: When the string is empty, split returns an array containing one</para>
		/// </summary>
		/// <param name="separator">Specifies the character to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string.</param>
		/// <param name="limit">Integer specifying a limit on the number of splits to be found.</param>
		/// <returns>The Array containing substrings.</returns>
		[JsMethod(Name = "split")]
		public JsArray Split(string separator = null, double? limit = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the characters in a string beginning at the specified location
		/// through the specified number of characters.</para>
		/// <para>Start is a character index. The index of the first character is 0, and the
		/// index of the last character is 1 less than the length of the string. substr
		/// begins extracting characters at start and collects length characters
		/// (unless it reaches the end of the string first, in which case it will
		/// return fewer).
		/// If start is positive and is greater than or equal to the length of the
		/// string, substr returns an empty string.</para>
		/// </summary>
		/// <param name="start">Location at which to begin extracting characters (an integer between 0 and one less than the length of the string).</param>
		/// <param name="length">The number of characters to extract.</param>
		/// <returns>The substring.</returns>
		[JsMethod(Name = "substr")]
		public string Substr(double start, double? length = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a subset of a String object.</para>
		/// <para>substring extracts characters from indexA up to but not including indexB.
		/// In particular:
		/// If indexA equals indexB, substring returns an empty string.
		/// If indexB is omitted, substring extracts characters to the end of the
		/// string.
		/// If either argument is less than 0 or is NaN, it is treated as if it were
		/// 0.
		/// If either argument is greater than stringName.length, it is treated as if
		/// it were stringName.length.
		/// If indexA is larger than indexB, then the effect of substring is as if
		/// the two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1).</para>
		/// </summary>
		/// <param name="indexA">An integer between 0 and one less than the length of the string.</param>
		/// <param name="indexB">(optional) An integer between 0 and the length of the string.</param>
		/// <returns>The subset.</returns>
		[JsMethod(Name = "substring")]
		public string Substring(double indexA, double? indexB = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return unique hash code of object</para>
		/// </summary>
		/// <returns>unique hash code of the object</returns>
		[JsMethod(Name = "toHashCode")]
		public double ToHashCode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The characters within a string are converted to lower case while
		/// respecting the current locale.</para>
		/// <para>The toLowerCase method returns the value of the string converted to
		/// lowercase. toLowerCase does not affect the value of the string itself.</para>
		/// </summary>
		/// <returns>The new string.</returns>
		[JsMethod(Name = "toLocaleLowerCase")]
		public string ToLocaleLowerCase() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The characters within a string are converted to upper case while
		/// respecting the current locale.
		/// The toUpperCase method returns the value of the string converted to
		/// uppercase. toUpperCase does not affect the value of the string itself.</para>
		/// </summary>
		/// <returns>The new string.</returns>
		[JsMethod(Name = "toLocaleUpperCase")]
		public string ToLocaleUpperCase() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the calling string value converted to lowercase.
		/// The toLowerCase method returns the value of the string converted to
		/// lowercase. toLowerCase does not affect the value of the string itself.</para>
		/// </summary>
		/// <returns>The new string.</returns>
		[JsMethod(Name = "toLowerCase")]
		public string ToLowerCase() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a string representing the specified object.</para>
		/// <para>The valueOf method of String returns the primitive value of a String
		/// object as a string data type.
		/// This method is usually called internally by JavaScript and not
		/// explicitly in code.</para>
		/// </summary>
		/// <returns>A new string containing the string value.</returns>
		[JsMethod(Name = "toString")]
		public string ToString() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the calling string value converted to uppercase.
		/// The toUpperCase method returns the value of the string converted to
		/// uppercase. toUpperCase does not affect the value of the string itself.</para>
		/// </summary>
		/// <returns>The new string.</returns>
		[JsMethod(Name = "toUpperCase")]
		public string ToUpperCase() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the primitive value of a String object.</para>
		/// <para>The valueOf method of String returns the primitive value of a String
		/// object as a string data type.
		/// This method is usually called internally by JavaScript and not
		/// explicitly in code.</para>
		/// </summary>
		/// <returns>A new string containing the primitive value.</returns>
		[JsMethod(Name = "valueOf")]
		public string ValueOf() { throw new NotImplementedException(); }

		#endregion Methods
    }
}