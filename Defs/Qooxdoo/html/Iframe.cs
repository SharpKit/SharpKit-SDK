// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.html
{
    /// <summary>
	/// <para>A cross browser iframe instance.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.html.Iframe", OmitOptionalParameters = true, Export = false)]
    public partial class Iframe : qx.html.Element
    {
		#region Events

		/// <summary>
		/// <para>The &#8220;load&#8221; event is fired after the iframe content has successfully been loaded.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnLoad;

		/// <summary>
		/// <para>The &#8220;navigate&#8221; event is fired whenever the location of the iframe
		/// changes.</para>
		/// <para>Useful to track user navigation and internally used to keep the source
		/// property in sync. Only works when the destination source is of same
		/// origin than the page embedding the iframe.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnNavigate;

		#endregion Events

		#region Methods

		public Iframe() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Wrapper for the HTML Iframe element.</para>
		/// </summary>
		/// <param name="url">Location which should be loaded inside the Iframe.</param>
		/// <param name="styles">optional map of CSS styles, where the key is the name of the style and the value is the value to use.</param>
		/// <param name="attributes">optional map of element attributes, where the key is the name of the attribute and the value is the value to use.</param>
		public Iframe(string url, object styles = null, object attributes = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the HTML body element of the iframe.</para>
		/// </summary>
		/// <returns>The DOM node of the body element of the iframe.</returns>
		[JsMethod(Name = "getBody")]
		public qx.html.Element GetBody() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the DOM document object of an iframe.</para>
		/// </summary>
		/// <returns>The DOM document object of the iframe.</returns>
		[JsMethod(Name = "getDocument")]
		public Document GetDocument() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the current name.</para>
		/// </summary>
		/// <returns>The iframe&#8217;s name.</returns>
		[JsMethod(Name = "getName")]
		public string GetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the current source.</para>
		/// </summary>
		/// <returns>The iframe&#8217;s source</returns>
		[JsMethod(Name = "getSource")]
		public string GetSource() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the DOM window object of an iframe.</para>
		/// </summary>
		/// <returns>The DOM window object of the iframe.</returns>
		[JsMethod(Name = "getWindow")]
		public Window GetWindow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Reloads iframe</para>
		/// </summary>
		[JsMethod(Name = "reload")]
		public void Reload() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets iframe&#8217;s name attribute to given value</para>
		/// </summary>
		/// <param name="name">Name to be set.</param>
		/// <returns>The current instance for chaining</returns>
		[JsMethod(Name = "setName")]
		public qx.html.Iframe SetName(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets iframe&#8217;s source attribute to given value</para>
		/// </summary>
		/// <param name="source">URL to be set.</param>
		/// <returns>The current instance for chaining</returns>
		[JsMethod(Name = "setSource")]
		public qx.html.Iframe SetSource(string source) { throw new NotImplementedException(); }

		#endregion Methods
    }
}