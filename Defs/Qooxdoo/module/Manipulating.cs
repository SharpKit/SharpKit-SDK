// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.module
{
    /// <summary>
	/// <para>DOM manipulation module</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.module.Manipulating", OmitOptionalParameters = true, Export = false)]
    public partial class Manipulating 
    {
		#region Methods

		public Manipulating() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts content after each element in the collection. This can either
		/// be an HTML string, an array of HTML strings, a single DOM element or an
		/// array of elements.</para>
		/// </summary>
		/// <param name="content">HTML string(s) or DOM element(s)</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "after")]
		public static qxWeb After(object content) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Appends content to each element in the current set. Accepts an HTML string,
		/// a single DOM element or an array of elements</para>
		/// </summary>
		/// <param name="html">HTML string or DOM element(s) to append</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "append")]
		public static qxWeb Append(object html) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Appends all items in the collection to the specified parents. If multiple
		/// parents are given, the items will be moved to the first parent, while
		/// clones of the items will be appended to subsequent parents.</para>
		/// </summary>
		/// <param name="parent">Parent selector expression or list of parent elements</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "appendTo")]
		public static qxWeb AppendTo(object parent) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts content before each element in the collection. This can either
		/// be an HTML string, an array of HTML strings, a single DOM element or an
		/// array of elements.</para>
		/// </summary>
		/// <param name="content">HTML string(s) or DOM element(s)</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "before")]
		public static qxWeb Before(object content) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Blurs each element in the collection</para>
		/// </summary>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "blur")]
		public static qxWeb Blur() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clones the items in the current collection and returns them in a new set.
		/// Event listeners can also be cloned.</para>
		/// </summary>
		/// <param name="events">clone event listeners. Default:  false</param>
		/// <returns>New collection with clones</returns>
		[JsMethod(Name = "clone")]
		public static qxWeb Clone(bool events) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes all content from the elements in the collection</para>
		/// </summary>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "empty")]
		public static qxWeb Empty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Focuses the first element in the collection</para>
		/// </summary>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "focus")]
		public static qxWeb Focus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the left scroll position of the first element in the collection.</para>
		/// </summary>
		/// <returns>Current left scroll position</returns>
		[JsMethod(Name = "getScrollLeft")]
		public static double GetScrollLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the top scroll position of the first element in the collection.</para>
		/// </summary>
		/// <returns>Current top scroll position</returns>
		[JsMethod(Name = "getScrollTop")]
		public static double GetScrollTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts the current collection after each target item. The collection
		/// items are moved after the first target. For subsequent targets,
		/// clones of the collection items are created and inserted.</para>
		/// </summary>
		/// <param name="target">Selector expression or DOM element</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "insertAfter")]
		public static qxWeb InsertAfter(object target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts the current collection before each target item. The collection
		/// items are moved before the first target. For subsequent targets,
		/// clones of the collection items are created and inserted.</para>
		/// </summary>
		/// <param name="target">Selector expression or DOM element</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "insertBefore")]
		public static qxWeb InsertBefore(object target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes each element in the current collection from the DOM</para>
		/// </summary>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "remove")]
		public static qxWeb Remove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the elements of the collection to the given coordinate.</para>
		/// </summary>
		/// <param name="value">Left scroll position</param>
		/// <param name="duration">Optional: Duration in ms for animated scrolling</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setScrollLeft")]
		public static qxWeb SetScrollLeft(double value, double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the elements of the collection to the given coordinate.</para>
		/// </summary>
		/// <param name="value">Top scroll position</param>
		/// <param name="duration">Optional: Duration in ms for animated scrolling</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setScrollTop")]
		public static qxWeb SetScrollTop(double value, double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Wraps each element in the collection in a copy of an HTML structure.
		/// Elements will be appended to the deepest nested element in the structure
		/// as determined by a depth-first search.</para>
		/// </summary>
		/// <param name="wrapper">Selector expression, HTML string, DOM element or list of DOM elements</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "wrap")]
		public static qxWeb Wrap(object wrapper) { throw new NotImplementedException(); }

		#endregion Methods
    }
}