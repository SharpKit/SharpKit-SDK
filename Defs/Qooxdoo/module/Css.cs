// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.module
{
    /// <summary>
	/// <para>CSS/Style property manipulation module</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.module.Css", OmitOptionalParameters = true, Export = false)]
    public partial class Css 
    {
		#region Methods

		public Css() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a class name to each element in the collection</para>
		/// </summary>
		/// <param name="name">Class name</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "addClass")]
		public static qxWeb AddClass(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds multiple class names to each element in the collection</para>
		/// </summary>
		/// <param name="names">List of class names to add</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "addClasses")]
		public static qxWeb AddClasses(string names) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the class name of the first element in the collection</para>
		/// </summary>
		/// <returns>Class name</returns>
		[JsMethod(Name = "getClass")]
		public static string GetClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the content height of the first element in the collection.
		/// This is the maximum height the element can use, excluding borders,
		/// margins, padding or scroll bars.</para>
		/// </summary>
		/// <returns>Computed content height</returns>
		[JsMethod(Name = "getContentHeight")]
		public static double GetContentHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the content width of the first element in the collection.
		/// This is the maximum width the element can use, excluding borders,
		/// margins, padding or scroll bars.</para>
		/// </summary>
		/// <returns>Computed content width</returns>
		[JsMethod(Name = "getContentWidth")]
		public static double GetContentWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the rendered height of the first element in the collection.</para>
		/// </summary>
		/// <returns>The first item&#8217;s rendered height</returns>
		[JsMethod(Name = "getHeight")]
		public static double GetHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the computed location of the given element in the context of the
		/// document dimensions.</para>
		/// </summary>
		/// <returns>A map with the keys left>, top>, right> and bottom> which contains the distance of the element relative to the document.</returns>
		[JsMethod(Name = "getOffset")]
		public static object GetOffset() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the distance between the first element in the collection and its
		/// offset parent</para>
		/// </summary>
		/// <returns>a map with the keys left and top containing the distance between the elements</returns>
		[JsMethod(Name = "getPosition")]
		public static object GetPosition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the value of the given style property for the first item in the
		/// collection.</para>
		/// </summary>
		/// <param name="name">Style property name</param>
		/// <returns>Style property value</returns>
		[JsMethod(Name = "getStyle")]
		public static object GetStyle(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the values of multiple style properties for each item in the
		/// collection</para>
		/// </summary>
		/// <param name="names">List of style property names</param>
		/// <returns>Map of style property name/value pairs</returns>
		[JsMethod(Name = "getStyles")]
		public static object GetStyles(string names) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the rendered width of the first element in the collection</para>
		/// </summary>
		/// <returns>The first item&#8217;s rendered width</returns>
		[JsMethod(Name = "getWidth")]
		public static double GetWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the first element in the collection has the given class name</para>
		/// </summary>
		/// <param name="name">Class name to check for</param>
		/// <returns>true if the first item has the given class name</returns>
		[JsMethod(Name = "hasClass")]
		public static bool HasClass(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hides all elements in the collection by setting their &#8220;display&#8221;
		/// style to &#8220;none&#8221;. The previous value is stored so it can be re-applied
		/// when <see cref="Show"/> is called.</para>
		/// </summary>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "hide")]
		public static qxWeb Hide() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes a class name from each element in the collection</para>
		/// </summary>
		/// <param name="name">The class name to remove</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "removeClass")]
		public static qxWeb RemoveClass(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes multiple class names from each element in the collection</para>
		/// </summary>
		/// <param name="names">List of class names to remove</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "removeClasses")]
		public static qxWeb RemoveClasses(string names) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Replaces a class name on each element in the collection</para>
		/// </summary>
		/// <param name="oldName">Class name to remove</param>
		/// <param name="newName">Class name to add</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "replaceClass")]
		public static qxWeb ReplaceClass(string oldName, string newName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Modifies the given style property on all elements in the collection.</para>
		/// </summary>
		/// <param name="name">Name of the style property to modify</param>
		/// <param name="value">The value to apply</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setStyle")]
		public static qxWeb SetStyle(string name, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets multiple style properties for each item in the collection.</para>
		/// </summary>
		/// <param name="styles">A map of style property name/value pairs</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setStyles")]
		public static qxWeb SetStyles(object styles) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Shows any elements with &#8220;display: none&#8221; in the collection. If an element
		/// was hidden by using the <see cref="Hide"/> method, its previous
		/// &#8220;display&#8221; style value will be re-applied. Otherwise, the
		/// default &#8220;display&#8221; value for the element type will be applied.</para>
		/// </summary>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "show")]
		public static qxWeb Show() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the given class name on each item in the collection</para>
		/// </summary>
		/// <param name="name">Class name</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "toggleClass")]
		public static qxWeb ToggleClass(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the given list of class names on each item in the collection</para>
		/// </summary>
		/// <param name="names">Class names</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "toggleClasses")]
		public static qxWeb ToggleClasses(string names) { throw new NotImplementedException(); }

		#endregion Methods
    }
}