// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.module
{
    /// <summary>
	/// <para>Attribute/Property handling for DOM elements.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.module.Attribute", OmitOptionalParameters = true, Export = false)]
    public partial class Attribute 
    {
		#region Methods

		public Attribute() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the value of the given attribute for the first item in the
		/// collection.</para>
		/// </summary>
		/// <param name="name">Attribute name</param>
		/// <returns>Attribute value</returns>
		[JsMethod(Name = "getAttribute")]
		public static object GetAttribute(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the values of multiple attributes for the first item in the collection</para>
		/// </summary>
		/// <param name="names">List of attribute names</param>
		/// <returns>Map of attribute name/value pairs</returns>
		[JsMethod(Name = "getAttributes")]
		public static object GetAttributes(string names) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the HTML content of the first item in the collection</para>
		/// </summary>
		/// <returns>HTML content or null if the collection is empty</returns>
		[JsMethod(Name = "getHtml")]
		public static string GetHtml() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the values of multiple properties for the first item in the collection</para>
		/// </summary>
		/// <param name="names">List of property names</param>
		/// <returns>Map of property name/value pairs</returns>
		[JsMethod(Name = "getProperties")]
		public static object GetProperties(string names) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the value of the given property for the first item in the
		/// collection</para>
		/// </summary>
		/// <param name="name">Property name</param>
		/// <returns>Property value</returns>
		[JsMethod(Name = "getProperty")]
		public static object GetProperty(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the currently configured value for the first item in the collection.
		/// Works with simple input fields as well as with select boxes or option
		/// elements. Returns an array for select boxes with multi selection. In all
		/// other cases, a string is returned.</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getValue")]
		public static object GetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the given attribute from all elements in the collection</para>
		/// </summary>
		/// <param name="name">Attribute name</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "removeAttribute")]
		public static qxWeb RemoveAttribute(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes multiple attributes from each item in the collection.</para>
		/// </summary>
		/// <param name="attributes">List of attribute names</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "removeAttributes")]
		public static qxWeb RemoveAttributes(string attributes) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets an HTML attribute on each item in the collection</para>
		/// </summary>
		/// <param name="name">Attribute name</param>
		/// <param name="value">Attribute value</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setAttribute")]
		public static qxWeb SetAttribute(string name, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets multiple attributes for each item in the collection.</para>
		/// </summary>
		/// <param name="attributes">A map of attribute name/value pairs</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setAttributes")]
		public static qxWeb SetAttributes(object attributes) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the HTML content of each item in the collection</para>
		/// </summary>
		/// <param name="html">HTML string</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setHtml")]
		public static qxWeb SetHtml(string html) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets multiple properties for each item in the collection.</para>
		/// </summary>
		/// <param name="properties">A map of property name/value pairs</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setProperties")]
		public static qxWeb SetProperties(object properties) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets a property on each item in the collection</para>
		/// </summary>
		/// <param name="name">Property name</param>
		/// <param name="value">Property value</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setProperty")]
		public static qxWeb SetProperty(string name, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Applies the given value to each element in the collection.
		/// Normally the value is given as a string/number value and applied to the
		/// field content (textfield, textarea) or used to detect whether the field
		/// is checked (checkbox, radiobutton).
		/// Supports array values for selectboxes (multiple selection) and checkboxes
		/// or radiobuttons (for convenience).
		/// Please note: To modify the value attribute of a checkbox or radiobutton
		/// use @link{#set} instead.</para>
		/// </summary>
		/// <param name="value">The value to apply</param>
		/// <returns>The collection for chaining</returns>
		[JsMethod(Name = "setValue")]
		public static qxWeb SetValue(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}