// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.request
{
    /// <summary>
	/// <para>A special script loader handling JSONP responses. Automatically
	/// provides callbacks and populates responseJson property.</para>
	/// <para>Example:</para>
	/// <code>
	/// var req = new qx.bom.request.Jsonp();
	/// // Some services have a fixed callback name
	/// // req.setCallbackName("callback");
	/// req.onload = function() {
	/// // Handle data received
	/// req.responseJson;
	/// }
	/// req.open("GET", url);
	/// req.send();
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.request.Jsonp", OmitOptionalParameters = true, Export = false)]
    public partial class Jsonp : qx.bom.request.Script
    {
		#region Methods

		public Jsonp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Callback provided for JSONP response to pass data.</para>
		/// <para>Called internally to populate responseJson property
		/// and indicate successful status.</para>
		/// <para>Note: If you write a custom callback you&#8217;ll need to call
		/// this method in order to notify the request about the data
		/// loaded. Writing a custom callback should not be necessary
		/// in most cases.</para>
		/// </summary>
		/// <param name="data">JSON</param>
		[JsMethod(Name = "callback")]
		public void Callback(object data) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Dispose object.</para>
		/// </summary>
		[JsMethod(Name = "dispose")]
		public void Dispose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initializes (prepares) request.</para>
		/// </summary>
		/// <param name="method">The HTTP method to use. This parameter exists for compatibility reasons. The script transport does not support methods other than GET.</param>
		/// <param name="url">The URL to which to send the request.</param>
		[JsMethod(Name = "open")]
		public void Open(string method, string url) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set callback name.</para>
		/// <para>Must be set to the name of the callback function that is called by the
		/// script returned from the JSONP service. By default, the callback name
		/// references this instance&#8217;s <see cref="Callback"/> method, allowing to connect
		/// multiple JSONP responses to different requests.</para>
		/// <para>If the JSONP service allows to set custom callback names, it should not
		/// be necessary to change the default. However, some services use a fixed
		/// callback name. This is when setting the callbackName is useful. A
		/// function is created and made available globally under the given name.
		/// The function receives the JSON data and dispatches it to this instance&#8217;s
		/// <see cref="Callback"/> method. Please note that this function is only created
		/// if it does not exist before.</para>
		/// </summary>
		/// <param name="name">Name of the callback function.</param>
		/// <returns>Self reference for chaining.</returns>
		[JsMethod(Name = "setCallbackName")]
		public qx.bom.request.Jsonp SetCallbackName(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set callback parameter.</para>
		/// <para>Some JSONP services expect the callback name to be passed labeled with a
		/// special URL parameter key, e.g. &#8220;jsonp&#8221; in &#8221;?jsonp=myCallback&#8221;. The
		/// default is &#8220;callback&#8221;.</para>
		/// </summary>
		/// <param name="param">Name of the callback parameter.</param>
		/// <returns>Self reference for chaining.</returns>
		[JsMethod(Name = "setCallbackParam")]
		public qx.bom.request.Jsonp SetCallbackParam(string param) { throw new NotImplementedException(); }

		#endregion Methods
    }
}