// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.request
{
    /// <summary>
	/// <para>Interface of a low-level transport compatible with
	/// <see cref="qx.io.request.AbstractRequest"/>.</para>
	/// <para>Based on interface specified in
	/// XmlHttpRequest. Also
	/// borrows some methods as described in
	/// XmlHttpRequest2.</para>
	/// </summary>
	public interface IRequest
    {
		#region Methods

		/// <summary>
		/// <para>Abort request</para>
		/// </summary>
		void Abort();

		/// <summary>
		/// <para>Get all response headers from response.</para>
		/// </summary>
		/// <returns>All response headers.</returns>
		string GetAllResponseHeaders();

		/// <summary>
		/// <para>Get a single response header from response.</para>
		/// </summary>
		/// <param name="header">Key of the header to get the value from.</param>
		/// <returns>Response header.</returns>
		string GetResponseHeader(string header);

		/// <summary>
		/// <para>Event handler for event fired when request is aborted.</para>
		/// </summary>
		void Onabort();

		/// <summary>
		/// <para>Event handler for event fired on a network error.</para>
		/// </summary>
		void Onerror();

		/// <summary>
		/// <para>Event handler for event fired on successful retrieval.</para>
		/// </summary>
		void Onload();

		/// <summary>
		/// <para>Event handler for event fired on retrieval.</para>
		/// </summary>
		void Onloadend();

		/// <summary>
		/// <para>Event handler for event fired at every state change.</para>
		/// </summary>
		void Onreadystatechange();

		/// <summary>
		/// <para>Event handler for event fired when timeout interval has passed.</para>
		/// </summary>
		void Ontimeout();

		/// <summary>
		/// <para>Initializes (prepares) request.</para>
		/// </summary>
		/// <param name="method">The method to use.</param>
		/// <param name="url">The URL to which to send the request.</param>
		/// <param name="async">Whether or not to perform the operation asynchronously.</param>
		void Open(string method, string url, bool async = true);

		/// <summary>
		/// <para>Sends request.</para>
		/// </summary>
		/// <param name="data">Optional data to send.</param>
		void Send(object data = null);

		/// <summary>
		/// <para>Sets a request header to be used by the request.</para>
		/// </summary>
		/// <param name="key">The name of the header whose value is to be set.</param>
		/// <param name="value">The value to set as the body of the header.</param>
		void SetRequestHeader(string key, string value);

		#endregion Methods
    }
}