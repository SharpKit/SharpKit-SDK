// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.request
{
    /// <summary>
	/// <para>Script loader with interface similar to
	/// XmlHttpRequest.</para>
	/// <para>The script loader can be used to load scripts from arbitrary sources.
	/// 
	/// For JSONP requests, consider the <see cref="qx.bom.request.Jsonp"/> transport
	/// that derives from the script loader.
	/// </para>
	/// 
	/// Example:
	/// <code>
	/// var req = new qx.bom.request.Script();
	/// req.onload = function() {
	/// // Script is loaded and parsed and
	/// // globals set are available
	/// }
	/// req.open("GET", url);
	/// req.send();
	/// </code>
	/// 
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.request.Script", OmitOptionalParameters = true, Export = false)]
    public partial class Script 
    {
		#region Events

		/// <summary>
		/// <para>Fired when the request is aborted.</para>
		/// </summary>
		public event Action<qx.bom.request.Script> OnAbort;

		/// <summary>
		/// <para>Fired on error.</para>
		/// </summary>
		public event Action<qx.bom.request.Script> OnError;

		/// <summary>
		/// <para>Fired on successful retrieval.</para>
		/// </summary>
		public event Action<qx.bom.request.Script> OnLoad;

		/// <summary>
		/// <para>Fired at loadend.</para>
		/// </summary>
		public event Action<qx.bom.request.Script> OnLoadend;

		/// <summary>
		/// <para>Fired at ready state changes.</para>
		/// </summary>
		public event Action<qx.bom.request.Script> OnReadystatechange;

		/// <summary>
		/// <para>Fired on timeouts.</para>
		/// </summary>
		public event Action<qx.bom.request.Script> OnTimeout;

		#endregion Events

		#region Methods

		public Script() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Aborts request.</para>
		/// </summary>
		/// <returns>Self for chaining.</returns>
		[JsMethod(Name = "abort")]
		public qx.bom.request.Script Abort() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Dispose object.</para>
		/// </summary>
		[JsMethod(Name = "dispose")]
		public void Dispose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get all response headers from response.</para>
		/// <para>Note: This method exists for compatibility reasons. The script
		/// transport does not receive response headers.</para>
		/// </summary>
		/// <returns>Warning message or null if the request is disposed</returns>
		[JsMethod(Name = "getAllResponseHeaders")]
		public string GetAllResponseHeaders() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a single response header from response.</para>
		/// <para>Note: This method exists for compatibility reasons. The script
		/// transport does not receive response headers.</para>
		/// </summary>
		/// <param name="key">Key of the header to get the value from.</param>
		/// <returns>Warning message or null if the request is disposed</returns>
		[JsMethod(Name = "getResponseHeader")]
		public string GetResponseHeader(string key) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add an event listener for the given event name.</para>
		/// </summary>
		/// <param name="name">The name of the event to listen to.</param>
		/// <param name="listener">The function to execute when the event is fired</param>
		/// <param name="ctx">The context of the listener.</param>
		/// <returns>Self for chaining.</returns>
		[JsMethod(Name = "on")]
		public qx.bom.request.Script On(string name, Action<qx.eventx.type.Data> listener, object ctx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;abort&#8221; that is fired when request
		/// is aborted.</para>
		/// <para>Replace with custom method to listen to the &#8220;abort&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "onabort")]
		public void Onabort() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;error&#8221; that is fired on a network error.</para>
		/// <para>Note: Some browsers do not support the &#8220;error&#8221; event.</para>
		/// <para>Replace with custom method to listen to the &#8220;error&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "onerror")]
		public void Onerror() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;load&#8221; that is fired on successful retrieval.</para>
		/// <para>Note: This handler is called even when an invalid script is returned.</para>
		/// <para>Warning: Internet Explorer < 9 receives a false &#8220;load&#8221; for invalid URLs.
		/// This &#8220;load&#8221; is fired about 2 seconds after sending the request. To
		/// distinguish from a real &#8220;load&#8221;, consider defining a custom check
		/// function using <see cref="SetDetermineSuccess"/> and query the status
		/// property. However, the script loaded needs to have a known impact on
		/// the global namespace. If this does not work for you, you may be able
		/// to set a timeout lower than 2 seconds, depending on script size,
		/// complexity and execution time.</para>
		/// <para>Replace with custom method to listen to the &#8220;load&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "onload")]
		public void Onload() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;loadend&#8221; that is fired on retrieval.</para>
		/// <para>Note: This handler is called even when a network error (or similar)
		/// occurred.</para>
		/// <para>Replace with custom method to listen to the &#8220;loadend&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "onloadend")]
		public void Onloadend() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for an event that fires at every state change.</para>
		/// <para>Replace with custom method to get informed about the communication progress.</para>
		/// </summary>
		[JsMethod(Name = "onreadystatechange")]
		public void Onreadystatechange() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;timeout&#8221; that is fired when timeout
		/// interval has passed.</para>
		/// <para>Replace with custom method to listen to the &#8220;timeout&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "ontimeout")]
		public void Ontimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initializes (prepares) request.</para>
		/// </summary>
		/// <param name="method">The HTTP method to use. This parameter exists for compatibility reasons. The script transport does not support methods other than GET.</param>
		/// <param name="url">The URL to which to send the request.</param>
		[JsMethod(Name = "open")]
		public void Open(string method, string url) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sends request.</para>
		/// </summary>
		/// <returns>Self for chaining.</returns>
		[JsMethod(Name = "send")]
		public qx.bom.request.Script Send() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if loaded script has expected impact on global namespace.</para>
		/// <para>The function is called once the script was loaded and must return a
		/// boolean indicating if the response is to be considered successful.</para>
		/// </summary>
		/// <param name="check">Function executed once the script was loaded.</param>
		[JsMethod(Name = "setDetermineSuccess")]
		public void SetDetermineSuccess(Action<object> check) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Appends a query parameter to URL.</para>
		/// <para>This method exists for compatibility reasons. The script transport
		/// does not support request headers. However, many services parse query
		/// parameters like request headers.</para>
		/// <para>Note: The request must be initialized before using this method.</para>
		/// </summary>
		/// <param name="key">The name of the header whose value is to be set.</param>
		/// <param name="value">The value to set as the body of the header.</param>
		/// <returns>Self for chaining.</returns>
		[JsMethod(Name = "setRequestHeader")]
		public qx.bom.request.Script SetRequestHeader(string key, string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}