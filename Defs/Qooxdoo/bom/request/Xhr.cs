// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.request
{
    /// <summary>
	/// <para>A wrapper of the XMLHttpRequest host object (or equivalent). The interface is
	/// similar to XmlHttpRequest.</para>
	/// <para>Hides browser inconsistencies and works around bugs found in popular
	/// implementations.</para>
	/// 
	/// Example:
	/// <code>
	/// var req = new qx.bom.request.Xhr();
	/// req.onload = function() {
	/// // Handle data received
	/// req.responseText;
	/// }
	/// req.open("GET", url);
	/// req.send();
	/// </code>
	/// 
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.request.Xhr", OmitOptionalParameters = true, Export = false)]
    public partial class Xhr 
    {
		#region Events

		/// <summary>
		/// <para>Fired when the request is aborted.</para>
		/// </summary>
		public event Action<qx.bom.request.Xhr> OnAbort;

		/// <summary>
		/// <para>Fired on error.</para>
		/// </summary>
		public event Action<qx.bom.request.Xhr> OnError;

		/// <summary>
		/// <para>Fired on successful retrieval.</para>
		/// </summary>
		public event Action<qx.bom.request.Xhr> OnLoad;

		/// <summary>
		/// <para>Fired at loadend.</para>
		/// </summary>
		public event Action<qx.bom.request.Xhr> OnLoadend;

		/// <summary>
		/// <para>Fired at ready state changes.</para>
		/// </summary>
		public event Action<qx.bom.request.Xhr> OnReadystatechange;

		/// <summary>
		/// <para>Fired on timeouts.</para>
		/// </summary>
		public event Action<qx.bom.request.Xhr> OnTimeout;

		#endregion Events

		#region Methods

		public Xhr() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Abort request.</para>
		/// <para>Cancels any network activity.</para>
		/// </summary>
		/// <returns>Self for chaining.</returns>
		[JsMethod(Name = "abort")]
		public qx.bom.request.Xhr Abort() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Dispose object and wrapped native XHR.</para>
		/// </summary>
		/// <returns>true if the object was successfully disposed</returns>
		[JsMethod(Name = "dispose")]
		public bool Dispose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get all response headers from response.</para>
		/// </summary>
		/// <returns>All response headers.</returns>
		[JsMethod(Name = "getAllResponseHeaders")]
		public string GetAllResponseHeaders() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get wrapped native XMLHttpRequest (or equivalent).</para>
		/// <para>Can be XMLHttpRequest or ActiveX.</para>
		/// </summary>
		/// <returns>XMLHttpRequest or equivalent.</returns>
		[JsMethod(Name = "getRequest")]
		public object GetRequest() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a single response header from response.</para>
		/// </summary>
		/// <param name="header">Key of the header to get the value from.</param>
		/// <returns>Response header.</returns>
		[JsMethod(Name = "getResponseHeader")]
		public string GetResponseHeader(string header) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add an event listener for the given event name.</para>
		/// </summary>
		/// <param name="name">The name of the event to listen to.</param>
		/// <param name="listener">The function to execute when the event is fired</param>
		/// <param name="ctx">The context of the listener.</param>
		/// <returns>Self for chaining.</returns>
		[JsMethod(Name = "on")]
		public qx.bom.request.Xhr On(string name, Action<qx.eventx.type.Data> listener, object ctx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;abort&#8221; that is fired when request
		/// is aborted.</para>
		/// <para>Replace with custom method to listen to the &#8220;abort&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "onabort")]
		public void Onabort() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;error&#8221; that is fired on a network error.</para>
		/// <para>Replace with custom method to listen to the &#8220;error&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "onerror")]
		public void Onerror() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;load&#8221; that is fired on successful retrieval.</para>
		/// <para>Note: This handler is called even when the HTTP status indicates an error.</para>
		/// <para>Replace with custom method to listen to the &#8220;load&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "onload")]
		public void Onload() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;loadend&#8221; that is fired on retrieval.</para>
		/// <para>Note: This handler is called even when a network error (or similar)
		/// occurred.</para>
		/// <para>Replace with custom method to listen to the &#8220;loadend&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "onloadend")]
		public void Onloadend() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event that fires at every state change.</para>
		/// <para>Replace with custom method to get informed about the communication progress.</para>
		/// </summary>
		[JsMethod(Name = "onreadystatechange")]
		public void Onreadystatechange() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler for XHR event &#8220;timeout&#8221; that is fired when timeout
		/// interval has passed.</para>
		/// <para>Replace with custom method to listen to the &#8220;timeout&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "ontimeout")]
		public void Ontimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initializes (prepares) request.</para>
		/// </summary>
		/// <param name="method">The HTTP method to use.</param>
		/// <param name="url">The URL to which to send the request.</param>
		/// <param name="async">Whether or not to perform the operation asynchronously.</param>
		/// <param name="user">Optional user name to use for authentication purposes.</param>
		/// <param name="password">Optional password to use for authentication purposes.</param>
		[JsMethod(Name = "open")]
		public void Open(string method = "GET", string url = null, bool async = true, string user = null, string password = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sends request.</para>
		/// </summary>
		/// <param name="data">Optional data to send.</param>
		/// <returns>Self for chaining.</returns>
		[JsMethod(Name = "send")]
		public qx.bom.request.Xhr Send(object data = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets an HTTP request header to be used by the request.</para>
		/// <para>Note: The request must be initialized before using this method.</para>
		/// </summary>
		/// <param name="key">The name of the header whose value is to be set.</param>
		/// <param name="value">The value to set as the body of the header.</param>
		/// <returns>Self for chaining.</returns>
		[JsMethod(Name = "setRequestHeader")]
		public qx.bom.request.Xhr SetRequestHeader(string key, string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}