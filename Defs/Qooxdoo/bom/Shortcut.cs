// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom
{
    /// <summary>
	/// <para>Shortcuts can be used to globally define keyboard shortcuts.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.Shortcut", OmitOptionalParameters = true, Export = false)]
    public partial class Shortcut : qx.core.Object
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Enabled"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeEnabled;

		/// <summary>
		/// <para>Fired when the command is executed. Sets the &#8220;data&#8221; property of the event to
		/// the object that issued the command.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnExecute;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Whether the execute event should be fired repeatedly if the user keep
		/// the keys pressed.</para>
		/// </summary>
		[JsProperty(Name = "autoRepeat", NativeField = true)]
		public bool AutoRepeat { get; set; }

		/// <summary>
		/// <para>whether the command should be respected/enabled</para>
		/// </summary>
		[JsProperty(Name = "enabled", NativeField = true)]
		public bool Enabled { get; set; }

		/// <summary>
		/// <para>The command shortcut</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "shortcut", NativeField = true)]
		public string Shortcutx { get; set; }

		#endregion Properties

		#region Methods

		public Shortcut() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Create a new instance of Command</para>
		/// </summary>
		/// <param name="shortcut">shortcuts can be composed of optional modifier keys Control, Alt, Shift, Meta and a non modifier key. If no non modifier key is specified, the second paramater is evaluated. The key must be separated by a + or - character. Examples: Alt+F1, Control+C, Control+Alt+Delete</param>
		public Shortcut(string shortcut) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Fire the &#8220;execute&#8221; event on this shortcut.</para>
		/// </summary>
		/// <param name="target">Object which issued the execute event</param>
		[JsMethod(Name = "execute")]
		public void Execute(object target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property autoRepeat.</para>
		/// </summary>
		[JsMethod(Name = "getAutoRepeat")]
		public bool GetAutoRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property enabled.</para>
		/// </summary>
		[JsMethod(Name = "getEnabled")]
		public bool GetEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property shortcut.</para>
		/// </summary>
		[JsMethod(Name = "getShortcut")]
		public string GetShortcut() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property autoRepeat
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property autoRepeat.</param>
		[JsMethod(Name = "initAutoRepeat")]
		public void InitAutoRepeat(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property enabled
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property enabled.</param>
		[JsMethod(Name = "initEnabled")]
		public void InitEnabled(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property shortcut
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property shortcut.</param>
		[JsMethod(Name = "initShortcut")]
		public void InitShortcut(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property autoRepeat equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAutoRepeat")]
		public void IsAutoRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property enabled equals true.</para>
		/// </summary>
		[JsMethod(Name = "isEnabled")]
		public void IsEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property autoRepeat.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAutoRepeat")]
		public void ResetAutoRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property enabled.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetEnabled")]
		public void ResetEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property shortcut.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShortcut")]
		public void ResetShortcut() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property autoRepeat.</para>
		/// </summary>
		/// <param name="value">New value for property autoRepeat.</param>
		[JsMethod(Name = "setAutoRepeat")]
		public void SetAutoRepeat(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property enabled.</para>
		/// </summary>
		/// <param name="value">New value for property enabled.</param>
		[JsMethod(Name = "setEnabled")]
		public void SetEnabled(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property shortcut.</para>
		/// </summary>
		/// <param name="value">New value for property shortcut.</param>
		[JsMethod(Name = "setShortcut")]
		public void SetShortcut(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property autoRepeat.</para>
		/// </summary>
		[JsMethod(Name = "toggleAutoRepeat")]
		public void ToggleAutoRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property enabled.</para>
		/// </summary>
		[JsMethod(Name = "toggleEnabled")]
		public void ToggleEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the shortcut as string using the currently selected locale.</para>
		/// </summary>
		/// <returns>shortcut</returns>
		[JsMethod(Name = "toString")]
		public string ToString() { throw new NotImplementedException(); }

		#endregion Methods
    }
}