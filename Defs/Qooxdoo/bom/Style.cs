// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom
{
    /// <summary>
	/// <para>Responsible class for everything concerning styles without the need of
	/// an element.</para>
	/// <para>If you want to query or modify styles of HTML elements,
	/// take a look at <see cref="qx.bom.element.Style"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.Style", OmitOptionalParameters = true, Export = false)]
    public partial class Style 
    {
		#region Methods

		public Style() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Takes the name of a JavaScript style property and returns the
		/// corresponding CSS name.</para>
		/// <para>The name of the style property is taken as is, i.e. it gets not
		/// extended by vendor prefixes. The conversion into the CSS name is
		/// done by string manipulation, not involving the DOM.</para>
		/// <para>Example:</para>
		/// <code>qx.bom.Style.getCssName("MozTransform"); //returns "-moz-transform"</code>
		/// </summary>
		/// <param name="propertyName">JavaScript style property</param>
		/// <returns>CSS property</returns>
		[JsMethod(Name = "getCssName")]
		public static string GetCssName(string propertyName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Takes the name of a style property and returns the name the browser uses
		/// for its implementation, which might include a vendor prefix.</para>
		/// </summary>
		/// <param name="propertyName">Style property name to check</param>
		/// <returns>The supported property name or null if not supported</returns>
		[JsMethod(Name = "getPropertyName")]
		public static string GetPropertyName(string propertyName) { throw new NotImplementedException(); }

		#endregion Methods
    }
}