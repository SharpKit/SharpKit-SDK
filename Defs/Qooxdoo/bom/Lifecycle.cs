// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom
{
    /// <summary>
	/// <para>Low-level application life-cycle management.</para>
	/// <para>One can use the static methods <see cref="OnReady"/> and <see cref="OnShutdown"/> to
	/// add callback functions, in order to get informed about the ready state or
	/// the shutdown of the low-level application, respectively.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.Lifecycle", OmitOptionalParameters = true, Export = false)]
    public partial class Lifecycle 
    {
		#region Methods

		public Lifecycle() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Register a callback function, which is called in the optionally provided
		/// context, when the application is ready.</para>
		/// </summary>
		/// <param name="callback">callback function</param>
		/// <param name="context">context in which the callback is called</param>
		[JsMethod(Name = "onReady")]
		public static void OnReady(Action<object> callback, object context = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Register a callback function, which is called in the optionally provided
		/// context, when the application is shutdown.
		/// IMPORTANT NOTE: Since it is not guaranteed that a
		/// shutdown event is fired, you cannot fully rely on
		/// getting informed.</para>
		/// </summary>
		/// <param name="callback">callback function</param>
		/// <param name="context">context in which the callback is called</param>
		[JsMethod(Name = "onShutdown")]
		public static void OnShutdown(Action<object> callback, object context = null) { throw new NotImplementedException(); }

		#endregion Methods
    }
}