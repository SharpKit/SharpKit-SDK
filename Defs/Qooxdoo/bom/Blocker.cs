// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom
{
    /// <summary>
	/// <para>This class provides an unified blocker which offers three different modes.</para>
	/// <para>Blocker modes</para>
	/// <list type="bullet">
	/// <item>block the whole document</item>
	/// <item>block the content of an element</item>
	/// <item>act as an underlying blocker for an element to shim native controls</item>
	/// </list
	/// <para>The third mode is mainly necessary for IE browsers.</para>
	/// <para>The first mode is the easiest to use. Just use the <see cref="Block"/> method
	/// without a parameter.
	/// The second and third mode are taking a DOM element as parameter for the
	/// <see cref="Block"/> method. Additionally one need to setup the &#8220;zIndex&#8221; value
	/// correctly to get the right results (see at <see cref="SetBlockerZIndex"/> method).</para>
	/// <para>The zIndex value defaults to the value &#8220;10000&#8221;. Either you set an appropiate
	/// value for the blocker zIndex or for your DOM element to block. If you want
	/// to block the content of your DOM element it has to have at least the zIndex
	/// value of &#8220;10001&#8221; with default blocker values.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.Blocker", OmitOptionalParameters = true, Export = false)]
    public partial class Blocker : qx.core.Object
    {
		#region Methods

		public Blocker() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Blocks the whole document (if no parameter is given) or acts as an
		/// underlying blocker for native controls.</para>
		/// </summary>
		/// <param name="element">If no element is given the whole document is blocked.</param>
		[JsMethod(Name = "block")]
		public void Block(qx.html.Element element = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current blocker color.</para>
		/// </summary>
		/// <returns>CSS color value</returns>
		[JsMethod(Name = "getBlockerColor")]
		public string GetBlockerColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the blocker element. Useful if the element should be animated.</para>
		/// </summary>
		/// <returns>DOM element</returns>
		[JsMethod(Name = "getBlockerElement")]
		public qx.html.Element GetBlockerElement() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the blocker opacity value.</para>
		/// </summary>
		/// <returns>CSS opacity value</returns>
		[JsMethod(Name = "getBlockerOpacity")]
		public double GetBlockerOpacity() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the blocker zIndex value</para>
		/// </summary>
		/// <returns>CSS zIndex value</returns>
		[JsMethod(Name = "getBlockerZIndex")]
		public double GetBlockerZIndex() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the blocker is already active.</para>
		/// </summary>
		/// <returns>Blocker active</returns>
		[JsMethod(Name = "isBlocked")]
		public bool IsBlocked() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the color of the blocker element. Be sure to set also a suitable
		/// opacity value to get the desired result.</para>
		/// </summary>
		/// <param name="color">CSS color value</param>
		[JsMethod(Name = "setBlockerColor")]
		public void SetBlockerColor(string color) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the blocker opacity. Be sure to set also a suitable blocker color
		/// value to get the desired result.</para>
		/// </summary>
		/// <param name="opacity">CSS opacity value</param>
		[JsMethod(Name = "setBlockerOpacity")]
		public void SetBlockerOpacity(string opacity) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the zIndex of the blocker element. For most use cases you do not need
		/// to manipulate this value.</para>
		/// </summary>
		/// <param name="zIndex">CSS zIndex value</param>
		[JsMethod(Name = "setBlockerZIndex")]
		public void SetBlockerZIndex(double zIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Releases the blocking</para>
		/// </summary>
		[JsMethod(Name = "unblock")]
		public void Unblock() { throw new NotImplementedException(); }

		#endregion Methods
    }
}