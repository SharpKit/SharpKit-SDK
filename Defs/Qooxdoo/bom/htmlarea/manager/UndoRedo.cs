// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.htmlarea.manager
{
    /// <summary>
	/// <para>Decorator for CommandManager instance to implement Undo/Redo functionality</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.htmlarea.manager.UndoRedo", OmitOptionalParameters = true, Export = false)]
    public partial class UndoRedo : qx.core.Object
    {
		#region Methods

		public UndoRedo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Constructor</para>
		/// </summary>
		/// <param name="commandManager">command manager instance</param>
		/// <param name="editorInstance">editor instance</param>
		public UndoRedo(qx.bom.htmlarea.manager.Command commandManager, qx.ui.embed.HtmlArea editorInstance) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Public API method to add an undo step</para>
		/// </summary>
		/// <param name="command">Command identifier</param>
		/// <param name="value">value of command</param>
		/// <param name="commandObject">Info object about command</param>
		[JsMethod(Name = "addUndoStep")]
		public void AddUndoStep(string command, string value, object commandObject) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Executes the given command and collects (if necessary) undo information.</para>
		/// </summary>
		/// <param name="command">Command to execute</param>
		/// <param name="value">Value of the command (if any)</param>
		/// <returns>Result of operation</returns>
		[JsMethod(Name = "execute")]
		public bool Execute(string command, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Helper method to get an undo object which is added to the undoStack</para>
		/// </summary>
		/// <returns>undo object</returns>
		[JsMethod(Name = "getUndoRedoObject")]
		public object GetUndoRedoObject() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts a paragraph when hitting the &#8220;enter&#8221; key.
		/// Delegates to the real command manager instance.</para>
		/// </summary>
		/// <returns>whether the key event should be stopped or not</returns>
		[JsMethod(Name = "insertParagraphOnLinebreak")]
		public bool InsertParagraphOnLinebreak() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Service method to check if a redo operation is currently possible</para>
		/// </summary>
		/// <returns>Whether redo is possible or not</returns>
		[JsMethod(Name = "isRedoPossible")]
		public bool IsRedoPossible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Service method to check if an undo operation is currently possible</para>
		/// </summary>
		/// <returns>Whether an undo is possible or not</returns>
		[JsMethod(Name = "isUndoPossible")]
		public bool IsUndoPossible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Redo facade method. The different types of redo (command/custom/content)
		/// are delegated to their specialized implementation.</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "redo")]
		public bool Redo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Register a handler for a customized actionType. This handler methods
		/// (undo and redo) are called whenever the UndoManager encounters the
		/// given actionType to undo/redo the change.</para>
		/// </summary>
		/// <param name="actionType">actionType to react on with undo and redo methods</param>
		/// <param name="undoHandler">undo method</param>
		/// <param name="redoHandler">redo method</param>
		/// <param name="context">In this context the methods are called. When no context is given the context is the UndoManager itself.</param>
		[JsMethod(Name = "registerHandler")]
		public void RegisterHandler(string actionType, Action<object> undoHandler, Action<object> redoHandler, object context) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the document instance on which the UndoManager should perform his actions.</para>
		/// </summary>
		/// <param name="doc">document node to work on</param>
		[JsMethod(Name = "setContentDocument")]
		public void SetContentDocument(Document doc) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Undo facade method. The different types of undo (command/custom/content)
		/// are delegated to their specialized implementation.</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "undo")]
		public bool Undo() { throw new NotImplementedException(); }

		#endregion Methods
    }
}