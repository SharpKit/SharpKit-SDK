// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.htmlarea.manager
{
    /// <summary>
	/// <para>Available commands for the HtmlArea component</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.htmlarea.manager.Command", OmitOptionalParameters = true, Export = false)]
    public partial class Command : qx.core.Object
    {
		#region Methods

		public Command() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Constructor</para>
		/// </summary>
		/// <param name="editorInstance">editor instance</param>
		public Command(qx.bom.htmlarea.HtmlArea editorInstance) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Executes the given command</para>
		/// </summary>
		/// <param name="command">Command to execute</param>
		/// <param name="value">Value of the command (if any)</param>
		/// <returns>Result of operation</returns>
		[JsMethod(Name = "execute")]
		public bool Execute(string command, object value = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the commandobject of the given command name</para>
		/// </summary>
		/// <param name="commandName">name of the command</param>
		/// <returns>commandObject or null if no command is available for the given command name</returns>
		[JsMethod(Name = "getCommandObject")]
		public object GetCommandObject(string commandName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Internal helper function which retrieves all style settings, which are set
		/// on the focus node and saves them on a span element.</para>
		/// </summary>
		/// <param name="element">optional element reference the lookup should start</param>
		/// <returns>map with all style settings with style attributes as keys.</returns>
		[JsMethod(Name = "getCurrentStyles")]
		public object GetCurrentStyles(qx.html.Element element = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts a paragraph when hitting the &#8220;enter&#8221; key</para>
		/// </summary>
		/// <returns>whether the key event should be stopped or not</returns>
		[JsMethod(Name = "insertParagraphOnLinebreak")]
		public bool InsertParagraphOnLinebreak() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the contentDocument on which this manager should execute
		/// his commands</para>
		/// </summary>
		/// <param name="doc">contentDocument of the editor instance</param>
		[JsMethod(Name = "setContentDocument")]
		public void SetContentDocument(object doc) { throw new NotImplementedException(); }

		#endregion Methods
    }
}