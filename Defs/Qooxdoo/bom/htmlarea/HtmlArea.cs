// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.htmlarea
{
    /// <summary>
	/// <para>Low-level Rich text editor which can be used by connecting it to an
	/// existing DOM element (DIV node).
	/// This component does not contain any <see cref="qx.ui"/> code resulting in a
	/// smaller footprint.</para>
	/// <para>Optimized for the use at a traditional webpage.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.htmlarea.HtmlArea", OmitOptionalParameters = true, Export = false)]
    public partial class HtmlArea : qx.core.Object
    {
		#region Events

		/// <summary>
		/// <para>This event is dispatched when the editor gets a right click.</para>
		/// <para>Fires a data event with the following data:</para>
		/// <list type="bullet">
		/// <item>x &#8211; absolute x coordinate</item>
		/// <item>y &#8211; absolute y coordinate</item>
		/// <item>relX &#8211; relative x coordinate</item>
		/// <item>relY &#8211; relative y coordinate</item>
		/// <item>target &#8211; DOM element target</item>
		/// </list>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnContextmenu;

		/// <summary>
		/// <para>This event holds a data map which informs about the formatting at the
		/// current cursor position. It holds the following keys:</para>
		/// <list type="bullet">
		/// <item>bold</item>
		/// <item>italic</item>
		/// <item>underline</item>
		/// <item>strikethrough</item>
		/// <item>fontSize</item>
		/// <item>fontFamily</item>
		/// <item>insertUnorderedList</item>
		/// <item>insertOrderedList</item>
		/// <item>justifyLeft</item>
		/// <item>justifyCenter</item>
		/// <item>justifyRight</item>
		/// <item>justifyFull</item>
		/// </list>
		/// <para>This map can be used to control/update a toolbar states.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnCursorContext;

		/// <summary>
		/// <para>This event is dispatched when the editor gets the focus and his own handling is done</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnFocused;

		/// <summary>
		/// <para>This event is dispatched when the document receives an &#8220;focusout&#8221; event</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnFocusOut;

		/// <summary>
		/// <para>Thrown when the editor is loaded.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnLoad;

		/// <summary>
		/// <para>Thrown when the editor gets an error at loading time.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnLoadingError;

		/// <summary>
		/// <para>Only available if messengerMode is active. This event returns the current content of the editor.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnMessengerContent;

		/// <summary>
		/// <para>This event is dispatched when the editor is ready to use</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnReady;

		/// <summary>
		/// <para>This event is dispatched when the editor is ready to use after it was
		/// re-located and re-initialized. Only implemented for Gecko browsers.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnReadyAfterInvalid;

		/// <summary>
		/// <para>Holds information about the state of undo/redo
		/// Keys are &#8220;undo&#8221; and &#8220;redo&#8221;.
		/// Possible values are 0 and -1 to stay in sync with
		/// the kind the &#8220;cursorContext&#8221; event works.
		/// (1 = active/pressed, 0 = possible/not pressed, -1 = disabled)</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnUndoRedoState;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Selected content type. Currently only XHTML is supported.</para>
		/// </summary>
		[JsProperty(Name = "contentType", NativeField = true)]
		public string ContentType { get; set; }

		/// <summary>
		/// <para>Default font family to use when e.g. user removes all content</para>
		/// </summary>
		[JsProperty(Name = "defaultFontFamily", NativeField = true)]
		public string DefaultFontFamily { get; set; }

		/// <summary>
		/// <para>Default font size to use when e.g. user removes all content</para>
		/// </summary>
		[JsProperty(Name = "defaultFontSize", NativeField = true)]
		public double DefaultFontSize { get; set; }

		/// <summary>
		/// <para>If true we add a linebreak after control+enter</para>
		/// </summary>
		[JsProperty(Name = "insertLinebreakOnCtrlEnter", NativeField = true)]
		public bool InsertLinebreakOnCtrlEnter { get; set; }

		/// <summary>
		/// <para>Toggles whether a p element is inserted on each line break or not.
		/// A &#8220;normal&#8221; linebreak can be achieved using the combination &#8220;Shift+Enter&#8221; anyway</para>
		/// </summary>
		[JsProperty(Name = "insertParagraphOnLinebreak", NativeField = true)]
		public bool InsertParagraphOnLinebreak { get; set; }

		/// <summary>
		/// <para>If turned on the editor acts like a messenger widget e.g. if one hits the Enter key the current content gets
		/// outputted (via a DataEvent) and the editor clears his content</para>
		/// </summary>
		[JsProperty(Name = "messengerMode", NativeField = true)]
		public bool MessengerMode { get; set; }

		/// <summary>
		/// <para>Whether to use the native contextmenu or to block it and use own event</para>
		/// </summary>
		[JsProperty(Name = "nativeContextMenu", NativeField = true)]
		public bool NativeContextMenu { get; set; }

		/// <summary>
		/// <para>Function to use in postProcessing html. See getHtml() and __getHtml().</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "postProcess", NativeField = true)]
		public Action<object> PostProcess { get; set; }

		/// <summary>
		/// <para>Toggles whether to use Undo/Redo</para>
		/// </summary>
		[JsProperty(Name = "useUndoRedo", NativeField = true)]
		public bool UseUndoRedo { get; set; }

		#endregion Properties

		#region Methods

		public HtmlArea() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Constructor</para>
		/// </summary>
		/// <param name="element">DOM element to connect the component to</param>
		/// <param name="value">Initial content</param>
		/// <param name="styleInformation">Optional style information for the editor&#8217;s document Can be a string or a map (example: { &#8220;p&#8221; : &#8220;padding:2px&#8221; }</param>
		/// <param name="source">source of the iframe</param>
		public HtmlArea(qx.html.Element element, string value, object styleInformation, string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the given node is a block node</para>
		/// </summary>
		/// <param name="node">Node</param>
		/// <returns>whether it is a block node</returns>
		[JsMethod(Name = "isBlockNode")]
		public static bool IsBlockNode(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks of the given node is headline node.</para>
		/// </summary>
		/// <param name="node">Node to check</param>
		/// <returns>whether it is a headline node</returns>
		[JsMethod(Name = "isHeadlineNode")]
		public static bool IsHeadlineNode(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if one element is in the list of elements that are allowed to contain a paragraph in HTML</para>
		/// </summary>
		/// <param name="node">node to check</param>
		/// <returns></returns>
		[JsMethod(Name = "isParagraphParent")]
		public static bool IsParagraphParent(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Can be used to set the user focus to the content. Also used when the &#8220;TAB&#8221; key is used to
		/// tab into the component. This method is also called by the <see cref="qx.ui.embed.HtmlArea"/> widget.</para>
		/// </summary>
		[JsMethod(Name = "focusContent")]
		public void FocusContent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Getter for command manager.</para>
		/// </summary>
		/// <returns>manager instance</returns>
		[JsMethod(Name = "getCommandManager")]
		public object GetCommandManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the complete content of the editor</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getCompleteHtml")]
		public string GetCompleteHtml() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Getting the computed value of the editor.
		/// This method returns the current value of the editor traversing
		/// the elements below the body element. With this method you always
		/// get the current value, but it is much more expensive. So use it
		/// carefully.</para>
		/// </summary>
		/// <param name="skipHtmlEncoding">whether the html encoding of text nodes should be skipped</param>
		/// <returns>computed value of the editor</returns>
		[JsMethod(Name = "getComputedValue")]
		public string GetComputedValue(bool skipHtmlEncoding = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the body of the document</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getContentBody")]
		public object GetContentBody() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the document of the iframe</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getContentDocument")]
		public object GetContentDocument() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentType.</para>
		/// </summary>
		[JsMethod(Name = "getContentType")]
		public string GetContentType() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the window of the iframe</para>
		/// </summary>
		/// <returns>window node</returns>
		[JsMethod(Name = "getContentWindow")]
		public Node GetContentWindow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the information about the current context (focusNode). It&#8217;s a
		/// map with information about &#8220;bold&#8221;, &#8220;italic&#8221;, &#8220;underline&#8221;, etc.</para>
		/// </summary>
		/// <returns>formatting information about the focusNode</returns>
		[JsMethod(Name = "getContextInformation")]
		public object GetContextInformation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property defaultFontFamily.</para>
		/// </summary>
		[JsMethod(Name = "getDefaultFontFamily")]
		public string GetDefaultFontFamily() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property defaultFontSize.</para>
		/// </summary>
		[JsMethod(Name = "getDefaultFontSize")]
		public double GetDefaultFontSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the document is in editable mode</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getEditable")]
		public bool GetEditable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the node where the selection ends</para>
		/// </summary>
		/// <returns>Focus node or null if no range is available</returns>
		[JsMethod(Name = "getFocusNode")]
		public qx.html.Element GetFocusNode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get html content (call own recursive method)</para>
		/// </summary>
		/// <param name="skipHtmlEncoding">whether the html encoding of text nodes should be skipped</param>
		/// <returns>current content of the editor as XHTML</returns>
		[JsMethod(Name = "getHtml")]
		public string GetHtml(bool skipHtmlEncoding = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the iframe object which is used to render the content</para>
		/// </summary>
		/// <returns>iframe DOM element</returns>
		[JsMethod(Name = "getIframeObject")]
		public qx.html.Element GetIframeObject() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property insertLinebreakOnCtrlEnter.</para>
		/// </summary>
		[JsMethod(Name = "getInsertLinebreakOnCtrlEnter")]
		public bool GetInsertLinebreakOnCtrlEnter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property insertParagraphOnLinebreak.</para>
		/// </summary>
		[JsMethod(Name = "getInsertParagraphOnLinebreak")]
		public bool GetInsertParagraphOnLinebreak() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property messengerMode.</para>
		/// </summary>
		[JsMethod(Name = "getMessengerMode")]
		public bool GetMessengerMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property nativeContextMenu.</para>
		/// </summary>
		[JsMethod(Name = "getNativeContextMenu")]
		public bool GetNativeContextMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property postProcess.</para>
		/// </summary>
		[JsMethod(Name = "getPostProcess")]
		public Action<object> GetPostProcess() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the range of the current selection</para>
		/// </summary>
		/// <returns>Range object or null</returns>
		[JsMethod(Name = "getRange")]
		public Range GetRange() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current stored range.</para>
		/// </summary>
		/// <returns>range object or null</returns>
		[JsMethod(Name = "getSavedRange")]
		public Range GetSavedRange() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the content of the actual range as text</para>
		/// </summary>
		/// <returns>selected text</returns>
		[JsMethod(Name = "getSelectedHtml")]
		public string GetSelectedHtml() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>*** IN DEVELOPMENT! ***
		/// Returns all text nodes</para>
		/// </summary>
		/// <returns>Text nodes</returns>
		[JsMethod(Name = "getTextNodes")]
		public JsArray GetTextNodes() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property useUndoRedo.</para>
		/// </summary>
		[JsMethod(Name = "getUseUndoRedo")]
		public bool GetUseUndoRedo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Getting the value of the editor.
		/// Attention: The content of the editor is synced
		/// at focus/blur events, but not on every input. This method
		/// is not delivering the current content in a stable manner.
		/// To get the current value of the editor use the <see cref="GetComputedValue"/>
		/// method instead.</para>
		/// </summary>
		/// <returns>value of the editor</returns>
		[JsMethod(Name = "getValue")]
		public string GetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all the words that are contained in a node.</para>
		/// </summary>
		/// <param name="node">the node element where the text should be retrieved from.</param>
		/// <returns>all the words.</returns>
		[JsMethod(Name = "getWords")]
		public string GetWords(object node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>*** IN DEVELOPMENT! ***
		/// Returns all words</para>
		/// </summary>
		/// <returns>all words</returns>
		[JsMethod(Name = "getWordsWithElement")]
		public object GetWordsWithElement() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentType
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentType.</param>
		[JsMethod(Name = "initContentType")]
		public void InitContentType(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property defaultFontFamily
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property defaultFontFamily.</param>
		[JsMethod(Name = "initDefaultFontFamily")]
		public void InitDefaultFontFamily(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property defaultFontSize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property defaultFontSize.</param>
		[JsMethod(Name = "initDefaultFontSize")]
		public void InitDefaultFontSize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property insertLinebreakOnCtrlEnter
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property insertLinebreakOnCtrlEnter.</param>
		[JsMethod(Name = "initInsertLinebreakOnCtrlEnter")]
		public void InitInsertLinebreakOnCtrlEnter(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property insertParagraphOnLinebreak
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property insertParagraphOnLinebreak.</param>
		[JsMethod(Name = "initInsertParagraphOnLinebreak")]
		public void InitInsertParagraphOnLinebreak(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property messengerMode
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property messengerMode.</param>
		[JsMethod(Name = "initMessengerMode")]
		public void InitMessengerMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property nativeContextMenu
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property nativeContextMenu.</param>
		[JsMethod(Name = "initNativeContextMenu")]
		public void InitNativeContextMenu(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property postProcess
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property postProcess.</param>
		[JsMethod(Name = "initPostProcess")]
		public void InitPostProcess(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property useUndoRedo
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property useUndoRedo.</param>
		[JsMethod(Name = "initUseUndoRedo")]
		public void InitUseUndoRedo(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts a horizontal ruler</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "insertHorizontalRuler")]
		public bool InsertHorizontalRuler() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts html content on the current selection</para>
		/// </summary>
		/// <param name="value">html content</param>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "insertHtml")]
		public bool InsertHtml(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts a hyperlink</para>
		/// </summary>
		/// <param name="url">URL for the image to be inserted</param>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "insertHyperLink")]
		public bool InsertHyperLink(string url) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Insert an image</para>
		/// </summary>
		/// <param name="attributes">Map of HTML attributes to apply</param>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "insertImage")]
		public bool InsertImage(object attributes) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Indents the current selection</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "insertIndent")]
		public bool InsertIndent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts an ordered list</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "insertOrderedList")]
		public bool InsertOrderedList() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Outdents the current selection</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "insertOutdent")]
		public bool InsertOutdent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts an unordered list</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "insertUnorderedList")]
		public bool InsertUnorderedList() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the editor for all gecko browsers into the state &#8220;invalid&#8221; to be
		/// able to re-initialize the editor with the next load of the iframe.</para>
		/// <para>This &#8220;invalid&#8221; state is necessary whenever the whole HtmlArea high-level
		/// widget is moved around to another container.</para>
		/// <para>Only implemented for Gecko browser.</para>
		/// </summary>
		[JsMethod(Name = "invalidateEditor")]
		public void InvalidateEditor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the document is in editable mode</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "isEditable")]
		public bool IsEditable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property insertLinebreakOnCtrlEnter equals true.</para>
		/// </summary>
		[JsMethod(Name = "isInsertLinebreakOnCtrlEnter")]
		public void IsInsertLinebreakOnCtrlEnter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property insertParagraphOnLinebreak equals true.</para>
		/// </summary>
		[JsMethod(Name = "isInsertParagraphOnLinebreak")]
		public void IsInsertParagraphOnLinebreak() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Service method to check if the component is already loaded.
		/// Overrides the base method.</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "isLoaded")]
		public bool IsLoaded() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property messengerMode equals true.</para>
		/// </summary>
		[JsMethod(Name = "isMessengerMode")]
		public void IsMessengerMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property nativeContextMenu equals true.</para>
		/// </summary>
		[JsMethod(Name = "isNativeContextMenu")]
		public void IsNativeContextMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the editor is ready to accept commands etc.</para>
		/// </summary>
		/// <returns>ready or not</returns>
		[JsMethod(Name = "isReady")]
		public bool IsReady() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property useUndoRedo equals true.</para>
		/// </summary>
		[JsMethod(Name = "isUseUndoRedo")]
		public void IsUseUndoRedo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Redo last undo</para>
		/// </summary>
		/// <returns>true if the redo command was executed successfully or #useUndoRedo is inactive</returns>
		[JsMethod(Name = "redo")]
		public bool Redo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Alias for setBackgroundColor(&#8220;transparent&#8221;);</para>
		/// </summary>
		/// <returns>if succeeded</returns>
		[JsMethod(Name = "removeBackgroundColor")]
		public bool RemoveBackgroundColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Alias for setBackgroundImage(null);</para>
		/// </summary>
		/// <returns>if succeeded</returns>
		[JsMethod(Name = "removeBackgroundImage")]
		public bool RemoveBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes all formatting styles on the current selection content and resets
		/// the font family and size to the default ones. See <see cref="DefaultFontSize"/>
		/// and <see cref="DefaultFontFamily"/>.</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "removeFormat")]
		public bool RemoveFormat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentType.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentType")]
		public void ResetContentType() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property defaultFontFamily.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDefaultFontFamily")]
		public void ResetDefaultFontFamily() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property defaultFontSize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDefaultFontSize")]
		public void ResetDefaultFontSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the content of the editor</para>
		/// </summary>
		[JsMethod(Name = "resetHtml")]
		public void ResetHtml() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property insertLinebreakOnCtrlEnter.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInsertLinebreakOnCtrlEnter")]
		public void ResetInsertLinebreakOnCtrlEnter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property insertParagraphOnLinebreak.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInsertParagraphOnLinebreak")]
		public void ResetInsertParagraphOnLinebreak() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property messengerMode.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMessengerMode")]
		public void ResetMessengerMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property nativeContextMenu.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNativeContextMenu")]
		public void ResetNativeContextMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property postProcess.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPostProcess")]
		public void ResetPostProcess() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the current saved range.</para>
		/// </summary>
		[JsMethod(Name = "resetSavedRange")]
		public void ResetSavedRange() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property useUndoRedo.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUseUndoRedo")]
		public void ResetUseUndoRedo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Saves the current range to let the next command operate on this range.
		/// Currently only interesting for IE browsers, since they loose the range /
		/// selection whenever an element is clicked which need to have a focus (e.g.
		/// a textfield widget).</para>
		/// <para>NOTE: the next executed command will reset this range.</para>
		/// </summary>
		[JsMethod(Name = "saveRange")]
		public void SaveRange() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects the whole content</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "selectAll")]
		public bool SelectAll() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the background color of the editor</para>
		/// </summary>
		/// <param name="value">color</param>
		/// <returns>if succeeded</returns>
		[JsMethod(Name = "setBackgroundColor")]
		public bool SetBackgroundColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Inserts an background image</para>
		/// </summary>
		/// <param name="url">url of the background image to set</param>
		/// <param name="repeat">repeat mode. Possible values are &#8220;repeat|repeat-x|repeat-y|no-repeat&#8221;. Default value is &#8220;no-repeat&#8221;</param>
		/// <param name="position">Position of the background image. Possible values are &#8221;|top|bottom|center|left|right|right top|left top|left bottom|right bottom&#8221; or an array consisting of two values for x and y coordinate. Both values have to define the unit e.g. &#8220;px&#8221; or &#8221;%&#8221;. Default value is &#8220;top&#8221;</param>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setBackgroundImage")]
		public bool SetBackgroundImage(string url, string repeat, string position = "Array") { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the current selection content to bold font style</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setBold")]
		public bool SetBold() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentType.</para>
		/// </summary>
		/// <param name="value">New value for property contentType.</param>
		[JsMethod(Name = "setContentType")]
		public void SetContentType(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property defaultFontFamily.</para>
		/// </summary>
		/// <param name="value">New value for property defaultFontFamily.</param>
		[JsMethod(Name = "setDefaultFontFamily")]
		public void SetDefaultFontFamily(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property defaultFontSize.</para>
		/// </summary>
		/// <param name="value">New value for property defaultFontSize.</param>
		[JsMethod(Name = "setDefaultFontSize")]
		public void SetDefaultFontSize(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the document is in editable mode</para>
		/// </summary>
		/// <param name="value">Current value</param>
		[JsMethod(Name = "setEditable")]
		public void SetEditable(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the current selection content to the specified font family</para>
		/// </summary>
		/// <param name="value">Font family</param>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setFontFamily")]
		public bool SetFontFamily(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the current selection content to the specified font size</para>
		/// </summary>
		/// <param name="value">Font size</param>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setFontSize")]
		public bool SetFontSize(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property insertLinebreakOnCtrlEnter.</para>
		/// </summary>
		/// <param name="value">New value for property insertLinebreakOnCtrlEnter.</param>
		[JsMethod(Name = "setInsertLinebreakOnCtrlEnter")]
		public void SetInsertLinebreakOnCtrlEnter(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property insertParagraphOnLinebreak.</para>
		/// </summary>
		/// <param name="value">New value for property insertParagraphOnLinebreak.</param>
		[JsMethod(Name = "setInsertParagraphOnLinebreak")]
		public void SetInsertParagraphOnLinebreak(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the current selection content to italic font style</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setItalic")]
		public bool SetItalic() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Center-justifies the current selection</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setJustifyCenter")]
		public bool SetJustifyCenter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Full-justifies the current selection</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setJustifyFull")]
		public bool SetJustifyFull() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Left-justifies the current selection</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setJustifyLeft")]
		public bool SetJustifyLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Right-justifies the current selection</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setJustifyRight")]
		public bool SetJustifyRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property messengerMode.</para>
		/// </summary>
		/// <param name="value">New value for property messengerMode.</param>
		[JsMethod(Name = "setMessengerMode")]
		public void SetMessengerMode(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property nativeContextMenu.</para>
		/// </summary>
		/// <param name="value">New value for property nativeContextMenu.</param>
		[JsMethod(Name = "setNativeContextMenu")]
		public void SetNativeContextMenu(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property postProcess.</para>
		/// </summary>
		/// <param name="value">New value for property postProcess.</param>
		[JsMethod(Name = "setPostProcess")]
		public void SetPostProcess(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the current selection content to strikethrough font style</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setStrikeThrough")]
		public bool SetStrikeThrough() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the current selection content to the specified background color</para>
		/// </summary>
		/// <param name="value">Color value (supported are Hex,</param>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setTextBackgroundColor")]
		public bool SetTextBackgroundColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the current selection content to the specified font color</para>
		/// </summary>
		/// <param name="value">Color value (supported are Hex,</param>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setTextColor")]
		public bool SetTextColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the current selection content to underline font style</para>
		/// </summary>
		/// <returns>Success of operation</returns>
		[JsMethod(Name = "setUnderline")]
		public bool SetUnderline() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property useUndoRedo.</para>
		/// </summary>
		/// <param name="value">New value for property useUndoRedo.</param>
		[JsMethod(Name = "setUseUndoRedo")]
		public void SetUseUndoRedo(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Setting the value of the editor</para>
		/// </summary>
		/// <param name="value">new content to set</param>
		[JsMethod(Name = "setValue")]
		public void SetValue(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property insertLinebreakOnCtrlEnter.</para>
		/// </summary>
		[JsMethod(Name = "toggleInsertLinebreakOnCtrlEnter")]
		public void ToggleInsertLinebreakOnCtrlEnter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property insertParagraphOnLinebreak.</para>
		/// </summary>
		[JsMethod(Name = "toggleInsertParagraphOnLinebreak")]
		public void ToggleInsertParagraphOnLinebreak() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property messengerMode.</para>
		/// </summary>
		[JsMethod(Name = "toggleMessengerMode")]
		public void ToggleMessengerMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property nativeContextMenu.</para>
		/// </summary>
		[JsMethod(Name = "toggleNativeContextMenu")]
		public void ToggleNativeContextMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property useUndoRedo.</para>
		/// </summary>
		[JsMethod(Name = "toggleUseUndoRedo")]
		public void ToggleUseUndoRedo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Undo last operation</para>
		/// </summary>
		/// <returns>true if the undo command was executed successfully or #useUndoRedo is inactive</returns>
		[JsMethod(Name = "undo")]
		public bool Undo() { throw new NotImplementedException(); }

		#endregion Methods
    }
}