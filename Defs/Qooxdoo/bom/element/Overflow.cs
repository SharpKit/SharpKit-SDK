// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.element
{
    /// <summary>
	/// <para>Contains methods to control and query the element&#8217;s overflow properties.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.element.Overflow", OmitOptionalParameters = true, Export = false)]
    public partial class Overflow 
    {
		#region Methods

		public Overflow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Compiles the horizontal overflow property into a cross-browser style string.</para>
		/// </summary>
		/// <param name="value">Overflow value</param>
		/// <returns>CSS string</returns>
		[JsMethod(Name = "compileX")]
		public static string CompileX(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Compiles the vertical overflow property into a cross-browser style string.</para>
		/// </summary>
		/// <param name="value">Overflow value</param>
		/// <returns>CSS string</returns>
		[JsMethod(Name = "compileY")]
		public static string CompileY(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the typical native scrollbar size in the environment</para>
		/// </summary>
		/// <returns>The native scrollbar size</returns>
		[JsMethod(Name = "getScrollbarWidth")]
		public static double GetScrollbarWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the computed value of the horizontal overflow</para>
		/// </summary>
		/// <param name="element">DOM element to query</param>
		/// <param name="mode">Choose one of the modes qx.bom.element.Style#COMPUTED_MODE, qx.bom.element.Style#CASCADED_MODE, qx.bom.element.Style#LOCAL_MODE. The computed mode is the default one.</param>
		/// <returns>computed overflow value</returns>
		[JsMethod(Name = "getX")]
		public static string GetX(qx.html.Element element, double mode) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the computed value of the vertical overflow</para>
		/// </summary>
		/// <param name="element">DOM element to query</param>
		/// <param name="mode">Choose one of the modes qx.bom.element.Style#COMPUTED_MODE, qx.bom.element.Style#CASCADED_MODE, qx.bom.element.Style#LOCAL_MODE. The computed mode is the default one.</param>
		/// <returns>computed overflow value</returns>
		[JsMethod(Name = "getY")]
		public static string GetY(qx.html.Element element, double mode) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the locally configured horizontal overflow property</para>
		/// </summary>
		/// <param name="element">DOM element to modify</param>
		[JsMethod(Name = "resetX")]
		public static void ResetX(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the locally configured vertical overflow property</para>
		/// </summary>
		/// <param name="element">DOM element to modify</param>
		[JsMethod(Name = "resetY")]
		public static void ResetY(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the local horizontal overflow value to the given value</para>
		/// </summary>
		/// <param name="element">DOM element to modify</param>
		/// <param name="value">Any of &#8220;visible&#8221;, &#8220;scroll&#8221;, &#8220;hidden&#8221;, &#8220;auto&#8221; or &#8221;&#8221;</param>
		[JsMethod(Name = "setX")]
		public static void SetX(qx.html.Element element, string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the local vertical overflow value to the given value</para>
		/// </summary>
		/// <param name="element">DOM element to modify</param>
		/// <param name="value">Any of &#8220;visible&#8221;, &#8220;scroll&#8221;, &#8220;hidden&#8221;, &#8220;auto&#8221; or &#8221;&#8221;</param>
		[JsMethod(Name = "setY")]
		public static void SetY(qx.html.Element element, string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}