// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.element
{
    /// <summary>
	/// <para>Powerful creation and update features for images used for decoration
	/// purposes like for rounded borders, icons, etc.</para>
	/// <para>Includes support for image clipping, PNG alpha channel support, additional
	/// repeat options like scale-x or scale-y.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.element.Decoration", OmitOptionalParameters = true, Export = false)]
    public partial class Decoration 
    {
		#region Methods

		public Decoration() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates the HTML for a decorator image element with the given options.</para>
		/// </summary>
		/// <param name="source">Any valid URI</param>
		/// <param name="repeat">One of scale-x, scale-y, scale, repeat, repeat-x, repeat-y, repeat</param>
		/// <param name="style">Additional styles to apply</param>
		/// <returns>Decorator image HTML</returns>
		[JsMethod(Name = "create")]
		public static string Create(string source, string repeat, object style) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method is used to collect all needed attributes for
		/// the tag name detected by <see cref="GetTagName"/>.</para>
		/// </summary>
		/// <param name="source">Image source</param>
		/// <param name="repeat">Repeat mode of the image</param>
		/// <param name="style">Additional styles to apply</param>
		/// <returns>Markup for image</returns>
		[JsMethod(Name = "getAttributes")]
		public static string GetAttributes(string source, string repeat, object style) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Translates the given repeat option to a tag name. Useful
		/// for systems which depends on early information of the tag
		/// name to prepare element like <see cref="qx.html.Image"/>.</para>
		/// </summary>
		/// <param name="repeat">One of scale-x, scale-y, scale, repeat, repeat-x, repeat-y, repeat</param>
		/// <param name="source">Source used to identify the image format</param>
		/// <returns>The tag name: div or img</returns>
		[JsMethod(Name = "getTagName")]
		public static string GetTagName(string repeat, string source = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>For IE browsers the alpha image loader might be necessary. This accessor
		/// method provides an API for high-level classes to check if the alpha image
		/// loader is enabled.</para>
		/// </summary>
		/// <returns>true when the AlphaImageLoader is used, false otherwise.</returns>
		[JsMethod(Name = "isAlphaImageLoaderEnabled")]
		public static bool IsAlphaImageLoaderEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Updates the element to display the given source
		/// with the repeat option.</para>
		/// </summary>
		/// <param name="element">DOM element to update</param>
		/// <param name="source">Any valid URI</param>
		/// <param name="repeat">One of scale-x, scale-y, scale, repeat, repeat-x, repeat-y, repeat</param>
		/// <param name="style">Additional styles to apply</param>
		[JsMethod(Name = "update")]
		public static void Update(qx.html.Element element, string source, string repeat, object style) { throw new NotImplementedException(); }

		#endregion Methods
    }
}