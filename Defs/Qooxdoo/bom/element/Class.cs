// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom.element
{
    /// <summary>
	/// <para>CSS class name support for HTML elements. Supports multiple class names
	/// for each element. Can query and apply class names to HTML elements.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.element.Class", OmitOptionalParameters = true, Export = false)]
    public partial class Class 
    {
		#region Methods

		public Class() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a className to the given element
		/// If successfully added the given className will be returned</para>
		/// </summary>
		/// <param name="element">The element to modify</param>
		/// <param name="name">The class name to add</param>
		/// <returns>The added classname (if so)</returns>
		[JsMethod(Name = "add")]
		public static string Add(qx.html.Element element, string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds multiple classes to the given element</para>
		/// </summary>
		/// <param name="element">DOM element to modify</param>
		/// <param name="classes">List of classes to add.</param>
		/// <returns>The resulting class name which was applied</returns>
		[JsMethod(Name = "addClasses")]
		public static string AddClasses(qx.html.Element element, string classes) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Gets the classname of the given element</para>
		/// </summary>
		/// <param name="element">The element to query</param>
		/// <returns>The retrieved classname</returns>
		[JsMethod(Name = "get")]
		public static string Get(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given element has the given className.</para>
		/// </summary>
		/// <param name="element">The DOM element to check</param>
		/// <param name="name">The class name to check for</param>
		/// <returns>true when the element has the given classname</returns>
		[JsMethod(Name = "has")]
		public static bool Has(qx.html.Element element, string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes a className from the given element</para>
		/// </summary>
		/// <param name="element">The DOM element to modify</param>
		/// <param name="name">The class name to remove</param>
		/// <returns>The removed class name</returns>
		[JsMethod(Name = "remove")]
		public static string Remove(qx.html.Element element, string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes multiple classes from the given element</para>
		/// </summary>
		/// <param name="element">DOM element to modify</param>
		/// <param name="classes">List of classes to remove.</param>
		/// <returns>The resulting class name which was applied</returns>
		[JsMethod(Name = "removeClasses")]
		public static string RemoveClasses(qx.html.Element element, string classes) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Replaces the first given class name with the second one</para>
		/// </summary>
		/// <param name="element">The DOM element to modify</param>
		/// <param name="oldName">The class name to remove</param>
		/// <param name="newName">The class name to add</param>
		/// <returns>The added class name</returns>
		[JsMethod(Name = "replace")]
		public static string Replace(qx.html.Element element, string oldName, string newName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles a className of the given element</para>
		/// </summary>
		/// <param name="element">The DOM element to modify</param>
		/// <param name="name">The class name to toggle</param>
		/// <param name="toggle">Whether to switch class on/off. Without the parameter an automatic toggling would happen.</param>
		/// <returns>The class name</returns>
		[JsMethod(Name = "toggle")]
		public static string Toggle(qx.html.Element element, string name, bool? toggle = null) { throw new NotImplementedException(); }

		#endregion Methods
    }
}