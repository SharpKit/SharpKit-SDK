// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.bom
{
    /// <summary>
	/// <para>Cross browser abstractions to work with labels.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.bom.Label", OmitOptionalParameters = true, Export = false)]
    public partial class Label 
    {
		#region Methods

		public Label() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates a label.</para>
		/// <para>The default mode is &#8216;text&#8217; which means that the overlapping text is cut off
		/// using ellipsis automatically. Text wrapping is disabled in this mode
		/// as well. Spaces are normalized. Umlauts and other special symbols are only
		/// allowed in unicode mode as normal characters.</para>
		/// <para>In the HTML mode you can insert any HTML, but loose the capability to cut
		/// of overlapping text. Automatic text wrapping is enabled by default.</para>
		/// <para>It is not possible to modify the mode afterwards.</para>
		/// </summary>
		/// <param name="content">Content of the label</param>
		/// <param name="html">Whether HTML markup should be used.</param>
		/// <param name="win">Window to create the element for</param>
		/// <returns>The created iframe node</returns>
		[JsMethod(Name = "create")]
		public static qx.html.Element Create(string content, bool html = false, Window win = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the preferred dimensions of the given HTML content.</para>
		/// </summary>
		/// <param name="content">The HTML markup to measure</param>
		/// <param name="styles">Optional styles to apply</param>
		/// <param name="width">To support width for height it is possible to limit the width</param>
		/// <returns>A map with preferred width and height.</returns>
		[JsMethod(Name = "getHtmlSize")]
		public static object GetHtmlSize(string content, object styles = null, double? width = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the preferred dimensions of the given text.</para>
		/// </summary>
		/// <param name="text">The text to measure</param>
		/// <param name="styles">Optional styles to apply</param>
		/// <returns>A map with preferred width and height.</returns>
		[JsMethod(Name = "getTextSize")]
		public static object GetTextSize(string text, object styles) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the content of the element.</para>
		/// </summary>
		/// <param name="element">DOM element to query.</param>
		/// <returns>Content stored in the element.</returns>
		[JsMethod(Name = "getValue")]
		public static string GetValue(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the content of the element.</para>
		/// <para>The possibilities of the value depends on the mode
		/// defined using <see cref="Create"/>.</para>
		/// </summary>
		/// <param name="element">DOM element to modify.</param>
		/// <param name="value">Content to insert.</param>
		[JsMethod(Name = "setValue")]
		public static void SetValue(qx.html.Element element, string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}