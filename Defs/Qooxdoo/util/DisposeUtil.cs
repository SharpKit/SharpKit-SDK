// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>Methods to cleanup fields from maps/objects.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.DisposeUtil", OmitOptionalParameters = true, Export = false)]
    public partial class DisposeUtil 
    {
		#region Methods

		public DisposeUtil() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Destroys a container and all of its children recursivly.</para>
		/// </summary>
		/// <param name="container">Container to be destroyed</param>
		[JsMethod(Name = "destroyContainer")]
		public static void DestroyContainer(object container) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Disposes all members of the given array and deletes
		/// the field which refers to the array afterwards.</para>
		/// </summary>
		/// <param name="obj">Object which contains the field</param>
		/// <param name="field">Name of the field which refers to the array</param>
		[JsMethod(Name = "disposeArray")]
		public static void DisposeArray(object obj, string field) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Disposes all members of the given map and deletes
		/// the field which refers to the map afterwards.</para>
		/// </summary>
		/// <param name="obj">Object which contains the field</param>
		/// <param name="field">Name of the field which refers to the array</param>
		[JsMethod(Name = "disposeMap")]
		public static void DisposeMap(object obj, string field) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Disconnects and disposes given objects from instance.
		/// Only works with qx.core.Object based objects e.g. Widgets.</para>
		/// </summary>
		/// <param name="obj">Object which contains the fields</param>
		/// <param name="arr">List of fields (which store objects) to dispose</param>
		/// <param name="disposeSingletons">true, if singletons should be disposed</param>
		[JsMethod(Name = "disposeObjects")]
		public static void DisposeObjects(object obj, JsArray arr, bool disposeSingletons) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Disposes a given object when another object is disposed</para>
		/// </summary>
		/// <param name="disposeMe">Object to dispose when other object is disposed</param>
		/// <param name="trigger">Other object</param>
		[JsMethod(Name = "disposeTriggeredBy")]
		public static void DisposeTriggeredBy(object disposeMe, object trigger) { throw new NotImplementedException(); }

		#endregion Methods
    }
}