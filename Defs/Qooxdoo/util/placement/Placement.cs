// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util.placement
{
    /// <summary>
	/// <para>Contains methods to compute a position for any object which should
	/// be positioned relative to another object.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.placement.Placement", OmitOptionalParameters = true, Export = false)]
    public partial class Placement : qx.core.Object
    {
		#region Properties

		/// <summary>
		/// <para>Specify with which edge of the target object, the object should be aligned</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "top","right","bottom","left","center","middle"
		/// </remarks>
		[JsProperty(Name = "align", NativeField = true)]
		public object Align { get; set; }

		/// <summary>
		/// <para>The axis object to use for the horizontal placement</para>
		/// </summary>
		[JsProperty(Name = "axisX", NativeField = true)]
		public Class AxisX { get; set; }

		/// <summary>
		/// <para>The axis object to use for the vertical placement</para>
		/// </summary>
		[JsProperty(Name = "axisY", NativeField = true)]
		public Class AxisY { get; set; }

		/// <summary>
		/// <para>Specify to which edge of the target object, the object should be attached</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "top","right","bottom","left"
		/// </remarks>
		[JsProperty(Name = "edge", NativeField = true)]
		public object Edge { get; set; }

		#endregion Properties

		#region Methods

		public Placement() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>DOM and widget independent method to compute the location
		/// of an object to make it relative to any other object.</para>
		/// </summary>
		/// <param name="size">With the keys width and height of the object to align</param>
		/// <param name="area">Available area to position the object. Has the keys width and height. Normally this is the parent object of the one to align.</param>
		/// <param name="target">Location of the object to align the object to. This map should have the keys left, top, right and bottom.</param>
		/// <param name="offsets">Map with all offsets for each direction. Comes with the keys left, top, right and bottom.</param>
		/// <returns>A map with the final location stored in the keys left and top.</returns>
		[JsMethod(Name = "compute")]
		public object Compute(object size, object area, object target, object offsets) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property align.</para>
		/// </summary>
		[JsMethod(Name = "getAlign")]
		public object GetAlign() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property axisX.</para>
		/// </summary>
		[JsMethod(Name = "getAxisX")]
		public Class GetAxisX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property axisY.</para>
		/// </summary>
		[JsMethod(Name = "getAxisY")]
		public Class GetAxisY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property edge.</para>
		/// </summary>
		[JsMethod(Name = "getEdge")]
		public object GetEdge() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property align
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property align.</param>
		[JsMethod(Name = "initAlign")]
		public void InitAlign(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property axisX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property axisX.</param>
		[JsMethod(Name = "initAxisX")]
		public void InitAxisX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property axisY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property axisY.</param>
		[JsMethod(Name = "initAxisY")]
		public void InitAxisY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property edge
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property edge.</param>
		[JsMethod(Name = "initEdge")]
		public void InitEdge(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property align.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlign")]
		public void ResetAlign() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property axisX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAxisX")]
		public void ResetAxisX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property axisY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAxisY")]
		public void ResetAxisY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property edge.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetEdge")]
		public void ResetEdge() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property align.</para>
		/// </summary>
		/// <param name="value">New value for property align.</param>
		[JsMethod(Name = "setAlign")]
		public void SetAlign(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property axisX.</para>
		/// </summary>
		/// <param name="value">New value for property axisX.</param>
		[JsMethod(Name = "setAxisX")]
		public void SetAxisX(Class value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property axisY.</para>
		/// </summary>
		/// <param name="value">New value for property axisY.</param>
		[JsMethod(Name = "setAxisY")]
		public void SetAxisY(Class value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property edge.</para>
		/// </summary>
		/// <param name="value">New value for property edge.</param>
		[JsMethod(Name = "setEdge")]
		public void SetEdge(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>DOM and widget independent method to compute the location
		/// of an object to make it relative to any other object.</para>
		/// </summary>
		/// <param name="size">With the keys width and height of the object to align</param>
		/// <param name="area">Available area to position the object. Has the keys width and height. Normally this is the parent object of the one to align.</param>
		/// <param name="target">Location of the object to align the object to. This map should have the keys left, top, right and bottom.</param>
		/// <param name="offsets">Map with all offsets for each direction. Comes with the keys left, top, right and bottom.</param>
		/// <param name="position">Alignment of the object on the target, any of &#8220;top-left&#8221;, &#8220;top-center&#8221;, &#8220;top-right&#8221;, &#8220;bottom-left&#8221;, &#8220;bottom-center&#8221;, &#8220;bottom-right&#8221;, &#8220;left-top&#8221;, &#8220;left-middle&#8221;, &#8220;left-bottom&#8221;, &#8220;right-top&#8221;, &#8220;right-middle&#8221;, &#8220;right-bottom&#8221;.</param>
		/// <param name="modeX">Horizontal placement mode. Valid values are:  direct: place the object directly at the given location. keep-align: if parts of the object is outside of the visible area it is moved to the best fitting &#8216;edge&#8217; and &#8216;alignment&#8217; of the target. It is guaranteed the the new position attaches the object to one of the target edges and that that is aligned with a target edge. best-fit: If parts of the object are outside of the visible area it is moved into the view port ignoring any offset, and position values. </param>
		/// <param name="modeY">Vertical placement mode. Accepts the same values as the &#8216;modeX&#8217; argument.</param>
		/// <returns>A map with the final location stored in the keys left and top.</returns>
		[JsMethod(Name = "compute")]
		public static object ComputeS(object size, object area, object target, object offsets, string position, string modeX, string modeY) { throw new NotImplementedException(); }

		#endregion Methods
    }
}