// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util.fsm
{
    /// <summary>
	/// <para>Create a new possible transition from one state to another.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.fsm.Transition", OmitOptionalParameters = true, Export = false)]
    public partial class Transition : qx.core.Object
    {
		#region Properties

		/// <summary>
		/// <para>Automatic actions to take immediately after calling the transition&#8217;s
		/// ontransition function.  This is documented in the constructor, and is
		/// typically provided through the constructor&#8217;s transitionInfo object, but
		/// it is also possible (but highly NOT recommended) to change this
		/// dynamically.</para>
		/// </summary>
		[JsProperty(Name = "autoActionsAfterOntransition", NativeField = true)]
		public object AutoActionsAfterOntransition { get; set; }

		/// <summary>
		/// <para>Automatic actions to take prior to calling the transition&#8217;s
		/// ontransition function.  This is documented in the constructor, and is
		/// typically provided through the constructor&#8217;s transitionInfo object, but
		/// it is also possible (but highly NOT recommended) to change this
		/// dynamically.</para>
		/// </summary>
		[JsProperty(Name = "autoActionsBeforeOntransition", NativeField = true)]
		public object AutoActionsBeforeOntransition { get; set; }

		/// <summary>
		/// <para>The name of this transition</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "name", NativeField = true)]
		public string Name { get; set; }

		/// <summary>
		/// <para>The state to transition to, if the predicate determines that this
		/// transition is acceptable.  This is documented in the constructor, and
		/// is typically provided through the constructor&#8217;s transitionInfo object,
		/// but it is also possible (but highly NOT recommended) to change this
		/// dynamically.</para>
		/// </summary>
		[JsProperty(Name = "nextState", NativeField = true)]
		public object NextState { get; set; }

		/// <summary>
		/// <para>The function run when the transition is accepted.  This is documented
		/// in the constructor, and is typically provided through the constructor&#8217;s
		/// transitionInfo object, but it is also possible (but highly NOT
		/// recommended) to change this dynamically.</para>
		/// </summary>
		[JsProperty(Name = "ontransition", NativeField = true)]
		public object Ontransition { get; set; }

		/// <summary>
		/// <para>The predicate function for this transition.  This is documented in the
		/// constructor, and is typically provided through the constructor&#8217;s
		/// transitionInfo object, but it is also possible (but highly NOT
		/// recommended) to change this dynamically.</para>
		/// </summary>
		[JsProperty(Name = "predicate", NativeField = true)]
		public object Predicate { get; set; }

		#endregion Properties

		#region Methods

		public Transition() { throw new NotImplementedException(); }

		/// <param name="transitionName">The name of this transition, used in debug messages.</param>
		/// <param name="transitionInfo"> An object optionally containing any of the following properties:  context - A context in which all of the following functions should be run.  predicate - A function which is called to determine whether this transition is acceptable.  An acceptable transition will cause the transition's "ontransition" function to be run, the current state's "onexit" function to be run, and the new state's "onentry" function to be run.  The predicate function's signature is function(fsm, event) and it is saved in the predicate property of the transition object.  In the predicate function:  fsm - The finite state machine object to which this state is attached.  event - The event that caused a run of the finite state machine  The predicate function should return one of the following three values:  - true means the transition is acceptable  - false means the transition is not acceptable, and the next transition (if one exists) should be tried to determine if it is acceptable  - null means that the transition determined that no further transitions should be tried.  This might be used when the transition ascertained that the event is for a target that is not available in the current state, and the event has called fsm.queueEvent() to have the event delivered upon state transition.  It is possible to create a default predicate -- one that will cause a transition to be acceptable always -- by either not providing a predicate property, or by explicitely either setting the predicate property to 'true' or setting it to a function that unconditionally returns 'true'.  This default transition should, of course, always be the last transition added to a state, since no transition added after it will ever be tried.  nextState - The state to which we transition, if the predicate returns true (meaning the transition is acceptable).  The value of nextState may be:  - a string, the state name of the state to transition to  - One of the constants: - qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE: Remain in whatever is the current state - qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK: Transition to the state at the top of the saved-state stack, and remove the top element from the saved-state stack.  Elements are added to the saved-state stack using fsm.pushState().  It is an error if no state exists on the saved-state stack. - qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE: TBD  autoActionsBeforeOntransition - autoActionsAfterOntransition - Automatic actions which take place at the time specified by the property name.  In all cases, the action takes place immediately before or after the specified function.  The property value for each of these properties is an object which describes some number of functions to invoke on a set of specified objects (typically widgets).  See qx.util.fsm.State for an example of autoActions.  ontransition - A function which is called if the predicate function for this transition returns true.  Its signature is function(fsm, event) and it is saved in the ontransition property of the transition object. In the ontransition function:  fsm - The finite state machine object to which this state is attached.  event - The event that caused a run of the finite state machine  Additional properties may be provided in transInfo.  They will not be used by the finite state machine, but will be available via this.getUserData("") during the transition's predicate and ontransition functions. </param>
		public Transition(string transitionName, object transitionInfo) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property autoActionsAfterOntransition.</para>
		/// </summary>
		[JsMethod(Name = "getAutoActionsAfterOntransition")]
		public object GetAutoActionsAfterOntransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property autoActionsBeforeOntransition.</para>
		/// </summary>
		[JsMethod(Name = "getAutoActionsBeforeOntransition")]
		public object GetAutoActionsBeforeOntransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property name.</para>
		/// </summary>
		[JsMethod(Name = "getName")]
		public string GetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property nextState.</para>
		/// </summary>
		[JsMethod(Name = "getNextState")]
		public object GetNextState() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property ontransition.</para>
		/// </summary>
		[JsMethod(Name = "getOntransition")]
		public object GetOntransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property predicate.</para>
		/// </summary>
		[JsMethod(Name = "getPredicate")]
		public object GetPredicate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property autoActionsAfterOntransition
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property autoActionsAfterOntransition.</param>
		[JsMethod(Name = "initAutoActionsAfterOntransition")]
		public void InitAutoActionsAfterOntransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property autoActionsBeforeOntransition
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property autoActionsBeforeOntransition.</param>
		[JsMethod(Name = "initAutoActionsBeforeOntransition")]
		public void InitAutoActionsBeforeOntransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property name
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property name.</param>
		[JsMethod(Name = "initName")]
		public void InitName(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property nextState
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property nextState.</param>
		[JsMethod(Name = "initNextState")]
		public void InitNextState(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property ontransition
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property ontransition.</param>
		[JsMethod(Name = "initOntransition")]
		public void InitOntransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property predicate
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property predicate.</param>
		[JsMethod(Name = "initPredicate")]
		public void InitPredicate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property autoActionsAfterOntransition.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAutoActionsAfterOntransition")]
		public void ResetAutoActionsAfterOntransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property autoActionsBeforeOntransition.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAutoActionsBeforeOntransition")]
		public void ResetAutoActionsBeforeOntransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property name.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetName")]
		public void ResetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property nextState.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNextState")]
		public void ResetNextState() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property ontransition.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOntransition")]
		public void ResetOntransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property predicate.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPredicate")]
		public void ResetPredicate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property autoActionsAfterOntransition.</para>
		/// </summary>
		/// <param name="value">New value for property autoActionsAfterOntransition.</param>
		[JsMethod(Name = "setAutoActionsAfterOntransition")]
		public void SetAutoActionsAfterOntransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property autoActionsBeforeOntransition.</para>
		/// </summary>
		/// <param name="value">New value for property autoActionsBeforeOntransition.</param>
		[JsMethod(Name = "setAutoActionsBeforeOntransition")]
		public void SetAutoActionsBeforeOntransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property name.</para>
		/// </summary>
		/// <param name="value">New value for property name.</param>
		[JsMethod(Name = "setName")]
		public void SetName(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property nextState.</para>
		/// </summary>
		/// <param name="value">New value for property nextState.</param>
		[JsMethod(Name = "setNextState")]
		public void SetNextState(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property ontransition.</para>
		/// </summary>
		/// <param name="value">New value for property ontransition.</param>
		[JsMethod(Name = "setOntransition")]
		public void SetOntransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property predicate.</para>
		/// </summary>
		/// <param name="value">New value for property predicate.</param>
		[JsMethod(Name = "setPredicate")]
		public void SetPredicate(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}