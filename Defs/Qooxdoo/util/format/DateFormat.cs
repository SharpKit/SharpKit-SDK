// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util.format
{
    /// <summary>
	/// <para>A formatter and parser for dates, see
	/// http://www.unicode.org/reports/tr35/#Date_Format_Patterns</para>
	/// <para>Here is a quick overview of the format pattern keys:
	/// 
	/// Key &nbsp;Description
	///  G  era, e.g. &#8220;AD&#8221;
	///  y  year
	///  Y  week year
	///  u  extended year [Not supported yet]
	///  Q  quarter
	///  q  stand-alone quarter
	///  M  month
	///  L  stand-alone month
	///  I  chinese leap month [Not supported yet]
	///  w  week of year
	///  W  week of month
	///  d  day of month
	///  D  day of year
	///  F  day of week in month [Not supported yet]
	///  g  modified Julian day [Not supported yet]
	///  E  day of week
	///  e  local day of week
	///  c  stand-alone local day of week
	///  a  period of day (am or pm)
	///  h  12-hour hour
	///  H  24-hour hour
	///  K  hour [0-11]
	///  k  hour [1-24]
	///  j  special symbol [Not supported yet]
	///  m  minute
	///  s  second
	///  S  fractional second
	///  A  millisecond in day [Not supported yet]
	///  z  time zone, specific non-location format
	///  Z  time zone, rfc822/gmt format
	///  v  time zone, generic non-location format [Not supported yet]
	///  V  time zone, like z except metazone abbreviations [Not supported yet]
	/// </para>
	/// <para>(This list is preliminary, not all format keys might be implemented). Most
	/// keys support repetitions that influence the meaning of the format. Parts of the
	/// format string that should not be interpreted as format keys have to be
	/// single-quoted.</para>
	/// <para>The same format patterns will be used for both parsing and output formatting.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.format.DateFormat", OmitOptionalParameters = true, Export = false)]
    public partial class DateFormat : qx.core.Object, qx.util.format.IFormat
    {
		#region Properties

		/// <summary>
		/// <para>The locale used in this DateFormat instance</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "locale", NativeField = true)]
		public string Locale { get; set; }

		#endregion Properties

		#region Methods

		public DateFormat() { throw new NotImplementedException(); }

		/// <param name="format">The format to use. If null, the locale&#8217;s default format is used.</param>
		/// <param name="locale">optional locale to be used. In case this is not present, the #locale property of DateFormat will be following the qx.locale.Manager#locale property of qx.locale.Manager</param>
		public DateFormat(string format, string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Formats an object.</para>
		/// </summary>
		/// <param name="obj">The object to format.</param>
		/// <returns>the formatted object.</returns>
		[JsMethod(Name = "format")]
		public string Format(object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property locale.</para>
		/// </summary>
		[JsMethod(Name = "getLocale")]
		public string GetLocale() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property locale
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property locale.</param>
		[JsMethod(Name = "initLocale")]
		public void InitLocale(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Parses an object.</para>
		/// </summary>
		/// <param name="str">the string to parse.</param>
		/// <returns>the parsed object.</returns>
		[JsMethod(Name = "parse")]
		public object Parse(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property locale.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLocale")]
		public void ResetLocale() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property locale.</para>
		/// </summary>
		/// <param name="value">New value for property locale.</param>
		[JsMethod(Name = "setLocale")]
		public void SetLocale(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Convenience factory that returns a DateFomat instance that
		/// uses a short date-only format. Beware that the overall layout of the
		/// date/time format string is that of the locale in effect when the factory
		/// function is called.</para>
		/// <para>Implemented as a quasi-singleton, so beware of side effects.</para>
		/// </summary>
		/// <returns>a DateFormat instance.</returns>
		[JsMethod(Name = "getDateInstance")]
		public static DateFormat GetDateInstance() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Convenience factory that returns a DateFomat instance that
		/// uses a long date/time format. Beware that the overall layout of the
		/// date/time format string is that of the locale in effect when the factory
		/// function is called.</para>
		/// <para>Implemented as a quasi-singleton, so beware of side effects.</para>
		/// </summary>
		/// <returns>a DateFormat instance.</returns>
		[JsMethod(Name = "getDateTimeInstance")]
		public static DateFormat GetDateTimeInstance() { throw new NotImplementedException(); }

		#endregion Methods
    }
}