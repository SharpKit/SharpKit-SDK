// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>A helper class for accessing the property system directly.</para>
	/// <para>This class is rather to be used internally. For all regular usage of the
	/// property system the default API should be sufficient.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.PropertyUtil", OmitOptionalParameters = true, Export = false)]
    public partial class PropertyUtil 
    {
		#region Methods

		public PropertyUtil() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Deletes the init value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		[JsMethod(Name = "deleteInitValue")]
		public static void DeleteInitValue(object objectx, string propertyName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Deletes the theme value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		[JsMethod(Name = "deleteThemeValue")]
		public static void DeleteThemeValue(object objectx, string propertyName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Deletes the user value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		[JsMethod(Name = "deleteUserValue")]
		public static void DeleteUserValue(object objectx, string propertyName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the property map of the given class including the properties of all
		/// superclasses!</para>
		/// </summary>
		/// <param name="clazz">a qooxdoo class</param>
		/// <returns>The properties map as defined in qx.Class#define including the properties of included mixins of the current class and all superclasses.</returns>
		[JsMethod(Name = "getAllProperties")]
		public static object GetAllProperties(Class clazz) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the init value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		/// <returns>The init value</returns>
		[JsMethod(Name = "getInitValue")]
		public static object GetInitValue(object objectx, string propertyName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the property map of the given class</para>
		/// </summary>
		/// <param name="clazz">a qooxdoo class</param>
		/// <returns>A properties map as defined in qx.Class#define including the properties of included mixins and not including refined properties.</returns>
		[JsMethod(Name = "getProperties")]
		public static object GetProperties(Class clazz) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the theme value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		/// <returns>The theme value</returns>
		[JsMethod(Name = "getThemeValue")]
		public static object GetThemeValue(object objectx, string propertyName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the user value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		/// <returns>The user value</returns>
		[JsMethod(Name = "getUserValue")]
		public static object GetUserValue(object objectx, string propertyName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets a themed property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		[JsMethod(Name = "resetThemed")]
		public static void ResetThemed(object objectx, string propertyName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the init value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		/// <param name="value">The value to set</param>
		[JsMethod(Name = "setInitValue")]
		public static void SetInitValue(object objectx, string propertyName, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets a themed property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		/// <param name="value">The value to set</param>
		[JsMethod(Name = "setThemed")]
		public static void SetThemed(object objectx, string propertyName, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the theme value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		/// <param name="value">The value to set</param>
		[JsMethod(Name = "setThemeValue")]
		public static void SetThemeValue(object objectx, string propertyName, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the given property</para>
		/// </summary>
		/// <param name="objectx">The object to access</param>
		/// <param name="propertyName">The name of the property</param>
		/// <param name="value">The value to set</param>
		[JsMethod(Name = "setUserValue")]
		public static void SetUserValue(object objectx, string propertyName, object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}