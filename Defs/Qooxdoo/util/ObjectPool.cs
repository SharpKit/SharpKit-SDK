// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>This class manages pooled Object instances.</para>
	/// <para>It exists mainly to minimise the amount of browser memory usage by reusing
	/// window instances after they have been closed.  However, it could equally be
	/// used to pool instances of any type of Object (expect singletons).</para>
	/// <para>It is the client&#8217;s responsibility to ensure that pooled objects are not
	/// referenced or used from anywhere else in the application.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.ObjectPool", OmitOptionalParameters = true, Export = false)]
    public partial class ObjectPool : qx.core.Object
    {
		#region Properties

		/// <summary>
		/// <para>Number of objects of each class, which are pooled.</para>
		/// <para>A size of &#8220;null&#8221; represents an unlimited pool.</para>
		/// </summary>
		[JsProperty(Name = "size", NativeField = true)]
		public double Size { get; set; }

		#endregion Properties

		#region Methods

		public ObjectPool() { throw new NotImplementedException(); }

		/// <param name="size">Size of each class pool</param>
		public ObjectPool(double size) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method finds and returns an instance of a requested type in the pool,
		/// if there is one.  Note that the pool determines which instance (if any) to
		/// return to the client.  The client cannot get a specific instance from the
		/// pool.</para>
		/// </summary>
		/// <param name="clazz">A reference to a class from which an instance should be created.</param>
		/// <returns>An instance of the requested type. If non existed in the pool a new one is transparently created and returned.</returns>
		[JsMethod(Name = "getObject")]
		public object GetObject(Class clazz) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property size.</para>
		/// </summary>
		[JsMethod(Name = "getSize")]
		public double GetSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property size
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property size.</param>
		[JsMethod(Name = "initSize")]
		public void InitSize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method places an Object in a pool of Objects of its type. Note that
		/// once an instance has been pooled, there is no means to get that exact
		/// instance back. The instance may be discarded for garbage collection if
		/// the pool of its type is already full.</para>
		/// <para>It is assumed that no other references exist to this Object, and that it will
		/// not be used at all while it is pooled.</para>
		/// </summary>
		/// <param name="obj">An Object instance to pool.</param>
		[JsMethod(Name = "poolObject")]
		public void PoolObject(object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property size.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSize")]
		public void ResetSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property size.</para>
		/// </summary>
		/// <param name="value">New value for property size.</param>
		[JsMethod(Name = "setSize")]
		public void SetSize(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}