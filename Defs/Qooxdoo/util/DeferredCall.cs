// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>This class represents a wrapper for functions, which should be called after
	/// the current thread of JavaScript has finished and the control is returned to
	/// the browser. The wrapped function will at most be called once after the control
	/// has been given back to the browser, independent of the number of <see cref="Call"/>
	/// calls.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.DeferredCall", OmitOptionalParameters = true, Export = false)]
    public partial class DeferredCall : qx.core.Object
    {
		#region Methods

		public DeferredCall() { throw new NotImplementedException(); }

		/// <param name="callback">The callback</param>
		/// <param name="context">the context in which the function will be called.</param>
		public DeferredCall(Action<object> callback, object context = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the callback directly.</para>
		/// </summary>
		[JsMethod(Name = "call")]
		public void Call() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Prevent the callback from being called.</para>
		/// </summary>
		[JsMethod(Name = "cancel")]
		public void Cancel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Issue a deferred call of the callback.</para>
		/// </summary>
		[JsMethod(Name = "schedule")]
		public void Schedule() { throw new NotImplementedException(); }

		#endregion Methods
    }
}