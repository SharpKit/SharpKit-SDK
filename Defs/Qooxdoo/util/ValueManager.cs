// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>Abstract base class for all managers of themed values.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.ValueManager", OmitOptionalParameters = true, Export = false)]
    public abstract partial class ValueManager : qx.core.Object
    {
		#region Methods

		public ValueManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether a value is interpreted dynamically</para>
		/// </summary>
		/// <param name="value">dynamically interpreted identifier</param>
		/// <returns>returns true if the value is interpreted dynamically</returns>
		[JsMethod(Name = "isDynamic")]
		public bool IsDynamic(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the dynamically interpreted result for the incoming value,
		/// (if available), otherwise returns the original value</para>
		/// </summary>
		/// <param name="value">Value to resolve</param>
		/// <returns>either returns the (translated) result of the incoming value or the value itself</returns>
		[JsMethod(Name = "resolve")]
		public object Resolve(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the dynamically interpreted result for the incoming value</para>
		/// </summary>
		/// <param name="value">dynamically interpreted identifier</param>
		/// <returns>return the (translated) result of the incoming value</returns>
		[JsMethod(Name = "resolveDynamic")]
		public object ResolveDynamic(string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}