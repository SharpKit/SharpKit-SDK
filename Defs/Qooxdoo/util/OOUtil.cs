// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>This class is a base class for the OO system defined by Class, Mixin
	/// and Interface. It contains helper which are basically needed to create the
	/// Classes which define the OO system.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.OOUtil", OmitOptionalParameters = true, Export = false)]
    public partial class OOUtil 
    {
		#region Methods

		public OOUtil() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given class exists</para>
		/// </summary>
		/// <param name="name">class name to check</param>
		/// <returns>true if class exists</returns>
		[JsMethod(Name = "classIsDefined")]
		public static bool ClassIsDefined(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the class or one of its super classes which contains the
		/// declaration of the given interface. Returns null if the interface is not
		/// specified anywhere.</para>
		/// </summary>
		/// <param name="clazz">class to look for the interface</param>
		/// <param name="iface">interface to look for</param>
		/// <returns>the class which directly implements the given interface</returns>
		[JsMethod(Name = "getByInterface")]
		public static Class GetByInterface(Class clazz, Interface iface) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the event type of the given event. Returns null if
		/// the event does not exist.</para>
		/// </summary>
		/// <param name="clazz">class to check</param>
		/// <param name="name">name of the event</param>
		/// <returns>Event type of the given event.</returns>
		[JsMethod(Name = "getEventType")]
		public static object GetEventType(Class clazz, string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a list of all mixins available in a given class.</para>
		/// </summary>
		/// <param name="clazz">class which should be inspected</param>
		/// <returns>array of mixins this class uses</returns>
		[JsMethod(Name = "getMixins")]
		public static Mixin GetMixins(Class clazz) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the definition of the given property, if not redefined.
		/// Returns null if the property does not exist.</para>
		/// </summary>
		/// <param name="clazz">class to check</param>
		/// <param name="name">name of the class to check for</param>
		/// <returns>whether the object support the given event.</returns>
		[JsMethod(Name = "getPropertyDefinition")]
		public static object GetPropertyDefinition(Class clazz, string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether a given class or any of its super classes includes a given interface.</para>
		/// <para>This function will return &#8220;true&#8221; if the interface was defined
		/// in the class declaration (<see cref="qx.Class.Define"/>) of the class
		/// or any of its super classes using the &#8220;implement&#8221;
		/// key.</para>
		/// </summary>
		/// <param name="clazz">class to check</param>
		/// <param name="iface">the interface to check for</param>
		/// <returns>whether the class includes the interface.</returns>
		[JsMethod(Name = "hasInterface")]
		public static bool HasInterface(Class clazz, Interface iface) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether a class has the given property</para>
		/// </summary>
		/// <param name="clazz">class to check</param>
		/// <param name="name">name of the property to check for</param>
		/// <returns>whether the class includes the given property.</returns>
		[JsMethod(Name = "hasProperty")]
		public static bool HasProperty(Class clazz, string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether a class supports the given event type</para>
		/// </summary>
		/// <param name="clazz">class to check</param>
		/// <param name="name">name of the event to check for</param>
		/// <returns>whether the class supports the given event.</returns>
		[JsMethod(Name = "supportsEvent")]
		public static bool SupportsEvent(Class clazz, string name) { throw new NotImplementedException(); }

		#endregion Methods
    }
}