// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>A string builder class</para>
	/// <para>+= operator is faster in Firefox and Opera.
	/// Array push/join is faster in Internet Explorer</para>
	/// <para>Even with this wrapper, which costs some time, this is
	/// faster in Firefox than the alternative Array concat in
	/// all browsers (which is in relation to IE&#8217;s performance issues
	/// only marginal). The IE performance loss caused by this
	/// wrapper is not relevant.</para>
	/// <para>So this class seems to be the best compromise to handle
	/// string concatenation.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.StringBuilder", OmitOptionalParameters = true, Export = false)]
    public partial class StringBuilder : qx.type.BaseArray
    {
		#region Methods

		public StringBuilder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates a new StringBuilder with the given length or as a concatenation of the given arguments substrings.</para>
		/// <code>
		/// var sb1 = new qx.util.StringBuilder(length);
		/// var sb2 = new qx.util.StringBuilder(item0, item1, ..., itemN);
		/// </code>
		/// <list type="bullet">
		/// <item>length: The initial length of the StringBuilder.</item>
		/// <item>itemN:  A substring that will make up the newly created StringBuilder.
		/// The StringBuilder&#8217;s length property is set to the number of arguments.</item>
		/// </list
		/// </summary>
		/// <param name="length_or_items">The initial length of the StringBuilder OR an argument list of values.</param>
		public StringBuilder(object length_or_items = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds new strings. Supports multiple arguments.</para>
		/// </summary>
		/// <param name="varargs">The separate strings to add</param>
		[JsMethod(Name = "add")]
		public void Add(string varargs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes all content</para>
		/// </summary>
		[JsMethod(Name = "clear")]
		public void Clear() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the concatted strings.</para>
		/// </summary>
		/// <returns>Concatted strings</returns>
		[JsMethod(Name = "get")]
		public string Get() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the string builder is empty</para>
		/// </summary>
		/// <returns>true when the builder is empty</returns>
		[JsMethod(Name = "isEmpty")]
		public bool IsEmpty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the size of the strings</para>
		/// </summary>
		/// <returns>The string length</returns>
		[JsMethod(Name = "size")]
		public double Size() { throw new NotImplementedException(); }

		#endregion Methods
    }
}