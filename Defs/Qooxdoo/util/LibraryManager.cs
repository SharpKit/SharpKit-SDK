// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>Provides read/write access to library-specific information such as
	/// source/resource URIs.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.LibraryManager", OmitOptionalParameters = true, Export = false)]
    public partial class LibraryManager : qx.core.Object
    {
		#region Methods

		public LibraryManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the value of an attribute of the given library</para>
		/// </summary>
		/// <param name="namespacex">The library&#8217;s namespace</param>
		/// <param name="key">Name of the attribute</param>
		/// <returns>The attribute&#8217;s value or null if it&#8217;s not defined</returns>
		[JsMethod(Name = "get")]
		public object Get(string namespacex, string key) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks whether the library with the given namespace is known to the
		/// application.</para>
		/// </summary>
		/// <param name="namespacex">The library&#8217;s namespace</param>
		/// <returns>true if the given library is known</returns>
		[JsMethod(Name = "has")]
		public bool Has(string namespacex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets an attribute on the given library.</para>
		/// </summary>
		/// <param name="namespacex">The library&#8217;s namespace</param>
		/// <param name="key">Name of the attribute</param>
		/// <param name="value">Value of the attribute</param>
		[JsMethod(Name = "set")]
		public void Set(string namespacex, string key, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a singleton instance of this class. On the first call the class
		/// is instantiated by calling the constructor with no arguments. All following
		/// calls will return this instance.</para>
		/// <para>This method has been added by setting the &#8220;type&#8221; key in the class definition
		/// (<see cref="qx.Class.Define"/>) to &#8220;singleton&#8221;.</para>
		/// </summary>
		/// <returns>The singleton instance of this class.</returns>
		[JsMethod(Name = "getInstance")]
		public static qx.util.LibraryManager GetInstance() { throw new NotImplementedException(); }

		#endregion Methods
    }
}