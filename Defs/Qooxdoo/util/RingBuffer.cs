// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.util
{
    /// <summary>
	/// <para>An memory container which stores arbitrary data up to a maximum number of
	/// entries. When new entries come in an the maximum is reached, the oldest
	/// entries are deleted.</para>
	/// <para>A mark feature also exists which can be used to remember a point in time.
	/// When retrieving entriues, it is possible to get only those entries
	/// after the marked time. This is useful if data from the buffer is extracted
	/// and processed. Whenever this happens, a mark() call can be used so that the
	/// next extraction will only get new data.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.util.RingBuffer", OmitOptionalParameters = true, Export = false)]
    public partial class RingBuffer : object
    {
		#region Methods

		public RingBuffer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Constructor.</para>
		/// </summary>
		/// <param name="maxEntries">Maximum number of entries in the buffer</param>
		public RingBuffer(double maxEntries = 50) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a single entry</para>
		/// </summary>
		/// <param name="entry">The data to store</param>
		[JsMethod(Name = "addEntry")]
		public void AddEntry(object entry) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears all entries</para>
		/// </summary>
		[JsMethod(Name = "clear")]
		public void Clear() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the current mark position</para>
		/// </summary>
		[JsMethod(Name = "clearMark")]
		public void ClearMark() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all stored entries. Mark is ignored.</para>
		/// </summary>
		/// <returns>array of stored entries</returns>
		[JsMethod(Name = "getAllEntries")]
		public JsArray GetAllEntries() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns entries which have been added previously.</para>
		/// </summary>
		/// <param name="count">The number of entries to retrieve. If there are more entries than the given count, the oldest ones will not be returned.</param>
		/// <param name="startingFromMark">If true, only entries since the last call to mark() will be returned</param>
		/// <returns>array of stored entries</returns>
		[JsMethod(Name = "getEntries")]
		public JsArray GetEntries(double count, bool startingFromMark = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the maximum number of entries to hold</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getMaxEntries")]
		public double GetMaxEntries() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remembers the current position in the ring buffer</para>
		/// </summary>
		[JsMethod(Name = "mark")]
		public void Mark() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the maximum number of messages to hold. If null the number of
		/// messages is not limited.</para>
		/// <para>Warning: Changing this property will clear the events logged so far.</para>
		/// </summary>
		/// <param name="maxEntries">the maximum number of messages to hold</param>
		[JsMethod(Name = "setMaxEntries")]
		public void SetMaxEntries(double maxEntries) { throw new NotImplementedException(); }

		#endregion Methods
    }
}