// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.dom
{
    /// <summary>
	/// <para>Methods to operate on nodes and elements on a DOM tree. This contains
	/// special getters to query for child nodes, siblings, etc. This class also
	/// supports to operate on one element and reorganize the content with
	/// the insertion of new HTML or nodes.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.dom.Hierarchy", OmitOptionalParameters = true, Export = false)]
    public partial class Hierarchy 
    {
		#region Methods

		public Hierarchy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes all of element&#8217;s text nodes which contain only whitespace</para>
		/// </summary>
		/// <param name="element">Element to cleanup</param>
		[JsMethod(Name = "cleanWhitespace")]
		public static void CleanWhitespace(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the first element contains the second one</para>
		/// <para>Uses native non-standard contains() in Internet Explorer,
		/// Opera and Webkit (supported since Safari 3.0 beta)</para>
		/// </summary>
		/// <param name="element">Parent element</param>
		/// <param name="target">Child node</param>
		/// <returns></returns>
		[JsMethod(Name = "contains")]
		public static bool Contains(qx.html.Element element, Node target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Collects all of element&#8217;s ancestors and returns them as an array of
		/// elements.</para>
		/// </summary>
		/// <param name="element">DOM element to query for ancestors</param>
		/// <returns>list of all parents</returns>
		[JsMethod(Name = "getAncestors")]
		public static JsArray GetAncestors(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns element&#8217;s children.</para>
		/// </summary>
		/// <param name="element">DOM element to query for child elements</param>
		/// <returns>list of all child elements</returns>
		[JsMethod(Name = "getChildElements")]
		public static JsArray GetChildElements(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the common parent element of two given elements. Returns
		/// null when no common element has been found.</para>
		/// <para>Uses native non-standard contains() in Opera and Internet Explorer</para>
		/// </summary>
		/// <param name="element1">First element</param>
		/// <param name="element2">Second element</param>
		/// <returns>the found parent, if none was found null</returns>
		[JsMethod(Name = "getCommonParent")]
		public static qx.html.Element GetCommonParent(qx.html.Element element1, qx.html.Element element2) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Collects all of element&#8217;s descendants (deep) and returns them as an array
		/// of elements.</para>
		/// </summary>
		/// <param name="element">DOM element to query for child elements</param>
		/// <returns>list of all found elements</returns>
		[JsMethod(Name = "getDescendants")]
		public static JsArray GetDescendants(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the DOM index of the given element (ignoring non-elements)</para>
		/// </summary>
		/// <param name="element">Element to look for</param>
		/// <returns>The DOM index</returns>
		[JsMethod(Name = "getElementIndex")]
		public static double GetElementIndex(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the first child that is an element. This is opposed to firstChild DOM
		/// property which will return any node (whitespace in most usual cases).</para>
		/// </summary>
		/// <param name="element">DOM element to query for first descendant</param>
		/// <returns>the first descendant</returns>
		[JsMethod(Name = "getFirstDescendant")]
		public static qx.html.Element GetFirstDescendant(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the last child that is an element. This is opposed to lastChild DOM
		/// property which will return any node (whitespace in most usual cases).</para>
		/// </summary>
		/// <param name="element">DOM element to query for last descendant</param>
		/// <returns>the last descendant</returns>
		[JsMethod(Name = "getLastDescendant")]
		public static qx.html.Element GetLastDescendant(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the next element to the supplied element</para>
		/// <para>&#8220;nextSibling&#8221; is not good enough as it might return a text or comment element</para>
		/// </summary>
		/// <param name="element">Starting element node</param>
		/// <returns>Next element node</returns>
		[JsMethod(Name = "getNextElementSibling")]
		public static qx.html.Element GetNextElementSibling(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Collects all of element&#8217;s next siblings and returns them as an array of
		/// elements.</para>
		/// </summary>
		/// <param name="element">DOM element to query for next siblings</param>
		/// <returns>list of found DOM elements</returns>
		[JsMethod(Name = "getNextSiblings")]
		public static JsArray GetNextSiblings(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the DOM index of the given node</para>
		/// </summary>
		/// <param name="node">Node to look for</param>
		/// <returns>The DOM index</returns>
		[JsMethod(Name = "getNodeIndex")]
		public static double GetNodeIndex(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the previous element to the supplied element</para>
		/// <para>&#8220;previousSibling&#8221; is not good enough as it might return a text or comment element</para>
		/// </summary>
		/// <param name="element">Starting element node</param>
		/// <returns>Previous element node</returns>
		[JsMethod(Name = "getPreviousElementSibling")]
		public static qx.html.Element GetPreviousElementSibling(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Collects all of element&#8217;s previous siblings and returns them as an array of elements.</para>
		/// </summary>
		/// <param name="element">DOM element to query for previous siblings</param>
		/// <returns>list of found DOM elements</returns>
		[JsMethod(Name = "getPreviousSiblings")]
		public static JsArray GetPreviousSiblings(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Collects all of element&#8217;s siblings and returns them as an array of elements.</para>
		/// </summary>
		/// <param name="element">DOM element to start with</param>
		/// <returns>list of all found siblings</returns>
		[JsMethod(Name = "getSiblings")]
		public static JsArray GetSiblings(object element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if element is a descendant of ancestor.</para>
		/// </summary>
		/// <param name="element">first element</param>
		/// <param name="ancestor">second element</param>
		/// <returns>Element is a descendant of ancestor</returns>
		[JsMethod(Name = "isDescendantOf")]
		public static bool IsDescendantOf(qx.html.Element element, qx.html.Element ancestor) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given element is empty.
		/// Inspired by Base2 (Dean Edwards)</para>
		/// </summary>
		/// <param name="element">The element to check</param>
		/// <returns>true when the element is empty</returns>
		[JsMethod(Name = "isEmpty")]
		public static bool IsEmpty(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the element is inserted into the document
		/// for which it was created.</para>
		/// </summary>
		/// <param name="element">DOM element to check</param>
		/// <returns>true when the element is inserted into the document.</returns>
		[JsMethod(Name = "isRendered")]
		public static bool IsRendered(qx.html.Element element) { throw new NotImplementedException(); }

		#endregion Methods
    }
}