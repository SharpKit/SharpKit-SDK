// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.dom
{
    /// <summary>
	/// <para>Basic node creation and type detection</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.dom.Node", OmitOptionalParameters = true, Export = false)]
    public partial class Node 
    {
		#region Methods

		public Node() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the body element. (Visual root node)</para>
		/// <para>This normally only makes sense for HTML documents. It returns
		/// the content area of the HTML document.</para>
		/// </summary>
		/// <param name="node">node to inspect</param>
		/// <returns>document body of the given node</returns>
		[JsMethod(Name = "getBodyElement")]
		public static qx.html.Element GetBodyElement(object node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the owner document of the given node</para>
		/// </summary>
		/// <param name="node">the node which should be tested</param>
		/// <returns>The document of the given DOM node</returns>
		[JsMethod(Name = "getDocument")]
		public static Document GetDocument(object node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the document element. (Logical root node)</para>
		/// <para>This is a convenience attribute that allows direct access to the child
		/// node that is the root element of the document. For HTML documents,
		/// this is the element with the tagName &#8220;HTML&#8221;.</para>
		/// </summary>
		/// <param name="node">node to inspect</param>
		/// <returns>document element of the given node</returns>
		[JsMethod(Name = "getDocumentElement")]
		public static qx.html.Element GetDocumentElement(object node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the node name as lower case string</para>
		/// </summary>
		/// <param name="node">the node</param>
		/// <returns>the node name</returns>
		[JsMethod(Name = "getName")]
		public static string GetName(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the text content of an node where the node may be of node type
		/// NODE_ELEMENT, NODE_ATTRIBUTE, NODE_TEXT or NODE_CDATA</para>
		/// </summary>
		/// <param name="node">the node from where the search should start. If the node has subnodes the text contents are recursively retreived and joined.</param>
		/// <returns>the joined text content of the given node or null if not appropriate.</returns>
		[JsMethod(Name = "getText")]
		public static string GetText(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the DOM2 defaultView (window).</para>
		/// </summary>
		/// <param name="node">node to inspect</param>
		/// <returns>the defaultView of the given node</returns>
		[JsMethod(Name = "getWindow")]
		public static Window GetWindow(object node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the given node is a block node</para>
		/// </summary>
		/// <param name="node">Node</param>
		/// <returns>whether it is a block node</returns>
		[JsMethod(Name = "isBlockNode")]
		public static bool IsBlockNode(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given object is a DOM document node</para>
		/// </summary>
		/// <param name="node">the node which should be tested</param>
		/// <returns>true when the node is a DOM document</returns>
		[JsMethod(Name = "isDocument")]
		public static bool IsDocument(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given object is a DOM element node</para>
		/// </summary>
		/// <param name="node">the node which should be tested</param>
		/// <returns>true if the node is a DOM element</returns>
		[JsMethod(Name = "isElement")]
		public static bool IsElement(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given object is a DOM node</para>
		/// </summary>
		/// <param name="node">the node which should be tested</param>
		/// <returns>true if the node is a DOM node</returns>
		[JsMethod(Name = "isNode")]
		public static bool IsNode(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the node has the given node name</para>
		/// </summary>
		/// <param name="node">the node</param>
		/// <param name="nodeName">the node name to check for</param>
		/// <returns>Whether the node has the given node name</returns>
		[JsMethod(Name = "isNodeName")]
		public static bool IsNodeName(Node node, string nodeName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given object is a DOM text node</para>
		/// </summary>
		/// <param name="node">the node which should be tested</param>
		/// <returns>true if the node is a DOM text node</returns>
		[JsMethod(Name = "isText")]
		public static bool IsText(Node node) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the given object is a browser window object.</para>
		/// </summary>
		/// <param name="obj">the object which should be tested</param>
		/// <returns>true if the object is a window object</returns>
		[JsMethod(Name = "isWindow")]
		public static bool IsWindow(object obj) { throw new NotImplementedException(); }

		#endregion Methods
    }
}