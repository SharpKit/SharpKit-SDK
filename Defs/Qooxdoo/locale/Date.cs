// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.locale
{
    /// <summary>
	/// <para>Static class that provides localized date information (like names of week
	/// days, AM/PM markers, start of week, etc.).</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.locale.Date", OmitOptionalParameters = true, Export = false)]
    public partial class Date 
    {
		#region Methods

		public Date() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get AM marker for time definitions</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>translated AM marker.</returns>
		[JsMethod(Name = "getAmMarker")]
		public static string GetAmMarker(string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return localized date format string to be used with <see cref="qx.util.format.DateFormat"/>.</para>
		/// </summary>
		/// <param name="size">format of the date format. Possible values: &#8220;short&#8221;, &#8220;medium&#8221;, &#8220;long&#8221;, &#8220;full&#8221;</param>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>localized date format string</returns>
		[JsMethod(Name = "getDateFormat")]
		public static string GetDateFormat(string size, string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Try to localize a date/time format string. For format string possibillities see
		/// Date/Time Symbol reference
		/// at CLDR &#8211; Unicode Common Locale Data Repository.</para>
		/// <para>If no localization is available take the fallback format string.</para>
		/// </summary>
		/// <param name="canonical">format string containing only field information, and in a canonical order. Examples are &#8220;yyyyMMMM&#8221; for year + full month, or &#8220;MMMd&#8221; for abbreviated month + day.</param>
		/// <param name="fallback">fallback format string if no localized version is found</param>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>best matching format string</returns>
		[JsMethod(Name = "getDateTimeFormat")]
		public static string GetDateTimeFormat(string canonical, string fallback, string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return localized name of a week day name</para>
		/// </summary>
		/// <param name="length">format of the day name. Possible values: &#8220;abbreviated&#8221;, &#8220;narrow&#8221;, &#8220;wide&#8221;</param>
		/// <param name="day">day number. 0=sunday, 1=monday, ...</param>
		/// <param name="locale">optional locale to be used</param>
		/// <param name="context">(default: &#8220;format&#8221;) intended context. Possible values: &#8220;format&#8221;, &#8220;stand-alone&#8221;</param>
		/// <param name="withFallback">if true, the previous parameter&#8217;s other value is tried in order to find a localized name for the day</param>
		/// <returns>localized day name</returns>
		[JsMethod(Name = "getDayName")]
		public static string GetDayName(string length, double day, string locale, string context, bool withFallback) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return localized names of day names</para>
		/// </summary>
		/// <param name="length">format of the day names. Possible values: &#8220;abbreviated&#8221;, &#8220;narrow&#8221;, &#8220;wide&#8221;</param>
		/// <param name="locale">optional locale to be used</param>
		/// <param name="context">(default: &#8220;format&#8221;) intended context. Possible values: &#8220;format&#8221;, &#8220;stand-alone&#8221;</param>
		/// <param name="withFallback">if true, the previous parameter&#8217;s other value is tried in order to find a localized name for the day</param>
		/// <returns>array of localized day names starting with sunday.</returns>
		[JsMethod(Name = "getDayNames")]
		public static string GetDayNames(string length, string locale, string context, bool withFallback) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return localized name of a month</para>
		/// </summary>
		/// <param name="length">format of the month names. Possible values: &#8220;abbreviated&#8221;, &#8220;narrow&#8221;, &#8220;wide&#8221;</param>
		/// <param name="month">index of the month. 0=january, 1=february, ...</param>
		/// <param name="locale">optional locale to be used</param>
		/// <param name="context">(default: &#8220;format&#8221;) intended context. Possible values: &#8220;format&#8221;, &#8220;stand-alone&#8221;</param>
		/// <param name="withFallback">if true, the previous parameter&#8217;s other value is tried in order to find a localized name for the month</param>
		/// <returns>localized month name</returns>
		[JsMethod(Name = "getMonthName")]
		public static string GetMonthName(string length, double month, string locale, string context, bool withFallback) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return localized names of month names</para>
		/// </summary>
		/// <param name="length">format of the month names. Possible values: &#8220;abbreviated&#8221;, &#8220;narrow&#8221;, &#8220;wide&#8221;</param>
		/// <param name="locale">optional locale to be used</param>
		/// <param name="context">(default: &#8220;format&#8221;) intended context. Possible values: &#8220;format&#8221;, &#8220;stand-alone&#8221;</param>
		/// <param name="withFallback">if true, the previous parameter&#8217;s other value is tried in order to find a localized name for the month</param>
		/// <returns>array of localized month names starting with january.</returns>
		[JsMethod(Name = "getMonthNames")]
		public static string GetMonthNames(string length, string locale, string context, bool withFallback) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get PM marker for time definitions</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>translated PM marker.</returns>
		[JsMethod(Name = "getPmMarker")]
		public static string GetPmMarker(string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return localized time format string to be used with <see cref="qx.util.format.DateFormat"/>.</para>
		/// </summary>
		/// <param name="size">format of the time pattern. Possible values: &#8220;short&#8221;, &#8220;medium&#8221;, &#8220;long&#8221;, &#8220;full&#8221;</param>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>localized time format string</returns>
		[JsMethod(Name = "getTimeFormat")]
		public static string GetTimeFormat(string size, string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the day the weekend ends with</para>
		/// <para>Reference: Common Locale Data Repository (cldr) supplementalData.xml</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>index of the last day of the weekend. 0=sunday, 1=monday, ...</returns>
		[JsMethod(Name = "getWeekendEnd")]
		public static double GetWeekendEnd(string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the day the weekend starts with</para>
		/// <para>Reference: Common Locale Data Repository (cldr) supplementalData.xml</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>index of the first day of the weekend. 0=sunday, 1=monday, ...</returns>
		[JsMethod(Name = "getWeekendStart")]
		public static double GetWeekendStart(string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the day the week starts with</para>
		/// <para>Reference: Common Locale Data Repository (cldr) supplementalData.xml</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>index of the first day of the week. 0=sunday, 1=monday, ...</returns>
		[JsMethod(Name = "getWeekStart")]
		public static double GetWeekStart(string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether a certain day of week belongs to the week end.</para>
		/// </summary>
		/// <param name="day">index of the day. 0=sunday, 1=monday, ...</param>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>whether the given day is a weekend day</returns>
		[JsMethod(Name = "isWeekend")]
		public static bool IsWeekend(double day, string locale) { throw new NotImplementedException(); }

		#endregion Methods
    }
}