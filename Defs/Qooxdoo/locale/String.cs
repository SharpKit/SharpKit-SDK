// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.locale
{
    /// <summary>
	/// <para>Provides information about locale-dependent string formatting (like quotation
	/// signs).</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.locale.String", OmitOptionalParameters = true, Export = false)]
    public partial class String 
    {
		#region Methods

		public String() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get quotation alternative end sign</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>alternative quotation end sign</returns>
		[JsMethod(Name = "getAlternateQuotationEnd")]
		public static string GetAlternateQuotationEnd(string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get quotation alternative start sign</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>alternative quotation start sign</returns>
		[JsMethod(Name = "getAlternateQuotationStart")]
		public static string GetAlternateQuotationStart(string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get quotation end sign</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>quotation end sign</returns>
		[JsMethod(Name = "getQuotationEnd")]
		public static string GetQuotationEnd(string locale) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get quotation start sign</para>
		/// </summary>
		/// <param name="locale">optional locale to be used</param>
		/// <returns>quotation start sign</returns>
		[JsMethod(Name = "getQuotationStart")]
		public static string GetQuotationStart(string locale) { throw new NotImplementedException(); }

		#endregion Methods
    }
}