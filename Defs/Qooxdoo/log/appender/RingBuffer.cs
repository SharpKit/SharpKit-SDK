// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.log.appender
{
    /// <summary>
	/// <para>An appender that writes all messages to a memory container. The messages
	/// can be retrieved later, f. i. when an error dialog pops up and the question
	/// arises what actions have caused the error.</para>
	/// <para>A mark feature also exists which can be used to remember a point in time.
	/// When retrieving log events, it is possible to get only those events
	/// after the marked time. This is useful if data from the buffer is extracted
	/// and f. i. sent to a logging system. Whenever this happens, a mark() call
	/// can be used so that the next extraction will only get new data.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.log.appender.RingBuffer", OmitOptionalParameters = true, Export = false)]
    public partial class RingBuffer : qx.util.RingBuffer
    {
		#region Methods

		public RingBuffer() { throw new NotImplementedException(); }

		/// <param name="maxMessages">Maximum number of messages in the buffer</param>
		public RingBuffer(double maxMessages = 50) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears the log history</para>
		/// </summary>
		[JsMethod(Name = "clearHistory")]
		public void ClearHistory() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all stored log events</para>
		/// </summary>
		/// <returns>array of stored log events</returns>
		[JsMethod(Name = "getAllLogEvents")]
		public JsArray GetAllLogEvents() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the maximum number of messages to hold</para>
		/// </summary>
		/// <returns>the maximum number of messages</returns>
		[JsMethod(Name = "getMaxMessages")]
		public double GetMaxMessages() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Processes a single log entry</para>
		/// </summary>
		/// <param name="entry">The entry to process</param>
		[JsMethod(Name = "process")]
		public void Process(object entry) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns log events which have been logged previously.</para>
		/// </summary>
		/// <param name="count">The number of events to retrieve. If there are more events than the given count, the oldest ones will not be returned.</param>
		/// <param name="startingFromMark">If true, only entries since the last call to mark() will be returned</param>
		/// <returns>array of stored log events</returns>
		[JsMethod(Name = "retrieveLogEvents")]
		public JsArray RetrieveLogEvents(double count, bool startingFromMark = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the maximum number of messages to hold. If null the number of
		/// messages is not limited.</para>
		/// <para>Warning: Changing this property will clear the events logged so far.</para>
		/// </summary>
		/// <param name="maxMessages">the maximum number of messages to hold</param>
		[JsMethod(Name = "setMaxMessages")]
		public void SetMaxMessages(double maxMessages) { throw new NotImplementedException(); }

		#endregion Methods
    }
}