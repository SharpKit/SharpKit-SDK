// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.fx
{
    /// <summary>
	/// <para>Static class containing all transition functions.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.fx.Transition", OmitOptionalParameters = true, Export = false)]
    public partial class Transition 
    {
		#region Methods

		public Transition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function will accelerate the effect&#8217;s
		/// impact exponentially.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "easeInQuad")]
		public static double EaseInQuad(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function will slow down the
		/// effect&#8217;s impact exponentially.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "easeOutQuad")]
		public static double EaseOutQuad(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function will alternate the
		/// effect&#8217;s impact between start end value.</para>
		/// <para>Looks only nice on color effects.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "flicker")]
		public static double Flicker(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function the effect&#8217;s impact will be
		/// as if it has reached the end position.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "full")]
		public static double Full(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Maps function name to function.</para>
		/// </summary>
		/// <param name="functionName">Name off the function.</param>
		/// <returns>Function belonging to the name or false, function does not exist</returns>
		[JsMethod(Name = "get")]
		public static object Get(string functionName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the given effect position without
		/// changing it. This is the default transition
		/// function for most effects.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "linear")]
		public static double Linear(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function the effect&#8217;s impact will be zero.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "none")]
		public static double None(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function will alternate rapidly the
		/// effect&#8217;s impact between start end value.</para>
		/// <para>Looks only nice on color effects.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <param name="pulses">Amount of pulses</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "pulse")]
		public static double Pulse(double pos, double pulses) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function will reverse the
		/// effect&#8217;s impact.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "reverse")]
		public static double Reverse(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function will accelerate the
		/// effect&#8217;s impact sinusoidal.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "sinodial")]
		public static double Sinodial(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function will overshoot the
		/// target value and then move back the impact&#8217;s
		/// impact.</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "spring")]
		public static double Spring(double pos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Using this function will bounce the
		/// effect&#8217;s impact forwards and backwards</para>
		/// </summary>
		/// <param name="pos">Effect position in duration</param>
		/// <returns>Modified effect position</returns>
		[JsMethod(Name = "wobble")]
		public static double Wobble(double pos) { throw new NotImplementedException(); }

		#endregion Methods
    }
}