// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.fx.queue
{
    /// <summary>
	/// <para>Manager for access to effect queues.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.fx.queue.Manager", OmitOptionalParameters = true, Export = false)]
    public partial class Manager : qx.core.Object
    {
		#region Methods

		public Manager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns existing default queue or creates a new queue object and returns it.</para>
		/// </summary>
		/// <returns>The queue object.</returns>
		[JsMethod(Name = "getDefaultQueue")]
		public Class GetDefaultQueue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns existing queue by name or creates a new queue object and returns it.</para>
		/// </summary>
		/// <param name="queueName">Name of queue.</param>
		/// <returns>The queue object.</returns>
		[JsMethod(Name = "getQueue")]
		public Class GetQueue(string queueName) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a singleton instance of this class. On the first call the class
		/// is instantiated by calling the constructor with no arguments. All following
		/// calls will return this instance.</para>
		/// <para>This method has been added by setting the &#8220;type&#8221; key in the class definition
		/// (<see cref="qx.Class.Define"/>) to &#8220;singleton&#8221;.</para>
		/// </summary>
		/// <returns>The singleton instance of this class.</returns>
		[JsMethod(Name = "getInstance")]
		public static qx.fx.queue.Manager GetInstance() { throw new NotImplementedException(); }

		#endregion Methods
    }
}