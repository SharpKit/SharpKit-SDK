// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.fx.effect.combination
{
    /// <summary>
	/// <para>Combination effect &#8220;Color Flow&#8221;
	/// Changes the background color of an element to a given initial. After that the
	/// effects waits a given amount of time before it modifies to background color
	/// back to the initial value.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.fx.effect.combination.ColorFlow", OmitOptionalParameters = true, Export = false)]
    public partial class ColorFlow : qx.fx.Base
    {
		#region Properties

		/// <summary>
		/// <para>Number of seconds the second transition should</para>
		/// </summary>
		[JsProperty(Name = "backwardDuration", NativeField = true)]
		public double BackwardDuration { get; set; }

		/// <summary>
		/// <para>Function for transition between end color and start color</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "linear","easeInQuad","easeOutQuad","sinodial","reverse","flicker","wobble","pulse","spring","none","full"
		/// </remarks>
		[JsProperty(Name = "backwardTransition", NativeField = true)]
		public object BackwardTransition { get; set; }

		/// <summary>
		/// <para>Number of seconds the end color should be visible</para>
		/// </summary>
		[JsProperty(Name = "delayBetween", NativeField = true)]
		public double DelayBetween { get; set; }

		/// <summary>
		/// <para>Final background color value.</para>
		/// </summary>
		[JsProperty(Name = "endColor", NativeField = true)]
		public string EndColor { get; set; }

		/// <summary>
		/// <para>Number of seconds the first transition should</para>
		/// </summary>
		[JsProperty(Name = "forwardDuration", NativeField = true)]
		public double ForwardDuration { get; set; }

		/// <summary>
		/// <para>Function for transition between start color and end color</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "linear","easeInQuad","easeOutQuad","sinodial","reverse","flicker","wobble","pulse","spring","none","full"
		/// </remarks>
		[JsProperty(Name = "forwardTransition", NativeField = true)]
		public object ForwardTransition { get; set; }

		/// <summary>
		/// <para>Flag indicating if element&#8217;s background image should consists during effect.
		/// Useful for no-repeating background images.</para>
		/// </summary>
		[JsProperty(Name = "keepBackgroundImage", NativeField = true)]
		public bool KeepBackgroundImage { get; set; }

		/// <summary>
		/// <para>Flag indicating if element&#8217;s background color or image should be restored.</para>
		/// </summary>
		[JsProperty(Name = "restoreBackground", NativeField = true)]
		public bool RestoreBackground { get; set; }

		/// <summary>
		/// <para>Initial background color value.</para>
		/// </summary>
		[JsProperty(Name = "startColor", NativeField = true)]
		public string StartColor { get; set; }

		#endregion Properties

		#region Methods

		public ColorFlow() { throw new NotImplementedException(); }

		/// <param name="element">The DOM element</param>
		public ColorFlow(object element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property backwardDuration.</para>
		/// </summary>
		[JsMethod(Name = "getBackwardDuration")]
		public double GetBackwardDuration() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property backwardTransition.</para>
		/// </summary>
		[JsMethod(Name = "getBackwardTransition")]
		public object GetBackwardTransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property delayBetween.</para>
		/// </summary>
		[JsMethod(Name = "getDelayBetween")]
		public double GetDelayBetween() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property endColor.</para>
		/// </summary>
		[JsMethod(Name = "getEndColor")]
		public string GetEndColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property forwardDuration.</para>
		/// </summary>
		[JsMethod(Name = "getForwardDuration")]
		public double GetForwardDuration() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property forwardTransition.</para>
		/// </summary>
		[JsMethod(Name = "getForwardTransition")]
		public object GetForwardTransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property keepBackgroundImage.</para>
		/// </summary>
		[JsMethod(Name = "getKeepBackgroundImage")]
		public bool GetKeepBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property restoreBackground.</para>
		/// </summary>
		[JsMethod(Name = "getRestoreBackground")]
		public bool GetRestoreBackground() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property startColor.</para>
		/// </summary>
		[JsMethod(Name = "getStartColor")]
		public string GetStartColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property backwardDuration
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property backwardDuration.</param>
		[JsMethod(Name = "initBackwardDuration")]
		public void InitBackwardDuration(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property backwardTransition
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property backwardTransition.</param>
		[JsMethod(Name = "initBackwardTransition")]
		public void InitBackwardTransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property delayBetween
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property delayBetween.</param>
		[JsMethod(Name = "initDelayBetween")]
		public void InitDelayBetween(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property endColor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property endColor.</param>
		[JsMethod(Name = "initEndColor")]
		public void InitEndColor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property forwardDuration
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property forwardDuration.</param>
		[JsMethod(Name = "initForwardDuration")]
		public void InitForwardDuration(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property forwardTransition
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property forwardTransition.</param>
		[JsMethod(Name = "initForwardTransition")]
		public void InitForwardTransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property keepBackgroundImage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property keepBackgroundImage.</param>
		[JsMethod(Name = "initKeepBackgroundImage")]
		public void InitKeepBackgroundImage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property restoreBackground
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property restoreBackground.</param>
		[JsMethod(Name = "initRestoreBackground")]
		public void InitRestoreBackground(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property startColor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property startColor.</param>
		[JsMethod(Name = "initStartColor")]
		public void InitStartColor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property keepBackgroundImage equals true.</para>
		/// </summary>
		[JsMethod(Name = "isKeepBackgroundImage")]
		public void IsKeepBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property restoreBackground equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRestoreBackground")]
		public void IsRestoreBackground() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backwardDuration.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackwardDuration")]
		public void ResetBackwardDuration() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backwardTransition.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackwardTransition")]
		public void ResetBackwardTransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property delayBetween.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDelayBetween")]
		public void ResetDelayBetween() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property endColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetEndColor")]
		public void ResetEndColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property forwardDuration.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetForwardDuration")]
		public void ResetForwardDuration() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property forwardTransition.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetForwardTransition")]
		public void ResetForwardTransition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property keepBackgroundImage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetKeepBackgroundImage")]
		public void ResetKeepBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property restoreBackground.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRestoreBackground")]
		public void ResetRestoreBackground() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property startColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStartColor")]
		public void ResetStartColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property backwardDuration.</para>
		/// </summary>
		/// <param name="value">New value for property backwardDuration.</param>
		[JsMethod(Name = "setBackwardDuration")]
		public void SetBackwardDuration(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property backwardTransition.</para>
		/// </summary>
		/// <param name="value">New value for property backwardTransition.</param>
		[JsMethod(Name = "setBackwardTransition")]
		public void SetBackwardTransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property delayBetween.</para>
		/// </summary>
		/// <param name="value">New value for property delayBetween.</param>
		[JsMethod(Name = "setDelayBetween")]
		public void SetDelayBetween(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property endColor.</para>
		/// </summary>
		/// <param name="value">New value for property endColor.</param>
		[JsMethod(Name = "setEndColor")]
		public void SetEndColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property forwardDuration.</para>
		/// </summary>
		/// <param name="value">New value for property forwardDuration.</param>
		[JsMethod(Name = "setForwardDuration")]
		public void SetForwardDuration(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property forwardTransition.</para>
		/// </summary>
		/// <param name="value">New value for property forwardTransition.</param>
		[JsMethod(Name = "setForwardTransition")]
		public void SetForwardTransition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property keepBackgroundImage.</para>
		/// </summary>
		/// <param name="value">New value for property keepBackgroundImage.</param>
		[JsMethod(Name = "setKeepBackgroundImage")]
		public void SetKeepBackgroundImage(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property restoreBackground.</para>
		/// </summary>
		/// <param name="value">New value for property restoreBackground.</param>
		[JsMethod(Name = "setRestoreBackground")]
		public void SetRestoreBackground(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property startColor.</para>
		/// </summary>
		/// <param name="value">New value for property startColor.</param>
		[JsMethod(Name = "setStartColor")]
		public void SetStartColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Starts the effect</para>
		/// </summary>
		/// <returns>true if the effect was successfully started</returns>
		[JsMethod(Name = "start")]
		public bool Start() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property keepBackgroundImage.</para>
		/// </summary>
		[JsMethod(Name = "toggleKeepBackgroundImage")]
		public void ToggleKeepBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property restoreBackground.</para>
		/// </summary>
		[JsMethod(Name = "toggleRestoreBackground")]
		public void ToggleRestoreBackground() { throw new NotImplementedException(); }

		#endregion Methods
    }
}