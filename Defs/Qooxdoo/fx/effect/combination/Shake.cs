// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.fx.effect.combination
{
    /// <summary>
	/// <para>Combination effect &#8220;Shake&#8221;</para>
	/// <para>Moves the element forwards and backwards several times.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.fx.effect.combination.Shake", OmitOptionalParameters = true, Export = false)]
    public partial class Shake : qx.fx.Base
    {
		#region Properties

		/// <summary>
		/// <para>Direction in which the element should be shaken.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "horizontal","vertical"
		/// </remarks>
		[JsProperty(Name = "direction", NativeField = true)]
		public object Direction { get; set; }

		/// <summary>
		/// <para>Amount of pixel the element should be moved during the shake.</para>
		/// </summary>
		[JsProperty(Name = "distance", NativeField = true)]
		public double Distance { get; set; }

		/// <summary>
		/// <para>Number of seconds the effect should run.</para>
		/// </summary>
		[JsProperty(Name = "duration", NativeField = true)]
		public object Duration { get; set; }

		#endregion Properties

		#region Methods

		public Shake() { throw new NotImplementedException(); }

		/// <param name="element">The DOM element</param>
		public Shake(object element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property direction.</para>
		/// </summary>
		[JsMethod(Name = "getDirection")]
		public object GetDirection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property distance.</para>
		/// </summary>
		[JsMethod(Name = "getDistance")]
		public double GetDistance() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property direction
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property direction.</param>
		[JsMethod(Name = "initDirection")]
		public void InitDirection(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property distance
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property distance.</param>
		[JsMethod(Name = "initDistance")]
		public void InitDistance(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property direction.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDirection")]
		public void ResetDirection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property distance.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDistance")]
		public void ResetDistance() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property direction.</para>
		/// </summary>
		/// <param name="value">New value for property direction.</param>
		[JsMethod(Name = "setDirection")]
		public void SetDirection(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property distance.</para>
		/// </summary>
		/// <param name="value">New value for property distance.</param>
		[JsMethod(Name = "setDistance")]
		public void SetDistance(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Starts the effect</para>
		/// </summary>
		/// <returns>true if the effect was successfully started</returns>
		[JsMethod(Name = "start")]
		public bool Start() { throw new NotImplementedException(); }

		#endregion Methods
    }
}