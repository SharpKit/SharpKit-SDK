// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.fx.effect.core
{
    /// <summary>
	/// <para>Core effect &#8220;Move&#8221;</para>
	/// <para>Moves to element to the given coordinates.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.fx.effect.core.Move", OmitOptionalParameters = true, Export = false)]
    public partial class Move : qx.fx.Base
    {
		#region Properties

		/// <summary>
		/// <para>String indicating if the coordinates are relative
		/// to element&#8217;s position or absolute.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "relative","absolute"
		/// </remarks>
		[JsProperty(Name = "mode", NativeField = true)]
		public object Mode { get; set; }

		/// <summary>
		/// <para>X coordinate the element should be moved to.</para>
		/// </summary>
		[JsProperty(Name = "x", NativeField = true)]
		public double X { get; set; }

		/// <summary>
		/// <para>Y coordinate the element should be moved to.</para>
		/// </summary>
		[JsProperty(Name = "y", NativeField = true)]
		public double Y { get; set; }

		#endregion Properties

		#region Methods

		public Move() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called before
		/// &#8220;afterFinished&#8221; and after the effect
		/// actually has ended.</para>
		/// </summary>
		[JsMethod(Name = "afterFinishInternal")]
		public void AfterFinishInternal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property mode.</para>
		/// </summary>
		[JsMethod(Name = "getMode")]
		public object GetMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property x.</para>
		/// </summary>
		[JsMethod(Name = "getX")]
		public double GetX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property y.</para>
		/// </summary>
		[JsMethod(Name = "getY")]
		public double GetY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property mode
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property mode.</param>
		[JsMethod(Name = "initMode")]
		public void InitMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property x
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property x.</param>
		[JsMethod(Name = "initX")]
		public void InitX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property y
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property y.</param>
		[JsMethod(Name = "initY")]
		public void InitY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property mode.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMode")]
		public void ResetMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property x.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetX")]
		public void ResetX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property y.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetY")]
		public void ResetY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property mode.</para>
		/// </summary>
		/// <param name="value">New value for property mode.</param>
		[JsMethod(Name = "setMode")]
		public void SetMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called
		/// before the effect starts to configure
		/// the element or prepare other effects.</para>
		/// <para>Fires &#8220;setup&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "setup")]
		public void Setup() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property x.</para>
		/// </summary>
		/// <param name="value">New value for property x.</param>
		[JsMethod(Name = "setX")]
		public void SetX(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property y.</para>
		/// </summary>
		/// <param name="value">New value for property y.</param>
		[JsMethod(Name = "setY")]
		public void SetY(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called
		/// each time the effect performs an
		/// step of the animation.</para>
		/// <para>Sub classes will overwrite this to
		/// perform the actual changes on element
		/// properties.</para>
		/// </summary>
		/// <param name="position">Animation setup as Number between 0 and 1.</param>
		[JsMethod(Name = "update")]
		public void Update(double position) { throw new NotImplementedException(); }

		#endregion Methods
    }
}