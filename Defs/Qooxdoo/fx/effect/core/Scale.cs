// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.fx.effect.core
{
    /// <summary>
	/// <para>Core effect &#8220;Scale&#8221;</para>
	/// <para>This effect scales the specified element (and its content, optionally) by given percentages.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.fx.effect.core.Scale", OmitOptionalParameters = true, Export = false)]
    public partial class Scale : qx.fx.Base
    {
		#region Properties

		/// <summary>
		/// <para>Array containing sizes which will instead of element&#8217;s dimensions, if filled.</para>
		/// </summary>
		[JsProperty(Name = "alternateDimensions", NativeField = true)]
		public JsArray AlternateDimensions { get; set; }

		/// <summary>
		/// <para>Flag indicating if element&#8217;s original dimensions should be restored
		/// after effect&#8217;s runtime.</para>
		/// </summary>
		[JsProperty(Name = "restoreAfterFinish", NativeField = true)]
		public bool RestoreAfterFinish { get; set; }

		/// <summary>
		/// <para>Flag indicating if element&#8217;s content (font size) should be scaled.</para>
		/// </summary>
		[JsProperty(Name = "scaleContent", NativeField = true)]
		public bool ScaleContent { get; set; }

		/// <summary>
		/// <para>Percentage the elements dimensions should be scaled from.</para>
		/// </summary>
		[JsProperty(Name = "scaleFrom", NativeField = true)]
		public double ScaleFrom { get; set; }

		/// <summary>
		/// <para>Flag indicating if element should be scaled
		/// from center (upper left corner otherwise).</para>
		/// </summary>
		[JsProperty(Name = "scaleFromCenter", NativeField = true)]
		public bool ScaleFromCenter { get; set; }

		/// <summary>
		/// <para>Percentage the elements dimensions should be scaled to.</para>
		/// </summary>
		[JsProperty(Name = "scaleTo", NativeField = true)]
		public double ScaleTo { get; set; }

		/// <summary>
		/// <para>Flag indicating if element&#8217;s width should be scaled.</para>
		/// </summary>
		[JsProperty(Name = "scaleX", NativeField = true)]
		public bool ScaleX { get; set; }

		/// <summary>
		/// <para>Flag indicating if element&#8217;s height should be scaled.</para>
		/// </summary>
		[JsProperty(Name = "scaleY", NativeField = true)]
		public bool ScaleY { get; set; }

		#endregion Properties

		#region Methods

		public Scale() { throw new NotImplementedException(); }

		public Scale(object element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called
		/// when the effect has finished.</para>
		/// <para>Fires &#8220;finish&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "finish")]
		public void Finish() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alternateDimensions.</para>
		/// </summary>
		[JsMethod(Name = "getAlternateDimensions")]
		public JsArray GetAlternateDimensions() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property restoreAfterFinish.</para>
		/// </summary>
		[JsMethod(Name = "getRestoreAfterFinish")]
		public bool GetRestoreAfterFinish() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scaleContent.</para>
		/// </summary>
		[JsMethod(Name = "getScaleContent")]
		public bool GetScaleContent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scaleFrom.</para>
		/// </summary>
		[JsMethod(Name = "getScaleFrom")]
		public double GetScaleFrom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scaleFromCenter.</para>
		/// </summary>
		[JsMethod(Name = "getScaleFromCenter")]
		public bool GetScaleFromCenter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scaleTo.</para>
		/// </summary>
		[JsMethod(Name = "getScaleTo")]
		public double GetScaleTo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scaleX.</para>
		/// </summary>
		[JsMethod(Name = "getScaleX")]
		public bool GetScaleX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scaleY.</para>
		/// </summary>
		[JsMethod(Name = "getScaleY")]
		public bool GetScaleY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alternateDimensions
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alternateDimensions.</param>
		[JsMethod(Name = "initAlternateDimensions")]
		public void InitAlternateDimensions(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property restoreAfterFinish
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property restoreAfterFinish.</param>
		[JsMethod(Name = "initRestoreAfterFinish")]
		public void InitRestoreAfterFinish(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scaleContent
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scaleContent.</param>
		[JsMethod(Name = "initScaleContent")]
		public void InitScaleContent(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scaleFrom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scaleFrom.</param>
		[JsMethod(Name = "initScaleFrom")]
		public void InitScaleFrom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scaleFromCenter
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scaleFromCenter.</param>
		[JsMethod(Name = "initScaleFromCenter")]
		public void InitScaleFromCenter(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scaleTo
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scaleTo.</param>
		[JsMethod(Name = "initScaleTo")]
		public void InitScaleTo(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scaleX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scaleX.</param>
		[JsMethod(Name = "initScaleX")]
		public void InitScaleX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scaleY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scaleY.</param>
		[JsMethod(Name = "initScaleY")]
		public void InitScaleY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property restoreAfterFinish equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRestoreAfterFinish")]
		public void IsRestoreAfterFinish() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property scaleContent equals true.</para>
		/// </summary>
		[JsMethod(Name = "isScaleContent")]
		public void IsScaleContent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property scaleFromCenter equals true.</para>
		/// </summary>
		[JsMethod(Name = "isScaleFromCenter")]
		public void IsScaleFromCenter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property scaleX equals true.</para>
		/// </summary>
		[JsMethod(Name = "isScaleX")]
		public void IsScaleX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property scaleY equals true.</para>
		/// </summary>
		[JsMethod(Name = "isScaleY")]
		public void IsScaleY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alternateDimensions.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlternateDimensions")]
		public void ResetAlternateDimensions() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property restoreAfterFinish.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRestoreAfterFinish")]
		public void ResetRestoreAfterFinish() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scaleContent.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScaleContent")]
		public void ResetScaleContent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scaleFrom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScaleFrom")]
		public void ResetScaleFrom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scaleFromCenter.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScaleFromCenter")]
		public void ResetScaleFromCenter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scaleTo.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScaleTo")]
		public void ResetScaleTo() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scaleX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScaleX")]
		public void ResetScaleX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scaleY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScaleY")]
		public void ResetScaleY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alternateDimensions.</para>
		/// </summary>
		/// <param name="value">New value for property alternateDimensions.</param>
		[JsMethod(Name = "setAlternateDimensions")]
		public void SetAlternateDimensions(JsArray value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property restoreAfterFinish.</para>
		/// </summary>
		/// <param name="value">New value for property restoreAfterFinish.</param>
		[JsMethod(Name = "setRestoreAfterFinish")]
		public void SetRestoreAfterFinish(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scaleContent.</para>
		/// </summary>
		/// <param name="value">New value for property scaleContent.</param>
		[JsMethod(Name = "setScaleContent")]
		public void SetScaleContent(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scaleFrom.</para>
		/// </summary>
		/// <param name="value">New value for property scaleFrom.</param>
		[JsMethod(Name = "setScaleFrom")]
		public void SetScaleFrom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scaleFromCenter.</para>
		/// </summary>
		/// <param name="value">New value for property scaleFromCenter.</param>
		[JsMethod(Name = "setScaleFromCenter")]
		public void SetScaleFromCenter(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scaleTo.</para>
		/// </summary>
		/// <param name="value">New value for property scaleTo.</param>
		[JsMethod(Name = "setScaleTo")]
		public void SetScaleTo(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scaleX.</para>
		/// </summary>
		/// <param name="value">New value for property scaleX.</param>
		[JsMethod(Name = "setScaleX")]
		public void SetScaleX(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scaleY.</para>
		/// </summary>
		/// <param name="value">New value for property scaleY.</param>
		[JsMethod(Name = "setScaleY")]
		public void SetScaleY(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called
		/// before the effect starts to configure
		/// the element or prepare other effects.</para>
		/// <para>Fires &#8220;setup&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "setup")]
		public void Setup() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property restoreAfterFinish.</para>
		/// </summary>
		[JsMethod(Name = "toggleRestoreAfterFinish")]
		public void ToggleRestoreAfterFinish() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property scaleContent.</para>
		/// </summary>
		[JsMethod(Name = "toggleScaleContent")]
		public void ToggleScaleContent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property scaleFromCenter.</para>
		/// </summary>
		[JsMethod(Name = "toggleScaleFromCenter")]
		public void ToggleScaleFromCenter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property scaleX.</para>
		/// </summary>
		[JsMethod(Name = "toggleScaleX")]
		public void ToggleScaleX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property scaleY.</para>
		/// </summary>
		[JsMethod(Name = "toggleScaleY")]
		public void ToggleScaleY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called
		/// each time the effect performs an
		/// step of the animation.</para>
		/// <para>Sub classes will overwrite this to
		/// perform the actual changes on element
		/// properties.</para>
		/// </summary>
		/// <param name="position">Animation setup as Number between 0 and 1.</param>
		[JsMethod(Name = "update")]
		public void Update(double position) { throw new NotImplementedException(); }

		#endregion Methods
    }
}