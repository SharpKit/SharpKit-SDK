// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.fx.effect.core
{
    /// <summary>
	/// <para>Core effect &#8220;Highlight&#8221;</para>
	/// <para>Cycles the background color of the element from initial to final color.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.fx.effect.core.Highlight", OmitOptionalParameters = true, Export = false)]
    public partial class Highlight : qx.fx.Base
    {
		#region Properties

		/// <summary>
		/// <para>Final background color value.</para>
		/// </summary>
		[JsProperty(Name = "endColor", NativeField = true)]
		public string EndColor { get; set; }

		/// <summary>
		/// <para>Flag indicating if element&#8217;s background image should consists during effect.
		/// Useful for no-repeating background images.</para>
		/// </summary>
		[JsProperty(Name = "keepBackgroundImage", NativeField = true)]
		public bool KeepBackgroundImage { get; set; }

		/// <summary>
		/// <para>Flag indicating if element&#8217;s background color or image should be restored.</para>
		/// </summary>
		[JsProperty(Name = "restoreBackground", NativeField = true)]
		public bool RestoreBackground { get; set; }

		/// <summary>
		/// <para>Initial background color value.</para>
		/// </summary>
		[JsProperty(Name = "startColor", NativeField = true)]
		public string StartColor { get; set; }

		#endregion Properties

		#region Methods

		public Highlight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called
		/// when the effect has finished.</para>
		/// <para>Fires &#8220;finish&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "finish")]
		public void Finish() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property endColor.</para>
		/// </summary>
		[JsMethod(Name = "getEndColor")]
		public string GetEndColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property keepBackgroundImage.</para>
		/// </summary>
		[JsMethod(Name = "getKeepBackgroundImage")]
		public bool GetKeepBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property restoreBackground.</para>
		/// </summary>
		[JsMethod(Name = "getRestoreBackground")]
		public bool GetRestoreBackground() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property startColor.</para>
		/// </summary>
		[JsMethod(Name = "getStartColor")]
		public string GetStartColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property endColor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property endColor.</param>
		[JsMethod(Name = "initEndColor")]
		public void InitEndColor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property keepBackgroundImage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property keepBackgroundImage.</param>
		[JsMethod(Name = "initKeepBackgroundImage")]
		public void InitKeepBackgroundImage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property restoreBackground
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property restoreBackground.</param>
		[JsMethod(Name = "initRestoreBackground")]
		public void InitRestoreBackground(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property startColor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property startColor.</param>
		[JsMethod(Name = "initStartColor")]
		public void InitStartColor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property keepBackgroundImage equals true.</para>
		/// </summary>
		[JsMethod(Name = "isKeepBackgroundImage")]
		public void IsKeepBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property restoreBackground equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRestoreBackground")]
		public void IsRestoreBackground() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property endColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetEndColor")]
		public void ResetEndColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property keepBackgroundImage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetKeepBackgroundImage")]
		public void ResetKeepBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property restoreBackground.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRestoreBackground")]
		public void ResetRestoreBackground() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property startColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStartColor")]
		public void ResetStartColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property endColor.</para>
		/// </summary>
		/// <param name="value">New value for property endColor.</param>
		[JsMethod(Name = "setEndColor")]
		public void SetEndColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property keepBackgroundImage.</para>
		/// </summary>
		/// <param name="value">New value for property keepBackgroundImage.</param>
		[JsMethod(Name = "setKeepBackgroundImage")]
		public void SetKeepBackgroundImage(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property restoreBackground.</para>
		/// </summary>
		/// <param name="value">New value for property restoreBackground.</param>
		[JsMethod(Name = "setRestoreBackground")]
		public void SetRestoreBackground(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property startColor.</para>
		/// </summary>
		/// <param name="value">New value for property startColor.</param>
		[JsMethod(Name = "setStartColor")]
		public void SetStartColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called
		/// before the effect starts to configure
		/// the element or prepare other effects.</para>
		/// <para>Fires &#8220;setup&#8221; event.</para>
		/// </summary>
		[JsMethod(Name = "setup")]
		public void Setup() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property keepBackgroundImage.</para>
		/// </summary>
		[JsMethod(Name = "toggleKeepBackgroundImage")]
		public void ToggleKeepBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property restoreBackground.</para>
		/// </summary>
		[JsMethod(Name = "toggleRestoreBackground")]
		public void ToggleRestoreBackground() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This internal function is called
		/// each time the effect performs an
		/// step of the animation.</para>
		/// <para>Sub classes will overwrite this to
		/// perform the actual changes on element
		/// properties.</para>
		/// </summary>
		/// <param name="position">Animation setup as Number between 0 and 1.</param>
		[JsMethod(Name = "update")]
		public void Update(double position) { throw new NotImplementedException(); }

		#endregion Methods
    }
}