// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.basic
{
    /// <summary>
	/// <para>The label class brings typical text content to the widget system.</para>
	/// <para>It supports simple text nodes and complex HTML (rich). The default
	/// content mode is for text only. The mode is changeable through the property
	/// <see cref="Rich"/>.</para>
	/// <para>The label supports heightForWidth when used in HTML mode. This means
	/// that multi line HTML automatically computes the correct preferred height.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// // a simple text label without wrapping and markup support
	/// var label1 = new qx.ui.basic.Label("Simple text label");
	/// this.getRoot().add(label1, {left:20, top:10});
	/// // a HTML label with automatic line wrapping
	/// var label2 = new qx.ui.basic.Label().set({
	/// value: "A long label text with auto-wrapping. This also may contain rich HTML markup.",
	/// rich : true,
	/// width: 120
	/// });
	/// this.getRoot().add(label2, {left:20, top:50});
	/// </code>
	/// <para>The first label in this example is a basic text only label. As such no
	/// automatic wrapping is supported. The second label is a long label containing
	/// HTML markup with automatic line wrapping.</para>
	/// <para>External Documentation</para>
	/// 
	/// Documentation of this widget in the qooxdoo manual.
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.basic.Label", OmitOptionalParameters = true, Export = false)]
    public partial class Label : qx.ui.core.Widget, qx.ui.form.IStringForm
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Rich"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeRich;

		/// <summary>
		/// Fired on change of the property <see cref="TextAlign"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeTextAlign;

		/// <summary>
		/// <para>Fired when the value was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeValue;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Whether the item can grow horizontally.</para>
		/// </summary>
		[JsProperty(Name = "allowGrowX", NativeField = true)]
		public bool AllowGrowX { get; set; }

		/// <summary>
		/// <para>Whether the item can grow vertically.</para>
		/// </summary>
		[JsProperty(Name = "allowGrowY", NativeField = true)]
		public bool AllowGrowY { get; set; }

		/// <summary>
		/// <para>Whether the item can shrink vertically.</para>
		/// </summary>
		[JsProperty(Name = "allowShrinkY", NativeField = true)]
		public bool AllowShrinkY { get; set; }

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>The buddy property can be used to connect the label to another widget.
		/// That causes two things:
		/// <list type="bullet">
		/// <item>The label will always take the same enabled state as the buddy
		/// widget.
		/// </item>
		/// <item>A click on the label will focus the buddy widget.
		/// </item>
		/// </list
		/// This is the behavior of the for attribute of HTML:
		/// http://www.w3.org/TR/html401/interact/forms.html#adef-for</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "buddy", NativeField = true)]
		public qx.ui.core.Widget Buddy { get; set; }

		/// <summary>
		/// <para>Switches between rich HTML and text content. The text mode (false) supports
		/// advanced features like ellipsis when the available space is not
		/// enough. HTML mode (true) supports multi-line content and all the
		/// markup features of HTML content.</para>
		/// </summary>
		[JsProperty(Name = "rich", NativeField = true)]
		public bool Rich { get; set; }

		/// <summary>
		/// <para>Whether the widget contains content which may be selected by the user.</para>
		/// <para>If the value set to true the native browser selection can
		/// be used for text selection. But it is normally useful for
		/// forms fields, longer texts/documents, editors, etc.</para>
		/// </summary>
		[JsProperty(Name = "selectable", NativeField = true)]
		public bool Selectable { get; set; }

		/// <summary>
		/// <para>Control the text alignment</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "left","center","right","justify"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "textAlign", NativeField = true)]
		public object TextAlign { get; set; }

		/// <summary>
		/// <para>Contains the HTML or text content. Interpretation depends on the value
		/// of <see cref="Rich"/>. In text mode entities and other HTML special content
		/// is not supported. But it is possible to use unicode escape sequences
		/// to insert symbols and other non ASCII characters.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "value", NativeField = true)]
		public string Value { get; set; }

		/// <summary>
		/// <para>Controls whether text wrap is activated or not. But please note, that
		/// this property works only in combination with the property <see cref="Rich"/>.
		/// The <see cref="Wrap"/> has only an effect if the <see cref="Rich"/> property is
		/// set to true, otherwise <see cref="Wrap"/> has no effect.</para>
		/// </summary>
		[JsProperty(Name = "wrap", NativeField = true)]
		public bool Wrap { get; set; }

		#endregion Properties

		#region Methods

		public Label() { throw new NotImplementedException(); }

		/// <param name="value">Text or HTML content to use</param>
		public Label(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property buddy.</para>
		/// </summary>
		[JsMethod(Name = "getBuddy")]
		public qx.ui.core.Widget GetBuddy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property rich.</para>
		/// </summary>
		[JsMethod(Name = "getRich")]
		public bool GetRich() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property textAlign.</para>
		/// </summary>
		[JsMethod(Name = "getTextAlign")]
		public object GetTextAlign() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The element&#8217;s user set value.</para>
		/// </summary>
		/// <returns>The value.</returns>
		[JsMethod(Name = "getValue")]
		public string GetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property wrap.</para>
		/// </summary>
		[JsMethod(Name = "getWrap")]
		public bool GetWrap() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property buddy
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property buddy.</param>
		[JsMethod(Name = "initBuddy")]
		public void InitBuddy(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property rich
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property rich.</param>
		[JsMethod(Name = "initRich")]
		public void InitRich(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property textAlign
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property textAlign.</param>
		[JsMethod(Name = "initTextAlign")]
		public void InitTextAlign(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property value
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property value.</param>
		[JsMethod(Name = "initValue")]
		public void InitValue(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property wrap
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property wrap.</param>
		[JsMethod(Name = "initWrap")]
		public void InitWrap(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property rich equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRich")]
		public void IsRich() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property wrap equals true.</para>
		/// </summary>
		[JsMethod(Name = "isWrap")]
		public void IsWrap() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property buddy.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBuddy")]
		public void ResetBuddy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property rich.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRich")]
		public void ResetRich() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property textAlign.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTextAlign")]
		public void ResetTextAlign() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the element&#8217;s value to its initial value.</para>
		/// </summary>
		[JsMethod(Name = "resetValue")]
		public void ResetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property wrap.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWrap")]
		public void ResetWrap() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property buddy.</para>
		/// </summary>
		/// <param name="value">New value for property buddy.</param>
		[JsMethod(Name = "setBuddy")]
		public void SetBuddy(qx.ui.core.Widget value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property rich.</para>
		/// </summary>
		/// <param name="value">New value for property rich.</param>
		[JsMethod(Name = "setRich")]
		public void SetRich(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property textAlign.</para>
		/// </summary>
		/// <param name="value">New value for property textAlign.</param>
		[JsMethod(Name = "setTextAlign")]
		public void SetTextAlign(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the element&#8217;s value.</para>
		/// </summary>
		/// <param name="value">The new value of the element.</param>
		[JsMethod(Name = "setValue")]
		public void SetValue(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property wrap.</para>
		/// </summary>
		/// <param name="value">New value for property wrap.</param>
		[JsMethod(Name = "setWrap")]
		public void SetWrap(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property rich.</para>
		/// </summary>
		[JsMethod(Name = "toggleRich")]
		public void ToggleRich() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property wrap.</para>
		/// </summary>
		[JsMethod(Name = "toggleWrap")]
		public void ToggleWrap() { throw new NotImplementedException(); }

		#endregion Methods
    }
}