// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;

namespace qx.ui.container
{
    /// <summary>
	/// <para>Container, which provides scrolling in one dimension (vertical or horizontal).</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.container.SlideBar", OmitOptionalParameters = true, Export = false)]
    public partial class SlideBar : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// <para>Fired on scroll animation end invoked by &#8216;scroll*&#8217; methods.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnScrollAnimationEnd;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Orientation of the bar</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "horizontal","vertical"
		/// </remarks>
		[JsProperty(Name = "orientation", NativeField = true)]
		public object Orientation { get; set; }

		/// <summary>
		/// <para>The number of pixels to scroll if the buttons are pressed</para>
		/// </summary>
		[JsProperty(Name = "scrollStep", NativeField = true)]
		public double ScrollStep { get; set; }

		#endregion Properties

		#region Methods

		public SlideBar() { throw new NotImplementedException(); }

		/// <param name="orientation">The slide bar orientation</param>
		public SlideBar(string orientation = "horizontal") { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the widget which contains the children and
		/// is relevant for laying them out. This is from the user point of
		/// view and may not be identical to the technical structure.</para>
		/// </summary>
		/// <returns>Widget which contains the children.</returns>
		[JsMethod(Name = "getChildrenContainer")]
		public qx.ui.core.Widget GetChildrenContainer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property orientation.</para>
		/// </summary>
		[JsMethod(Name = "getOrientation")]
		public object GetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scrollStep.</para>
		/// </summary>
		[JsMethod(Name = "getScrollStep")]
		public double GetScrollStep() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property orientation
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property orientation.</param>
		[JsMethod(Name = "initOrientation")]
		public void InitOrientation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scrollStep
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scrollStep.</param>
		[JsMethod(Name = "initScrollStep")]
		public void InitScrollStep(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property orientation.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOrientation")]
		public void ResetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scrollStep.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScrollStep")]
		public void ResetScrollStep() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the element&#8217;s content by the given amount.</para>
		/// </summary>
		/// <param name="offset">Amount to scroll</param>
		/// <param name="duration">The time in milliseconds the scroll to should take.</param>
		[JsMethod(Name = "scrollBy")]
		public void ScrollBy(double offset = 0, double? duration = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the element&#8217;s content to the given coordinate</para>
		/// </summary>
		/// <param name="value">The position to scroll to.</param>
		/// <param name="duration">The time in milliseconds the scroll to should take.</param>
		[JsMethod(Name = "scrollTo")]
		public void ScrollTo(double value, double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property orientation.</para>
		/// </summary>
		/// <param name="value">New value for property orientation.</param>
		[JsMethod(Name = "setOrientation")]
		public void SetOrientation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scrollStep.</para>
		/// </summary>
		/// <param name="value">New value for property scrollStep.</param>
		[JsMethod(Name = "setScrollStep")]
		public void SetScrollStep(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a new child widget.</para>
		/// <para>The supported keys of the layout options map depend on the layout manager
		/// used to position the widget. The options are documented in the class
		/// documentation of each layout manager <see cref="qx.ui.layout"/>.</para>
		/// </summary>
		/// <param name="child">the item to add.</param>
		/// <param name="options">Optional layout data for item.</param>
		/// <returns>This object (for chaining support)</returns>
		[JsMethod(Name = "add")]
		public Widget Add(LayoutItem child, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add an item after another already inserted item</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">item to add</param>
		/// <param name="after">item, after which the new item will be inserted</param>
		/// <param name="options">Optional layout data for item.</param>
		[JsMethod(Name = "addAfter")]
		public void AddAfter(LayoutItem child, LayoutItem after, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a child at the specified index</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">item to add</param>
		/// <param name="index">Index, at which the item will be inserted</param>
		/// <param name="options">Optional layout data for item.</param>
		[JsMethod(Name = "addAt")]
		public void AddAt(LayoutItem child, double index, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add an item before another already inserted item</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">item to add</param>
		/// <param name="before">item before the new item will be inserted.</param>
		/// <param name="options">Optional layout data for item.</param>
		[JsMethod(Name = "addBefore")]
		public void AddBefore(LayoutItem child, LayoutItem before, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the children list</para>
		/// </summary>
		/// <returns>The children array (Arrays are reference types, please to not modify them in-place)</returns>
		[JsMethod(Name = "getChildren")]
		public LayoutItem GetChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the widget contains children.</para>
		/// </summary>
		/// <returns>Returns true when the widget has children.</returns>
		[JsMethod(Name = "hasChildren")]
		public bool HasChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the index position of the given item if it is
		/// a child item. Otherwise it returns -1.</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">the item to query for</param>
		/// <returns>The index position or -1 when the given item is no child of this layout.</returns>
		[JsMethod(Name = "indexOf")]
		public double IndexOf(LayoutItem child) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove the given child item.</para>
		/// </summary>
		/// <param name="child">the item to remove</param>
		/// <returns>This object (for chaining support)</returns>
		[JsMethod(Name = "remove")]
		public Widget Remove(LayoutItem child) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove all children.</para>
		/// </summary>
		/// <returns>An array containing the removed children.</returns>
		[JsMethod(Name = "removeAll")]
		public JsArray RemoveAll() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove the item at the specified index.</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="index">Index of the item to remove.</param>
		/// <returns>The removed item</returns>
		[JsMethod(Name = "removeAt")]
		public qx.ui.core.LayoutItem RemoveAt(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the widget&#8217;s layout manager.</para>
		/// </summary>
		/// <returns>The widget&#8217;s layout manager</returns>
		[JsMethod(Name = "getLayout")]
		public qx.ui.layout.Abstract GetLayout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set a layout manager for the widget. A a layout manager can only be connected
		/// with one widget. Reset the connection with a previous widget first, if you
		/// like to use it in another widget instead.</para>
		/// </summary>
		/// <param name="layout">The new layout or null to reset the layout.</param>
		[JsMethod(Name = "setLayout")]
		public void SetLayout(qx.ui.layout.Abstract layout) { throw new NotImplementedException(); }

		#endregion Methods
    }
}