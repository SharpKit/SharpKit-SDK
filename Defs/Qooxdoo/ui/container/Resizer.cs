// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;

namespace qx.ui.container
{
    /// <summary>
	/// <para>The Resizer is a resizable container widget.</para>
	/// <para>It allows to be resized (not moved), normally in
	/// the right and/or bottom directions. It is an alternative to splitters.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// var resizer = new qx.ui.container.Resizer().set({
	/// width: 200,
	/// height: 100
	/// });
	/// resizer.setLayout(new qx.ui.layout.Canvas());
	/// var text = new qx.ui.form.TextArea("Resize me\nI'm resizable");
	/// resizer.add(text, {edge: 0});
	/// this.getRoot().add(resizer);
	/// </code>
	/// <para>This example creates a resizer, configures it with a canvas layout and
	/// adds a text area to it.</para>
	/// <para>External Documentation</para>
	/// 
	/// Documentation of this widget in the qooxdoo manual.
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.container.Resizer", OmitOptionalParameters = true, Export = false)]
    public partial class Resizer : qx.ui.container.Composite
    {
		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Property group to configure the resize behaviour for all edges at once</para>
		/// </summary>
		[JsProperty(Name = "resizable", NativeField = true)]
		public object Resizable { get; set; }

		/// <summary>
		/// <para>Whether the bottom edge is resizable</para>
		/// </summary>
		[JsProperty(Name = "resizableBottom", NativeField = true)]
		public bool ResizableBottom { get; set; }

		/// <summary>
		/// <para>Whether the left edge is resizable</para>
		/// </summary>
		[JsProperty(Name = "resizableLeft", NativeField = true)]
		public bool ResizableLeft { get; set; }

		/// <summary>
		/// <para>Whether the right edge is resizable</para>
		/// </summary>
		[JsProperty(Name = "resizableRight", NativeField = true)]
		public bool ResizableRight { get; set; }

		/// <summary>
		/// <para>Whether the top edge is resizable</para>
		/// </summary>
		[JsProperty(Name = "resizableTop", NativeField = true)]
		public bool ResizableTop { get; set; }

		/// <summary>
		/// <para>The tolerance to activate resizing</para>
		/// </summary>
		[JsProperty(Name = "resizeSensitivity", NativeField = true)]
		public double ResizeSensitivity { get; set; }

		/// <summary>
		/// <para>Whether a frame replacement should be used during the resize sequence</para>
		/// </summary>
		[JsProperty(Name = "useResizeFrame", NativeField = true)]
		public bool UseResizeFrame { get; set; }

		#endregion Properties

		#region Methods

		public Resizer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizableBottom.</para>
		/// </summary>
		[JsMethod(Name = "getResizableBottom")]
		public bool GetResizableBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizableLeft.</para>
		/// </summary>
		[JsMethod(Name = "getResizableLeft")]
		public bool GetResizableLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizableRight.</para>
		/// </summary>
		[JsMethod(Name = "getResizableRight")]
		public bool GetResizableRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizableTop.</para>
		/// </summary>
		[JsMethod(Name = "getResizableTop")]
		public bool GetResizableTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizeSensitivity.</para>
		/// </summary>
		[JsMethod(Name = "getResizeSensitivity")]
		public double GetResizeSensitivity() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property useResizeFrame.</para>
		/// </summary>
		[JsMethod(Name = "getUseResizeFrame")]
		public bool GetUseResizeFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizableBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizableBottom.</param>
		[JsMethod(Name = "initResizableBottom")]
		public void InitResizableBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizableLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizableLeft.</param>
		[JsMethod(Name = "initResizableLeft")]
		public void InitResizableLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizableRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizableRight.</param>
		[JsMethod(Name = "initResizableRight")]
		public void InitResizableRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizableTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizableTop.</param>
		[JsMethod(Name = "initResizableTop")]
		public void InitResizableTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizeSensitivity
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizeSensitivity.</param>
		[JsMethod(Name = "initResizeSensitivity")]
		public void InitResizeSensitivity(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property useResizeFrame
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property useResizeFrame.</param>
		[JsMethod(Name = "initUseResizeFrame")]
		public void InitUseResizeFrame(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resizableBottom equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResizableBottom")]
		public void IsResizableBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resizableLeft equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResizableLeft")]
		public void IsResizableLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resizableRight equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResizableRight")]
		public void IsResizableRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resizableTop equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResizableTop")]
		public void IsResizableTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property useResizeFrame equals true.</para>
		/// </summary>
		[JsMethod(Name = "isUseResizeFrame")]
		public void IsUseResizeFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizable.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizable")]
		public void ResetResizable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizableBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizableBottom")]
		public void ResetResizableBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizableLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizableLeft")]
		public void ResetResizableLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizableRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizableRight")]
		public void ResetResizableRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizableTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizableTop")]
		public void ResetResizableTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizeSensitivity.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizeSensitivity")]
		public void ResetResizeSensitivity() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property useResizeFrame.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUseResizeFrame")]
		public void ResetUseResizeFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group resizable.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="resizableTop">Sets the value of the property #resizableTop.</param>
		/// <param name="resizableRight">Sets the value of the property #resizableRight.</param>
		/// <param name="resizableBottom">Sets the value of the property #resizableBottom.</param>
		/// <param name="resizableLeft">Sets the value of the property #resizableLeft.</param>
		[JsMethod(Name = "setResizable")]
		public void SetResizable(object resizableTop, object resizableRight, object resizableBottom, object resizableLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizableBottom.</para>
		/// </summary>
		/// <param name="value">New value for property resizableBottom.</param>
		[JsMethod(Name = "setResizableBottom")]
		public void SetResizableBottom(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizableLeft.</para>
		/// </summary>
		/// <param name="value">New value for property resizableLeft.</param>
		[JsMethod(Name = "setResizableLeft")]
		public void SetResizableLeft(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizableRight.</para>
		/// </summary>
		/// <param name="value">New value for property resizableRight.</param>
		[JsMethod(Name = "setResizableRight")]
		public void SetResizableRight(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizableTop.</para>
		/// </summary>
		/// <param name="value">New value for property resizableTop.</param>
		[JsMethod(Name = "setResizableTop")]
		public void SetResizableTop(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizeSensitivity.</para>
		/// </summary>
		/// <param name="value">New value for property resizeSensitivity.</param>
		[JsMethod(Name = "setResizeSensitivity")]
		public void SetResizeSensitivity(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property useResizeFrame.</para>
		/// </summary>
		/// <param name="value">New value for property useResizeFrame.</param>
		[JsMethod(Name = "setUseResizeFrame")]
		public void SetUseResizeFrame(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resizableBottom.</para>
		/// </summary>
		[JsMethod(Name = "toggleResizableBottom")]
		public void ToggleResizableBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resizableLeft.</para>
		/// </summary>
		[JsMethod(Name = "toggleResizableLeft")]
		public void ToggleResizableLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resizableRight.</para>
		/// </summary>
		[JsMethod(Name = "toggleResizableRight")]
		public void ToggleResizableRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resizableTop.</para>
		/// </summary>
		[JsMethod(Name = "toggleResizableTop")]
		public void ToggleResizableTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property useResizeFrame.</para>
		/// </summary>
		[JsMethod(Name = "toggleUseResizeFrame")]
		public void ToggleUseResizeFrame() { throw new NotImplementedException(); }

		#endregion Methods
    }
}