// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.embed
{
    /// <summary>
	/// <para>The Canvas widget embeds the HMTL canvas element
	/// [W3C-HTML5]</para>
	/// <para>Note: This widget does not work in Internet Explorer < 9!
	/// Check for browser support with qx.core.Environment.get(&#8220;html.canvas&#8221;).</para>
	/// <para>To paint something on the canvas and keep the content updated on resizes you
	/// either have to override the <see cref="#_draw"/> method or redraw the content on
	/// the <see cref="Redraw"/> event. The drawing context can be obtained by <see cref="GetContext2d"/>.</para>
	/// <para>Note that this widget operates on two different coordinate systems. The canvas
	/// has its own coordinate system for drawing operations. This canvas coordinate
	/// system is scaled to fit actual size of the DOM element. Each time the size of
	/// the canvas dimensions is changed a redraw is required. In this case the
	/// protected method <see cref="#_draw"/> is called and the event <see cref="Redraw"/>
	/// is fired. You can synchronize the internal canvas dimension with the
	/// CSS dimension of the canvas element by setting <see cref="SyncDimension"/> to
	/// true.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the canvas widget.</para>
	/// <code>
	/// var canvas = new qx.ui.embed.Canvas().set({
	/// canvasWidth: 200,
	/// canvasHeight: 200,
	/// syncDimension: true
	/// });
	/// canvas.addListener("redraw", function(e)
	/// {
	/// var data = e.getData();
	/// var width = data.width;
	/// var height = data.height;
	/// var ctx = data.context;
	/// ctx.fillStyle = "rgb(200,0,0)";
	/// ctx.fillRect (20, 20, width-5, height-5);
	/// ctx.fillStyle = "rgba(0, 0, 200, 0.5)";
	/// ctx.fillRect (70, 70, 105, 100);
	/// }, this);
	/// </code>
	/// <para>External Documentation</para>
	/// 
	/// Documentation of this widget in the qooxdoo manual.
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.embed.Canvas", OmitOptionalParameters = true, Export = false)]
    public partial class Canvas : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// <para>The redraw event is fired each time the canvas dimension change and the
		/// canvas needs to be updated. The data field contains a map containing the
		/// width and height of the canvas and the
		/// rendering context.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnRedraw;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The internal height of the canvas coordinates</para>
		/// </summary>
		[JsProperty(Name = "canvasHeight", NativeField = true)]
		public double CanvasHeight { get; set; }

		/// <summary>
		/// <para>The internal with of the canvas coordinates</para>
		/// </summary>
		[JsProperty(Name = "canvasWidth", NativeField = true)]
		public double CanvasWidth { get; set; }

		/// <summary>
		/// <para>Whether canvas and widget coordinates should be synchronized</para>
		/// </summary>
		[JsProperty(Name = "syncDimension", NativeField = true)]
		public bool SyncDimension { get; set; }

		#endregion Properties

		#region Methods

		public Canvas() { throw new NotImplementedException(); }

		/// <param name="canvasWidth">The internal with of the canvas coordinates.</param>
		/// <param name="canvasHeight">The internal height of the canvas coordinates.</param>
		public Canvas(double canvasWidth, double canvasHeight) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property canvasHeight.</para>
		/// </summary>
		[JsMethod(Name = "getCanvasHeight")]
		public double GetCanvasHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property canvasWidth.</para>
		/// </summary>
		[JsMethod(Name = "getCanvasWidth")]
		public double GetCanvasWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the native canvas 2D rendering context
		/// [W3C-HTML5].
		/// All drawing operations are performed on this context.</para>
		/// </summary>
		/// <returns>The 2D rendering context.</returns>
		[JsMethod(Name = "getContext2d")]
		public CanvasRenderingContext2D GetContext2d() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property syncDimension.</para>
		/// </summary>
		[JsMethod(Name = "getSyncDimension")]
		public bool GetSyncDimension() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property canvasHeight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property canvasHeight.</param>
		[JsMethod(Name = "initCanvasHeight")]
		public void InitCanvasHeight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property canvasWidth
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property canvasWidth.</param>
		[JsMethod(Name = "initCanvasWidth")]
		public void InitCanvasWidth(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property syncDimension
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property syncDimension.</param>
		[JsMethod(Name = "initSyncDimension")]
		public void InitSyncDimension(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property syncDimension equals true.</para>
		/// </summary>
		[JsMethod(Name = "isSyncDimension")]
		public void IsSyncDimension() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property canvasHeight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetCanvasHeight")]
		public void ResetCanvasHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property canvasWidth.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetCanvasWidth")]
		public void ResetCanvasWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property syncDimension.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSyncDimension")]
		public void ResetSyncDimension() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property canvasHeight.</para>
		/// </summary>
		/// <param name="value">New value for property canvasHeight.</param>
		[JsMethod(Name = "setCanvasHeight")]
		public void SetCanvasHeight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property canvasWidth.</para>
		/// </summary>
		/// <param name="value">New value for property canvasWidth.</param>
		[JsMethod(Name = "setCanvasWidth")]
		public void SetCanvasWidth(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property syncDimension.</para>
		/// </summary>
		/// <param name="value">New value for property syncDimension.</param>
		[JsMethod(Name = "setSyncDimension")]
		public void SetSyncDimension(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property syncDimension.</para>
		/// </summary>
		[JsMethod(Name = "toggleSyncDimension")]
		public void ToggleSyncDimension() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Redraw the canvas</para>
		/// </summary>
		[JsMethod(Name = "update")]
		public void Update() { throw new NotImplementedException(); }

		#endregion Methods
    }
}