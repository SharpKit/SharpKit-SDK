// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.embed
{
    /// <summary>
	/// <para>Container widget for internal frames (iframes).
	/// An iframe can display any HTML page inside the widget.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// var document = this.getRoot();
	/// var iframe = new qx.ui.embed.Iframe("http://www.qooxdoo.org");
	/// document.add(iframe);
	/// </code>
	/// <para>External Documentation</para>
	/// 
	/// Documentation of this widget in the qooxdoo manual.
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.embed.Iframe", OmitOptionalParameters = true, Export = false)]
    public partial class Iframe : qx.ui.embed.AbstractIframe
    {
		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Whether to show the frame&#8217;s native context menu.</para>
		/// <para>Note: This only works if the iframe source is served from the same domain
		/// as the main application.</para>
		/// </summary>
		[JsProperty(Name = "nativeContextMenu", NativeField = true)]
		public object NativeContextMenu { get; set; }

		/// <summary>
		/// <para>If the user presses F1 in IE by default the onhelp event is fired and
		/// IE&#8217;s help window is opened. Setting this property to false
		/// prevents this behavior.</para>
		/// <para>Note: This only works if the iframe source is served from the same domain
		/// as the main application.</para>
		/// </summary>
		[JsProperty(Name = "nativeHelp", NativeField = true)]
		public bool NativeHelp { get; set; }

		/// <summary>
		/// <para>Whether the widget should have scrollbars.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "auto","no","yes"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "scrollbar", NativeField = true)]
		public object Scrollbar { get; set; }

		#endregion Properties

		#region Methods

		public Iframe() { throw new NotImplementedException(); }

		/// <param name="source">URL which should initially set.</param>
		public Iframe(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Cover the iframe with a transparent blocker div element. This prevents
		/// mouse or key events to be handled by the iframe. To release the blocker
		/// use <see cref="Release"/>.</para>
		/// </summary>
		[JsMethod(Name = "block")]
		public void Block() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property nativeHelp.</para>
		/// </summary>
		[JsMethod(Name = "getNativeHelp")]
		public bool GetNativeHelp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scrollbar.</para>
		/// </summary>
		[JsMethod(Name = "getScrollbar")]
		public object GetScrollbar() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property nativeHelp
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property nativeHelp.</param>
		[JsMethod(Name = "initNativeHelp")]
		public void InitNativeHelp(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scrollbar
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scrollbar.</param>
		[JsMethod(Name = "initScrollbar")]
		public void InitScrollbar(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property nativeHelp equals true.</para>
		/// </summary>
		[JsMethod(Name = "isNativeHelp")]
		public void IsNativeHelp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Release the blocker set by <see cref="Block"/>.</para>
		/// </summary>
		[JsMethod(Name = "release")]
		public void Release() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Used by the layout engine to apply coordinates and dimensions.</para>
		/// </summary>
		/// <param name="left">Any integer value for the left position, always in pixels</param>
		/// <param name="top">Any integer value for the top position, always in pixels</param>
		/// <param name="width">Any positive integer value for the width, always in pixels</param>
		/// <param name="height">Any positive integer value for the height, always in pixels</param>
		/// <returns>A map of which layout sizes changed.</returns>
		[JsMethod(Name = "renderLayout")]
		public object RenderLayout(double left, double top, double width, double height) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property nativeHelp.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNativeHelp")]
		public void ResetNativeHelp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scrollbar.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScrollbar")]
		public void ResetScrollbar() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property nativeHelp.</para>
		/// </summary>
		/// <param name="value">New value for property nativeHelp.</param>
		[JsMethod(Name = "setNativeHelp")]
		public void SetNativeHelp(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scrollbar.</para>
		/// </summary>
		/// <param name="value">New value for property scrollbar.</param>
		[JsMethod(Name = "setScrollbar")]
		public void SetScrollbar(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property nativeHelp.</para>
		/// </summary>
		[JsMethod(Name = "toggleNativeHelp")]
		public void ToggleNativeHelp() { throw new NotImplementedException(); }

		#endregion Methods
    }
}