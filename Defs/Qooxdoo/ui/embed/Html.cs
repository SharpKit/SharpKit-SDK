// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;

namespace qx.ui.embed
{
    /// <summary>
	/// <para>The Html widget embeds plain HTML code into the application</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the canvas widget.</para>
	/// <code>
	/// var html = new qx.ui.embed.Html();
	/// html.setHtml("Hello World");
	/// </code>
	/// <para>External Documentation</para>
	/// 
	/// Documentation of this widget in the qooxdoo manual.
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.embed.Html", OmitOptionalParameters = true, Export = false)]
    public partial class Html : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Html"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeHtml;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The css classname for the html embed.
		/// IMPORTANT Paddings and borders does not work
		/// in the css class. These styles cause conflicts with
		/// the layout engine.</para>
		/// </summary>
		[JsProperty(Name = "cssClass", NativeField = true)]
		public string CssClass { get; set; }

		/// <summary>
		/// <para>Whether the widget is focusable e.g. rendering a focus border and visualize
		/// as active element.</para>
		/// <para>See also <see cref="IsTabable"/> which allows runtime checks for
		/// isChecked or other stuff to test whether the widget is
		/// reachable via the TAB key.</para>
		/// </summary>
		[JsProperty(Name = "focusable", NativeField = true)]
		public bool Focusable { get; set; }

		/// <summary>
		/// <para>Any text string which can contain HTML, too</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "html", NativeField = true)]
		public string Htmlx { get; set; }

		/// <summary>
		/// <para>Whether the widget contains content which may be selected by the user.</para>
		/// <para>If the value set to true the native browser selection can
		/// be used for text selection. But it is normally useful for
		/// forms fields, longer texts/documents, editors, etc.</para>
		/// </summary>
		[JsProperty(Name = "selectable", NativeField = true)]
		public bool Selectable { get; set; }

		/// <summary>
		/// <para>Overflow group property</para>
		/// </summary>
		[JsProperty(Name = "overflow", NativeField = true)]
		public object Overflow { get; set; }

		/// <summary>
		/// <para>Whether the widget should have horizontal scrollbars.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "hidden","visible","scroll","auto"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "overflowX", NativeField = true)]
		public object OverflowX { get; set; }

		/// <summary>
		/// <para>Whether the widget should have vertical scrollbars.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "hidden","visible","scroll","auto"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "overflowY", NativeField = true)]
		public object OverflowY { get; set; }

		#endregion Properties

		#region Methods

		public Html() { throw new NotImplementedException(); }

		/// <param name="html">Initial HTML content</param>
		public Html(string html) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property cssClass.</para>
		/// </summary>
		[JsMethod(Name = "getCssClass")]
		public string GetCssClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the element which should be focused.</para>
		/// </summary>
		/// <returns>The html element to focus.</returns>
		[JsMethod(Name = "getFocusElement")]
		public qx.html.Element GetFocusElement() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property html.</para>
		/// </summary>
		[JsMethod(Name = "getHtml")]
		public string GetHtml() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property cssClass
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property cssClass.</param>
		[JsMethod(Name = "initCssClass")]
		public void InitCssClass(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property html
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property html.</param>
		[JsMethod(Name = "initHtml")]
		public void InitHtml(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property cssClass.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetCssClass")]
		public void ResetCssClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property html.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetHtml")]
		public void ResetHtml() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property cssClass.</para>
		/// </summary>
		/// <param name="value">New value for property cssClass.</param>
		[JsMethod(Name = "setCssClass")]
		public void SetCssClass(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property html.</para>
		/// </summary>
		/// <param name="value">New value for property html.</param>
		[JsMethod(Name = "setHtml")]
		public void SetHtml(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property overflowX.</para>
		/// </summary>
		[JsMethod(Name = "getOverflowX")]
		public object GetOverflowX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property overflowY.</para>
		/// </summary>
		[JsMethod(Name = "getOverflowY")]
		public object GetOverflowY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property overflowX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property overflowX.</param>
		[JsMethod(Name = "initOverflowX")]
		public void InitOverflowX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property overflowY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property overflowY.</param>
		[JsMethod(Name = "initOverflowY")]
		public void InitOverflowY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property overflow.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOverflow")]
		public void ResetOverflow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property overflowX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOverflowX")]
		public void ResetOverflowX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property overflowY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOverflowY")]
		public void ResetOverflowY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group overflow.</para>
		/// </summary>
		/// <param name="overflowX">Sets the value of the property #overflowX.</param>
		/// <param name="overflowY">Sets the value of the property #overflowY.</param>
		[JsMethod(Name = "setOverflow")]
		public void SetOverflow(object overflowX, object overflowY) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property overflowX.</para>
		/// </summary>
		/// <param name="value">New value for property overflowX.</param>
		[JsMethod(Name = "setOverflowX")]
		public void SetOverflowX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property overflowY.</para>
		/// </summary>
		/// <param name="value">New value for property overflowY.</param>
		[JsMethod(Name = "setOverflowY")]
		public void SetOverflowY(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}