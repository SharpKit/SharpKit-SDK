// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.embed
{
    /// <summary>
	/// <para>The Flash widget embeds the HMTL Flash element</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.embed.Flash", OmitOptionalParameters = true, Export = false)]
    public partial class Flash : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// <para>Fired after the flash object has been loaded.</para>
		/// <para>The loaded action can be prevented by calling
		/// <see cref="qx.event.type.Event.PreventDefault"/> on the event object</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnLoaded;

		/// <summary>
		/// <para>Fired when the flash object still is loading.</para>
		/// <para>The loading action can be prevented by calling
		/// <see cref="qx.event.type.Event.PreventDefault"/> on the event object</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnLoading;

		/// <summary>
		/// <para>Fired after the flash object has got a timeout.</para>
		/// <para>The timeout action can be prevented by calling
		/// <see cref="qx.event.type.Event.PreventDefault"/> on the event object</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnTimeout;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Set allow script access</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "sameDomain","always","never"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "allowScriptAccess", NativeField = true)]
		public object AllowScriptAccess { get; set; }

		/// <summary>
		/// <para>The unique Flash movie id.</para>
		/// </summary>
		[JsProperty(Name = "id", NativeField = true)]
		public string Id { get; set; }

		/// <summary>
		/// <para>Enable/disable live connection</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "liveConnect", NativeField = true)]
		public bool LiveConnect { get; set; }

		/// <summary>
		/// <para>A timeout when trying to load the flash source.</para>
		/// </summary>
		[JsProperty(Name = "loadTimeout", NativeField = true)]
		public double LoadTimeout { get; set; }

		/// <summary>
		/// <para>Set the loop attribute for the Flash movie.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "loop", NativeField = true)]
		public bool Loop { get; set; }

		/// <summary>
		/// <para>Set the mayscript attribute for the Flash movie.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "mayScript", NativeField = true)]
		public bool MayScript { get; set; }

		/// <summary>
		/// <para>Set the menu attribute for the Flash movie.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "menu", NativeField = true)]
		public bool Menu { get; set; }

		/// <summary>
		/// <para>Set the play attribute for the Flash movie.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "play", NativeField = true)]
		public bool Play { get; set; }

		/// <summary>
		/// <para>Set the quality attribute for the Flash movie.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "low","autolow","autohigh","medium","high","best"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "quality", NativeField = true)]
		public object Quality { get; set; }

		/// <summary>
		/// <para>Set the scale attribute for the Flash movie.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "showall","noborder","exactfit","noscale"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "scale", NativeField = true)]
		public object Scale { get; set; }

		/// <summary>
		/// <para>The URL of the Flash movie.</para>
		/// </summary>
		[JsProperty(Name = "source", NativeField = true)]
		public string Source { get; set; }

		/// <summary>
		/// <para>Set the &#8216;FlashVars&#8217; to pass variables to the Flash movie.</para>
		/// </summary>
		[JsProperty(Name = "variables", NativeField = true)]
		public object Variables { get; set; }

		/// <summary>
		/// <para>Set the wmode attribute for the Flash movie.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "window","opaque","transparent"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "wmode", NativeField = true)]
		public object Wmode { get; set; }

		#endregion Properties

		#region Methods

		public Flash() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Constructs a flash widget.</para>
		/// </summary>
		/// <param name="source">The URL of the Flash movie to display.</param>
		/// <param name="id">The unique id for the Flash movie.</param>
		public Flash(string source, string id = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowScriptAccess.</para>
		/// </summary>
		[JsMethod(Name = "getAllowScriptAccess")]
		public object GetAllowScriptAccess() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the DOM element of the Flash movie.</para>
		/// <para>Note: If you call the method before the widget is rendered, it will
		/// always return null. Therefore call the method after
		/// the <see cref="Appear"/> event is fired.</para>
		/// </summary>
		/// <returns>The DOM element of the Flash movie.</returns>
		[JsMethod(Name = "getFlashElement")]
		public qx.html.Element GetFlashElement() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property id.</para>
		/// </summary>
		[JsMethod(Name = "getId")]
		public string GetId() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property liveConnect.</para>
		/// </summary>
		[JsMethod(Name = "getLiveConnect")]
		public bool GetLiveConnect() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property loadTimeout.</para>
		/// </summary>
		[JsMethod(Name = "getLoadTimeout")]
		public double GetLoadTimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property loop.</para>
		/// </summary>
		[JsMethod(Name = "getLoop")]
		public bool GetLoop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property mayScript.</para>
		/// </summary>
		[JsMethod(Name = "getMayScript")]
		public bool GetMayScript() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property menu.</para>
		/// </summary>
		[JsMethod(Name = "getMenu")]
		public bool GetMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current loaded state from the Flash movie.</para>
		/// </summary>
		/// <returns>The loaded percent value.</returns>
		[JsMethod(Name = "getPercentLoaded")]
		public double GetPercentLoaded() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property play.</para>
		/// </summary>
		[JsMethod(Name = "getPlay")]
		public bool GetPlay() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property quality.</para>
		/// </summary>
		[JsMethod(Name = "getQuality")]
		public object GetQuality() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scale.</para>
		/// </summary>
		[JsMethod(Name = "getScale")]
		public object GetScale() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property source.</para>
		/// </summary>
		[JsMethod(Name = "getSource")]
		public string GetSource() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property variables.</para>
		/// </summary>
		[JsMethod(Name = "getVariables")]
		public object GetVariables() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property wmode.</para>
		/// </summary>
		[JsMethod(Name = "getWmode")]
		public object GetWmode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowScriptAccess
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowScriptAccess.</param>
		[JsMethod(Name = "initAllowScriptAccess")]
		public void InitAllowScriptAccess(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property id
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property id.</param>
		[JsMethod(Name = "initId")]
		public void InitId(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property liveConnect
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property liveConnect.</param>
		[JsMethod(Name = "initLiveConnect")]
		public void InitLiveConnect(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property loadTimeout
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property loadTimeout.</param>
		[JsMethod(Name = "initLoadTimeout")]
		public void InitLoadTimeout(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property loop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property loop.</param>
		[JsMethod(Name = "initLoop")]
		public void InitLoop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property mayScript
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property mayScript.</param>
		[JsMethod(Name = "initMayScript")]
		public void InitMayScript(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property menu
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property menu.</param>
		[JsMethod(Name = "initMenu")]
		public void InitMenu(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property play
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property play.</param>
		[JsMethod(Name = "initPlay")]
		public void InitPlay(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property quality
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property quality.</param>
		[JsMethod(Name = "initQuality")]
		public void InitQuality(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scale
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scale.</param>
		[JsMethod(Name = "initScale")]
		public void InitScale(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property source
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property source.</param>
		[JsMethod(Name = "initSource")]
		public void InitSource(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property variables
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property variables.</param>
		[JsMethod(Name = "initVariables")]
		public void InitVariables(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property wmode
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property wmode.</param>
		[JsMethod(Name = "initWmode")]
		public void InitWmode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property liveConnect equals true.</para>
		/// </summary>
		[JsMethod(Name = "isLiveConnect")]
		public void IsLiveConnect() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the movie is loaded.</para>
		/// </summary>
		/// <returns>true When the movie is completely loaded, otherwise false.</returns>
		[JsMethod(Name = "isLoaded")]
		public bool IsLoaded() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property loop equals true.</para>
		/// </summary>
		[JsMethod(Name = "isLoop")]
		public void IsLoop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property mayScript equals true.</para>
		/// </summary>
		[JsMethod(Name = "isMayScript")]
		public void IsMayScript() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property menu equals true.</para>
		/// </summary>
		[JsMethod(Name = "isMenu")]
		public void IsMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property play equals true.</para>
		/// </summary>
		[JsMethod(Name = "isPlay")]
		public void IsPlay() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowScriptAccess.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowScriptAccess")]
		public void ResetAllowScriptAccess() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property id.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetId")]
		public void ResetId() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property liveConnect.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLiveConnect")]
		public void ResetLiveConnect() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property loadTimeout.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLoadTimeout")]
		public void ResetLoadTimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property loop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLoop")]
		public void ResetLoop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property mayScript.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMayScript")]
		public void ResetMayScript() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property menu.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMenu")]
		public void ResetMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property play.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPlay")]
		public void ResetPlay() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property quality.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetQuality")]
		public void ResetQuality() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scale.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScale")]
		public void ResetScale() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property source.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSource")]
		public void ResetSource() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property variables.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetVariables")]
		public void ResetVariables() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property wmode.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWmode")]
		public void ResetWmode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowScriptAccess.</para>
		/// </summary>
		/// <param name="value">New value for property allowScriptAccess.</param>
		[JsMethod(Name = "setAllowScriptAccess")]
		public void SetAllowScriptAccess(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property id.</para>
		/// </summary>
		/// <param name="value">New value for property id.</param>
		[JsMethod(Name = "setId")]
		public void SetId(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property liveConnect.</para>
		/// </summary>
		/// <param name="value">New value for property liveConnect.</param>
		[JsMethod(Name = "setLiveConnect")]
		public void SetLiveConnect(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property loadTimeout.</para>
		/// </summary>
		/// <param name="value">New value for property loadTimeout.</param>
		[JsMethod(Name = "setLoadTimeout")]
		public void SetLoadTimeout(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property loop.</para>
		/// </summary>
		/// <param name="value">New value for property loop.</param>
		[JsMethod(Name = "setLoop")]
		public void SetLoop(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property mayScript.</para>
		/// </summary>
		/// <param name="value">New value for property mayScript.</param>
		[JsMethod(Name = "setMayScript")]
		public void SetMayScript(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property menu.</para>
		/// </summary>
		/// <param name="value">New value for property menu.</param>
		[JsMethod(Name = "setMenu")]
		public void SetMenu(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property play.</para>
		/// </summary>
		/// <param name="value">New value for property play.</param>
		[JsMethod(Name = "setPlay")]
		public void SetPlay(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property quality.</para>
		/// </summary>
		/// <param name="value">New value for property quality.</param>
		[JsMethod(Name = "setQuality")]
		public void SetQuality(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scale.</para>
		/// </summary>
		/// <param name="value">New value for property scale.</param>
		[JsMethod(Name = "setScale")]
		public void SetScale(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property source.</para>
		/// </summary>
		/// <param name="value">New value for property source.</param>
		[JsMethod(Name = "setSource")]
		public void SetSource(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property variables.</para>
		/// </summary>
		/// <param name="value">New value for property variables.</param>
		[JsMethod(Name = "setVariables")]
		public void SetVariables(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property wmode.</para>
		/// </summary>
		/// <param name="value">New value for property wmode.</param>
		[JsMethod(Name = "setWmode")]
		public void SetWmode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property liveConnect.</para>
		/// </summary>
		[JsMethod(Name = "toggleLiveConnect")]
		public void ToggleLiveConnect() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property loop.</para>
		/// </summary>
		[JsMethod(Name = "toggleLoop")]
		public void ToggleLoop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property mayScript.</para>
		/// </summary>
		[JsMethod(Name = "toggleMayScript")]
		public void ToggleMayScript() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property menu.</para>
		/// </summary>
		[JsMethod(Name = "toggleMenu")]
		public void ToggleMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property play.</para>
		/// </summary>
		[JsMethod(Name = "togglePlay")]
		public void TogglePlay() { throw new NotImplementedException(); }

		#endregion Methods
    }
}