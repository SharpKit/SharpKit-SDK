// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.embed
{
    /// <summary>
	/// <para>Abstract base class for iframe widgets.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.embed.AbstractIframe", OmitOptionalParameters = true, Export = false)]
    public partial class AbstractIframe : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// <para>The &#8220;load&#8221; event is fired after the iframe content has successfully been loaded.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnLoad;

		/// <summary>
		/// <para>The &#8220;navigate&#8221; event is fired whenever the location of the iframe
		/// changes.</para>
		/// <para>Useful to track user navigation and internally used to keep the source
		/// property in sync. Only works when the destination source is of same
		/// origin than the page embedding the iframe.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnNavigate;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Name of the iframe.</para>
		/// </summary>
		[JsProperty(Name = "frameName", NativeField = true)]
		public string FrameName { get; set; }

		/// <summary>
		/// <para>Source URL of the iframe.</para>
		/// </summary>
		[JsProperty(Name = "source", NativeField = true)]
		public string Source { get; set; }

		#endregion Properties

		#region Methods

		public AbstractIframe() { throw new NotImplementedException(); }

		/// <param name="source">URL which should initally set.</param>
		public AbstractIframe(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the HTML body element of the iframe.</para>
		/// </summary>
		/// <returns>The DOM node of the body element of the iframe.</returns>
		[JsMethod(Name = "getBody")]
		public qx.html.Element GetBody() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the DOM document object of an iframe.</para>
		/// </summary>
		/// <returns>The DOM document object of the iframe.</returns>
		[JsMethod(Name = "getDocument")]
		public Document GetDocument() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property frameName.</para>
		/// </summary>
		[JsMethod(Name = "getFrameName")]
		public string GetFrameName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the current name.</para>
		/// </summary>
		/// <returns>The iframe&#8217;s name.</returns>
		[JsMethod(Name = "getName")]
		public string GetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property source.</para>
		/// </summary>
		[JsMethod(Name = "getSource")]
		public string GetSource() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the DOM window object of an iframe.</para>
		/// </summary>
		/// <returns>The DOM window object of the iframe.</returns>
		[JsMethod(Name = "getWindow")]
		public Window GetWindow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property frameName
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property frameName.</param>
		[JsMethod(Name = "initFrameName")]
		public void InitFrameName(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property source
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property source.</param>
		[JsMethod(Name = "initSource")]
		public void InitSource(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Reload the contents of the iframe.</para>
		/// </summary>
		[JsMethod(Name = "reload")]
		public void Reload() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property frameName.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFrameName")]
		public void ResetFrameName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property source.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSource")]
		public void ResetSource() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property frameName.</para>
		/// </summary>
		/// <param name="value">New value for property frameName.</param>
		[JsMethod(Name = "setFrameName")]
		public void SetFrameName(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property source.</para>
		/// </summary>
		/// <param name="value">New value for property source.</param>
		[JsMethod(Name = "setSource")]
		public void SetSource(string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}