// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;

namespace qx.ui.tabview
{
    /// <summary>
	/// <para>A tab view is a multi page view where only one page is visible
	/// at each moment. It is possible to switch the pages using the
	/// buttons rendered by each page.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.tabview.TabView", OmitOptionalParameters = true, Export = false)]
    public partial class TabView : qx.ui.core.Widget, qx.ui.core.ISingleSelection
    {
		#region Events

		/// <summary>
		/// <para>Fires after the selection was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelection;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>This property defines on which side of the TabView the bar should be positioned.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "left","right","top","bottom"
		/// </remarks>
		[JsProperty(Name = "barPosition", NativeField = true)]
		public object BarPosition { get; set; }

		/// <summary>
		/// <para>The &#8216;contentPadding&#8217; property is a shorthand property for setting &#8216;contentPaddingTop&#8217;,
		/// &#8216;contentPaddingRight&#8217;, &#8216;contentPaddingBottom&#8217; and &#8216;contentPaddingLeft&#8217;
		/// at the same time.</para>
		/// <para>If four values are specified they apply to top, right, bottom and left respectively.
		/// If there is only one value, it applies to all sides, if there are two or three,
		/// the missing values are taken from the opposite side.</para>
		/// </summary>
		[JsProperty(Name = "contentPadding", NativeField = true)]
		public object ContentPadding { get; set; }

		/// <summary>
		/// <para>Bottom padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingBottom", NativeField = true)]
		public double ContentPaddingBottom { get; set; }

		/// <summary>
		/// <para>Left padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingLeft", NativeField = true)]
		public double ContentPaddingLeft { get; set; }

		/// <summary>
		/// <para>Right padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingRight", NativeField = true)]
		public double ContentPaddingRight { get; set; }

		/// <summary>
		/// <para>Top padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingTop", NativeField = true)]
		public double ContentPaddingTop { get; set; }

		#endregion Properties

		#region Methods

		public TabView() { throw new NotImplementedException(); }

		/// <param name="barPosition">Initial bar position (#barPosition)</param>
		public TabView(string barPosition) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a page to the tabview including its needed button
		/// (contained in the page).</para>
		/// </summary>
		/// <param name="page">The page which should be added.</param>
		[JsMethod(Name = "add")]
		public void Add(qx.ui.tabview.Page page) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a page to the tabview including its needed button
		/// (contained in the page).</para>
		/// </summary>
		/// <param name="page">The page which should be added.</param>
		/// <param name="index">Optional position where to add the page.</param>
		[JsMethod(Name = "addAt")]
		public void AddAt(qx.ui.tabview.Page page, double? index = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property barPosition.</para>
		/// </summary>
		[JsMethod(Name = "getBarPosition")]
		public object GetBarPosition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns TabView&#8217;s children widgets.</para>
		/// </summary>
		/// <returns>List of children.</returns>
		[JsMethod(Name = "getChildren")]
		public qx.ui.tabview.Page GetChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all elements which are selectable.</para>
		/// </summary>
		/// <param name="all">true for all selectables, false for the selectables the user can interactively select</param>
		/// <returns>The contained items.</returns>
		[JsMethod(Name = "getSelectables")]
		public qx.ui.core.Widget GetSelectables(bool all) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an array of currently selected items.</para>
		/// <para>Note: The result is only a set of selected items, so the order can
		/// differ from the sequence in which the items were added.</para>
		/// </summary>
		/// <returns>List of items.</returns>
		[JsMethod(Name = "getSelection")]
		public qx.ui.core.Widget GetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the position of the given page in the TabView.</para>
		/// </summary>
		/// <param name="page">The page to query for.</param>
		/// <returns>Position of the page in the TabView.</returns>
		[JsMethod(Name = "indexOf")]
		public double IndexOf(qx.ui.tabview.Page page) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property barPosition
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property barPosition.</param>
		[JsMethod(Name = "initBarPosition")]
		public void InitBarPosition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Detects whether the given item is currently selected.</para>
		/// </summary>
		/// <param name="item">Any valid selectable item</param>
		/// <returns>Whether the item is selected.</returns>
		[JsMethod(Name = "isSelected")]
		public bool IsSelected(qx.ui.core.Widget item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the selection is empty.</para>
		/// </summary>
		/// <returns>Whether the selection is empty.</returns>
		[JsMethod(Name = "isSelectionEmpty")]
		public bool IsSelectionEmpty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes a page (and its corresponding button) from the TabView.</para>
		/// </summary>
		/// <param name="page">The page to be removed.</param>
		[JsMethod(Name = "remove")]
		public void Remove(qx.ui.tabview.Page page) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property barPosition.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBarPosition")]
		public void ResetBarPosition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears the whole selection at once.</para>
		/// </summary>
		[JsMethod(Name = "resetSelection")]
		public void ResetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property barPosition.</para>
		/// </summary>
		/// <param name="value">New value for property barPosition.</param>
		[JsMethod(Name = "setBarPosition")]
		public void SetBarPosition(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Replaces current selection with the given items.</para>
		/// </summary>
		/// <param name="items">Items to select.</param>
		[JsMethod(Name = "setSelection")]
		public void SetSelection(qx.ui.core.Widget items) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingBottom.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingBottom")]
		public double GetContentPaddingBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingLeft.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingLeft")]
		public double GetContentPaddingLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingRight.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingRight")]
		public double GetContentPaddingRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingTop.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingTop")]
		public double GetContentPaddingTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingBottom.</param>
		[JsMethod(Name = "initContentPaddingBottom")]
		public void InitContentPaddingBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingLeft.</param>
		[JsMethod(Name = "initContentPaddingLeft")]
		public void InitContentPaddingLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingRight.</param>
		[JsMethod(Name = "initContentPaddingRight")]
		public void InitContentPaddingRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingTop.</param>
		[JsMethod(Name = "initContentPaddingTop")]
		public void InitContentPaddingTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPadding.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPadding")]
		public void ResetContentPadding() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingBottom")]
		public void ResetContentPaddingBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingLeft")]
		public void ResetContentPaddingLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingRight")]
		public void ResetContentPaddingRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingTop")]
		public void ResetContentPaddingTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group contentPadding.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="contentPaddingTop">Sets the value of the property #contentPaddingTop.</param>
		/// <param name="contentPaddingRight">Sets the value of the property #contentPaddingRight.</param>
		/// <param name="contentPaddingBottom">Sets the value of the property #contentPaddingBottom.</param>
		/// <param name="contentPaddingLeft">Sets the value of the property #contentPaddingLeft.</param>
		[JsMethod(Name = "setContentPadding")]
		public void SetContentPadding(object contentPaddingTop, object contentPaddingRight, object contentPaddingBottom, object contentPaddingLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingBottom.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingBottom.</param>
		[JsMethod(Name = "setContentPaddingBottom")]
		public void SetContentPaddingBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingLeft.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingLeft.</param>
		[JsMethod(Name = "setContentPaddingLeft")]
		public void SetContentPaddingLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingRight.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingRight.</param>
		[JsMethod(Name = "setContentPaddingRight")]
		public void SetContentPaddingRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingTop.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingTop.</param>
		[JsMethod(Name = "setContentPaddingTop")]
		public void SetContentPaddingTop(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}