// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.tabview
{
    /// <summary>
	/// <para>A page is the way to add content to a <see cref="TabView"/>. Each page gets a
	/// button to switch to the page. Only one page is visible at a time.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.tabview.Page", OmitOptionalParameters = true, Export = false)]
    public partial class Page : qx.ui.container.Composite
    {
		#region Events

		/// <summary>
		/// <para>Fired by <see cref="qx.ui.tabview.TabButton"/> if the close button is clicked.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnClose;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Any URI String supported by qx.ui.basic.Image to display an icon in Page&#8217;s button.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "icon", NativeField = true)]
		public string Icon { get; set; }

		/// <summary>
		/// <para>The label/caption/text of the Page&#8217;s button.</para>
		/// </summary>
		[JsProperty(Name = "label", NativeField = true)]
		public string Label { get; set; }

		/// <summary>
		/// <para>Indicates if the close button of a TabButton should be shown.</para>
		/// </summary>
		[JsProperty(Name = "showCloseButton", NativeField = true)]
		public bool ShowCloseButton { get; set; }

		#endregion Properties

		#region Methods

		public Page() { throw new NotImplementedException(); }

		/// <param name="label">Initial label of the tab</param>
		/// <param name="icon">Initial icon of the tab</param>
		public Page(string label, string icon) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property icon.</para>
		/// </summary>
		[JsMethod(Name = "getIcon")]
		public string GetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property label.</para>
		/// </summary>
		[JsMethod(Name = "getLabel")]
		public string GetLabel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showCloseButton.</para>
		/// </summary>
		[JsMethod(Name = "getShowCloseButton")]
		public bool GetShowCloseButton() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property icon
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property icon.</param>
		[JsMethod(Name = "initIcon")]
		public void InitIcon(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property label
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property label.</param>
		[JsMethod(Name = "initLabel")]
		public void InitLabel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showCloseButton
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showCloseButton.</param>
		[JsMethod(Name = "initShowCloseButton")]
		public void InitShowCloseButton(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showCloseButton equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowCloseButton")]
		public void IsShowCloseButton() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property icon.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIcon")]
		public void ResetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property label.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLabel")]
		public void ResetLabel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showCloseButton.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowCloseButton")]
		public void ResetShowCloseButton() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property icon.</para>
		/// </summary>
		/// <param name="value">New value for property icon.</param>
		[JsMethod(Name = "setIcon")]
		public void SetIcon(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property label.</para>
		/// </summary>
		/// <param name="value">New value for property label.</param>
		[JsMethod(Name = "setLabel")]
		public void SetLabel(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showCloseButton.</para>
		/// </summary>
		/// <param name="value">New value for property showCloseButton.</param>
		[JsMethod(Name = "setShowCloseButton")]
		public void SetShowCloseButton(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showCloseButton.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowCloseButton")]
		public void ToggleShowCloseButton() { throw new NotImplementedException(); }

		#endregion Methods
    }
}