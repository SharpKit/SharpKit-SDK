// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.menu
{
    /// <summary>
	/// <para>Layouter used by the qooxdoo menu&#8217;s to render their buttons</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.menu.Layout", OmitOptionalParameters = true, Export = false)]
    public partial class Layout : qx.ui.layout.VBox
    {
		#region Properties

		/// <summary>
		/// <para>Default arrow column width if no sub menus are rendered</para>
		/// </summary>
		[JsProperty(Name = "arrowColumnWidth", NativeField = true)]
		public double ArrowColumnWidth { get; set; }

		/// <summary>
		/// <para>Spacing between each cell on the menu buttons</para>
		/// </summary>
		[JsProperty(Name = "columnSpacing", NativeField = true)]
		public double ColumnSpacing { get; set; }

		/// <summary>
		/// <para>Default icon column width if no icons are rendered</para>
		/// </summary>
		[JsProperty(Name = "iconColumnWidth", NativeField = true)]
		public double IconColumnWidth { get; set; }

		/// <summary>
		/// <para>Whether a column and which column should automatically span
		/// when the following cell is empty. Spanning may be disabled
		/// through setting this property to null.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "spanColumn", NativeField = true)]
		public double SpanColumn { get; set; }

		#endregion Properties

		#region Methods

		public Layout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property arrowColumnWidth.</para>
		/// </summary>
		[JsMethod(Name = "getArrowColumnWidth")]
		public double GetArrowColumnWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the column sizes detected during the pre-layout phase</para>
		/// </summary>
		/// <returns>List of all column widths</returns>
		[JsMethod(Name = "getColumnSizes")]
		public JsArray GetColumnSizes() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property columnSpacing.</para>
		/// </summary>
		[JsMethod(Name = "getColumnSpacing")]
		public double GetColumnSpacing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property iconColumnWidth.</para>
		/// </summary>
		[JsMethod(Name = "getIconColumnWidth")]
		public double GetIconColumnWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property spanColumn.</para>
		/// </summary>
		[JsMethod(Name = "getSpanColumn")]
		public double GetSpanColumn() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property arrowColumnWidth
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property arrowColumnWidth.</param>
		[JsMethod(Name = "initArrowColumnWidth")]
		public void InitArrowColumnWidth(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property columnSpacing
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property columnSpacing.</param>
		[JsMethod(Name = "initColumnSpacing")]
		public void InitColumnSpacing(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property iconColumnWidth
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property iconColumnWidth.</param>
		[JsMethod(Name = "initIconColumnWidth")]
		public void InitIconColumnWidth(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property spanColumn
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property spanColumn.</param>
		[JsMethod(Name = "initSpanColumn")]
		public void InitSpanColumn(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property arrowColumnWidth.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetArrowColumnWidth")]
		public void ResetArrowColumnWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property columnSpacing.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColumnSpacing")]
		public void ResetColumnSpacing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property iconColumnWidth.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIconColumnWidth")]
		public void ResetIconColumnWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property spanColumn.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSpanColumn")]
		public void ResetSpanColumn() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property arrowColumnWidth.</para>
		/// </summary>
		/// <param name="value">New value for property arrowColumnWidth.</param>
		[JsMethod(Name = "setArrowColumnWidth")]
		public void SetArrowColumnWidth(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property columnSpacing.</para>
		/// </summary>
		/// <param name="value">New value for property columnSpacing.</param>
		[JsMethod(Name = "setColumnSpacing")]
		public void SetColumnSpacing(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property iconColumnWidth.</para>
		/// </summary>
		/// <param name="value">New value for property iconColumnWidth.</param>
		[JsMethod(Name = "setIconColumnWidth")]
		public void SetIconColumnWidth(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property spanColumn.</para>
		/// </summary>
		/// <param name="value">New value for property spanColumn.</param>
		[JsMethod(Name = "setSpanColumn")]
		public void SetSpanColumn(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}