// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.list
{
    /// <summary>
	/// <para>The list widget displays the data of a model in a list.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// // Data for the list
	/// var data = [
	/// {title : "Row1", subtitle : "Sub1"},
	/// {title : "Row2", subtitle : "Sub2"},
	/// {title : "Row3", subtitle : "Sub3"}
	/// ];
	/// // Create the list with a delegate that
	/// // configures the list item.
	/// var list = new qx.ui.mobile.list.List({
	/// configureItem : function(item, data, row)
	/// {
	/// item.setTitle(data.title);
	/// item.setSubtitle(data.subtitle);
	/// item.setShowArrow(true);
	/// }
	/// });
	/// // Set the model of the list
	/// list.setModel(new qx.data.Array(data));
	/// // Add an changeSelection event
	/// list.addListener("changeSelection", function(evt) {
	/// alert("Index: " + evt.getData())
	/// }, this);
	/// this.getRoot.add(list);
	/// </code>
	/// <para>This example creates a list with a delegate that configures the list item with
	/// the given data. A listener for the event <see cref="ChangeSelection"/> is added.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.list.List", OmitOptionalParameters = true, Export = false)]
    public partial class List : qx.ui.mobile.core.Widget
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Delegate"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeDelegate;

		/// <summary>
		/// Fired on change of the property <see cref="Model"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModel;

		/// <summary>
		/// <para>Fired when the selection is changed.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelection;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>Delegation object which can have one or more functions defined by the
		/// <see cref="qx.ui.mobile.list.IListDelegate"/> interface.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "delegate", NativeField = true)]
		public object Delegate { get; set; }

		/// <summary>
		/// <para>Number of items to display. Auto set by model.
		/// Reset to limit the amount of data that should be displayed.</para>
		/// </summary>
		[JsProperty(Name = "itemCount", NativeField = true)]
		public double ItemCount { get; set; }

		/// <summary>
		/// <para>The model to use to render the list.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "model", NativeField = true)]
		public qx.data.Array Model { get; set; }

		#endregion Properties

		#region Methods

		public List() { throw new NotImplementedException(); }

		/// <param name="delegatex">The #delegate to use</param>
		public List(object delegatex = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property delegate.</para>
		/// </summary>
		[JsMethod(Name = "getDelegate")]
		public object GetDelegate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property itemCount.</para>
		/// </summary>
		[JsMethod(Name = "getItemCount")]
		public double GetItemCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property model.</para>
		/// </summary>
		[JsMethod(Name = "getModel")]
		public qx.data.Array GetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property delegate
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property delegate.</param>
		[JsMethod(Name = "initDelegate")]
		public void InitDelegate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property itemCount
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property itemCount.</param>
		[JsMethod(Name = "initItemCount")]
		public void InitItemCount(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property model
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property model.</param>
		[JsMethod(Name = "initModel")]
		public void InitModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property delegate.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDelegate")]
		public void ResetDelegate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property itemCount.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetItemCount")]
		public void ResetItemCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property model.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetModel")]
		public void ResetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property delegate.</para>
		/// </summary>
		/// <param name="value">New value for property delegate.</param>
		[JsMethod(Name = "setDelegate")]
		public void SetDelegate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property itemCount.</para>
		/// </summary>
		/// <param name="value">New value for property itemCount.</param>
		[JsMethod(Name = "setItemCount")]
		public void SetItemCount(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property model.</para>
		/// </summary>
		/// <param name="value">New value for property model.</param>
		[JsMethod(Name = "setModel")]
		public void SetModel(qx.data.Array value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}