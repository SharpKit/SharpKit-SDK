// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.dialog
{
    /// <summary>
	/// <para>This widget displays a dialog.</para>
	/// <para>Example</para>
	/// <code>
	/// var label = new qx.ui.mobile.basic.Label("Hello World");
	/// var dialog = new qx.ui.mobile.dialog.Dialog(label);
	/// dialog.setTitle("Info");
	/// dialog.setModal(true); // true by default
	/// dialog.show();
	/// </code>
	/// <para>This example creates a label widget and adds this widget to a dialog.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.dialog.Dialog", OmitOptionalParameters = true, Export = false)]
    public partial class Dialog : qx.ui.mobile.dialog.Popup
    {
		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>Whether the dialog should be displayed modal.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "modal", NativeField = true)]
		public bool Modal { get; set; }

		#endregion Properties

		#region Methods

		public Dialog() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property modal.</para>
		/// </summary>
		[JsMethod(Name = "getModal")]
		public bool GetModal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hides the blocker. The blocker is only hidden when the hide method
		/// is called as many times as the <see cref="Show"/> method.</para>
		/// </summary>
		[JsMethod(Name = "hide")]
		public void Hide() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property modal
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property modal.</param>
		[JsMethod(Name = "initModal")]
		public void InitModal(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property modal equals true.</para>
		/// </summary>
		[JsMethod(Name = "isModal")]
		public void IsModal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property modal.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetModal")]
		public void ResetModal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property modal.</para>
		/// </summary>
		/// <param name="value">New value for property modal.</param>
		[JsMethod(Name = "setModal")]
		public void SetModal(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Shows the blocker.</para>
		/// </summary>
		[JsMethod(Name = "show")]
		public void Show() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property modal.</para>
		/// </summary>
		[JsMethod(Name = "toggleModal")]
		public void ToggleModal() { throw new NotImplementedException(); }

		#endregion Methods
    }
}