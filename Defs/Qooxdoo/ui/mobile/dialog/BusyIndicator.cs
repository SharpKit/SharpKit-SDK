// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.dialog
{
    /// <summary>
	/// <para>The widget displays a busy indicator.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// var busyIndicator = new qx.ui.mobile.dialog.BusyIndicator("Please wait");
	/// this.getRoot().add(busyIndicator);
	/// </code>
	/// <para>This example create a widget to display the busy indicator.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.dialog.BusyIndicator", OmitOptionalParameters = true, Export = false)]
    public partial class BusyIndicator : qx.ui.mobile.basic.Atom
    {
		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>The spinner css class to use.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "spinnerClass", NativeField = true)]
		public string SpinnerClass { get; set; }

		#endregion Properties

		#region Methods

		public BusyIndicator() { throw new NotImplementedException(); }

		/// <param name="label">Label to use</param>
		public BusyIndicator(string label) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property spinnerClass.</para>
		/// </summary>
		[JsMethod(Name = "getSpinnerClass")]
		public string GetSpinnerClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property spinnerClass
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property spinnerClass.</param>
		[JsMethod(Name = "initSpinnerClass")]
		public void InitSpinnerClass(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property spinnerClass.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSpinnerClass")]
		public void ResetSpinnerClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property spinnerClass.</para>
		/// </summary>
		/// <param name="value">New value for property spinnerClass.</param>
		[JsMethod(Name = "setSpinnerClass")]
		public void SetSpinnerClass(string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}