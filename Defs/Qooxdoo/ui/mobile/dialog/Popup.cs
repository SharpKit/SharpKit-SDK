// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.dialog
{
    /// <summary>
	/// <para>The popup represents a widget that gets shown above other widgets,
	/// usually to present more info/details regarding an item in the application.</para>
	/// <para>There are 3 usages for now:</para>
	/// <code>
	/// var widget = new qx.ui.mobile.form.Button("Error!");
	/// var popup = new qx.ui.mobile.dialog.Popup(widget);
	/// popup.show();
	/// </code>
	/// <para>Here we show a popup consisting of a single buttons alerting the user
	/// that an error has occured.
	/// It will be centered to the screen.</para>
	/// <code>
	/// var label = new qx.ui.mobile.basic.Label("Item1");
	/// var widget = new qx.ui.mobile.form.Button("Error!");
	/// var popup = new qx.ui.mobile.dialog.Popup(widget, label);
	/// popup.show();
	/// widget.addListener("tap", function(){
	/// popup.hide();
	/// });
	/// </code>
	/// <para>In this case everything is as above, except that the popup will get shown next to &#8220;label&#8221;
	/// so that the user can understand that the info presented is about the &#8220;Item1&#8221;
	/// we also add a tap listener to the button that will hide out popup.</para>
	/// <para>Once created, the instance is reused between show/hide calls.</para>
	/// <code>
	/// var widget = new qx.ui.mobile.form.Button("Error!");
	/// var popup = new qx.ui.mobile.dialog.Popup(widget);
	/// popup.placeTo(25,100);
	/// popup.show();
	/// </code>
	/// <para>Same as the first example, but this time the popup will be shown at the 25,100 coordinates.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.dialog.Popup", OmitOptionalParameters = true, Export = false)]
    public partial class Popup : qx.ui.mobile.core.Widget
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Icon"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeIcon;

		/// <summary>
		/// Fired on change of the property <see cref="Title"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeTitle;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>Any URI String supported by qx.ui.mobile.basic.Image to display an icon</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "icon", NativeField = true)]
		public string Icon { get; set; }

		/// <summary>
		/// <para>The label/caption/text of the qx.ui.mobile.basic.Atom instance</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "title", NativeField = true)]
		public string Title { get; set; }

		#endregion Properties

		#region Methods

		public Popup() { throw new NotImplementedException(); }

		/// <param name="widget">the widget the will be shown in the popup</param>
		/// <param name="anchor">optional parameter, a widget to attach this popup to</param>
		public Popup(qx.ui.mobile.core.Widget widget, qx.ui.mobile.core.Widget anchor) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds the widget that will be shown in this popup. This method can be used in the case when you have removed the widget from the popup
		/// or you haven&#8217;t passed it in the constructor.</para>
		/// </summary>
		/// <param name="widget">- what to show in the popup</param>
		[JsMethod(Name = "add")]
		public void Add(qx.ui.mobile.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property icon.</para>
		/// </summary>
		[JsMethod(Name = "getIcon")]
		public string GetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property title.</para>
		/// </summary>
		[JsMethod(Name = "getTitle")]
		public string GetTitle() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the title widget.</para>
		/// </summary>
		/// <returns>The title widget.</returns>
		[JsMethod(Name = "getTitleWidget")]
		public qx.ui.mobile.basic.Atom GetTitleWidget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hides the popup.</para>
		/// </summary>
		[JsMethod(Name = "hide")]
		public void Hide() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property icon
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property icon.</param>
		[JsMethod(Name = "initIcon")]
		public void InitIcon(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property title
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property title.</param>
		[JsMethod(Name = "initTitle")]
		public void InitTitle(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the shown state of this popup.</para>
		/// </summary>
		/// <returns>whether the popup is shown or not.</returns>
		[JsMethod(Name = "isShown")]
		public bool IsShown() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method positions the popup widget at the coordinates specified.</para>
		/// </summary>
		/// <param name="left">- the value the will be set to container&#8217;s left style property</param>
		/// <param name="top">- the value the will be set to container&#8217;s top style property</param>
		[JsMethod(Name = "placeTo")]
		public void PlaceTo(double left, double top) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method removes the widget shown in the popup.</para>
		/// </summary>
		/// <returns>The removed widget or null if the popup doesn&#8217;t have an attached widget</returns>
		[JsMethod(Name = "removeWidget")]
		public qx.ui.mobile.core.Widget RemoveWidget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property icon.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIcon")]
		public void ResetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property title.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTitle")]
		public void ResetTitle() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>A widget to attach this popup to.</para>
		/// </summary>
		/// <param name="widget">The anchor widget.</param>
		[JsMethod(Name = "setAnchor")]
		public void SetAnchor(qx.ui.mobile.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property icon.</para>
		/// </summary>
		/// <param name="value">New value for property icon.</param>
		[JsMethod(Name = "setIcon")]
		public void SetIcon(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property title.</para>
		/// </summary>
		/// <param name="value">New value for property title.</param>
		[JsMethod(Name = "setTitle")]
		public void SetTitle(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method shows the popup.
		/// First it updates the position, then registers the event handlers, and shows it.</para>
		/// </summary>
		[JsMethod(Name = "show")]
		public void Show() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the visibility of this popup.</para>
		/// </summary>
		[JsMethod(Name = "toggleVisibility")]
		public void ToggleVisibility() { throw new NotImplementedException(); }

		#endregion Methods
    }
}