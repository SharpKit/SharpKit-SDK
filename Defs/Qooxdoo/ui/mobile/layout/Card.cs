// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.layout
{
    /// <summary>
	/// <para>A card layout.</para>
	/// <para>The card layout lays out widgets in a stack. Call show to display a widget.
	/// Only the widget which show method is called is displayed. All other widgets are excluded.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the Card layout.</para>
	/// <code>
	/// var layout = new qx.ui.mobile.layout.Card());
	/// var container = new qx.ui.mobile.container.Composite(layout);
	/// var label1 = new qx.ui.mobile.basic.Label("1");
	/// container.add(label1);
	/// var label2 = new qx.ui.mobile.basic.Label("2");
	/// container.add(label2);
	/// label2.show();
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.layout.Card", OmitOptionalParameters = true, Export = false)]
    public partial class Card : qx.ui.mobile.layout.Abstract
    {
		#region Events

		/// <summary>
		/// <para>Fired when the animation of a page transition ends</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnAnimationEnd;

		/// <summary>
		/// <para>Fired when the animation of a page transition starts</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnAnimationStart;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The default animation to use for page transition</para>
		/// </summary>
		[JsProperty(Name = "defaultAnimation", NativeField = true)]
		public string DefaultAnimation { get; set; }

		/// <summary>
		/// <para>Flag which indicates, whether animation is needed, or widgets should only swap.</para>
		/// </summary>
		[JsProperty(Name = "showAnimation", NativeField = true)]
		public bool ShowAnimation { get; set; }

		#endregion Properties

		#region Methods

		public Card() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Connects the layout to a given child widget. Can be overridden in a concrete
		/// interface implementation.</para>
		/// </summary>
		/// <param name="widget">The widget to connect to</param>
		[JsMethod(Name = "connectToChildWidget")]
		public void ConnectToChildWidget(qx.ui.mobile.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Disconnects the layout from a given child widget. Can be overridden in a concrete
		/// interface implementation.</para>
		/// </summary>
		/// <param name="widget">The widget to connect to</param>
		[JsMethod(Name = "disconnectFromChildWidget")]
		public void DisconnectFromChildWidget(qx.ui.mobile.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property defaultAnimation.</para>
		/// </summary>
		[JsMethod(Name = "getDefaultAnimation")]
		public string GetDefaultAnimation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showAnimation.</para>
		/// </summary>
		[JsMethod(Name = "getShowAnimation")]
		public bool GetShowAnimation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property defaultAnimation
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property defaultAnimation.</param>
		[JsMethod(Name = "initDefaultAnimation")]
		public void InitDefaultAnimation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showAnimation
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showAnimation.</param>
		[JsMethod(Name = "initShowAnimation")]
		public void InitShowAnimation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showAnimation equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowAnimation")]
		public void IsShowAnimation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property defaultAnimation.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDefaultAnimation")]
		public void ResetDefaultAnimation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showAnimation.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowAnimation")]
		public void ResetShowAnimation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property defaultAnimation.</para>
		/// </summary>
		/// <param name="value">New value for property defaultAnimation.</param>
		[JsMethod(Name = "setDefaultAnimation")]
		public void SetDefaultAnimation(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showAnimation.</para>
		/// </summary>
		/// <param name="value">New value for property showAnimation.</param>
		[JsMethod(Name = "setShowAnimation")]
		public void SetShowAnimation(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showAnimation.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowAnimation")]
		public void ToggleShowAnimation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Updates the layout. Method is called by a widget, when it changes its state.</para>
		/// </summary>
		/// <param name="widget">The target widget</param>
		/// <param name="action">The causing action that triggered the layout update.</param>
		/// <param name="properties">The animation properties to set. Key / value pairs.</param>
		[JsMethod(Name = "updateLayout")]
		public void UpdateLayout(qx.ui.mobile.core.Widget widget, string action, object properties) { throw new NotImplementedException(); }

		#endregion Methods
    }
}