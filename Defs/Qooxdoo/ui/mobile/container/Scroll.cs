// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.container
{
    /// <summary>
	/// <para>Container, which allows, depending on the set variant qx.mobile.nativescroll,
	/// vertical and horizontal scrolling if the contents is larger than the container.</para>
	/// <para>Note that this class can only have one child widget. This container has a
	/// fixed layout, which cannot be changed.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// // create the scroll widget
	/// var scroll = new qx.ui.mobile.container.Scroll()
	/// // add a children
	/// scroll.add(new qx.ui.mobile.basic.Label("Name: "));
	/// this.getRoot().add(scroll);
	/// </code>
	/// <para>This example creates a scroll container and adds a label to it.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.container.Scroll", OmitOptionalParameters = true, Export = false)]
    public partial class Scroll : qx.ui.mobile.container.Composite
    {
		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		#endregion Properties

		#region Methods

		public Scroll() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the refresh function the used scrolling method. Needed to recalculate the
		/// scrolling container.</para>
		/// </summary>
		[JsMethod(Name = "refresh")]
		public void Refresh() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the wrapper contents to the x/y coordinates in a given period.</para>
		/// </summary>
		/// <param name="x">X coordinate to scroll to.</param>
		/// <param name="y">Y coordinate to scroll to.</param>
		/// <param name="time">Time slice in which scrolling should be done.</param>
		[JsMethod(Name = "scrollTo")]
		public void ScrollTo(double x, double y, double time) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the wrapper contents to the widgets coordinates in a given
		/// period.</para>
		/// </summary>
		/// <param name="elementId">the elementId, the scroll container should scroll to.</param>
		/// <param name="time">Time slice in which scrolling should be done (in seconds).</param>
		[JsMethod(Name = "scrollToElement")]
		public void ScrollToElement(string elementId, double time) { throw new NotImplementedException(); }

		#endregion Methods
    }
}