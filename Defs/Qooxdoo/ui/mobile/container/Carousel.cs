// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.mobile.core;

namespace qx.ui.mobile.container
{
    /// <summary>
	/// <para>Creates a Carousel widget.
	/// A carousel is a widget which can switch between several sub pages <see cref=" qx.ui.mobile.container.Composite"/>.
	/// A page switch is triggered by a swipe to left, for next page, or a swipe to right for
	/// previous page.</para>
	/// <para>A carousel shows by default a pagination indicator at the bottom of the carousel.
	/// This pagination indicator can be hidden by property showPagination.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// var carousel = new qx.ui.mobile.container.Carousel();
	/// var carouselPage1 = new qx.ui.mobile.container.Composite();
	/// var carouselPage2 = new qx.ui.mobile.container.Composite();
	/// carouselPage1.add(new qx.ui.mobile.basic.Label("This is a carousel. Please swipe left."));
	/// carouselPage2.add(new qx.ui.mobile.basic.Label("Now swipe right."));
	/// carousel.add(carouselPage1);
	/// carousel.add(carouselPage2);
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.container.Carousel", OmitOptionalParameters = true, Export = false)]
    public partial class Carousel : qx.ui.mobile.container.Composite
    {
		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>Defines the height of the carousel.</para>
		/// </summary>
		[JsProperty(Name = "height", NativeField = true)]
		public double Height { get; set; }

		/// <summary>
		/// <para>Defines whether the carousel should scroll back to first or last page
		/// when the start/end of carousel pages is reached</para>
		/// </summary>
		[JsProperty(Name = "scrollLoop", NativeField = true)]
		public bool ScrollLoop { get; set; }

		/// <summary>
		/// <para>Property for setting visibility of pagination indicator</para>
		/// </summary>
		[JsProperty(Name = "showPagination", NativeField = true)]
		public bool ShowPagination { get; set; }

		/// <summary>
		/// <para>Whether the resize should fire the &#8220;domupdated&#8221; event. Set this to &#8220;true&#8221;
		/// whenever other elements should react on this size change (e.g. when the size
		/// change does not infect the size of the application, but other widgets should
		/// react).</para>
		/// </summary>
		[JsProperty(Name = "fireDomUpdatedOnResize", NativeField = true)]
		public bool FireDomUpdatedOnResize { get; set; }

		#endregion Properties

		#region Methods

		public Carousel() { throw new NotImplementedException(); }

		/// <param name="transitionDuration">transition duration on carouselPage change in seconds.</param>
		public Carousel(double transitionDuration = 0.4) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a page to the end of the carousel.</para>
		/// </summary>
		/// <param name="page">The composite which should be added as a page to the end of carousel.</param>
		[JsMethod(Name = "add")]
		public void Add(qx.ui.mobile.container.Composite page) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property height.</para>
		/// </summary>
		[JsMethod(Name = "getHeight")]
		public double GetHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scrollLoop.</para>
		/// </summary>
		[JsMethod(Name = "getScrollLoop")]
		public bool GetScrollLoop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current visible page index.</para>
		/// </summary>
		/// <returns>page index of the  qx.ui.mobile.container.Composite which is shown.</returns>
		[JsMethod(Name = "getShownPageIndex")]
		public double GetShownPageIndex() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showPagination.</para>
		/// </summary>
		[JsMethod(Name = "getShowPagination")]
		public bool GetShowPagination() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property height
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property height.</param>
		[JsMethod(Name = "initHeight")]
		public void InitHeight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scrollLoop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scrollLoop.</param>
		[JsMethod(Name = "initScrollLoop")]
		public void InitScrollLoop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showPagination
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showPagination.</param>
		[JsMethod(Name = "initShowPagination")]
		public void InitShowPagination(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property scrollLoop equals true.</para>
		/// </summary>
		[JsMethod(Name = "isScrollLoop")]
		public void IsScrollLoop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showPagination equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowPagination")]
		public void IsShowPagination() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the carousel to next page.</para>
		/// </summary>
		[JsMethod(Name = "nextPage")]
		public void NextPage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the carousel to previous page.</para>
		/// </summary>
		[JsMethod(Name = "previousPage")]
		public void PreviousPage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes a carousel page from carousel identified by its index.</para>
		/// </summary>
		/// <param name="pageIndex">The page index which should be removed from carousel.</param>
		[JsMethod(Name = "removePageByIndex")]
		public void RemovePageByIndex(double pageIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property height.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetHeight")]
		public void ResetHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scrollLoop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScrollLoop")]
		public void ResetScrollLoop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showPagination.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowPagination")]
		public void ResetShowPagination() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls the carousel to the page with the given pageIndex.</para>
		/// </summary>
		/// <param name="pageIndex">the target page index, which should be visible</param>
		/// <param name="showTransition">flag if a transition should be shown or not</param>
		[JsMethod(Name = "scrollToPage")]
		public void ScrollToPage(double pageIndex, bool showTransition = true) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property height.</para>
		/// </summary>
		/// <param name="value">New value for property height.</param>
		[JsMethod(Name = "setHeight")]
		public void SetHeight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scrollLoop.</para>
		/// </summary>
		/// <param name="value">New value for property scrollLoop.</param>
		[JsMethod(Name = "setScrollLoop")]
		public void SetScrollLoop(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showPagination.</para>
		/// </summary>
		/// <param name="value">New value for property showPagination.</param>
		[JsMethod(Name = "setShowPagination")]
		public void SetShowPagination(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>If velocity of swipe is above this value, the swipe will trigger a page change on carousel.
		/// A swipe to left would trigger an increase, a swipe to right a decrease of pageIndex.
		/// If velocity is below the limit, the snap mechanism of carousel will be used:
		/// A page change is only caused when the horizontal center of the page is moved above/below
		/// the horizontal center of the carousel.</para>
		/// </summary>
		/// <param name="limit">Target value of swipeVelocityLimit. Typical within the range of [0.1-10]. Default value is 1.5</param>
		[JsMethod(Name = "setSwipeVelocityLimit")]
		public void SetSwipeVelocityLimit(double limit) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property scrollLoop.</para>
		/// </summary>
		[JsMethod(Name = "toggleScrollLoop")]
		public void ToggleScrollLoop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showPagination.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowPagination")]
		public void ToggleShowPagination() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resizes the container element to the height of the parent element.</para>
		/// </summary>
		[JsMethod(Name = "fixSize")]
		public void FixSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property fireDomUpdatedOnResize.</para>
		/// </summary>
		[JsMethod(Name = "getFireDomUpdatedOnResize")]
		public bool GetFireDomUpdatedOnResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property fireDomUpdatedOnResize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property fireDomUpdatedOnResize.</param>
		[JsMethod(Name = "initFireDomUpdatedOnResize")]
		public void InitFireDomUpdatedOnResize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property fireDomUpdatedOnResize equals true.</para>
		/// </summary>
		[JsMethod(Name = "isFireDomUpdatedOnResize")]
		public void IsFireDomUpdatedOnResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes fixed size from container.</para>
		/// </summary>
		[JsMethod(Name = "releaseFixedSize")]
		public void ReleaseFixedSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property fireDomUpdatedOnResize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFireDomUpdatedOnResize")]
		public void ResetFireDomUpdatedOnResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property fireDomUpdatedOnResize.</para>
		/// </summary>
		/// <param name="value">New value for property fireDomUpdatedOnResize.</param>
		[JsMethod(Name = "setFireDomUpdatedOnResize")]
		public void SetFireDomUpdatedOnResize(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property fireDomUpdatedOnResize.</para>
		/// </summary>
		[JsMethod(Name = "toggleFireDomUpdatedOnResize")]
		public void ToggleFireDomUpdatedOnResize() { throw new NotImplementedException(); }

		#endregion Methods
    }
}