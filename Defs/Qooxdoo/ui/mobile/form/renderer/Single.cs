// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.form.renderer
{
    /// <summary>
	/// <para>Single renderer is a class used to render forms into a mobile page.
	/// It displays a label above or next to each form element.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.form.renderer.Single", OmitOptionalParameters = true, Export = false)]
    public partial class Single : qx.ui.mobile.form.renderer.AbstractRenderer
    {
		#region Methods

		public Single() { throw new NotImplementedException(); }

		public Single(object form) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a button the form renderer.</para>
		/// </summary>
		/// <param name="button">A button which should be added to the form.</param>
		/// <param name="options">The added additional data.</param>
		[JsMethod(Name = "addButton")]
		public void AddButton(qx.ui.form.Button button, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a group of form items with the corresponding names. The names should
		/// be displayed as hint for the user what to do with the form item.
		/// The title is optional and can be used as grouping for the given form
		/// items.</para>
		/// </summary>
		/// <param name="items">An array of form items to render.</param>
		/// <param name="names">An array of names for the form items.</param>
		/// <param name="title">A title of the group you are adding.</param>
		/// <param name="itemsOptions">The added additional data.</param>
		/// <param name="headerOptions">The options map as defined by the form for the current group header.</param>
		[JsMethod(Name = "addItems")]
		public void AddItems(qx.ui.core.Widget items, string names, string title, JsArray itemsOptions = null, object headerOptions = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hides a single item of this form</para>
		/// </summary>
		/// <param name="item">form item which should be hidden.</param>
		[JsMethod(Name = "hideItem")]
		public void HideItem(qx.ui.form.IForm item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the errors for the form by removing any error messages
		/// inserted into DOM in the case of invalid form elements</para>
		/// </summary>
		[JsMethod(Name = "resetForm")]
		public void ResetForm() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Shows an error to the user when a form element is in invalid state
		/// usually it prints an error message, so that user can rectify the filling of the form element.</para>
		/// </summary>
		/// <param name="item">the form item</param>
		[JsMethod(Name = "showErrorForItem")]
		public void ShowErrorForItem(qx.ui.mobile.core.Widget item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Shows a single item of this form</para>
		/// </summary>
		/// <param name="item">form item which should be hidden.</param>
		[JsMethod(Name = "showItem")]
		public void ShowItem(qx.ui.form.IForm item) { throw new NotImplementedException(); }

		#endregion Methods
    }
}