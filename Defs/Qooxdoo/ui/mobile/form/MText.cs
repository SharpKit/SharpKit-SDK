// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.form
{
    /// <summary>
	/// <para>The mixin contains all functionality to provide common properties for
	/// text fields.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.form.MText", OmitOptionalParameters = true, Export = false)]
    public partial class MText 
    {
		#region Properties

		/// <summary>
		/// <para>Maximal number of characters that can be entered in the input field.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "maxLength", NativeField = true)]
		public double MaxLength { get; set; }

		/// <summary>
		/// <para>String value which will be shown as a hint if the field is all of:
		/// unset, unfocused and enabled. Set to null to not show a placeholder
		/// text.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "placeholder", NativeField = true)]
		public string Placeholder { get; set; }

		/// <summary>
		/// <para>Whether the field is read only</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "readOnly", NativeField = true)]
		public bool ReadOnly { get; set; }

		#endregion Properties

		#region Methods

		public MText() { throw new NotImplementedException(); }

		/// <param name="value">The value of the widget.</param>
		public MText(object value = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the focus from this widget.</para>
		/// </summary>
		[JsMethod(Name = "blur")]
		public void Blur() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Points the focus of the form to this widget.</para>
		/// </summary>
		[JsMethod(Name = "focus")]
		public void Focus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property maxLength.</para>
		/// </summary>
		[JsMethod(Name = "getMaxLength")]
		public double GetMaxLength() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property placeholder.</para>
		/// </summary>
		[JsMethod(Name = "getPlaceholder")]
		public string GetPlaceholder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property readOnly.</para>
		/// </summary>
		[JsMethod(Name = "getReadOnly")]
		public bool GetReadOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property maxLength
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property maxLength.</param>
		[JsMethod(Name = "initMaxLength")]
		public void InitMaxLength(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property placeholder
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property placeholder.</param>
		[JsMethod(Name = "initPlaceholder")]
		public void InitPlaceholder(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property readOnly
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property readOnly.</param>
		[JsMethod(Name = "initReadOnly")]
		public void InitReadOnly(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property readOnly equals true.</para>
		/// </summary>
		[JsMethod(Name = "isReadOnly")]
		public void IsReadOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property maxLength.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMaxLength")]
		public void ResetMaxLength() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property placeholder.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPlaceholder")]
		public void ResetPlaceholder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property readOnly.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetReadOnly")]
		public void ResetReadOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property maxLength.</para>
		/// </summary>
		/// <param name="value">New value for property maxLength.</param>
		[JsMethod(Name = "setMaxLength")]
		public void SetMaxLength(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property placeholder.</para>
		/// </summary>
		/// <param name="value">New value for property placeholder.</param>
		[JsMethod(Name = "setPlaceholder")]
		public void SetPlaceholder(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property readOnly.</para>
		/// </summary>
		/// <param name="value">New value for property readOnly.</param>
		[JsMethod(Name = "setReadOnly")]
		public void SetReadOnly(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property readOnly.</para>
		/// </summary>
		[JsMethod(Name = "toggleReadOnly")]
		public void ToggleReadOnly() { throw new NotImplementedException(); }

		#endregion Methods
    }
}