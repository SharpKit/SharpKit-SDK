// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.form
{
    /// <summary>
	/// <para>The Row widget represents a row in a <see cref="Form"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.form.Row", OmitOptionalParameters = true, Export = false)]
    public partial class Row : qx.ui.mobile.container.Composite
    {
		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>Whether the widget is selectable or not.</para>
		/// </summary>
		[JsProperty(Name = "selectable", NativeField = true)]
		public bool Selectable { get; set; }

		#endregion Properties

		#region Methods

		public Row() { throw new NotImplementedException(); }

		/// <param name="layout">The layout that should be used for this container</param>
		public Row(qx.ui.mobile.layout.Abstract layout = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property selectable.</para>
		/// </summary>
		[JsMethod(Name = "getSelectable")]
		public bool GetSelectable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property selectable
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property selectable.</param>
		[JsMethod(Name = "initSelectable")]
		public void InitSelectable(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property selectable equals true.</para>
		/// </summary>
		[JsMethod(Name = "isSelectable")]
		public void IsSelectable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property selectable.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSelectable")]
		public void ResetSelectable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property selectable.</para>
		/// </summary>
		/// <param name="value">New value for property selectable.</param>
		[JsMethod(Name = "setSelectable")]
		public void SetSelectable(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property selectable.</para>
		/// </summary>
		[JsMethod(Name = "toggleSelectable")]
		public void ToggleSelectable() { throw new NotImplementedException(); }

		#endregion Methods
    }
}