// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.form
{
    /// <summary>
	/// <para>A group widget arranges several widgets visual.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// var title = new qx.ui.mobile.form.Title("Group");
	/// var list = new qx.ui.mobile.list.List();
	/// var group = new qx.ui.mobile.form.Group([list]);
	/// this.getRoot.add(title);
	/// this.getRoot.add(group);
	/// </code>
	/// <para>This example creates a group and adds a list to it.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.form.Group", OmitOptionalParameters = true, Export = false)]
    public partial class Group : qx.ui.mobile.container.Composite
    {
		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>Defines whether a border should drawn around the group.</para>
		/// </summary>
		[JsProperty(Name = "showBorder", NativeField = true)]
		public bool ShowBorder { get; set; }

		#endregion Properties

		#region Methods

		public Group() { throw new NotImplementedException(); }

		/// <param name="showBorder">initial value of the property showBorder.</param>
		public Group(qx.ui.mobile.core.Widget widgets, bool showBorder) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showBorder.</para>
		/// </summary>
		[JsMethod(Name = "getShowBorder")]
		public bool GetShowBorder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showBorder
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showBorder.</param>
		[JsMethod(Name = "initShowBorder")]
		public void InitShowBorder(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showBorder equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowBorder")]
		public void IsShowBorder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showBorder.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowBorder")]
		public void ResetShowBorder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showBorder.</para>
		/// </summary>
		/// <param name="value">New value for property showBorder.</param>
		[JsMethod(Name = "setShowBorder")]
		public void SetShowBorder(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showBorder.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowBorder")]
		public void ToggleShowBorder() { throw new NotImplementedException(); }

		#endregion Methods
    }
}