// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.form
{
    /// <summary>
	/// <para>The mixin contains all functionality to provide methods
	/// for form elements to manipulate their state. [usually &#8220;valid&#8221; and &#8220;invalid&#8221;]</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.form.MState", OmitOptionalParameters = true, Export = false)]
    public partial class MState 
    {
		#region Methods

		public MState() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a state to the element</para>
		/// </summary>
		/// <param name="state">the state to be added</param>
		[JsMethod(Name = "addState")]
		public void AddState(string state) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checkes whether the element has the state passed as argument</para>
		/// </summary>
		/// <param name="state">the state to be checked</param>
		/// <returns>true if the element has the state, false if it doesn&#8217;t.</returns>
		[JsMethod(Name = "hasState")]
		public bool HasState(string state) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes a state from the element</para>
		/// </summary>
		/// <param name="state">the state to be removed</param>
		[JsMethod(Name = "removeState")]
		public void RemoveState(string state) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Replaces a state of the element with a new state.
		/// If the element doesn&#8217;t have the state to be removed, then th new state will
		/// just be added.</para>
		/// </summary>
		/// <param name="oldState">the state to be replaced</param>
		/// <param name="newState">the state to get injected in the oldState&#8217;s place</param>
		[JsMethod(Name = "replaceState")]
		public void ReplaceState(string oldState, string newState) { throw new NotImplementedException(); }

		#endregion Methods
    }
}