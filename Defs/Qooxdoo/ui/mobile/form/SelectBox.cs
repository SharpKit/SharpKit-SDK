// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.form;

namespace qx.ui.mobile.form
{
    /// <summary>
	/// <para>The SelectBox</para>
	/// <para>an example, how to use the SelectBox:
	/// Example</para>
	/// <code>
	/// var page1 = new qx.ui.mobile.page.Page();
	/// page1.addListener("initialize", function()
	/// {
	/// var sel = new qx.ui.mobile.form.SelectBox();
	/// page1.add(sel);
	/// var model = new qx.data.Array(["item1","item2"]);
	/// sel.setModel(model);
	/// model.push("item3");
	/// var but = new qx.ui.mobile.form.Button("setSelection");
	/// page1.add(but);
	/// but.addListener("tap", function(){
	/// sel.setSelection("item3");
	/// }, this);
	/// var title = new qx.ui.mobile.form.Title("item2");
	/// title.bind("value",sel,"value");
	/// sel.bind("value",title,"value");
	/// page1.add(title);
	/// },this);
	/// page1.show();
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.form.SelectBox", OmitOptionalParameters = true, Export = false)]
    public partial class SelectBox : qx.ui.mobile.core.Widget, qx.ui.form.IForm, qx.ui.form.IModel
    {
		#region Events

		/// <summary>
		/// <para>Fired when the model data changes</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModel;

		/// <summary>
		/// <para>Fired when user selects an item.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelection;

		/// <summary>
		/// <para>The event is fired each time the text field looses focus and the
		/// text field values has changed.</para>
		/// <para>If you change <see cref="LiveUpdate"/> to true, the changeValue event will
		/// be fired after every keystroke and not only after every focus loss. In
		/// that mode, the changeValue event is equal to the <see cref="Input"/> event.</para>
		/// <para>The method <see cref="qx.event.type.Data.GetData"/> returns the
		/// current text value of the field.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeValue;

		/// <summary>
		/// <para>The event is fired on every keystroke modifying the value of the field.</para>
		/// <para>The method <see cref="qx.event.type.Data.GetData"/> returns the
		/// current value of the text field.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnInput;

		/// <summary>
		/// <para>Fired when the invalidMessage was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeInvalidMessage;

		/// <summary>
		/// <para>Fired when the required was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeRequired;

		/// <summary>
		/// <para>Fired when the valid state was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeValid;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Whether the widget can be activated or not. When the widget is activated
		/// a css class active is automatically added to the widget, which
		/// can indicate the acitvation status.</para>
		/// </summary>
		[JsProperty(Name = "activatable", NativeField = true)]
		public bool Activatable { get; set; }

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>The model to use to render the list.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "model", NativeField = true)]
		public qx.data.Array Model { get; set; }

		/// <summary>
		/// <para>Defines if the selectBox has a clearButton, which resets the selection.</para>
		/// </summary>
		[JsProperty(Name = "nullable", NativeField = true)]
		public bool Nullable { get; set; }

		/// <summary>
		/// <para>Whether the <see cref="ChangeValue"/> event should be fired on every key
		/// input. If set to true, the changeValue event is equal to the
		/// <see cref="Input"/> event.</para>
		/// </summary>
		[JsProperty(Name = "liveUpdate", NativeField = true)]
		public bool LiveUpdate { get; set; }

		/// <summary>
		/// <para>Message which is shown in an invalid tooltip.</para>
		/// </summary>
		[JsProperty(Name = "invalidMessage", NativeField = true)]
		public string InvalidMessage { get; set; }

		/// <summary>
		/// <para>Flag signaling if a widget is required.</para>
		/// </summary>
		[JsProperty(Name = "required", NativeField = true)]
		public bool Required { get; set; }

		/// <summary>
		/// <para>Message which is shown in an invalid tooltip if the <see cref="Required"/> is
		/// set to true.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "requiredInvalidMessage", NativeField = true)]
		public string RequiredInvalidMessage { get; set; }

		/// <summary>
		/// <para>Flag signaling if a widget is valid. If a widget is invalid, an invalid
		/// state will be set.</para>
		/// </summary>
		[JsProperty(Name = "valid", NativeField = true)]
		public bool Valid { get; set; }

		/// <summary>
		/// <para>Maximal number of characters that can be entered in the input field.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "maxLength", NativeField = true)]
		public double MaxLength { get; set; }

		/// <summary>
		/// <para>String value which will be shown as a hint if the field is all of:
		/// unset, unfocused and enabled. Set to null to not show a placeholder
		/// text.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "placeholder", NativeField = true)]
		public string Placeholder { get; set; }

		/// <summary>
		/// <para>Whether the field is read only</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "readOnly", NativeField = true)]
		public bool ReadOnly { get; set; }

		#endregion Properties

		#region Methods

		public SelectBox() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the representative data for the item</para>
		/// </summary>
		/// <returns>The data.</returns>
		[JsMethod(Name = "getModel")]
		public object GetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property nullable.</para>
		/// </summary>
		[JsMethod(Name = "getNullable")]
		public bool GetNullable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the selected index of the element</para>
		/// </summary>
		/// <returns>the selected index value</returns>
		[JsMethod(Name = "getSelection")]
		public double GetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property model
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property model.</param>
		[JsMethod(Name = "initModel")]
		public void InitModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property nullable
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property nullable.</param>
		[JsMethod(Name = "initNullable")]
		public void InitNullable(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property nullable equals true.</para>
		/// </summary>
		[JsMethod(Name = "isNullable")]
		public void IsNullable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the representative data to null.</para>
		/// </summary>
		[JsMethod(Name = "resetModel")]
		public void ResetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property nullable.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNullable")]
		public void ResetNullable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the ClearButton label of the selection dialog.</para>
		/// </summary>
		/// <param name="value">the value to set on the ClearButton at selection dialog.</param>
		[JsMethod(Name = "setClearButtonLabel")]
		public void SetClearButtonLabel(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the dialog title on the selection dialog.</para>
		/// </summary>
		/// <param name="title">the title to set on selection dialog.</param>
		[JsMethod(Name = "setDialogTitle")]
		public void SetDialogTitle(string title) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the representative data for the item.</para>
		/// </summary>
		/// <param name="value">The data.</param>
		[JsMethod(Name = "setModel")]
		public void SetModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property nullable.</para>
		/// </summary>
		/// <param name="value">New value for property nullable.</param>
		[JsMethod(Name = "setNullable")]
		public void SetNullable(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the selected index of the element.</para>
		/// </summary>
		/// <param name="value">the index of the selection</param>
		[JsMethod(Name = "setSelection")]
		public void SetSelection(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property nullable.</para>
		/// </summary>
		[JsMethod(Name = "toggleNullable")]
		public void ToggleNullable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property liveUpdate.</para>
		/// </summary>
		[JsMethod(Name = "getLiveUpdate")]
		public bool GetLiveUpdate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the set value.</para>
		/// </summary>
		/// <returns>The set value</returns>
		[JsMethod(Name = "getValue")]
		public object GetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property liveUpdate
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property liveUpdate.</param>
		[JsMethod(Name = "initLiveUpdate")]
		public void InitLiveUpdate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property liveUpdate equals true.</para>
		/// </summary>
		[JsMethod(Name = "isLiveUpdate")]
		public void IsLiveUpdate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property liveUpdate.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLiveUpdate")]
		public void ResetLiveUpdate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the value.</para>
		/// </summary>
		[JsMethod(Name = "resetValue")]
		public void ResetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property liveUpdate.</para>
		/// </summary>
		/// <param name="value">New value for property liveUpdate.</param>
		[JsMethod(Name = "setLiveUpdate")]
		public void SetLiveUpdate(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the value.</para>
		/// </summary>
		/// <param name="value">The value to set</param>
		[JsMethod(Name = "setValue")]
		public void SetValue(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property liveUpdate.</para>
		/// </summary>
		[JsMethod(Name = "toggleLiveUpdate")]
		public void ToggleLiveUpdate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the invalid message of the widget.</para>
		/// </summary>
		/// <returns>The current set message.</returns>
		[JsMethod(Name = "getInvalidMessage")]
		public string GetInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the current required state of the widget.</para>
		/// </summary>
		/// <returns>True, if the widget is required.</returns>
		[JsMethod(Name = "getRequired")]
		public bool GetRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the invalid message if required of the widget.</para>
		/// </summary>
		/// <returns>The current set message.</returns>
		[JsMethod(Name = "getRequiredInvalidMessage")]
		public string GetRequiredInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the valid state of the widget.</para>
		/// </summary>
		/// <returns>If the state of the widget is valid.</returns>
		[JsMethod(Name = "getValid")]
		public bool GetValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property invalidMessage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property invalidMessage.</param>
		[JsMethod(Name = "initInvalidMessage")]
		public void InitInvalidMessage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property required
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property required.</param>
		[JsMethod(Name = "initRequired")]
		public void InitRequired(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property requiredInvalidMessage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property requiredInvalidMessage.</param>
		[JsMethod(Name = "initRequiredInvalidMessage")]
		public void InitRequiredInvalidMessage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property valid
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property valid.</param>
		[JsMethod(Name = "initValid")]
		public void InitValid(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property required equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRequired")]
		public void IsRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property valid equals true.</para>
		/// </summary>
		[JsMethod(Name = "isValid")]
		public void IsValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property invalidMessage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInvalidMessage")]
		public void ResetInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property required.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRequired")]
		public void ResetRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property requiredInvalidMessage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRequiredInvalidMessage")]
		public void ResetRequiredInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property valid.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetValid")]
		public void ResetValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the invalid message of the widget.</para>
		/// </summary>
		/// <param name="message">The invalid message.</param>
		[JsMethod(Name = "setInvalidMessage")]
		public void SetInvalidMessage(string message) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the required state of a widget.</para>
		/// </summary>
		/// <param name="required">A flag signaling if the widget is required.</param>
		[JsMethod(Name = "setRequired")]
		public void SetRequired(bool required) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the invalid message if required of the widget.</para>
		/// </summary>
		/// <param name="message">The invalid message.</param>
		[JsMethod(Name = "setRequiredInvalidMessage")]
		public void SetRequiredInvalidMessage(string message) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the valid state of the widget.</para>
		/// </summary>
		/// <param name="valid">The valid state of the widget.</param>
		[JsMethod(Name = "setValid")]
		public void SetValid(bool valid) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property required.</para>
		/// </summary>
		[JsMethod(Name = "toggleRequired")]
		public void ToggleRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property valid.</para>
		/// </summary>
		[JsMethod(Name = "toggleValid")]
		public void ToggleValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the focus from this widget.</para>
		/// </summary>
		[JsMethod(Name = "blur")]
		public void Blur() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Points the focus of the form to this widget.</para>
		/// </summary>
		[JsMethod(Name = "focus")]
		public void Focus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property maxLength.</para>
		/// </summary>
		[JsMethod(Name = "getMaxLength")]
		public double GetMaxLength() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property placeholder.</para>
		/// </summary>
		[JsMethod(Name = "getPlaceholder")]
		public string GetPlaceholder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property readOnly.</para>
		/// </summary>
		[JsMethod(Name = "getReadOnly")]
		public bool GetReadOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property maxLength
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property maxLength.</param>
		[JsMethod(Name = "initMaxLength")]
		public void InitMaxLength(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property placeholder
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property placeholder.</param>
		[JsMethod(Name = "initPlaceholder")]
		public void InitPlaceholder(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property readOnly
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property readOnly.</param>
		[JsMethod(Name = "initReadOnly")]
		public void InitReadOnly(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property readOnly equals true.</para>
		/// </summary>
		[JsMethod(Name = "isReadOnly")]
		public void IsReadOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property maxLength.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMaxLength")]
		public void ResetMaxLength() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property placeholder.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPlaceholder")]
		public void ResetPlaceholder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property readOnly.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetReadOnly")]
		public void ResetReadOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property maxLength.</para>
		/// </summary>
		/// <param name="value">New value for property maxLength.</param>
		[JsMethod(Name = "setMaxLength")]
		public void SetMaxLength(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property placeholder.</para>
		/// </summary>
		/// <param name="value">New value for property placeholder.</param>
		[JsMethod(Name = "setPlaceholder")]
		public void SetPlaceholder(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property readOnly.</para>
		/// </summary>
		/// <param name="value">New value for property readOnly.</param>
		[JsMethod(Name = "setReadOnly")]
		public void SetReadOnly(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property readOnly.</para>
		/// </summary>
		[JsMethod(Name = "toggleReadOnly")]
		public void ToggleReadOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a state to the element</para>
		/// </summary>
		/// <param name="state">the state to be added</param>
		[JsMethod(Name = "addState")]
		public void AddState(string state) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checkes whether the element has the state passed as argument</para>
		/// </summary>
		/// <param name="state">the state to be checked</param>
		/// <returns>true if the element has the state, false if it doesn&#8217;t.</returns>
		[JsMethod(Name = "hasState")]
		public bool HasState(string state) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes a state from the element</para>
		/// </summary>
		/// <param name="state">the state to be removed</param>
		[JsMethod(Name = "removeState")]
		public void RemoveState(string state) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Replaces a state of the element with a new state.
		/// If the element doesn&#8217;t have the state to be removed, then th new state will
		/// just be added.</para>
		/// </summary>
		/// <param name="oldState">the state to be replaced</param>
		/// <param name="newState">the state to get injected in the oldState&#8217;s place</param>
		[JsMethod(Name = "replaceState")]
		public void ReplaceState(string oldState, string newState) { throw new NotImplementedException(); }

		#endregion Methods
    }
}