// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.core
{
    /// <summary>
	/// <para>Root widget for the mobile application.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.core.Root", OmitOptionalParameters = true, Export = false)]
    public partial class Root : qx.ui.mobile.container.Composite
    {
		#region Properties

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>Whether the native scrollbar should be shown or not.</para>
		/// </summary>
		[JsProperty(Name = "showScrollbarY", NativeField = true)]
		public bool ShowScrollbarY { get; set; }

		#endregion Properties

		#region Methods

		public Root() { throw new NotImplementedException(); }

		/// <param name="root">Optional. The root DOM element of the widget. Default is the body of the document.</param>
		/// <param name="layout">The layout of the root widget.</param>
		public Root(qx.html.Element root = null, qx.ui.mobile.layout.Abstract layout = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showScrollbarY.</para>
		/// </summary>
		[JsMethod(Name = "getShowScrollbarY")]
		public bool GetShowScrollbarY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showScrollbarY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showScrollbarY.</param>
		[JsMethod(Name = "initShowScrollbarY")]
		public void InitShowScrollbarY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showScrollbarY equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowScrollbarY")]
		public void IsShowScrollbarY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showScrollbarY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowScrollbarY")]
		public void ResetShowScrollbarY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showScrollbarY.</para>
		/// </summary>
		/// <param name="value">New value for property showScrollbarY.</param>
		[JsMethod(Name = "setShowScrollbarY")]
		public void SetShowScrollbarY(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showScrollbarY.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowScrollbarY")]
		public void ToggleShowScrollbarY() { throw new NotImplementedException(); }

		#endregion Methods
    }
}