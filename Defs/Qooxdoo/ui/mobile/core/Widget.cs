// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.locale;

namespace qx.ui.mobile.core
{
    /// <summary>
	/// <para>This is the base class for all mobile widgets.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.core.Widget", OmitOptionalParameters = true, Export = false)]
    public partial class Widget : qx.core.Object
    {
		#region Events

		/// <summary>
		/// <para>When the widget gets active (receives keyboard events etc.)</para>
		/// </summary>
		public event Action<qx.eventx.type.Focus> OnActivate;

		/// <summary>
		/// <para>Fired after the widget appears on the screen.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnAppear;

		/// <summary>
		/// <para>Fired before the context menu is opened.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnBeforeContextmenuOpen;

		/// <summary>
		/// <para>The event is fired when the widget gets blurred.</para>
		/// </summary>
		public event Action<qx.eventx.type.Focus> OnBlur;

		/// <summary>
		/// Fired on change of the property <see cref="Enabled"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeEnabled;

		/// <summary>
		/// Fired on change of the property <see cref="Id"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeId;

		/// <summary>
		/// Fired on change of the property <see cref="Visibility"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeVisibility;

		/// <summary>
		/// <para>Widget is clicked using left or middle button.
		/// <see cref="qx.event.type.Mouse.GetButton"/> for more details.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnClick;

		/// <summary>
		/// <para>Widget is clicked using the right mouse button.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnContextmenu;

		/// <summary>
		/// <para>Widget is double clicked using left or middle button.
		/// <see cref="qx.event.type.Mouse.GetButton"/> for more details.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnDblclick;

		/// <summary>
		/// <para>When the widget gets inactive</para>
		/// </summary>
		public event Action<qx.eventx.type.Focus> OnDeactivate;

		/// <summary>
		/// <para>Fired after the widget disappears from the screen.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnDisappear;

		/// <summary>
		/// <para>Fired after a massive DOM manipulation, e.g. when DOM elements were
		/// added or styles were changed. Listen to this event, if you need to
		/// recalculate a layout or have to update your view.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnDomupdated;

		/// <summary>
		/// <para>The event is fired when the widget gets focused.</para>
		/// </summary>
		public event Action<qx.eventx.type.Focus> OnFocus;

		/// <summary>
		/// <para>When the widget itself or any child of the widget receive the focus.</para>
		/// </summary>
		public event Action<qx.eventx.type.Focus> OnFocusin;

		/// <summary>
		/// <para>When the widget itself or any child of the widget lost the focus.</para>
		/// </summary>
		public event Action<qx.eventx.type.Focus> OnFocusout;

		/// <summary>
		/// <para>This event if fired if a keyboard key is pressed down. This event is
		/// only fired once if the user keeps the key pressed for a while.</para>
		/// </summary>
		public event Action<qx.eventx.type.KeySequence> OnKeydown;

		/// <summary>
		/// <para>This event is fired if the pressed key or keys result in a printable
		/// character. Since the character is not necessarily associated with a
		/// single physical key press, the event does not have a key identifier
		/// getter. This event gets repeated if the user keeps pressing the key(s).</para>
		/// <para>The unicode code of the pressed key can be read using
		/// <see cref="qx.event.type.KeyInput.GetCharCode"/>.</para>
		/// </summary>
		public event Action<qx.eventx.type.KeyInput> OnKeyinput;

		/// <summary>
		/// <para>This event is fired any time a key is pressed. It will be repeated if
		/// the user keeps the key pressed. The pressed key can be determined using
		/// <see cref="qx.event.type.KeySequence.GetKeyIdentifier"/>.</para>
		/// </summary>
		public event Action<qx.eventx.type.KeySequence> OnKeypress;

		/// <summary>
		/// <para>This event if fired if a keyboard key is released.</para>
		/// </summary>
		public event Action<qx.eventx.type.KeySequence> OnKeyup;

		/// <summary>
		/// <para>Mouse button is pressed on the widget.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnMousedown;

		/// <summary>
		/// <para>Fired if the mouse cursor moves over the widget.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnMousemove;

		/// <summary>
		/// <para>Fired if the mouse cursor leaves widget.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnMouseout;

		/// <summary>
		/// <para>Fired if the mouse cursor enters the widget.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnMouseover;

		/// <summary>
		/// <para>Mouse button is released on the widget.</para>
		/// </summary>
		public event Action<qx.eventx.type.Mouse> OnMouseup;

		/// <summary>
		/// <para>Fired if the mouse wheel is used over the widget.</para>
		/// </summary>
		public event Action<qx.eventx.type.MouseWheel> OnMousewheel;

		/// <summary>
		/// <para>Fired when a finger swipes over the screen.</para>
		/// </summary>
		public event Action<qx.eventx.type.Touch> OnSwipe;

		/// <summary>
		/// <para>Fired when a finger taps on the screen.</para>
		/// </summary>
		public event Action<qx.eventx.type.Touch> OnTap;

		/// <summary>
		/// <para>Fired if a touch at the screen is cancled.</para>
		/// </summary>
		public event Action<qx.eventx.type.Touch> OnTouchcancel;

		/// <summary>
		/// <para>Fired if a touch at the screen has ended.</para>
		/// </summary>
		public event Action<qx.eventx.type.Touch> OnTouchend;

		/// <summary>
		/// <para>Fired during a touch at the screen.</para>
		/// </summary>
		public event Action<qx.eventx.type.Touch> OnTouchmove;

		/// <summary>
		/// <para>Fired if a touch at the screen is started.</para>
		/// </summary>
		public event Action<qx.eventx.type.Touch> OnTouchstart;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Whether the widget can be activated or not. When the widget is activated
		/// a css class active is automatically added to the widget, which
		/// can indicate the acitvation status.</para>
		/// </summary>
		[JsProperty(Name = "activatable", NativeField = true)]
		public bool Activatable { get; set; }

		/// <summary>
		/// <para>Whether the widget should be the target of an event. Set this property
		/// to false when the widget is a child of another widget and
		/// shouldn&#8217;t react on events.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "anonymous", NativeField = true)]
		public bool Anonymous { get; set; }

		/// <summary>
		/// <para>The default CSS class used for this widget. The default CSS class
		/// should contain the common appearance of the widget.
		/// It is set to the container element of the widget. Use <see cref="AddCssClass"/>
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "defaultCssClass", NativeField = true)]
		public string DefaultCssClass { get; set; }

		/// <summary>
		/// <para>Whether this widget is enabled or not</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "enabled", NativeField = true)]
		public bool Enabled { get; set; }

		/// <summary>
		/// <para>The ID of the widget. When the ID is set to null an auto
		/// id will be generated.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "id", NativeField = true)]
		public string Id { get; set; }

		/// <summary>
		/// <para>The name attribute of the container element. Usefull when you want to find
		/// an element by its name attribute.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "name", NativeField = true)]
		public string Name { get; set; }

		/// <summary>
		/// <para>Rotates the widget. Negative and positive values are allowed.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "rotation", NativeField = true)]
		public double Rotation { get; set; }

		/// <summary>
		/// <para>Scales the widget in X direction (width).</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "scaleX", NativeField = true)]
		public double ScaleX { get; set; }

		/// <summary>
		/// <para>Scales the widget in Y direction (height).</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "scaleY", NativeField = true)]
		public double ScaleY { get; set; }

		/// <summary>
		/// <para>Moves the widget on X axis.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "translateX", NativeField = true)]
		public double TranslateX { get; set; }

		/// <summary>
		/// <para>Moves the widget on Y axis.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "translateY", NativeField = true)]
		public double TranslateY { get; set; }

		/// <summary>
		/// <para>Moves the widget on Z axis.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "translateZ", NativeField = true)]
		public double TranslateZ { get; set; }

		/// <summary>
		/// <para>Controls the visibility. Valid values are:</para>
		/// <list type="bullet">
		/// <item>visible: Render the widget</item>
		/// <item>hidden: Hide the widget. The space will be still available.</item>
		/// <item>excluded: Hide the widget. The space will be released.</item>
		/// </list>
		/// </summary>
		/// <remarks>
		/// Possible values: "visible","hidden","excluded"
		/// </remarks>
		[JsProperty(Name = "visibility", NativeField = true)]
		public object Visibility { get; set; }

		#endregion Properties

		#region Methods

		public Widget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a CSS class to the container element of the widget. Use this method
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <param name="cssClass">The CSS class to add</param>
		[JsMethod(Name = "addCssClass")]
		public void AddCssClass(string cssClass) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds an array of CSS classes to the container element of the widget. Use this method
		/// to enhance the default appearance of the widget.</para>
		/// </summary>
		/// <param name="cssClasses">The CSS classes to add, wrapped by an array.</param>
		[JsMethod(Name = "addCssClasses")]
		public void AddCssClasses(string cssClasses) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes this widget from its parent and disposes it.</para>
		/// </summary>
		[JsMethod(Name = "destroy")]
		public void Destroy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hide this widget and exclude it from the underlying layout.</para>
		/// </summary>
		/// <param name="properties">The animation properties to set. Key / value pairs.</param>
		[JsMethod(Name = "exclude")]
		public void Exclude(object properties) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property activatable.</para>
		/// </summary>
		[JsMethod(Name = "getActivatable")]
		public bool GetActivatable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property anonymous.</para>
		/// </summary>
		[JsMethod(Name = "getAnonymous")]
		public bool GetAnonymous() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property defaultCssClass.</para>
		/// </summary>
		[JsMethod(Name = "getDefaultCssClass")]
		public string GetDefaultCssClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property enabled.</para>
		/// </summary>
		[JsMethod(Name = "getEnabled")]
		public bool GetEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property id.</para>
		/// </summary>
		[JsMethod(Name = "getId")]
		public string GetId() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the parent widget of this widget.</para>
		/// </summary>
		/// <returns>The parent of the widget</returns>
		[JsMethod(Name = "getLayoutParent")]
		public Widget GetLayoutParent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property name.</para>
		/// </summary>
		[JsMethod(Name = "getName")]
		public string GetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property rotation.</para>
		/// </summary>
		[JsMethod(Name = "getRotation")]
		public double GetRotation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scaleX.</para>
		/// </summary>
		[JsMethod(Name = "getScaleX")]
		public double GetScaleX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scaleY.</para>
		/// </summary>
		[JsMethod(Name = "getScaleY")]
		public double GetScaleY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property translateX.</para>
		/// </summary>
		[JsMethod(Name = "getTranslateX")]
		public double GetTranslateX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property translateY.</para>
		/// </summary>
		[JsMethod(Name = "getTranslateY")]
		public double GetTranslateY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property translateZ.</para>
		/// </summary>
		[JsMethod(Name = "getTranslateZ")]
		public double GetTranslateZ() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property visibility.</para>
		/// </summary>
		[JsMethod(Name = "getVisibility")]
		public object GetVisibility() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the widget has a certain CSS class set.</para>
		/// </summary>
		/// <param name="cssClass">The CSS class to check</param>
		/// <returns>Whether the CSS class is set or not</returns>
		[JsMethod(Name = "hasCssClass")]
		public bool HasCssClass(string cssClass) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hide this widget.</para>
		/// </summary>
		/// <param name="properties">The animation properties to set. Key / value pairs.</param>
		[JsMethod(Name = "hide")]
		public void Hide(object properties) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property activatable
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property activatable.</param>
		[JsMethod(Name = "initActivatable")]
		public void InitActivatable(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property anonymous
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property anonymous.</param>
		[JsMethod(Name = "initAnonymous")]
		public void InitAnonymous(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property defaultCssClass
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property defaultCssClass.</param>
		[JsMethod(Name = "initDefaultCssClass")]
		public void InitDefaultCssClass(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property enabled
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property enabled.</param>
		[JsMethod(Name = "initEnabled")]
		public void InitEnabled(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property id
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property id.</param>
		[JsMethod(Name = "initId")]
		public void InitId(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property name
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property name.</param>
		[JsMethod(Name = "initName")]
		public void InitName(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property rotation
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property rotation.</param>
		[JsMethod(Name = "initRotation")]
		public void InitRotation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scaleX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scaleX.</param>
		[JsMethod(Name = "initScaleX")]
		public void InitScaleX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scaleY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scaleY.</param>
		[JsMethod(Name = "initScaleY")]
		public void InitScaleY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property translateX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property translateX.</param>
		[JsMethod(Name = "initTranslateX")]
		public void InitTranslateX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property translateY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property translateY.</param>
		[JsMethod(Name = "initTranslateY")]
		public void InitTranslateY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property translateZ
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property translateZ.</param>
		[JsMethod(Name = "initTranslateZ")]
		public void InitTranslateZ(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property visibility
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property visibility.</param>
		[JsMethod(Name = "initVisibility")]
		public void InitVisibility(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property activatable equals true.</para>
		/// </summary>
		[JsMethod(Name = "isActivatable")]
		public void IsActivatable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property anonymous equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAnonymous")]
		public void IsAnonymous() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property enabled equals true.</para>
		/// </summary>
		[JsMethod(Name = "isEnabled")]
		public void IsEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the widget is locally excluded.</para>
		/// <para>Note: This method does not respect the hierarchy.</para>
		/// </summary>
		/// <returns>Returns true when the widget is excluded</returns>
		[JsMethod(Name = "isExcluded")]
		public bool IsExcluded() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the widget is locally hidden.</para>
		/// <para>Note: This method does not respect the hierarchy.</para>
		/// </summary>
		/// <returns>Returns true when the widget is hidden</returns>
		[JsMethod(Name = "isHidden")]
		public bool IsHidden() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Detects if the widget and all its parents are visible.</para>
		/// <para>Warning: forces rendering of the browser. Do not use this method during
		/// animations or performance critical tasks.</para>
		/// </summary>
		/// <returns>trueif the widget is seeable</returns>
		[JsMethod(Name = "isSeeable")]
		public bool IsSeeable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the widget is locally visible.</para>
		/// <para>Note: This method does not respect the hierarchy.</para>
		/// </summary>
		/// <returns>Returns true when the widget is visible</returns>
		[JsMethod(Name = "isVisible")]
		public bool IsVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes a CSS class from the container element of the widget.</para>
		/// </summary>
		/// <param name="cssClass">The CSS class to remove</param>
		[JsMethod(Name = "removeCssClass")]
		public void RemoveCssClass(string cssClass) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes an array of CSS classes from the container element of the widget.</para>
		/// </summary>
		/// <param name="cssClasses">The CSS classes to remove from widget.</param>
		[JsMethod(Name = "removeCssClasses")]
		public void RemoveCssClasses(string cssClasses) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property activatable.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetActivatable")]
		public void ResetActivatable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property anonymous.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAnonymous")]
		public void ResetAnonymous() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property defaultCssClass.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDefaultCssClass")]
		public void ResetDefaultCssClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property enabled.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetEnabled")]
		public void ResetEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property id.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetId")]
		public void ResetId() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property name.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetName")]
		public void ResetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property rotation.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRotation")]
		public void ResetRotation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scaleX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScaleX")]
		public void ResetScaleX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scaleY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScaleY")]
		public void ResetScaleY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property translateX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTranslateX")]
		public void ResetTranslateX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property translateY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTranslateY")]
		public void ResetTranslateY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property translateZ.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTranslateZ")]
		public void ResetTranslateZ() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property visibility.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetVisibility")]
		public void ResetVisibility() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property activatable.</para>
		/// </summary>
		/// <param name="value">New value for property activatable.</param>
		[JsMethod(Name = "setActivatable")]
		public void SetActivatable(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property anonymous.</para>
		/// </summary>
		/// <param name="value">New value for property anonymous.</param>
		[JsMethod(Name = "setAnonymous")]
		public void SetAnonymous(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property defaultCssClass.</para>
		/// </summary>
		/// <param name="value">New value for property defaultCssClass.</param>
		[JsMethod(Name = "setDefaultCssClass")]
		public void SetDefaultCssClass(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property enabled.</para>
		/// </summary>
		/// <param name="value">New value for property enabled.</param>
		[JsMethod(Name = "setEnabled")]
		public void SetEnabled(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property id.</para>
		/// </summary>
		/// <param name="value">New value for property id.</param>
		[JsMethod(Name = "setId")]
		public void SetId(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stores the given layout properties.</para>
		/// </summary>
		/// <param name="properties">Incoming layout property data</param>
		[JsMethod(Name = "setLayoutProperties")]
		public void SetLayoutProperties(object properties) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property name.</para>
		/// </summary>
		/// <param name="value">New value for property name.</param>
		[JsMethod(Name = "setName")]
		public void SetName(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property rotation.</para>
		/// </summary>
		/// <param name="value">New value for property rotation.</param>
		[JsMethod(Name = "setRotation")]
		public void SetRotation(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scaleX.</para>
		/// </summary>
		/// <param name="value">New value for property scaleX.</param>
		[JsMethod(Name = "setScaleX")]
		public void SetScaleX(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scaleY.</para>
		/// </summary>
		/// <param name="value">New value for property scaleY.</param>
		[JsMethod(Name = "setScaleY")]
		public void SetScaleY(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property translateX.</para>
		/// </summary>
		/// <param name="value">New value for property translateX.</param>
		[JsMethod(Name = "setTranslateX")]
		public void SetTranslateX(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property translateY.</para>
		/// </summary>
		/// <param name="value">New value for property translateY.</param>
		[JsMethod(Name = "setTranslateY")]
		public void SetTranslateY(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property translateZ.</para>
		/// </summary>
		/// <param name="value">New value for property translateZ.</param>
		[JsMethod(Name = "setTranslateZ")]
		public void SetTranslateZ(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property visibility.</para>
		/// </summary>
		/// <param name="value">New value for property visibility.</param>
		[JsMethod(Name = "setVisibility")]
		public void SetVisibility(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Make this widget visible.</para>
		/// </summary>
		/// <param name="properties">The animation properties to set. Key / value pairs.</param>
		[JsMethod(Name = "show")]
		public void Show(object properties) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property activatable.</para>
		/// </summary>
		[JsMethod(Name = "toggleActivatable")]
		public void ToggleActivatable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property anonymous.</para>
		/// </summary>
		[JsMethod(Name = "toggleAnonymous")]
		public void ToggleAnonymous() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the given CSS. Adds or removes the CSS class from the container element of the widget.</para>
		/// </summary>
		/// <param name="cssClass">The CSS class to toggle</param>
		[JsMethod(Name = "toggleCssClass")]
		public void ToggleCssClass(string cssClass) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property enabled.</para>
		/// </summary>
		[JsMethod(Name = "toggleEnabled")]
		public void ToggleEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds an attribute mapping entry. This entry is used by the <see cref="#_applyAttribute"/>
		/// method. Shortcut when the property name differs from the real
		/// attribute name. Use this method if you want to add an attribute entry to the mapping
		/// from the defer function of a different widget.</para>
		/// <para>e.g.:
		/// &#8220;selectable&#8221; :
		/// {
		/// attribute : &#8220;data-selectable&#8221;,
		/// values :
		/// {
		/// &#8220;true&#8221; : null,
		/// &#8220;false&#8221; : &#8220;false&#8221;
		/// }
		/// }</para>
		/// </summary>
		/// <param name="property">The property name</param>
		/// <param name="attribute">The real attribute name</param>
		/// <param name="values">Values of the property to the real attribute value. Use null, when you want not to set the attribute.</param>
		[JsMethod(Name = "addAttributeMapping")]
		public static void AddAttributeMapping(string property, string attribute, object values) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a style mapping entry. This entry is used by the <see cref="#_applyStyle"/>
		/// method. Shortcut when the property name differs from the real
		/// style name. Use this method if you want to add a style entry to the mapping
		/// from the defer function of a different widget.</para>
		/// <para>e.g.:
		/// &#8220;anonymous&#8221; :
		/// {
		/// style : &#8220;pointer-events&#8221;,
		/// values :
		/// {
		/// &#8220;true&#8221; : &#8220;none&#8221;,
		/// &#8220;false&#8221; : null
		/// }
		/// }</para>
		/// </summary>
		/// <param name="property">The property name</param>
		/// <param name="style">The real style name</param>
		/// <param name="values">Values of the property to the real style value. Use null, when you want not to set the style.</param>
		[JsMethod(Name = "addStyleMapping")]
		public static void AddStyleMapping(string property, string style, object values) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the widget with the given id.</para>
		/// </summary>
		/// <param name="id">The id of the widget</param>
		/// <returns>The widget with the given id</returns>
		[JsMethod(Name = "getWidgetById")]
		public static Widget GetWidgetById(string id) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Mark the message for translation but return the original message.</para>
		/// </summary>
		/// <param name="messageId">the message ID</param>
		/// <returns>messageId</returns>
		[JsMethod(Name = "marktr")]
		public string Marktr(string messageId) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Translate a message
		/// Mark the message for translation.</para>
		/// </summary>
		/// <param name="messageId">message id (may contain format strings)</param>
		/// <param name="varargs">variable number of arguments applied to the format string</param>
		/// <returns>The translated message or localized string</returns>
		[JsMethod(Name = "tr")]
		public object Tr(string messageId, object varargs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Translate a message with translation hint
		/// Mark the messages for translation.</para>
		/// </summary>
		/// <param name="hint">hint for the translator of the message. Will be included in the .po file.</param>
		/// <param name="messageId">message id (may contain format strings)</param>
		/// <param name="varargs">variable number of arguments applied to the format string</param>
		/// <returns>The translated message or localized string</returns>
		[JsMethod(Name = "trc")]
		public object Trc(string hint, string messageId, object varargs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Translate a plural message
		/// Mark the messages for translation.</para>
		/// <para>Depending on the third argument the plural or the singular form is chosen.</para>
		/// </summary>
		/// <param name="singularMessageId">message id of the singular form (may contain format strings)</param>
		/// <param name="pluralMessageId">message id of the plural form (may contain format strings)</param>
		/// <param name="count">if greater than 1 the plural form otherwise the singular form is returned.</param>
		/// <param name="varargs">variable number of arguments applied to the format string</param>
		/// <returns>The translated message or localized string</returns>
		[JsMethod(Name = "trn")]
		public object Trn(string singularMessageId, string pluralMessageId, double count, object varargs) { throw new NotImplementedException(); }

		#endregion Methods
    }
}