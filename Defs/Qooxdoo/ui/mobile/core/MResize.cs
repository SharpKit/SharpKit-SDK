// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.mobile.core
{
    /// <summary>
	/// <para>This mixin resizes the container element to the height of the parent element.
	/// Use this when the height can not be set by CSS.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.mobile.core.MResize", OmitOptionalParameters = true, Export = false)]
    public partial class MResize 
    {
		#region Properties

		/// <summary>
		/// <para>Whether the resize should fire the &#8220;domupdated&#8221; event. Set this to &#8220;true&#8221;
		/// whenever other elements should react on this size change (e.g. when the size
		/// change does not infect the size of the application, but other widgets should
		/// react).</para>
		/// </summary>
		[JsProperty(Name = "fireDomUpdatedOnResize", NativeField = true)]
		public bool FireDomUpdatedOnResize { get; set; }

		#endregion Properties

		#region Methods

		public MResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resizes the container element to the height of the parent element.</para>
		/// </summary>
		[JsMethod(Name = "fixSize")]
		public void FixSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property fireDomUpdatedOnResize.</para>
		/// </summary>
		[JsMethod(Name = "getFireDomUpdatedOnResize")]
		public bool GetFireDomUpdatedOnResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property fireDomUpdatedOnResize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property fireDomUpdatedOnResize.</param>
		[JsMethod(Name = "initFireDomUpdatedOnResize")]
		public void InitFireDomUpdatedOnResize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property fireDomUpdatedOnResize equals true.</para>
		/// </summary>
		[JsMethod(Name = "isFireDomUpdatedOnResize")]
		public void IsFireDomUpdatedOnResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes fixed size from container.</para>
		/// </summary>
		[JsMethod(Name = "releaseFixedSize")]
		public void ReleaseFixedSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property fireDomUpdatedOnResize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFireDomUpdatedOnResize")]
		public void ResetFireDomUpdatedOnResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property fireDomUpdatedOnResize.</para>
		/// </summary>
		/// <param name="value">New value for property fireDomUpdatedOnResize.</param>
		[JsMethod(Name = "setFireDomUpdatedOnResize")]
		public void SetFireDomUpdatedOnResize(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property fireDomUpdatedOnResize.</para>
		/// </summary>
		[JsMethod(Name = "toggleFireDomUpdatedOnResize")]
		public void ToggleFireDomUpdatedOnResize() { throw new NotImplementedException(); }

		#endregion Methods
    }
}