// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.progressive
{
    /// <summary>
	/// <para>State of renderering by Progressive.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.progressive.State", OmitOptionalParameters = true, Export = false)]
    public partial class State : qx.core.Object
    {
		#region Properties

		/// <summary>
		/// <para>How many elements are rendered at a time, before yielding to the
		/// browser.  This property should be treated as read-only.</para>
		/// </summary>
		[JsProperty(Name = "batchSize", NativeField = true)]
		public object BatchSize { get; set; }

		/// <summary>
		/// <para>The data model being used. This property should be treated as
		/// read-only.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "model", NativeField = true)]
		public object Model { get; set; }

		/// <summary>
		/// <para>The widget in which the element data should be rendered.  This property
		/// should be treated as read-only.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "pane", NativeField = true)]
		public object Pane { get; set; }

		/// <summary>
		/// <para>The <see cref="qx.ui.progressive.Progressive"/> with which this {@link
		/// State} is associated. This property should be treated as read-only.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "progressive", NativeField = true)]
		public object Progressive { get; set; }

		/// <summary>
		/// <para>Add a place for renderers&#8217; private data.  If multiple renderers are
		/// being used, each renderer should place its own private data in the the
		/// state object area reserved for that renderer&#8217;s use:
		/// state.getRendererData()[element.renderer].  This property should be
		/// accessed only by renderers, and all elements of the array other than a
		/// renderer&#8217;s own element should be treated as read-only.</para>
		/// <para>IMPORTANT NOTE:  It is the renderer&#8217;s responsibility to clean up its
		/// own mess.  If the renderer places data here, it should
		/// also add an event listener for &#8220;renderEnd&#8221; so that it
		/// can clean up.</para>
		/// </summary>
		[JsProperty(Name = "rendererData", NativeField = true)]
		public object RendererData { get; set; }

		/// <summary>
		/// <para>User data.  This is useful, for example, by communication between
		/// the renderStart event listener and the renderers.</para>
		/// <para>IMPORTANT NOTE:  It is the user&#8217;s responsibility to clean up his
		/// own mess.  If you place data here, you should
		/// also add an event listener for &#8220;renderEnd&#8221; to
		/// dispose any objects you placed here.</para>
		/// </summary>
		[JsProperty(Name = "userData", NativeField = true)]
		public object UserData { get; set; }

		#endregion Properties

		#region Methods

		public State() { throw new NotImplementedException(); }

		/// <param name="initialState">Map containing these members:  progressive see #progressive model see #model pane see #pane batchSize see #batchSize rendererData see #rendererData userData see #userData </param>
		public State(object initialState) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property batchSize.</para>
		/// </summary>
		[JsMethod(Name = "getBatchSize")]
		public object GetBatchSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property model.</para>
		/// </summary>
		[JsMethod(Name = "getModel")]
		public object GetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property pane.</para>
		/// </summary>
		[JsMethod(Name = "getPane")]
		public object GetPane() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property progressive.</para>
		/// </summary>
		[JsMethod(Name = "getProgressive")]
		public object GetProgressive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property rendererData.</para>
		/// </summary>
		[JsMethod(Name = "getRendererData")]
		public object GetRendererData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property userData.</para>
		/// </summary>
		[JsMethod(Name = "getUserData")]
		public object GetUserData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property batchSize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property batchSize.</param>
		[JsMethod(Name = "initBatchSize")]
		public void InitBatchSize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property model
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property model.</param>
		[JsMethod(Name = "initModel")]
		public void InitModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property pane
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property pane.</param>
		[JsMethod(Name = "initPane")]
		public void InitPane(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property progressive
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property progressive.</param>
		[JsMethod(Name = "initProgressive")]
		public void InitProgressive(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property rendererData
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property rendererData.</param>
		[JsMethod(Name = "initRendererData")]
		public void InitRendererData(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property userData
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property userData.</param>
		[JsMethod(Name = "initUserData")]
		public void InitUserData(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property batchSize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBatchSize")]
		public void ResetBatchSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property model.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetModel")]
		public void ResetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property pane.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPane")]
		public void ResetPane() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property progressive.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetProgressive")]
		public void ResetProgressive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property rendererData.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRendererData")]
		public void ResetRendererData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property userData.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUserData")]
		public void ResetUserData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property batchSize.</para>
		/// </summary>
		/// <param name="value">New value for property batchSize.</param>
		[JsMethod(Name = "setBatchSize")]
		public void SetBatchSize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property model.</para>
		/// </summary>
		/// <param name="value">New value for property model.</param>
		[JsMethod(Name = "setModel")]
		public void SetModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property pane.</para>
		/// </summary>
		/// <param name="value">New value for property pane.</param>
		[JsMethod(Name = "setPane")]
		public void SetPane(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property progressive.</para>
		/// </summary>
		/// <param name="value">New value for property progressive.</param>
		[JsMethod(Name = "setProgressive")]
		public void SetProgressive(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property rendererData.</para>
		/// </summary>
		/// <param name="value">New value for property rendererData.</param>
		[JsMethod(Name = "setRendererData")]
		public void SetRendererData(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property userData.</para>
		/// </summary>
		/// <param name="value">New value for property userData.</param>
		[JsMethod(Name = "setUserData")]
		public void SetUserData(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}