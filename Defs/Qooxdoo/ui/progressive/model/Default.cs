// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.progressive.model
{
    /// <summary>
	/// <para>Data Model for Progressive renderer.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.progressive.model.Default", OmitOptionalParameters = true, Export = false)]
    public partial class Default : qx.ui.progressive.model.Abstract
    {
		#region Methods

		public Default() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a single element to be progressively renderered.  The element must
		/// be an object which contains at least two members: renderer (the
		/// renderer name) and data.</para>
		/// </summary>
		/// <param name="elem">An element to be added to the element queue</param>
		[JsMethod(Name = "addElement")]
		public void AddElement(object elem) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add elements to be progressively renderered.  Each element must be an
		/// object which contains at least two members: renderer (the renderer
		/// name) and data.</para>
		/// </summary>
		/// <param name="elems">An array of elements to be added to the element queue</param>
		[JsMethod(Name = "addElements")]
		public void AddElements(JsArray elems) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the number of data elements currently available.</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getElementCount")]
		public double GetElementCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the next available element from the data model.</para>
		/// </summary>
		/// <returns>The returned object must provide at least the following members:   renderer  The name of a renderer.  That name is used by qx.ui.progressive.Progressive to select the renderer to be used to render this element.  The name should match one provided to qx.ui.progressive.Progressive#addRenderer.    data   The data to be passed to the renderer.  The data may be of any type that the renderer knows how to render.  </returns>
		[JsMethod(Name = "getNextElement")]
		public object GetNextElement() { throw new NotImplementedException(); }

		#endregion Methods
    }
}