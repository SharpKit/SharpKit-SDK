// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.progressive.renderer.table.cell
{
    /// <summary>
	/// <para>Table Cell Renderer for Progressive.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.progressive.renderer.table.cell.Conditional", OmitOptionalParameters = true, Export = false)]
    public partial class Conditional : qx.ui.progressive.renderer.table.cell.Abstract
    {
		#region Methods

		public Conditional() { throw new NotImplementedException(); }

		/// <param name="align">The default alignment to format the cell with if the condition matches.</param>
		/// <param name="color">The default color to format the cell with if the condition matches.</param>
		/// <param name="style">The default style to format the cell with if the condition matches.</param>
		/// <param name="weight">The default weight to format the cell with if the condition matches.</param>
		public Conditional(string align, string color, string style, string weight) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The addBetweenCondition method is used to add a between condition to
		/// the cell renderer.</para>
		/// <para>Note: Passing null is different from passing an empty string in the
		/// align, color, style and weight arguments. Null will allow pre-existing
		/// formatting to pass through, where an empty string will clear it back to
		/// the default formatting set in the constructor.</para>
		/// </summary>
		/// <param name="condition">The type of condition. Accepted strings are &#8220;between&#8221; and &#8221;!between&#8221;.</param>
		/// <param name="value1">The first value to compare against.</param>
		/// <param name="value2">The second value to compare against.</param>
		/// <param name="align">The alignment to format the cell with if the condition matches.</param>
		/// <param name="color">The color to format the cell with if the condition matches.</param>
		/// <param name="style">The style to format the cell with if the condition matches.</param>
		/// <param name="weight">The weight to format the cell with if the condition matches.</param>
		/// <param name="target">The text value of the column to compare against. If this is null, comparisons will be against the contents of this cell.</param>
		[JsMethod(Name = "addBetweenCondition")]
		public void AddBetweenCondition(string condition, double value1, double value2, string align, string color, string style, string weight, string target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The addNumericCondition method is used to add a basic numeric condition
		/// to the cell renderer.</para>
		/// <para>Note: Passing null is different from passing an empty string in the
		/// align, color, style and weight arguments. Null will allow pre-existing
		/// formatting to pass through, where an empty string will clear it back to
		/// the default formatting set in the constructor.</para>
		/// </summary>
		/// <param name="condition">The type of condition. Accepted strings are &#8221;==&#8221;, &#8221;!=&#8221;, &#8221;>&#8221;, &#8221;=&#8221;, and &#8221;</param>
		/// <param name="value1">The value to compare against.</param>
		/// <param name="align">The alignment to format the cell with if the condition matches.</param>
		/// <param name="color">The color to format the cell with if the condition matches.</param>
		/// <param name="style">The style to format the cell with if the condition matches.</param>
		/// <param name="weight">The weight to format the cell with if the condition matches.</param>
		/// <param name="target">The text value of the column to compare against. If this is null, comparisons will be against the contents of this cell.</param>
		[JsMethod(Name = "addNumericCondition")]
		public void AddNumericCondition(string condition, double value1, string align, string color, string style, string weight, string target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The addRegex method is used to add a regular expression condition to
		/// the cell renderer.</para>
		/// <para>Note: Passing null is different from passing an empty string in the
		/// align, color, style and weight arguments. Null will allow pre-existing
		/// formatting to pass through, where an empty string will clear it back to
		/// the default formatting set in the constructor.</para>
		/// </summary>
		/// <param name="regex">The regular expression to match against.</param>
		/// <param name="align">The alignment to format the cell with if the condition matches.</param>
		/// <param name="color">The color to format the cell with if the condition matches.</param>
		/// <param name="style">The style to format the cell with if the condition matches.</param>
		/// <param name="weight">The weight to format the cell with if the condition matches.</param>
		/// <param name="target">The text value of the column to compare against. If this is null, comparisons will be against the contents of this cell.</param>
		[JsMethod(Name = "addRegex")]
		public void AddRegex(string regex, string align, string color, string style, string weight, string target) { throw new NotImplementedException(); }

		#endregion Methods
    }
}