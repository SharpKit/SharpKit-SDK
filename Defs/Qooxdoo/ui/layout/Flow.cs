// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.layout
{
    /// <summary>
	/// <para>A basic layout, which supports positioning of child widgets in a &#8216;flowing&#8217;
	/// manner, starting at the container&#8217;s top/left position, placing children left to right
	/// (like a HBox) until the there&#8217;s no remaining room for the next child. When
	/// out of room on the current line of elements, a new line is started, cleared
	/// below the tallest child of the preceding line&#8212;a bit like using &#8216;float&#8217;
	/// in CSS, except that a new line wraps all the way back to the left.</para>
	/// <para>Features</para>
	/// <list type="bullet">
	/// <item> Reversing children order </item>
	/// <item> Manual line breaks </item>
	/// <item> Horizontal alignment of lines </item>
	/// <item> Vertical alignment of individual widgets within a line </item>
	/// <item> Margins with horizontal margin collapsing </item>
	/// <item> Horizontal and vertical spacing </item>
	/// <item> Height for width calculations </item>
	/// <item> Auto-sizing </item>
	/// </list>
	/// <para>Item Properties</para>
	/// <list type="bullet">
	/// <item>lineBreak (Boolean): If set to true
	/// a forced line break will happen after this child widget.
	/// </item>
	/// </list>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the Flow layout.</para>
	/// <code>
	/// var flowlayout = new qx.ui.layout.Flow();
	/// flowlayout.setAlignX( "center" );  // Align children to the X axis of the container (left|center|right)
	/// var container = new qx.ui.container.Composite(flowlayout);
	/// this.getRoot().add(container, {edge: 0});
	/// var button1 = new qx.ui.form.Button("1. First Button", "flowlayout/test.png");
	/// container.add(button1);
	/// var button2 = new qx.ui.form.Button("2. Second longer Button...", "flowlayout/test.png");
	/// // Have this child create a break in the current Line (next child will always start a new Line)
	/// container.add(button2, {lineBreak: true});
	/// var button3 = new qx.ui.form.Button("3rd really, really, really long Button", "flowlayout/test.png");
	/// button3.setHeight(100);  // tall button
	/// container.add(button3);
	/// var button4 = new qx.ui.form.Button("Number 4", "flowlayout/test.png");
	/// button4.setAlignY("bottom");
	/// container.add(button4);
	/// var button5 = new qx.ui.form.Button("20px Margins around the great big 5th button!");
	/// button5.setHeight(100);  // tall button
	/// button5.setMargin(20);
	/// container.add(button5, {lineBreak: true});    // Line break after this button.
	/// var button6 = new qx.ui.form.Button("Number 6", "flowlayout/test.png");
	/// button6.setAlignY("middle");  // Align this child to the vertical center of this line.
	/// container.add(button6);
	/// var button7 = new qx.ui.form.Button("7th a wide, short button", "flowlayout/test.png");
	/// button7.setMaxHeight(20);  // short button
	/// container.add(button7);
	/// </code>
	/// <para>External Documentation</para>
	/// 
	/// Extended documentation and links to demos of this layout in the qooxdoo manual.
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.layout.Flow", OmitOptionalParameters = true, Export = false)]
    public partial class Flow : qx.ui.layout.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>Horizontal alignment of the whole children block. The horizontal
		/// alignment of the child is completely ignored in HBoxes (
		/// <see cref="qx.ui.core.LayoutItem.AlignX"/>).</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "left","center","right"
		/// </remarks>
		[JsProperty(Name = "alignX", NativeField = true)]
		public object AlignX { get; set; }

		/// <summary>
		/// <para>Vertical alignment of each child. Can be overridden through
		/// <see cref="qx.ui.core.LayoutItem.AlignY"/>.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "top","middle","bottom"
		/// </remarks>
		[JsProperty(Name = "alignY", NativeField = true)]
		public object AlignY { get; set; }

		/// <summary>
		/// <para>Whether the actual children list should be laid out in reversed order.</para>
		/// </summary>
		[JsProperty(Name = "reversed", NativeField = true)]
		public bool Reversed { get; set; }

		/// <summary>
		/// <para>Horizontal spacing between two children</para>
		/// </summary>
		[JsProperty(Name = "spacingX", NativeField = true)]
		public double SpacingX { get; set; }

		/// <summary>
		/// <para>The vertical spacing between the lines.</para>
		/// </summary>
		[JsProperty(Name = "spacingY", NativeField = true)]
		public double SpacingY { get; set; }

		#endregion Properties

		#region Methods

		public Flow() { throw new NotImplementedException(); }

		/// <param name="spacingX">The spacing between child widgets #spacingX.</param>
		/// <param name="spacingY">The spacing between the lines #spacingY.</param>
		/// <param name="alignX">Horizontal alignment of the whole children block #alignX.</param>
		public Flow(double spacingX = 0, double spacingY = 0, string alignX = "left") { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method is called by the widget to connect the widget with the layout.</para>
		/// </summary>
		/// <param name="widget">The widget to connect to.</param>
		[JsMethod(Name = "connectToWidget")]
		public void ConnectToWidget(qx.ui.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alignX.</para>
		/// </summary>
		[JsMethod(Name = "getAlignX")]
		public object GetAlignX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alignY.</para>
		/// </summary>
		[JsMethod(Name = "getAlignY")]
		public object GetAlignY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>If layout wants to trade height for width it has to implement this
		/// method and return the preferred height if it is resized to
		/// the given width. This function returns null if the item
		/// do not support height for width.</para>
		/// </summary>
		/// <param name="width">The computed width</param>
		/// <returns>The desired height</returns>
		[JsMethod(Name = "getHeightForWidth")]
		public double GetHeightForWidth(double width) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property reversed.</para>
		/// </summary>
		[JsMethod(Name = "getReversed")]
		public bool GetReversed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property spacingX.</para>
		/// </summary>
		[JsMethod(Name = "getSpacingX")]
		public double GetSpacingX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property spacingY.</para>
		/// </summary>
		[JsMethod(Name = "getSpacingY")]
		public double GetSpacingY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the layout manager supports height for width.</para>
		/// </summary>
		/// <returns>Whether the layout manager supports height for width</returns>
		[JsMethod(Name = "hasHeightForWidth")]
		public bool HasHeightForWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alignX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alignX.</param>
		[JsMethod(Name = "initAlignX")]
		public void InitAlignX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alignY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alignY.</param>
		[JsMethod(Name = "initAlignY")]
		public void InitAlignY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property reversed
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property reversed.</param>
		[JsMethod(Name = "initReversed")]
		public void InitReversed(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property spacingX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property spacingX.</param>
		[JsMethod(Name = "initSpacingX")]
		public void InitSpacingX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property spacingY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property spacingY.</param>
		[JsMethod(Name = "initSpacingY")]
		public void InitSpacingY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property reversed equals true.</para>
		/// </summary>
		[JsMethod(Name = "isReversed")]
		public void IsReversed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The FlowLayout tries to add as many Children as possible to the current &#8216;Line&#8217;
		/// and when it sees that the next Child won&#8217;t fit, it starts on a new Line, continuing
		/// until all the Children have been added.
		/// To enable alignX &#8220;left&#8221;, &#8220;center&#8221;, &#8220;right&#8221; renderLayout has to calculate the positions
		/// of all a Line&#8217;s children before it draws them.</para>
		/// </summary>
		/// <param name="availWidth">Final width available for the content (in pixel)</param>
		/// <param name="availHeight">Final height available for the content (in pixel)</param>
		[JsMethod(Name = "renderLayout")]
		public void RenderLayout(double availWidth, double availHeight) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alignX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlignX")]
		public void ResetAlignX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alignY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlignY")]
		public void ResetAlignY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property reversed.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetReversed")]
		public void ResetReversed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property spacingX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSpacingX")]
		public void ResetSpacingX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property spacingY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSpacingY")]
		public void ResetSpacingY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alignX.</para>
		/// </summary>
		/// <param name="value">New value for property alignX.</param>
		[JsMethod(Name = "setAlignX")]
		public void SetAlignX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alignY.</para>
		/// </summary>
		/// <param name="value">New value for property alignY.</param>
		[JsMethod(Name = "setAlignY")]
		public void SetAlignY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property reversed.</para>
		/// </summary>
		/// <param name="value">New value for property reversed.</param>
		[JsMethod(Name = "setReversed")]
		public void SetReversed(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property spacingX.</para>
		/// </summary>
		/// <param name="value">New value for property spacingX.</param>
		[JsMethod(Name = "setSpacingX")]
		public void SetSpacingX(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property spacingY.</para>
		/// </summary>
		/// <param name="value">New value for property spacingY.</param>
		[JsMethod(Name = "setSpacingY")]
		public void SetSpacingY(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property reversed.</para>
		/// </summary>
		[JsMethod(Name = "toggleReversed")]
		public void ToggleReversed() { throw new NotImplementedException(); }

		#endregion Methods
    }
}