// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.layout
{
    /// <summary>
	/// <para>A horizontal box layout.</para>
	/// <para>The horizontal box layout lays out widgets in a horizontal row, from left
	/// to right.</para>
	/// <para>Features</para>
	/// <list type="bullet">
	/// <item>Minimum and maximum dimensions</item>
	/// <item>Prioritized growing/shrinking (flex)</item>
	/// <item>Margins (with horizontal collapsing)</item>
	/// <item>Auto sizing (ignoring percent values)</item>
	/// <item>Percent widths (not relevant for size hint)</item>
	/// <item>Alignment (child property <see cref="qx.ui.core.LayoutItem.AlignX"/> is ignored)</item>
	/// <item>Horizontal spacing (collapsed with margins)</item>
	/// <item>Reversed children layout (from last to first)</item>
	/// <item>Vertical children stretching (respecting size hints)</item>
	/// </list
	/// <para>Item Properties</para>
	/// <list type="bullet">
	/// <item>flex (Integer): The flexibility of a layout item determines how the container
	/// distributes remaining empty space among its children. If items are made
	/// flexible, they can grow or shrink accordingly. Their relative flex values
	/// determine how the items are being resized, i.e. the larger the flex ratio
	/// of two items, the larger the resizing of the first item compared to the
	/// second.
	/// <para>If there is only one flex item in a layout container, its actual flex
	/// value is not relevant. To disallow items to become flexible, set the
	/// flex value to zero.
	/// </item>
	/// <item>width (String): Allows to define a percent
	/// width for the item. The width in percent, if specified, is used instead
	/// of the width defined by the size hint. The minimum and maximum width still
	/// takes care of the element&#8217;s limits. It has no influence on the layout&#8217;s
	/// size hint. Percent values are mostly useful for widgets which are sized by
	/// the outer hierarchy.
	/// </item>
	/// </list</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the grid layout.</para>
	/// <code>
	/// var layout = new qx.ui.layout.HBox();
	/// layout.setSpacing(4); // apply spacing
	/// var container = new qx.ui.container.Composite(layout);
	/// container.add(new qx.ui.core.Widget());
	/// container.add(new qx.ui.core.Widget());
	/// container.add(new qx.ui.core.Widget());
	/// </code>
	/// <para>External Documentation</para>
	/// <para>See extended documentation
	/// and links to demos for this layout.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.layout.HBox", OmitOptionalParameters = true, Export = false)]
    public partial class HBox : qx.ui.layout.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>Horizontal alignment of the whole children block. The horizontal
		/// alignment of the child is completely ignored in HBoxes (
		/// <see cref="qx.ui.core.LayoutItem.AlignX"/>).</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "left","center","right"
		/// </remarks>
		[JsProperty(Name = "alignX", NativeField = true)]
		public object AlignX { get; set; }

		/// <summary>
		/// <para>Vertical alignment of each child. Can be overridden through
		/// <see cref="qx.ui.core.LayoutItem.AlignY"/>.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "top","middle","bottom"
		/// </remarks>
		[JsProperty(Name = "alignY", NativeField = true)]
		public object AlignY { get; set; }

		/// <summary>
		/// <para>Whether the actual children list should be laid out in reversed order.</para>
		/// </summary>
		[JsProperty(Name = "reversed", NativeField = true)]
		public bool Reversed { get; set; }

		/// <summary>
		/// <para>Separator lines to use between the objects</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "separator", NativeField = true)]
		public qx.html.Decorator Separator { get; set; }

		/// <summary>
		/// <para>Horizontal spacing between two children</para>
		/// </summary>
		[JsProperty(Name = "spacing", NativeField = true)]
		public double Spacing { get; set; }

		#endregion Properties

		#region Methods

		public HBox() { throw new NotImplementedException(); }

		/// <param name="spacing">The spacing between child widgets #spacing.</param>
		/// <param name="alignX">Horizontal alignment of the whole children block #alignX.</param>
		/// <param name="separator">A separator to render between the items</param>
		public HBox(double spacing = 0, string alignX = "left", qx.html.Decorator separator = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alignX.</para>
		/// </summary>
		[JsMethod(Name = "getAlignX")]
		public object GetAlignX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alignY.</para>
		/// </summary>
		[JsMethod(Name = "getAlignY")]
		public object GetAlignY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property reversed.</para>
		/// </summary>
		[JsMethod(Name = "getReversed")]
		public bool GetReversed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property separator.</para>
		/// </summary>
		[JsMethod(Name = "getSeparator")]
		public qx.html.Decorator GetSeparator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property spacing.</para>
		/// </summary>
		[JsMethod(Name = "getSpacing")]
		public double GetSpacing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alignX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alignX.</param>
		[JsMethod(Name = "initAlignX")]
		public void InitAlignX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alignY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alignY.</param>
		[JsMethod(Name = "initAlignY")]
		public void InitAlignY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property reversed
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property reversed.</param>
		[JsMethod(Name = "initReversed")]
		public void InitReversed(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property separator
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property separator.</param>
		[JsMethod(Name = "initSeparator")]
		public void InitSeparator(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property spacing
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property spacing.</param>
		[JsMethod(Name = "initSpacing")]
		public void InitSpacing(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property reversed equals true.</para>
		/// </summary>
		[JsMethod(Name = "isReversed")]
		public void IsReversed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Applies the children layout.</para>
		/// </summary>
		/// <param name="availWidth">Final width available for the content (in pixel)</param>
		/// <param name="availHeight">Final height available for the content (in pixel)</param>
		[JsMethod(Name = "renderLayout")]
		public void RenderLayout(double availWidth, double availHeight) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alignX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlignX")]
		public void ResetAlignX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alignY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlignY")]
		public void ResetAlignY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property reversed.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetReversed")]
		public void ResetReversed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property separator.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSeparator")]
		public void ResetSeparator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property spacing.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSpacing")]
		public void ResetSpacing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alignX.</para>
		/// </summary>
		/// <param name="value">New value for property alignX.</param>
		[JsMethod(Name = "setAlignX")]
		public void SetAlignX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alignY.</para>
		/// </summary>
		/// <param name="value">New value for property alignY.</param>
		[JsMethod(Name = "setAlignY")]
		public void SetAlignY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property reversed.</para>
		/// </summary>
		/// <param name="value">New value for property reversed.</param>
		[JsMethod(Name = "setReversed")]
		public void SetReversed(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property separator.</para>
		/// </summary>
		/// <param name="value">New value for property separator.</param>
		[JsMethod(Name = "setSeparator")]
		public void SetSeparator(qx.html.Decorator value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property spacing.</para>
		/// </summary>
		/// <param name="value">New value for property spacing.</param>
		[JsMethod(Name = "setSpacing")]
		public void SetSpacing(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property reversed.</para>
		/// </summary>
		[JsMethod(Name = "toggleReversed")]
		public void ToggleReversed() { throw new NotImplementedException(); }

		#endregion Methods
    }
}