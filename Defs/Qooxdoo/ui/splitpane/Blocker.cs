// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.splitpane
{
    /// <summary>
	/// <para>A special blocker element for the splitpane which is based on
	/// <see cref="qx.html.Element"/> and takes care of the positioning of the div.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.splitpane.Blocker", OmitOptionalParameters = true, Export = false)]
    public partial class Blocker : qx.html.Element
    {
		#region Properties

		/// <summary>
		/// <para>The orientation of the blocker which should be the same as the
		/// orientation of the splitpane.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "horizontal","vertical"
		/// </remarks>
		[JsProperty(Name = "orientation", NativeField = true)]
		public object Orientation { get; set; }

		#endregion Properties

		#region Methods

		public Blocker() { throw new NotImplementedException(); }

		/// <param name="orientation">The orientation of the split pane control.</param>
		public Blocker(string orientation) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property orientation.</para>
		/// </summary>
		[JsMethod(Name = "getOrientation")]
		public object GetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property orientation
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property orientation.</param>
		[JsMethod(Name = "initOrientation")]
		public void InitOrientation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property orientation.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOrientation")]
		public void ResetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Takes the two parameter and sets the propper height of the blocker.</para>
		/// </summary>
		/// <param name="offset">The offset of the splitpane.</param>
		/// <param name="spliterSize">The height of the splitter.</param>
		[JsMethod(Name = "setHeight")]
		public void SetHeight(double offset, double spliterSize) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Takes the two parameter and sets the propper left position of
		/// the blocker.</para>
		/// </summary>
		/// <param name="offset">The offset of the splitpane.</param>
		/// <param name="splitterLeft">The left position of the splitter.</param>
		[JsMethod(Name = "setLeft")]
		public void SetLeft(double offset, double splitterLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property orientation.</para>
		/// </summary>
		/// <param name="value">New value for property orientation.</param>
		[JsMethod(Name = "setOrientation")]
		public void SetOrientation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Takes the two parameter and sets the propper top position of
		/// the blocker.</para>
		/// </summary>
		/// <param name="offset">The offset of the splitpane.</param>
		/// <param name="splitterTop">The top position of the splitter.</param>
		[JsMethod(Name = "setTop")]
		public void SetTop(double offset, double splitterTop) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Takes the two parameters and set the propper width of the blocker.</para>
		/// </summary>
		/// <param name="offset">The offset of the splitpane.</param>
		/// <param name="spliterSize">The width of the splitter.</param>
		[JsMethod(Name = "setWidth")]
		public void SetWidth(double offset, double spliterSize) { throw new NotImplementedException(); }

		#endregion Methods
    }
}