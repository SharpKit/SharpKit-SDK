// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.splitpane
{
    /// <summary>
	/// <para>A split panes divides an area into two panes. The ratio between the two
	/// panes is configurable by the user using the splitter.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.splitpane.Pane", OmitOptionalParameters = true, Export = false)]
    public partial class Pane : qx.ui.core.Widget
    {
		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Distance between mouse cursor and splitter when the cursor should change
		/// and enable resizing.</para>
		/// </summary>
		[JsProperty(Name = "offset", NativeField = true)]
		public double Offset { get; set; }

		/// <summary>
		/// <para>The orientation of the splitpane control.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "horizontal","vertical"
		/// </remarks>
		[JsProperty(Name = "orientation", NativeField = true)]
		public object Orientation { get; set; }

		#endregion Properties

		#region Methods

		public Pane() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates a new instance of a SplitPane. It allows the user to dynamically
		/// resize the areas dropping the border between.</para>
		/// </summary>
		/// <param name="orientation">The orientation of the split pane control. Allowed values are &#8220;horizontal&#8221; (default) and &#8220;vertical&#8221;.</param>
		public Pane(string orientation) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a widget to the pane.</para>
		/// <para>Sets the pane&#8217;s layout to vertical or horizontal split layout. Depending on the
		/// pane&#8217;s layout the first widget will be the left or top widget, the second one
		/// the bottom or right widget. Adding more than two widgets will overwrite the
		/// existing ones.</para>
		/// </summary>
		/// <param name="widget">The widget to be inserted into pane.</param>
		/// <param name="flex">The (optional) layout property for the widget&#8217;s flex value.</param>
		[JsMethod(Name = "add")]
		public void Add(qx.ui.core.Widget widget, double flex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an array containing the pane&#8217;s content.</para>
		/// </summary>
		/// <returns>The pane&#8217;s child widgets</returns>
		[JsMethod(Name = "getChildren")]
		public qx.ui.core.Widget GetChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property offset.</para>
		/// </summary>
		[JsMethod(Name = "getOffset")]
		public double GetOffset() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property orientation.</para>
		/// </summary>
		[JsMethod(Name = "getOrientation")]
		public object GetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property offset
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property offset.</param>
		[JsMethod(Name = "initOffset")]
		public void InitOffset(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property orientation
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property orientation.</param>
		[JsMethod(Name = "initOrientation")]
		public void InitOrientation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the given widget from the pane.</para>
		/// </summary>
		/// <param name="widget">The widget to be removed.</param>
		[JsMethod(Name = "remove")]
		public void Remove(qx.ui.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property offset.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOffset")]
		public void ResetOffset() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property orientation.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOrientation")]
		public void ResetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property offset.</para>
		/// </summary>
		/// <param name="value">New value for property offset.</param>
		[JsMethod(Name = "setOffset")]
		public void SetOffset(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property orientation.</para>
		/// </summary>
		/// <param name="value">New value for property orientation.</param>
		[JsMethod(Name = "setOrientation")]
		public void SetOrientation(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}