// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.behavior
{
    /// <summary>
	/// <para>Behavior to support pre-rendering of invisible areas of a virtual scroller.
	/// If applied to a scroller it will start a timer and increase the rendered area
	/// of the scroller after a certain period of time. Subsequent scrolling will not
	/// have to render this pre-computed area again.</para>
	/// <para>EXPERIMENTAL!</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.virtual.behavior.Prefetch", OmitOptionalParameters = true, Export = false)]
    public partial class Prefetch : qx.core.Object
    {
		#region Properties

		/// <summary>
		/// <para>{Integer} Polling interval</para>
		/// </summary>
		[JsProperty(Name = "interval", NativeField = true)]
		public double Interval { get; set; }

		/// <summary>
		/// <para>{qx.ui.virtual.core.Scroller} The scroller to prefetch</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "scroller", NativeField = true)]
		public qx.ui.virtualx.core.Scroller Scroller { get; set; }

		#endregion Properties

		#region Methods

		public Prefetch() { throw new NotImplementedException(); }

		/// <param name="scroller">The scroller to prefetch</param>
		/// <param name="settings">This map contains minimum and maximum pixels to prefetch near the view port.  minLeft: minimim pixels to prefetch left to the view port maxLeft: maximum pixels to prefetch left to the view port minRight: minimim pixels to prefetch right to the view port maxRight: maximum pixels to prefetch right to the view port minAbove: minimim pixels to prefetch above the view port maxAbove: maximum pixels to prefetch above the view port minBelow: minimim pixels to prefetch below the view port maxBelow: maximum pixels to prefetch below the view port </param>
		public Prefetch(qx.ui.virtualx.core.Scroller scroller, object settings) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property interval.</para>
		/// </summary>
		[JsMethod(Name = "getInterval")]
		public double GetInterval() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scroller.</para>
		/// </summary>
		[JsMethod(Name = "getScroller")]
		public qx.ui.virtualx.core.Scroller GetScroller() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property interval
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property interval.</param>
		[JsMethod(Name = "initInterval")]
		public void InitInterval(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scroller
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scroller.</param>
		[JsMethod(Name = "initScroller")]
		public void InitScroller(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property interval.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInterval")]
		public void ResetInterval() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scroller.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScroller")]
		public void ResetScroller() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property interval.</para>
		/// </summary>
		/// <param name="value">New value for property interval.</param>
		[JsMethod(Name = "setInterval")]
		public void SetInterval(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Configure horizontal prefetching</para>
		/// </summary>
		/// <param name="minLeft">minimim pixels to prefetch left to the view port</param>
		/// <param name="maxLeft">maximum pixels to prefetch left to the view port</param>
		/// <param name="minRight">minimim pixels to prefetch right to the view port</param>
		/// <param name="maxRight">maximum pixels to prefetch right to the view port</param>
		[JsMethod(Name = "setPrefetchX")]
		public void SetPrefetchX(double minLeft, double maxLeft, double minRight, double maxRight) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Configure vertical prefetching</para>
		/// </summary>
		/// <param name="minAbove">minimim pixels to prefetch above the view port</param>
		/// <param name="maxAbove">maximum pixels to prefetch above the view port</param>
		/// <param name="minBelow">minimim pixels to prefetch below the view port</param>
		/// <param name="maxBelow">maximum pixels to prefetch below the view port</param>
		[JsMethod(Name = "setPrefetchY")]
		public void SetPrefetchY(double minAbove, double maxAbove, double minBelow, double maxBelow) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scroller.</para>
		/// </summary>
		/// <param name="value">New value for property scroller.</param>
		[JsMethod(Name = "setScroller")]
		public void SetScroller(qx.ui.virtualx.core.Scroller value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}