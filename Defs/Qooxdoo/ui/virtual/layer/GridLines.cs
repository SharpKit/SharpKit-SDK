// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.layer
{
    /// <summary>
	/// <para>EXPERIMENTAL!</para>
	/// <para>Represents horizontal or vertical lines.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.virtual.layer.GridLines", OmitOptionalParameters = true, Export = false)]
    public partial class GridLines : qx.ui.virtualx.layer.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>The default color for grid lines.</para>
		/// </summary>
		[JsProperty(Name = "defaultLineColor", NativeField = true)]
		public string DefaultLineColor { get; set; }

		/// <summary>
		/// <para>The default width/height for grid lines.</para>
		/// </summary>
		[JsProperty(Name = "defaultLineSize", NativeField = true)]
		public double DefaultLineSize { get; set; }

		#endregion Properties

		#region Methods

		public GridLines() { throw new NotImplementedException(); }

		/// <param name="orientation">The grid line orientation.</param>
		/// <param name="lineColor">The default color for grid lines</param>
		/// <param name="lineSize">The default width/height for grid lines.</param>
		public GridLines(string orientation = "horizontal", string lineColor = null, double? lineSize = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property defaultLineColor.</para>
		/// </summary>
		[JsMethod(Name = "getDefaultLineColor")]
		public string GetDefaultLineColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property defaultLineSize.</para>
		/// </summary>
		[JsMethod(Name = "getDefaultLineSize")]
		public double GetDefaultLineSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the color of the grid line with the given index.</para>
		/// </summary>
		/// <param name="index">The index of the line.</param>
		/// <returns>The color.</returns>
		[JsMethod(Name = "getLineColor")]
		public string GetLineColor(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the size of the grid line with the given index.</para>
		/// </summary>
		/// <param name="index">The index of the line.</param>
		/// <returns>The size.</returns>
		[JsMethod(Name = "getLineSize")]
		public double GetLineSize(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property defaultLineColor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property defaultLineColor.</param>
		[JsMethod(Name = "initDefaultLineColor")]
		public void InitDefaultLineColor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property defaultLineSize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property defaultLineSize.</param>
		[JsMethod(Name = "initDefaultLineSize")]
		public void InitDefaultLineSize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether horizontal lines are rendered</para>
		/// </summary>
		/// <returns>Whether horizontal lines are rendered</returns>
		[JsMethod(Name = "isHorizontal")]
		public bool IsHorizontal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property defaultLineColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDefaultLineColor")]
		public void ResetDefaultLineColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property defaultLineSize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDefaultLineSize")]
		public void ResetDefaultLineSize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property defaultLineColor.</para>
		/// </summary>
		/// <param name="value">New value for property defaultLineColor.</param>
		[JsMethod(Name = "setDefaultLineColor")]
		public void SetDefaultLineColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property defaultLineSize.</para>
		/// </summary>
		/// <param name="value">New value for property defaultLineSize.</param>
		[JsMethod(Name = "setDefaultLineSize")]
		public void SetDefaultLineSize(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the color for the grid line with the given index.</para>
		/// </summary>
		/// <param name="index">The index of the line.</param>
		/// <param name="color">The color.</param>
		[JsMethod(Name = "setLineColor")]
		public void SetLineColor(double index, string color) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the width/height for the grid line with the given index.</para>
		/// </summary>
		/// <param name="index">The index of the line.</param>
		/// <param name="size">The size.</param>
		[JsMethod(Name = "setLineSize")]
		public void SetLineSize(double index, double size) { throw new NotImplementedException(); }

		#endregion Methods
    }
}