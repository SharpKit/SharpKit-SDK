// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.layer
{
    /// <summary>
	/// <para>EXPERIMENTAL!</para>
	/// <para>Abstract base class for the <see cref="Row"/> and <see cref="Column"/> layers.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.virtual.layer.AbstractBackground", OmitOptionalParameters = true, Export = false)]
    public partial class AbstractBackground : qx.ui.virtualx.layer.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>color for event indexes</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorEven", NativeField = true)]
		public string ColorEven { get; set; }

		/// <summary>
		/// <para>color for odd indexes</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorOdd", NativeField = true)]
		public string ColorOdd { get; set; }

		#endregion Properties

		#region Methods

		public AbstractBackground() { throw new NotImplementedException(); }

		/// <param name="colorEven">color for even indexes</param>
		/// <param name="colorOdd">color for odd indexes</param>
		public AbstractBackground(string colorEven = null, string colorOdd = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clear all colors set using <see cref="SetColor"/>.</para>
		/// </summary>
		[JsMethod(Name = "clearCustomColors")]
		public void ClearCustomColors() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the decorator at the given index</para>
		/// </summary>
		/// <param name="index">The index to get the decorator for.</param>
		/// <returns>The decorator at the given index</returns>
		[JsMethod(Name = "getBackground")]
		public qx.html.Decorator GetBackground(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the color at the given index</para>
		/// </summary>
		/// <param name="index">The index to get the color for.</param>
		/// <returns>The color at the given index</returns>
		[JsMethod(Name = "getColor")]
		public string GetColor(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorEven.</para>
		/// </summary>
		[JsMethod(Name = "getColorEven")]
		public string GetColorEven() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorOdd.</para>
		/// </summary>
		[JsMethod(Name = "getColorOdd")]
		public string GetColorOdd() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorEven
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorEven.</param>
		[JsMethod(Name = "initColorEven")]
		public void InitColorEven(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorOdd
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorOdd.</param>
		[JsMethod(Name = "initColorOdd")]
		public void InitColorOdd(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorEven.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorEven")]
		public void ResetColorEven() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorOdd.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorOdd")]
		public void ResetColorOdd() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the decorator for the given index</para>
		/// </summary>
		/// <param name="index">Index to set the color for</param>
		/// <param name="decorator">the decorator to set. A value of null will reset the decorator.</param>
		[JsMethod(Name = "setBackground")]
		public void SetBackground(double index, qx.html.Decorator decorator) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the color for the given index</para>
		/// </summary>
		/// <param name="index">Index to set the color for</param>
		/// <param name="color">the color to set. A value of null will reset the color.</param>
		[JsMethod(Name = "setColor")]
		public void SetColor(double index, string color) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorEven.</para>
		/// </summary>
		/// <param name="value">New value for property colorEven.</param>
		[JsMethod(Name = "setColorEven")]
		public void SetColorEven(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorOdd.</para>
		/// </summary>
		/// <param name="value">New value for property colorOdd.</param>
		[JsMethod(Name = "setColorOdd")]
		public void SetColorOdd(string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}