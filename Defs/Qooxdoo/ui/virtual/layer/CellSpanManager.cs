// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.layer
{
    /// <summary>
	/// <para>EXPERIMENTAL!</para>
	/// <para>The CellSpanManager manages cells, which span several rows or columns.</para>
	/// <para>It provides functionality to compute, which spanning cells are visible
	/// in a given view port and how they have to be placed.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.virtual.layer.CellSpanManager", OmitOptionalParameters = true, Export = false)]
    public partial class CellSpanManager : qx.core.Object
    {
		#region Methods

		public CellSpanManager() { throw new NotImplementedException(); }

		/// <param name="rowConfig">The row configuration of the pane in which the cells will be rendered</param>
		/// <param name="columnConfig">The column configuration of the pane in which the cells will be rendered</param>
		public CellSpanManager(qx.ui.virtualx.core.Axis rowConfig, qx.ui.virtualx.core.Axis columnConfig) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a spanning cell to the manager.</para>
		/// </summary>
		/// <param name="id">Unique id for the cell definition. This id is required for removing the cell from the manager</param>
		/// <param name="row">The cell&#8217;s row</param>
		/// <param name="column">The cell&#8217;s column</param>
		/// <param name="rowSpan">The number of rows the cells spans</param>
		/// <param name="columnSpan">The number of columns the cells spans</param>
		[JsMethod(Name = "addCell")]
		public void AddCell(string id, double row, double column, double rowSpan, double columnSpan) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Compute a bitmap, which marks for each visible cell, whether the cell
		/// is covered by a spanning cell.</para>
		/// </summary>
		/// <param name="cells">Array of cell descriptions as returned by #findCellsInWindow.</param>
		/// <param name="firstRow">first visible row</param>
		/// <param name="firstColumn">first visible column</param>
		/// <param name="rowCount">number of rows in the window</param>
		/// <param name="columnCount">number of columns in the window</param>
		/// <returns>Two dimensional array, which contains a 1 for each visible cell, which is covered by a spanned cell.</returns>
		[JsMethod(Name = "computeCellSpanMap")]
		public object ComputeCellSpanMap(object cells, double firstRow, double firstColumn, double rowCount, double columnCount) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Find all cells, which are visible in the given grid window.</para>
		/// </summary>
		/// <param name="firstRow">first visible row</param>
		/// <param name="firstColumn">first visible column</param>
		/// <param name="rowCount">number of rows in the window</param>
		/// <param name="columnCount">number of columns in the window</param>
		/// <returns>The array of found cell descriptions. A cell description contains the keys firstRow, lastRow, firstColumn or lastColumn</returns>
		[JsMethod(Name = "findCellsInWindow")]
		public object FindCellsInWindow(double firstRow, double firstColumn, double rowCount, double columnCount) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the bounds of a list of cells as returned by <see cref="FindCellsInWindow"/></para>
		/// </summary>
		/// <param name="cells">Array of cell descriptions</param>
		/// <param name="firstVisibleRow">The pane&#8217;s first visible row</param>
		/// <param name="firstVisibleColumn">The pane&#8217;s first visible column</param>
		/// <returns>Array, which contains a bounds map for each cell.</returns>
		[JsMethod(Name = "getCellBounds")]
		public object GetCellBounds(object cells, object firstVisibleRow, object firstVisibleColumn) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove a cell from the manager</para>
		/// </summary>
		/// <param name="id">The id of the cell to remove</param>
		[JsMethod(Name = "removeCell")]
		public void RemoveCell(string id) { throw new NotImplementedException(); }

		#endregion Methods
    }
}