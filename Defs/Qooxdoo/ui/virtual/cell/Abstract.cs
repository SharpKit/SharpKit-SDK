// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.cell
{
    /// <summary>
	/// <para>Abstract base class for HTML based cell renderer.</para>
	/// <para>HTML cell renderer are used to construct an HTML string, which is used to
	/// render the cell.</para>
	/// <para>EXPERIMENTAL!</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.virtual.cell.Abstract", OmitOptionalParameters = true, Export = false)]
    public abstract partial class Abstract : qx.core.Object, qx.ui.virtualx.cell.ICell
    {
		#region Methods

		public Abstract() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the element attributes for the cell</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>Compiled string of cell attributes. e.g. &#8216;tabIndex=&#8220;1&#8221; readonly=&#8220;false&#8221;&#8217;</returns>
		[JsMethod(Name = "getAttributes")]
		public string GetAttributes(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all relevant properties of the cell:
		/// <list type="bullet">
		/// <item>classes (String): Space separated class names</item>
		/// <item>style (String): CSS styles</item>
		/// <item>attributes (String): Space separated attributes</item>
		/// <item>content (String): HTML fragment of the innerHTML of the cell</item>
		/// <item>insets (Array): insets (padding + border) of the cell as
		/// two-dimensional array.</item>
		/// </list></para>
		/// </summary>
		/// <param name="data">Data needed for the cell to render.</param>
		/// <param name="states">The states set on the cell (e.g. selected, focused, editable).</param>
		/// <returns>Cell properties (see above.)</returns>
		[JsMethod(Name = "getCellProperties")]
		public object GetCellProperties(object data, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get cell&#8217;S HTML content</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>The cell&#8217;s content as HTML fragment.</returns>
		[JsMethod(Name = "getContent")]
		public string GetContent(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the css classes for the cell</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>Space separated list of CSS classes</returns>
		[JsMethod(Name = "getCssClasses")]
		public string GetCssClasses(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the cell&#8217;s insets. Insets are the sum of the cell&#8217;s padding and
		/// border width.</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>An array containing the sum of horizontal insets at index 0 and the sum of vertical insets at index 1.</returns>
		[JsMethod(Name = "getInsets")]
		public double GetInsets(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the CSS styles for the cell</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>Compiled string of CSS styles. e.g. &#8216;color=&#8220;red; padding: 10px&#8217;</returns>
		[JsMethod(Name = "getStyles")]
		public string GetStyles(object value, object states) { throw new NotImplementedException(); }

		#endregion Methods
    }
}