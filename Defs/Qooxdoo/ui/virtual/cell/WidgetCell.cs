// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.cell
{
    /// <summary>
	/// <para>EXPERIMENTAL!</para>
	/// <para>Cell renderer can be used for Widget rendering. The Widget creation can be configured with the
	/// <see cref="Delegate"/> property:</para>
	/// <code>
	/// widgetCell.setDelegate(
	/// {
	/// createWidget : function() {
	/// return new qx.ui.form.ListItem();
	/// }
	/// });
	/// </code>
	/// <para>When the <see cref="Delegate"/> property is not used <see cref="qx.ui.core.Widget"/> instances are created as
	/// fallback.</para>
	/// <para>The <see cref="UpdateData"/> method can be used to update any Widget property. Just use a Map
	/// with property name as key:</para>
	/// <code>
	/// // widget is a qx.ui.form.ListItem instance
	/// widgetCell.updateData(widget,
	/// {
	/// label: "my label value",
	/// icon: "qx/icon/22/emotes/face-angel.png"
	/// });
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.virtual.cell.WidgetCell", OmitOptionalParameters = true, Export = false)]
    public partial class WidgetCell : qx.ui.virtualx.cell.AbstractWidget
    {
		#region Properties

		/// <summary>
		/// <para>Delegation object, which can have one or more functions defined by the
		/// <see cref="qx.ui.virtual.cell.IWidgetCellDelegate"/> interface.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "delegate", NativeField = true)]
		public object Delegate { get; set; }

		#endregion Properties

		#region Methods

		public WidgetCell() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property delegate.</para>
		/// </summary>
		[JsMethod(Name = "getDelegate")]
		public object GetDelegate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property delegate
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property delegate.</param>
		[JsMethod(Name = "initDelegate")]
		public void InitDelegate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property delegate.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDelegate")]
		public void ResetDelegate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property delegate.</para>
		/// </summary>
		/// <param name="value">New value for property delegate.</param>
		[JsMethod(Name = "setDelegate")]
		public void SetDelegate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Update the data the cell widget should display</para>
		/// </summary>
		/// <param name="widget">The cell widget to update</param>
		/// <param name="data">The data to display</param>
		[JsMethod(Name = "updateData")]
		public void UpdateData(qx.ui.core.LayoutItem widget, object data) { throw new NotImplementedException(); }

		#endregion Methods
    }
}