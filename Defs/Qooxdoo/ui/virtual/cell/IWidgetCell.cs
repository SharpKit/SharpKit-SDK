// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.cell
{
    /// <summary>
	/// <para>A widget cell renderer manages a pool of widgets to render cells in a
	/// <see cref="qx.ui.virtual.layer.WidgetCell"/> layer.</para>
	/// </summary>
	public interface IWidgetCell
    {
		#region Methods

		/// <summary>
		/// <para>Get a widget instance to render the cell</para>
		/// </summary>
		/// <param name="data">Data needed for the cell to render.</param>
		/// <param name="states">The states set on the cell (e.g. selected, focused, editable).</param>
		/// <returns>The cell widget</returns>
		qx.ui.core.LayoutItem GetCellWidget(object data, object states);

		/// <summary>
		/// <para>Release the given widget instance.</para>
		/// <para>Either pool or dispose the widget.</para>
		/// </summary>
		/// <param name="widget">The cell widget to pool</param>
		void Pool(qx.ui.core.LayoutItem widget);

		/// <summary>
		/// <para>Update the data the cell widget should display</para>
		/// </summary>
		/// <param name="widget">The cell widget to update</param>
		/// <param name="data">The data to display</param>
		void UpdateData(qx.ui.core.LayoutItem widget, object data);

		/// <summary>
		/// <para>Update the states of the given widget.</para>
		/// </summary>
		/// <param name="widget">The cell widget to update</param>
		/// <param name="states">The cell widget&#8217;s states</param>
		void UpdateStates(qx.ui.core.LayoutItem widget, object states);

		#endregion Methods
    }
}