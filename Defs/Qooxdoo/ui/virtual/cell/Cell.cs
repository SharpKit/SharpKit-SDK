// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.cell
{
    /// <summary>
	/// <para>EXPERIMENTAL!</para>
	/// <para>Themeable Cell renderer.</para>
	/// <para>This cell renderer can be styled by an appearance theme.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.virtual.cell.Cell", OmitOptionalParameters = true, Export = false)]
    public partial class Cell : qx.ui.virtualx.cell.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this cell.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>The cell&#8217;s background color</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "backgroundColor", NativeField = true)]
		public string BackgroundColor { get; set; }

		/// <summary>
		/// <para>The cell&#8217;s font. The value is either a font name defined in the font
		/// theme or an instance of <see cref="qx.bom.Font"/>.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "font", NativeField = true)]
		public string Font { get; set; }

		/// <summary>
		/// <para>The &#8216;padding&#8217; property is a shorthand property for setting &#8216;paddingTop&#8217;,
		/// &#8216;paddingRight&#8217;, &#8216;paddingBottom&#8217; and &#8216;paddingLeft&#8217; at the same time.</para>
		/// <para>If four values are specified they apply to top, right, bottom and left
		/// respectively. If there is only one value, it applies to all sides, if
		/// there are two or three, the missing values are taken from the opposite
		/// side.</para>
		/// </summary>
		[JsProperty(Name = "padding", NativeField = true)]
		public object Padding { get; set; }

		/// <summary>
		/// <para>Padding of the widget (bottom)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "paddingBottom", NativeField = true)]
		public double PaddingBottom { get; set; }

		/// <summary>
		/// <para>Padding of the widget (left)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "paddingLeft", NativeField = true)]
		public double PaddingLeft { get; set; }

		/// <summary>
		/// <para>Padding of the widget (right)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "paddingRight", NativeField = true)]
		public double PaddingRight { get; set; }

		/// <summary>
		/// <para>Padding of the widget (top)</para>
		/// </summary>
		[JsProperty(Name = "paddingTop", NativeField = true)]
		public double PaddingTop { get; set; }

		/// <summary>
		/// <para>The text alignment of the cell&#8217;s content</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "left","center","right","justify"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "textAlign", NativeField = true)]
		public object TextAlign { get; set; }

		/// <summary>
		/// <para>The cell&#8217;s text color</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "textColor", NativeField = true)]
		public string TextColor { get; set; }

		#endregion Properties

		#region Methods

		public Cell() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property appearance.</para>
		/// </summary>
		[JsMethod(Name = "getAppearance")]
		public string GetAppearance() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the element attributes for the cell</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>Compiled string of cell attributes. e.g. &#8216;tabIndex=&#8220;1&#8221; readonly=&#8220;false&#8221;&#8217;</returns>
		[JsMethod(Name = "getAttributes")]
		public string GetAttributes(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property backgroundColor.</para>
		/// </summary>
		[JsMethod(Name = "getBackgroundColor")]
		public string GetBackgroundColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all relevant properties of the cell:
		/// <list type="bullet">
		/// <item>classes (String): Space separated class names</item>
		/// <item>style (String): CSS styles</item>
		/// <item>attributes (String): Space separated attributes</item>
		/// <item>content (String): HTML fragment of the innerHTML of the cell</item>
		/// <item>insets (Array): insets (padding + border) of the cell as
		/// two-dimensional array.</item>
		/// </list</para>
		/// </summary>
		/// <param name="data">Data needed for the cell to render.</param>
		/// <param name="states">The states set on the cell (e.g. selected, focused, editable).</param>
		/// <returns>Cell properties (see above.)</returns>
		[JsMethod(Name = "getCellProperties")]
		public object GetCellProperties(object data, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get cell&#8217;S HTML content</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>The cell&#8217;s content as HTML fragment.</returns>
		[JsMethod(Name = "getContent")]
		public string GetContent(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the css classes for the cell</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>Space separated list of CSS classes</returns>
		[JsMethod(Name = "getCssClasses")]
		public string GetCssClasses(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property font.</para>
		/// </summary>
		[JsMethod(Name = "getFont")]
		public string GetFont() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the cell&#8217;s insets. Insets are the sum of the cell&#8217;s padding and
		/// border width.</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>An array containing the sum of horizontal insets at index 0 and the sum of vertical insets at index 1.</returns>
		[JsMethod(Name = "getInsets")]
		public double GetInsets(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property paddingBottom.</para>
		/// </summary>
		[JsMethod(Name = "getPaddingBottom")]
		public double GetPaddingBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property paddingLeft.</para>
		/// </summary>
		[JsMethod(Name = "getPaddingLeft")]
		public double GetPaddingLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property paddingRight.</para>
		/// </summary>
		[JsMethod(Name = "getPaddingRight")]
		public double GetPaddingRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property paddingTop.</para>
		/// </summary>
		[JsMethod(Name = "getPaddingTop")]
		public double GetPaddingTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the CSS styles for the cell</para>
		/// </summary>
		/// <param name="value">The cell&#8217;s data value</param>
		/// <param name="states">A map containing the cell&#8217;s state names as map keys.</param>
		/// <returns>Compiled string of CSS styles. e.g. &#8216;color=&#8220;red; padding: 10px&#8217;</returns>
		[JsMethod(Name = "getStyles")]
		public string GetStyles(object value, object states) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property textAlign.</para>
		/// </summary>
		[JsMethod(Name = "getTextAlign")]
		public object GetTextAlign() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property textColor.</para>
		/// </summary>
		[JsMethod(Name = "getTextColor")]
		public string GetTextColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property appearance
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property appearance.</param>
		[JsMethod(Name = "initAppearance")]
		public void InitAppearance(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property backgroundColor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property backgroundColor.</param>
		[JsMethod(Name = "initBackgroundColor")]
		public void InitBackgroundColor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property font
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property font.</param>
		[JsMethod(Name = "initFont")]
		public void InitFont(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property paddingBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property paddingBottom.</param>
		[JsMethod(Name = "initPaddingBottom")]
		public void InitPaddingBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property paddingLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property paddingLeft.</param>
		[JsMethod(Name = "initPaddingLeft")]
		public void InitPaddingLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property paddingRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property paddingRight.</param>
		[JsMethod(Name = "initPaddingRight")]
		public void InitPaddingRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property paddingTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property paddingTop.</param>
		[JsMethod(Name = "initPaddingTop")]
		public void InitPaddingTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property textAlign
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property textAlign.</param>
		[JsMethod(Name = "initTextAlign")]
		public void InitTextAlign(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property textColor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property textColor.</param>
		[JsMethod(Name = "initTextColor")]
		public void InitTextColor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property appearance.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAppearance")]
		public void ResetAppearance() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backgroundColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackgroundColor")]
		public void ResetBackgroundColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property font.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFont")]
		public void ResetFont() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property padding.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPadding")]
		public void ResetPadding() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property paddingBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPaddingBottom")]
		public void ResetPaddingBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property paddingLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPaddingLeft")]
		public void ResetPaddingLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property paddingRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPaddingRight")]
		public void ResetPaddingRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property paddingTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPaddingTop")]
		public void ResetPaddingTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property textAlign.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTextAlign")]
		public void ResetTextAlign() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property textColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTextColor")]
		public void ResetTextColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property appearance.</para>
		/// </summary>
		/// <param name="value">New value for property appearance.</param>
		[JsMethod(Name = "setAppearance")]
		public void SetAppearance(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property backgroundColor.</para>
		/// </summary>
		/// <param name="value">New value for property backgroundColor.</param>
		[JsMethod(Name = "setBackgroundColor")]
		public void SetBackgroundColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property font.</para>
		/// </summary>
		/// <param name="value">New value for property font.</param>
		[JsMethod(Name = "setFont")]
		public void SetFont(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group padding.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="paddingTop">Sets the value of the property #paddingTop.</param>
		/// <param name="paddingRight">Sets the value of the property #paddingRight.</param>
		/// <param name="paddingBottom">Sets the value of the property #paddingBottom.</param>
		/// <param name="paddingLeft">Sets the value of the property #paddingLeft.</param>
		[JsMethod(Name = "setPadding")]
		public void SetPadding(object paddingTop, object paddingRight, object paddingBottom, object paddingLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property paddingBottom.</para>
		/// </summary>
		/// <param name="value">New value for property paddingBottom.</param>
		[JsMethod(Name = "setPaddingBottom")]
		public void SetPaddingBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property paddingLeft.</para>
		/// </summary>
		/// <param name="value">New value for property paddingLeft.</param>
		[JsMethod(Name = "setPaddingLeft")]
		public void SetPaddingLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property paddingRight.</para>
		/// </summary>
		/// <param name="value">New value for property paddingRight.</param>
		[JsMethod(Name = "setPaddingRight")]
		public void SetPaddingRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property paddingTop.</para>
		/// </summary>
		/// <param name="value">New value for property paddingTop.</param>
		[JsMethod(Name = "setPaddingTop")]
		public void SetPaddingTop(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property textAlign.</para>
		/// </summary>
		/// <param name="value">New value for property textAlign.</param>
		[JsMethod(Name = "setTextAlign")]
		public void SetTextAlign(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property textColor.</para>
		/// </summary>
		/// <param name="value">New value for property textColor.</param>
		[JsMethod(Name = "setTextColor")]
		public void SetTextColor(string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}