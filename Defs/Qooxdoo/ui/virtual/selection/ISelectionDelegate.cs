// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.virtualx.selection
{
    /// <summary>
	/// <para>EXPERIMENTAL!</para>
	/// <para>Objects, which are used as delegates for a virtual selection manager may
	/// implement any of the methods described in this interface. The delegate does
	/// not need implement all of the methods of this interface. If a method is not
	/// implemented the selection manager provides a default implementation.</para>
	/// <para>Note: This interface is meant to document the delegate but should not be
	/// listed in the implement key of a class unless all methods are
	/// really implemented.</para>
	/// </summary>
	public interface ISelectionDelegate
    {
		#region Methods

		/// <summary>
		/// <para>Returns whether the given item is selectable. The type of the item
		/// depends on the concrete selection manager implementation. The
		/// <see cref="Row"/> and <see cref="Column"/> selection manager use row/column indexes
		/// as items. The <see cref="qx.ui.virtual.cell.Cell"/> uses cells as items. Cells are represented by
		/// a map containing row and column keys.</para>
		/// <para>If this method is not implemented by the delegate all items are selectable.</para>
		/// </summary>
		/// <param name="item">The item to be checked</param>
		/// <returns>Whether the given item is selectable</returns>
		bool IsItemSelectable(object item);

		/// <summary>
		/// <para>Update the style (appearance) of the given item.</para>
		/// </summary>
		/// <param name="item">Item to modify</param>
		/// <param name="type">Any of selected, anchor or lead</param>
		/// <param name="wasAdded">Whether the given style should be added or removed.</param>
		void StyleSelectable(object item, string type, bool wasAdded);

		#endregion Methods
    }
}