// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.core
{
    /// <summary>
	/// <para>The base class of all items, which should be laid out using a layout manager
	/// <see cref="qx.ui.layout.Abstract"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.core.LayoutItem", OmitOptionalParameters = true, Export = false)]
    public abstract partial class LayoutItem : qx.core.Object
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Height"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeHeight;

		/// <summary>
		/// Fired on change of the property <see cref="Width"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeWidth;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Horizontal alignment of the item in the parent layout.</para>
		/// <para>Note: Item alignment is only supported by <see cref="LayoutItem"/> layouts where
		/// it would have a visual effect. Except for <see cref="Spacer"/>, which provides
		/// blank space for layouts, all classes that inherit <see cref="LayoutItem"/> support alignment.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "left","center","right"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "alignX", NativeField = true)]
		public object AlignX { get; set; }

		/// <summary>
		/// <para>Vertical alignment of the item in the parent layout.</para>
		/// <para>Note: Item alignment is only supported by <see cref="LayoutItem"/> layouts where
		/// it would have a visual effect. Except for <see cref="Spacer"/>, which provides
		/// blank space for layouts, all classes that inherit <see cref="LayoutItem"/> support alignment.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "top","middle","bottom","baseline"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "alignY", NativeField = true)]
		public object AlignY { get; set; }

		/// <summary>
		/// <para>Whether the item can grow horizontally.</para>
		/// </summary>
		[JsProperty(Name = "allowGrowX", NativeField = true)]
		public bool AllowGrowX { get; set; }

		/// <summary>
		/// <para>Whether the item can grow vertically.</para>
		/// </summary>
		[JsProperty(Name = "allowGrowY", NativeField = true)]
		public bool AllowGrowY { get; set; }

		/// <summary>
		/// <para>Whether the item can shrink horizontally.</para>
		/// </summary>
		[JsProperty(Name = "allowShrinkX", NativeField = true)]
		public bool AllowShrinkX { get; set; }

		/// <summary>
		/// <para>Whether the item can shrink vertically.</para>
		/// </summary>
		[JsProperty(Name = "allowShrinkY", NativeField = true)]
		public bool AllowShrinkY { get; set; }

		/// <summary>
		/// <para>Growing and shrinking in the horizontal direction</para>
		/// </summary>
		[JsProperty(Name = "allowStretchX", NativeField = true)]
		public object AllowStretchX { get; set; }

		/// <summary>
		/// <para>Growing and shrinking in the vertical direction</para>
		/// </summary>
		[JsProperty(Name = "allowStretchY", NativeField = true)]
		public object AllowStretchY { get; set; }

		/// <summary>
		/// <para>The item&#8217;s preferred height.</para>
		/// <para>The computed height may differ from the given height due to
		/// stretching. Also take a look at the related properties
		/// <see cref="MinHeight"/> and <see cref="MaxHeight"/>.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "height", NativeField = true)]
		public double Height { get; set; }

		/// <summary>
		/// <para>The &#8216;margin&#8217; property is a shorthand property for setting &#8216;marginTop&#8217;,
		/// &#8216;marginRight&#8217;, &#8216;marginBottom&#8217; and &#8216;marginLeft&#8217; at the same time.</para>
		/// <para>If four values are specified they apply to top, right, bottom and left respectively.
		/// If there is only one value, it applies to all sides, if there are two or three,
		/// the missing values are taken from the opposite side.</para>
		/// </summary>
		[JsProperty(Name = "margin", NativeField = true)]
		public object Margin { get; set; }

		/// <summary>
		/// <para>Margin of the widget (bottom)</para>
		/// </summary>
		[JsProperty(Name = "marginBottom", NativeField = true)]
		public double MarginBottom { get; set; }

		/// <summary>
		/// <para>Margin of the widget (left)</para>
		/// </summary>
		[JsProperty(Name = "marginLeft", NativeField = true)]
		public double MarginLeft { get; set; }

		/// <summary>
		/// <para>Margin of the widget (right)</para>
		/// </summary>
		[JsProperty(Name = "marginRight", NativeField = true)]
		public double MarginRight { get; set; }

		/// <summary>
		/// <para>Margin of the widget (top)</para>
		/// </summary>
		[JsProperty(Name = "marginTop", NativeField = true)]
		public double MarginTop { get; set; }

		/// <summary>
		/// <para>The user provided maximum height.</para>
		/// <para>Also take a look at the related properties <see cref="Height"/> and <see cref="MinHeight"/>.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "maxHeight", NativeField = true)]
		public double MaxHeight { get; set; }

		/// <summary>
		/// <para>The user provided maximal width.</para>
		/// <para>Also take a look at the related properties <see cref="Width"/> and <see cref="MinWidth"/>.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "maxWidth", NativeField = true)]
		public double MaxWidth { get; set; }

		/// <summary>
		/// <para>The user provided minimal height.</para>
		/// <para>Also take a look at the related properties <see cref="Height"/> and <see cref="MaxHeight"/>.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "minHeight", NativeField = true)]
		public double MinHeight { get; set; }

		/// <summary>
		/// <para>The user provided minimal width.</para>
		/// <para>Also take a look at the related properties <see cref="Width"/> and <see cref="MaxWidth"/>.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "minWidth", NativeField = true)]
		public double MinWidth { get; set; }

		/// <summary>
		/// <para>The LayoutItem&#8216;s preferred width.</para>
		/// <para>The computed width may differ from the given width due to
		/// stretching. Also take a look at the related properties
		/// <see cref="MinWidth"/> and <see cref="MaxWidth"/>.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "width", NativeField = true)]
		public double Width { get; set; }

		#endregion Properties

		#region Methods

		public LayoutItem() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes all stored layout properties.</para>
		/// </summary>
		[JsMethod(Name = "clearLayoutProperties")]
		public void ClearLayoutProperties() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Reconfigure number of separators</para>
		/// </summary>
		[JsMethod(Name = "clearSeparators")]
		public void ClearSeparators() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>EXPERIMENTAL &#8211; NOT READY FOR PRODUCTION</para>
		/// <para>Returns a clone of this object. Copies over all user configured
		/// property values. Do not configure a parent nor apply the appearance
		/// styles directly.</para>
		/// </summary>
		/// <returns>The clone</returns>
		[JsMethod(Name = "clone")]
		public qx.core.Object Clone() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alignX.</para>
		/// </summary>
		[JsMethod(Name = "getAlignX")]
		public object GetAlignX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alignY.</para>
		/// </summary>
		[JsMethod(Name = "getAlignY")]
		public object GetAlignY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowGrowX.</para>
		/// </summary>
		[JsMethod(Name = "getAllowGrowX")]
		public bool GetAllowGrowX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowGrowY.</para>
		/// </summary>
		[JsMethod(Name = "getAllowGrowY")]
		public bool GetAllowGrowY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowShrinkX.</para>
		/// </summary>
		[JsMethod(Name = "getAllowShrinkX")]
		public bool GetAllowShrinkX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowShrinkY.</para>
		/// </summary>
		[JsMethod(Name = "getAllowShrinkY")]
		public bool GetAllowShrinkY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the application root</para>
		/// </summary>
		/// <returns>The currently used root</returns>
		[JsMethod(Name = "getApplicationRoot")]
		public qx.ui.root.Abstract GetApplicationRoot() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the computed location and dimension as computed by
		/// the layout manager.</para>
		/// </summary>
		/// <returns>The location and dimensions in pixel (if the layout is valid). Contains the keys width, height, left and top.</returns>
		[JsMethod(Name = "getBounds")]
		public object GetBounds() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property height.</para>
		/// </summary>
		[JsMethod(Name = "getHeight")]
		public double GetHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the items parent. Even if the item has been added to a
		/// layout, the parent is always a child of the containing item. The parent
		/// item may be null.</para>
		/// </summary>
		/// <returns>The parent.</returns>
		[JsMethod(Name = "getLayoutParent")]
		public qx.ui.core.Widget GetLayoutParent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns currently stored layout properties</para>
		/// </summary>
		/// <returns>Returns a map of layout properties</returns>
		[JsMethod(Name = "getLayoutProperties")]
		public object GetLayoutProperties() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property marginBottom.</para>
		/// </summary>
		[JsMethod(Name = "getMarginBottom")]
		public double GetMarginBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property marginLeft.</para>
		/// </summary>
		[JsMethod(Name = "getMarginLeft")]
		public double GetMarginLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property marginRight.</para>
		/// </summary>
		[JsMethod(Name = "getMarginRight")]
		public double GetMarginRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property marginTop.</para>
		/// </summary>
		[JsMethod(Name = "getMarginTop")]
		public double GetMarginTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property maxHeight.</para>
		/// </summary>
		[JsMethod(Name = "getMaxHeight")]
		public double GetMaxHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property maxWidth.</para>
		/// </summary>
		[JsMethod(Name = "getMaxWidth")]
		public double GetMaxWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property minHeight.</para>
		/// </summary>
		[JsMethod(Name = "getMinHeight")]
		public double GetMinHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property minWidth.</para>
		/// </summary>
		[JsMethod(Name = "getMinWidth")]
		public double GetMinWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>A size hint computes the dimensions of a widget. It returns
		/// the recommended dimensions as well as the min and max dimensions.
		/// The min and max values already respect the stretching properties.</para>
		/// Wording
		/// <list type="bullet">
		/// <item>User value: Value defined by the widget user, using the size properties</item>
		/// <item>Layout value: The value computed by <see cref="qx.ui.core.Widget#_getContentHint"/></item>
		/// </list>
		/// Algorithm
		/// <list type="bullet">
		/// <item>minSize: If the user min size is not null, the user value is taken,
		/// otherwise the layout value is used.</item>
		/// <item>(preferred) size: If the user value is not null the user value is used,
		/// otherwise the layout value is used.</item>
		/// <item>max size: Same as the preferred size.</item>
		/// </list>
		/// </summary>
		/// <param name="compute">Automatically compute size hint if currently not cached?</param>
		/// <returns>The map with the preferred width/height and the allowed minimum and maximum values in cases where shrinking or growing is required.</returns>
		[JsMethod(Name = "getSizeHint")]
		public object GetSizeHint(bool compute = true) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property width.</para>
		/// </summary>
		[JsMethod(Name = "getWidth")]
		public double GetWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether user bounds are set on this layout item</para>
		/// </summary>
		/// <returns>Whether user bounds are set on this layout item</returns>
		[JsMethod(Name = "hasUserBounds")]
		public bool HasUserBounds() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the layout of this item (to layout the children)
		/// is valid.</para>
		/// </summary>
		/// <returns>Returns true</returns>
		[JsMethod(Name = "hasValidLayout")]
		public bool HasValidLayout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alignX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alignX.</param>
		[JsMethod(Name = "initAlignX")]
		public void InitAlignX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alignY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alignY.</param>
		[JsMethod(Name = "initAlignY")]
		public void InitAlignY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowGrowX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowGrowX.</param>
		[JsMethod(Name = "initAllowGrowX")]
		public void InitAllowGrowX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowGrowY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowGrowY.</param>
		[JsMethod(Name = "initAllowGrowY")]
		public void InitAllowGrowY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowShrinkX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowShrinkX.</param>
		[JsMethod(Name = "initAllowShrinkX")]
		public void InitAllowShrinkX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowShrinkY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowShrinkY.</param>
		[JsMethod(Name = "initAllowShrinkY")]
		public void InitAllowShrinkY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property height
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property height.</param>
		[JsMethod(Name = "initHeight")]
		public void InitHeight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property marginBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property marginBottom.</param>
		[JsMethod(Name = "initMarginBottom")]
		public void InitMarginBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property marginLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property marginLeft.</param>
		[JsMethod(Name = "initMarginLeft")]
		public void InitMarginLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property marginRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property marginRight.</param>
		[JsMethod(Name = "initMarginRight")]
		public void InitMarginRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property marginTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property marginTop.</param>
		[JsMethod(Name = "initMarginTop")]
		public void InitMarginTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property maxHeight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property maxHeight.</param>
		[JsMethod(Name = "initMaxHeight")]
		public void InitMaxHeight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property maxWidth
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property maxWidth.</param>
		[JsMethod(Name = "initMaxWidth")]
		public void InitMaxWidth(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property minHeight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property minHeight.</param>
		[JsMethod(Name = "initMinHeight")]
		public void InitMinHeight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property minWidth
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property minWidth.</param>
		[JsMethod(Name = "initMinWidth")]
		public void InitMinWidth(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property width
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property width.</param>
		[JsMethod(Name = "initWidth")]
		public void InitWidth(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called by the layout manager to mark this item&#8217;s layout as invalid.
		/// This function should clear all layout relevant caches.</para>
		/// </summary>
		[JsMethod(Name = "invalidateLayoutCache")]
		public void InvalidateLayoutCache() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property allowGrowX equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAllowGrowX")]
		public void IsAllowGrowX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property allowGrowY equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAllowGrowY")]
		public void IsAllowGrowY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property allowShrinkX equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAllowShrinkX")]
		public void IsAllowShrinkX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property allowShrinkY equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAllowShrinkY")]
		public void IsAllowShrinkY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the item should be excluded from the layout</para>
		/// </summary>
		/// <returns>Should the item be excluded by the layout</returns>
		[JsMethod(Name = "isExcluded")]
		public bool IsExcluded() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the item is a root item and directly connected to
		/// the DOM.</para>
		/// </summary>
		/// <returns>Whether the item a root item</returns>
		[JsMethod(Name = "isRootWidget")]
		public bool IsRootWidget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Used by the layout engine to apply coordinates and dimensions.</para>
		/// </summary>
		/// <param name="left">Any integer value for the left position, always in pixels</param>
		/// <param name="top">Any integer value for the top position, always in pixels</param>
		/// <param name="width">Any positive integer value for the width, always in pixels</param>
		/// <param name="height">Any positive integer value for the height, always in pixels</param>
		/// <returns>A map of which layout sizes changed.</returns>
		[JsMethod(Name = "renderLayout")]
		public object RenderLayout(double left, double top, double width, double height) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Renders a separator between two children</para>
		/// </summary>
		/// <param name="separator">The separator to render</param>
		/// <param name="bounds">Contains the left and top coordinate and the width and height of the separator to render.</param>
		[JsMethod(Name = "renderSeparator")]
		public void RenderSeparator(qx.html.Decorator separator, object bounds) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alignX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlignX")]
		public void ResetAlignX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alignY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlignY")]
		public void ResetAlignY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowGrowX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowGrowX")]
		public void ResetAllowGrowX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowGrowY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowGrowY")]
		public void ResetAllowGrowY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowShrinkX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowShrinkX")]
		public void ResetAllowShrinkX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowShrinkY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowShrinkY")]
		public void ResetAllowShrinkY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowStretchX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowStretchX")]
		public void ResetAllowStretchX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowStretchY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowStretchY")]
		public void ResetAllowStretchY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property height.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetHeight")]
		public void ResetHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property margin.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMargin")]
		public void ResetMargin() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property marginBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMarginBottom")]
		public void ResetMarginBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property marginLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMarginLeft")]
		public void ResetMarginLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property marginRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMarginRight")]
		public void ResetMarginRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property marginTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMarginTop")]
		public void ResetMarginTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property maxHeight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMaxHeight")]
		public void ResetMaxHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property maxWidth.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMaxWidth")]
		public void ResetMaxWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property minHeight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMinHeight")]
		public void ResetMinHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property minWidth.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMinWidth")]
		public void ResetMinWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clear the user bounds. After this call the layout item is laid out by
		/// the layout manager again.</para>
		/// </summary>
		[JsMethod(Name = "resetUserBounds")]
		public void ResetUserBounds() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property width.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidth")]
		public void ResetWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Indicate that the item has layout changes and propagate this information
		/// up the item hierarchy.</para>
		/// </summary>
		[JsMethod(Name = "scheduleLayoutUpdate")]
		public void ScheduleLayoutUpdate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alignX.</para>
		/// </summary>
		/// <param name="value">New value for property alignX.</param>
		[JsMethod(Name = "setAlignX")]
		public void SetAlignX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alignY.</para>
		/// </summary>
		/// <param name="value">New value for property alignY.</param>
		[JsMethod(Name = "setAlignY")]
		public void SetAlignY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowGrowX.</para>
		/// </summary>
		/// <param name="value">New value for property allowGrowX.</param>
		[JsMethod(Name = "setAllowGrowX")]
		public void SetAllowGrowX(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowGrowY.</para>
		/// </summary>
		/// <param name="value">New value for property allowGrowY.</param>
		[JsMethod(Name = "setAllowGrowY")]
		public void SetAllowGrowY(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowShrinkX.</para>
		/// </summary>
		/// <param name="value">New value for property allowShrinkX.</param>
		[JsMethod(Name = "setAllowShrinkX")]
		public void SetAllowShrinkX(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowShrinkY.</para>
		/// </summary>
		/// <param name="value">New value for property allowShrinkY.</param>
		[JsMethod(Name = "setAllowShrinkY")]
		public void SetAllowShrinkY(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group allowStretchX.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="allowGrowX">Sets the value of the property #allowGrowX.</param>
		/// <param name="allowShrinkX">Sets the value of the property #allowShrinkX.</param>
		[JsMethod(Name = "setAllowStretchX")]
		public void SetAllowStretchX(object allowGrowX, object allowShrinkX) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group allowStretchY.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="allowGrowY">Sets the value of the property #allowGrowY.</param>
		/// <param name="allowShrinkY">Sets the value of the property #allowShrinkY.</param>
		[JsMethod(Name = "setAllowStretchY")]
		public void SetAllowStretchY(object allowGrowY, object allowShrinkY) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property height.</para>
		/// </summary>
		/// <param name="value">New value for property height.</param>
		[JsMethod(Name = "setHeight")]
		public void SetHeight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the parent</para>
		/// </summary>
		/// <param name="parent">The new parent.</param>
		[JsMethod(Name = "setLayoutParent")]
		public void SetLayoutParent(qx.ui.core.Widget parent) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stores the given layout properties</para>
		/// </summary>
		/// <param name="props">Incoming layout property data</param>
		[JsMethod(Name = "setLayoutProperties")]
		public void SetLayoutProperties(object props) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group margin.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="marginTop">Sets the value of the property #marginTop.</param>
		/// <param name="marginRight">Sets the value of the property #marginRight.</param>
		/// <param name="marginBottom">Sets the value of the property #marginBottom.</param>
		/// <param name="marginLeft">Sets the value of the property #marginLeft.</param>
		[JsMethod(Name = "setMargin")]
		public void SetMargin(object marginTop, object marginRight, object marginBottom, object marginLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property marginBottom.</para>
		/// </summary>
		/// <param name="value">New value for property marginBottom.</param>
		[JsMethod(Name = "setMarginBottom")]
		public void SetMarginBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property marginLeft.</para>
		/// </summary>
		/// <param name="value">New value for property marginLeft.</param>
		[JsMethod(Name = "setMarginLeft")]
		public void SetMarginLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property marginRight.</para>
		/// </summary>
		/// <param name="value">New value for property marginRight.</param>
		[JsMethod(Name = "setMarginRight")]
		public void SetMarginRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property marginTop.</para>
		/// </summary>
		/// <param name="value">New value for property marginTop.</param>
		[JsMethod(Name = "setMarginTop")]
		public void SetMarginTop(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property maxHeight.</para>
		/// </summary>
		/// <param name="value">New value for property maxHeight.</param>
		[JsMethod(Name = "setMaxHeight")]
		public void SetMaxHeight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property maxWidth.</para>
		/// </summary>
		/// <param name="value">New value for property maxWidth.</param>
		[JsMethod(Name = "setMaxWidth")]
		public void SetMaxWidth(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property minHeight.</para>
		/// </summary>
		/// <param name="value">New value for property minHeight.</param>
		[JsMethod(Name = "setMinHeight")]
		public void SetMinHeight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property minWidth.</para>
		/// </summary>
		/// <param name="value">New value for property minWidth.</param>
		[JsMethod(Name = "setMinWidth")]
		public void SetMinWidth(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set user bounds of the widget. Widgets with user bounds are sized and
		/// positioned manually and are ignored by any layout manager.</para>
		/// </summary>
		/// <param name="left">left position (relative to the parent)</param>
		/// <param name="top">top position (relative to the parent)</param>
		/// <param name="width">width of the layout item</param>
		/// <param name="height">height of the layout item</param>
		[JsMethod(Name = "setUserBounds")]
		public void SetUserBounds(double left, double top, double width, double height) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property width.</para>
		/// </summary>
		/// <param name="value">New value for property width.</param>
		[JsMethod(Name = "setWidth")]
		public void SetWidth(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property allowGrowX.</para>
		/// </summary>
		[JsMethod(Name = "toggleAllowGrowX")]
		public void ToggleAllowGrowX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property allowGrowY.</para>
		/// </summary>
		[JsMethod(Name = "toggleAllowGrowY")]
		public void ToggleAllowGrowY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property allowShrinkX.</para>
		/// </summary>
		[JsMethod(Name = "toggleAllowShrinkX")]
		public void ToggleAllowShrinkX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property allowShrinkY.</para>
		/// </summary>
		[JsMethod(Name = "toggleAllowShrinkY")]
		public void ToggleAllowShrinkY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Should be executed on every change of layout properties.</para>
		/// <para>This also includes &#8220;virtual&#8221; layout properties like margin or align
		/// when they have an effect on the parent and not on the widget itself.</para>
		/// <para>This method is always executed on the parent not on the
		/// modified widget itself.</para>
		/// </summary>
		/// <param name="props">Optional map of known layout properties</param>
		[JsMethod(Name = "updateLayoutProperties")]
		public void UpdateLayoutProperties(object props = null) { throw new NotImplementedException(); }

		#endregion Methods
    }
}