// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.core.scroll
{
    /// <summary>
	/// <para>All widget used as scrollbars must implement this interface.</para>
	/// </summary>
	public interface IScrollBar
    {
		#region Events

		/// <summary>
		/// <para>Fired if the user scroll</para>
		/// </summary>
		event Action<qx.eventx.type.Data> OnScroll;

		/// <summary>
		/// <para>Fired as soon as the scroll animation ended.</para>
		/// </summary>
		event Action<qx.eventx.type.Event> OnScrollAnimationEnd;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Factor to apply to the width/height of the knob in relation
		/// to the dimension of the underlying area.</para>
		/// </summary>
		object KnobFactor { get; set; }

		/// <summary>
		/// <para>The maximum value (difference between available size and
		/// content size).</para>
		/// </summary>
		object Maximum { get; set; }

		/// <summary>
		/// <para>The scroll bar orientation</para>
		/// </summary>
		object Orientation { get; set; }

		/// <summary>
		/// <para>Position of the scrollbar (which means the scroll left/top of the
		/// attached area&#8217;s pane)</para>
		/// <para>Strictly validates according to <see cref="Maximum"/>.
		/// Does not apply any correction to the incoming value. If you depend
		/// on this, please use <see cref="ScrollTo"/> instead.</para>
		/// </summary>
		object Position { get; set; }

		#endregion Properties

		#region Methods

		/// <summary>
		/// <para>Returns the (computed) value of the property knobFactor.</para>
		/// </summary>
		object GetKnobFactor();

		/// <summary>
		/// <para>Returns the (computed) value of the property maximum.</para>
		/// </summary>
		object GetMaximum();

		/// <summary>
		/// <para>Returns the (computed) value of the property orientation.</para>
		/// </summary>
		object GetOrientation();

		/// <summary>
		/// <para>Returns the (computed) value of the property position.</para>
		/// </summary>
		object GetPosition();

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property knobFactor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property knobFactor.</param>
		void InitKnobFactor(object value);

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property maximum
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property maximum.</param>
		void InitMaximum(object value);

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property orientation
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property orientation.</param>
		void InitOrientation(object value);

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property position
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property position.</param>
		void InitPosition(object value);

		/// <summary>
		/// <para>Resets the user value of the property knobFactor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		void ResetKnobFactor();

		/// <summary>
		/// <para>Resets the user value of the property maximum.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		void ResetMaximum();

		/// <summary>
		/// <para>Resets the user value of the property orientation.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		void ResetOrientation();

		/// <summary>
		/// <para>Resets the user value of the property position.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		void ResetPosition();

		/// <summary>
		/// <para>Scrolls by the given offset.</para>
		/// <para>This method automatically corrects the given position to respect
		/// the <see cref="Maximum"/>.</para>
		/// </summary>
		/// <param name="offset">Scroll by this offset</param>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		void ScrollBy(double offset, double duration);

		/// <summary>
		/// <para>Scrolls by the given number of steps.</para>
		/// <para>This method automatically corrects the given position to respect
		/// the <see cref="Maximum"/>.</para>
		/// </summary>
		/// <param name="steps">Number of steps</param>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		void ScrollBySteps(double steps, double duration);

		/// <summary>
		/// <para>Scrolls to the given position.</para>
		/// <para>This method automatically corrects the given position to respect
		/// the <see cref="Maximum"/>.</para>
		/// </summary>
		/// <param name="position">Scroll to this position. Must be greater zero.</param>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		void ScrollTo(double position, double duration);

		/// <summary>
		/// <para>Sets the user value of the property knobFactor.</para>
		/// </summary>
		/// <param name="value">New value for property knobFactor.</param>
		void SetKnobFactor(object value);

		/// <summary>
		/// <para>Sets the user value of the property maximum.</para>
		/// </summary>
		/// <param name="value">New value for property maximum.</param>
		void SetMaximum(object value);

		/// <summary>
		/// <para>Sets the user value of the property orientation.</para>
		/// </summary>
		/// <param name="value">New value for property orientation.</param>
		void SetOrientation(object value);

		/// <summary>
		/// <para>Sets the user value of the property position.</para>
		/// </summary>
		/// <param name="value">New value for property position.</param>
		void SetPosition(object value);

		#endregion Methods
    }
}