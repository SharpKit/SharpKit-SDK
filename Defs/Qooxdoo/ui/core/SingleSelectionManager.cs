// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.core
{
    /// <summary>
	/// <para>Responsible for the single selection management.</para>
	/// <para>The class manage a list of <see cref="qx.ui.core.Widget"/> which are returned from
	/// <see cref="qx.ui.core.ISingleSelectionProvider.GetItems"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.core.SingleSelectionManager", OmitOptionalParameters = true, Export = false)]
    public partial class SingleSelectionManager : qx.core.Object
    {
		#region Events

		/// <summary>
		/// <para>Fires after the selection was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelected;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>If the value is true the manager allows an empty selection,
		/// otherwise the first selectable element returned from the
		/// qx.ui.core.ISingleSelectionProvider will be selected.</para>
		/// </summary>
		[JsProperty(Name = "allowEmptySelection", NativeField = true)]
		public bool AllowEmptySelection { get; set; }

		#endregion Properties

		#region Methods

		public SingleSelectionManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Construct the single selection manager.</para>
		/// </summary>
		/// <param name="selectionProvider">The provider for selection.</param>
		public SingleSelectionManager(qx.ui.core.ISingleSelectionProvider selectionProvider) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowEmptySelection.</para>
		/// </summary>
		[JsMethod(Name = "getAllowEmptySelection")]
		public bool GetAllowEmptySelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all elements which are selectable.</para>
		/// </summary>
		/// <param name="all">true for all selectables, false for the selectables the user can interactively select</param>
		/// <returns>The contained items.</returns>
		[JsMethod(Name = "getSelectables")]
		public qx.ui.core.Widget GetSelectables(bool all) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current selected element.</para>
		/// </summary>
		/// <returns>The current selected widget or null if the selection is empty.</returns>
		[JsMethod(Name = "getSelected")]
		public qx.ui.core.Widget GetSelected() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowEmptySelection
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowEmptySelection.</param>
		[JsMethod(Name = "initAllowEmptySelection")]
		public void InitAllowEmptySelection(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property allowEmptySelection equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAllowEmptySelection")]
		public void IsAllowEmptySelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return true if the passed element is selected.</para>
		/// </summary>
		/// <param name="item">Element to check if selected.</param>
		/// <returns>true if passed element is selected, false otherwise.</returns>
		[JsMethod(Name = "isSelected")]
		public bool IsSelected(qx.ui.core.Widget item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns true if selection is empty.</para>
		/// </summary>
		/// <returns>true if selection is empty, false otherwise.</returns>
		[JsMethod(Name = "isSelectionEmpty")]
		public bool IsSelectionEmpty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowEmptySelection.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowEmptySelection")]
		public void ResetAllowEmptySelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Reset the current selection. If <see cref="AllowEmptySelection"/> is set to
		/// true the first element will be selected.</para>
		/// </summary>
		[JsMethod(Name = "resetSelected")]
		public void ResetSelected() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowEmptySelection.</para>
		/// </summary>
		/// <param name="value">New value for property allowEmptySelection.</param>
		[JsMethod(Name = "setAllowEmptySelection")]
		public void SetAllowEmptySelection(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects the passed element.</para>
		/// </summary>
		/// <param name="item">Element to select.</param>
		[JsMethod(Name = "setSelected")]
		public void SetSelected(qx.ui.core.Widget item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property allowEmptySelection.</para>
		/// </summary>
		[JsMethod(Name = "toggleAllowEmptySelection")]
		public void ToggleAllowEmptySelection() { throw new NotImplementedException(); }

		#endregion Methods
    }
}