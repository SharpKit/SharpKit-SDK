// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.core
{
    /// <summary>
	/// <para>Commands can be used to globally define keyboard shortcuts. They could
	/// also be used to assign an execution of a command sequence to multiple
	/// widgets. It is possible to use the same Command in a MenuButton and
	/// ToolBarButton for example.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.core.Command", OmitOptionalParameters = true, Export = false)]
    public partial class Command : qx.core.Object
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Enabled"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeEnabled;

		/// <summary>
		/// Fired on change of the property <see cref="Icon"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeIcon;

		/// <summary>
		/// Fired on change of the property <see cref="Label"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeLabel;

		/// <summary>
		/// Fired on change of the property <see cref="Menu"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeMenu;

		/// <summary>
		/// Fired on change of the property <see cref="ToolTipText"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeToolTipText;

		/// <summary>
		/// Fired on change of the property <see cref="Value"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeValue;

		/// <summary>
		/// <para>Fired when the command is executed. Sets the &#8220;data&#8221; property of the
		/// event to the object that issued the command.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnExecute;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>whether the command should be respected/enabled</para>
		/// </summary>
		[JsProperty(Name = "enabled", NativeField = true)]
		public bool Enabled { get; set; }

		/// <summary>
		/// <para>The icon, which will be set in all connected widgets (if available)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "icon", NativeField = true)]
		public string Icon { get; set; }

		/// <summary>
		/// <para>The label, which will be set in all connected widgets (if available)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "label", NativeField = true)]
		public string Label { get; set; }

		/// <summary>
		/// <para>The menu, which will be set in all connected widgets (if available)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "menu", NativeField = true)]
		public qx.ui.menu.Menu Menu { get; set; }

		/// <summary>
		/// <para>The command shortcut as a string</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "shortcut", NativeField = true)]
		public string Shortcut { get; set; }

		/// <summary>
		/// <para>The tooltip text, which will be set in all connected
		/// widgets (if available)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "toolTipText", NativeField = true)]
		public string ToolTipText { get; set; }

		/// <summary>
		/// <para>The value of the connected widgets</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "value", NativeField = true)]
		public object Value { get; set; }

		#endregion Properties

		#region Methods

		public Command() { throw new NotImplementedException(); }

		/// <param name="shortcut">Shortcuts can be composed of optional modifier keys Control, Alt, Shift, Meta and a non modifier key. If no non modifier key is specified, the second paramater is evaluated. The key must be separated by a + or - character. Examples: Alt+F1, Control+C, Control+Alt+Delete</param>
		public Command(string shortcut) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Fire the &#8220;execute&#8221; event on this command.</para>
		/// </summary>
		/// <param name="target">Object which issued the execute event</param>
		[JsMethod(Name = "execute")]
		public void Execute(object target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property enabled.</para>
		/// </summary>
		[JsMethod(Name = "getEnabled")]
		public bool GetEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property icon.</para>
		/// </summary>
		[JsMethod(Name = "getIcon")]
		public string GetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property label.</para>
		/// </summary>
		[JsMethod(Name = "getLabel")]
		public string GetLabel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property menu.</para>
		/// </summary>
		[JsMethod(Name = "getMenu")]
		public qx.ui.menu.Menu GetMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property shortcut.</para>
		/// </summary>
		[JsMethod(Name = "getShortcut")]
		public string GetShortcut() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property toolTipText.</para>
		/// </summary>
		[JsMethod(Name = "getToolTipText")]
		public string GetToolTipText() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property value.</para>
		/// </summary>
		[JsMethod(Name = "getValue")]
		public object GetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property enabled
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property enabled.</param>
		[JsMethod(Name = "initEnabled")]
		public void InitEnabled(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property icon
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property icon.</param>
		[JsMethod(Name = "initIcon")]
		public void InitIcon(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property label
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property label.</param>
		[JsMethod(Name = "initLabel")]
		public void InitLabel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property menu
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property menu.</param>
		[JsMethod(Name = "initMenu")]
		public void InitMenu(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property shortcut
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property shortcut.</param>
		[JsMethod(Name = "initShortcut")]
		public void InitShortcut(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property toolTipText
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property toolTipText.</param>
		[JsMethod(Name = "initToolTipText")]
		public void InitToolTipText(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property value
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property value.</param>
		[JsMethod(Name = "initValue")]
		public void InitValue(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property enabled equals true.</para>
		/// </summary>
		[JsMethod(Name = "isEnabled")]
		public void IsEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property enabled.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetEnabled")]
		public void ResetEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property icon.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIcon")]
		public void ResetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property label.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLabel")]
		public void ResetLabel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property menu.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMenu")]
		public void ResetMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property shortcut.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShortcut")]
		public void ResetShortcut() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property toolTipText.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetToolTipText")]
		public void ResetToolTipText() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property value.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetValue")]
		public void ResetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property enabled.</para>
		/// </summary>
		/// <param name="value">New value for property enabled.</param>
		[JsMethod(Name = "setEnabled")]
		public void SetEnabled(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property icon.</para>
		/// </summary>
		/// <param name="value">New value for property icon.</param>
		[JsMethod(Name = "setIcon")]
		public void SetIcon(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property label.</para>
		/// </summary>
		/// <param name="value">New value for property label.</param>
		[JsMethod(Name = "setLabel")]
		public void SetLabel(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property menu.</para>
		/// </summary>
		/// <param name="value">New value for property menu.</param>
		[JsMethod(Name = "setMenu")]
		public void SetMenu(qx.ui.menu.Menu value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property shortcut.</para>
		/// </summary>
		/// <param name="value">New value for property shortcut.</param>
		[JsMethod(Name = "setShortcut")]
		public void SetShortcut(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property toolTipText.</para>
		/// </summary>
		/// <param name="value">New value for property toolTipText.</param>
		[JsMethod(Name = "setToolTipText")]
		public void SetToolTipText(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property value.</para>
		/// </summary>
		/// <param name="value">New value for property value.</param>
		[JsMethod(Name = "setValue")]
		public void SetValue(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property enabled.</para>
		/// </summary>
		[JsMethod(Name = "toggleEnabled")]
		public void ToggleEnabled() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the used shortcut as string using the currently selected locale.</para>
		/// </summary>
		/// <returns>shortcut</returns>
		[JsMethod(Name = "toString")]
		public string ToString() { throw new NotImplementedException(); }

		#endregion Methods
    }
}