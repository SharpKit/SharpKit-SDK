// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.core.queue
{
    /// <summary>
	/// <para>Keeps data about the visibility of all widgets. Updates the internal
	/// tree when widgets are added, removed or modify their visibility.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.core.queue.Visibility", OmitOptionalParameters = true, Export = false)]
    public partial class Visibility 
    {
		#region Methods

		public Visibility() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a widget to the queue.</para>
		/// <para>Should only be used by <see cref="qx.ui.core.Widget"/>.</para>
		/// </summary>
		/// <param name="widget">The widget to add.</param>
		[JsMethod(Name = "add")]
		public static void Add(qx.ui.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Flushes the visibility queue.</para>
		/// <para>This is used exclusively by the <see cref="qx.ui.core.queue.Manager"/>.</para>
		/// </summary>
		[JsMethod(Name = "flush")]
		public static void Flush() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given widget is visible.</para>
		/// <para>Please note that the information given by this method is queued and may not be accurate
		/// until the next queue flush happens.</para>
		/// </summary>
		/// <param name="widget">The widget to query</param>
		/// <returns>Whether the widget is visible</returns>
		[JsMethod(Name = "isVisible")]
		public static bool IsVisible(qx.ui.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears the cached data of the given widget. Normally only used
		/// during interims disposes of one or a few widgets.</para>
		/// </summary>
		/// <param name="widget">The widget to clear</param>
		[JsMethod(Name = "remove")]
		public static void Remove(qx.ui.core.Widget widget) { throw new NotImplementedException(); }

		#endregion Methods
    }
}