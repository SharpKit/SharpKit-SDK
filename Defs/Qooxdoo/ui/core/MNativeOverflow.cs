// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.core
{
    /// <summary>
	/// <para>This mixin is included by all widgets which supports native overflowing.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.core.MNativeOverflow", OmitOptionalParameters = true, Export = false)]
    public partial class MNativeOverflow 
    {
		#region Properties

		/// <summary>
		/// <para>Overflow group property</para>
		/// </summary>
		[JsProperty(Name = "overflow", NativeField = true)]
		public object Overflow { get; set; }

		/// <summary>
		/// <para>Whether the widget should have horizontal scrollbars.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "hidden","visible","scroll","auto"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "overflowX", NativeField = true)]
		public object OverflowX { get; set; }

		/// <summary>
		/// <para>Whether the widget should have vertical scrollbars.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "hidden","visible","scroll","auto"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "overflowY", NativeField = true)]
		public object OverflowY { get; set; }

		#endregion Properties

		#region Methods

		public MNativeOverflow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property overflowX.</para>
		/// </summary>
		[JsMethod(Name = "getOverflowX")]
		public object GetOverflowX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property overflowY.</para>
		/// </summary>
		[JsMethod(Name = "getOverflowY")]
		public object GetOverflowY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property overflowX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property overflowX.</param>
		[JsMethod(Name = "initOverflowX")]
		public void InitOverflowX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property overflowY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property overflowY.</param>
		[JsMethod(Name = "initOverflowY")]
		public void InitOverflowY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property overflow.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOverflow")]
		public void ResetOverflow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property overflowX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOverflowX")]
		public void ResetOverflowX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property overflowY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOverflowY")]
		public void ResetOverflowY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group overflow.</para>
		/// </summary>
		/// <param name="overflowX">Sets the value of the property #overflowX.</param>
		/// <param name="overflowY">Sets the value of the property #overflowY.</param>
		[JsMethod(Name = "setOverflow")]
		public void SetOverflow(object overflowX, object overflowY) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property overflowX.</para>
		/// </summary>
		/// <param name="value">New value for property overflowX.</param>
		[JsMethod(Name = "setOverflowX")]
		public void SetOverflowX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property overflowY.</para>
		/// </summary>
		/// <param name="value">New value for property overflowY.</param>
		[JsMethod(Name = "setOverflowY")]
		public void SetOverflowY(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}