// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.core.selection
{
    /// <summary>
	/// <para>Generic selection manager to bring rich desktop like selection behavior
	/// to widgets and low-level interactive controls.</para>
	/// <para>The selection handling supports both Shift and Ctrl/Meta modifies like
	/// known from native applications.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.core.selection.Abstract", OmitOptionalParameters = true, Export = false)]
    public abstract partial class Abstract : qx.core.Object
    {
		#region Events

		/// <summary>
		/// <para>Fires after the selection was modified. Contains the selection under the data property.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelection;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Enable drag selection (multi selection of items through
		/// dragging the mouse in pressed states).</para>
		/// <para>Only possible for the modes multi and additive</para>
		/// </summary>
		[JsProperty(Name = "drag", NativeField = true)]
		public bool Drag { get; set; }

		/// <summary>
		/// <para>Selects the selection mode to use.</para>
		/// <list type="bullet">
		/// <item>single: One or no element is selected</item>
		/// <item>multi: Multi items could be selected. Also allows empty selections.</item>
		/// <item>additive: Easy Web-2.0 selection mode. Allows multiple selections without modifier keys.</item>
		/// <item>one: If possible always exactly one item is selected</item>
		/// </list
		/// </summary>
		/// <remarks>
		/// Possible values: "single","multi","additive","one"
		/// </remarks>
		[JsProperty(Name = "mode", NativeField = true)]
		public object Mode { get; set; }

		/// <summary>
		/// <para>Enable quick selection mode, where no click is needed to change the selection.</para>
		/// <para>Only possible for the modes single and one.</para>
		/// </summary>
		[JsProperty(Name = "quick", NativeField = true)]
		public bool Quick { get; set; }

		#endregion Properties

		#region Methods

		public Abstract() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds the given item to the existing selection.</para>
		/// <para>Use <see cref="SelectItem"/> instead if you want to replace
		/// the current selection.</para>
		/// </summary>
		/// <param name="item">Any valid item</param>
		[JsMethod(Name = "addItem")]
		public void AddItem(object item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears the whole selection at once. Also
		/// resets the lead and anchor items and their
		/// styles.</para>
		/// </summary>
		[JsMethod(Name = "clearSelection")]
		public void ClearSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property drag.</para>
		/// </summary>
		[JsMethod(Name = "getDrag")]
		public bool GetDrag() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current lead item. Generally the item which was last modified
		/// by the user (clicked on etc.)</para>
		/// </summary>
		/// <returns>The lead item or null</returns>
		[JsMethod(Name = "getLeadItem")]
		public object GetLeadItem() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property mode.</para>
		/// </summary>
		[JsMethod(Name = "getMode")]
		public object GetMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property quick.</para>
		/// </summary>
		[JsMethod(Name = "getQuick")]
		public bool GetQuick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all selectable items of the container.</para>
		/// </summary>
		/// <param name="all">true for all selectables, false for the selectables the user can interactively select</param>
		/// <returns>A list of items</returns>
		[JsMethod(Name = "getSelectables")]
		public JsArray GetSelectables(bool all) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the selected item. This method does only work in single
		/// selection mode.</para>
		/// </summary>
		/// <returns>The selected item.</returns>
		[JsMethod(Name = "getSelectedItem")]
		public object GetSelectedItem() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an array of currently selected items.</para>
		/// <para>Note: The result is only a set of selected items, so the order can
		/// differ from the sequence in which the items were added.</para>
		/// </summary>
		/// <returns>List of items.</returns>
		[JsMethod(Name = "getSelection")]
		public object GetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the selection context. One of click,
		/// quick, drag or key or
		/// null.</para>
		/// </summary>
		/// <returns>One of click, quick, drag or key or null</returns>
		[JsMethod(Name = "getSelectionContext")]
		public string GetSelectionContext() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the selection sorted by the index in the
		/// container of the selection (the assigned widget)</para>
		/// </summary>
		/// <returns>Sorted list of items</returns>
		[JsMethod(Name = "getSortedSelection")]
		public object GetSortedSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method should be connected to the addItem event
		/// of the managed object.</para>
		/// </summary>
		/// <param name="e">The event object</param>
		[JsMethod(Name = "handleAddItem")]
		public void HandleAddItem(qx.eventx.type.Data e) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method should be connected to the keypress event
		/// of the managed object.</para>
		/// </summary>
		/// <param name="eventx">A valid key sequence event</param>
		[JsMethod(Name = "handleKeyPress")]
		public void HandleKeyPress(qx.eventx.type.KeySequence eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method should be connected to the losecapture event
		/// of the managed object.</para>
		/// </summary>
		/// <param name="eventx">A valid mouse event</param>
		[JsMethod(Name = "handleLoseCapture")]
		public void HandleLoseCapture(qx.eventx.type.Mouse eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method should be connected to the mousedown event
		/// of the managed object.</para>
		/// </summary>
		/// <param name="eventx">A valid mouse event</param>
		[JsMethod(Name = "handleMouseDown")]
		public void HandleMouseDown(qx.eventx.type.Mouse eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method should be connected to the mousemove event
		/// of the managed object.</para>
		/// </summary>
		/// <param name="eventx">A valid mouse event</param>
		[JsMethod(Name = "handleMouseMove")]
		public void HandleMouseMove(qx.eventx.type.Mouse eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method should be connected to the mouseover event
		/// of the managed object.</para>
		/// </summary>
		/// <param name="eventx">A valid mouse event</param>
		[JsMethod(Name = "handleMouseOver")]
		public void HandleMouseOver(qx.eventx.type.Mouse eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method should be connected to the mouseup event
		/// of the managed object.</para>
		/// </summary>
		/// <param name="eventx">A valid mouse event</param>
		[JsMethod(Name = "handleMouseUp")]
		public void HandleMouseUp(qx.eventx.type.Mouse eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method should be connected to the removeItem event
		/// of the managed object.</para>
		/// </summary>
		/// <param name="e">The event object</param>
		[JsMethod(Name = "handleRemoveItem")]
		public void HandleRemoveItem(qx.eventx.type.Data e) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property drag
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property drag.</param>
		[JsMethod(Name = "initDrag")]
		public void InitDrag(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property mode
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property mode.</param>
		[JsMethod(Name = "initMode")]
		public void InitMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property quick
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property quick.</param>
		[JsMethod(Name = "initQuick")]
		public void InitQuick(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Invert the selection. Select the non selected and deselect the selected.</para>
		/// </summary>
		[JsMethod(Name = "invertSelection")]
		public void InvertSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property drag equals true.</para>
		/// </summary>
		[JsMethod(Name = "isDrag")]
		public void IsDrag() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Detects whether the given item is currently selected.</para>
		/// </summary>
		/// <param name="item">Any valid selectable item</param>
		/// <returns>Whether the item is selected</returns>
		[JsMethod(Name = "isItemSelected")]
		public bool IsItemSelected(object item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property quick equals true.</para>
		/// </summary>
		[JsMethod(Name = "isQuick")]
		public void IsQuick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the selection is empty</para>
		/// </summary>
		/// <returns>Whether the selection is empty</returns>
		[JsMethod(Name = "isSelectionEmpty")]
		public bool IsSelectionEmpty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the given item from the selection.</para>
		/// <para>Use <see cref="ClearSelection"/> when you want to clear
		/// the whole selection at once.</para>
		/// </summary>
		/// <param name="item">Any valid item</param>
		[JsMethod(Name = "removeItem")]
		public void RemoveItem(object item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Replaces current selection with given array of items.</para>
		/// <para>Please note that in single selection scenarios it is more
		/// efficient to directly use <see cref="SelectItem"/>.</para>
		/// </summary>
		/// <param name="items">Items to select</param>
		[JsMethod(Name = "replaceSelection")]
		public void ReplaceSelection(JsArray items) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property drag.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDrag")]
		public void ResetDrag() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property mode.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMode")]
		public void ResetMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property quick.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetQuick")]
		public void ResetQuick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects all items of the managed object.</para>
		/// </summary>
		[JsMethod(Name = "selectAll")]
		public void SelectAll() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects the given item. Replaces current selection
		/// completely with the new item.</para>
		/// <para>Use <see cref="AddItem"/> instead if you want to add new
		/// items to an existing selection.</para>
		/// </summary>
		/// <param name="item">Any valid item</param>
		[JsMethod(Name = "selectItem")]
		public void SelectItem(object item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects an item range between two given items.</para>
		/// </summary>
		/// <param name="begin">Item to start with</param>
		/// <param name="end">Item to end at</param>
		[JsMethod(Name = "selectItemRange")]
		public void SelectItemRange(object begin, object end) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property drag.</para>
		/// </summary>
		/// <param name="value">New value for property drag.</param>
		[JsMethod(Name = "setDrag")]
		public void SetDrag(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property mode.</para>
		/// </summary>
		/// <param name="value">New value for property mode.</param>
		[JsMethod(Name = "setMode")]
		public void SetMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property quick.</para>
		/// </summary>
		/// <param name="value">New value for property quick.</param>
		[JsMethod(Name = "setQuick")]
		public void SetQuick(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property drag.</para>
		/// </summary>
		[JsMethod(Name = "toggleDrag")]
		public void ToggleDrag() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property quick.</para>
		/// </summary>
		[JsMethod(Name = "toggleQuick")]
		public void ToggleQuick() { throw new NotImplementedException(); }

		#endregion Methods
    }
}