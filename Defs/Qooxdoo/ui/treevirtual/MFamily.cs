// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.treevirtual
{
    /// <summary>
	/// <para>A set of methods which may be used to retrieve various siblings of nodes.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.treevirtual.MFamily", OmitOptionalParameters = true, Export = false)]
    public partial class MFamily 
    {
		#region Methods

		public MFamily() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the first child of the specified node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the first child is desired.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The node id of the first child.</returns>
		[JsMethod(Name = "familyGetFirstChild")]
		public double FamilyGetFirstChild(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the last child of the specified node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the last child is desired.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The node id of the last child.</returns>
		[JsMethod(Name = "familyGetLastChild")]
		public double FamilyGetLastChild(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the next sibling of the specified node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the next sibling is desired.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The node id of the next sibling.</returns>
		[JsMethod(Name = "familyGetNextSibling")]
		public double FamilyGetNextSibling(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the previous sibling of the specified node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the previous sibling is desired.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The node id of the previous sibling.</returns>
		[JsMethod(Name = "familyGetPrevSibling")]
		public double FamilyGetPrevSibling(object nodeReference) { throw new NotImplementedException(); }

		#endregion Methods
    }
}