// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.treevirtual
{
    /// <summary>
	/// <para>Utility functions for working with nodes.  These methods allow reference
	/// to a node by either the object itself or the object&#8217;s node id.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.treevirtual.MNode", OmitOptionalParameters = true, Export = false)]
    public partial class MNode 
    {
		#region Methods

		public MNode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a node object given its node id.</para>
		/// </summary>
		/// <param name="nodeReference">The node to have its opened/closed state toggled.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.).</param>
		/// <returns>If the nodeReference is a node object itself, that same node object is returned (identity).  Otherwise, the node object is looked up using the specified node id.</returns>
		[JsMethod(Name = "nodeGet")]
		public object NodeGet(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the cell style for a node</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the cell style is being retrieved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The CSS style being applied for the tree column cell for this node.</returns>
		[JsMethod(Name = "nodeGetCellStyle")]
		public string NodeGetCellStyle(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the hideOpenClose state for a node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the hideOpenClose state is being retrieved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The new hideOpenClose state for the specified node.</returns>
		[JsMethod(Name = "nodeGetHideOpenClose")]
		public bool NodeGetHideOpenClose(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the icon for a node when in its unselected (normal) state.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the icon is being retrieved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The path to the icon to be used when the node is not selected, if a path has been previously provided (i.e. not using the default icon).</returns>
		[JsMethod(Name = "nodeGetIcon")]
		public string NodeGetIcon(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the label for a node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the label is being retrieved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The label for the specified node</returns>
		[JsMethod(Name = "nodeGetLabel")]
		public string NodeGetLabel(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the label style for a node</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the label style is being retrieved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The CSS style being applied for the label for this node, if a style has been previously provided (i.e. not using the default style).</returns>
		[JsMethod(Name = "nodeGetLabelStyle")]
		public string NodeGetLabelStyle(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the opened state for a node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the opened state is being retrieved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The opened state for the specified node.</returns>
		[JsMethod(Name = "nodeGetOpened")]
		public bool NodeGetOpened(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the selected state for a node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the selected state is being retrieved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The selected state for the specified node.</returns>
		[JsMethod(Name = "nodeGetSelected")]
		public bool NodeGetSelected(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the icon for a node when in its selected state.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the icon is being retrieved.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <returns>The path to the icon to be used when the node is selected, if a path has been previously provided (i.e. not using the default icon).</returns>
		[JsMethod(Name = "nodeGetSelectedIcon")]
		public string NodeGetSelectedIcon(object nodeReference) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the cell style for a node</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the cell style is being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="style">The CSS style to be applied for the tree column cell for this node, if a style has been previously provided (i.e. not using the default style).</param>
		[JsMethod(Name = "nodeSetCellStyle")]
		public void NodeSetCellStyle(object nodeReference, string style) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the hideOpenClose state for a node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the hideOpenClose state is being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="b">The new hideOpenClose state for the specified node.</param>
		[JsMethod(Name = "nodeSetHideOpenClose")]
		public void NodeSetHideOpenClose(object nodeReference, bool b) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the icon for a node when in its unselected (normal) state.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the icon is being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="path">The path to the icon to be used when the node is not selected</param>
		[JsMethod(Name = "nodeSetIcon")]
		public void NodeSetIcon(object nodeReference, string path) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the label for a node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the label is being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="label">The new label for the specified node</param>
		[JsMethod(Name = "nodeSetLabel")]
		public void NodeSetLabel(object nodeReference, string label) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the label style for a node</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the label style is being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="style">The CSS style to be applied for the label for this node.</param>
		[JsMethod(Name = "nodeSetLabelStyle")]
		public void NodeSetLabelStyle(object nodeReference, string style) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the opened state for a node.  (Note that this method has no effect
		/// if the requested state is the same as the current state.)</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the opened state is being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="b">The new opened state for the specified node.</param>
		[JsMethod(Name = "nodeSetOpened")]
		public void NodeSetOpened(object nodeReference, bool b) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the selected state for a node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the selected state is being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="b">The new selected state for the specified node.</param>
		[JsMethod(Name = "nodeSetSelected")]
		public void NodeSetSelected(object nodeReference, bool b) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the icon for a node when in its selected state.</para>
		/// <para>NOTE: As of 13 Mar 2009, this feature is disabled by default, by
		/// virtue of the fact that the tree&#8217;s &#8220;alwaysUpdateCells&#8221; property
		/// has a setting of &#8216;false&#8217; now instead of &#8216;true&#8217;. Setting this
		/// property to true allows the icon to change upon selection, but
		/// causes problems such as single clicks not always selecting a
		/// row, and, in IE, double click operations failing
		/// completely. (For more information, see bugs 605 and 2021.) To
		/// re-enable the option to have an unique icon that is displayed
		/// when the node is selected, issue
		/// tree.setAlwaysUpdateCells(true);</para>
		/// </summary>
		/// <param name="nodeReference">The node for which the icon is being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="path">The path to the icon to be used when the node is selected</param>
		[JsMethod(Name = "nodeSetSelectedIcon")]
		public void NodeSetSelectedIcon(object nodeReference, string path) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set state attributes of a tree node.</para>
		/// </summary>
		/// <param name="nodeReference">The node for which attributes are being set.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		/// <param name="attributes">Map with the node properties to be set.  The map may contain any of the properties described in qx.ui.treevirtual.SimpleTreeDataModel</param>
		[JsMethod(Name = "nodeSetState")]
		public void NodeSetState(object nodeReference, object attributes) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggle the opened state of the node: if the node is opened, close
		/// it; if it is closed, open it.</para>
		/// </summary>
		/// <param name="nodeReference">The node to have its opened/closed state toggled.  The node can be represented either by the node object, or the node id (as would have been returned by addBranch(), addLeaf(), etc.)</param>
		[JsMethod(Name = "nodeToggleOpened")]
		public void NodeToggleOpened(object nodeReference) { throw new NotImplementedException(); }

		#endregion Methods
    }
}