// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.treevirtual
{
    /// <summary>
	/// <para>A data cell renderer for the tree column of a simple tree</para>
	/// <para>This cell renderer has provisions for subclasses to easily extend the
	/// appearance of the tree. If the tree should contain images, labels,
	/// etc. before the indentation, the subclass should override the method
	/// _addExtraContentBeforeIndentation(). Similarly, content can be added before
	/// the icon by overriding _addExtraContentBeforeIcon(), and before the label
	/// by overriding _addExtraContentBeforeLabel().</para>
	/// <para>Each of these overridden methods that calls _addImage() can provide, as
	/// part of the map passed to _addImage(), a member called &#8220;tooltip&#8221; which
	/// contains the tool tip to present when the mouse is hovered over the image.</para>
	/// <para>If this class is subclassed to form a new cell renderer, an instance of it
	/// must be provided, via the &#8216;custom&#8217; parameter, to the TreeVirtual
	/// constructor.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.treevirtual.SimpleTreeDataCellRenderer", OmitOptionalParameters = true, Export = false)]
    public partial class SimpleTreeDataCellRenderer : qx.ui.table.cellrenderer.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>Set whether the open/close button should be displayed on a branch, even
		/// if the branch has no children.</para>
		/// </summary>
		[JsProperty(Name = "alwaysShowOpenCloseSymbol", NativeField = true)]
		public bool AlwaysShowOpenCloseSymbol { get; set; }

		/// <summary>
		/// <para>When true, exclude only the first-level tree lines, creating,
		/// effectively, multiple unrelated root nodes.</para>
		/// </summary>
		[JsProperty(Name = "excludeFirstLevelTreeLines", NativeField = true)]
		public bool ExcludeFirstLevelTreeLines { get; set; }

		/// <summary>
		/// <para>Set whether lines linking tree children shall be drawn on the tree
		/// if the theme supports tree lines.</para>
		/// </summary>
		[JsProperty(Name = "useTreeLines", NativeField = true)]
		public bool UseTreeLines { get; set; }

		#endregion Properties

		#region Methods

		public SimpleTreeDataCellRenderer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alwaysShowOpenCloseSymbol.</para>
		/// </summary>
		[JsMethod(Name = "getAlwaysShowOpenCloseSymbol")]
		public bool GetAlwaysShowOpenCloseSymbol() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property excludeFirstLevelTreeLines.</para>
		/// </summary>
		[JsMethod(Name = "getExcludeFirstLevelTreeLines")]
		public bool GetExcludeFirstLevelTreeLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property useTreeLines.</para>
		/// </summary>
		[JsMethod(Name = "getUseTreeLines")]
		public bool GetUseTreeLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alwaysShowOpenCloseSymbol
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alwaysShowOpenCloseSymbol.</param>
		[JsMethod(Name = "initAlwaysShowOpenCloseSymbol")]
		public void InitAlwaysShowOpenCloseSymbol(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property excludeFirstLevelTreeLines
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property excludeFirstLevelTreeLines.</param>
		[JsMethod(Name = "initExcludeFirstLevelTreeLines")]
		public void InitExcludeFirstLevelTreeLines(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property useTreeLines
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property useTreeLines.</param>
		[JsMethod(Name = "initUseTreeLines")]
		public void InitUseTreeLines(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property alwaysShowOpenCloseSymbol equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAlwaysShowOpenCloseSymbol")]
		public void IsAlwaysShowOpenCloseSymbol() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property excludeFirstLevelTreeLines equals true.</para>
		/// </summary>
		[JsMethod(Name = "isExcludeFirstLevelTreeLines")]
		public void IsExcludeFirstLevelTreeLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property useTreeLines equals true.</para>
		/// </summary>
		[JsMethod(Name = "isUseTreeLines")]
		public void IsUseTreeLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alwaysShowOpenCloseSymbol.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlwaysShowOpenCloseSymbol")]
		public void ResetAlwaysShowOpenCloseSymbol() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property excludeFirstLevelTreeLines.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetExcludeFirstLevelTreeLines")]
		public void ResetExcludeFirstLevelTreeLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property useTreeLines.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUseTreeLines")]
		public void ResetUseTreeLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alwaysShowOpenCloseSymbol.</para>
		/// </summary>
		/// <param name="value">New value for property alwaysShowOpenCloseSymbol.</param>
		[JsMethod(Name = "setAlwaysShowOpenCloseSymbol")]
		public void SetAlwaysShowOpenCloseSymbol(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property excludeFirstLevelTreeLines.</para>
		/// </summary>
		/// <param name="value">New value for property excludeFirstLevelTreeLines.</param>
		[JsMethod(Name = "setExcludeFirstLevelTreeLines")]
		public void SetExcludeFirstLevelTreeLines(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property useTreeLines.</para>
		/// </summary>
		/// <param name="value">New value for property useTreeLines.</param>
		[JsMethod(Name = "setUseTreeLines")]
		public void SetUseTreeLines(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property alwaysShowOpenCloseSymbol.</para>
		/// </summary>
		[JsMethod(Name = "toggleAlwaysShowOpenCloseSymbol")]
		public void ToggleAlwaysShowOpenCloseSymbol() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property excludeFirstLevelTreeLines.</para>
		/// </summary>
		[JsMethod(Name = "toggleExcludeFirstLevelTreeLines")]
		public void ToggleExcludeFirstLevelTreeLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property useTreeLines.</para>
		/// </summary>
		[JsMethod(Name = "toggleUseTreeLines")]
		public void ToggleUseTreeLines() { throw new NotImplementedException(); }

		#endregion Methods
    }
}