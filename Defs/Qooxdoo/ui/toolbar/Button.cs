// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.toolbar
{
    /// <summary>
	/// <para>The normal toolbar button. Like a normal <see cref="qx.ui.form.Button"/>
	/// but with a style matching the toolbar and without keyboard support.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.toolbar.Button", OmitOptionalParameters = true, Export = false)]
    public partial class Button : qx.ui.form.Button
    {
		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Whether the widget is focusable e.g. rendering a focus border and visualize
		/// as active element.</para>
		/// <para>See also <see cref="IsTabable"/> which allows runtime checks for
		/// isChecked or other stuff to test whether the widget is
		/// reachable via the TAB key.</para>
		/// </summary>
		[JsProperty(Name = "focusable", NativeField = true)]
		public bool Focusable { get; set; }

		/// <summary>
		/// <para>Configure the visibility of the sub elements/widgets.
		/// Possible values: both, label, icon</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "both","label","icon"
		/// </remarks>
		[JsProperty(Name = "show", NativeField = true)]
		public object Show { get; set; }

		#endregion Properties

		#region Methods

		public Button() { throw new NotImplementedException(); }

		/// <param name="label">label of the atom</param>
		/// <param name="icon">Icon URL of the atom</param>
		/// <param name="command">Command instance to connect with</param>
		public Button(string label, string icon = null, qx.ui.core.Command command = null) { throw new NotImplementedException(); }

		#endregion Methods
    }
}