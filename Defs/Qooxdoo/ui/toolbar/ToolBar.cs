// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;

namespace qx.ui.toolbar
{
    /// <summary>
	/// <para>The Toolbar class is the main part of the toolbar widget.</para>
	/// <para>It can handle added <see cref="Button"/>s, <see cref="CheckBox"/>es, <see cref="RadioButton"/>s
	/// and <see cref="Separator"/>s in its <see cref="Add"/> method. The <see cref="AddSpacer"/> method
	/// adds a spacer at the current toolbar position. This means that the widgets
	/// added after the method call of <see cref="AddSpacer"/> are aligned to the right of
	/// the toolbar.</para>
	/// <para>For more details on the documentation of the toolbar widget, take a look at the
	/// documentation of the <see cref="qx.ui.toolbar"/>-Package.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.toolbar.ToolBar", OmitOptionalParameters = true, Export = false)]
    public partial class ToolBar : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="OpenMenu"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeOpenMenu;

		/// <summary>
		/// Fired on change of the property <see cref="Show"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeShow;

		/// <summary>
		/// <para>Fired if an item will be hidden by the <see cref="OverflowHandling"/>.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnHideItem;

		/// <summary>
		/// <para>Fired if an item will be show by the <see cref="OverflowHandling"/>.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnShowItem;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Appearance of the widget</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public object Appearance { get; set; }

		/// <summary>
		/// <para>Holds the currently open menu (when the toolbar is used for menus)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "openMenu", NativeField = true)]
		public qx.ui.menu.Menu OpenMenu { get; set; }

		/// <summary>
		/// <para>Enables the overflow handling which automatically removes items.</para>
		/// </summary>
		[JsProperty(Name = "overflowHandling", NativeField = true)]
		public bool OverflowHandling { get; set; }

		/// <summary>
		/// <para>Widget which will be shown if at least one toolbar item is hidden.
		/// Keep in mind to add this widget to the toolbar before you set it as
		/// indicator!</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "overflowIndicator", NativeField = true)]
		public qx.ui.core.Widget OverflowIndicator { get; set; }

		/// <summary>
		/// <para>Whether icons, labels, both or none should be shown.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "both","label","icon"
		/// </remarks>
		[JsProperty(Name = "show", NativeField = true)]
		public object Show { get; set; }

		/// <summary>
		/// <para>The spacing between every child of the toolbar</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "spacing", NativeField = true)]
		public double Spacing { get; set; }

		#endregion Properties

		#region Methods

		public ToolBar() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a separator to the toolbar.</para>
		/// </summary>
		[JsMethod(Name = "addSeparator")]
		public void AddSeparator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a spacer to the toolbar. The spacer has a flex
		/// value of one and will stretch to the available space.</para>
		/// </summary>
		/// <returns>The newly added spacer object. A reference to the spacer is needed to remove this spacer from the layout.</returns>
		[JsMethod(Name = "addSpacer")]
		public qx.ui.core.Spacer AddSpacer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all nested buttons which contains a menu to show. This is mainly
		/// used for keyboard support.</para>
		/// </summary>
		/// <returns>List of all menu buttons</returns>
		[JsMethod(Name = "getMenuButtons")]
		public JsArray GetMenuButtons() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property openMenu.</para>
		/// </summary>
		[JsMethod(Name = "getOpenMenu")]
		public qx.ui.menu.Menu GetOpenMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property overflowHandling.</para>
		/// </summary>
		[JsMethod(Name = "getOverflowHandling")]
		public bool GetOverflowHandling() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property overflowIndicator.</para>
		/// </summary>
		[JsMethod(Name = "getOverflowIndicator")]
		public qx.ui.core.Widget GetOverflowIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property show.</para>
		/// </summary>
		[JsMethod(Name = "getShow")]
		public object GetShow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property spacing.</para>
		/// </summary>
		[JsMethod(Name = "getSpacing")]
		public double GetSpacing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property openMenu
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property openMenu.</param>
		[JsMethod(Name = "initOpenMenu")]
		public void InitOpenMenu(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property overflowHandling
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property overflowHandling.</param>
		[JsMethod(Name = "initOverflowHandling")]
		public void InitOverflowHandling(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property overflowIndicator
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property overflowIndicator.</param>
		[JsMethod(Name = "initOverflowIndicator")]
		public void InitOverflowIndicator(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property show
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property show.</param>
		[JsMethod(Name = "initShow")]
		public void InitShow(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property spacing
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property spacing.</param>
		[JsMethod(Name = "initSpacing")]
		public void InitSpacing(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property overflowHandling equals true.</para>
		/// </summary>
		[JsMethod(Name = "isOverflowHandling")]
		public void IsOverflowHandling() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property openMenu.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOpenMenu")]
		public void ResetOpenMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property overflowHandling.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOverflowHandling")]
		public void ResetOverflowHandling() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property overflowIndicator.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOverflowIndicator")]
		public void ResetOverflowIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property show.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShow")]
		public void ResetShow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property spacing.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSpacing")]
		public void ResetSpacing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property openMenu.</para>
		/// </summary>
		/// <param name="value">New value for property openMenu.</param>
		[JsMethod(Name = "setOpenMenu")]
		public void SetOpenMenu(qx.ui.menu.Menu value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property overflowHandling.</para>
		/// </summary>
		/// <param name="value">New value for property overflowHandling.</param>
		[JsMethod(Name = "setOverflowHandling")]
		public void SetOverflowHandling(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property overflowIndicator.</para>
		/// </summary>
		/// <param name="value">New value for property overflowIndicator.</param>
		[JsMethod(Name = "setOverflowIndicator")]
		public void SetOverflowIndicator(qx.ui.core.Widget value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The removal of the toolbar items is priority based. You can change these
		/// priorities with this method. The higher a priority, the earlier it will
		/// be excluded. Remmeber to use every priority only once! If you want
		/// override an already set priority, use the override parameter.
		/// Keep in mind to only use already added items.</para>
		/// </summary>
		/// <param name="item">The item to give the priority.</param>
		/// <param name="priority">The priority, higher means removed earlier.</param>
		/// <param name="overridex">true, if the priority should be overridden.</param>
		[JsMethod(Name = "setRemovePriority")]
		public void SetRemovePriority(qx.ui.core.Widget item, double priority, bool overridex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property show.</para>
		/// </summary>
		/// <param name="value">New value for property show.</param>
		[JsMethod(Name = "setShow")]
		public void SetShow(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property spacing.</para>
		/// </summary>
		/// <param name="value">New value for property spacing.</param>
		[JsMethod(Name = "setSpacing")]
		public void SetSpacing(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property overflowHandling.</para>
		/// </summary>
		[JsMethod(Name = "toggleOverflowHandling")]
		public void ToggleOverflowHandling() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a new child widget.</para>
		/// <para>The supported keys of the layout options map depend on the layout manager
		/// used to position the widget. The options are documented in the class
		/// documentation of each layout manager <see cref="qx.ui.layout"/>.</para>
		/// </summary>
		/// <param name="child">the widget to add.</param>
		/// <param name="options">Optional layout data for widget.</param>
		[JsMethod(Name = "add")]
		public void Add(LayoutItem child, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a widget after another already inserted widget</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">Widget to add</param>
		/// <param name="after">Widget, after which the new widget will be inserted</param>
		/// <param name="options">Optional layout data for widget.</param>
		[JsMethod(Name = "addAfter")]
		public void AddAfter(LayoutItem child, LayoutItem after, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a child widget at the specified index</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">Widget to add</param>
		/// <param name="index">Index, at which the widget will be inserted</param>
		/// <param name="options">Optional layout data for widget.</param>
		[JsMethod(Name = "addAt")]
		public void AddAt(LayoutItem child, double index, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a widget before another already inserted widget</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">Widget to add</param>
		/// <param name="before">Widget before the new widget will be inserted.</param>
		/// <param name="options">Optional layout data for widget.</param>
		[JsMethod(Name = "addBefore")]
		public void AddBefore(LayoutItem child, LayoutItem before, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the children list</para>
		/// </summary>
		/// <returns>The children array (Arrays are reference types, please to not modify them in-place)</returns>
		[JsMethod(Name = "getChildren")]
		public LayoutItem GetChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the widget contains children.</para>
		/// </summary>
		/// <returns>Returns true when the widget has children.</returns>
		[JsMethod(Name = "hasChildren")]
		public bool HasChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the index position of the given widget if it is
		/// a child widget. Otherwise it returns -1.</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">the widget to query for</param>
		/// <returns>The index position or -1 when the given widget is no child of this layout.</returns>
		[JsMethod(Name = "indexOf")]
		public double IndexOf(Widget child) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove the given child widget.</para>
		/// </summary>
		/// <param name="child">the widget to remove</param>
		[JsMethod(Name = "remove")]
		public void Remove(LayoutItem child) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove all children.</para>
		/// </summary>
		/// <returns>An array of the removed children.</returns>
		[JsMethod(Name = "removeAll")]
		public JsArray RemoveAll() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove the widget at the specified index.</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="index">Index of the widget to remove.</param>
		/// <returns>The child removed.</returns>
		[JsMethod(Name = "removeAt")]
		public LayoutItem RemoveAt(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Mapping of protected methods to public.
		/// This omits an additional function call when using these methods. Call
		/// this methods in the defer block of the including class.</para>
		/// </summary>
		/// <param name="members">The including classes members map</param>
		[JsMethod(Name = "remap")]
		public static void Remap(object members) { throw new NotImplementedException(); }

		#endregion Methods
    }
}