// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.toolbar
{
    /// <summary>
	/// <para>The container used by <see cref="Part"/> to insert the buttons.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.toolbar.PartContainer", OmitOptionalParameters = true, Export = false)]
    public partial class PartContainer : qx.ui.container.Composite
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Show"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeShow;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Whether icons, labels, both or none should be shown.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "both","label","icon"
		/// </remarks>
		[JsProperty(Name = "show", NativeField = true)]
		public object Show { get; set; }

		#endregion Properties

		#region Methods

		public PartContainer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property show.</para>
		/// </summary>
		[JsMethod(Name = "getShow")]
		public object GetShow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property show
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property show.</param>
		[JsMethod(Name = "initShow")]
		public void InitShow(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property show.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShow")]
		public void ResetShow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property show.</para>
		/// </summary>
		/// <param name="value">New value for property show.</param>
		[JsMethod(Name = "setShow")]
		public void SetShow(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}