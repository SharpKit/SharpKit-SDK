// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.form;

namespace qx.ui.tree.core
{
    /// <summary>
	/// <para>The AbstractItem serves as a common superclass for the {@link
	/// qx.ui.tree.core.AbstractTreeItem} and <see cref="qx.ui.tree.VirtualTreeItem"/> classes.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.tree.core.AbstractItem", OmitOptionalParameters = true, Export = false)]
    public abstract partial class AbstractItem : qx.ui.core.Widget, qx.ui.form.IModel
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Icon"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeIcon;

		/// <summary>
		/// Fired on change of the property <see cref="IconOpened"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeIconOpened;

		/// <summary>
		/// Fired on change of the property <see cref="Indent"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeIndent;

		/// <summary>
		/// Fired on change of the property <see cref="Label"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeLabel;

		/// <summary>
		/// Fired on change of the property <see cref="Open"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeOpen;

		/// <summary>
		/// Fired on change of the property <see cref="OpenSymbolMode"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeOpenSymbolMode;

		/// <summary>
		/// <para>Fired when the model data changes</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModel;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>URI of &#8220;closed&#8221; icon. Can be any URI String supported by qx.ui.basic.Image.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "icon", NativeField = true)]
		public string Icon { get; set; }

		/// <summary>
		/// <para>URI of &#8220;opened&#8221; icon. Can be any URI String supported by qx.ui.basic.Image.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "iconOpened", NativeField = true)]
		public string IconOpened { get; set; }

		/// <summary>
		/// <para>The number of pixel to indent the tree item for each level.</para>
		/// </summary>
		[JsProperty(Name = "indent", NativeField = true)]
		public double Indent { get; set; }

		/// <summary>
		/// <para>The label/caption/text</para>
		/// </summary>
		[JsProperty(Name = "label", NativeField = true)]
		public string Label { get; set; }

		/// <summary>
		/// <para>Whether the tree item is opened.</para>
		/// </summary>
		[JsProperty(Name = "open", NativeField = true)]
		public bool Open { get; set; }

		/// <summary>
		/// <para>Controls, when to show the open symbol. If the mode is &#8220;auto&#8221; , the open
		/// symbol is shown only if the item has child items.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "always","never","auto"
		/// </remarks>
		[JsProperty(Name = "openSymbolMode", NativeField = true)]
		public object OpenSymbolMode { get; set; }

		/// <summary>
		/// <para>Model property for storing additional information for the including
		/// object. It can act as value property on form items for example.</para>
		/// <para>Be careful using that property as this is used for the
		/// <see cref="qx.ui.form.MModelSelection"/> it has some restrictions:</para>
		/// <list type="bullet">
		/// <item>Don&#8217;t use equal models in one widget using the
		/// <see cref="qx.ui.form.MModelSelection"/>.</item>
		/// </list>
		/// <list type="bullet">
		/// <item>Avoid setting only some model properties if the widgets are added to
		/// a <see cref="qx.ui.form.MModelSelection"/> widge.</item>
		/// </list>
		/// <para>Both restrictions result of the fact, that the set models are deputies
		/// for their widget.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "model", NativeField = true)]
		public object Model { get; set; }

		#endregion Properties

		#region Methods

		public AbstractItem() { throw new NotImplementedException(); }

		/// <param name="label">The tree item&#8217;s caption text</param>
		public AbstractItem(string label = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds the icon widget to the item&#8217;s horizontal box layout. If the icon
		/// widget has been added before, it is removed from its old position and
		/// added to the end of the layout.</para>
		/// </summary>
		[JsMethod(Name = "addIcon")]
		public void AddIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds the label to the item&#8217;s horizontal box layout. If the label
		/// has been added before, it is removed from its old position and
		/// added to the end of the layout.</para>
		/// </summary>
		/// <param name="text">The label&#8217;s contents</param>
		[JsMethod(Name = "addLabel")]
		public void AddLabel(string text = "0") { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds the open button to the item&#8217;s horizontal box layout. If the open
		/// button has been added before, it is removed from its old position and
		/// added to the end of the layout.</para>
		/// </summary>
		[JsMethod(Name = "addOpenButton")]
		public void AddOpenButton() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds the spacer used to render the indentation to the item&#8217;s horizontal
		/// box layout. If the spacer has been added before, it is removed from its
		/// old position and added to the end of the layout.</para>
		/// </summary>
		[JsMethod(Name = "addSpacer")]
		public void AddSpacer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a sub widget to the tree item&#8217;s horizontal box layout.</para>
		/// </summary>
		/// <param name="widget">The widget to add</param>
		/// <param name="options">The (optional) layout options to use for the widget</param>
		[JsMethod(Name = "addWidget")]
		public void AddWidget(qx.ui.core.Widget widget, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property icon.</para>
		/// </summary>
		[JsMethod(Name = "getIcon")]
		public string GetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property iconOpened.</para>
		/// </summary>
		[JsMethod(Name = "getIconOpened")]
		public string GetIconOpened() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property indent.</para>
		/// </summary>
		[JsMethod(Name = "getIndent")]
		public double GetIndent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property label.</para>
		/// </summary>
		[JsMethod(Name = "getLabel")]
		public string GetLabel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Computes the item&#8217;s nesting level. If the item is not part of a tree
		/// this function will return null.</para>
		/// </summary>
		/// <returns>The item&#8217;s nesting level or null.</returns>
		[JsMethod(Name = "getLevel")]
		public double GetLevel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property open.</para>
		/// </summary>
		[JsMethod(Name = "getOpen")]
		public bool GetOpen() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property openSymbolMode.</para>
		/// </summary>
		[JsMethod(Name = "getOpenSymbolMode")]
		public object GetOpenSymbolMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the item has any children</para>
		/// </summary>
		/// <returns>Whether the item has any children.</returns>
		[JsMethod(Name = "hasChildren")]
		public bool HasChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property icon
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property icon.</param>
		[JsMethod(Name = "initIcon")]
		public void InitIcon(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property iconOpened
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property iconOpened.</param>
		[JsMethod(Name = "initIconOpened")]
		public void InitIconOpened(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property indent
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property indent.</param>
		[JsMethod(Name = "initIndent")]
		public void InitIndent(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property label
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property label.</param>
		[JsMethod(Name = "initLabel")]
		public void InitLabel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property open
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property open.</param>
		[JsMethod(Name = "initOpen")]
		public void InitOpen(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property openSymbolMode
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property openSymbolMode.</param>
		[JsMethod(Name = "initOpenSymbolMode")]
		public void InitOpenSymbolMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property open equals true.</para>
		/// </summary>
		[JsMethod(Name = "isOpen")]
		public void IsOpen() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the tree item can be opened.</para>
		/// </summary>
		/// <returns>Whether the tree item can be opened.</returns>
		[JsMethod(Name = "isOpenable")]
		public bool IsOpenable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property icon.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIcon")]
		public void ResetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property iconOpened.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIconOpened")]
		public void ResetIconOpened() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property indent.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIndent")]
		public void ResetIndent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property label.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLabel")]
		public void ResetLabel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property open.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOpen")]
		public void ResetOpen() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property openSymbolMode.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOpenSymbolMode")]
		public void ResetOpenSymbolMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property icon.</para>
		/// </summary>
		/// <param name="value">New value for property icon.</param>
		[JsMethod(Name = "setIcon")]
		public void SetIcon(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property iconOpened.</para>
		/// </summary>
		/// <param name="value">New value for property iconOpened.</param>
		[JsMethod(Name = "setIconOpened")]
		public void SetIconOpened(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property indent.</para>
		/// </summary>
		/// <param name="value">New value for property indent.</param>
		[JsMethod(Name = "setIndent")]
		public void SetIndent(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property label.</para>
		/// </summary>
		/// <param name="value">New value for property label.</param>
		[JsMethod(Name = "setLabel")]
		public void SetLabel(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property open.</para>
		/// </summary>
		/// <param name="value">New value for property open.</param>
		[JsMethod(Name = "setOpen")]
		public void SetOpen(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property openSymbolMode.</para>
		/// </summary>
		/// <param name="value">New value for property openSymbolMode.</param>
		[JsMethod(Name = "setOpenSymbolMode")]
		public void SetOpenSymbolMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method is called during the flush of the
		/// <see cref="qx.ui.core.queue.Widget widget queue"/>.</para>
		/// </summary>
		/// <param name="jobs">A map of jobs.</param>
		[JsMethod(Name = "syncWidget")]
		public void SyncWidget(object jobs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property open.</para>
		/// </summary>
		[JsMethod(Name = "toggleOpen")]
		public void ToggleOpen() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the representative data for the item</para>
		/// </summary>
		/// <returns>The data.</returns>
		[JsMethod(Name = "getModel")]
		public object GetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property model
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property model.</param>
		[JsMethod(Name = "initModel")]
		public void InitModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the representative data to null.</para>
		/// </summary>
		[JsMethod(Name = "resetModel")]
		public void ResetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the representative data for the item.</para>
		/// </summary>
		/// <param name="value">The data.</param>
		[JsMethod(Name = "setModel")]
		public void SetModel(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}