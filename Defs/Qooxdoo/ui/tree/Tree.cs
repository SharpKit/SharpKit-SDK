// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;
using qx.ui.form;

namespace qx.ui.tree
{
    /// <summary>
	/// <para>The Tree class implements a tree widget, with collapsible and expandable
	/// container nodes and terminal leaf nodes. You instantiate a Tree object and
	/// then assign the tree a root folder using the <see cref="Root"/> property.</para>
	/// <para>If you don&#8217;t want to show the root item, you can hide it with the
	/// <see cref="HideRoot"/> property.</para>
	/// <para>The handling of selections within a tree is somewhat distributed
	/// between the root tree object and the attached <see cref="qx.ui.tree.selection.SelectionManager"/>.
	/// To get the currently selected element of a tree use the tree <see cref="GetSelection"/>
	/// method and tree <see cref="SetSelection"/> to set it. The TreeSelectionManager
	/// handles more coarse-grained issues like providing <see cref="SelectAll"/> and
	/// <see cref="ResetSelection"/> methods.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.tree.Tree", OmitOptionalParameters = true, Export = false)]
    public partial class Tree : qx.ui.core.scroll.AbstractScrollArea, qx.ui.core.IMultiSelection, qx.ui.form.IModelSelection, qx.ui.form.IForm
    {
		#region Events

		/// <summary>
		/// <para>This event is fired after a tree item was added to the tree. The
		/// <see cref="qx.event.type.Data.GetData"/> method of the event returns the
		/// added item.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnAddItem;

		/// <summary>
		/// Fired on change of the property <see cref="OpenMode"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeOpenMode;

		/// <summary>
		/// Fired on change of the property <see cref="Root"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeRoot;

		/// <summary>
		/// <para>This event is fired after a tree item has been removed from the tree.
		/// The <see cref="qx.event.type.Data.GetData"/> method of the event returns the
		/// removed item.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnRemoveItem;

		/// <summary>
		/// <para>Fires after the selection was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelection;

		/// <summary>
		/// <para>Pseudo event. It will never be fired because the array itself can not
		/// be changed. But the event description is needed for the data binding.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModelSelection;

		/// <summary>
		/// <para>Fired when the invalidMessage was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeInvalidMessage;

		/// <summary>
		/// <para>Fired when the required was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeRequired;

		/// <summary>
		/// <para>Fired when the valid state was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeValid;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Whether the widget is focusable e.g. rendering a focus border and visualize
		/// as active element.</para>
		/// <para>See also <see cref="IsTabable"/> which allows runtime checks for
		/// isChecked or other stuff to test whether the widget is
		/// reachable via the TAB key.</para>
		/// </summary>
		[JsProperty(Name = "focusable", NativeField = true)]
		public bool Focusable { get; set; }

		/// <summary>
		/// <para>Hide the root (Tree) node.  This differs from the visibility property in
		/// that this property hides only the root node, not the node&#8217;s children.</para>
		/// </summary>
		[JsProperty(Name = "hideRoot", NativeField = true)]
		public bool HideRoot { get; set; }

		/// <summary>
		/// <para>Control whether clicks or double clicks should open or close the clicked
		/// folder.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "click","dblclick","none"
		/// </remarks>
		[JsProperty(Name = "openMode", NativeField = true)]
		public object OpenMode { get; set; }

		/// <summary>
		/// <para>The root tree item of the tree to display</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "root", NativeField = true)]
		public qx.ui.tree.core.AbstractTreeItem Root { get; set; }

		/// <summary>
		/// <para>Whether the Root should have an open/close button.  This may also be
		/// used in conjunction with the hideNode property to provide for virtual root
		/// nodes.  In the latter case, be very sure that the virtual root nodes are
		/// expanded programatically, since there will be no open/close button for the
		/// user to open them.</para>
		/// </summary>
		[JsProperty(Name = "rootOpenClose", NativeField = true)]
		public bool RootOpenClose { get; set; }

		/// <summary>
		/// <para>Enable drag selection (multi selection of items through
		/// dragging the mouse in pressed states).</para>
		/// <para>Only possible for the selection modes multi and additive</para>
		/// </summary>
		[JsProperty(Name = "dragSelection", NativeField = true)]
		public bool DragSelection { get; set; }

		/// <summary>
		/// <para>Enable quick selection mode, where no click is needed to change the selection.</para>
		/// <para>Only possible for the modes single and one.</para>
		/// </summary>
		[JsProperty(Name = "quickSelection", NativeField = true)]
		public bool QuickSelection { get; set; }

		/// <summary>
		/// <para>The selection mode to use.</para>
		/// <see cref="qx.ui.core.selection.Abstract.Mode"/></para>
		/// </summary>
		/// <remarks>
		/// Possible values: "single","multi","additive","one"
		/// </remarks>
		[JsProperty(Name = "selectionMode", NativeField = true)]
		public object SelectionMode { get; set; }

		/// <summary>
		/// <para>The &#8216;contentPadding&#8217; property is a shorthand property for setting &#8216;contentPaddingTop&#8217;,
		/// &#8216;contentPaddingRight&#8217;, &#8216;contentPaddingBottom&#8217; and &#8216;contentPaddingLeft&#8217;
		/// at the same time.</para>
		/// <para>If four values are specified they apply to top, right, bottom and left respectively.
		/// If there is only one value, it applies to all sides, if there are two or three,
		/// the missing values are taken from the opposite side.</para>
		/// </summary>
		[JsProperty(Name = "contentPadding", NativeField = true)]
		public object ContentPadding { get; set; }

		/// <summary>
		/// <para>Bottom padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingBottom", NativeField = true)]
		public double ContentPaddingBottom { get; set; }

		/// <summary>
		/// <para>Left padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingLeft", NativeField = true)]
		public double ContentPaddingLeft { get; set; }

		/// <summary>
		/// <para>Right padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingRight", NativeField = true)]
		public double ContentPaddingRight { get; set; }

		/// <summary>
		/// <para>Top padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingTop", NativeField = true)]
		public double ContentPaddingTop { get; set; }

		/// <summary>
		/// <para>Message which is shown in an invalid tooltip.</para>
		/// </summary>
		[JsProperty(Name = "invalidMessage", NativeField = true)]
		public string InvalidMessage { get; set; }

		/// <summary>
		/// <para>Flag signaling if a widget is required.</para>
		/// </summary>
		[JsProperty(Name = "required", NativeField = true)]
		public bool Required { get; set; }

		/// <summary>
		/// <para>Message which is shown in an invalid tooltip if the <see cref="Required"/> is
		/// set to true.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "requiredInvalidMessage", NativeField = true)]
		public string RequiredInvalidMessage { get; set; }

		/// <summary>
		/// <para>Flag signaling if a widget is valid. If a widget is invalid, an invalid
		/// state will be set.</para>
		/// </summary>
		[JsProperty(Name = "valid", NativeField = true)]
		public bool Valid { get; set; }

		#endregion Properties

		#region Methods

		public Tree() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the tree&#8217;s only &#8220;external&#8221; child, namely the root node.</para>
		/// </summary>
		/// <returns>Array containing the root node</returns>
		[JsMethod(Name = "getChildren")]
		public qx.ui.tree.core.AbstractTreeItem GetChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the widget, which contains the root tree item. This widget must
		/// have a vertical box layout.</para>
		/// </summary>
		/// <returns>the children container</returns>
		[JsMethod(Name = "getChildrenContainer")]
		public qx.ui.core.Widget GetChildrenContainer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property hideRoot.</para>
		/// </summary>
		[JsMethod(Name = "getHideRoot")]
		public bool GetHideRoot() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all children of the tree.</para>
		/// </summary>
		/// <param name="recursive">whether children of subfolder should be included</param>
		/// <param name="invisible">whether invisible children should be included</param>
		/// <returns>list of children</returns>
		[JsMethod(Name = "getItems")]
		public qx.ui.tree.core.AbstractTreeItem GetItems(bool recursive = false, bool invisible = true) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the tree item following the given item in the tree hierarchy.</para>
		/// </summary>
		/// <param name="treeItem">The tree item to get the item after</param>
		/// <param name="invisible">Whether invisible/closed tree items should be returned as well.</param>
		/// <returns>The item after the given item. May be null if the item is the last item.</returns>
		[JsMethod(Name = "getNextNodeOf")]
		public qx.ui.tree.core.AbstractTreeItem GetNextNodeOf(qx.ui.tree.core.AbstractTreeItem treeItem, bool invisible = true) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the tree item&#8217;s next sibling.</para>
		/// </summary>
		/// <param name="treeItem">The tree item to get the following sibling of.</param>
		/// <returns>The item following the given item. May be null if the given item is the last in it&#8217;s nesting level.</returns>
		[JsMethod(Name = "getNextSiblingOf")]
		public qx.ui.tree.core.AbstractTreeItem GetNextSiblingOf(qx.ui.tree.core.AbstractTreeItem treeItem) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property openMode.</para>
		/// </summary>
		[JsMethod(Name = "getOpenMode")]
		public object GetOpenMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the tree item preceding the given item in the tree hierarchy.</para>
		/// </summary>
		/// <param name="treeItem">The tree item to get the item before</param>
		/// <param name="invisible">Whether invisible/closed tree items should be returned as well.</param>
		/// <returns>The item before the given item. May be null if the given item is the tree&#8217;s root.</returns>
		[JsMethod(Name = "getPreviousNodeOf")]
		public qx.ui.tree.core.AbstractTreeItem GetPreviousNodeOf(qx.ui.tree.core.AbstractTreeItem treeItem, bool invisible = true) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the tree item&#8217;s previous sibling.</para>
		/// </summary>
		/// <param name="treeItem">The tree item to get the previous sibling of.</param>
		/// <returns>The item preceding the given item. May be null if the given item is the first in it&#8217;s nesting level.</returns>
		[JsMethod(Name = "getPreviousSiblingOf")]
		public qx.ui.tree.core.AbstractTreeItem GetPreviousSiblingOf(qx.ui.tree.core.AbstractTreeItem treeItem) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property root.</para>
		/// </summary>
		[JsMethod(Name = "getRoot")]
		public qx.ui.tree.core.AbstractTreeItem GetRoot() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property rootOpenClose.</para>
		/// </summary>
		[JsMethod(Name = "getRootOpenClose")]
		public bool GetRootOpenClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the tree item, which contains the given widget.</para>
		/// </summary>
		/// <param name="widget">The widget to get the containing tree item for.</param>
		/// <returns>The tree item containing the widget. If the widget is not inside of any tree item null is returned.</returns>
		[JsMethod(Name = "getTreeItem")]
		public qx.ui.tree.core.AbstractTreeItem GetTreeItem(qx.ui.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property hideRoot
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property hideRoot.</param>
		[JsMethod(Name = "initHideRoot")]
		public void InitHideRoot(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property openMode
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property openMode.</param>
		[JsMethod(Name = "initOpenMode")]
		public void InitOpenMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property root
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property root.</param>
		[JsMethod(Name = "initRoot")]
		public void InitRoot(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property rootOpenClose
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property rootOpenClose.</param>
		[JsMethod(Name = "initRootOpenClose")]
		public void InitRootOpenClose(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property hideRoot equals true.</para>
		/// </summary>
		[JsMethod(Name = "isHideRoot")]
		public void IsHideRoot() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property rootOpenClose equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRootOpenClose")]
		public void IsRootOpenClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property hideRoot.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetHideRoot")]
		public void ResetHideRoot() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property openMode.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOpenMode")]
		public void ResetOpenMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property root.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRoot")]
		public void ResetRoot() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property rootOpenClose.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRootOpenClose")]
		public void ResetRootOpenClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property hideRoot.</para>
		/// </summary>
		/// <param name="value">New value for property hideRoot.</param>
		[JsMethod(Name = "setHideRoot")]
		public void SetHideRoot(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property openMode.</para>
		/// </summary>
		/// <param name="value">New value for property openMode.</param>
		[JsMethod(Name = "setOpenMode")]
		public void SetOpenMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property root.</para>
		/// </summary>
		/// <param name="value">New value for property root.</param>
		[JsMethod(Name = "setRoot")]
		public void SetRoot(qx.ui.tree.core.AbstractTreeItem value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property rootOpenClose.</para>
		/// </summary>
		/// <param name="value">New value for property rootOpenClose.</param>
		[JsMethod(Name = "setRootOpenClose")]
		public void SetRootOpenClose(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property hideRoot.</para>
		/// </summary>
		[JsMethod(Name = "toggleHideRoot")]
		public void ToggleHideRoot() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property rootOpenClose.</para>
		/// </summary>
		[JsMethod(Name = "toggleRootOpenClose")]
		public void ToggleRootOpenClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds the given item to the existing selection.</para>
		/// </summary>
		/// <param name="item">Any valid item</param>
		[JsMethod(Name = "addToSelection")]
		public void AddToSelection(qx.ui.core.Widget item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property dragSelection.</para>
		/// </summary>
		[JsMethod(Name = "getDragSelection")]
		public bool GetDragSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property quickSelection.</para>
		/// </summary>
		[JsMethod(Name = "getQuickSelection")]
		public bool GetQuickSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all elements which are selectable.</para>
		/// </summary>
		/// <param name="all">true for all selectables, false for the selectables the user can interactively select</param>
		/// <returns>The contained items.</returns>
		[JsMethod(Name = "getSelectables")]
		public qx.ui.core.Widget GetSelectables(bool all) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an array of currently selected items.</para>
		/// <para>Note: The result is only a set of selected items, so the order can
		/// differ from the sequence in which the items were added.</para>
		/// </summary>
		/// <returns>List of items.</returns>
		[JsMethod(Name = "getSelection")]
		public qx.ui.core.Widget GetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the last selection context.</para>
		/// </summary>
		/// <returns>One of click, quick, drag or key or null.</returns>
		[JsMethod(Name = "getSelectionContext")]
		public string GetSelectionContext() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property selectionMode.</para>
		/// </summary>
		[JsMethod(Name = "getSelectionMode")]
		public object GetSelectionMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an array of currently selected items sorted
		/// by their index in the container.</para>
		/// </summary>
		/// <returns>Sorted list of items</returns>
		[JsMethod(Name = "getSortedSelection")]
		public qx.ui.core.Widget GetSortedSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property dragSelection
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property dragSelection.</param>
		[JsMethod(Name = "initDragSelection")]
		public void InitDragSelection(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property quickSelection
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property quickSelection.</param>
		[JsMethod(Name = "initQuickSelection")]
		public void InitQuickSelection(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property selectionMode
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property selectionMode.</param>
		[JsMethod(Name = "initSelectionMode")]
		public void InitSelectionMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Invert the selection. Select the non selected and deselect the selected.</para>
		/// </summary>
		[JsMethod(Name = "invertSelection")]
		public void InvertSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property dragSelection equals true.</para>
		/// </summary>
		[JsMethod(Name = "isDragSelection")]
		public void IsDragSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property quickSelection equals true.</para>
		/// </summary>
		[JsMethod(Name = "isQuickSelection")]
		public void IsQuickSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Detects whether the given item is currently selected.</para>
		/// </summary>
		/// <param name="item">Any valid selectable item.</param>
		/// <returns>Whether the item is selected.</returns>
		[JsMethod(Name = "isSelected")]
		public bool IsSelected(qx.ui.core.Widget item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the selection is empty</para>
		/// </summary>
		/// <returns>Whether the selection is empty</returns>
		[JsMethod(Name = "isSelectionEmpty")]
		public bool IsSelectionEmpty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the given item from the selection.</para>
		/// <para>Use <see cref="qx.ui.core.ISingleSelection.ResetSelection"/> when you
		/// want to clear the whole selection at once.</para>
		/// </summary>
		/// <param name="item">Any valid item</param>
		[JsMethod(Name = "removeFromSelection")]
		public void RemoveFromSelection(qx.ui.core.Widget item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property dragSelection.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDragSelection")]
		public void ResetDragSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property quickSelection.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetQuickSelection")]
		public void ResetQuickSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears the whole selection at once. Also
		/// resets the lead and anchor items and their
		/// styles.</para>
		/// </summary>
		[JsMethod(Name = "resetSelection")]
		public void ResetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property selectionMode.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSelectionMode")]
		public void ResetSelectionMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects all items of the managed object.</para>
		/// </summary>
		[JsMethod(Name = "selectAll")]
		public void SelectAll() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects an item range between two given items.</para>
		/// </summary>
		/// <param name="begin">Item to start with</param>
		/// <param name="end">Item to end at</param>
		[JsMethod(Name = "selectRange")]
		public void SelectRange(qx.ui.core.Widget begin, qx.ui.core.Widget end) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property dragSelection.</para>
		/// </summary>
		/// <param name="value">New value for property dragSelection.</param>
		[JsMethod(Name = "setDragSelection")]
		public void SetDragSelection(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property quickSelection.</para>
		/// </summary>
		/// <param name="value">New value for property quickSelection.</param>
		[JsMethod(Name = "setQuickSelection")]
		public void SetQuickSelection(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Replaces current selection with the given items.</para>
		/// </summary>
		/// <param name="items">Items to select.</param>
		[JsMethod(Name = "setSelection")]
		public void SetSelection(qx.ui.core.Widget items) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property selectionMode.</para>
		/// </summary>
		/// <param name="value">New value for property selectionMode.</param>
		[JsMethod(Name = "setSelectionMode")]
		public void SetSelectionMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property dragSelection.</para>
		/// </summary>
		[JsMethod(Name = "toggleDragSelection")]
		public void ToggleDragSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property quickSelection.</para>
		/// </summary>
		[JsMethod(Name = "toggleQuickSelection")]
		public void ToggleQuickSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingBottom.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingBottom")]
		public double GetContentPaddingBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingLeft.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingLeft")]
		public double GetContentPaddingLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingRight.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingRight")]
		public double GetContentPaddingRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingTop.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingTop")]
		public double GetContentPaddingTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingBottom.</param>
		[JsMethod(Name = "initContentPaddingBottom")]
		public void InitContentPaddingBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingLeft.</param>
		[JsMethod(Name = "initContentPaddingLeft")]
		public void InitContentPaddingLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingRight.</param>
		[JsMethod(Name = "initContentPaddingRight")]
		public void InitContentPaddingRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingTop.</param>
		[JsMethod(Name = "initContentPaddingTop")]
		public void InitContentPaddingTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPadding.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPadding")]
		public void ResetContentPadding() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingBottom")]
		public void ResetContentPaddingBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingLeft")]
		public void ResetContentPaddingLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingRight")]
		public void ResetContentPaddingRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingTop")]
		public void ResetContentPaddingTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group contentPadding.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="contentPaddingTop">Sets the value of the property #contentPaddingTop.</param>
		/// <param name="contentPaddingRight">Sets the value of the property #contentPaddingRight.</param>
		/// <param name="contentPaddingBottom">Sets the value of the property #contentPaddingBottom.</param>
		/// <param name="contentPaddingLeft">Sets the value of the property #contentPaddingLeft.</param>
		[JsMethod(Name = "setContentPadding")]
		public void SetContentPadding(object contentPaddingTop, object contentPaddingRight, object contentPaddingBottom, object contentPaddingLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingBottom.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingBottom.</param>
		[JsMethod(Name = "setContentPaddingBottom")]
		public void SetContentPaddingBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingLeft.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingLeft.</param>
		[JsMethod(Name = "setContentPaddingLeft")]
		public void SetContentPaddingLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingRight.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingRight.</param>
		[JsMethod(Name = "setContentPaddingRight")]
		public void SetContentPaddingRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingTop.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingTop.</param>
		[JsMethod(Name = "setContentPaddingTop")]
		public void SetContentPaddingTop(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an array of the selected models.</para>
		/// </summary>
		/// <returns>An array containing the models of the currently selected items.</returns>
		[JsMethod(Name = "getModelSelection")]
		public JsArray GetModelSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Tries to set the selection using the given array containing the
		/// representative models for the selectables.</para>
		/// </summary>
		/// <param name="value">An array of models.</param>
		[JsMethod(Name = "setModelSelection")]
		public void SetModelSelection(JsArray value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the invalid message of the widget.</para>
		/// </summary>
		/// <returns>The current set message.</returns>
		[JsMethod(Name = "getInvalidMessage")]
		public string GetInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the current required state of the widget.</para>
		/// </summary>
		/// <returns>True, if the widget is required.</returns>
		[JsMethod(Name = "getRequired")]
		public bool GetRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the invalid message if required of the widget.</para>
		/// </summary>
		/// <returns>The current set message.</returns>
		[JsMethod(Name = "getRequiredInvalidMessage")]
		public string GetRequiredInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the valid state of the widget.</para>
		/// </summary>
		/// <returns>If the state of the widget is valid.</returns>
		[JsMethod(Name = "getValid")]
		public bool GetValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property invalidMessage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property invalidMessage.</param>
		[JsMethod(Name = "initInvalidMessage")]
		public void InitInvalidMessage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property required
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property required.</param>
		[JsMethod(Name = "initRequired")]
		public void InitRequired(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property requiredInvalidMessage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property requiredInvalidMessage.</param>
		[JsMethod(Name = "initRequiredInvalidMessage")]
		public void InitRequiredInvalidMessage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property valid
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property valid.</param>
		[JsMethod(Name = "initValid")]
		public void InitValid(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property required equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRequired")]
		public void IsRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property valid equals true.</para>
		/// </summary>
		[JsMethod(Name = "isValid")]
		public void IsValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property invalidMessage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInvalidMessage")]
		public void ResetInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property required.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRequired")]
		public void ResetRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property requiredInvalidMessage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRequiredInvalidMessage")]
		public void ResetRequiredInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property valid.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetValid")]
		public void ResetValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the invalid message of the widget.</para>
		/// </summary>
		/// <param name="message">The invalid message.</param>
		[JsMethod(Name = "setInvalidMessage")]
		public void SetInvalidMessage(string message) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the required state of a widget.</para>
		/// </summary>
		/// <param name="required">A flag signaling if the widget is required.</param>
		[JsMethod(Name = "setRequired")]
		public void SetRequired(bool required) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the invalid message if required of the widget.</para>
		/// </summary>
		/// <param name="message">The invalid message.</param>
		[JsMethod(Name = "setRequiredInvalidMessage")]
		public void SetRequiredInvalidMessage(string message) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the valid state of the widget.</para>
		/// </summary>
		/// <param name="valid">The valid state of the widget.</param>
		[JsMethod(Name = "setValid")]
		public void SetValid(bool valid) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property required.</para>
		/// </summary>
		[JsMethod(Name = "toggleRequired")]
		public void ToggleRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property valid.</para>
		/// </summary>
		[JsMethod(Name = "toggleValid")]
		public void ToggleValid() { throw new NotImplementedException(); }

		#endregion Methods
    }
}