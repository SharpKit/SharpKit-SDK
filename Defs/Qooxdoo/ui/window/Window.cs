// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;

namespace qx.ui.window
{
    /// <summary>
	/// <para>A window widget</para>
	/// <para>More information can be found in the package description <see cref="qx.ui.window"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.window.Window", OmitOptionalParameters = true, Export = false)]
    public partial class Window : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// <para>Fired before the window is closed.</para>
		/// <para>The close action can be prevented by calling
		/// <see cref="qx.event.type.Event.PreventDefault"/> on the event object</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnBeforeClose;

		/// <summary>
		/// <para>Fired before the window is maximize.</para>
		/// <para>The maximize action can be prevented by calling
		/// <see cref="qx.event.type.Event.PreventDefault"/> on the event object</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnBeforeMaximize;

		/// <summary>
		/// <para>Fired before the window is minimize.</para>
		/// <para>The minimize action can be prevented by calling
		/// <see cref="qx.event.type.Event.PreventDefault"/> on the event object</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnBeforeMinimize;

		/// <summary>
		/// <para>Fired before the window is restored from a minimized or maximized state.</para>
		/// <para>The restored action can be prevented by calling
		/// <see cref="qx.event.type.Event.PreventDefault"/> on the event object</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnBeforeRestore;

		/// <summary>
		/// Fired on change of the property <see cref="Active"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeActive;

		/// <summary>
		/// Fired on change of the property <see cref="AlwaysOnTop"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeAlwaysOnTop;

		/// <summary>
		/// Fired on change of the property <see cref="Caption"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeCaption;

		/// <summary>
		/// Fired on change of the property <see cref="Icon"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeIcon;

		/// <summary>
		/// Fired on change of the property <see cref="Modal"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModal;

		/// <summary>
		/// Fired on change of the property <see cref="Status"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeStatus;

		/// <summary>
		/// <para>Fired if the window is closed</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnClose;

		/// <summary>
		/// <para>Fired if the window is maximized</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnMaximize;

		/// <summary>
		/// <para>Fired if the window is minimized</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnMinimize;

		/// <summary>
		/// <para>Fired if the window is restored from a minimized or maximized state</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnRestore;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>If the window is active, only one window in a single qx.ui.window.Manager could
		/// have set this to true at the same time.</para>
		/// </summary>
		[JsProperty(Name = "active", NativeField = true)]
		public bool Active { get; set; }

		/// <summary>
		/// <para>Should the user have the ability to close the window</para>
		/// </summary>
		[JsProperty(Name = "allowClose", NativeField = true)]
		public bool AllowClose { get; set; }

		/// <summary>
		/// <para>Should the user have the ability to maximize the window</para>
		/// </summary>
		[JsProperty(Name = "allowMaximize", NativeField = true)]
		public bool AllowMaximize { get; set; }

		/// <summary>
		/// <para>Should the user have the ability to minimize the window</para>
		/// </summary>
		[JsProperty(Name = "allowMinimize", NativeField = true)]
		public bool AllowMinimize { get; set; }

		/// <summary>
		/// <para>Should the window be always on top</para>
		/// </summary>
		[JsProperty(Name = "alwaysOnTop", NativeField = true)]
		public bool AlwaysOnTop { get; set; }

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>The text of the caption</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "caption", NativeField = true)]
		public object Caption { get; set; }

		/// <summary>
		/// <para>Whether the widget is focusable e.g. rendering a focus border and visualize
		/// as active element.</para>
		/// <para>See also <see cref="IsTabable"/> which allows runtime checks for
		/// isChecked or other stuff to test whether the widget is
		/// reachable via the TAB key.</para>
		/// </summary>
		[JsProperty(Name = "focusable", NativeField = true)]
		public bool Focusable { get; set; }

		/// <summary>
		/// <para>The icon of the caption</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "icon", NativeField = true)]
		public string Icon { get; set; }

		/// <summary>
		/// <para>Should the window be modal (this disables minimize and maximize buttons)</para>
		/// </summary>
		[JsProperty(Name = "modal", NativeField = true)]
		public bool Modal { get; set; }

		/// <summary>
		/// <para>Should the close button be shown</para>
		/// </summary>
		[JsProperty(Name = "showClose", NativeField = true)]
		public bool ShowClose { get; set; }

		/// <summary>
		/// <para>Should the maximize button be shown</para>
		/// </summary>
		[JsProperty(Name = "showMaximize", NativeField = true)]
		public bool ShowMaximize { get; set; }

		/// <summary>
		/// <para>Should the minimize button be shown</para>
		/// </summary>
		[JsProperty(Name = "showMinimize", NativeField = true)]
		public bool ShowMinimize { get; set; }

		/// <summary>
		/// <para>Should the statusbar be shown</para>
		/// </summary>
		[JsProperty(Name = "showStatusbar", NativeField = true)]
		public bool ShowStatusbar { get; set; }

		/// <summary>
		/// <para>The text of the statusbar</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "status", NativeField = true)]
		public string Status { get; set; }

		/// <summary>
		/// <para>Controls the visibility. Valid values are:</para>
		/// <list type="bullet">
		/// <item>visible: Render the widget</item>
		/// <item>hidden: Hide the widget but don't relayout the widget's parent.</item>
		/// <item>excluded: Hide the widget and relayout the parent as if the
		/// widget was not a child of its parent.</item>
		/// </list>
		/// </summary>
		/// <remarks>
		/// Possible values: "visible","hidden","excluded"
		/// </remarks>
		[JsProperty(Name = "visibility", NativeField = true)]
		public object Visibility { get; set; }

		/// <summary>
		/// <para>Property group to configure the resize behaviour for all edges at once</para>
		/// </summary>
		[JsProperty(Name = "resizable", NativeField = true)]
		public object Resizable { get; set; }

		/// <summary>
		/// <para>Whether the bottom edge is resizable</para>
		/// </summary>
		[JsProperty(Name = "resizableBottom", NativeField = true)]
		public bool ResizableBottom { get; set; }

		/// <summary>
		/// <para>Whether the left edge is resizable</para>
		/// </summary>
		[JsProperty(Name = "resizableLeft", NativeField = true)]
		public bool ResizableLeft { get; set; }

		/// <summary>
		/// <para>Whether the right edge is resizable</para>
		/// </summary>
		[JsProperty(Name = "resizableRight", NativeField = true)]
		public bool ResizableRight { get; set; }

		/// <summary>
		/// <para>Whether the top edge is resizable</para>
		/// </summary>
		[JsProperty(Name = "resizableTop", NativeField = true)]
		public bool ResizableTop { get; set; }

		/// <summary>
		/// <para>The tolerance to activate resizing</para>
		/// </summary>
		[JsProperty(Name = "resizeSensitivity", NativeField = true)]
		public double ResizeSensitivity { get; set; }

		/// <summary>
		/// <para>Whether a frame replacement should be used during the resize sequence</para>
		/// </summary>
		[JsProperty(Name = "useResizeFrame", NativeField = true)]
		public bool UseResizeFrame { get; set; }

		/// <summary>
		/// <para>Whether the widget is movable</para>
		/// </summary>
		[JsProperty(Name = "movable", NativeField = true)]
		public bool Movable { get; set; }

		/// <summary>
		/// <para>Whether to use a frame instead of the original widget during move sequences</para>
		/// </summary>
		[JsProperty(Name = "useMoveFrame", NativeField = true)]
		public bool UseMoveFrame { get; set; }

		/// <summary>
		/// <para>The &#8216;contentPadding&#8217; property is a shorthand property for setting &#8216;contentPaddingTop&#8217;,
		/// &#8216;contentPaddingRight&#8217;, &#8216;contentPaddingBottom&#8217; and &#8216;contentPaddingLeft&#8217;
		/// at the same time.</para>
		/// <para>If four values are specified they apply to top, right, bottom and left respectively.
		/// If there is only one value, it applies to all sides, if there are two or three,
		/// the missing values are taken from the opposite side.</para>
		/// </summary>
		[JsProperty(Name = "contentPadding", NativeField = true)]
		public object ContentPadding { get; set; }

		/// <summary>
		/// <para>Bottom padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingBottom", NativeField = true)]
		public double ContentPaddingBottom { get; set; }

		/// <summary>
		/// <para>Left padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingLeft", NativeField = true)]
		public double ContentPaddingLeft { get; set; }

		/// <summary>
		/// <para>Right padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingRight", NativeField = true)]
		public double ContentPaddingRight { get; set; }

		/// <summary>
		/// <para>Top padding of the content pane</para>
		/// </summary>
		[JsProperty(Name = "contentPaddingTop", NativeField = true)]
		public double ContentPaddingTop { get; set; }

		#endregion Properties

		#region Methods

		public Window() { throw new NotImplementedException(); }

		/// <param name="caption">The caption text</param>
		/// <param name="icon">The URL of the caption bar icon</param>
		public Window(string caption, string icon) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Centers the window to the parent.</para>
		/// <para>This call works with the size of the parent widget and the size of
		/// the window as calculated in the last layout flush. It is best to call
		/// this method just after rendering the window in the &#8220;resize&#8221; event:</para>
		/// <code>
		/// win.addListenerOnce("resize", this.center, this);
		/// </code>
		/// </summary>
		[JsMethod(Name = "center")]
		public void Center() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Closes the current window instance.
		/// Technically calls the <see cref="qx.ui.core.Widget.Hide"/> method.</para>
		/// </summary>
		[JsMethod(Name = "close")]
		public void Close() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property active.</para>
		/// </summary>
		[JsMethod(Name = "getActive")]
		public bool GetActive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowClose.</para>
		/// </summary>
		[JsMethod(Name = "getAllowClose")]
		public bool GetAllowClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowMaximize.</para>
		/// </summary>
		[JsMethod(Name = "getAllowMaximize")]
		public bool GetAllowMaximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property allowMinimize.</para>
		/// </summary>
		[JsMethod(Name = "getAllowMinimize")]
		public bool GetAllowMinimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alwaysOnTop.</para>
		/// </summary>
		[JsMethod(Name = "getAlwaysOnTop")]
		public bool GetAlwaysOnTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property caption.</para>
		/// </summary>
		[JsMethod(Name = "getCaption")]
		public object GetCaption() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The children container needed by the <see cref="qx.ui.core.MRemoteChildrenHandling"/>
		/// mixin</para>
		/// </summary>
		/// <returns>pane sub widget</returns>
		[JsMethod(Name = "getChildrenContainer")]
		public qx.ui.container.Composite GetChildrenContainer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property icon.</para>
		/// </summary>
		[JsMethod(Name = "getIcon")]
		public string GetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property modal.</para>
		/// </summary>
		[JsMethod(Name = "getModal")]
		public bool GetModal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the window mode as String:
		/// &#8220;maximized&#8221;, &#8220;normal&#8221; or &#8220;minimized&#8221;.</para>
		/// </summary>
		/// <returns>The window mode as String value.</returns>
		[JsMethod(Name = "getMode")]
		public string GetMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showClose.</para>
		/// </summary>
		[JsMethod(Name = "getShowClose")]
		public bool GetShowClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showMaximize.</para>
		/// </summary>
		[JsMethod(Name = "getShowMaximize")]
		public bool GetShowMaximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showMinimize.</para>
		/// </summary>
		[JsMethod(Name = "getShowMinimize")]
		public bool GetShowMinimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showStatusbar.</para>
		/// </summary>
		[JsMethod(Name = "getShowStatusbar")]
		public bool GetShowStatusbar() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property status.</para>
		/// </summary>
		[JsMethod(Name = "getStatus")]
		public string GetStatus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property active
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property active.</param>
		[JsMethod(Name = "initActive")]
		public void InitActive(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowClose
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowClose.</param>
		[JsMethod(Name = "initAllowClose")]
		public void InitAllowClose(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowMaximize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowMaximize.</param>
		[JsMethod(Name = "initAllowMaximize")]
		public void InitAllowMaximize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property allowMinimize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property allowMinimize.</param>
		[JsMethod(Name = "initAllowMinimize")]
		public void InitAllowMinimize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alwaysOnTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alwaysOnTop.</param>
		[JsMethod(Name = "initAlwaysOnTop")]
		public void InitAlwaysOnTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property caption
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property caption.</param>
		[JsMethod(Name = "initCaption")]
		public void InitCaption(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property icon
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property icon.</param>
		[JsMethod(Name = "initIcon")]
		public void InitIcon(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property modal
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property modal.</param>
		[JsMethod(Name = "initModal")]
		public void InitModal(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showClose
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showClose.</param>
		[JsMethod(Name = "initShowClose")]
		public void InitShowClose(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showMaximize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showMaximize.</param>
		[JsMethod(Name = "initShowMaximize")]
		public void InitShowMaximize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showMinimize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showMinimize.</param>
		[JsMethod(Name = "initShowMinimize")]
		public void InitShowMinimize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showStatusbar
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showStatusbar.</param>
		[JsMethod(Name = "initShowStatusbar")]
		public void InitShowStatusbar(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property status
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property status.</param>
		[JsMethod(Name = "initStatus")]
		public void InitStatus(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property active equals true.</para>
		/// </summary>
		[JsMethod(Name = "isActive")]
		public void IsActive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property allowClose equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAllowClose")]
		public void IsAllowClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property allowMaximize equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAllowMaximize")]
		public void IsAllowMaximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property allowMinimize equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAllowMinimize")]
		public void IsAllowMinimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property alwaysOnTop equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAlwaysOnTop")]
		public void IsAlwaysOnTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return true if the window is in maximized state,
		/// but note that the window in maximized state could also be invisible, this
		/// is equivalent to minimized. So use the <see cref="qx.ui.window.Window.GetMode"/>
		/// to get the window mode.</para>
		/// </summary>
		/// <returns>true if the window is maximized, false otherwise.</returns>
		[JsMethod(Name = "isMaximized")]
		public bool IsMaximized() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property modal equals true.</para>
		/// </summary>
		[JsMethod(Name = "isModal")]
		public void IsModal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showClose equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowClose")]
		public void IsShowClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showMaximize equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowMaximize")]
		public void IsShowMaximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showMinimize equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowMinimize")]
		public void IsShowMinimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showStatusbar equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowStatusbar")]
		public void IsShowStatusbar() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Maximize the window.</para>
		/// </summary>
		[JsMethod(Name = "maximize")]
		public void Maximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Minimized the window.</para>
		/// </summary>
		[JsMethod(Name = "minimize")]
		public void Minimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the window&#8217;s position relative to its parent</para>
		/// </summary>
		/// <param name="left">The left position</param>
		/// <param name="top">The top position</param>
		[JsMethod(Name = "moveTo")]
		public void MoveTo(double left, double top) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Opens the window.</para>
		/// </summary>
		[JsMethod(Name = "open")]
		public void Open() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property active.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetActive")]
		public void ResetActive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowClose.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowClose")]
		public void ResetAllowClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowMaximize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowMaximize")]
		public void ResetAllowMaximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property allowMinimize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAllowMinimize")]
		public void ResetAllowMinimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alwaysOnTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlwaysOnTop")]
		public void ResetAlwaysOnTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property caption.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetCaption")]
		public void ResetCaption() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property icon.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIcon")]
		public void ResetIcon() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property modal.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetModal")]
		public void ResetModal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showClose.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowClose")]
		public void ResetShowClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showMaximize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowMaximize")]
		public void ResetShowMaximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showMinimize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowMinimize")]
		public void ResetShowMinimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showStatusbar.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowStatusbar")]
		public void ResetShowStatusbar() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property status.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStatus")]
		public void ResetStatus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Restore the window to &#8220;normal&#8221;, if it is
		/// &#8220;maximized&#8221; or &#8220;minimized&#8221;.</para>
		/// </summary>
		[JsMethod(Name = "restore")]
		public void Restore() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property active.</para>
		/// </summary>
		/// <param name="value">New value for property active.</param>
		[JsMethod(Name = "setActive")]
		public void SetActive(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowClose.</para>
		/// </summary>
		/// <param name="value">New value for property allowClose.</param>
		[JsMethod(Name = "setAllowClose")]
		public void SetAllowClose(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowMaximize.</para>
		/// </summary>
		/// <param name="value">New value for property allowMaximize.</param>
		[JsMethod(Name = "setAllowMaximize")]
		public void SetAllowMaximize(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property allowMinimize.</para>
		/// </summary>
		/// <param name="value">New value for property allowMinimize.</param>
		[JsMethod(Name = "setAllowMinimize")]
		public void SetAllowMinimize(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alwaysOnTop.</para>
		/// </summary>
		/// <param name="value">New value for property alwaysOnTop.</param>
		[JsMethod(Name = "setAlwaysOnTop")]
		public void SetAlwaysOnTop(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property caption.</para>
		/// </summary>
		/// <param name="value">New value for property caption.</param>
		[JsMethod(Name = "setCaption")]
		public void SetCaption(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property icon.</para>
		/// </summary>
		/// <param name="value">New value for property icon.</param>
		[JsMethod(Name = "setIcon")]
		public void SetIcon(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the parent</para>
		/// </summary>
		/// <param name="parent">The new parent.</param>
		[JsMethod(Name = "setLayoutParent")]
		public void SetLayoutParent(qx.ui.core.Widget parent) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property modal.</para>
		/// </summary>
		/// <param name="value">New value for property modal.</param>
		[JsMethod(Name = "setModal")]
		public void SetModal(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showClose.</para>
		/// </summary>
		/// <param name="value">New value for property showClose.</param>
		[JsMethod(Name = "setShowClose")]
		public void SetShowClose(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showMaximize.</para>
		/// </summary>
		/// <param name="value">New value for property showMaximize.</param>
		[JsMethod(Name = "setShowMaximize")]
		public void SetShowMaximize(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showMinimize.</para>
		/// </summary>
		/// <param name="value">New value for property showMinimize.</param>
		[JsMethod(Name = "setShowMinimize")]
		public void SetShowMinimize(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showStatusbar.</para>
		/// </summary>
		/// <param name="value">New value for property showStatusbar.</param>
		[JsMethod(Name = "setShowStatusbar")]
		public void SetShowStatusbar(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property status.</para>
		/// </summary>
		/// <param name="value">New value for property status.</param>
		[JsMethod(Name = "setStatus")]
		public void SetStatus(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property active.</para>
		/// </summary>
		[JsMethod(Name = "toggleActive")]
		public void ToggleActive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property allowClose.</para>
		/// </summary>
		[JsMethod(Name = "toggleAllowClose")]
		public void ToggleAllowClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property allowMaximize.</para>
		/// </summary>
		[JsMethod(Name = "toggleAllowMaximize")]
		public void ToggleAllowMaximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property allowMinimize.</para>
		/// </summary>
		[JsMethod(Name = "toggleAllowMinimize")]
		public void ToggleAllowMinimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property alwaysOnTop.</para>
		/// </summary>
		[JsMethod(Name = "toggleAlwaysOnTop")]
		public void ToggleAlwaysOnTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property modal.</para>
		/// </summary>
		[JsMethod(Name = "toggleModal")]
		public void ToggleModal() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showClose.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowClose")]
		public void ToggleShowClose() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showMaximize.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowMaximize")]
		public void ToggleShowMaximize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showMinimize.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowMinimize")]
		public void ToggleShowMinimize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showStatusbar.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowStatusbar")]
		public void ToggleShowStatusbar() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a new child widget.</para>
		/// <para>The supported keys of the layout options map depend on the layout manager
		/// used to position the widget. The options are documented in the class
		/// documentation of each layout manager <see cref="qx.ui.layout"/>.</para>
		/// </summary>
		/// <param name="child">the item to add.</param>
		/// <param name="options">Optional layout data for item.</param>
		/// <returns>This object (for chaining support)</returns>
		[JsMethod(Name = "add")]
		public Widget Add(LayoutItem child, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add an item after another already inserted item</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">item to add</param>
		/// <param name="after">item, after which the new item will be inserted</param>
		/// <param name="options">Optional layout data for item.</param>
		[JsMethod(Name = "addAfter")]
		public void AddAfter(LayoutItem child, LayoutItem after, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a child at the specified index</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">item to add</param>
		/// <param name="index">Index, at which the item will be inserted</param>
		/// <param name="options">Optional layout data for item.</param>
		[JsMethod(Name = "addAt")]
		public void AddAt(LayoutItem child, double index, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add an item before another already inserted item</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">item to add</param>
		/// <param name="before">item before the new item will be inserted.</param>
		/// <param name="options">Optional layout data for item.</param>
		[JsMethod(Name = "addBefore")]
		public void AddBefore(LayoutItem child, LayoutItem before, object options = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the children list</para>
		/// </summary>
		/// <returns>The children array (Arrays are reference types, please to not modify them in-place)</returns>
		[JsMethod(Name = "getChildren")]
		public LayoutItem GetChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the widget contains children.</para>
		/// </summary>
		/// <returns>Returns true when the widget has children.</returns>
		[JsMethod(Name = "hasChildren")]
		public bool HasChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the index position of the given item if it is
		/// a child item. Otherwise it returns -1.</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="child">the item to query for</param>
		/// <returns>The index position or -1 when the given item is no child of this layout.</returns>
		[JsMethod(Name = "indexOf")]
		public double IndexOf(LayoutItem child) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove the given child item.</para>
		/// </summary>
		/// <param name="child">the item to remove</param>
		/// <returns>This object (for chaining support)</returns>
		[JsMethod(Name = "remove")]
		public Widget Remove(LayoutItem child) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove all children.</para>
		/// </summary>
		/// <returns>An array containing the removed children.</returns>
		[JsMethod(Name = "removeAll")]
		public JsArray RemoveAll() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove the item at the specified index.</para>
		/// <para>This method works on the widget&#8217;s children list. Some layout managers
		/// (e.g. <see cref="qx.ui.layout.HBox"/>) use the children order as additional
		/// layout information. Other layout manager (e.g. <see cref="qx.ui.layout.Grid"/>)
		/// ignore the children order for the layout process.</para>
		/// </summary>
		/// <param name="index">Index of the item to remove.</param>
		/// <returns>The removed item</returns>
		[JsMethod(Name = "removeAt")]
		public qx.ui.core.LayoutItem RemoveAt(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the widget&#8217;s layout manager.</para>
		/// </summary>
		/// <returns>The widget&#8217;s layout manager</returns>
		[JsMethod(Name = "getLayout")]
		public qx.ui.layout.Abstract GetLayout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set a layout manager for the widget. A a layout manager can only be connected
		/// with one widget. Reset the connection with a previous widget first, if you
		/// like to use it in another widget instead.</para>
		/// </summary>
		/// <param name="layout">The new layout or null to reset the layout.</param>
		[JsMethod(Name = "setLayout")]
		public void SetLayout(qx.ui.layout.Abstract layout) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizableBottom.</para>
		/// </summary>
		[JsMethod(Name = "getResizableBottom")]
		public bool GetResizableBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizableLeft.</para>
		/// </summary>
		[JsMethod(Name = "getResizableLeft")]
		public bool GetResizableLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizableRight.</para>
		/// </summary>
		[JsMethod(Name = "getResizableRight")]
		public bool GetResizableRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizableTop.</para>
		/// </summary>
		[JsMethod(Name = "getResizableTop")]
		public bool GetResizableTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resizeSensitivity.</para>
		/// </summary>
		[JsMethod(Name = "getResizeSensitivity")]
		public double GetResizeSensitivity() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property useResizeFrame.</para>
		/// </summary>
		[JsMethod(Name = "getUseResizeFrame")]
		public bool GetUseResizeFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizableBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizableBottom.</param>
		[JsMethod(Name = "initResizableBottom")]
		public void InitResizableBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizableLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizableLeft.</param>
		[JsMethod(Name = "initResizableLeft")]
		public void InitResizableLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizableRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizableRight.</param>
		[JsMethod(Name = "initResizableRight")]
		public void InitResizableRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizableTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizableTop.</param>
		[JsMethod(Name = "initResizableTop")]
		public void InitResizableTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resizeSensitivity
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resizeSensitivity.</param>
		[JsMethod(Name = "initResizeSensitivity")]
		public void InitResizeSensitivity(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property useResizeFrame
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property useResizeFrame.</param>
		[JsMethod(Name = "initUseResizeFrame")]
		public void InitUseResizeFrame(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resizableBottom equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResizableBottom")]
		public void IsResizableBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resizableLeft equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResizableLeft")]
		public void IsResizableLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resizableRight equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResizableRight")]
		public void IsResizableRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resizableTop equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResizableTop")]
		public void IsResizableTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property useResizeFrame equals true.</para>
		/// </summary>
		[JsMethod(Name = "isUseResizeFrame")]
		public void IsUseResizeFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizable.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizable")]
		public void ResetResizable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizableBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizableBottom")]
		public void ResetResizableBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizableLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizableLeft")]
		public void ResetResizableLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizableRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizableRight")]
		public void ResetResizableRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizableTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizableTop")]
		public void ResetResizableTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resizeSensitivity.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResizeSensitivity")]
		public void ResetResizeSensitivity() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property useResizeFrame.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUseResizeFrame")]
		public void ResetUseResizeFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group resizable.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="resizableTop">Sets the value of the property #resizableTop.</param>
		/// <param name="resizableRight">Sets the value of the property #resizableRight.</param>
		/// <param name="resizableBottom">Sets the value of the property #resizableBottom.</param>
		/// <param name="resizableLeft">Sets the value of the property #resizableLeft.</param>
		[JsMethod(Name = "setResizable")]
		public void SetResizable(object resizableTop, object resizableRight, object resizableBottom, object resizableLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizableBottom.</para>
		/// </summary>
		/// <param name="value">New value for property resizableBottom.</param>
		[JsMethod(Name = "setResizableBottom")]
		public void SetResizableBottom(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizableLeft.</para>
		/// </summary>
		/// <param name="value">New value for property resizableLeft.</param>
		[JsMethod(Name = "setResizableLeft")]
		public void SetResizableLeft(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizableRight.</para>
		/// </summary>
		/// <param name="value">New value for property resizableRight.</param>
		[JsMethod(Name = "setResizableRight")]
		public void SetResizableRight(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizableTop.</para>
		/// </summary>
		/// <param name="value">New value for property resizableTop.</param>
		[JsMethod(Name = "setResizableTop")]
		public void SetResizableTop(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resizeSensitivity.</para>
		/// </summary>
		/// <param name="value">New value for property resizeSensitivity.</param>
		[JsMethod(Name = "setResizeSensitivity")]
		public void SetResizeSensitivity(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property useResizeFrame.</para>
		/// </summary>
		/// <param name="value">New value for property useResizeFrame.</param>
		[JsMethod(Name = "setUseResizeFrame")]
		public void SetUseResizeFrame(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resizableBottom.</para>
		/// </summary>
		[JsMethod(Name = "toggleResizableBottom")]
		public void ToggleResizableBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resizableLeft.</para>
		/// </summary>
		[JsMethod(Name = "toggleResizableLeft")]
		public void ToggleResizableLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resizableRight.</para>
		/// </summary>
		[JsMethod(Name = "toggleResizableRight")]
		public void ToggleResizableRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resizableTop.</para>
		/// </summary>
		[JsMethod(Name = "toggleResizableTop")]
		public void ToggleResizableTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property useResizeFrame.</para>
		/// </summary>
		[JsMethod(Name = "toggleUseResizeFrame")]
		public void ToggleUseResizeFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property movable.</para>
		/// </summary>
		[JsMethod(Name = "getMovable")]
		public bool GetMovable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property useMoveFrame.</para>
		/// </summary>
		[JsMethod(Name = "getUseMoveFrame")]
		public bool GetUseMoveFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property movable
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property movable.</param>
		[JsMethod(Name = "initMovable")]
		public void InitMovable(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property useMoveFrame
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property useMoveFrame.</param>
		[JsMethod(Name = "initUseMoveFrame")]
		public void InitUseMoveFrame(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property movable equals true.</para>
		/// </summary>
		[JsMethod(Name = "isMovable")]
		public void IsMovable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property useMoveFrame equals true.</para>
		/// </summary>
		[JsMethod(Name = "isUseMoveFrame")]
		public void IsUseMoveFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property movable.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMovable")]
		public void ResetMovable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property useMoveFrame.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUseMoveFrame")]
		public void ResetUseMoveFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property movable.</para>
		/// </summary>
		/// <param name="value">New value for property movable.</param>
		[JsMethod(Name = "setMovable")]
		public void SetMovable(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property useMoveFrame.</para>
		/// </summary>
		/// <param name="value">New value for property useMoveFrame.</param>
		[JsMethod(Name = "setUseMoveFrame")]
		public void SetUseMoveFrame(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property movable.</para>
		/// </summary>
		[JsMethod(Name = "toggleMovable")]
		public void ToggleMovable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property useMoveFrame.</para>
		/// </summary>
		[JsMethod(Name = "toggleUseMoveFrame")]
		public void ToggleUseMoveFrame() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingBottom.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingBottom")]
		public double GetContentPaddingBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingLeft.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingLeft")]
		public double GetContentPaddingLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingRight.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingRight")]
		public double GetContentPaddingRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contentPaddingTop.</para>
		/// </summary>
		[JsMethod(Name = "getContentPaddingTop")]
		public double GetContentPaddingTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingBottom.</param>
		[JsMethod(Name = "initContentPaddingBottom")]
		public void InitContentPaddingBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingLeft.</param>
		[JsMethod(Name = "initContentPaddingLeft")]
		public void InitContentPaddingLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingRight.</param>
		[JsMethod(Name = "initContentPaddingRight")]
		public void InitContentPaddingRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contentPaddingTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contentPaddingTop.</param>
		[JsMethod(Name = "initContentPaddingTop")]
		public void InitContentPaddingTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPadding.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPadding")]
		public void ResetContentPadding() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingBottom")]
		public void ResetContentPaddingBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingLeft")]
		public void ResetContentPaddingLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingRight")]
		public void ResetContentPaddingRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contentPaddingTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContentPaddingTop")]
		public void ResetContentPaddingTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group contentPadding.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="contentPaddingTop">Sets the value of the property #contentPaddingTop.</param>
		/// <param name="contentPaddingRight">Sets the value of the property #contentPaddingRight.</param>
		/// <param name="contentPaddingBottom">Sets the value of the property #contentPaddingBottom.</param>
		/// <param name="contentPaddingLeft">Sets the value of the property #contentPaddingLeft.</param>
		[JsMethod(Name = "setContentPadding")]
		public void SetContentPadding(object contentPaddingTop, object contentPaddingRight, object contentPaddingBottom, object contentPaddingLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingBottom.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingBottom.</param>
		[JsMethod(Name = "setContentPaddingBottom")]
		public void SetContentPaddingBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingLeft.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingLeft.</param>
		[JsMethod(Name = "setContentPaddingLeft")]
		public void SetContentPaddingLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingRight.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingRight.</param>
		[JsMethod(Name = "setContentPaddingRight")]
		public void SetContentPaddingRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contentPaddingTop.</para>
		/// </summary>
		/// <param name="value">New value for property contentPaddingTop.</param>
		[JsMethod(Name = "setContentPaddingTop")]
		public void SetContentPaddingTop(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}