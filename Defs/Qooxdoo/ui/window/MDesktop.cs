// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.window
{
    /// <summary>
	/// <para>This mixin implements the key methods of the <see cref="qx.ui.window.IDesktop"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.window.MDesktop", OmitOptionalParameters = true, Export = false)]
    public partial class MDesktop 
    {
		#region Properties

		/// <summary>
		/// <para>The currently active window</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "activeWindow", NativeField = true)]
		public qx.ui.window.Window ActiveWindow { get; set; }

		#endregion Properties

		#region Methods

		public MDesktop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property activeWindow.</para>
		/// </summary>
		[JsMethod(Name = "getActiveWindow")]
		public qx.ui.window.Window GetActiveWindow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the desktop&#8217;s window manager. Each desktop must have a window manager.
		/// If none is configured the default window manager <see cref="qx.ui.window.Window#DEFAULT_MANAGER_CLASS"/>
		/// is used.</para>
		/// </summary>
		/// <returns>The desktop&#8217;s window manager</returns>
		[JsMethod(Name = "getWindowManager")]
		public qx.ui.window.IWindowManager GetWindowManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a list of all windows added to the desktop (including hidden windows)</para>
		/// </summary>
		/// <returns>Array of managed windows</returns>
		[JsMethod(Name = "getWindows")]
		public qx.ui.window.Window GetWindows() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property activeWindow
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property activeWindow.</param>
		[JsMethod(Name = "initActiveWindow")]
		public void InitActiveWindow(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property activeWindow.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetActiveWindow")]
		public void ResetActiveWindow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property activeWindow.</para>
		/// </summary>
		/// <param name="value">New value for property activeWindow.</param>
		[JsMethod(Name = "setActiveWindow")]
		public void SetActiveWindow(qx.ui.window.Window value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the desktop&#8217;s window manager</para>
		/// </summary>
		/// <param name="manager">The window manager</param>
		[JsMethod(Name = "setWindowManager")]
		public void SetWindowManager(qx.ui.window.IWindowManager manager) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the configured layout supports a maximized window
		/// e.g. is a Canvas.</para>
		/// </summary>
		/// <returns>Whether the layout supports maximized windows</returns>
		[JsMethod(Name = "supportsMaximize")]
		public bool SupportsMaximize() { throw new NotImplementedException(); }

		#endregion Methods
    }
}