// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.decoration.css3
{
    /// <summary>
	/// <para>Decorator, which uses the CSS3 border image properties.</para>
	/// <para>This decorator can be used as replacement for <see cref="qx.ui.layout.Grid"/>,
	/// <see cref="qx.ui.layout.HBox"/> and <see cref="qx.ui.layout.VBox"/> decorators in
	/// browsers, which support it.</para>
	/// <para>Supported browsers are:
	/// <list type="bullet">
	/// <item>Firefox >= 3.5</item>
	/// <item>Safari >= 4</item>
	/// <item>Chrome >= 3</item>
	/// <list type="bullet"></para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.decoration.css3.BorderImage", OmitOptionalParameters = true, Export = false)]
    public partial class BorderImage : qx.ui.decoration.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>Base image URL.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "borderImage", NativeField = true)]
		public string BorderImagex { get; set; }

		/// <summary>
		/// <para>If set to false, the center image will be omitted and only
		/// the border will be drawn.</para>
		/// </summary>
		[JsProperty(Name = "fill", NativeField = true)]
		public bool Fill { get; set; }

		/// <summary>
		/// <para>This property specifies how the images for the sides and the middle part
		/// of the border image are scaled and tiled.</para>
		/// </summary>
		[JsProperty(Name = "repeat", NativeField = true)]
		public object Repeat { get; set; }

		/// <summary>
		/// <para>This property specifies how the images for the sides and the middle part
		/// of the border image are scaled and tiled horizontally.</para>
		/// <para>Values have the following meanings:
		/// <list type="bullet">
		/// <item>stretch: The image is stretched to fill the area.</item>
		/// <item>repeat: The image is tiled (repeated) to fill the area.</item>
		/// <item>round: The image is tiled (repeated) to fill the area. If it does not
		/// fill the area with a whole number of tiles, the image is rescaled so
		/// that it does.</item>
		/// </list></para>
		/// </summary>
		/// <remarks>
		/// Possible values: "stretch","repeat","round"
		/// </remarks>
		[JsProperty(Name = "repeatX", NativeField = true)]
		public object RepeatX { get; set; }

		/// <summary>
		/// <para>This property specifies how the images for the sides and the middle part
		/// of the border image are scaled and tiled vertically.</para>
		/// <para>Values have the following meanings:
		/// <list type="bullet">
		/// <item>stretch: The image is stretched to fill the area.</item>
		/// <item>repeat: The image is tiled (repeated) to fill the area.</item>
		/// <item>round: The image is tiled (repeated) to fill the area. If it does not
		/// fill the area with a whole number of tiles, the image is rescaled so
		/// that it does.</item>
		/// </list></para>
		/// </summary>
		/// <remarks>
		/// Possible values: "stretch","repeat","round"
		/// </remarks>
		[JsProperty(Name = "repeatY", NativeField = true)]
		public object RepeatY { get; set; }

		/// <summary>
		/// <para>The slice properties divide the image into nine regions, which define the
		/// corner, edge and the center images.</para>
		/// </summary>
		[JsProperty(Name = "slice", NativeField = true)]
		public object Slice { get; set; }

		/// <summary>
		/// <para>The bottom slice line of the base image. The slice properties divide the
		/// image into nine regions, which define the corner, edge and the center
		/// images.</para>
		/// </summary>
		[JsProperty(Name = "sliceBottom", NativeField = true)]
		public double SliceBottom { get; set; }

		/// <summary>
		/// <para>The left slice line of the base image. The slice properties divide the
		/// image into nine regions, which define the corner, edge and the center
		/// images.</para>
		/// </summary>
		[JsProperty(Name = "sliceLeft", NativeField = true)]
		public double SliceLeft { get; set; }

		/// <summary>
		/// <para>The right slice line of the base image. The slice properties divide the
		/// image into nine regions, which define the corner, edge and the center
		/// images.</para>
		/// </summary>
		[JsProperty(Name = "sliceRight", NativeField = true)]
		public double SliceRight { get; set; }

		/// <summary>
		/// <para>The top slice line of the base image. The slice properties divide the
		/// image into nine regions, which define the corner, edge and the center
		/// images.</para>
		/// </summary>
		[JsProperty(Name = "sliceTop", NativeField = true)]
		public double SliceTop { get; set; }

		#endregion Properties

		#region Methods

		public BorderImage() { throw new NotImplementedException(); }

		/// <param name="borderImage">Base image to use</param>
		/// <param name="slice">Sets the #slice property</param>
		public BorderImage(string borderImage, object slice) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property borderImage.</para>
		/// </summary>
		[JsMethod(Name = "getBorderImage")]
		public string GetBorderImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property fill.</para>
		/// </summary>
		[JsMethod(Name = "getFill")]
		public bool GetFill() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the basic markup structure used for this decoration.
		/// This later updated on DOM to resize or tint the element.</para>
		/// </summary>
		/// <returns>Basic markup</returns>
		[JsMethod(Name = "getMarkup")]
		public string GetMarkup() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property repeatX.</para>
		/// </summary>
		[JsMethod(Name = "getRepeatX")]
		public object GetRepeatX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property repeatY.</para>
		/// </summary>
		[JsMethod(Name = "getRepeatY")]
		public object GetRepeatY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property sliceBottom.</para>
		/// </summary>
		[JsMethod(Name = "getSliceBottom")]
		public double GetSliceBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property sliceLeft.</para>
		/// </summary>
		[JsMethod(Name = "getSliceLeft")]
		public double GetSliceLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property sliceRight.</para>
		/// </summary>
		[JsMethod(Name = "getSliceRight")]
		public double GetSliceRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property sliceTop.</para>
		/// </summary>
		[JsMethod(Name = "getSliceTop")]
		public double GetSliceTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property borderImage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property borderImage.</param>
		[JsMethod(Name = "initBorderImage")]
		public void InitBorderImage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property fill
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property fill.</param>
		[JsMethod(Name = "initFill")]
		public void InitFill(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property repeatX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property repeatX.</param>
		[JsMethod(Name = "initRepeatX")]
		public void InitRepeatX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property repeatY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property repeatY.</param>
		[JsMethod(Name = "initRepeatY")]
		public void InitRepeatY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property sliceBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property sliceBottom.</param>
		[JsMethod(Name = "initSliceBottom")]
		public void InitSliceBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property sliceLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property sliceLeft.</param>
		[JsMethod(Name = "initSliceLeft")]
		public void InitSliceLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property sliceRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property sliceRight.</param>
		[JsMethod(Name = "initSliceRight")]
		public void InitSliceRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property sliceTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property sliceTop.</param>
		[JsMethod(Name = "initSliceTop")]
		public void InitSliceTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property fill equals true.</para>
		/// </summary>
		[JsMethod(Name = "isFill")]
		public void IsFill() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property borderImage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBorderImage")]
		public void ResetBorderImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property fill.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFill")]
		public void ResetFill() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property repeat.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRepeat")]
		public void ResetRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property repeatX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRepeatX")]
		public void ResetRepeatX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property repeatY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRepeatY")]
		public void ResetRepeatY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property slice.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSlice")]
		public void ResetSlice() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property sliceBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSliceBottom")]
		public void ResetSliceBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property sliceLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSliceLeft")]
		public void ResetSliceLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property sliceRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSliceRight")]
		public void ResetSliceRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property sliceTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSliceTop")]
		public void ResetSliceTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resizes the element respecting the configured borders
		/// to the given width and height. Should automatically
		/// respect the box model of the client to correctly
		/// compute the dimensions.</para>
		/// </summary>
		/// <param name="element">The element to update</param>
		/// <param name="width">Width of the element</param>
		/// <param name="height">Height of the element</param>
		[JsMethod(Name = "resize")]
		public void Resize(qx.html.Element element, double width, double height) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property borderImage.</para>
		/// </summary>
		/// <param name="value">New value for property borderImage.</param>
		[JsMethod(Name = "setBorderImage")]
		public void SetBorderImage(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property fill.</para>
		/// </summary>
		/// <param name="value">New value for property fill.</param>
		[JsMethod(Name = "setFill")]
		public void SetFill(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group repeat.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="repeatX">Sets the value of the property #repeatX.</param>
		/// <param name="repeatY">Sets the value of the property #repeatY.</param>
		[JsMethod(Name = "setRepeat")]
		public void SetRepeat(object repeatX, object repeatY) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property repeatX.</para>
		/// </summary>
		/// <param name="value">New value for property repeatX.</param>
		[JsMethod(Name = "setRepeatX")]
		public void SetRepeatX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property repeatY.</para>
		/// </summary>
		/// <param name="value">New value for property repeatY.</param>
		[JsMethod(Name = "setRepeatY")]
		public void SetRepeatY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group slice.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="sliceTop">Sets the value of the property #sliceTop.</param>
		/// <param name="sliceRight">Sets the value of the property #sliceRight.</param>
		/// <param name="sliceBottom">Sets the value of the property #sliceBottom.</param>
		/// <param name="sliceLeft">Sets the value of the property #sliceLeft.</param>
		[JsMethod(Name = "setSlice")]
		public void SetSlice(object sliceTop, object sliceRight, object sliceBottom, object sliceLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property sliceBottom.</para>
		/// </summary>
		/// <param name="value">New value for property sliceBottom.</param>
		[JsMethod(Name = "setSliceBottom")]
		public void SetSliceBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property sliceLeft.</para>
		/// </summary>
		/// <param name="value">New value for property sliceLeft.</param>
		[JsMethod(Name = "setSliceLeft")]
		public void SetSliceLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property sliceRight.</para>
		/// </summary>
		/// <param name="value">New value for property sliceRight.</param>
		[JsMethod(Name = "setSliceRight")]
		public void SetSliceRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property sliceTop.</para>
		/// </summary>
		/// <param name="value">New value for property sliceTop.</param>
		[JsMethod(Name = "setSliceTop")]
		public void SetSliceTop(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Applies the given background color to the element
		/// or fallback to the background color defined
		/// by the decoration itself.</para>
		/// </summary>
		/// <param name="element">The element to update</param>
		/// <param name="bgcolor">The color to apply or null</param>
		[JsMethod(Name = "tint")]
		public void Tint(qx.html.Element element, string bgcolor) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property fill.</para>
		/// </summary>
		[JsMethod(Name = "toggleFill")]
		public void ToggleFill() { throw new NotImplementedException(); }

		#endregion Methods
    }
}