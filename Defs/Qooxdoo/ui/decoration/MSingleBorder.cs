// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.decoration
{
    /// <summary>
	/// <para>A basic decorator featuring simple borders based on CSS styles.
	/// This mixin is usually used by <see cref="qx.ui.decoration.DynamicDecorator"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.decoration.MSingleBorder", OmitOptionalParameters = true, Export = false)]
    public partial class MSingleBorder 
    {
		#region Properties

		/// <summary>
		/// <para>Property group to configure the bottom border</para>
		/// </summary>
		[JsProperty(Name = "bottom", NativeField = true)]
		public object Bottom { get; set; }

		/// <summary>
		/// <para>Property group to set the border color of all sides</para>
		/// </summary>
		[JsProperty(Name = "color", NativeField = true)]
		public object Color { get; set; }

		/// <summary>
		/// <para>bottom color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorBottom", NativeField = true)]
		public string ColorBottom { get; set; }

		/// <summary>
		/// <para>left color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorLeft", NativeField = true)]
		public string ColorLeft { get; set; }

		/// <summary>
		/// <para>right color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorRight", NativeField = true)]
		public string ColorRight { get; set; }

		/// <summary>
		/// <para>top color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorTop", NativeField = true)]
		public string ColorTop { get; set; }

		/// <summary>
		/// <para>Property group to configure the left border</para>
		/// </summary>
		[JsProperty(Name = "left", NativeField = true)]
		public object Left { get; set; }

		/// <summary>
		/// <para>Property group to configure the right border</para>
		/// </summary>
		[JsProperty(Name = "right", NativeField = true)]
		public object Right { get; set; }

		/// <summary>
		/// <para>Property group to set the border style of all sides</para>
		/// </summary>
		[JsProperty(Name = "style", NativeField = true)]
		public object Style { get; set; }

		/// <summary>
		/// <para>bottom style of border</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "solid","dotted","dashed","double"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "styleBottom", NativeField = true)]
		public object StyleBottom { get; set; }

		/// <summary>
		/// <para>left style of border</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "solid","dotted","dashed","double"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "styleLeft", NativeField = true)]
		public object StyleLeft { get; set; }

		/// <summary>
		/// <para>right style of border</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "solid","dotted","dashed","double"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "styleRight", NativeField = true)]
		public object StyleRight { get; set; }

		/// <summary>
		/// <para>top style of border</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "solid","dotted","dashed","double"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "styleTop", NativeField = true)]
		public object StyleTop { get; set; }

		/// <summary>
		/// <para>Property group to configure the top border</para>
		/// </summary>
		[JsProperty(Name = "top", NativeField = true)]
		public object Top { get; set; }

		/// <summary>
		/// <para>Property group to set the border width of all sides</para>
		/// </summary>
		[JsProperty(Name = "width", NativeField = true)]
		public object Width { get; set; }

		/// <summary>
		/// <para>bottom width of border</para>
		/// </summary>
		[JsProperty(Name = "widthBottom", NativeField = true)]
		public double WidthBottom { get; set; }

		/// <summary>
		/// <para>left width of border</para>
		/// </summary>
		[JsProperty(Name = "widthLeft", NativeField = true)]
		public double WidthLeft { get; set; }

		/// <summary>
		/// <para>right width of border</para>
		/// </summary>
		[JsProperty(Name = "widthRight", NativeField = true)]
		public double WidthRight { get; set; }

		/// <summary>
		/// <para>top width of border</para>
		/// </summary>
		[JsProperty(Name = "widthTop", NativeField = true)]
		public double WidthTop { get; set; }

		#endregion Properties

		#region Methods

		public MSingleBorder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorBottom.</para>
		/// </summary>
		[JsMethod(Name = "getColorBottom")]
		public string GetColorBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorLeft.</para>
		/// </summary>
		[JsMethod(Name = "getColorLeft")]
		public string GetColorLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorRight.</para>
		/// </summary>
		[JsMethod(Name = "getColorRight")]
		public string GetColorRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorTop.</para>
		/// </summary>
		[JsMethod(Name = "getColorTop")]
		public string GetColorTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property styleBottom.</para>
		/// </summary>
		[JsMethod(Name = "getStyleBottom")]
		public object GetStyleBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property styleLeft.</para>
		/// </summary>
		[JsMethod(Name = "getStyleLeft")]
		public object GetStyleLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property styleRight.</para>
		/// </summary>
		[JsMethod(Name = "getStyleRight")]
		public object GetStyleRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property styleTop.</para>
		/// </summary>
		[JsMethod(Name = "getStyleTop")]
		public object GetStyleTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property widthBottom.</para>
		/// </summary>
		[JsMethod(Name = "getWidthBottom")]
		public double GetWidthBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property widthLeft.</para>
		/// </summary>
		[JsMethod(Name = "getWidthLeft")]
		public double GetWidthLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property widthRight.</para>
		/// </summary>
		[JsMethod(Name = "getWidthRight")]
		public double GetWidthRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property widthTop.</para>
		/// </summary>
		[JsMethod(Name = "getWidthTop")]
		public double GetWidthTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorBottom.</param>
		[JsMethod(Name = "initColorBottom")]
		public void InitColorBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorLeft.</param>
		[JsMethod(Name = "initColorLeft")]
		public void InitColorLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorRight.</param>
		[JsMethod(Name = "initColorRight")]
		public void InitColorRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorTop.</param>
		[JsMethod(Name = "initColorTop")]
		public void InitColorTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property styleBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property styleBottom.</param>
		[JsMethod(Name = "initStyleBottom")]
		public void InitStyleBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property styleLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property styleLeft.</param>
		[JsMethod(Name = "initStyleLeft")]
		public void InitStyleLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property styleRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property styleRight.</param>
		[JsMethod(Name = "initStyleRight")]
		public void InitStyleRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property styleTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property styleTop.</param>
		[JsMethod(Name = "initStyleTop")]
		public void InitStyleTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property widthBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property widthBottom.</param>
		[JsMethod(Name = "initWidthBottom")]
		public void InitWidthBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property widthLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property widthLeft.</param>
		[JsMethod(Name = "initWidthLeft")]
		public void InitWidthLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property widthRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property widthRight.</param>
		[JsMethod(Name = "initWidthRight")]
		public void InitWidthRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property widthTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property widthTop.</param>
		[JsMethod(Name = "initWidthTop")]
		public void InitWidthTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property bottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBottom")]
		public void ResetBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property color.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColor")]
		public void ResetColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorBottom")]
		public void ResetColorBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorLeft")]
		public void ResetColorLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorRight")]
		public void ResetColorRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorTop")]
		public void ResetColorTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property left.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLeft")]
		public void ResetLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property right.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRight")]
		public void ResetRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property style.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyle")]
		public void ResetStyle() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property styleBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyleBottom")]
		public void ResetStyleBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property styleLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyleLeft")]
		public void ResetStyleLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property styleRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyleRight")]
		public void ResetStyleRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property styleTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyleTop")]
		public void ResetStyleTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property top.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTop")]
		public void ResetTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property width.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidth")]
		public void ResetWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property widthBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidthBottom")]
		public void ResetWidthBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property widthLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidthLeft")]
		public void ResetWidthLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property widthRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidthRight")]
		public void ResetWidthRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property widthTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidthTop")]
		public void ResetWidthTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group bottom.</para>
		/// </summary>
		/// <param name="widthBottom">Sets the value of the property #widthBottom.</param>
		/// <param name="styleBottom">Sets the value of the property #styleBottom.</param>
		/// <param name="colorBottom">Sets the value of the property #colorBottom.</param>
		[JsMethod(Name = "setBottom")]
		public void SetBottom(object widthBottom, object styleBottom, object colorBottom) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group color.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="colorTop">Sets the value of the property #colorTop.</param>
		/// <param name="colorRight">Sets the value of the property #colorRight.</param>
		/// <param name="colorBottom">Sets the value of the property #colorBottom.</param>
		/// <param name="colorLeft">Sets the value of the property #colorLeft.</param>
		[JsMethod(Name = "setColor")]
		public void SetColor(object colorTop, object colorRight, object colorBottom, object colorLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorBottom.</para>
		/// </summary>
		/// <param name="value">New value for property colorBottom.</param>
		[JsMethod(Name = "setColorBottom")]
		public void SetColorBottom(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorLeft.</para>
		/// </summary>
		/// <param name="value">New value for property colorLeft.</param>
		[JsMethod(Name = "setColorLeft")]
		public void SetColorLeft(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorRight.</para>
		/// </summary>
		/// <param name="value">New value for property colorRight.</param>
		[JsMethod(Name = "setColorRight")]
		public void SetColorRight(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorTop.</para>
		/// </summary>
		/// <param name="value">New value for property colorTop.</param>
		[JsMethod(Name = "setColorTop")]
		public void SetColorTop(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group left.</para>
		/// </summary>
		/// <param name="widthLeft">Sets the value of the property #widthLeft.</param>
		/// <param name="styleLeft">Sets the value of the property #styleLeft.</param>
		/// <param name="colorLeft">Sets the value of the property #colorLeft.</param>
		[JsMethod(Name = "setLeft")]
		public void SetLeft(object widthLeft, object styleLeft, object colorLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group right.</para>
		/// </summary>
		/// <param name="widthRight">Sets the value of the property #widthRight.</param>
		/// <param name="styleRight">Sets the value of the property #styleRight.</param>
		/// <param name="colorRight">Sets the value of the property #colorRight.</param>
		[JsMethod(Name = "setRight")]
		public void SetRight(object widthRight, object styleRight, object colorRight) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group style.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="styleTop">Sets the value of the property #styleTop.</param>
		/// <param name="styleRight">Sets the value of the property #styleRight.</param>
		/// <param name="styleBottom">Sets the value of the property #styleBottom.</param>
		/// <param name="styleLeft">Sets the value of the property #styleLeft.</param>
		[JsMethod(Name = "setStyle")]
		public void SetStyle(object styleTop, object styleRight, object styleBottom, object styleLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property styleBottom.</para>
		/// </summary>
		/// <param name="value">New value for property styleBottom.</param>
		[JsMethod(Name = "setStyleBottom")]
		public void SetStyleBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property styleLeft.</para>
		/// </summary>
		/// <param name="value">New value for property styleLeft.</param>
		[JsMethod(Name = "setStyleLeft")]
		public void SetStyleLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property styleRight.</para>
		/// </summary>
		/// <param name="value">New value for property styleRight.</param>
		[JsMethod(Name = "setStyleRight")]
		public void SetStyleRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property styleTop.</para>
		/// </summary>
		/// <param name="value">New value for property styleTop.</param>
		[JsMethod(Name = "setStyleTop")]
		public void SetStyleTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group top.</para>
		/// </summary>
		/// <param name="widthTop">Sets the value of the property #widthTop.</param>
		/// <param name="styleTop">Sets the value of the property #styleTop.</param>
		/// <param name="colorTop">Sets the value of the property #colorTop.</param>
		[JsMethod(Name = "setTop")]
		public void SetTop(object widthTop, object styleTop, object colorTop) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group width.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="widthTop">Sets the value of the property #widthTop.</param>
		/// <param name="widthRight">Sets the value of the property #widthRight.</param>
		/// <param name="widthBottom">Sets the value of the property #widthBottom.</param>
		/// <param name="widthLeft">Sets the value of the property #widthLeft.</param>
		[JsMethod(Name = "setWidth")]
		public void SetWidth(object widthTop, object widthRight, object widthBottom, object widthLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property widthBottom.</para>
		/// </summary>
		/// <param name="value">New value for property widthBottom.</param>
		[JsMethod(Name = "setWidthBottom")]
		public void SetWidthBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property widthLeft.</para>
		/// </summary>
		/// <param name="value">New value for property widthLeft.</param>
		[JsMethod(Name = "setWidthLeft")]
		public void SetWidthLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property widthRight.</para>
		/// </summary>
		/// <param name="value">New value for property widthRight.</param>
		[JsMethod(Name = "setWidthRight")]
		public void SetWidthRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property widthTop.</para>
		/// </summary>
		/// <param name="value">New value for property widthTop.</param>
		[JsMethod(Name = "setWidthTop")]
		public void SetWidthTop(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}