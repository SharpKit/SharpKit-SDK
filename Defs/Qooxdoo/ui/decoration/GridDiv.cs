// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.decoration
{
    /// <summary>
	/// <para>A very complex decoration using two, partly combined and clipped images
	/// to render a graphically impressive borders with gradients.</para>
	/// <para>The decoration supports all forms of vertical gradients. The gradients must
	/// be stretchable to support different heights.</para>
	/// <para>The edges could use different styles of rounded borders. Even different
	/// edge sizes are supported. The sizes are automatically detected by
	/// the build system using the image meta data.</para>
	/// <para>The decoration uses clipped images to reduce the number of external
	/// resources to load.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.decoration.GridDiv", OmitOptionalParameters = true, Export = false)]
    public partial class GridDiv : qx.ui.decoration.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>Base image URL. All the different images needed are named by the default
		/// naming scheme:</para>
		/// <para>${baseImageWithoutExtension}-${imageName}.${baseImageExtension}</para>
		/// <para>These image names are used:</para>
		/// <list type="bullet">
		/// <item>tl (top-left edge)</item>
		/// <item>t (top side)</item>
		/// <item>tr (top-right edge)</item>
		/// </list
		/// <list type="bullet">
		/// <item>bl (bottom-left edge)</item>
		/// <item>b (bottom side)</item>
		/// <item>br (bottom-right edge)</item>
		/// </list
		/// <list type="bullet">
		/// <item>l (left side)</item>
		/// <item>c (center image)</item>
		/// <item>r (right side)</item>
		/// </list
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "baseImage", NativeField = true)]
		public string BaseImage { get; set; }

		#endregion Properties

		#region Methods

		public GridDiv() { throw new NotImplementedException(); }

		/// <param name="baseImage">Base image to use</param>
		/// <param name="insets">Insets for the grid</param>
		public GridDiv(string baseImage, object insets) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property baseImage.</para>
		/// </summary>
		[JsMethod(Name = "getBaseImage")]
		public string GetBaseImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the basic markup structure used for this decoration.
		/// This later updated on DOM to resize or tint the element.</para>
		/// </summary>
		/// <returns>Basic markup</returns>
		[JsMethod(Name = "getMarkup")]
		public string GetMarkup() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property baseImage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property baseImage.</param>
		[JsMethod(Name = "initBaseImage")]
		public void InitBaseImage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property baseImage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBaseImage")]
		public void ResetBaseImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resizes the element respecting the configured borders
		/// to the given width and height. Should automatically
		/// respect the box model of the client to correctly
		/// compute the dimensions.</para>
		/// </summary>
		/// <param name="element">The element to update</param>
		/// <param name="width">Width of the element</param>
		/// <param name="height">Height of the element</param>
		[JsMethod(Name = "resize")]
		public void Resize(qx.html.Element element, double width, double height) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property baseImage.</para>
		/// </summary>
		/// <param name="value">New value for property baseImage.</param>
		[JsMethod(Name = "setBaseImage")]
		public void SetBaseImage(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Applies the given background color to the element
		/// or fallback to the background color defined
		/// by the decoration itself.</para>
		/// </summary>
		/// <param name="element">The element to update</param>
		/// <param name="bgcolor">The color to apply or null</param>
		[JsMethod(Name = "tint")]
		public void Tint(qx.html.Element element, string bgcolor) { throw new NotImplementedException(); }

		#endregion Methods
    }
}