// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.decoration
{
    /// <summary>
	/// <para>Border implementation with two CSS borders. Both borders can be styled
	/// independent of each other. This decorator is used to create 3D effects like
	/// inset, outset, ridge or groove.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.decoration.Double", OmitOptionalParameters = true, Export = false)]
    public partial class Double : qx.ui.decoration.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>Color of the background</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "backgroundColor", NativeField = true)]
		public string BackgroundColor { get; set; }

		/// <summary>
		/// <para>Property group for the inner color properties.</para>
		/// </summary>
		[JsProperty(Name = "innerColor", NativeField = true)]
		public object InnerColor { get; set; }

		/// <summary>
		/// <para>bottom inner color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "innerColorBottom", NativeField = true)]
		public string InnerColorBottom { get; set; }

		/// <summary>
		/// <para>left inner color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "innerColorLeft", NativeField = true)]
		public string InnerColorLeft { get; set; }

		/// <summary>
		/// <para>right inner color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "innerColorRight", NativeField = true)]
		public string InnerColorRight { get; set; }

		/// <summary>
		/// <para>top inner color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "innerColorTop", NativeField = true)]
		public string InnerColorTop { get; set; }

		/// <summary>
		/// <para>Property group to set the inner border width of all sides</para>
		/// </summary>
		[JsProperty(Name = "innerWidth", NativeField = true)]
		public object InnerWidth { get; set; }

		/// <summary>
		/// <para>bottom width of border</para>
		/// </summary>
		[JsProperty(Name = "innerWidthBottom", NativeField = true)]
		public double InnerWidthBottom { get; set; }

		/// <summary>
		/// <para>left width of border</para>
		/// </summary>
		[JsProperty(Name = "innerWidthLeft", NativeField = true)]
		public double InnerWidthLeft { get; set; }

		/// <summary>
		/// <para>right width of border</para>
		/// </summary>
		[JsProperty(Name = "innerWidthRight", NativeField = true)]
		public double InnerWidthRight { get; set; }

		/// <summary>
		/// <para>top width of border</para>
		/// </summary>
		[JsProperty(Name = "innerWidthTop", NativeField = true)]
		public double InnerWidthTop { get; set; }

		#endregion Properties

		#region Methods

		public Double() { throw new NotImplementedException(); }

		/// <param name="width">Width of the border</param>
		/// <param name="style">Any supported border style</param>
		/// <param name="color">The border color</param>
		/// <param name="innerWidth">Width of the inner border</param>
		/// <param name="innerColor">The inner border color</param>
		public Double(double width, string style, string color, string innerWidth, string innerColor) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the basic markup structure used for this decoration.
		/// This later updated on DOM to resize or tint the element.</para>
		/// </summary>
		/// <returns>Basic markup</returns>
		[JsMethod(Name = "getMarkup")]
		public string GetMarkup() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resizes the element respecting the configured borders
		/// to the given width and height. Should automatically
		/// respect the box model of the client to correctly
		/// compute the dimensions.</para>
		/// </summary>
		/// <param name="element">The element to update</param>
		/// <param name="width">Width of the element</param>
		/// <param name="height">Height of the element</param>
		[JsMethod(Name = "resize")]
		public void Resize(qx.html.Element element, double width, double height) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Applies the given background color to the element
		/// or fallback to the background color defined
		/// by the decoration itself.</para>
		/// </summary>
		/// <param name="element">The element to update</param>
		/// <param name="bgcolor">The color to apply or null</param>
		[JsMethod(Name = "tint")]
		public void Tint(qx.html.Element element, string bgcolor) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property backgroundColor.</para>
		/// </summary>
		[JsMethod(Name = "getBackgroundColor")]
		public string GetBackgroundColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property backgroundColor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property backgroundColor.</param>
		[JsMethod(Name = "initBackgroundColor")]
		public void InitBackgroundColor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backgroundColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackgroundColor")]
		public void ResetBackgroundColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property backgroundColor.</para>
		/// </summary>
		/// <param name="value">New value for property backgroundColor.</param>
		[JsMethod(Name = "setBackgroundColor")]
		public void SetBackgroundColor(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerColorBottom.</para>
		/// </summary>
		[JsMethod(Name = "getInnerColorBottom")]
		public string GetInnerColorBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerColorLeft.</para>
		/// </summary>
		[JsMethod(Name = "getInnerColorLeft")]
		public string GetInnerColorLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerColorRight.</para>
		/// </summary>
		[JsMethod(Name = "getInnerColorRight")]
		public string GetInnerColorRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerColorTop.</para>
		/// </summary>
		[JsMethod(Name = "getInnerColorTop")]
		public string GetInnerColorTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerWidthBottom.</para>
		/// </summary>
		[JsMethod(Name = "getInnerWidthBottom")]
		public double GetInnerWidthBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerWidthLeft.</para>
		/// </summary>
		[JsMethod(Name = "getInnerWidthLeft")]
		public double GetInnerWidthLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerWidthRight.</para>
		/// </summary>
		[JsMethod(Name = "getInnerWidthRight")]
		public double GetInnerWidthRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerWidthTop.</para>
		/// </summary>
		[JsMethod(Name = "getInnerWidthTop")]
		public double GetInnerWidthTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerColorBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerColorBottom.</param>
		[JsMethod(Name = "initInnerColorBottom")]
		public void InitInnerColorBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerColorLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerColorLeft.</param>
		[JsMethod(Name = "initInnerColorLeft")]
		public void InitInnerColorLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerColorRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerColorRight.</param>
		[JsMethod(Name = "initInnerColorRight")]
		public void InitInnerColorRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerColorTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerColorTop.</param>
		[JsMethod(Name = "initInnerColorTop")]
		public void InitInnerColorTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerWidthBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerWidthBottom.</param>
		[JsMethod(Name = "initInnerWidthBottom")]
		public void InitInnerWidthBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerWidthLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerWidthLeft.</param>
		[JsMethod(Name = "initInnerWidthLeft")]
		public void InitInnerWidthLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerWidthRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerWidthRight.</param>
		[JsMethod(Name = "initInnerWidthRight")]
		public void InitInnerWidthRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerWidthTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerWidthTop.</param>
		[JsMethod(Name = "initInnerWidthTop")]
		public void InitInnerWidthTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColor")]
		public void ResetInnerColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColorBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColorBottom")]
		public void ResetInnerColorBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColorLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColorLeft")]
		public void ResetInnerColorLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColorRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColorRight")]
		public void ResetInnerColorRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColorTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColorTop")]
		public void ResetInnerColorTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidth.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidth")]
		public void ResetInnerWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidthBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidthBottom")]
		public void ResetInnerWidthBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidthLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidthLeft")]
		public void ResetInnerWidthLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidthRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidthRight")]
		public void ResetInnerWidthRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidthTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidthTop")]
		public void ResetInnerWidthTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group innerColor.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="innerColorTop">Sets the value of the property #innerColorTop.</param>
		/// <param name="innerColorRight">Sets the value of the property #innerColorRight.</param>
		/// <param name="innerColorBottom">Sets the value of the property #innerColorBottom.</param>
		/// <param name="innerColorLeft">Sets the value of the property #innerColorLeft.</param>
		[JsMethod(Name = "setInnerColor")]
		public void SetInnerColor(object innerColorTop, object innerColorRight, object innerColorBottom, object innerColorLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerColorBottom.</para>
		/// </summary>
		/// <param name="value">New value for property innerColorBottom.</param>
		[JsMethod(Name = "setInnerColorBottom")]
		public void SetInnerColorBottom(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerColorLeft.</para>
		/// </summary>
		/// <param name="value">New value for property innerColorLeft.</param>
		[JsMethod(Name = "setInnerColorLeft")]
		public void SetInnerColorLeft(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerColorRight.</para>
		/// </summary>
		/// <param name="value">New value for property innerColorRight.</param>
		[JsMethod(Name = "setInnerColorRight")]
		public void SetInnerColorRight(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerColorTop.</para>
		/// </summary>
		/// <param name="value">New value for property innerColorTop.</param>
		[JsMethod(Name = "setInnerColorTop")]
		public void SetInnerColorTop(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group innerWidth.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="innerWidthTop">Sets the value of the property #innerWidthTop.</param>
		/// <param name="innerWidthRight">Sets the value of the property #innerWidthRight.</param>
		/// <param name="innerWidthBottom">Sets the value of the property #innerWidthBottom.</param>
		/// <param name="innerWidthLeft">Sets the value of the property #innerWidthLeft.</param>
		[JsMethod(Name = "setInnerWidth")]
		public void SetInnerWidth(object innerWidthTop, object innerWidthRight, object innerWidthBottom, object innerWidthLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerWidthBottom.</para>
		/// </summary>
		/// <param name="value">New value for property innerWidthBottom.</param>
		[JsMethod(Name = "setInnerWidthBottom")]
		public void SetInnerWidthBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerWidthLeft.</para>
		/// </summary>
		/// <param name="value">New value for property innerWidthLeft.</param>
		[JsMethod(Name = "setInnerWidthLeft")]
		public void SetInnerWidthLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerWidthRight.</para>
		/// </summary>
		/// <param name="value">New value for property innerWidthRight.</param>
		[JsMethod(Name = "setInnerWidthRight")]
		public void SetInnerWidthRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerWidthTop.</para>
		/// </summary>
		/// <param name="value">New value for property innerWidthTop.</param>
		[JsMethod(Name = "setInnerWidthTop")]
		public void SetInnerWidthTop(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}