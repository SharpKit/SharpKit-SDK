// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.decoration
{
    /// <summary>
	/// <para>Border implementation with two CSS borders. Both borders can be styled
	/// independent of each other.
	/// This mixin is usually used by <see cref="qx.ui.decoration.DynamicDecorator"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.decoration.MDoubleBorder", OmitOptionalParameters = true, Export = false)]
    public partial class MDoubleBorder 
    {
		#region Properties

		/// <summary>
		/// <para>Property group for the inner color properties.</para>
		/// </summary>
		[JsProperty(Name = "innerColor", NativeField = true)]
		public object InnerColor { get; set; }

		/// <summary>
		/// <para>bottom inner color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "innerColorBottom", NativeField = true)]
		public string InnerColorBottom { get; set; }

		/// <summary>
		/// <para>left inner color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "innerColorLeft", NativeField = true)]
		public string InnerColorLeft { get; set; }

		/// <summary>
		/// <para>right inner color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "innerColorRight", NativeField = true)]
		public string InnerColorRight { get; set; }

		/// <summary>
		/// <para>top inner color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "innerColorTop", NativeField = true)]
		public string InnerColorTop { get; set; }

		/// <summary>
		/// <para>Property group to set the inner border width of all sides</para>
		/// </summary>
		[JsProperty(Name = "innerWidth", NativeField = true)]
		public object InnerWidth { get; set; }

		/// <summary>
		/// <para>bottom width of border</para>
		/// </summary>
		[JsProperty(Name = "innerWidthBottom", NativeField = true)]
		public double InnerWidthBottom { get; set; }

		/// <summary>
		/// <para>left width of border</para>
		/// </summary>
		[JsProperty(Name = "innerWidthLeft", NativeField = true)]
		public double InnerWidthLeft { get; set; }

		/// <summary>
		/// <para>right width of border</para>
		/// </summary>
		[JsProperty(Name = "innerWidthRight", NativeField = true)]
		public double InnerWidthRight { get; set; }

		/// <summary>
		/// <para>top width of border</para>
		/// </summary>
		[JsProperty(Name = "innerWidthTop", NativeField = true)]
		public double InnerWidthTop { get; set; }

		/// <summary>
		/// <para>Property group to configure the bottom border</para>
		/// </summary>
		[JsProperty(Name = "bottom", NativeField = true)]
		public object Bottom { get; set; }

		/// <summary>
		/// <para>Property group to set the border color of all sides</para>
		/// </summary>
		[JsProperty(Name = "color", NativeField = true)]
		public object Color { get; set; }

		/// <summary>
		/// <para>bottom color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorBottom", NativeField = true)]
		public string ColorBottom { get; set; }

		/// <summary>
		/// <para>left color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorLeft", NativeField = true)]
		public string ColorLeft { get; set; }

		/// <summary>
		/// <para>right color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorRight", NativeField = true)]
		public string ColorRight { get; set; }

		/// <summary>
		/// <para>top color of border</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "colorTop", NativeField = true)]
		public string ColorTop { get; set; }

		/// <summary>
		/// <para>Property group to configure the left border</para>
		/// </summary>
		[JsProperty(Name = "left", NativeField = true)]
		public object Left { get; set; }

		/// <summary>
		/// <para>Property group to configure the right border</para>
		/// </summary>
		[JsProperty(Name = "right", NativeField = true)]
		public object Right { get; set; }

		/// <summary>
		/// <para>Property group to set the border style of all sides</para>
		/// </summary>
		[JsProperty(Name = "style", NativeField = true)]
		public object Style { get; set; }

		/// <summary>
		/// <para>bottom style of border</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "solid","dotted","dashed","double"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "styleBottom", NativeField = true)]
		public object StyleBottom { get; set; }

		/// <summary>
		/// <para>left style of border</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "solid","dotted","dashed","double"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "styleLeft", NativeField = true)]
		public object StyleLeft { get; set; }

		/// <summary>
		/// <para>right style of border</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "solid","dotted","dashed","double"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "styleRight", NativeField = true)]
		public object StyleRight { get; set; }

		/// <summary>
		/// <para>top style of border</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "solid","dotted","dashed","double"
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "styleTop", NativeField = true)]
		public object StyleTop { get; set; }

		/// <summary>
		/// <para>Property group to configure the top border</para>
		/// </summary>
		[JsProperty(Name = "top", NativeField = true)]
		public object Top { get; set; }

		/// <summary>
		/// <para>Property group to set the border width of all sides</para>
		/// </summary>
		[JsProperty(Name = "width", NativeField = true)]
		public object Width { get; set; }

		/// <summary>
		/// <para>bottom width of border</para>
		/// </summary>
		[JsProperty(Name = "widthBottom", NativeField = true)]
		public double WidthBottom { get; set; }

		/// <summary>
		/// <para>left width of border</para>
		/// </summary>
		[JsProperty(Name = "widthLeft", NativeField = true)]
		public double WidthLeft { get; set; }

		/// <summary>
		/// <para>right width of border</para>
		/// </summary>
		[JsProperty(Name = "widthRight", NativeField = true)]
		public double WidthRight { get; set; }

		/// <summary>
		/// <para>top width of border</para>
		/// </summary>
		[JsProperty(Name = "widthTop", NativeField = true)]
		public double WidthTop { get; set; }

		/// <summary>
		/// <para>The URL of the background image</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "backgroundImage", NativeField = true)]
		public string BackgroundImage { get; set; }

		/// <summary>
		/// <para>Property group to define the background position</para>
		/// </summary>
		[JsProperty(Name = "backgroundPosition", NativeField = true)]
		public object BackgroundPosition { get; set; }

		/// <summary>
		/// <para>Either a string or a number, which defines the horizontal position
		/// of the background image.</para>
		/// <para>If the value is an integer it is interpreted as a pixel value, otherwise
		/// the value is taken to be a CSS value. For CSS, the values are &#8220;center&#8221;,
		/// &#8220;left&#8221; and &#8220;right&#8221;.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "backgroundPositionX", NativeField = true)]
		public object BackgroundPositionX { get; set; }

		/// <summary>
		/// <para>Either a string or a number, which defines the vertical position
		/// of the background image.</para>
		/// <para>If the value is an integer it is interpreted as a pixel value, otherwise
		/// the value is taken to be a CSS value. For CSS, the values are &#8220;top&#8221;,
		/// &#8220;center&#8221; and &#8220;bottom&#8221;.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "backgroundPositionY", NativeField = true)]
		public object BackgroundPositionY { get; set; }

		/// <summary>
		/// <para>How the background image should be repeated</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "repeat","repeat-x","repeat-y","no-repeat","scale"
		/// </remarks>
		[JsProperty(Name = "backgroundRepeat", NativeField = true)]
		public object BackgroundRepeat { get; set; }

		#endregion Properties

		#region Methods

		public MDoubleBorder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerColorBottom.</para>
		/// </summary>
		[JsMethod(Name = "getInnerColorBottom")]
		public string GetInnerColorBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerColorLeft.</para>
		/// </summary>
		[JsMethod(Name = "getInnerColorLeft")]
		public string GetInnerColorLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerColorRight.</para>
		/// </summary>
		[JsMethod(Name = "getInnerColorRight")]
		public string GetInnerColorRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerColorTop.</para>
		/// </summary>
		[JsMethod(Name = "getInnerColorTop")]
		public string GetInnerColorTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerWidthBottom.</para>
		/// </summary>
		[JsMethod(Name = "getInnerWidthBottom")]
		public double GetInnerWidthBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerWidthLeft.</para>
		/// </summary>
		[JsMethod(Name = "getInnerWidthLeft")]
		public double GetInnerWidthLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerWidthRight.</para>
		/// </summary>
		[JsMethod(Name = "getInnerWidthRight")]
		public double GetInnerWidthRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property innerWidthTop.</para>
		/// </summary>
		[JsMethod(Name = "getInnerWidthTop")]
		public double GetInnerWidthTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerColorBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerColorBottom.</param>
		[JsMethod(Name = "initInnerColorBottom")]
		public void InitInnerColorBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerColorLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerColorLeft.</param>
		[JsMethod(Name = "initInnerColorLeft")]
		public void InitInnerColorLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerColorRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerColorRight.</param>
		[JsMethod(Name = "initInnerColorRight")]
		public void InitInnerColorRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerColorTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerColorTop.</param>
		[JsMethod(Name = "initInnerColorTop")]
		public void InitInnerColorTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerWidthBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerWidthBottom.</param>
		[JsMethod(Name = "initInnerWidthBottom")]
		public void InitInnerWidthBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerWidthLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerWidthLeft.</param>
		[JsMethod(Name = "initInnerWidthLeft")]
		public void InitInnerWidthLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerWidthRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerWidthRight.</param>
		[JsMethod(Name = "initInnerWidthRight")]
		public void InitInnerWidthRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property innerWidthTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property innerWidthTop.</param>
		[JsMethod(Name = "initInnerWidthTop")]
		public void InitInnerWidthTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColor")]
		public void ResetInnerColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColorBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColorBottom")]
		public void ResetInnerColorBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColorLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColorLeft")]
		public void ResetInnerColorLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColorRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColorRight")]
		public void ResetInnerColorRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerColorTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerColorTop")]
		public void ResetInnerColorTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidth.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidth")]
		public void ResetInnerWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidthBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidthBottom")]
		public void ResetInnerWidthBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidthLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidthLeft")]
		public void ResetInnerWidthLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidthRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidthRight")]
		public void ResetInnerWidthRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property innerWidthTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInnerWidthTop")]
		public void ResetInnerWidthTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group innerColor.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="innerColorTop">Sets the value of the property #innerColorTop.</param>
		/// <param name="innerColorRight">Sets the value of the property #innerColorRight.</param>
		/// <param name="innerColorBottom">Sets the value of the property #innerColorBottom.</param>
		/// <param name="innerColorLeft">Sets the value of the property #innerColorLeft.</param>
		[JsMethod(Name = "setInnerColor")]
		public void SetInnerColor(object innerColorTop, object innerColorRight, object innerColorBottom, object innerColorLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerColorBottom.</para>
		/// </summary>
		/// <param name="value">New value for property innerColorBottom.</param>
		[JsMethod(Name = "setInnerColorBottom")]
		public void SetInnerColorBottom(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerColorLeft.</para>
		/// </summary>
		/// <param name="value">New value for property innerColorLeft.</param>
		[JsMethod(Name = "setInnerColorLeft")]
		public void SetInnerColorLeft(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerColorRight.</para>
		/// </summary>
		/// <param name="value">New value for property innerColorRight.</param>
		[JsMethod(Name = "setInnerColorRight")]
		public void SetInnerColorRight(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerColorTop.</para>
		/// </summary>
		/// <param name="value">New value for property innerColorTop.</param>
		[JsMethod(Name = "setInnerColorTop")]
		public void SetInnerColorTop(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group innerWidth.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="innerWidthTop">Sets the value of the property #innerWidthTop.</param>
		/// <param name="innerWidthRight">Sets the value of the property #innerWidthRight.</param>
		/// <param name="innerWidthBottom">Sets the value of the property #innerWidthBottom.</param>
		/// <param name="innerWidthLeft">Sets the value of the property #innerWidthLeft.</param>
		[JsMethod(Name = "setInnerWidth")]
		public void SetInnerWidth(object innerWidthTop, object innerWidthRight, object innerWidthBottom, object innerWidthLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerWidthBottom.</para>
		/// </summary>
		/// <param name="value">New value for property innerWidthBottom.</param>
		[JsMethod(Name = "setInnerWidthBottom")]
		public void SetInnerWidthBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerWidthLeft.</para>
		/// </summary>
		/// <param name="value">New value for property innerWidthLeft.</param>
		[JsMethod(Name = "setInnerWidthLeft")]
		public void SetInnerWidthLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerWidthRight.</para>
		/// </summary>
		/// <param name="value">New value for property innerWidthRight.</param>
		[JsMethod(Name = "setInnerWidthRight")]
		public void SetInnerWidthRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property innerWidthTop.</para>
		/// </summary>
		/// <param name="value">New value for property innerWidthTop.</param>
		[JsMethod(Name = "setInnerWidthTop")]
		public void SetInnerWidthTop(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorBottom.</para>
		/// </summary>
		[JsMethod(Name = "getColorBottom")]
		public string GetColorBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorLeft.</para>
		/// </summary>
		[JsMethod(Name = "getColorLeft")]
		public string GetColorLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorRight.</para>
		/// </summary>
		[JsMethod(Name = "getColorRight")]
		public string GetColorRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property colorTop.</para>
		/// </summary>
		[JsMethod(Name = "getColorTop")]
		public string GetColorTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property styleBottom.</para>
		/// </summary>
		[JsMethod(Name = "getStyleBottom")]
		public object GetStyleBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property styleLeft.</para>
		/// </summary>
		[JsMethod(Name = "getStyleLeft")]
		public object GetStyleLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property styleRight.</para>
		/// </summary>
		[JsMethod(Name = "getStyleRight")]
		public object GetStyleRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property styleTop.</para>
		/// </summary>
		[JsMethod(Name = "getStyleTop")]
		public object GetStyleTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property widthBottom.</para>
		/// </summary>
		[JsMethod(Name = "getWidthBottom")]
		public double GetWidthBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property widthLeft.</para>
		/// </summary>
		[JsMethod(Name = "getWidthLeft")]
		public double GetWidthLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property widthRight.</para>
		/// </summary>
		[JsMethod(Name = "getWidthRight")]
		public double GetWidthRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property widthTop.</para>
		/// </summary>
		[JsMethod(Name = "getWidthTop")]
		public double GetWidthTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorBottom.</param>
		[JsMethod(Name = "initColorBottom")]
		public void InitColorBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorLeft.</param>
		[JsMethod(Name = "initColorLeft")]
		public void InitColorLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorRight.</param>
		[JsMethod(Name = "initColorRight")]
		public void InitColorRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property colorTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property colorTop.</param>
		[JsMethod(Name = "initColorTop")]
		public void InitColorTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property styleBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property styleBottom.</param>
		[JsMethod(Name = "initStyleBottom")]
		public void InitStyleBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property styleLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property styleLeft.</param>
		[JsMethod(Name = "initStyleLeft")]
		public void InitStyleLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property styleRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property styleRight.</param>
		[JsMethod(Name = "initStyleRight")]
		public void InitStyleRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property styleTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property styleTop.</param>
		[JsMethod(Name = "initStyleTop")]
		public void InitStyleTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property widthBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property widthBottom.</param>
		[JsMethod(Name = "initWidthBottom")]
		public void InitWidthBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property widthLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property widthLeft.</param>
		[JsMethod(Name = "initWidthLeft")]
		public void InitWidthLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property widthRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property widthRight.</param>
		[JsMethod(Name = "initWidthRight")]
		public void InitWidthRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property widthTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property widthTop.</param>
		[JsMethod(Name = "initWidthTop")]
		public void InitWidthTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property bottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBottom")]
		public void ResetBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property color.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColor")]
		public void ResetColor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorBottom")]
		public void ResetColorBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorLeft")]
		public void ResetColorLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorRight")]
		public void ResetColorRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property colorTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColorTop")]
		public void ResetColorTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property left.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLeft")]
		public void ResetLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property right.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRight")]
		public void ResetRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property style.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyle")]
		public void ResetStyle() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property styleBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyleBottom")]
		public void ResetStyleBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property styleLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyleLeft")]
		public void ResetStyleLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property styleRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyleRight")]
		public void ResetStyleRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property styleTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStyleTop")]
		public void ResetStyleTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property top.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTop")]
		public void ResetTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property width.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidth")]
		public void ResetWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property widthBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidthBottom")]
		public void ResetWidthBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property widthLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidthLeft")]
		public void ResetWidthLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property widthRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidthRight")]
		public void ResetWidthRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property widthTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetWidthTop")]
		public void ResetWidthTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group bottom.</para>
		/// </summary>
		/// <param name="widthBottom">Sets the value of the property #widthBottom.</param>
		/// <param name="styleBottom">Sets the value of the property #styleBottom.</param>
		/// <param name="colorBottom">Sets the value of the property #colorBottom.</param>
		[JsMethod(Name = "setBottom")]
		public void SetBottom(object widthBottom, object styleBottom, object colorBottom) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group color.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="colorTop">Sets the value of the property #colorTop.</param>
		/// <param name="colorRight">Sets the value of the property #colorRight.</param>
		/// <param name="colorBottom">Sets the value of the property #colorBottom.</param>
		/// <param name="colorLeft">Sets the value of the property #colorLeft.</param>
		[JsMethod(Name = "setColor")]
		public void SetColor(object colorTop, object colorRight, object colorBottom, object colorLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorBottom.</para>
		/// </summary>
		/// <param name="value">New value for property colorBottom.</param>
		[JsMethod(Name = "setColorBottom")]
		public void SetColorBottom(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorLeft.</para>
		/// </summary>
		/// <param name="value">New value for property colorLeft.</param>
		[JsMethod(Name = "setColorLeft")]
		public void SetColorLeft(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorRight.</para>
		/// </summary>
		/// <param name="value">New value for property colorRight.</param>
		[JsMethod(Name = "setColorRight")]
		public void SetColorRight(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property colorTop.</para>
		/// </summary>
		/// <param name="value">New value for property colorTop.</param>
		[JsMethod(Name = "setColorTop")]
		public void SetColorTop(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group left.</para>
		/// </summary>
		/// <param name="widthLeft">Sets the value of the property #widthLeft.</param>
		/// <param name="styleLeft">Sets the value of the property #styleLeft.</param>
		/// <param name="colorLeft">Sets the value of the property #colorLeft.</param>
		[JsMethod(Name = "setLeft")]
		public void SetLeft(object widthLeft, object styleLeft, object colorLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group right.</para>
		/// </summary>
		/// <param name="widthRight">Sets the value of the property #widthRight.</param>
		/// <param name="styleRight">Sets the value of the property #styleRight.</param>
		/// <param name="colorRight">Sets the value of the property #colorRight.</param>
		[JsMethod(Name = "setRight")]
		public void SetRight(object widthRight, object styleRight, object colorRight) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group style.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="styleTop">Sets the value of the property #styleTop.</param>
		/// <param name="styleRight">Sets the value of the property #styleRight.</param>
		/// <param name="styleBottom">Sets the value of the property #styleBottom.</param>
		/// <param name="styleLeft">Sets the value of the property #styleLeft.</param>
		[JsMethod(Name = "setStyle")]
		public void SetStyle(object styleTop, object styleRight, object styleBottom, object styleLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property styleBottom.</para>
		/// </summary>
		/// <param name="value">New value for property styleBottom.</param>
		[JsMethod(Name = "setStyleBottom")]
		public void SetStyleBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property styleLeft.</para>
		/// </summary>
		/// <param name="value">New value for property styleLeft.</param>
		[JsMethod(Name = "setStyleLeft")]
		public void SetStyleLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property styleRight.</para>
		/// </summary>
		/// <param name="value">New value for property styleRight.</param>
		[JsMethod(Name = "setStyleRight")]
		public void SetStyleRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property styleTop.</para>
		/// </summary>
		/// <param name="value">New value for property styleTop.</param>
		[JsMethod(Name = "setStyleTop")]
		public void SetStyleTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group top.</para>
		/// </summary>
		/// <param name="widthTop">Sets the value of the property #widthTop.</param>
		/// <param name="styleTop">Sets the value of the property #styleTop.</param>
		/// <param name="colorTop">Sets the value of the property #colorTop.</param>
		[JsMethod(Name = "setTop")]
		public void SetTop(object widthTop, object styleTop, object colorTop) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group width.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="widthTop">Sets the value of the property #widthTop.</param>
		/// <param name="widthRight">Sets the value of the property #widthRight.</param>
		/// <param name="widthBottom">Sets the value of the property #widthBottom.</param>
		/// <param name="widthLeft">Sets the value of the property #widthLeft.</param>
		[JsMethod(Name = "setWidth")]
		public void SetWidth(object widthTop, object widthRight, object widthBottom, object widthLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property widthBottom.</para>
		/// </summary>
		/// <param name="value">New value for property widthBottom.</param>
		[JsMethod(Name = "setWidthBottom")]
		public void SetWidthBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property widthLeft.</para>
		/// </summary>
		/// <param name="value">New value for property widthLeft.</param>
		[JsMethod(Name = "setWidthLeft")]
		public void SetWidthLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property widthRight.</para>
		/// </summary>
		/// <param name="value">New value for property widthRight.</param>
		[JsMethod(Name = "setWidthRight")]
		public void SetWidthRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property widthTop.</para>
		/// </summary>
		/// <param name="value">New value for property widthTop.</param>
		[JsMethod(Name = "setWidthTop")]
		public void SetWidthTop(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property backgroundImage.</para>
		/// </summary>
		[JsMethod(Name = "getBackgroundImage")]
		public string GetBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property backgroundPositionX.</para>
		/// </summary>
		[JsMethod(Name = "getBackgroundPositionX")]
		public object GetBackgroundPositionX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property backgroundPositionY.</para>
		/// </summary>
		[JsMethod(Name = "getBackgroundPositionY")]
		public object GetBackgroundPositionY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property backgroundRepeat.</para>
		/// </summary>
		[JsMethod(Name = "getBackgroundRepeat")]
		public object GetBackgroundRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property backgroundImage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property backgroundImage.</param>
		[JsMethod(Name = "initBackgroundImage")]
		public void InitBackgroundImage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property backgroundPositionX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property backgroundPositionX.</param>
		[JsMethod(Name = "initBackgroundPositionX")]
		public void InitBackgroundPositionX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property backgroundPositionY
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property backgroundPositionY.</param>
		[JsMethod(Name = "initBackgroundPositionY")]
		public void InitBackgroundPositionY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property backgroundRepeat
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property backgroundRepeat.</param>
		[JsMethod(Name = "initBackgroundRepeat")]
		public void InitBackgroundRepeat(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backgroundImage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackgroundImage")]
		public void ResetBackgroundImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backgroundPosition.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackgroundPosition")]
		public void ResetBackgroundPosition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backgroundPositionX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackgroundPositionX")]
		public void ResetBackgroundPositionX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backgroundPositionY.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackgroundPositionY")]
		public void ResetBackgroundPositionY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property backgroundRepeat.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBackgroundRepeat")]
		public void ResetBackgroundRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property backgroundImage.</para>
		/// </summary>
		/// <param name="value">New value for property backgroundImage.</param>
		[JsMethod(Name = "setBackgroundImage")]
		public void SetBackgroundImage(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group backgroundPosition.</para>
		/// </summary>
		/// <param name="backgroundPositionY">Sets the value of the property #backgroundPositionY.</param>
		/// <param name="backgroundPositionX">Sets the value of the property #backgroundPositionX.</param>
		[JsMethod(Name = "setBackgroundPosition")]
		public void SetBackgroundPosition(object backgroundPositionY, object backgroundPositionX) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property backgroundPositionX.</para>
		/// </summary>
		/// <param name="value">New value for property backgroundPositionX.</param>
		[JsMethod(Name = "setBackgroundPositionX")]
		public void SetBackgroundPositionX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property backgroundPositionY.</para>
		/// </summary>
		/// <param name="value">New value for property backgroundPositionY.</param>
		[JsMethod(Name = "setBackgroundPositionY")]
		public void SetBackgroundPositionY(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property backgroundRepeat.</para>
		/// </summary>
		/// <param name="value">New value for property backgroundRepeat.</param>
		[JsMethod(Name = "setBackgroundRepeat")]
		public void SetBackgroundRepeat(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}