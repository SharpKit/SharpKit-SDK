// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.decoration
{
    /// <summary>
	/// <para>This class acts as abstract class for all decorators. It offers the
	/// properties for the insets handling. Every decorator has to define its own
	/// default insets by implementing the template method
	/// (http://en.wikipedia.org/wiki/Template_Method) _getDefaultInsets
	/// . Another template method called _isInitialized should return
	/// weather the decorator is initialized of not.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.decoration.Abstract", OmitOptionalParameters = true, Export = false)]
    public abstract partial class Abstract : qx.core.Object
    {
		#region Properties

		/// <summary>
		/// <para>Width of the bottom inset (keep this margin to the outer box)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "insetBottom", NativeField = true)]
		public double InsetBottom { get; set; }

		/// <summary>
		/// <para>Width of the left inset (keep this margin to the outer box)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "insetLeft", NativeField = true)]
		public double InsetLeft { get; set; }

		/// <summary>
		/// <para>Width of the right inset (keep this margin to the outer box)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "insetRight", NativeField = true)]
		public double InsetRight { get; set; }

		/// <summary>
		/// <para>Property group for insets</para>
		/// </summary>
		[JsProperty(Name = "insets", NativeField = true)]
		public object Insets { get; set; }

		/// <summary>
		/// <para>Width of the top inset (keep this margin to the outer box)</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "insetTop", NativeField = true)]
		public double InsetTop { get; set; }

		#endregion Properties

		#region Methods

		public Abstract() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property insetBottom.</para>
		/// </summary>
		[JsMethod(Name = "getInsetBottom")]
		public double GetInsetBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property insetLeft.</para>
		/// </summary>
		[JsMethod(Name = "getInsetLeft")]
		public double GetInsetLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property insetRight.</para>
		/// </summary>
		[JsMethod(Name = "getInsetRight")]
		public double GetInsetRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the amount of space, the decoration needs for its border on each
		/// side.</para>
		/// </summary>
		/// <returns>the desired insed a map with the keys top, right, bottom, left.</returns>
		[JsMethod(Name = "getInsets")]
		public object GetInsets() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property insetTop.</para>
		/// </summary>
		[JsMethod(Name = "getInsetTop")]
		public double GetInsetTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property insetBottom
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property insetBottom.</param>
		[JsMethod(Name = "initInsetBottom")]
		public void InitInsetBottom(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property insetLeft
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property insetLeft.</param>
		[JsMethod(Name = "initInsetLeft")]
		public void InitInsetLeft(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property insetRight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property insetRight.</param>
		[JsMethod(Name = "initInsetRight")]
		public void InitInsetRight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property insetTop
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property insetTop.</param>
		[JsMethod(Name = "initInsetTop")]
		public void InitInsetTop(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property insetBottom.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInsetBottom")]
		public void ResetInsetBottom() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property insetLeft.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInsetLeft")]
		public void ResetInsetLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property insetRight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInsetRight")]
		public void ResetInsetRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property insets.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInsets")]
		public void ResetInsets() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property insetTop.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInsetTop")]
		public void ResetInsetTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property insetBottom.</para>
		/// </summary>
		/// <param name="value">New value for property insetBottom.</param>
		[JsMethod(Name = "setInsetBottom")]
		public void SetInsetBottom(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property insetLeft.</para>
		/// </summary>
		/// <param name="value">New value for property insetLeft.</param>
		[JsMethod(Name = "setInsetLeft")]
		public void SetInsetLeft(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property insetRight.</para>
		/// </summary>
		/// <param name="value">New value for property insetRight.</param>
		[JsMethod(Name = "setInsetRight")]
		public void SetInsetRight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the values of the property group insets.</para>
		/// <para>This setter supports a shorthand mode compatible with the way margins and paddins are set in CSS.</para>
		/// </summary>
		/// <param name="insetTop">Sets the value of the property #insetTop.</param>
		/// <param name="insetRight">Sets the value of the property #insetRight.</param>
		/// <param name="insetBottom">Sets the value of the property #insetBottom.</param>
		/// <param name="insetLeft">Sets the value of the property #insetLeft.</param>
		[JsMethod(Name = "setInsets")]
		public void SetInsets(object insetTop, object insetRight, object insetBottom, object insetLeft) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property insetTop.</para>
		/// </summary>
		/// <param name="value">New value for property insetTop.</param>
		[JsMethod(Name = "setInsetTop")]
		public void SetInsetTop(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}