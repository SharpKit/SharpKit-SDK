// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.list.core
{
    /// <summary>
	/// <para>Objects which are used as delegates for the qx.ui.list.List may
	/// implement any of the methods described in this interface. The delegate does
	/// not need to implement all the methods of this interface. If a method is not
	/// implemented the qx.ui.list.List provides a default
	/// implementation.</para>
	/// <para>Note: This interface is meant to document the delegate but should not be
	/// listed in the implement key of a class unless all methods are
	/// actually implemented.</para>
	/// </summary>
	public interface IListDelegate
    {
		#region Methods

		/// <summary>
		/// <para>Sets up the binding for the given group item and index.</para>
		/// <para>For every property you want to bind, use
		/// <see cref="MWidgetController.BindProperty"/> like this:
		/// 
		/// controller.bindProperty(null, &#8220;value&#8221;, options, item, id);
		/// </para>
		/// </summary>
		/// <param name="controller">The currently used controller.</param>
		/// <param name="item">The created and used group item.</param>
		/// <param name="id">The id for the binding.</param>
		void BindGroupItem(MWidgetController controller, qx.ui.core.Widget item, double id);

		/// <summary>
		/// <para>Sets up the binding for the given item and index.</para>
		/// <para>For every property you want to bind, use
		/// <see cref="MWidgetController.BindProperty"/> like this:
		/// 
		/// controller.bindProperty(&#8220;path.in.the.model&#8221;, &#8220;label&#8221;, options, item, id);
		/// </para>
		/// </summary>
		/// <param name="controller">The currently used controller.</param>
		/// <param name="item">The created and used item.</param>
		/// <param name="id">The id for the binding.</param>
		void BindItem(MWidgetController controller, qx.ui.core.Widget item, double id);

		/// <summary>
		/// <para>Gives the user the opportunity to set individual styles and properties
		/// on the group widget cells created by the controller.</para>
		/// </summary>
		/// <param name="item">Group to modify.</param>
		void ConfigureGroupItem(qx.ui.core.Widget item);

		/// <summary>
		/// <para>Gives the user the opportunity to set individual styles and properties
		/// on the item widget cells created by the controller.</para>
		/// </summary>
		/// <param name="item">Item to modify.</param>
		void ConfigureItem(qx.ui.core.Widget item);

		/// <summary>
		/// <para>Creates a group cell which will be used for rendering. Be sure to
		/// implement the <see cref="BindGroupItem"/> function as well to get the needed
		/// properties bound.</para>
		/// </summary>
		/// <returns>A new created item cell.</returns>
		qx.ui.core.Widget CreateGroupItem();

		/// <summary>
		/// <para>Creates an item cell which will be used for rendering. Be sure to
		/// implement the <see cref="BindItem"/> function as well to get the needed
		/// properties bound.</para>
		/// </summary>
		/// <returns>A new created item cell.</returns>
		qx.ui.core.Widget CreateItem();

		/// <summary>
		/// <para>Gives the user the opportunity to filter the model. The filter
		/// method has to return true if the given data should be
		/// shown and false if the given data should be ignored.</para>
		/// </summary>
		/// <param name="data">The data to be checked.</param>
		/// <returns>true if the data passes the filter, false otherwise.</returns>
		bool Filter(object data);

		/// <summary>
		/// <para>Gives the user the opportunity to group the model. The group method
		/// should return unique identifier for the passed data.</para>
		/// <para>Note: When you returning null the passed data will added
		/// to the default group, which is ??? from the type
		/// String. But keep in mind that you can only use the default
		/// group feature when each other group identifier is also a String.
		/// Otherwise an exception occurs, because you can&#8217;t mix Object
		/// and String group identifiers.</para>
		/// </summary>
		/// <param name="data">The data to be checked.</param>
		/// <returns>The group identifier for the data.</returns>
		object Group(object data);

		/// <summary>
		/// <para>Gives the user the opportunity to reset properties or states.</para>
		/// </summary>
		/// <param name="item">Item to modify.</param>
		void OnPool(qx.ui.core.Widget item);

		/// <summary>
		/// <para>Gives the user the opportunity to sort the model. The sorting method
		/// should return a negative value if a < b, zero if a = b, or a positive
		/// value if a > b.</para>
		/// </summary>
		/// <param name="a">value to compare.</param>
		/// <param name="b">value to compare.</param>
		/// <returns>should return a negative value if a  b.</returns>
		double Sorter(object a, object b);

		#endregion Methods
    }
}