// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.celleditor
{
    /// <summary>
	/// <para>A cell editor factory which can dynamically exchange the cell editor
	/// based on information retrieved at runtime. This is useful when different
	/// rows in a column should have different cellEditors based on cell content
	/// or row meta data. A typical example would be a spreadsheet that has different
	/// kind of data in one column.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.celleditor.Dynamic", OmitOptionalParameters = true, Export = false)]
    public partial class Dynamic : qx.core.Object, qx.ui.table.ICellEditorFactory
    {
		#region Properties

		/// <summary>
		/// <para>Function that returns a cellEditorFactory instance which will be
		/// used for the row that is currently being edited. The function is
		/// defined like this:</para>
		/// <code>
		/// myTable.getTableColumnModel().setCellEditorFactory(function(cellInfo){
		/// // based on the cellInfo map or other information, return the
		/// // appropriate cellEditorFactory
		/// if (cellInfo.row == 5)
		/// return new qx.ui.table.celleditor.CheckBox;
		/// else
		/// return new qx.ui.table.celleditor.TextField;
		/// });
		/// </code>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "cellEditorFactoryFunction", NativeField = true)]
		public Action<object> CellEditorFactoryFunction { get; set; }

		#endregion Properties

		#region Methods

		public Dynamic() { throw new NotImplementedException(); }

		/// <param name="cellEditorFactoryFunction">the factory function #cellEditorFactoryFunction.</param>
		public Dynamic(Action<object> cellEditorFactoryFunction = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates a cell editor.</para>
		/// <para>The cellInfo map contains the following properties:
		/// <list type="bullet">
		/// <item>value (var): the cell&#8217;s value.</item>
		/// <item>row (int): the model index of the row the cell belongs to.</item>
		/// <item>col (int): the model index of the column the cell belongs to.</item>
		/// <item>xPos (int): the x position of the cell in the table pane.</item>
		/// <item>table (qx.ui.table.Table) reference to the table, the cell belongs to. </item>
		/// </list</para>
		/// </summary>
		/// <param name="cellInfo">A map containing the information about the cell to create.</param>
		/// <returns>the widget that should be used as cell editor.</returns>
		[JsMethod(Name = "createCellEditor")]
		public qx.ui.core.Widget CreateCellEditor(object cellInfo) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property cellEditorFactoryFunction.</para>
		/// </summary>
		[JsMethod(Name = "getCellEditorFactoryFunction")]
		public Action<object> GetCellEditorFactoryFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current value of a cell editor.</para>
		/// </summary>
		/// <param name="cellEditor">The cell editor formally created by #createCellEditor.</param>
		/// <returns>the current value from the editor.</returns>
		[JsMethod(Name = "getCellEditorValue")]
		public object GetCellEditorValue(qx.ui.core.Widget cellEditor) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property cellEditorFactoryFunction
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property cellEditorFactoryFunction.</param>
		[JsMethod(Name = "initCellEditorFactoryFunction")]
		public void InitCellEditorFactoryFunction(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property cellEditorFactoryFunction.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetCellEditorFactoryFunction")]
		public void ResetCellEditorFactoryFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property cellEditorFactoryFunction.</para>
		/// </summary>
		/// <param name="value">New value for property cellEditorFactoryFunction.</param>
		[JsMethod(Name = "setCellEditorFactoryFunction")]
		public void SetCellEditorFactoryFunction(Action<object> value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}