// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.locale;

namespace qx.ui.table.columnmodel
{
    /// <summary>
	/// <para>A table column model that automatically resizes columns based on a
	/// selected behavior.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.columnmodel.Resize", OmitOptionalParameters = true, Export = false)]
    public partial class Resize : qx.ui.table.columnmodel.Basic
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Behavior"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeBehavior;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The behavior to use.</para>
		/// <para>The provided behavior must extend <see cref="qx.ui.table.columnmodel.resizebehavior.Abstract"/> and
		/// implement the onAppear, onTableWidthChanged,
		/// onColumnWidthChanged and onVisibilityChangedmethods.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "behavior", NativeField = true)]
		public qx.ui.table.columnmodel.resizebehavior.Abstract Behavior { get; set; }

		#endregion Properties

		#region Methods

		public Resize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property behavior.</para>
		/// </summary>
		[JsMethod(Name = "getBehavior")]
		public qx.ui.table.columnmodel.resizebehavior.Abstract GetBehavior() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the table widget</para>
		/// </summary>
		/// <returns>the table widget</returns>
		[JsMethod(Name = "getTable")]
		public qx.ui.table.Table GetTable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initializes the column model.</para>
		/// </summary>
		/// <param name="numColumns">the number of columns the model should have.</param>
		/// <param name="table">The table which this model is used for. This allows us access to other aspects of the table, as the behavior sees fit.</param>
		[JsMethod(Name = "init")]
		public void Init(double numColumns, qx.ui.table.Table table) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property behavior
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property behavior.</param>
		[JsMethod(Name = "initBehavior")]
		public void InitBehavior(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property behavior.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetBehavior")]
		public void ResetBehavior() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property behavior.</para>
		/// </summary>
		/// <param name="value">New value for property behavior.</param>
		[JsMethod(Name = "setBehavior")]
		public void SetBehavior(qx.ui.table.columnmodel.resizebehavior.Abstract value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Mark the message for translation but return the original message.</para>
		/// </summary>
		/// <param name="messageId">the message ID</param>
		/// <returns>messageId</returns>
		[JsMethod(Name = "marktr")]
		public string Marktr(string messageId) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Translate a message
		/// Mark the message for translation.</para>
		/// </summary>
		/// <param name="messageId">message id (may contain format strings)</param>
		/// <param name="varargs">variable number of arguments applied to the format string</param>
		/// <returns>The translated message or localized string</returns>
		[JsMethod(Name = "tr")]
		public object Tr(string messageId, object varargs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Translate a message with translation hint
		/// Mark the messages for translation.</para>
		/// </summary>
		/// <param name="hint">hint for the translator of the message. Will be included in the .po file.</param>
		/// <param name="messageId">message id (may contain format strings)</param>
		/// <param name="varargs">variable number of arguments applied to the format string</param>
		/// <returns>The translated message or localized string</returns>
		[JsMethod(Name = "trc")]
		public object Trc(string hint, string messageId, object varargs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Translate a plural message
		/// Mark the messages for translation.</para>
		/// <para>Depending on the third argument the plural or the singular form is chosen.</para>
		/// </summary>
		/// <param name="singularMessageId">message id of the singular form (may contain format strings)</param>
		/// <param name="pluralMessageId">message id of the plural form (may contain format strings)</param>
		/// <param name="count">if greater than 1 the plural form otherwise the singular form is returned.</param>
		/// <param name="varargs">variable number of arguments applied to the format string</param>
		/// <returns>The translated message or localized string</returns>
		[JsMethod(Name = "trn")]
		public object Trn(string singularMessageId, string pluralMessageId, double count, object varargs) { throw new NotImplementedException(); }

		#endregion Methods
    }
}