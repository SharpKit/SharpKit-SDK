// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.columnmodel.resizebehavior
{
    /// <summary>
	/// <para>An abstract resize behavior.  All resize behaviors should extend this
	/// class.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.columnmodel.resizebehavior.Abstract", OmitOptionalParameters = true, Export = false)]
    public abstract partial class Abstract : qx.core.Object
    {
		#region Methods

		public Abstract() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when the table has first been rendered.</para>
		/// </summary>
		/// <param name="eventx">The onappear event object.</param>
		/// <param name="forceRefresh">Whether a refresh should be forced</param>
		[JsMethod(Name = "onAppear")]
		public void OnAppear(object eventx, bool forceRefresh = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when a column width is changed.</para>
		/// </summary>
		/// <param name="eventx">The widthChanged event object.  This event has data, obtained via event.getValue(), which is an object with three properties: the column which changed width (data.col), the old width (data.oldWidth) and the new width (data.newWidth).</param>
		[JsMethod(Name = "onColumnWidthChanged")]
		public void OnColumnWidthChanged(object eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when the table width changes due to either a window size change
		/// or a parent object changing size causing the table to change size.</para>
		/// </summary>
		/// <param name="eventx">The tableWidthChanged event object.</param>
		[JsMethod(Name = "onTableWidthChanged")]
		public void OnTableWidthChanged(object eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when the use of vertical scroll bar in the table changes, either
		/// from present to not present, or vice versa.</para>
		/// </summary>
		/// <param name="eventx">The verticalScrollBarChanged event object.  This event has data, obtained via event.getValue(), which is a boolean indicating whether a vertical scroll bar is now present.</param>
		[JsMethod(Name = "onVerticalScrollBarChanged")]
		public void OnVerticalScrollBarChanged(object eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when a column visibility is changed.</para>
		/// </summary>
		/// <param name="eventx">The visibilityChanged event object.  This event has data, obtained via event.getValue(), which is an object with two properties: the column which changed width (data.col) and the new visibility of the column (data.visible).</param>
		[JsMethod(Name = "onVisibilityChanged")]
		public void OnVisibilityChanged(object eventx) { throw new NotImplementedException(); }

		#endregion Methods
    }
}