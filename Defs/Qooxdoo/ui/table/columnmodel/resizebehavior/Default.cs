// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.columnmodel.resizebehavior
{
    /// <summary>
	/// <para>The default resize behavior.  Until a resize model is loaded, the default
	/// behavior is to:
	/// 
	/// <item>
	/// Upon the table initially appearing, and upon any window resize, divide
	/// the table space equally between the visible columns.
	/// </item>
	/// <item>
	/// When a column is increased in width, all columns to its right are
	/// pushed to the right with no change to their widths.  This may push some
	/// columns off the right edge of the table, causing a horizontal scroll
	/// bar to appear.
	/// </item>
	/// <item>
	/// When a column is decreased in width, if the total width of all columns
	/// is greater than the table width, no additional column width
	/// change is made.
	/// </item>
	/// <item>
	/// When a column is decreased in width, if the total width of all columns
	/// is less than the table width, the visible column
	/// immediately to the right of the column which decreased in width has its
	/// width increased to fill the remaining space.
	/// </item>
	/// </para>
	/// <para>A resize model may be loaded to provide more guidance on how to adjust
	/// column width upon each of the events: initial appear, window resize, and
	/// column resize. *** TO BE FILLED IN ***</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.columnmodel.resizebehavior.Default", OmitOptionalParameters = true, Export = false)]
    public partial class Default : qx.ui.table.columnmodel.resizebehavior.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>Whether to reinitialize default widths on each appear event.
		/// Typically, one would want to initialize the default widths only upon
		/// the first appearance of the table, but the original behavior was to
		/// reinitialize it even if the table is hidden and then reshown
		/// (e.g. it&#8217;s in a pageview and the page is switched and then switched
		/// back).</para>
		/// </summary>
		[JsProperty(Name = "initializeWidthsOnEveryAppear", NativeField = true)]
		public bool InitializeWidthsOnEveryAppear { get; set; }

		/// <summary>
		/// <para>A function to instantiate a resize behavior column data object.</para>
		/// </summary>
		[JsProperty(Name = "newResizeBehaviorColumnData", NativeField = true)]
		public Action<object> NewResizeBehaviorColumnData { get; set; }

		/// <summary>
		/// <para>The table column model in use.  Of particular interest is the method
		/// getTable which is a reference to the table widget.  This allows
		/// access to any other features of the table, for use in calculating widths
		/// of columns.</para>
		/// </summary>
		[JsProperty(Name = "tableColumnModel", NativeField = true)]
		public qx.ui.table.columnmodel.Resize TableColumnModel { get; set; }

		#endregion Properties

		#region Methods

		public Default() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property initializeWidthsOnEveryAppear.</para>
		/// </summary>
		[JsMethod(Name = "getInitializeWidthsOnEveryAppear")]
		public bool GetInitializeWidthsOnEveryAppear() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method is required by the box layout. If returns an array of items
		/// to relayout.</para>
		/// </summary>
		/// <returns>The list of column data object to layout.</returns>
		[JsMethod(Name = "getLayoutChildren")]
		public qx.ui.core.ColumnData GetLayoutChildren() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newResizeBehaviorColumnData.</para>
		/// </summary>
		[JsMethod(Name = "getNewResizeBehaviorColumnData")]
		public Action<object> GetNewResizeBehaviorColumnData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property tableColumnModel.</para>
		/// </summary>
		[JsMethod(Name = "getTableColumnModel")]
		public qx.ui.table.columnmodel.Resize GetTableColumnModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property initializeWidthsOnEveryAppear
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property initializeWidthsOnEveryAppear.</param>
		[JsMethod(Name = "initInitializeWidthsOnEveryAppear")]
		public void InitInitializeWidthsOnEveryAppear(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newResizeBehaviorColumnData
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newResizeBehaviorColumnData.</param>
		[JsMethod(Name = "initNewResizeBehaviorColumnData")]
		public void InitNewResizeBehaviorColumnData(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property tableColumnModel
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property tableColumnModel.</param>
		[JsMethod(Name = "initTableColumnModel")]
		public void InitTableColumnModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property initializeWidthsOnEveryAppear equals true.</para>
		/// </summary>
		[JsMethod(Name = "isInitializeWidthsOnEveryAppear")]
		public void IsInitializeWidthsOnEveryAppear() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when the table has first been rendered.</para>
		/// </summary>
		/// <param name="eventx">The onappear event object.</param>
		/// <param name="forceRefresh">Whether a refresh should be forced</param>
		[JsMethod(Name = "onAppear")]
		public void OnAppear(object eventx, bool forceRefresh = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when a column width is changed.</para>
		/// </summary>
		/// <param name="eventx">The widthChanged event object.  This event has data, obtained via event.getValue(), which is an object with three properties: the column which changed width (data.col), the old width (data.oldWidth) and the new width (data.newWidth).</param>
		[JsMethod(Name = "onColumnWidthChanged")]
		public void OnColumnWidthChanged(object eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when the table width changes due to either a window size change
		/// or a parent object changing size causing the table to change size.</para>
		/// </summary>
		/// <param name="eventx">The tableWidthChanged event object.</param>
		[JsMethod(Name = "onTableWidthChanged")]
		public void OnTableWidthChanged(object eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when the use of vertical scroll bar in the table changes, either
		/// from present to not present, or vice versa.</para>
		/// </summary>
		/// <param name="eventx">The verticalScrollBarChanged event object.  This event has data, obtained via event.getValue(), which is a boolean indicating whether a vertical scroll bar is now present.</param>
		[JsMethod(Name = "onVerticalScrollBarChanged")]
		public void OnVerticalScrollBarChanged(object eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Called when a column visibility is changed.</para>
		/// </summary>
		/// <param name="eventx">The visibilityChanged event object.  This event has data, obtained via event.getValue(), which is an object with two properties: the column which changed width (data.col) and the new visibility of the column (data.visible).</param>
		[JsMethod(Name = "onVisibilityChanged")]
		public void OnVisibilityChanged(object eventx) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property initializeWidthsOnEveryAppear.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInitializeWidthsOnEveryAppear")]
		public void ResetInitializeWidthsOnEveryAppear() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newResizeBehaviorColumnData.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewResizeBehaviorColumnData")]
		public void ResetNewResizeBehaviorColumnData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property tableColumnModel.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTableColumnModel")]
		public void ResetTableColumnModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set any or all of the width, minimum width, and maximum width of a
		/// column in a single call.</para>
		/// </summary>
		/// <param name="col">The column whose attributes are to be changed</param>
		/// <param name="map">A map containing any or all of the property names &#8220;width&#8221;, &#8220;minWidth&#8221;, and &#8220;maxWidth&#8221;.  The property values are as described for #setWidth, #setMinWidth and #setMaxWidth respectively.</param>
		[JsMethod(Name = "set")]
		public void Set(double col, object map) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property initializeWidthsOnEveryAppear.</para>
		/// </summary>
		/// <param name="value">New value for property initializeWidthsOnEveryAppear.</param>
		[JsMethod(Name = "setInitializeWidthsOnEveryAppear")]
		public void SetInitializeWidthsOnEveryAppear(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the maximum width of a column.</para>
		/// </summary>
		/// <param name="col">The column whose maximum width is to be set</param>
		/// <param name="width">The maximum width of the specified column.</param>
		[JsMethod(Name = "setMaxWidth")]
		public void SetMaxWidth(double col, double width) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the minimum width of a column.</para>
		/// </summary>
		/// <param name="col">The column whose minimum width is to be set</param>
		/// <param name="width">The minimum width of the specified column.</param>
		[JsMethod(Name = "setMinWidth")]
		public void SetMinWidth(double col, double width) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newResizeBehaviorColumnData.</para>
		/// </summary>
		/// <param name="value">New value for property newResizeBehaviorColumnData.</param>
		[JsMethod(Name = "setNewResizeBehaviorColumnData")]
		public void SetNewResizeBehaviorColumnData(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property tableColumnModel.</para>
		/// </summary>
		/// <param name="value">New value for property tableColumnModel.</param>
		[JsMethod(Name = "setTableColumnModel")]
		public void SetTableColumnModel(qx.ui.table.columnmodel.Resize value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the width of a column.</para>
		/// </summary>
		/// <param name="col">The column whose width is to be set</param>
		/// <param name="width">The width of the specified column.  The width may be specified as integer number of pixels (e.g. 100), a string representing percentage of the inner width of the Table (e.g. &#8220;25%&#8221;), or a string representing a flex width (e.g. &#8220;1*&#8221;).</param>
		/// <param name="flex">Optional flex value of the column</param>
		[JsMethod(Name = "setWidth")]
		public void SetWidth(double col, object width, double flex = 0) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property initializeWidthsOnEveryAppear.</para>
		/// </summary>
		[JsMethod(Name = "toggleInitializeWidthsOnEveryAppear")]
		public void ToggleInitializeWidthsOnEveryAppear() { throw new NotImplementedException(); }

		#endregion Methods
    }
}