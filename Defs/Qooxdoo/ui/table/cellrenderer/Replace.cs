// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.cellrenderer
{
    /// <summary>
	/// <para>The cell will use, if given, the
	/// replaceMap property and/or the replaceFunction to look up labels for a
	/// specific cell value. if the replaceMap, which does not need to be used but
	/// takes precedence if given, has no entry for a specific value, you can implement
	/// a fallback lookup in the replacementFunction, or use the replacementFunction exclusively.</para>
	/// <para>In editable cells, you need to make sure that the method returning the data
	/// to the data storage (for example, a database backend) translates the replaced
	/// cell value (the label) back into the corresponding value. Thus, both map and
	/// function MUST also take care of the reverse translation of labels into
	/// values. Example: if you have a field that should display &#8220;Active&#8221; on a &#8220;1&#8221;
	/// value and &#8220;Inactive&#8221; on a &#8220;0&#8221; value, you must use the following map:</para>
	/// <code>
	/// {
	/// 0 : "Inactive",
	/// 1 : "Active",
	/// "Inactive" : 0,
	/// "Active" : 1
	/// }
	/// </code>
	/// <para>You can use the addReversedReplaceMap() method to do this for you:</para>
	/// <code>
	/// var propertyCellRenderer = new qx.ui.table.cellrenderer.Replace;
	/// propertyCellRenderer.setReplaceMap({
	/// 1 : "Active",
	/// 0 : "Inactive",
	/// 2  : "Waiting",
	/// 'admin' : "System Administrator",
	/// 'manager' : "User Manager",
	/// 'user' : "Website User"
	/// });
	/// propertyCellRenderer.addReversedReplaceMap();
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.cellrenderer.Replace", OmitOptionalParameters = true, Export = false)]
    public partial class Replace : qx.ui.table.cellrenderer.Default
    {
		#region Properties

		/// <summary>
		/// <para>function that provides the label for a specific value</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "replaceFunction", NativeField = true)]
		public Action<object> ReplaceFunction { get; set; }

		/// <summary>
		/// <para>a hashmap which is used to replace values by labels</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "replaceMap", NativeField = true)]
		public object ReplaceMap { get; set; }

		#endregion Properties

		#region Methods

		public Replace() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>adds a reversed replaceMap to itself to translate labels back to the original values</para>
		/// </summary>
		/// <returns>true</returns>
		[JsMethod(Name = "addReversedReplaceMap")]
		public bool AddReversedReplaceMap() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property replaceFunction.</para>
		/// </summary>
		[JsMethod(Name = "getReplaceFunction")]
		public Action<object> GetReplaceFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property replaceMap.</para>
		/// </summary>
		[JsMethod(Name = "getReplaceMap")]
		public object GetReplaceMap() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property replaceFunction
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property replaceFunction.</param>
		[JsMethod(Name = "initReplaceFunction")]
		public void InitReplaceFunction(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property replaceMap
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property replaceMap.</param>
		[JsMethod(Name = "initReplaceMap")]
		public void InitReplaceMap(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property replaceFunction.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetReplaceFunction")]
		public void ResetReplaceFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property replaceMap.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetReplaceMap")]
		public void ResetReplaceMap() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property replaceFunction.</para>
		/// </summary>
		/// <param name="value">New value for property replaceFunction.</param>
		[JsMethod(Name = "setReplaceFunction")]
		public void SetReplaceFunction(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property replaceMap.</para>
		/// </summary>
		/// <param name="value">New value for property replaceMap.</param>
		[JsMethod(Name = "setReplaceMap")]
		public void SetReplaceMap(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}