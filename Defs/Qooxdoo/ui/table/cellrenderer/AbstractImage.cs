// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.cellrenderer
{
    /// <summary>
	/// <para>A template class for cell renderer, which display images. Concrete
	/// implementations must implement the method <see cref="#_identifyImage"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.cellrenderer.AbstractImage", OmitOptionalParameters = true, Export = false)]
    public abstract partial class AbstractImage : qx.ui.table.cellrenderer.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>Whether to repeat or scale the image.</para>
		/// </summary>
		[JsProperty(Name = "repeat", NativeField = true)]
		public object Repeat { get; set; }

		#endregion Properties

		#region Methods

		public AbstractImage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates the HTML for a data cell.</para>
		/// <para>The cellInfo map contains the following properties:
		/// <list type="bullet">
		/// <item>value (var): the cell&#8217;s value.</item>
		/// <item>rowData (var): contains the row data for the row, the cell belongs to.
		/// The kind of this object depends on the table model, see
		/// <see cref="qx.ui.table.ITableModel.GetRowData"/></item>
		/// <item>row (int): the model index of the row the cell belongs to.</item>
		/// <item>col (int): the model index of the column the cell belongs to.</item>
		/// <item>table (qx.ui.table.Table): the table the cell belongs to.</item>
		/// <item>xPos (int): the x position of the cell in the table pane.</item>
		/// <item>selected (boolean): whether the cell is selected.</item>
		/// <item>focusedRow (boolean): whether the cell is in the same row as the
		/// focused cell.</item>
		/// <item>editable (boolean): whether the cell is editable.</item>
		/// <item>style (string): The CSS styles that should be applied to the outer HTML
		/// element.</item>
		/// <item>styleLeft (string): The left position of the cell.</item>
		/// <item>styleWidth (string): The cell&#8217;s width (pixel).</item>
		/// <item>styleHeight (string): The cell&#8217;s height (pixel).</item>
		/// </list></para>
		/// </summary>
		/// <param name="cellInfo">A map containing the information about the cell to create.</param>
		/// <param name="htmlArr">Target string container. The HTML of the data cell should be appended to this array.</param>
		/// <returns>A return value of true specifies that no additional cells in the row shall be rendered. This may be used, for example, for separator rows or for other special rendering purposes. Traditional cell renderers had no defined return value, so returned nothing (undefined). If this method returns either false or nothing, then rendering continues with the next cell in the row, which the normal mode of operation.</returns>
		[JsMethod(Name = "createDataCellHtml")]
		public object CreateDataCellHtml(object cellInfo, string htmlArr) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property repeat.</para>
		/// </summary>
		[JsMethod(Name = "getRepeat")]
		public object GetRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property repeat
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property repeat.</param>
		[JsMethod(Name = "initRepeat")]
		public void InitRepeat(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property repeat.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRepeat")]
		public void ResetRepeat() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property repeat.</para>
		/// </summary>
		/// <param name="value">New value for property repeat.</param>
		[JsMethod(Name = "setRepeat")]
		public void SetRepeat(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}