// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.model
{
    /// <summary>
	/// <para>A filtered table model to provide support for hiding and filtering table
	/// rows. Any rows that match any applied filters will be hidden.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.model.Filtered", OmitOptionalParameters = true, Export = false)]
    public partial class Filtered : qx.ui.table.model.Simple
    {
		#region Methods

		public Filtered() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The addBetweenFilter method is used to add a between filter to the
		/// table model.</para>
		/// </summary>
		/// <param name="filter">The type of filter. Accepted strings are &#8220;between&#8221; and &#8221;!between&#8221;.</param>
		/// <param name="value1">The first value to compare against.</param>
		/// <param name="value2">The second value to compare against.</param>
		/// <param name="target">The text value of the column to compare against.</param>
		[JsMethod(Name = "addBetweenFilter")]
		public void AddBetweenFilter(string filter, double value1, double value2, string target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The addNotRegex method is used to add a regular expression filter to the
		/// table model and filter cells that do not match.</para>
		/// </summary>
		/// <param name="regex">The regular expression to match against.</param>
		/// <param name="target">The text value of the column to compare against.</param>
		/// <param name="ignorecase">If true, the regular expression will ignore case.</param>
		[JsMethod(Name = "addNotRegex")]
		public void AddNotRegex(string regex, string target, bool ignorecase) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The addNumericFilter method is used to add a basic numeric filter to
		/// the table model.</para>
		/// </summary>
		/// <param name="filter">The type of filter. Accepted strings are: &#8221;==&#8221;, &#8221;!=&#8221;, &#8221;>&#8221;, &#8221;=&#8221;, and &#8221;</param>
		/// <param name="value1">The value to compare against.</param>
		/// <param name="target">The text value of the column to compare against.</param>
		[JsMethod(Name = "addNumericFilter")]
		public void AddNumericFilter(string filter, double value1, string target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The addRegex method is used to add a regular expression filter to the
		/// table model.</para>
		/// </summary>
		/// <param name="regex">The regular expression to match against.</param>
		/// <param name="target">The text value of the column to compare against.</param>
		/// <param name="ignorecase">If true, the regular expression will ignore case.</param>
		[JsMethod(Name = "addRegex")]
		public void AddRegex(string regex, string target, bool ignorecase) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The applyFilters method is called to apply filters to the table model.</para>
		/// </summary>
		[JsMethod(Name = "applyFilters")]
		public void ApplyFilters() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hides a specified number of rows.</para>
		/// </summary>
		/// <param name="rowNum">Index of the first row to be hidden in the table.</param>
		/// <param name="numOfRows">The number of rows to be hidden sequentially after rowNum.</param>
		/// <param name="dispatchEvent">Whether a model change event should be fired.</param>
		[JsMethod(Name = "hideRows")]
		public void HideRows(double rowNum, double numOfRows, bool dispatchEvent = true) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the table to the original state with all rows shown and clears
		/// all filters.</para>
		/// </summary>
		[JsMethod(Name = "resetHiddenRows")]
		public void ResetHiddenRows() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the whole data in a bulk.</para>
		/// </summary>
		/// <param name="rowArr">An array containing an array for each row. Each row-array contains the values in that row in the order of the columns in this model.</param>
		/// <param name="clearSorting">Whether to clear the sort state.</param>
		[JsMethod(Name = "setData")]
		public void SetData(object rowArr, bool clearSorting = true) { throw new NotImplementedException(); }

		#endregion Methods
    }
}