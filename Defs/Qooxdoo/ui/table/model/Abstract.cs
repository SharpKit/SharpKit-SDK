// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.model
{
    /// <summary>
	/// <para>An abstract table model that performs the column handling, so subclasses only
	/// need to care for row handling.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.model.Abstract", OmitOptionalParameters = true, Export = false)]
    public abstract partial class Abstract : qx.core.Object, qx.ui.table.ITableModel
    {
		#region Events

		/// <summary>
		/// <para>Fired when the table data changed (the stuff shown in the table body).
		/// The data property of the event may be null or a map having the following attributes:
		/// <list type="bullet">
		/// <item>firstRow: The index of the first row that has changed.</item>
		/// <item>lastRow: The index of the last row that has changed.</item>
		/// <item>firstColumn: The model index of the first column that has changed.</item>
		/// <item>lastColumn: The model index of the last column that has changed.</item>
		/// </list></para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnDataChanged;

		/// <summary>
		/// <para>Fired when the meta data changed (the stuff shown in the table header).</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnMetaDataChanged;

		/// <summary>
		/// <para>Fired after the table is sorted (but before the metaDataChanged event)</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnSorted;

		#endregion Events

		#region Methods

		public Abstract() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the number of columns in the model.</para>
		/// </summary>
		/// <returns>the number of columns.</returns>
		[JsMethod(Name = "getColumnCount")]
		public double GetColumnCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the ID of column. The ID may be used to identify columns
		/// independent from their index in the model. E.g. for being aware of added
		/// columns when saving the width of a column.</para>
		/// </summary>
		/// <param name="columnIndex">the index of the column.</param>
		/// <returns>the ID of the column.</returns>
		[JsMethod(Name = "getColumnId")]
		public string GetColumnId(double columnIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the index of a column.</para>
		/// </summary>
		/// <param name="columnId">the ID of the column.</param>
		/// <returns>the index of the column.</returns>
		[JsMethod(Name = "getColumnIndexById")]
		public double GetColumnIndexById(string columnId) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the name of a column. This name will be shown to the user in the
		/// table header.</para>
		/// </summary>
		/// <param name="columnIndex">the index of the column.</param>
		/// <returns>the name of the column.</returns>
		[JsMethod(Name = "getColumnName")]
		public string GetColumnName(double columnIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the number of rows in the model.</para>
		/// </summary>
		/// <returns>the number of rows.</returns>
		[JsMethod(Name = "getRowCount")]
		public double GetRowCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the data of one row. This function may be overridden by models which hold
		/// all data of a row in one object. By using this function, clients have a way of
		/// quickly retrieving the entire row data.</para>
		/// Important:Models which do not have their row data accessible in one object
		/// may return null.
		/// </summary>
		/// <param name="rowIndex">the model index of the row.</param>
		/// <returns>the row data as an object or null if the model does not support row data objects. The details on the object returned are determined by the model implementation only.</returns>
		[JsMethod(Name = "getRowData")]
		public object GetRowData(double rowIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the column index the model is sorted by. If the model is not sorted
		/// -1 is returned.</para>
		/// </summary>
		/// <returns>the column index the model is sorted by.</returns>
		[JsMethod(Name = "getSortColumnIndex")]
		public double GetSortColumnIndex() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a cell value by column index.</para>
		/// </summary>
		/// <param name="columnIndex">the index of the column.</param>
		/// <param name="rowIndex">the index of the row.</param>
		/// <returns>The value of the cell.</returns>
		[JsMethod(Name = "getValue")]
		public object GetValue(double columnIndex, double rowIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a cell value by column ID.</para>
		/// <para>Whenever you have the choice, use <see cref="GetValue()"/> instead,
		/// because this should be faster.</para>
		/// </summary>
		/// <param name="columnId">the ID of the column.</param>
		/// <param name="rowIndex">the index of the row.</param>
		/// <returns>the value of the cell.</returns>
		[JsMethod(Name = "getValueById")]
		public object GetValueById(string columnId, double rowIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initialize the table model  table interaction. The table model is
		/// passed to the table constructor, but the table model doesn&#8217;t otherwise
		/// know anything about the table nor can it operate on table
		/// properties. This function provides the capability for the table model
		/// to specify characteristics of the table. It is called when the table
		/// model is applied to the table.</para>
		/// </summary>
		/// <param name="table">The table to which this model is attached</param>
		[JsMethod(Name = "init")]
		public void Init(qx.ui.table.Table table) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether a column is editable.</para>
		/// </summary>
		/// <param name="columnIndex">the column to check.</param>
		/// <returns>whether the column is editable.</returns>
		[JsMethod(Name = "isColumnEditable")]
		public bool IsColumnEditable(double columnIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether a column is sortable.</para>
		/// </summary>
		/// <param name="columnIndex">the column to check.</param>
		/// <returns>whether the column is sortable.</returns>
		[JsMethod(Name = "isColumnSortable")]
		public bool IsColumnSortable(double columnIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether the model is sorted ascending.</para>
		/// </summary>
		/// <returns>whether the model is sorted ascending.</returns>
		[JsMethod(Name = "isSortAscending")]
		public bool IsSortAscending() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Prefetches some rows. This is a hint to the model that the specified rows
		/// will be read soon.</para>
		/// </summary>
		/// <param name="firstRowIndex">the index of first row.</param>
		/// <param name="lastRowIndex">the index of last row.</param>
		[JsMethod(Name = "prefetchRows")]
		public void PrefetchRows(double firstRowIndex, double lastRowIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the column IDs. These IDs may be used internally to identify a
		/// column.</para>
		/// <para>Note: This will clear previously set column names.</para>
		/// </summary>
		/// <param name="columnIdArr">the IDs of the columns.</param>
		[JsMethod(Name = "setColumnIds")]
		public void SetColumnIds(string columnIdArr) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the column names. These names will be shown to the user.</para>
		/// <para>Note: The column IDs have to be defined before.</para>
		/// </summary>
		/// <param name="columnNameMap">a map containing the column IDs as keys and the column name as values.</param>
		[JsMethod(Name = "setColumnNamesById")]
		public void SetColumnNamesById(object columnNameMap) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the column names. These names will be shown to the user.</para>
		/// <para>Note: The column IDs have to be defined before.</para>
		/// </summary>
		/// <param name="columnNameArr">the names of the columns.</param>
		[JsMethod(Name = "setColumnNamesByIndex")]
		public void SetColumnNamesByIndex(string columnNameArr) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the column names (and optionally IDs)</para>
		/// <para>Note: You can not change the number of columns this way.  The number
		/// of columns is highly intertwined in the entire table operation,
		/// and dynamically changing it would require as much work as just
		/// recreating your table.  If you must change the number of columns
		/// in a table then you should remove the table and add a new one.</para>
		/// </summary>
		/// <param name="columnNameArr">The column names. These names will be shown to the user.</param>
		/// <param name="columnIdArr">The column IDs. These IDs may be used internally to identify a column. If null, the column names are used as IDs unless ID values have already been set. If ID values have already been set, they will continue to be used if no ID values are explicitly provided here.</param>
		[JsMethod(Name = "setColumns")]
		public void SetColumns(string columnNameArr, string columnIdArr = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets a cell value by column index.</para>
		/// </summary>
		/// <param name="columnIndex">The index of the column.</param>
		/// <param name="rowIndex">the index of the row.</param>
		/// <param name="value">The new value.</param>
		[JsMethod(Name = "setValue")]
		public void SetValue(double columnIndex, double rowIndex, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets a cell value by column ID.</para>
		/// <para>Whenever you have the choice, use <see cref="SetValue()"/> instead,
		/// because this should be faster.</para>
		/// </summary>
		/// <param name="columnId">The ID of the column.</param>
		/// <param name="rowIndex">The index of the row.</param>
		/// <param name="value">The new value.</param>
		[JsMethod(Name = "setValueById")]
		public void SetValueById(string columnId, double rowIndex, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sorts the model by a column.</para>
		/// </summary>
		/// <param name="columnIndex">the column to sort by.</param>
		/// <param name="ascending">whether to sort ascending.</param>
		[JsMethod(Name = "sortByColumn")]
		public void SortByColumn(double columnIndex, bool ascending) { throw new NotImplementedException(); }

		#endregion Methods
    }
}