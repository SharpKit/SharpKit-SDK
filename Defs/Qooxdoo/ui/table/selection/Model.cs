// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.selection
{
    /// <summary>
	/// <para>A selection model.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.selection.Model", OmitOptionalParameters = true, Export = false)]
    public partial class Model : qx.core.Object
    {
		#region Events

		/// <summary>
		/// <para>Fired when the selection has changed.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnChangeSelection;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Set the selection mode. Valid values are <see cref="#NO_SELECTION"/>,
		/// <see cref="#SINGLE_SELECTION"/>, <see cref="#SINGLE_INTERVAL_SELECTION"/>,
		/// <see cref="#MULTIPLE_INTERVAL_SELECTION"/> and
		/// <see cref="#MULTIPLE_INTERVAL_SELECTION_TOGGLE"/>.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: 1,2,3,4,5
		/// </remarks>
		[JsProperty(Name = "selectionMode", NativeField = true)]
		public object SelectionMode { get; set; }

		#endregion Properties

		#region Methods

		public Model() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a selection interval to the current selection.</para>
		/// </summary>
		/// <param name="fromIndex">the first index of the selection (including).</param>
		/// <param name="toIndex">the last index of the selection (including).</param>
		[JsMethod(Name = "addSelectionInterval")]
		public void AddSelectionInterval(double fromIndex, double toIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the first argument of the last call to <see cref="SetSelectionInterval()"/>,
		/// <see cref="AddSelectionInterval()"/> or <see cref="RemoveSelectionInterval()"/>.</para>
		/// </summary>
		/// <returns>the anchor selection index.</returns>
		[JsMethod(Name = "getAnchorSelectionIndex")]
		public double GetAnchorSelectionIndex() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the second argument of the last call to <see cref="SetSelectionInterval()"/>,
		/// <see cref="AddSelectionInterval()"/> or <see cref="RemoveSelectionInterval()"/>.</para>
		/// </summary>
		/// <returns>the lead selection index.</returns>
		[JsMethod(Name = "getLeadSelectionIndex")]
		public double GetLeadSelectionIndex() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the number of selected items.</para>
		/// </summary>
		/// <returns>the number of selected items.</returns>
		[JsMethod(Name = "getSelectedCount")]
		public double GetSelectedCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the selected ranges as an array. Each array element has a
		/// minIndex and a maxIndex property.</para>
		/// </summary>
		/// <returns>the selected ranges.</returns>
		[JsMethod(Name = "getSelectedRanges")]
		public object GetSelectedRanges() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property selectionMode.</para>
		/// </summary>
		[JsMethod(Name = "getSelectionMode")]
		public object GetSelectionMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether batch mode is active. See setter for a description of batch mode.</para>
		/// </summary>
		/// <returns>true if batch mode is active, false otherwise</returns>
		[JsMethod(Name = "hasBatchMode")]
		public bool HasBatchMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property selectionMode
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property selectionMode.</param>
		[JsMethod(Name = "initSelectionMode")]
		public void InitSelectionMode(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether an index is selected.</para>
		/// </summary>
		/// <param name="index">the index to check.</param>
		/// <returns>whether the index is selected.</returns>
		[JsMethod(Name = "isSelectedIndex")]
		public bool IsSelectedIndex(double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether the selection is empty.</para>
		/// </summary>
		/// <returns>whether the selection is empty.</returns>
		[JsMethod(Name = "isSelectionEmpty")]
		public bool IsSelectionEmpty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls an iterator function for each selected index.</para>
		/// <para>Usage Example:</para>
		/// <code>
		/// var selectedRowData = [];
		/// mySelectionModel.iterateSelection(function(index) {
		/// selectedRowData.push(myTableModel.getRowData(index));
		/// });
		/// </code>
		/// </summary>
		/// <param name="iterator">the function to call for each selected index. Gets the current index as parameter.</param>
		/// <param name="objectx">the object to use when calling the handler. (this object will be available via &#8220;this&#8221; in the iterator)</param>
		[JsMethod(Name = "iterateSelection")]
		public void IterateSelection(Action<object> iterator, object objectx = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes an interval from the current selection.</para>
		/// </summary>
		/// <param name="fromIndex">the first index of the interval (including).</param>
		/// <param name="toIndex">the last index of the interval (including).</param>
		[JsMethod(Name = "removeSelectionInterval")]
		public void RemoveSelectionInterval(double fromIndex, double toIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets (clears) the selection.</para>
		/// </summary>
		[JsMethod(Name = "resetSelection")]
		public void ResetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property selectionMode.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSelectionMode")]
		public void ResetSelectionMode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Activates / Deactivates batch mode. In batch mode, no change events will be thrown but
		/// will be collected instead. When batch mode is turned off again and any events have
		/// been collected, one event is thrown to inform the listeners.</para>
		/// <para>This method supports nested calling, i. e. batch mode can be turned more than once.
		/// In this case, batch mode will not end until it has been turned off once for each
		/// turning on.</para>
		/// </summary>
		/// <param name="batchMode">true to activate batch mode, false to deactivate</param>
		/// <returns>true if batch mode is active, false otherwise</returns>
		[JsMethod(Name = "setBatchMode")]
		public bool SetBatchMode(bool batchMode) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the selected interval. This will clear the former selection.</para>
		/// </summary>
		/// <param name="fromIndex">the first index of the selection (including).</param>
		/// <param name="toIndex">the last index of the selection (including).</param>
		[JsMethod(Name = "setSelectionInterval")]
		public void SetSelectionInterval(double fromIndex, double toIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property selectionMode.</para>
		/// </summary>
		/// <param name="value">New value for property selectionMode.</param>
		[JsMethod(Name = "setSelectionMode")]
		public void SetSelectionMode(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}