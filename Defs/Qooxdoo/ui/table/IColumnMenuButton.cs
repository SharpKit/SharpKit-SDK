// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table
{
    /// <summary>
	/// <para>Interface for creating the column visibility menu</para>
	/// </summary>
	public interface IColumnMenuButton
    {
		#region Properties

		/// <summary>
		/// <para>The menu which is displayed when this button is pressed.</para>
		/// </summary>
		object Menu { get; set; }

		#endregion Properties

		#region Methods

		/// <summary>
		/// <para>Empty the menu of all items, in preparation for building a new column
		/// visibility menu.</para>
		/// </summary>
		void Empty();

		/// <summary>
		/// <para>Instantiate a sub-widget.</para>
		/// </summary>
		/// <param name="item">One of the following strings, indicating what type of column-menu-specific object to instantiate:  menu  Instantiate a menu which will appear when the column visibility button is pressed. No options are provided in this case.  menu-button  Instantiate a button to correspond to a column within the table. The options are a map containing text, the name of the column; column, the column number; and bVisible, a boolean indicating whether this column is currently visible. The instantiated return object must implement interface qx.ui.table.IColumnMenuItem  user-button  Instantiate a button for other than a column name. This is used, for example, to add the &#8220;Reset column widths&#8221; button when the Resize column model is requested. The options is a map containing text, the text to present in the button.  separator  Instantiate a separator object to added to the menu. This is used, for example, to separate the table column name list from the &#8220;Reset column widths&#8221; button when the Resize column model is requested. No options are provided in this case.  </param>
		/// <param name="options">Options specific to the item being requested.</param>
		/// <returns>The instantiated object as specified by item.</returns>
		qx.ui.core.Widget Factory(string item, object options);

		/// <summary>
		/// <para>Returns the (computed) value of the property menu.</para>
		/// </summary>
		object GetMenu();

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property menu
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property menu.</param>
		void InitMenu(object value);

		/// <summary>
		/// <para>Resets the user value of the property menu.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		void ResetMenu();

		/// <summary>
		/// <para>Sets the user value of the property menu.</para>
		/// </summary>
		/// <param name="value">New value for property menu.</param>
		void SetMenu(object value);

		#endregion Methods
    }
}