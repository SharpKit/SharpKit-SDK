// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table
{
    /// <summary>
	/// <para>Table</para>
	/// <para>A detailed description can be found in the package description
	/// <see cref="qx.ui.table"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.Table", OmitOptionalParameters = true, Export = false)]
    public partial class Table : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// <para>Dispatched when a data cell has been clicked.</para>
		/// </summary>
		public event Action<qx.ui.table.pane.CellEvent> OnCellClick;

		/// <summary>
		/// <para>Dispatched when the context menu is needed in a data cell</para>
		/// </summary>
		public event Action<qx.ui.table.pane.CellEvent> OnCellContextmenu;

		/// <summary>
		/// <para>Dispatched when a data cell has been clicked.</para>
		/// </summary>
		public event Action<qx.ui.table.pane.CellEvent> OnCellDblclick;

		/// <summary>
		/// Fired on change of the property <see cref="DataRowRenderer"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeDataRowRenderer;

		/// <summary>
		/// Fired on change of the property <see cref="HeaderCellHeight"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeHeaderCellHeight;

		/// <summary>
		/// Fired on change of the property <see cref="RowHeight"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeRowHeight;

		/// <summary>
		/// Fired on change of the property <see cref="SelectionModel"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelectionModel;

		/// <summary>
		/// Fired on change of the property <see cref="TableModel"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeTableModel;

		/// <summary>
		/// <para>Dispatched after adding the column list to the column visibility menu.
		/// The event data is a map with two properties: table and menu.  Listeners
		/// may add additional items to the menu, which appear at the bottom of the
		/// menu.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnColumnVisibilityMenuCreateEnd;

		/// <summary>
		/// <para>Dispatched before adding the column list to the column visibility menu.
		/// The event data is a map with two properties: table and menu.  Listeners
		/// may add additional items to the menu, which appear at the top of the
		/// menu.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnColumnVisibilityMenuCreateStart;

		/// <summary>
		/// <para>Dispatched after a cell editor is flushed.</para>
		/// <para>The data is a map containing this properties:
		/// <list type="bullet">
		/// <item>row</item>
		/// <item>col</item>
		/// <item>value</item>
		/// <item>oldValue</item>
		/// </list></para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnDataEdited;

		/// <summary>
		/// <para>Dispatched when the width of the table has changed.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnTableWidthChanged;

		/// <summary>
		/// <para>Dispatched when updating scrollbars discovers that a vertical scrollbar
		/// is needed when it previously was not, or vice versa.  The data is a
		/// boolean indicating whether a vertical scrollbar is now being used.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnVerticalScrollBarChanged;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The Statusbartext, set it, if you want some more Information</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "additionalStatusBarText", NativeField = true)]
		public object AdditionalStatusBarText { get; set; }

		/// <summary>
		/// <para>Whether the table cells should be updated when only the selection or the
		/// focus changed. This slows down the table update but allows to react on a
		/// changed selection or a changed focus in a cell renderer.</para>
		/// </summary>
		[JsProperty(Name = "alwaysUpdateCells", NativeField = true)]
		public bool AlwaysUpdateCells { get; set; }

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Whether to show the column visibility button</para>
		/// </summary>
		[JsProperty(Name = "columnVisibilityButtonVisible", NativeField = true)]
		public bool ColumnVisibilityButtonVisible { get; set; }

		/// <summary>
		/// <para>By default, the &#8220;cellContextmenu&#8221; event is fired only when a data cell
		/// is right-clicked. It is not fired when a right-click occurs in the
		/// empty area of the table below the last data row. By turning on this
		/// property, &#8220;cellContextMenu&#8221; events will also be generated when a
		/// right-click occurs in that empty area. In such a case, row identifier
		/// in the event data will be null, so event handlers can check (row ===
		/// null) to handle this case.</para>
		/// </summary>
		[JsProperty(Name = "contextMenuFromDataCellsOnly", NativeField = true)]
		public bool ContextMenuFromDataCellsOnly { get; set; }

		/// <summary>
		/// <para>The renderer to use for styling the rows.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "dataRowRenderer", NativeField = true)]
		public qx.ui.table.IRowRenderer DataRowRenderer { get; set; }

		/// <summary>
		/// <para>Whether the widget is focusable e.g. rendering a focus border and visualize
		/// as active element.</para>
		/// <para>See also <see cref="IsTabable"/> which allows runtime checks for
		/// isChecked or other stuff to test whether the widget is
		/// reachable via the TAB key.</para>
		/// </summary>
		[JsProperty(Name = "focusable", NativeField = true)]
		public bool Focusable { get; set; }

		/// <summary>
		/// <para>Whether the focus should moved when the mouse is moved over a cell. If false
		/// the focus is only moved on mouse clicks.</para>
		/// </summary>
		[JsProperty(Name = "focusCellOnMouseMove", NativeField = true)]
		public bool FocusCellOnMouseMove { get; set; }

		/// <summary>
		/// <para>Force line height to match row height.  May be disabled if cell
		/// renderers being used wish to render multiple lines of data within a
		/// cell.  (With the default setting, all but the first of multiple lines
		/// of data will not be visible.)</para>
		/// </summary>
		[JsProperty(Name = "forceLineHeight", NativeField = true)]
		public bool ForceLineHeight { get; set; }

		/// <summary>
		/// <para>The height of the header cells.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "headerCellHeight", NativeField = true)]
		public double HeaderCellHeight { get; set; }

		/// <summary>
		/// <para>Whether the header cells are visible. When setting this to false,
		/// you&#8217;ll likely also want to set the {#columnVisibilityButtonVisible}
		/// property to false as well, to entirely remove the header row.</para>
		/// </summary>
		[JsProperty(Name = "headerCellsVisible", NativeField = true)]
		public bool HeaderCellsVisible { get; set; }

		/// <summary>
		/// <para>The list of columns that are initially hidden. This property is set by
		/// the constructor, from the value received in
		/// custom.initiallyHiddenColumns, and is only used when a column model is
		/// initialized. It can be of great benefit in tables with numerous columns
		/// where most are not initially visible. The process of creating the
		/// headers for all of the columns, only to have those columns discarded
		/// shortly thereafter when setColumnVisibility(false) is called, is a
		/// waste of (significant, in some browsers) time. Specifying the
		/// non-visible columns at constructor time can therefore avoid the initial
		/// creation of all of those superfluous widgets.</para>
		/// </summary>
		[JsProperty(Name = "initiallyHiddenColumns", NativeField = true)]
		public object InitiallyHiddenColumns { get; set; }

		/// <summary>
		/// <para>Whether the table should keep the first visible row complete. If set to false,
		/// the first row may be rendered partial, depending on the vertical scroll value.</para>
		/// </summary>
		[JsProperty(Name = "keepFirstVisibleRowComplete", NativeField = true)]
		public bool KeepFirstVisibleRowComplete { get; set; }

		/// <summary>
		/// <para>{Integer[]} The number of columns per meta column. If the last array entry is -1,
		/// this meta column will get the remaining columns.</para>
		/// </summary>
		[JsProperty(Name = "metaColumnCounts", NativeField = true)]
		public object MetaColumnCounts { get; set; }

		/// <summary>
		/// <para>The user provided minimal width.</para>
		/// <para>Also take a look at the related properties <see cref="Width"/> and <see cref="MaxWidth"/>.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "minWidth", NativeField = true)]
		public double MinWidth { get; set; }

		/// <summary>
		/// <para>A function to call when before modal cell editor is opened.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "modalCellEditorPreOpenFunction", NativeField = true)]
		public Action<object> ModalCellEditorPreOpenFunction { get; set; }

		/// <summary>
		/// <para>A function to instantiate a new column menu button.</para>
		/// </summary>
		[JsProperty(Name = "newColumnMenu", NativeField = true)]
		public Action<object> NewColumnMenu { get; set; }

		/// <summary>
		/// <para>A function to instantiate a selection manager.  this allows subclasses of
		/// Table to subclass this internal class.  To take effect, this property must
		/// be set before calling the Table constructor.</para>
		/// </summary>
		[JsProperty(Name = "newSelectionManager", NativeField = true)]
		public Action<object> NewSelectionManager { get; set; }

		/// <summary>
		/// <para>A function to instantiate a selection model.  this allows subclasses of
		/// Table to subclass this internal class.  To take effect, this property must
		/// be set before calling the Table constructor.</para>
		/// </summary>
		[JsProperty(Name = "newSelectionModel", NativeField = true)]
		public Action<object> NewSelectionModel { get; set; }

		/// <summary>
		/// <para>A function to instantiate a table column model.  This allows subclasses
		/// of Table to subclass this internal class.  To take effect, this
		/// property must be set before calling the Table constructor.</para>
		/// </summary>
		[JsProperty(Name = "newTableColumnModel", NativeField = true)]
		public Action<object> NewTableColumnModel { get; set; }

		/// <summary>
		/// <para>A function to instantiate a table pane.  this allows subclasses of
		/// Table to subclass this internal class.  To take effect, this property
		/// must be set before calling the Table constructor.</para>
		/// </summary>
		[JsProperty(Name = "newTablePane", NativeField = true)]
		public Action<object> NewTablePane { get; set; }

		/// <summary>
		/// <para>A function to instantiate a table pane.  this allows subclasses of
		/// Table to subclass this internal class.  To take effect, this property
		/// must be set before calling the Table constructor.</para>
		/// </summary>
		[JsProperty(Name = "newTablePaneHeader", NativeField = true)]
		public Action<object> NewTablePaneHeader { get; set; }

		/// <summary>
		/// <para>A function to instantiate a table pane model.  this allows subclasses
		/// of Table to subclass this internal class.  To take effect, this
		/// property must be set before calling the Table constructor.</para>
		/// </summary>
		[JsProperty(Name = "newTablePaneModel", NativeField = true)]
		public Action<object> NewTablePaneModel { get; set; }

		/// <summary>
		/// <para>A function to instantiate a table pane scroller.  this allows
		/// subclasses of Table to subclass this internal class.  To take effect,
		/// this property must be set before calling the Table constructor.</para>
		/// </summary>
		[JsProperty(Name = "newTablePaneScroller", NativeField = true)]
		public Action<object> NewTablePaneScroller { get; set; }

		/// <summary>
		/// <para>Whether to reset the selection when a header cell is clicked. Since
		/// most data models do not have provisions to retain a selection after
		/// sorting, the default is to reset the selection in this case. Some data
		/// models, however, do have the capability to retain the selection, so
		/// when using those, this property should be set to false.</para>
		/// </summary>
		[JsProperty(Name = "resetSelectionOnHeaderClick", NativeField = true)]
		public bool ResetSelectionOnHeaderClick { get; set; }

		/// <summary>
		/// <para>Whether row focus change by keyboard also modifies selection</para>
		/// </summary>
		[JsProperty(Name = "rowFocusChangeModifiesSelection", NativeField = true)]
		public bool RowFocusChangeModifiesSelection { get; set; }

		/// <summary>
		/// <para>The height of the table rows.</para>
		/// </summary>
		[JsProperty(Name = "rowHeight", NativeField = true)]
		public double RowHeight { get; set; }

		/// <summary>
		/// <para>Whether the widget contains content which may be selected by the user.</para>
		/// <para>If the value set to true the native browser selection can
		/// be used for text selection. But it is normally useful for
		/// forms fields, longer texts/documents, editors, etc.</para>
		/// <para>Note: This has no effect on Table!</para>
		/// </summary>
		[JsProperty(Name = "selectable", NativeField = true)]
		public object Selectable { get; set; }

		/// <summary>
		/// <para>The selection model.</para>
		/// </summary>
		[JsProperty(Name = "selectionModel", NativeField = true)]
		public qx.ui.table.selection.Model SelectionModel { get; set; }

		/// <summary>
		/// <para>Whether the cell focus indicator should be shown</para>
		/// </summary>
		[JsProperty(Name = "showCellFocusIndicator", NativeField = true)]
		public bool ShowCellFocusIndicator { get; set; }

		/// <summary>
		/// <para>Whether to show the status bar</para>
		/// </summary>
		[JsProperty(Name = "statusBarVisible", NativeField = true)]
		public bool StatusBarVisible { get; set; }

		/// <summary>
		/// <para>The table model.</para>
		/// </summary>
		[JsProperty(Name = "tableModel", NativeField = true)]
		public qx.ui.table.ITableModel TableModel { get; set; }

		#endregion Properties

		#region Methods

		public Table() { throw new NotImplementedException(); }

		/// <param name="tableModel">The table model to read the data from.</param>
		/// <param name="custom">A map provided to override the various supplemental classes allocated within this constructor.  Each property must be a function which returns an object instance, as indicated by shown the defaults listed here:   initiallyHiddenColumns  {Array?} A list of column numbers that should be initially invisible. Any column not mentioned will be initially visible, and if no array is provided, all columns will be initially visible.  selectionManager    function(obj) { return new qx.ui.table.selection.Manager(obj); }    selectionModel    function(obj) { return new qx.ui.table.selection.Model(obj); }    tableColumnModel    function(obj) { return new qx.ui.table.columnmodel.Basic(obj); }    tablePaneModel    function(obj) { return new qx.ui.table.pane.Model(obj); }    tablePane    function(obj) { return new qx.ui.table.pane.Pane(obj); }    tablePaneHeader    function(obj) { return new qx.ui.table.pane.Header(obj); }    tablePaneScroller    function(obj) { return new qx.ui.table.pane.Scroller(obj); }    tablePaneModel    function(obj) { return new qx.ui.table.pane.Model(obj); }    columnMenu    function() { return new qx.ui.table.columnmenu.Button(); }    </param>
		public Table(qx.ui.table.ITableModel tableModel = null, object custom = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add event listener to this object.</para>
		/// </summary>
		/// <param name="type">name of the event type</param>
		/// <param name="listener">event callback function</param>
		/// <param name="self">Reference to the &#8216;this&#8217; variable inside the event listener. When not given, the corresponding dispatcher usually falls back to a default, which is the target by convention. Note this is not a strict requirement, i.e. custom dispatchers can follow a different strategy.</param>
		/// <param name="capture">Whether to attach the event to the capturing phase or the bubbling phase of the event. The default is to attach the event handler to the bubbling phase.</param>
		/// <returns>An opaque id, which can be used to remove the event listener using the #removeListenerById method.</returns>
		[JsMethod(Name = "addListener")]
		public string AddListener(string type, Action<qx.eventx.type.Data> listener, object self = null, bool capture = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Activates the blocker widgets on all column headers and the
		/// column button</para>
		/// </summary>
		[JsMethod(Name = "blockHeaderElements")]
		public void BlockHeaderElements() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stops editing without writing the editor&#8217;s value to the model.</para>
		/// </summary>
		[JsMethod(Name = "cancelEditing")]
		public void CancelEditing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove the highlighting of the current focus row.</para>
		/// <para>This is used to temporarily remove the highlighting of the currently
		/// focused row, and is expected to be used most typically by adding a
		/// listener on the &#8220;mouseout&#8221; event, so that the focus highlighting is
		/// suspended when the mouse leaves the table:</para>
		/// <para>table.addListener(&#8220;mouseout&#8221;, table.clearFocusedRowHighlight);</para>
		/// </summary>
		/// <param name="evt">Incoming mouse event</param>
		[JsMethod(Name = "clearFocusedRowHighlight")]
		public void ClearFocusedRowHighlight(qx.eventx.type.Mouse evt) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes this widget from its parent and disposes it.</para>
		/// <para>Please note that the widget is not disposed synchronously. The
		/// real dispose happens after the next queue flush.</para>
		/// </summary>
		[JsMethod(Name = "destroy")]
		public void Destroy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property additionalStatusBarText.</para>
		/// </summary>
		[JsMethod(Name = "getAdditionalStatusBarText")]
		public object GetAdditionalStatusBarText() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property alwaysUpdateCells.</para>
		/// </summary>
		[JsMethod(Name = "getAlwaysUpdateCells")]
		public bool GetAlwaysUpdateCells() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property columnVisibilityButtonVisible.</para>
		/// </summary>
		[JsMethod(Name = "getColumnVisibilityButtonVisible")]
		public bool GetColumnVisibilityButtonVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contextMenuFromDataCellsOnly.</para>
		/// </summary>
		[JsMethod(Name = "getContextMenuFromDataCellsOnly")]
		public bool GetContextMenuFromDataCellsOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property dataRowRenderer.</para>
		/// </summary>
		[JsMethod(Name = "getDataRowRenderer")]
		public qx.ui.table.IRowRenderer GetDataRowRenderer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get an empty table model instance to use for this table. Use this table
		/// to configure the table with no table model.</para>
		/// </summary>
		/// <returns>The empty table model</returns>
		[JsMethod(Name = "getEmptyTableModel")]
		public qx.ui.table.ITableModel GetEmptyTableModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property focusCellOnMouseMove.</para>
		/// </summary>
		[JsMethod(Name = "getFocusCellOnMouseMove")]
		public bool GetFocusCellOnMouseMove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the column of the currently focused cell.</para>
		/// </summary>
		/// <returns>the model index of the focused cell&#8217;s column.</returns>
		[JsMethod(Name = "getFocusedColumn")]
		public double GetFocusedColumn() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the row of the currently focused cell.</para>
		/// </summary>
		/// <returns>the model index of the focused cell&#8217;s column.</returns>
		[JsMethod(Name = "getFocusedRow")]
		public double GetFocusedRow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property forceLineHeight.</para>
		/// </summary>
		[JsMethod(Name = "getForceLineHeight")]
		public bool GetForceLineHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property headerCellHeight.</para>
		/// </summary>
		[JsMethod(Name = "getHeaderCellHeight")]
		public double GetHeaderCellHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property headerCellsVisible.</para>
		/// </summary>
		[JsMethod(Name = "getHeaderCellsVisible")]
		public bool GetHeaderCellsVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property initiallyHiddenColumns.</para>
		/// </summary>
		[JsMethod(Name = "getInitiallyHiddenColumns")]
		public object GetInitiallyHiddenColumns() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property keepFirstVisibleRowComplete.</para>
		/// </summary>
		[JsMethod(Name = "getKeepFirstVisibleRowComplete")]
		public bool GetKeepFirstVisibleRowComplete() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property metaColumnCounts.</para>
		/// </summary>
		[JsMethod(Name = "getMetaColumnCounts")]
		public object GetMetaColumnCounts() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property modalCellEditorPreOpenFunction.</para>
		/// </summary>
		[JsMethod(Name = "getModalCellEditorPreOpenFunction")]
		public Action<object> GetModalCellEditorPreOpenFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newColumnMenu.</para>
		/// </summary>
		[JsMethod(Name = "getNewColumnMenu")]
		public Action<object> GetNewColumnMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newSelectionManager.</para>
		/// </summary>
		[JsMethod(Name = "getNewSelectionManager")]
		public Action<object> GetNewSelectionManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newSelectionModel.</para>
		/// </summary>
		[JsMethod(Name = "getNewSelectionModel")]
		public Action<object> GetNewSelectionModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newTableColumnModel.</para>
		/// </summary>
		[JsMethod(Name = "getNewTableColumnModel")]
		public Action<object> GetNewTableColumnModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newTablePane.</para>
		/// </summary>
		[JsMethod(Name = "getNewTablePane")]
		public Action<object> GetNewTablePane() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newTablePaneHeader.</para>
		/// </summary>
		[JsMethod(Name = "getNewTablePaneHeader")]
		public Action<object> GetNewTablePaneHeader() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newTablePaneModel.</para>
		/// </summary>
		[JsMethod(Name = "getNewTablePaneModel")]
		public Action<object> GetNewTablePaneModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property newTablePaneScroller.</para>
		/// </summary>
		[JsMethod(Name = "getNewTablePaneScroller")]
		public Action<object> GetNewTablePaneScroller() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a TablePaneScroller of this table.</para>
		/// </summary>
		/// <param name="metaColumn">the meta column to get the TablePaneScroller for.</param>
		/// <returns>the qx.ui.table.pane.Scroller.</returns>
		[JsMethod(Name = "getPaneScroller")]
		public qx.ui.table.pane.Scroller GetPaneScroller(double metaColumn) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resetSelectionOnHeaderClick.</para>
		/// </summary>
		[JsMethod(Name = "getResetSelectionOnHeaderClick")]
		public bool GetResetSelectionOnHeaderClick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property rowFocusChangeModifiesSelection.</para>
		/// </summary>
		[JsMethod(Name = "getRowFocusChangeModifiesSelection")]
		public bool GetRowFocusChangeModifiesSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property rowHeight.</para>
		/// </summary>
		[JsMethod(Name = "getRowHeight")]
		public double GetRowHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the selection manager.</para>
		/// </summary>
		/// <returns>the selection manager.</returns>
		[JsMethod(Name = "getSelectionManager")]
		public qx.ui.table.selection.Manager GetSelectionManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property selectionModel.</para>
		/// </summary>
		[JsMethod(Name = "getSelectionModel")]
		public qx.ui.table.selection.Model GetSelectionModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showCellFocusIndicator.</para>
		/// </summary>
		[JsMethod(Name = "getShowCellFocusIndicator")]
		public bool GetShowCellFocusIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property statusBarVisible.</para>
		/// </summary>
		[JsMethod(Name = "getStatusBarVisible")]
		public bool GetStatusBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the The table column model.</para>
		/// </summary>
		/// <returns>The table&#8217;s column model</returns>
		[JsMethod(Name = "getTableColumnModel")]
		public qx.ui.table.columnmodel.Basic GetTableColumnModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property tableModel.</para>
		/// </summary>
		[JsMethod(Name = "getTableModel")]
		public qx.ui.table.ITableModel GetTableModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Gets the TablePaneScroller at a certain x position in the page. If there is
		/// no TablePaneScroller at this position, null is returned.</para>
		/// </summary>
		/// <param name="pageX">the position in the page to check (in pixels).</param>
		/// <returns>the TablePaneScroller or null.</returns>
		[JsMethod(Name = "getTablePaneScrollerAtPageX")]
		public qx.ui.table.pane.Scroller GetTablePaneScrollerAtPageX(double pageX) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Select whether the focused row is highlighted</para>
		/// </summary>
		/// <param name="bHighlight">Flag indicating whether the focused row should be highlighted.</param>
		[JsMethod(Name = "highlightFocusedRow")]
		public void HighlightFocusedRow(bool bHighlight) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property additionalStatusBarText
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property additionalStatusBarText.</param>
		[JsMethod(Name = "initAdditionalStatusBarText")]
		public void InitAdditionalStatusBarText(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property alwaysUpdateCells
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property alwaysUpdateCells.</param>
		[JsMethod(Name = "initAlwaysUpdateCells")]
		public void InitAlwaysUpdateCells(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property columnVisibilityButtonVisible
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property columnVisibilityButtonVisible.</param>
		[JsMethod(Name = "initColumnVisibilityButtonVisible")]
		public void InitColumnVisibilityButtonVisible(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contextMenuFromDataCellsOnly
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contextMenuFromDataCellsOnly.</param>
		[JsMethod(Name = "initContextMenuFromDataCellsOnly")]
		public void InitContextMenuFromDataCellsOnly(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property dataRowRenderer
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property dataRowRenderer.</param>
		[JsMethod(Name = "initDataRowRenderer")]
		public void InitDataRowRenderer(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property focusCellOnMouseMove
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property focusCellOnMouseMove.</param>
		[JsMethod(Name = "initFocusCellOnMouseMove")]
		public void InitFocusCellOnMouseMove(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property forceLineHeight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property forceLineHeight.</param>
		[JsMethod(Name = "initForceLineHeight")]
		public void InitForceLineHeight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property headerCellHeight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property headerCellHeight.</param>
		[JsMethod(Name = "initHeaderCellHeight")]
		public void InitHeaderCellHeight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property headerCellsVisible
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property headerCellsVisible.</param>
		[JsMethod(Name = "initHeaderCellsVisible")]
		public void InitHeaderCellsVisible(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property initiallyHiddenColumns
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property initiallyHiddenColumns.</param>
		[JsMethod(Name = "initInitiallyHiddenColumns")]
		public void InitInitiallyHiddenColumns(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property keepFirstVisibleRowComplete
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property keepFirstVisibleRowComplete.</param>
		[JsMethod(Name = "initKeepFirstVisibleRowComplete")]
		public void InitKeepFirstVisibleRowComplete(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property metaColumnCounts
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property metaColumnCounts.</param>
		[JsMethod(Name = "initMetaColumnCounts")]
		public void InitMetaColumnCounts(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property modalCellEditorPreOpenFunction
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property modalCellEditorPreOpenFunction.</param>
		[JsMethod(Name = "initModalCellEditorPreOpenFunction")]
		public void InitModalCellEditorPreOpenFunction(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newColumnMenu
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newColumnMenu.</param>
		[JsMethod(Name = "initNewColumnMenu")]
		public void InitNewColumnMenu(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newSelectionManager
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newSelectionManager.</param>
		[JsMethod(Name = "initNewSelectionManager")]
		public void InitNewSelectionManager(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newSelectionModel
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newSelectionModel.</param>
		[JsMethod(Name = "initNewSelectionModel")]
		public void InitNewSelectionModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newTableColumnModel
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newTableColumnModel.</param>
		[JsMethod(Name = "initNewTableColumnModel")]
		public void InitNewTableColumnModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newTablePane
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newTablePane.</param>
		[JsMethod(Name = "initNewTablePane")]
		public void InitNewTablePane(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newTablePaneHeader
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newTablePaneHeader.</param>
		[JsMethod(Name = "initNewTablePaneHeader")]
		public void InitNewTablePaneHeader(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newTablePaneModel
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newTablePaneModel.</param>
		[JsMethod(Name = "initNewTablePaneModel")]
		public void InitNewTablePaneModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property newTablePaneScroller
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property newTablePaneScroller.</param>
		[JsMethod(Name = "initNewTablePaneScroller")]
		public void InitNewTablePaneScroller(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resetSelectionOnHeaderClick
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resetSelectionOnHeaderClick.</param>
		[JsMethod(Name = "initResetSelectionOnHeaderClick")]
		public void InitResetSelectionOnHeaderClick(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property rowFocusChangeModifiesSelection
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property rowFocusChangeModifiesSelection.</param>
		[JsMethod(Name = "initRowFocusChangeModifiesSelection")]
		public void InitRowFocusChangeModifiesSelection(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property rowHeight
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property rowHeight.</param>
		[JsMethod(Name = "initRowHeight")]
		public void InitRowHeight(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property selectionModel
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property selectionModel.</param>
		[JsMethod(Name = "initSelectionModel")]
		public void InitSelectionModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showCellFocusIndicator
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showCellFocusIndicator.</param>
		[JsMethod(Name = "initShowCellFocusIndicator")]
		public void InitShowCellFocusIndicator(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property statusBarVisible
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property statusBarVisible.</param>
		[JsMethod(Name = "initStatusBarVisible")]
		public void InitStatusBarVisible(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property tableModel
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property tableModel.</param>
		[JsMethod(Name = "initTableModel")]
		public void InitTableModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property alwaysUpdateCells equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAlwaysUpdateCells")]
		public void IsAlwaysUpdateCells() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property columnVisibilityButtonVisible equals true.</para>
		/// </summary>
		[JsMethod(Name = "isColumnVisibilityButtonVisible")]
		public void IsColumnVisibilityButtonVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property contextMenuFromDataCellsOnly equals true.</para>
		/// </summary>
		[JsMethod(Name = "isContextMenuFromDataCellsOnly")]
		public void IsContextMenuFromDataCellsOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether currently a cell is editing.</para>
		/// </summary>
		/// <returns>whether currently a cell is editing.</returns>
		[JsMethod(Name = "isEditing")]
		public object IsEditing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property focusCellOnMouseMove equals true.</para>
		/// </summary>
		[JsMethod(Name = "isFocusCellOnMouseMove")]
		public void IsFocusCellOnMouseMove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property forceLineHeight equals true.</para>
		/// </summary>
		[JsMethod(Name = "isForceLineHeight")]
		public void IsForceLineHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property headerCellsVisible equals true.</para>
		/// </summary>
		[JsMethod(Name = "isHeaderCellsVisible")]
		public void IsHeaderCellsVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property keepFirstVisibleRowComplete equals true.</para>
		/// </summary>
		[JsMethod(Name = "isKeepFirstVisibleRowComplete")]
		public void IsKeepFirstVisibleRowComplete() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resetSelectionOnHeaderClick equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResetSelectionOnHeaderClick")]
		public void IsResetSelectionOnHeaderClick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property rowFocusChangeModifiesSelection equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRowFocusChangeModifiesSelection")]
		public void IsRowFocusChangeModifiesSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showCellFocusIndicator equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowCellFocusIndicator")]
		public void IsShowCellFocusIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property statusBarVisible equals true.</para>
		/// </summary>
		[JsMethod(Name = "isStatusBarVisible")]
		public void IsStatusBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Moves the focus.</para>
		/// </summary>
		/// <param name="deltaX">The delta by which the focus should be moved on the x axis.</param>
		/// <param name="deltaY">The delta by which the focus should be moved on the y axis.</param>
		[JsMethod(Name = "moveFocusedCell")]
		public void MoveFocusedCell(double deltaX, double deltaY) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove event listener from this object</para>
		/// </summary>
		/// <param name="type">name of the event type</param>
		/// <param name="listener">event callback function</param>
		/// <param name="self">reference to the &#8216;this&#8217; variable inside the callback</param>
		/// <param name="capture">Whether to remove the event listener of the bubbling or of the capturing phase.</param>
		/// <returns>Whether the event was removed successfully (has existed)</returns>
		[JsMethod(Name = "removeListener")]
		public bool RemoveListener(string type, Action<qx.eventx.type.Data> listener, object self = null, bool? capture = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes an event listener from an event target by an id returned by
		/// <see cref="AddListener"/></para>
		/// </summary>
		/// <param name="id">The id returned by #addListener</param>
		/// <returns>Whether the event was removed successfully (has existed)</returns>
		[JsMethod(Name = "removeListenerById")]
		public bool RemoveListenerById(string id) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property additionalStatusBarText.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAdditionalStatusBarText")]
		public void ResetAdditionalStatusBarText() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property alwaysUpdateCells.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAlwaysUpdateCells")]
		public void ResetAlwaysUpdateCells() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the focused cell.</para>
		/// </summary>
		[JsMethod(Name = "resetCellFocus")]
		public void ResetCellFocus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property columnVisibilityButtonVisible.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetColumnVisibilityButtonVisible")]
		public void ResetColumnVisibilityButtonVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contextMenuFromDataCellsOnly.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContextMenuFromDataCellsOnly")]
		public void ResetContextMenuFromDataCellsOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property dataRowRenderer.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDataRowRenderer")]
		public void ResetDataRowRenderer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property focusCellOnMouseMove.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFocusCellOnMouseMove")]
		public void ResetFocusCellOnMouseMove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property forceLineHeight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetForceLineHeight")]
		public void ResetForceLineHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property headerCellHeight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetHeaderCellHeight")]
		public void ResetHeaderCellHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property headerCellsVisible.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetHeaderCellsVisible")]
		public void ResetHeaderCellsVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property initiallyHiddenColumns.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInitiallyHiddenColumns")]
		public void ResetInitiallyHiddenColumns() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property keepFirstVisibleRowComplete.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetKeepFirstVisibleRowComplete")]
		public void ResetKeepFirstVisibleRowComplete() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property metaColumnCounts.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMetaColumnCounts")]
		public void ResetMetaColumnCounts() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property modalCellEditorPreOpenFunction.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetModalCellEditorPreOpenFunction")]
		public void ResetModalCellEditorPreOpenFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newColumnMenu.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewColumnMenu")]
		public void ResetNewColumnMenu() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newSelectionManager.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewSelectionManager")]
		public void ResetNewSelectionManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newSelectionModel.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewSelectionModel")]
		public void ResetNewSelectionModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newTableColumnModel.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewTableColumnModel")]
		public void ResetNewTableColumnModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newTablePane.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewTablePane")]
		public void ResetNewTablePane() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newTablePaneHeader.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewTablePaneHeader")]
		public void ResetNewTablePaneHeader() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newTablePaneModel.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewTablePaneModel")]
		public void ResetNewTablePaneModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property newTablePaneScroller.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetNewTablePaneScroller")]
		public void ResetNewTablePaneScroller() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resetSelectionOnHeaderClick.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResetSelectionOnHeaderClick")]
		public void ResetResetSelectionOnHeaderClick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property rowFocusChangeModifiesSelection.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRowFocusChangeModifiesSelection")]
		public void ResetRowFocusChangeModifiesSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property rowHeight.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRowHeight")]
		public void ResetRowHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets (clears) the current selection</para>
		/// </summary>
		[JsMethod(Name = "resetSelection")]
		public void ResetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property selectionModel.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSelectionModel")]
		public void ResetSelectionModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showCellFocusIndicator.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowCellFocusIndicator")]
		public void ResetShowCellFocusIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property statusBarVisible.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetStatusBarVisible")]
		public void ResetStatusBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property tableModel.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTableModel")]
		public void ResetTableModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls a cell visible.</para>
		/// </summary>
		/// <param name="col">the model index of the column the cell belongs to.</param>
		/// <param name="row">the model index of the row the cell belongs to.</param>
		[JsMethod(Name = "scrollCellVisible")]
		public void ScrollCellVisible(double col, double row) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property additionalStatusBarText.</para>
		/// </summary>
		/// <param name="value">New value for property additionalStatusBarText.</param>
		[JsMethod(Name = "setAdditionalStatusBarText")]
		public void SetAdditionalStatusBarText(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property alwaysUpdateCells.</para>
		/// </summary>
		/// <param name="value">New value for property alwaysUpdateCells.</param>
		[JsMethod(Name = "setAlwaysUpdateCells")]
		public void SetAlwaysUpdateCells(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property columnVisibilityButtonVisible.</para>
		/// </summary>
		/// <param name="value">New value for property columnVisibilityButtonVisible.</param>
		[JsMethod(Name = "setColumnVisibilityButtonVisible")]
		public void SetColumnVisibilityButtonVisible(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the width of a column.</para>
		/// </summary>
		/// <param name="col">the model index of column.</param>
		/// <param name="width">the new width in pixels.</param>
		[JsMethod(Name = "setColumnWidth")]
		public void SetColumnWidth(double col, double width) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contextMenuFromDataCellsOnly.</para>
		/// </summary>
		/// <param name="value">New value for property contextMenuFromDataCellsOnly.</param>
		[JsMethod(Name = "setContextMenuFromDataCellsOnly")]
		public void SetContextMenuFromDataCellsOnly(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property dataRowRenderer.</para>
		/// </summary>
		/// <param name="value">New value for property dataRowRenderer.</param>
		[JsMethod(Name = "setDataRowRenderer")]
		public void SetDataRowRenderer(qx.ui.table.IRowRenderer value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property focusCellOnMouseMove.</para>
		/// </summary>
		/// <param name="value">New value for property focusCellOnMouseMove.</param>
		[JsMethod(Name = "setFocusCellOnMouseMove")]
		public void SetFocusCellOnMouseMove(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the currently focused cell. A value of null hides the
		/// focus cell.</para>
		/// </summary>
		/// <param name="col">the model index of the focused cell&#8217;s column.</param>
		/// <param name="row">the model index of the focused cell&#8217;s row.</param>
		/// <param name="scrollVisible">whether to scroll the new focused cell visible.</param>
		[JsMethod(Name = "setFocusedCell")]
		public void SetFocusedCell(double? col = null, double? row = null, bool scrollVisible = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property forceLineHeight.</para>
		/// </summary>
		/// <param name="value">New value for property forceLineHeight.</param>
		[JsMethod(Name = "setForceLineHeight")]
		public void SetForceLineHeight(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property headerCellHeight.</para>
		/// </summary>
		/// <param name="value">New value for property headerCellHeight.</param>
		[JsMethod(Name = "setHeaderCellHeight")]
		public void SetHeaderCellHeight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property headerCellsVisible.</para>
		/// </summary>
		/// <param name="value">New value for property headerCellsVisible.</param>
		[JsMethod(Name = "setHeaderCellsVisible")]
		public void SetHeaderCellsVisible(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property initiallyHiddenColumns.</para>
		/// </summary>
		/// <param name="value">New value for property initiallyHiddenColumns.</param>
		[JsMethod(Name = "setInitiallyHiddenColumns")]
		public void SetInitiallyHiddenColumns(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property keepFirstVisibleRowComplete.</para>
		/// </summary>
		/// <param name="value">New value for property keepFirstVisibleRowComplete.</param>
		[JsMethod(Name = "setKeepFirstVisibleRowComplete")]
		public void SetKeepFirstVisibleRowComplete(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property metaColumnCounts.</para>
		/// </summary>
		/// <param name="value">New value for property metaColumnCounts.</param>
		[JsMethod(Name = "setMetaColumnCounts")]
		public void SetMetaColumnCounts(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property modalCellEditorPreOpenFunction.</para>
		/// </summary>
		/// <param name="value">New value for property modalCellEditorPreOpenFunction.</param>
		[JsMethod(Name = "setModalCellEditorPreOpenFunction")]
		public void SetModalCellEditorPreOpenFunction(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newColumnMenu.</para>
		/// </summary>
		/// <param name="value">New value for property newColumnMenu.</param>
		[JsMethod(Name = "setNewColumnMenu")]
		public void SetNewColumnMenu(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newSelectionManager.</para>
		/// </summary>
		/// <param name="value">New value for property newSelectionManager.</param>
		[JsMethod(Name = "setNewSelectionManager")]
		public void SetNewSelectionManager(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newSelectionModel.</para>
		/// </summary>
		/// <param name="value">New value for property newSelectionModel.</param>
		[JsMethod(Name = "setNewSelectionModel")]
		public void SetNewSelectionModel(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newTableColumnModel.</para>
		/// </summary>
		/// <param name="value">New value for property newTableColumnModel.</param>
		[JsMethod(Name = "setNewTableColumnModel")]
		public void SetNewTableColumnModel(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newTablePane.</para>
		/// </summary>
		/// <param name="value">New value for property newTablePane.</param>
		[JsMethod(Name = "setNewTablePane")]
		public void SetNewTablePane(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newTablePaneHeader.</para>
		/// </summary>
		/// <param name="value">New value for property newTablePaneHeader.</param>
		[JsMethod(Name = "setNewTablePaneHeader")]
		public void SetNewTablePaneHeader(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newTablePaneModel.</para>
		/// </summary>
		/// <param name="value">New value for property newTablePaneModel.</param>
		[JsMethod(Name = "setNewTablePaneModel")]
		public void SetNewTablePaneModel(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property newTablePaneScroller.</para>
		/// </summary>
		/// <param name="value">New value for property newTablePaneScroller.</param>
		[JsMethod(Name = "setNewTablePaneScroller")]
		public void SetNewTablePaneScroller(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resetSelectionOnHeaderClick.</para>
		/// </summary>
		/// <param name="value">New value for property resetSelectionOnHeaderClick.</param>
		[JsMethod(Name = "setResetSelectionOnHeaderClick")]
		public void SetResetSelectionOnHeaderClick(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property rowFocusChangeModifiesSelection.</para>
		/// </summary>
		/// <param name="value">New value for property rowFocusChangeModifiesSelection.</param>
		[JsMethod(Name = "setRowFocusChangeModifiesSelection")]
		public void SetRowFocusChangeModifiesSelection(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property rowHeight.</para>
		/// </summary>
		/// <param name="value">New value for property rowHeight.</param>
		[JsMethod(Name = "setRowHeight")]
		public void SetRowHeight(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property selectionModel.</para>
		/// </summary>
		/// <param name="value">New value for property selectionModel.</param>
		[JsMethod(Name = "setSelectionModel")]
		public void SetSelectionModel(qx.ui.table.selection.Model value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showCellFocusIndicator.</para>
		/// </summary>
		/// <param name="value">New value for property showCellFocusIndicator.</param>
		[JsMethod(Name = "setShowCellFocusIndicator")]
		public void SetShowCellFocusIndicator(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property statusBarVisible.</para>
		/// </summary>
		/// <param name="value">New value for property statusBarVisible.</param>
		[JsMethod(Name = "setStatusBarVisible")]
		public void SetStatusBarVisible(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property tableModel.</para>
		/// </summary>
		/// <param name="value">New value for property tableModel.</param>
		[JsMethod(Name = "setTableModel")]
		public void SetTableModel(qx.ui.table.ITableModel value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Starts editing the currently focused cell. Does nothing if already editing
		/// or if the column is not editable.</para>
		/// </summary>
		/// <returns>whether editing was started</returns>
		[JsMethod(Name = "startEditing")]
		public bool StartEditing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stops editing and writes the editor&#8217;s value to the model.</para>
		/// </summary>
		[JsMethod(Name = "stopEditing")]
		public void StopEditing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property alwaysUpdateCells.</para>
		/// </summary>
		[JsMethod(Name = "toggleAlwaysUpdateCells")]
		public void ToggleAlwaysUpdateCells() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property columnVisibilityButtonVisible.</para>
		/// </summary>
		[JsMethod(Name = "toggleColumnVisibilityButtonVisible")]
		public void ToggleColumnVisibilityButtonVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property contextMenuFromDataCellsOnly.</para>
		/// </summary>
		[JsMethod(Name = "toggleContextMenuFromDataCellsOnly")]
		public void ToggleContextMenuFromDataCellsOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property focusCellOnMouseMove.</para>
		/// </summary>
		[JsMethod(Name = "toggleFocusCellOnMouseMove")]
		public void ToggleFocusCellOnMouseMove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property forceLineHeight.</para>
		/// </summary>
		[JsMethod(Name = "toggleForceLineHeight")]
		public void ToggleForceLineHeight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property headerCellsVisible.</para>
		/// </summary>
		[JsMethod(Name = "toggleHeaderCellsVisible")]
		public void ToggleHeaderCellsVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property keepFirstVisibleRowComplete.</para>
		/// </summary>
		[JsMethod(Name = "toggleKeepFirstVisibleRowComplete")]
		public void ToggleKeepFirstVisibleRowComplete() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resetSelectionOnHeaderClick.</para>
		/// </summary>
		[JsMethod(Name = "toggleResetSelectionOnHeaderClick")]
		public void ToggleResetSelectionOnHeaderClick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property rowFocusChangeModifiesSelection.</para>
		/// </summary>
		[JsMethod(Name = "toggleRowFocusChangeModifiesSelection")]
		public void ToggleRowFocusChangeModifiesSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showCellFocusIndicator.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowCellFocusIndicator")]
		public void ToggleShowCellFocusIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property statusBarVisible.</para>
		/// </summary>
		[JsMethod(Name = "toggleStatusBarVisible")]
		public void ToggleStatusBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Deactivates the blocker widgets on all column headers and the
		/// column button</para>
		/// </summary>
		[JsMethod(Name = "unblockHeaderElements")]
		public void UnblockHeaderElements() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Update the table content of every attached table pane.</para>
		/// </summary>
		[JsMethod(Name = "updateContent")]
		public void UpdateContent() { throw new NotImplementedException(); }

		#endregion Methods
    }
}