// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.pane
{
    /// <summary>
	/// <para>The table pane that shows a certain section from a table. This class handles
	/// the display of the data part of a table and is therefore the base for virtual
	/// scrolling.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.pane.Pane", OmitOptionalParameters = true, Export = false)]
    public partial class Pane : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// <para>Whether the current view port of the pane has not loaded data.
		/// The data object of the event indicates if the table pane has to reload
		/// data or not. Can be used to give the user feedback of the loading state
		/// of the rows.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnPaneReloadsData;

		/// <summary>
		/// <para>Whenever the content of the table pane has been updated (rendered)
		/// trigger a paneUpdated event. This allows the canvas cellrenderer to act
		/// once the new cells have been integrated in the dom.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnPaneUpdated;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Whether the item can shrink horizontally.</para>
		/// </summary>
		[JsProperty(Name = "allowShrinkX", NativeField = true)]
		public bool AllowShrinkX { get; set; }

		/// <summary>
		/// <para>The index of the first row to show.</para>
		/// </summary>
		[JsProperty(Name = "firstVisibleRow", NativeField = true)]
		public double FirstVisibleRow { get; set; }

		/// <summary>
		/// <para>Maximum number of cached rows. If the value is -1 the cache
		/// size is unlimited</para>
		/// </summary>
		[JsProperty(Name = "maxCacheLines", NativeField = true)]
		public double MaxCacheLines { get; set; }

		/// <summary>
		/// <para>The number of rows to show.</para>
		/// </summary>
		[JsProperty(Name = "visibleRowCount", NativeField = true)]
		public double VisibleRowCount { get; set; }

		#endregion Properties

		#region Methods

		public Pane() { throw new NotImplementedException(); }

		/// <param name="paneScroller">the TablePaneScroller the header belongs to.</param>
		public Pane(qx.ui.table.pane.Scroller paneScroller) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property firstVisibleRow.</para>
		/// </summary>
		[JsMethod(Name = "getFirstVisibleRow")]
		public double GetFirstVisibleRow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property maxCacheLines.</para>
		/// </summary>
		[JsMethod(Name = "getMaxCacheLines")]
		public double GetMaxCacheLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the TablePaneScroller this pane belongs to.</para>
		/// </summary>
		/// <returns>the TablePaneScroller.</returns>
		[JsMethod(Name = "getPaneScroller")]
		public qx.ui.table.pane.Scroller GetPaneScroller() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the table this pane belongs to.</para>
		/// </summary>
		/// <returns>the table.</returns>
		[JsMethod(Name = "getTable")]
		public qx.ui.table.Table GetTable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property visibleRowCount.</para>
		/// </summary>
		[JsMethod(Name = "getVisibleRowCount")]
		public double GetVisibleRowCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property firstVisibleRow
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property firstVisibleRow.</param>
		[JsMethod(Name = "initFirstVisibleRow")]
		public void InitFirstVisibleRow(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property maxCacheLines
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property maxCacheLines.</param>
		[JsMethod(Name = "initMaxCacheLines")]
		public void InitMaxCacheLines(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property visibleRowCount
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property visibleRowCount.</param>
		[JsMethod(Name = "initVisibleRowCount")]
		public void InitVisibleRowCount(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called the column order has changed.</para>
		/// </summary>
		[JsMethod(Name = "onColOrderChanged")]
		public void OnColOrderChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the table gets or looses the focus.</para>
		/// </summary>
		[JsMethod(Name = "onFocusChanged")]
		public void OnFocusChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the pane model has changed.</para>
		/// </summary>
		[JsMethod(Name = "onPaneModelChanged")]
		public void OnPaneModelChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the selection has changed.</para>
		/// </summary>
		[JsMethod(Name = "onSelectionChanged")]
		public void OnSelectionChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the table model data has changed.</para>
		/// </summary>
		/// <param name="firstRow">The index of the first row that has changed.</param>
		/// <param name="lastRow">The index of the last row that has changed.</param>
		/// <param name="firstColumn">The model index of the first column that has changed.</param>
		/// <param name="lastColumn">The model index of the last column that has changed.</param>
		[JsMethod(Name = "onTableModelDataChanged")]
		public void OnTableModelDataChanged(double firstRow, double lastRow, double firstColumn, double lastColumn) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the table model meta data has changed.</para>
		/// </summary>
		[JsMethod(Name = "onTableModelMetaDataChanged")]
		public void OnTableModelMetaDataChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property firstVisibleRow.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFirstVisibleRow")]
		public void ResetFirstVisibleRow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property maxCacheLines.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMaxCacheLines")]
		public void ResetMaxCacheLines() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property visibleRowCount.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetVisibleRowCount")]
		public void ResetVisibleRowCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the column width.</para>
		/// </summary>
		/// <param name="col">the column to change the width for.</param>
		/// <param name="width">the new width.</param>
		[JsMethod(Name = "setColumnWidth")]
		public void SetColumnWidth(double col, double width) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property firstVisibleRow.</para>
		/// </summary>
		/// <param name="value">New value for property firstVisibleRow.</param>
		[JsMethod(Name = "setFirstVisibleRow")]
		public void SetFirstVisibleRow(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the currently focused cell.</para>
		/// </summary>
		/// <param name="col">the model index of the focused cell&#8217;s column.</param>
		/// <param name="row">the model index of the focused cell&#8217;s row.</param>
		/// <param name="massUpdate">Whether other updates are planned as well. If true, no repaint will be done.</param>
		[JsMethod(Name = "setFocusedCell")]
		public void SetFocusedCell(double? col = null, double? row = null, bool massUpdate = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property maxCacheLines.</para>
		/// </summary>
		/// <param name="value">New value for property maxCacheLines.</param>
		[JsMethod(Name = "setMaxCacheLines")]
		public void SetMaxCacheLines(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property visibleRowCount.</para>
		/// </summary>
		/// <param name="value">New value for property visibleRowCount.</param>
		[JsMethod(Name = "setVisibleRowCount")]
		public void SetVisibleRowCount(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Updates the content of the pane.</para>
		/// </summary>
		/// <param name="completeUpdate">if true a complete update is performed. On a complete update all cell widgets are recreated.</param>
		/// <param name="scrollOffset">If set specifies how many rows to scroll.</param>
		/// <param name="onlyRow">if set only the specified row will be updated.</param>
		/// <param name="onlySelectionOrFocusChanged">if true, cell values won&#8217;t be updated. Only the row background will.</param>
		[JsMethod(Name = "updateContent")]
		public void UpdateContent(bool completeUpdate = false, double? scrollOffset = null, double? onlyRow = null, bool onlySelectionOrFocusChanged = false) { throw new NotImplementedException(); }

		#endregion Methods
    }
}