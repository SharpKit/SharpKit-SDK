// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.pane
{
    /// <summary>
	/// <para>The model of a table pane. This model works as proxy to a
	/// <see cref="qx.ui.table.columnmodel.Basic"/> and manages the visual order of the columns shown in
	/// a <see cref="Pane"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.pane.Model", OmitOptionalParameters = true, Export = false)]
    public partial class Model : qx.core.Object
    {
		#region Events

		/// <summary>
		/// <para>Fired when the model changed.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnModelChanged;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The visible x position of the first column this model should contain.</para>
		/// </summary>
		[JsProperty(Name = "firstColumnX", NativeField = true)]
		public double FirstColumnX { get; set; }

		/// <summary>
		/// <para>The maximum number of columns this model should contain. If -1 this model will
		/// contain all remaining columns.</para>
		/// </summary>
		[JsProperty(Name = "maxColumnCount", NativeField = true)]
		public double MaxColumnCount { get; set; }

		#endregion Properties

		#region Methods

		public Model() { throw new NotImplementedException(); }

		/// <param name="tableColumnModel">The TableColumnModel of which this model is the proxy.</param>
		public Model(qx.ui.table.columnmodel.Basic tableColumnModel) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the model index of the column at the position xPos.</para>
		/// </summary>
		/// <param name="xPos">the x position in the table pane of the column.</param>
		/// <returns>the model index of the column.</returns>
		[JsMethod(Name = "getColumnAtX")]
		public double GetColumnAtX(double xPos) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the number of columns in this model.</para>
		/// </summary>
		/// <returns>the number of columns in this model.</returns>
		[JsMethod(Name = "getColumnCount")]
		public double GetColumnCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Gets the position of the left side of a column (in pixels, relative to the
		/// left side of the table pane).</para>
		/// <para>This value corresponds to the sum of the widths of all columns left of the
		/// column.</para>
		/// </summary>
		/// <param name="col">the model index of the column.</param>
		/// <returns>the position of the left side of the column.</returns>
		[JsMethod(Name = "getColumnLeft")]
		public object GetColumnLeft(double col) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property firstColumnX.</para>
		/// </summary>
		[JsMethod(Name = "getFirstColumnX")]
		public double GetFirstColumnX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property maxColumnCount.</para>
		/// </summary>
		[JsMethod(Name = "getMaxColumnCount")]
		public double GetMaxColumnCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the total width of all columns in the model.</para>
		/// </summary>
		/// <returns>the total width of all columns in the model.</returns>
		[JsMethod(Name = "getTotalWidth")]
		public double GetTotalWidth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the x position of the column col.</para>
		/// </summary>
		/// <param name="col">the model index of the column.</param>
		/// <returns>the x position in the table pane of the column.</returns>
		[JsMethod(Name = "getX")]
		public double GetX(double col) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property firstColumnX
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property firstColumnX.</param>
		[JsMethod(Name = "initFirstColumnX")]
		public void InitFirstColumnX(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property maxColumnCount
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property maxColumnCount.</param>
		[JsMethod(Name = "initMaxColumnCount")]
		public void InitMaxColumnCount(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property firstColumnX.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFirstColumnX")]
		public void ResetFirstColumnX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property maxColumnCount.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMaxColumnCount")]
		public void ResetMaxColumnCount() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property firstColumnX.</para>
		/// </summary>
		/// <param name="value">New value for property firstColumnX.</param>
		[JsMethod(Name = "setFirstColumnX")]
		public void SetFirstColumnX(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property maxColumnCount.</para>
		/// </summary>
		/// <param name="value">New value for property maxColumnCount.</param>
		[JsMethod(Name = "setMaxColumnCount")]
		public void SetMaxColumnCount(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Connects the table model to the column model</para>
		/// </summary>
		/// <param name="tableColumnModel">the column model</param>
		[JsMethod(Name = "setTableColumnModel")]
		public void SetTableColumnModel(qx.ui.table.columnmodel.Basic tableColumnModel) { throw new NotImplementedException(); }

		#endregion Methods
    }
}