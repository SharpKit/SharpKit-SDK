// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core.scroll;

namespace qx.ui.table.pane
{
    /// <summary>
	/// <para>Shows a whole meta column. This includes a <see cref="Header"/>,
	/// a <see cref="Pane"/> and the needed scroll bars. This class handles the
	/// virtual scrolling and does all the mouse event handling.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.pane.Scroller", OmitOptionalParameters = true, Export = false)]
    public partial class Scroller : qx.ui.core.Widget
    {
		#region Events

		/// <summary>
		/// <para>Dispatched when a sortable header was clicked</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnBeforeSort;

		/// <summary>
		/// <para>See <see cref="qx.ui.table.Table.CellClick"/>.</para>
		/// </summary>
		public event Action<qx.ui.table.pane.CellEvent> OnCellClick;

		/// <summary>
		/// <para>See <see cref="qx.ui.table.Table.CellContextmenu"/>.</para>
		/// </summary>
		public event Action<qx.ui.table.pane.CellEvent> OnCellContextmenu;

		/// <summary>
		/// <para>See <see cref="qx.ui.table.Table.CellDblclick"/>.</para>
		/// </summary>
		public event Action<qx.ui.table.pane.CellEvent> OnCellDblclick;

		/// <summary>
		/// Fired on change of the property <see cref="HorizontalScrollBarVisible"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeHorizontalScrollBarVisible;

		/// <summary>
		/// <para>Dispatched if the pane is scrolled vertically</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeScrollX;

		/// <summary>
		/// <para>Dispatched if the pane is scolled horizontally</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeScrollY;

		/// <summary>
		/// Fired on change of the property <see cref="TablePaneModel"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeTablePaneModel;

		/// <summary>
		/// Fired on change of the property <see cref="VerticalScrollBarVisible"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeVerticalScrollBarVisible;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>By default, the &#8220;cellContextmenu&#8221; event is fired only when a data cell
		/// is right-clicked. It is not fired when a right-click occurs in the
		/// empty area of the table below the last data row. By turning on this
		/// property, &#8220;cellContextMenu&#8221; events will also be generated when a
		/// right-click occurs in that empty area. In such a case, row identifier
		/// in the event data will be null, so event handlers can check (row ===
		/// null) to handle this case.</para>
		/// </summary>
		[JsProperty(Name = "contextMenuFromDataCellsOnly", NativeField = true)]
		public bool ContextMenuFromDataCellsOnly { get; set; }

		/// <summary>
		/// <para>Whether the focus should moved when the mouse is moved over a cell. If false
		/// the focus is only moved on mouse clicks.</para>
		/// </summary>
		[JsProperty(Name = "focusCellOnMouseMove", NativeField = true)]
		public bool FocusCellOnMouseMove { get; set; }

		/// <summary>
		/// <para>Whether to show the horizontal scroll bar</para>
		/// </summary>
		[JsProperty(Name = "horizontalScrollBarVisible", NativeField = true)]
		public bool HorizontalScrollBarVisible { get; set; }

		/// <summary>
		/// <para>Whether column resize should be live. If false, during resize only a line is
		/// shown and the real resize happens when the user releases the mouse button.</para>
		/// </summary>
		[JsProperty(Name = "liveResize", NativeField = true)]
		public bool LiveResize { get; set; }

		/// <summary>
		/// <para>Whether to reset the selection when a header cell is clicked. Since
		/// most data models do not have provisions to retain a selection after
		/// sorting, the default is to reset the selection in this case. Some data
		/// models, however, do have the capability to retain the selection, so
		/// when using those, this property should be set to false.</para>
		/// </summary>
		[JsProperty(Name = "resetSelectionOnHeaderClick", NativeField = true)]
		public bool ResetSelectionOnHeaderClick { get; set; }

		/// <summary>
		/// <para>Interval time (in milliseconds) for the table update timer.
		/// Setting this to 0 clears the timer.</para>
		/// </summary>
		[JsProperty(Name = "scrollTimeout", NativeField = true)]
		public double ScrollTimeout { get; set; }

		/// <summary>
		/// <para>Whether to handle selections via the selection manager before setting the
		/// focus.  The traditional behavior is to handle selections after setting the
		/// focus, but setting the focus means redrawing portions of the table, and
		/// some subclasses may want to modify the data to be displayed based on the
		/// selection.</para>
		/// </summary>
		[JsProperty(Name = "selectBeforeFocus", NativeField = true)]
		public bool SelectBeforeFocus { get; set; }

		/// <summary>
		/// <para>Whether the cell focus indicator should be shown</para>
		/// </summary>
		[JsProperty(Name = "showCellFocusIndicator", NativeField = true)]
		public bool ShowCellFocusIndicator { get; set; }

		/// <summary>
		/// <para>The table pane model.</para>
		/// </summary>
		[JsProperty(Name = "tablePaneModel", NativeField = true)]
		public qx.ui.table.pane.Model TablePaneModel { get; set; }

		/// <summary>
		/// <para>Whether to show the vertical scroll bar</para>
		/// </summary>
		[JsProperty(Name = "verticalScrollBarVisible", NativeField = true)]
		public bool VerticalScrollBarVisible { get; set; }

		#endregion Properties

		#region Methods

		public Scroller() { throw new NotImplementedException(); }

		/// <param name="table">the table the scroller belongs to.</param>
		public Scroller(qx.ui.table.Table table) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stops editing without writing the editor&#8217;s value to the model.</para>
		/// </summary>
		[JsMethod(Name = "cancelEditing")]
		public void CancelEditing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Writes the editor&#8217;s value to the model.</para>
		/// </summary>
		[JsMethod(Name = "flushEditor")]
		public void FlushEditor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property contextMenuFromDataCellsOnly.</para>
		/// </summary>
		[JsMethod(Name = "getContextMenuFromDataCellsOnly")]
		public bool GetContextMenuFromDataCellsOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property focusCellOnMouseMove.</para>
		/// </summary>
		[JsMethod(Name = "getFocusCellOnMouseMove")]
		public bool GetFocusCellOnMouseMove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the column of currently focused cell.</para>
		/// </summary>
		/// <returns>the model index of the focused cell&#8217;s column.</returns>
		[JsMethod(Name = "getFocusedColumn")]
		public double GetFocusedColumn() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the row of currently focused cell.</para>
		/// </summary>
		/// <returns>the model index of the focused cell&#8217;s column.</returns>
		[JsMethod(Name = "getFocusedRow")]
		public double GetFocusedRow() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the header.</para>
		/// </summary>
		/// <returns>the header.</returns>
		[JsMethod(Name = "getHeader")]
		public qx.ui.table.pane.Header GetHeader() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property horizontalScrollBarVisible.</para>
		/// </summary>
		[JsMethod(Name = "getHorizontalScrollBarVisible")]
		public bool GetHorizontalScrollBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property liveResize.</para>
		/// </summary>
		[JsMethod(Name = "getLiveResize")]
		public bool GetLiveResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns which scrollbars are needed.</para>
		/// </summary>
		/// <param name="forceHorizontal">Whether to show the horizontal scrollbar always.</param>
		/// <param name="preventVertical">Whether to show the vertical scrollbar never.</param>
		/// <returns>which scrollbars are needed. This may be any combination of #HORIZONTAL_SCROLLBAR or #VERTICAL_SCROLLBAR (combined by OR).</returns>
		[JsMethod(Name = "getNeededScrollBars")]
		public double GetNeededScrollBars(bool forceHorizontal = false, bool preventVertical = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the pane clipper. It is sometimes required for special activities
		/// such as tracking events for drag&amp;drop.</para>
		/// </summary>
		/// <returns>The pane clipper for this scroller.</returns>
		[JsMethod(Name = "getPaneClipper")]
		public qx.ui.table.pane.Clipper GetPaneClipper() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The right inset of the pane. The right inset is the maximum of the
		/// top right widget width and the scrollbar width (if visible).</para>
		/// </summary>
		/// <returns>The right inset of the pane</returns>
		[JsMethod(Name = "getPaneInsetRight")]
		public double GetPaneInsetRight() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property resetSelectionOnHeaderClick.</para>
		/// </summary>
		[JsMethod(Name = "getResetSelectionOnHeaderClick")]
		public bool GetResetSelectionOnHeaderClick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property scrollTimeout.</para>
		/// </summary>
		[JsMethod(Name = "getScrollTimeout")]
		public double GetScrollTimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the current position of the vertical scroll bar.</para>
		/// </summary>
		/// <returns>The current scroll position.</returns>
		[JsMethod(Name = "getScrollX")]
		public double GetScrollX() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the current position of the vertical scroll bar.</para>
		/// </summary>
		/// <returns>The current scroll position.</returns>
		[JsMethod(Name = "getScrollY")]
		public double GetScrollY() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property selectBeforeFocus.</para>
		/// </summary>
		[JsMethod(Name = "getSelectBeforeFocus")]
		public bool GetSelectBeforeFocus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property showCellFocusIndicator.</para>
		/// </summary>
		[JsMethod(Name = "getShowCellFocusIndicator")]
		public bool GetShowCellFocusIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the table this scroller belongs to.</para>
		/// </summary>
		/// <returns>the table.</returns>
		[JsMethod(Name = "getTable")]
		public qx.ui.table.Table GetTable() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the table pane.</para>
		/// </summary>
		/// <returns>the table pane.</returns>
		[JsMethod(Name = "getTablePane")]
		public qx.ui.table.pane.Pane GetTablePane() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property tablePaneModel.</para>
		/// </summary>
		[JsMethod(Name = "getTablePaneModel")]
		public qx.ui.table.pane.Model GetTablePaneModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the top right widget</para>
		/// </summary>
		/// <returns>The top right widget.</returns>
		[JsMethod(Name = "getTopRightWidget")]
		public qx.ui.core.Widget GetTopRightWidget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property verticalScrollBarVisible.</para>
		/// </summary>
		[JsMethod(Name = "getVerticalScrollBarVisible")]
		public bool GetVerticalScrollBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hides the feedback shown while a column is moved by the user.</para>
		/// </summary>
		[JsMethod(Name = "hideColumnMoveFeedback")]
		public void HideColumnMoveFeedback() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property contextMenuFromDataCellsOnly
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property contextMenuFromDataCellsOnly.</param>
		[JsMethod(Name = "initContextMenuFromDataCellsOnly")]
		public void InitContextMenuFromDataCellsOnly(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property focusCellOnMouseMove
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property focusCellOnMouseMove.</param>
		[JsMethod(Name = "initFocusCellOnMouseMove")]
		public void InitFocusCellOnMouseMove(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property horizontalScrollBarVisible
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property horizontalScrollBarVisible.</param>
		[JsMethod(Name = "initHorizontalScrollBarVisible")]
		public void InitHorizontalScrollBarVisible(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property liveResize
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property liveResize.</param>
		[JsMethod(Name = "initLiveResize")]
		public void InitLiveResize(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property resetSelectionOnHeaderClick
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property resetSelectionOnHeaderClick.</param>
		[JsMethod(Name = "initResetSelectionOnHeaderClick")]
		public void InitResetSelectionOnHeaderClick(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property scrollTimeout
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property scrollTimeout.</param>
		[JsMethod(Name = "initScrollTimeout")]
		public void InitScrollTimeout(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property selectBeforeFocus
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property selectBeforeFocus.</param>
		[JsMethod(Name = "initSelectBeforeFocus")]
		public void InitSelectBeforeFocus(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property showCellFocusIndicator
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property showCellFocusIndicator.</param>
		[JsMethod(Name = "initShowCellFocusIndicator")]
		public void InitShowCellFocusIndicator(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property tablePaneModel
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property tablePaneModel.</param>
		[JsMethod(Name = "initTablePaneModel")]
		public void InitTablePaneModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property verticalScrollBarVisible
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property verticalScrollBarVisible.</param>
		[JsMethod(Name = "initVerticalScrollBarVisible")]
		public void InitVerticalScrollBarVisible(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property contextMenuFromDataCellsOnly equals true.</para>
		/// </summary>
		[JsMethod(Name = "isContextMenuFromDataCellsOnly")]
		public void IsContextMenuFromDataCellsOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns whether currently a cell is editing.</para>
		/// </summary>
		/// <returns>whether currently a cell is editing.</returns>
		[JsMethod(Name = "isEditing")]
		public object IsEditing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property focusCellOnMouseMove equals true.</para>
		/// </summary>
		[JsMethod(Name = "isFocusCellOnMouseMove")]
		public void IsFocusCellOnMouseMove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property horizontalScrollBarVisible equals true.</para>
		/// </summary>
		[JsMethod(Name = "isHorizontalScrollBarVisible")]
		public void IsHorizontalScrollBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property liveResize equals true.</para>
		/// </summary>
		[JsMethod(Name = "isLiveResize")]
		public void IsLiveResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property resetSelectionOnHeaderClick equals true.</para>
		/// </summary>
		[JsMethod(Name = "isResetSelectionOnHeaderClick")]
		public void IsResetSelectionOnHeaderClick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property selectBeforeFocus equals true.</para>
		/// </summary>
		[JsMethod(Name = "isSelectBeforeFocus")]
		public void IsSelectBeforeFocus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property showCellFocusIndicator equals true.</para>
		/// </summary>
		[JsMethod(Name = "isShowCellFocusIndicator")]
		public void IsShowCellFocusIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property verticalScrollBarVisible equals true.</para>
		/// </summary>
		[JsMethod(Name = "isVerticalScrollBarVisible")]
		public void IsVerticalScrollBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the column order has changed.</para>
		/// </summary>
		[JsMethod(Name = "onColOrderChanged")]
		public void OnColOrderChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the visibility of a column has changed.</para>
		/// </summary>
		[JsMethod(Name = "onColVisibilityChanged")]
		public void OnColVisibilityChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the table gets or looses the focus.</para>
		/// </summary>
		[JsMethod(Name = "onFocusChanged")]
		public void OnFocusChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the table property &#8220;keepFirstVisibleRowComplete&#8221;
		/// changed.</para>
		/// </summary>
		[JsMethod(Name = "onKeepFirstVisibleRowCompleteChanged")]
		public void OnKeepFirstVisibleRowCompleteChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the selection has changed.</para>
		/// </summary>
		[JsMethod(Name = "onSelectionChanged")]
		public void OnSelectionChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the table model has changed.</para>
		/// </summary>
		/// <param name="firstRow">The index of the first row that has changed.</param>
		/// <param name="lastRow">The index of the last row that has changed.</param>
		/// <param name="firstColumn">The model index of the first column that has changed.</param>
		/// <param name="lastColumn">The model index of the last column that has changed.</param>
		[JsMethod(Name = "onTableModelDataChanged")]
		public void OnTableModelDataChanged(double firstRow, double lastRow, double firstColumn, double lastColumn) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Event handler. Called when the table model meta data has changed.</para>
		/// </summary>
		[JsMethod(Name = "onTableModelMetaDataChanged")]
		public void OnTableModelMetaDataChanged() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property contextMenuFromDataCellsOnly.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetContextMenuFromDataCellsOnly")]
		public void ResetContextMenuFromDataCellsOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property focusCellOnMouseMove.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFocusCellOnMouseMove")]
		public void ResetFocusCellOnMouseMove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property horizontalScrollBarVisible.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetHorizontalScrollBarVisible")]
		public void ResetHorizontalScrollBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property liveResize.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLiveResize")]
		public void ResetLiveResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property resetSelectionOnHeaderClick.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResetSelectionOnHeaderClick")]
		public void ResetResetSelectionOnHeaderClick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property scrollTimeout.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetScrollTimeout")]
		public void ResetScrollTimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property selectBeforeFocus.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSelectBeforeFocus")]
		public void ResetSelectBeforeFocus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property showCellFocusIndicator.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetShowCellFocusIndicator")]
		public void ResetShowCellFocusIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property tablePaneModel.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTablePaneModel")]
		public void ResetTablePaneModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property verticalScrollBarVisible.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetVerticalScrollBarVisible")]
		public void ResetVerticalScrollBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Scrolls a cell visible.</para>
		/// </summary>
		/// <param name="col">the model index of the column the cell belongs to.</param>
		/// <param name="row">the model index of the row the cell belongs to.</param>
		[JsMethod(Name = "scrollCellVisible")]
		public void ScrollCellVisible(double col, double row) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the column width.</para>
		/// </summary>
		/// <param name="col">the column to change the width for.</param>
		/// <param name="width">the new width.</param>
		[JsMethod(Name = "setColumnWidth")]
		public void SetColumnWidth(double col, double width) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property contextMenuFromDataCellsOnly.</para>
		/// </summary>
		/// <param name="value">New value for property contextMenuFromDataCellsOnly.</param>
		[JsMethod(Name = "setContextMenuFromDataCellsOnly")]
		public void SetContextMenuFromDataCellsOnly(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property focusCellOnMouseMove.</para>
		/// </summary>
		/// <param name="value">New value for property focusCellOnMouseMove.</param>
		[JsMethod(Name = "setFocusCellOnMouseMove")]
		public void SetFocusCellOnMouseMove(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the currently focused cell.</para>
		/// </summary>
		/// <param name="col">the model index of the focused cell&#8217;s column.</param>
		/// <param name="row">the model index of the focused cell&#8217;s row.</param>
		[JsMethod(Name = "setFocusedCell")]
		public void SetFocusedCell(double col, double row) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property horizontalScrollBarVisible.</para>
		/// </summary>
		/// <param name="value">New value for property horizontalScrollBarVisible.</param>
		[JsMethod(Name = "setHorizontalScrollBarVisible")]
		public void SetHorizontalScrollBarVisible(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property liveResize.</para>
		/// </summary>
		/// <param name="value">New value for property liveResize.</param>
		[JsMethod(Name = "setLiveResize")]
		public void SetLiveResize(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the pane&#8217;s width</para>
		/// </summary>
		/// <param name="width">The pane&#8217;s width</param>
		[JsMethod(Name = "setPaneWidth")]
		public void SetPaneWidth(double width) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property resetSelectionOnHeaderClick.</para>
		/// </summary>
		/// <param name="value">New value for property resetSelectionOnHeaderClick.</param>
		[JsMethod(Name = "setResetSelectionOnHeaderClick")]
		public void SetResetSelectionOnHeaderClick(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property scrollTimeout.</para>
		/// </summary>
		/// <param name="value">New value for property scrollTimeout.</param>
		[JsMethod(Name = "setScrollTimeout")]
		public void SetScrollTimeout(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the current position of the vertical scroll bar.</para>
		/// </summary>
		/// <param name="scrollX">The new scroll position.</param>
		[JsMethod(Name = "setScrollX")]
		public void SetScrollX(double scrollX) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the current position of the vertical scroll bar.</para>
		/// </summary>
		/// <param name="scrollY">The new scroll position.</param>
		/// <param name="renderSync">Whether the table update should be performed synchonously.</param>
		[JsMethod(Name = "setScrollY")]
		public void SetScrollY(double scrollY, bool renderSync = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property selectBeforeFocus.</para>
		/// </summary>
		/// <param name="value">New value for property selectBeforeFocus.</param>
		[JsMethod(Name = "setSelectBeforeFocus")]
		public void SetSelectBeforeFocus(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property showCellFocusIndicator.</para>
		/// </summary>
		/// <param name="value">New value for property showCellFocusIndicator.</param>
		[JsMethod(Name = "setShowCellFocusIndicator")]
		public void SetShowCellFocusIndicator(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property tablePaneModel.</para>
		/// </summary>
		/// <param name="value">New value for property tablePaneModel.</param>
		[JsMethod(Name = "setTablePaneModel")]
		public void SetTablePaneModel(qx.ui.table.pane.Model value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the widget that should be shown in the top right corner.</para>
		/// <para>The widget will not be disposed, when this table scroller is disposed. So the
		/// caller has to dispose it.</para>
		/// </summary>
		/// <param name="widget">The widget to set. May be null.</param>
		[JsMethod(Name = "setTopRightWidget")]
		public void SetTopRightWidget(qx.ui.core.Widget widget) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property verticalScrollBarVisible.</para>
		/// </summary>
		/// <param name="value">New value for property verticalScrollBarVisible.</param>
		[JsMethod(Name = "setVerticalScrollBarVisible")]
		public void SetVerticalScrollBarVisible(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Shows the feedback shown while a column is moved by the user.</para>
		/// </summary>
		/// <param name="pageX">the x position of the mouse in the page (in pixels).</param>
		/// <returns>the visible x position of the column in the whole table.</returns>
		[JsMethod(Name = "showColumnMoveFeedback")]
		public double ShowColumnMoveFeedback(double pageX) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Starts editing the currently focused cell. Does nothing if already
		/// editing, if the column is not editable, or if the cell editor for the
		/// column ascertains that the particular cell is not editable.</para>
		/// </summary>
		/// <returns>whether editing was started</returns>
		[JsMethod(Name = "startEditing")]
		public bool StartEditing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stops editing and writes the editor&#8217;s value to the model.</para>
		/// </summary>
		[JsMethod(Name = "stopEditing")]
		public void StopEditing() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property contextMenuFromDataCellsOnly.</para>
		/// </summary>
		[JsMethod(Name = "toggleContextMenuFromDataCellsOnly")]
		public void ToggleContextMenuFromDataCellsOnly() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property focusCellOnMouseMove.</para>
		/// </summary>
		[JsMethod(Name = "toggleFocusCellOnMouseMove")]
		public void ToggleFocusCellOnMouseMove() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property horizontalScrollBarVisible.</para>
		/// </summary>
		[JsMethod(Name = "toggleHorizontalScrollBarVisible")]
		public void ToggleHorizontalScrollBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property liveResize.</para>
		/// </summary>
		[JsMethod(Name = "toggleLiveResize")]
		public void ToggleLiveResize() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property resetSelectionOnHeaderClick.</para>
		/// </summary>
		[JsMethod(Name = "toggleResetSelectionOnHeaderClick")]
		public void ToggleResetSelectionOnHeaderClick() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property selectBeforeFocus.</para>
		/// </summary>
		[JsMethod(Name = "toggleSelectBeforeFocus")]
		public void ToggleSelectBeforeFocus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property showCellFocusIndicator.</para>
		/// </summary>
		[JsMethod(Name = "toggleShowCellFocusIndicator")]
		public void ToggleShowCellFocusIndicator() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property verticalScrollBarVisible.</para>
		/// </summary>
		[JsMethod(Name = "toggleVerticalScrollBarVisible")]
		public void ToggleVerticalScrollBarVisible() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Updates the maximum of the horizontal scroll bar, so it corresponds to the
		/// total width of the columns in the table pane.</para>
		/// </summary>
		[JsMethod(Name = "updateHorScrollBarMaximum")]
		public void UpdateHorScrollBarMaximum() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Updates the maximum of the vertical scroll bar, so it corresponds to the
		/// number of rows in the table.</para>
		/// </summary>
		[JsMethod(Name = "updateVerScrollBarMaximum")]
		public void UpdateVerScrollBarMaximum() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns true if touch momentum is currently on progress.</para>
		/// </summary>
		/// <returns>true if in momentum</returns>
		[JsMethod(Name = "inTouchMomentum")]
		public bool InTouchMomentum() { throw new NotImplementedException(); }

		#endregion Methods
    }
}