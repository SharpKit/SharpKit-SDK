// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.table.headerrenderer
{
    /// <summary>
	/// <para>The default header cell renderer.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.table.headerrenderer.Default", OmitOptionalParameters = true, Export = false)]
    public partial class Default : qx.core.Object, qx.ui.table.IHeaderRenderer
    {
		#region Properties

		/// <summary>
		/// <para>ToolTip to show if the mouse hovers of the icon</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "toolTip", NativeField = true)]
		public string ToolTip { get; set; }

		#endregion Properties

		#region Methods

		public Default() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates a header cell.</para>
		/// <para>The cellInfo map contains the following properties:
		/// <list type="bullet">
		/// <item>col (int): the model index of the column.</item>
		/// <item>xPos (int): the x position of the column in the table pane.</item>
		/// <item>name (string): the name of the column.</item>
		/// <item>editable (boolean): whether the column is editable.</item>
		/// <item>sorted (boolean): whether the column is sorted.</item>
		/// <item>sortedAscending (boolean): whether sorting is ascending.</item>
		/// </list</para>
		/// </summary>
		/// <param name="cellInfo">A map containing the information about the cell to create.</param>
		/// <returns>the widget that renders the header cell.</returns>
		[JsMethod(Name = "createHeaderCell")]
		public qx.ui.core.Widget CreateHeaderCell(object cellInfo) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property toolTip.</para>
		/// </summary>
		[JsMethod(Name = "getToolTip")]
		public string GetToolTip() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property toolTip
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property toolTip.</param>
		[JsMethod(Name = "initToolTip")]
		public void InitToolTip(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property toolTip.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetToolTip")]
		public void ResetToolTip() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property toolTip.</para>
		/// </summary>
		/// <param name="value">New value for property toolTip.</param>
		[JsMethod(Name = "setToolTip")]
		public void SetToolTip(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Updates a header cell.</para>
		/// </summary>
		/// <param name="cellInfo">A map containing the information about the cell to create. This map has the same structure as in #createHeaderCell.</param>
		/// <param name="cellWidget">the widget that renders the header cell. This is the same widget formally created by #createHeaderCell.</param>
		[JsMethod(Name = "updateHeaderCell")]
		public void UpdateHeaderCell(object cellInfo, qx.ui.core.Widget cellWidget) { throw new NotImplementedException(); }

		#endregion Methods
    }
}