// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.form
{
    /// <summary>
	/// <para>The Slider widget provides a vertical or horizontal slider.</para>
	/// <para>The Slider is the classic widget for controlling a bounded value.
	/// It lets the user move a slider handle along a horizontal or vertical
	/// groove and translates the handle&#8217;s position into an integer value
	/// within the defined range.</para>
	/// <para>The Slider has very few of its own functions.
	/// The most useful functions are slideTo() to set the slider directly to some
	/// value; setSingleStep(), setPageStep() to set the steps; and setMinimum()
	/// and setMaximum() to define the range of the slider.</para>
	/// <para>A slider accepts focus on Tab and provides both a mouse wheel and
	/// a keyboard interface. The keyboard interface is the following:</para>
	/// <list type="bullet">
	/// <item>Left/Right move a horizontal slider by one single step.</item>
	/// <item>Up/Down move a vertical slider by one single step.</item>
	/// <item>PageUp moves up one page.</item>
	/// <item>PageDown moves down one page.</item>
	/// <item>Home moves to the start (minimum).</item>
	/// <item>End moves to the end (maximum).</item>
	/// </list
	/// <para>Here are the main properties of the class:</para>
	/// 
	/// <item>value: The bounded integer that <see cref="qx.ui.form.INumberForm"/>
	/// maintains.</item>
	/// <item>minimum: The lowest possible value.</item>
	/// <item>maximum: The highest possible value.</item>
	/// <item>singleStep: The smaller of two natural steps that an abstract
	/// sliders provides and typically corresponds to the user pressing an arrow key.</item>
	/// <item>pageStep: The larger of two natural steps that an abstract
	/// slider provides and typically corresponds to the user pressing PageUp or
	/// PageDown.</item>
	/// 
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.form.Slider", OmitOptionalParameters = true, Export = false)]
    public partial class Slider : qx.ui.core.Widget, qx.ui.form.IForm, qx.ui.form.INumberForm, qx.ui.form.IRange
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Maximum"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeMaximum;

		/// <summary>
		/// Fired on change of the property <see cref="Minimum"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeMinimum;

		/// <summary>
		/// <para>Fired when the value was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeValue;

		/// <summary>
		/// <para>Fired as soon as the slide animation ended.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnSlideAnimationEnd;

		/// <summary>
		/// <para>Fired when the invalidMessage was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeInvalidMessage;

		/// <summary>
		/// <para>Fired when the required was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeRequired;

		/// <summary>
		/// <para>Fired when the valid state was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeValid;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Whether the widget is focusable e.g. rendering a focus border and visualize
		/// as active element.</para>
		/// <para>See also <see cref="IsTabable"/> which allows runtime checks for
		/// isChecked or other stuff to test whether the widget is
		/// reachable via the TAB key.</para>
		/// </summary>
		[JsProperty(Name = "focusable", NativeField = true)]
		public bool Focusable { get; set; }

		/// <summary>
		/// <para>Factor to apply to the width/height of the knob in relation
		/// to the dimension of the underlying area.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "knobFactor", NativeField = true)]
		public double KnobFactor { get; set; }

		/// <summary>
		/// <para>The maximum slider value (may be negative). This value must be larger
		/// than <see cref="Minimum"/>.</para>
		/// </summary>
		[JsProperty(Name = "maximum", NativeField = true)]
		public double Maximum { get; set; }

		/// <summary>
		/// <para>The minimum slider value (may be negative). This value must be smaller
		/// than <see cref="Maximum"/>.</para>
		/// </summary>
		[JsProperty(Name = "minimum", NativeField = true)]
		public double Minimum { get; set; }

		/// <summary>
		/// <para>Whether the slider is horizontal or vertical.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "horizontal","vertical"
		/// </remarks>
		[JsProperty(Name = "orientation", NativeField = true)]
		public object Orientation { get; set; }

		/// <summary>
		/// <para>The amount to increment on each event. Typically corresponds
		/// to the user pressing PageUp or PageDown.</para>
		/// </summary>
		[JsProperty(Name = "pageStep", NativeField = true)]
		public double PageStep { get; set; }

		/// <summary>
		/// <para>The amount to increment on each event. Typically corresponds
		/// to the user pressing an arrow key.</para>
		/// </summary>
		[JsProperty(Name = "singleStep", NativeField = true)]
		public double SingleStep { get; set; }

		/// <summary>
		/// <para>The current slider value.</para>
		/// <para>Strictly validates according to <see cref="Minimum"/> and <see cref="Maximum"/>.
		/// Do not apply any value correction to the incoming value. If you depend
		/// on this, please use <see cref="SlideTo"/> instead.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "value", NativeField = true)]
		public object Value { get; set; }

		/// <summary>
		/// <para>Message which is shown in an invalid tooltip.</para>
		/// </summary>
		[JsProperty(Name = "invalidMessage", NativeField = true)]
		public string InvalidMessage { get; set; }

		/// <summary>
		/// <para>Flag signaling if a widget is required.</para>
		/// </summary>
		[JsProperty(Name = "required", NativeField = true)]
		public bool Required { get; set; }

		/// <summary>
		/// <para>Message which is shown in an invalid tooltip if the <see cref="Required"/> is
		/// set to true.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "requiredInvalidMessage", NativeField = true)]
		public string RequiredInvalidMessage { get; set; }

		/// <summary>
		/// <para>Flag signaling if a widget is valid. If a widget is invalid, an invalid
		/// state will be set.</para>
		/// </summary>
		[JsProperty(Name = "valid", NativeField = true)]
		public bool Valid { get; set; }

		#endregion Properties

		#region Methods

		public Slider() { throw new NotImplementedException(); }

		/// <param name="orientation">Configure the #orientation property</param>
		public Slider(string orientation = "horizontal") { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property knobFactor.</para>
		/// </summary>
		[JsMethod(Name = "getKnobFactor")]
		public double GetKnobFactor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the current set maximum of the range.</para>
		/// </summary>
		/// <returns>The current set maximum.</returns>
		[JsMethod(Name = "getMaximum")]
		public double GetMaximum() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the current set minimum of the range.</para>
		/// </summary>
		/// <returns>The current set minimum.</returns>
		[JsMethod(Name = "getMinimum")]
		public double GetMinimum() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property orientation.</para>
		/// </summary>
		[JsMethod(Name = "getOrientation")]
		public object GetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the value which will be stepped in a page step in the range.</para>
		/// </summary>
		/// <returns>The current value for page steps.</returns>
		[JsMethod(Name = "getPageStep")]
		public double GetPageStep() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the value which will be stepped in a single step in the range.</para>
		/// </summary>
		/// <returns>The current value for single steps.</returns>
		[JsMethod(Name = "getSingleStep")]
		public double GetSingleStep() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The element&#8217;s user set value.</para>
		/// </summary>
		/// <returns>The value.</returns>
		[JsMethod(Name = "getValue")]
		public double GetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property knobFactor
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property knobFactor.</param>
		[JsMethod(Name = "initKnobFactor")]
		public void InitKnobFactor(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property maximum
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property maximum.</param>
		[JsMethod(Name = "initMaximum")]
		public void InitMaximum(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property minimum
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property minimum.</param>
		[JsMethod(Name = "initMinimum")]
		public void InitMinimum(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property orientation
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property orientation.</param>
		[JsMethod(Name = "initOrientation")]
		public void InitOrientation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property pageStep
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property pageStep.</param>
		[JsMethod(Name = "initPageStep")]
		public void InitPageStep(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property singleStep
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property singleStep.</param>
		[JsMethod(Name = "initSingleStep")]
		public void InitSingleStep(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property value
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property value.</param>
		[JsMethod(Name = "initValue")]
		public void InitValue(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property knobFactor.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetKnobFactor")]
		public void ResetKnobFactor() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property maximum.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMaximum")]
		public void ResetMaximum() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property minimum.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMinimum")]
		public void ResetMinimum() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property orientation.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetOrientation")]
		public void ResetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property pageStep.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPageStep")]
		public void ResetPageStep() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property singleStep.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSingleStep")]
		public void ResetSingleStep() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the element&#8217;s value to its initial value.</para>
		/// </summary>
		[JsMethod(Name = "resetValue")]
		public void ResetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property knobFactor.</para>
		/// </summary>
		/// <param name="value">New value for property knobFactor.</param>
		[JsMethod(Name = "setKnobFactor")]
		public void SetKnobFactor(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the maximum value of the range.</para>
		/// </summary>
		/// <param name="max">The maximum.</param>
		[JsMethod(Name = "setMaximum")]
		public void SetMaximum(double max) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the minimum value of the range.</para>
		/// </summary>
		/// <param name="min">The minimum.</param>
		[JsMethod(Name = "setMinimum")]
		public void SetMinimum(double min) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property orientation.</para>
		/// </summary>
		/// <param name="value">New value for property orientation.</param>
		[JsMethod(Name = "setOrientation")]
		public void SetOrientation(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the value for page steps in the range.</para>
		/// </summary>
		/// <param name="step">The value of the step.</param>
		[JsMethod(Name = "setPageStep")]
		public void SetPageStep(double step) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the value for single steps in the range.</para>
		/// </summary>
		/// <param name="step">The value of the step.</param>
		[JsMethod(Name = "setSingleStep")]
		public void SetSingleStep(double step) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the element&#8217;s value.</para>
		/// </summary>
		/// <param name="value">The new value of the element.</param>
		[JsMethod(Name = "setValue")]
		public void SetValue(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Slides backward (to left or top depending on orientation)</para>
		/// </summary>
		[JsMethod(Name = "slideBack")]
		public void SlideBack() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Slides by the given offset.</para>
		/// <para>This method works with the value, not with the coordinate.</para>
		/// </summary>
		/// <param name="offset">Offset to scroll by</param>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		[JsMethod(Name = "slideBy")]
		public void SlideBy(double offset, double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Slides forward (right or bottom depending on orientation)</para>
		/// </summary>
		[JsMethod(Name = "slideForward")]
		public void SlideForward() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Slides a page backward (to left or top depending on orientation)</para>
		/// </summary>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		[JsMethod(Name = "slidePageBack")]
		public void SlidePageBack(double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Slides a page forward (to right or bottom depending on orientation)</para>
		/// </summary>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		[JsMethod(Name = "slidePageForward")]
		public void SlidePageForward(double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Slides to the given value</para>
		/// <para>This method works with the value, not with the coordinate.</para>
		/// </summary>
		/// <param name="value">Scroll to a value between the defined minimum and maximum.</param>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		[JsMethod(Name = "slideTo")]
		public void SlideTo(double value, double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Slides backward to the minimum value</para>
		/// </summary>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		[JsMethod(Name = "slideToBegin")]
		public void SlideToBegin(double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Slides forward to the maximum value</para>
		/// </summary>
		/// <param name="duration">The time in milliseconds the slide to should take.</param>
		[JsMethod(Name = "slideToEnd")]
		public void SlideToEnd(double duration) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the invalid message of the widget.</para>
		/// </summary>
		/// <returns>The current set message.</returns>
		[JsMethod(Name = "getInvalidMessage")]
		public string GetInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the current required state of the widget.</para>
		/// </summary>
		/// <returns>True, if the widget is required.</returns>
		[JsMethod(Name = "getRequired")]
		public bool GetRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the invalid message if required of the widget.</para>
		/// </summary>
		/// <returns>The current set message.</returns>
		[JsMethod(Name = "getRequiredInvalidMessage")]
		public string GetRequiredInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the valid state of the widget.</para>
		/// </summary>
		/// <returns>If the state of the widget is valid.</returns>
		[JsMethod(Name = "getValid")]
		public bool GetValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property invalidMessage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property invalidMessage.</param>
		[JsMethod(Name = "initInvalidMessage")]
		public void InitInvalidMessage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property required
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property required.</param>
		[JsMethod(Name = "initRequired")]
		public void InitRequired(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property requiredInvalidMessage
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property requiredInvalidMessage.</param>
		[JsMethod(Name = "initRequiredInvalidMessage")]
		public void InitRequiredInvalidMessage(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property valid
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property valid.</param>
		[JsMethod(Name = "initValid")]
		public void InitValid(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property required equals true.</para>
		/// </summary>
		[JsMethod(Name = "isRequired")]
		public void IsRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property valid equals true.</para>
		/// </summary>
		[JsMethod(Name = "isValid")]
		public void IsValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property invalidMessage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInvalidMessage")]
		public void ResetInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property required.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRequired")]
		public void ResetRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property requiredInvalidMessage.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRequiredInvalidMessage")]
		public void ResetRequiredInvalidMessage() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property valid.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetValid")]
		public void ResetValid() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the invalid message of the widget.</para>
		/// </summary>
		/// <param name="message">The invalid message.</param>
		[JsMethod(Name = "setInvalidMessage")]
		public void SetInvalidMessage(string message) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the required state of a widget.</para>
		/// </summary>
		/// <param name="required">A flag signaling if the widget is required.</param>
		[JsMethod(Name = "setRequired")]
		public void SetRequired(bool required) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the invalid message if required of the widget.</para>
		/// </summary>
		/// <param name="message">The invalid message.</param>
		[JsMethod(Name = "setRequiredInvalidMessage")]
		public void SetRequiredInvalidMessage(string message) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the valid state of the widget.</para>
		/// </summary>
		/// <param name="valid">The valid state of the widget.</param>
		[JsMethod(Name = "setValid")]
		public void SetValid(bool valid) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property required.</para>
		/// </summary>
		[JsMethod(Name = "toggleRequired")]
		public void ToggleRequired() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property valid.</para>
		/// </summary>
		[JsMethod(Name = "toggleValid")]
		public void ToggleValid() { throw new NotImplementedException(); }

		#endregion Methods
    }
}