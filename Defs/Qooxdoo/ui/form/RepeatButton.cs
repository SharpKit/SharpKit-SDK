// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.form
{
    /// <summary>
	/// <para>The RepeatButton is a special button, which fires repeatedly <see cref="Execute"/>
	/// events, while the mouse button is pressed on the button. The initial delay
	/// and the interval time can be set using the properties <see cref="FirstInterval"/>
	/// and <see cref="Interval"/>. The <see cref="Execute"/> events will be fired in a shorter
	/// amount of time if the mouse button is hold, until the min <see cref="MinTimer"/>
	/// is reached. The <see cref="TimerDecrease"/> property sets the amount of milliseconds
	/// which will decreased after every firing.</para>
	/// <code>
	/// var button = new qx.ui.form.RepeatButton("Hello World");
	/// button.addListener("execute", function(e) {
	/// alert("Button is executed");
	/// }, this);
	/// this.getRoot.add(button);
	/// </code>
	/// <para>This example creates a button with the label &#8220;Hello World&#8221; and attaches an
	/// event listener to the <see cref="Execute"/> event.</para>
	/// <para>External Documentation</para>
	/// 
	/// Documentation of this widget in the qooxdoo manual.
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.form.RepeatButton", OmitOptionalParameters = true, Export = false)]
    public partial class RepeatButton : qx.ui.form.Button
    {
		#region Events

		/// <summary>
		/// <para>This event gets dispatched with every interval. The timer gets executed
		/// as long as the user holds down the mouse button.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnExecute;

		/// <summary>
		/// <para>This event gets dispatched when the button is pressed.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnPress;

		/// <summary>
		/// <para>This event gets dispatched when the button is released.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnRelease;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Interval used for the first run of the timer. Usually a greater value
		/// than the &#8220;interval&#8221; property value to a little delayed reaction at the first
		/// time.</para>
		/// </summary>
		[JsProperty(Name = "firstInterval", NativeField = true)]
		public double FirstInterval { get; set; }

		/// <summary>
		/// <para>Interval used after the first run of the timer. Usually a smaller value
		/// than the &#8220;firstInterval&#8221; property value to get a faster reaction.</para>
		/// </summary>
		[JsProperty(Name = "interval", NativeField = true)]
		public double Interval { get; set; }

		/// <summary>
		/// <para>This configures the minimum value for the timer interval.</para>
		/// </summary>
		[JsProperty(Name = "minTimer", NativeField = true)]
		public double MinTimer { get; set; }

		/// <summary>
		/// <para>Decrease of the timer on each interval (for the next interval) until minTimer reached.</para>
		/// </summary>
		[JsProperty(Name = "timerDecrease", NativeField = true)]
		public double TimerDecrease { get; set; }

		#endregion Properties

		#region Methods

		public RepeatButton() { throw new NotImplementedException(); }

		/// <param name="label">Label to use</param>
		/// <param name="icon">Icon to use</param>
		public RepeatButton(string label, string icon = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property firstInterval.</para>
		/// </summary>
		[JsMethod(Name = "getFirstInterval")]
		public double GetFirstInterval() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property interval.</para>
		/// </summary>
		[JsMethod(Name = "getInterval")]
		public double GetInterval() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property minTimer.</para>
		/// </summary>
		[JsMethod(Name = "getMinTimer")]
		public double GetMinTimer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property timerDecrease.</para>
		/// </summary>
		[JsMethod(Name = "getTimerDecrease")]
		public double GetTimerDecrease() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property firstInterval
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property firstInterval.</param>
		[JsMethod(Name = "initFirstInterval")]
		public void InitFirstInterval(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property interval
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property interval.</param>
		[JsMethod(Name = "initInterval")]
		public void InitInterval(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property minTimer
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property minTimer.</param>
		[JsMethod(Name = "initMinTimer")]
		public void InitMinTimer(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property timerDecrease
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property timerDecrease.</param>
		[JsMethod(Name = "initTimerDecrease")]
		public void InitTimerDecrease(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calling this function is like a click from the user on the
		/// button with all consequences.
		/// Be sure to call the <see cref="Release"/> function.</para>
		/// </summary>
		[JsMethod(Name = "press")]
		public void Press() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calling this function is like a release from the user on the
		/// button with all consequences.
		/// Usually the <see cref="Release"/> function will be called before the call of
		/// this function.</para>
		/// </summary>
		/// <param name="fireExecuteEvent">flag which signals, if an event should be fired</param>
		[JsMethod(Name = "release")]
		public void Release(bool fireExecuteEvent = true) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property firstInterval.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFirstInterval")]
		public void ResetFirstInterval() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property interval.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetInterval")]
		public void ResetInterval() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property minTimer.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMinTimer")]
		public void ResetMinTimer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property timerDecrease.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTimerDecrease")]
		public void ResetTimerDecrease() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property firstInterval.</para>
		/// </summary>
		/// <param name="value">New value for property firstInterval.</param>
		[JsMethod(Name = "setFirstInterval")]
		public void SetFirstInterval(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property interval.</para>
		/// </summary>
		/// <param name="value">New value for property interval.</param>
		[JsMethod(Name = "setInterval")]
		public void SetInterval(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property minTimer.</para>
		/// </summary>
		/// <param name="value">New value for property minTimer.</param>
		[JsMethod(Name = "setMinTimer")]
		public void SetMinTimer(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property timerDecrease.</para>
		/// </summary>
		/// <param name="value">New value for property timerDecrease.</param>
		[JsMethod(Name = "setTimerDecrease")]
		public void SetTimerDecrease(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}