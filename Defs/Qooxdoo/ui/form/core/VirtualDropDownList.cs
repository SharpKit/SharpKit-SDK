// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.form.core
{
    /// <summary>
	/// <para>A drop-down (popup) widget which contains a virtual list for selection.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.form.core.VirtualDropDownList", OmitOptionalParameters = true, Export = false)]
    public partial class VirtualDropDownList : qx.ui.popup.Popup
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Selection"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelection;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Whether to let the system decide when to hide the popup. Setting
		/// this to false gives you better control but it also requires you
		/// to handle the closing of the popup.</para>
		/// </summary>
		[JsProperty(Name = "autoHide", NativeField = true)]
		public bool AutoHide { get; set; }

		/// <summary>
		/// <para>If this property if enabled, the widget and all of its child widgets
		/// will never get activated. The activation keeps at the currently
		/// activated widget.</para>
		/// <para>This is mainly useful for widget authors. Please use with caution!</para>
		/// </summary>
		[JsProperty(Name = "keepActive", NativeField = true)]
		public bool KeepActive { get; set; }

		/// <summary>
		/// <para>Current selected items.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: false
		/// </remarks>
		[JsProperty(Name = "selection", NativeField = true)]
		public qx.data.Array Selection { get; set; }

		#endregion Properties

		#region Methods

		public VirtualDropDownList() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates the drop-down list.</para>
		/// </summary>
		/// <param name="target">The composite widget.</param>
		public VirtualDropDownList(qx.ui.form.core.AbstractVirtualBox target) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Hides the drop-down.</para>
		/// </summary>
		[JsMethod(Name = "close")]
		public void Close() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property selection.</para>
		/// </summary>
		[JsMethod(Name = "getSelection")]
		public qx.data.Array GetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property selection
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property selection.</param>
		[JsMethod(Name = "initSelection")]
		public void InitSelection(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Shows the drop-down.</para>
		/// </summary>
		[JsMethod(Name = "open")]
		public void Open() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property selection.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSelection")]
		public void ResetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Pre-selects the drop-down item corresponding to the given model object.</para>
		/// </summary>
		/// <param name="modelItem">Item to be pre-selected.</param>
		[JsMethod(Name = "setPreselected")]
		public void SetPreselected(object modelItem) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property selection.</para>
		/// </summary>
		/// <param name="value">New value for property selection.</param>
		[JsMethod(Name = "setSelection")]
		public void SetSelection(qx.data.Array value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}