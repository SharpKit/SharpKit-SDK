// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.form
{
    /// <summary>
	/// <para>Form interface for all form widgets. It includes the API for enabled,
	/// required and valid states.</para>
	/// </summary>
	public interface IForm
    {
		#region Events

		/// <summary>
		/// <para>Fired when the enabled state was modified</para>
		/// </summary>
		event Action<qx.eventx.type.Data> OnChangeEnabled;

		/// <summary>
		/// <para>Fired when the invalidMessage was modified</para>
		/// </summary>
		event Action<qx.eventx.type.Data> OnChangeInvalidMessage;

		/// <summary>
		/// <para>Fired when the required was modified</para>
		/// </summary>
		event Action<qx.eventx.type.Data> OnChangeRequired;

		/// <summary>
		/// <para>Fired when the valid state was modified</para>
		/// </summary>
		event Action<qx.eventx.type.Data> OnChangeValid;

		#endregion Events

		#region Methods

		/// <summary>
		/// <para>Return the current set enabled state.</para>
		/// </summary>
		/// <returns>If the widget is enabled.</returns>
		bool GetEnabled();

		/// <summary>
		/// <para>Returns the invalid message of the widget.</para>
		/// </summary>
		/// <returns>The current set message.</returns>
		string GetInvalidMessage();

		/// <summary>
		/// <para>Return the current required state of the widget.</para>
		/// </summary>
		/// <returns>True, if the widget is required.</returns>
		bool GetRequired();

		/// <summary>
		/// <para>Returns the invalid message if required of the widget.</para>
		/// </summary>
		/// <returns>The current set message.</returns>
		string GetRequiredInvalidMessage();

		/// <summary>
		/// <para>Returns the valid state of the widget.</para>
		/// </summary>
		/// <returns>If the state of the widget is valid.</returns>
		bool GetValid();

		/// <summary>
		/// <para>Set the enabled state of the widget.</para>
		/// </summary>
		/// <param name="enabled">The enabled state.</param>
		void SetEnabled(bool enabled);

		/// <summary>
		/// <para>Sets the invalid message of the widget.</para>
		/// </summary>
		/// <param name="message">The invalid message.</param>
		void SetInvalidMessage(string message);

		/// <summary>
		/// <para>Sets the required state of a widget.</para>
		/// </summary>
		/// <param name="required">A flag signaling if the widget is required.</param>
		void SetRequired(bool required);

		/// <summary>
		/// <para>Sets the invalid message if required of the widget.</para>
		/// </summary>
		/// <param name="message">The invalid message.</param>
		void SetRequiredInvalidMessage(string message);

		/// <summary>
		/// <para>Sets the valid state of the widget.</para>
		/// </summary>
		/// <param name="valid">The valid state of the widget.</param>
		void SetValid(bool valid);

		#endregion Methods
    }
}