// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.ui.form
{
    /// <summary>
	/// <para>Basically a text fields which allows a selection from a list of
	/// preconfigured options. Allows custom user input. Public API is value
	/// oriented.</para>
	/// <para>To work with selections without custom input the ideal candidates are
	/// the <see cref="SelectBox"/> or the <see cref="RadioGroup"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.form.ComboBox", OmitOptionalParameters = true, Export = false)]
    public partial class ComboBox : qx.ui.form.AbstractSelectBox, qx.ui.form.IStringForm
    {
		#region Events

		/// <summary>
		/// <para>Fired when the value was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeValue;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>String value which will be shown as a hint if the field is all of:
		/// unset, unfocused and enabled. Set to null to not show a placeholder
		/// text.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "placeholder", NativeField = true)]
		public string Placeholder { get; set; }

		#endregion Properties

		#region Methods

		public ComboBox() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears the current selection.
		/// This method only works if the widget is already created and
		/// added to the document.</para>
		/// </summary>
		[JsMethod(Name = "clearTextSelection")]
		public void ClearTextSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Focus this widget.</para>
		/// </summary>
		[JsMethod(Name = "focus")]
		public void Focus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property placeholder.</para>
		/// </summary>
		[JsMethod(Name = "getPlaceholder")]
		public string GetPlaceholder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current selection.
		/// This method only works if the widget is already created and
		/// added to the document.</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getTextSelection")]
		public string GetTextSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current selection length.
		/// This method only works if the widget is already created and
		/// added to the document.</para>
		/// </summary>
		/// <returns></returns>
		[JsMethod(Name = "getTextSelectionLength")]
		public double GetTextSelectionLength() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The element&#8217;s user set value.</para>
		/// </summary>
		/// <returns>The value.</returns>
		[JsMethod(Name = "getValue")]
		public string GetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property placeholder
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property placeholder.</param>
		[JsMethod(Name = "initPlaceholder")]
		public void InitPlaceholder(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clear any text selection, then select all text</para>
		/// </summary>
		[JsMethod(Name = "resetAllTextSelection")]
		public void ResetAllTextSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property placeholder.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPlaceholder")]
		public void ResetPlaceholder() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the element&#8217;s value to its initial value.</para>
		/// </summary>
		[JsMethod(Name = "resetValue")]
		public void ResetValue() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects the whole content</para>
		/// </summary>
		[JsMethod(Name = "selectAllText")]
		public void SelectAllText() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property placeholder.</para>
		/// </summary>
		/// <param name="value">New value for property placeholder.</param>
		[JsMethod(Name = "setPlaceholder")]
		public void SetPlaceholder(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the selection to the given start and end (zero-based).
		/// If no end value is given the selection will extend to the
		/// end of the textfield&#8217;s content.
		/// This method only works if the widget is already created and
		/// added to the document.</para>
		/// </summary>
		/// <param name="start">start of the selection (zero-based)</param>
		/// <param name="end">end of the selection</param>
		[JsMethod(Name = "setTextSelection")]
		public void SetTextSelection(double start, double end) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the element&#8217;s value.</para>
		/// </summary>
		/// <param name="value">The new value of the element.</param>
		[JsMethod(Name = "setValue")]
		public void SetValue(string value) { throw new NotImplementedException(); }

		[JsMethod(Name = "tabFocus")]
		public void TabFocus() { throw new NotImplementedException(); }

		#endregion Methods
    }
}