// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;

namespace qx.ui.form
{
    /// <summary>
	/// <para>A Button widget which supports various states and allows it to be used
	/// via the mouse and the keyboard.</para>
	/// <para>If the user presses the button by clicking on it, or the Enter or
	/// Space keys, the button fires an <see cref="qx.ui.core.MExecutable.Execute"/> event.</para>
	/// <para>If the <see cref="qx.ui.core.MExecutable.Command"/> property is set, the
	/// command is executed as well.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the widget.</para>
	/// <code>
	/// var button = new qx.ui.form.Button("Hello World");
	/// button.addListener("execute", function(e) {
	/// alert("Button was clicked");
	/// }, this);
	/// this.getRoot.add(button);
	/// </code>
	/// <para>This example creates a button with the label &#8220;Hello World&#8221; and attaches an
	/// event listener to the <see cref="Execute"/> event.</para>
	/// <para>External Documentation</para>
	/// 
	/// Documentation of this widget in the qooxdoo manual.
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.form.Button", OmitOptionalParameters = true, Export = false)]
    public partial class Button : qx.ui.basic.Atom, qx.ui.form.IExecutable
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Command"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeCommand;

		/// <summary>
		/// <para>Fired when the widget is executed. Sets the &#8220;data&#8221; property of the
		/// event to the object that issued the command.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnExecute;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		/// <summary>
		/// <para>Whether the widget is focusable e.g. rendering a focus border and visualize
		/// as active element.</para>
		/// <para>See also <see cref="IsTabable"/> which allows runtime checks for
		/// isChecked or other stuff to test whether the widget is
		/// reachable via the TAB key.</para>
		/// </summary>
		[JsProperty(Name = "focusable", NativeField = true)]
		public bool Focusable { get; set; }

		/// <summary>
		/// <para>A command called if the <see cref="Execute"/> method is called, e.g. on a
		/// button click.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "command", NativeField = true)]
		public qx.ui.core.Command Command { get; set; }

		#endregion Properties

		#region Methods

		public Button() { throw new NotImplementedException(); }

		/// <param name="label">label of the atom</param>
		/// <param name="icon">Icon URL of the atom</param>
		/// <param name="command">Command instance to connect with</param>
		public Button(string label, string icon = null, qx.ui.core.Command command = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Manually press the button</para>
		/// </summary>
		[JsMethod(Name = "press")]
		public void Press() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Manually release the button</para>
		/// </summary>
		[JsMethod(Name = "release")]
		public void Release() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Completely reset the button (remove all states)</para>
		/// </summary>
		[JsMethod(Name = "reset")]
		public void Reset() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Fire the &#8220;execute&#8221; event on the command.</para>
		/// </summary>
		[JsMethod(Name = "execute")]
		public void Execute() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the current set command of this executable.</para>
		/// </summary>
		/// <returns>The current set command.</returns>
		[JsMethod(Name = "getCommand")]
		public qx.ui.core.Command GetCommand() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property command
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property command.</param>
		[JsMethod(Name = "initCommand")]
		public void InitCommand(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property command.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetCommand")]
		public void ResetCommand() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the command of this executable.</para>
		/// </summary>
		/// <param name="command">The command.</param>
		[JsMethod(Name = "setCommand")]
		public void SetCommand(qx.ui.core.Command command) { throw new NotImplementedException(); }

		#endregion Methods
    }
}