// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
using qx.ui.core;

namespace qx.ui.form
{
    /// <summary>
	/// <para>A form widget which allows a single selection. Looks somewhat like
	/// a normal button, but opens a list of items to select when clicking on it.</para>
	/// <para>Keep in mind that the SelectBox widget has always a selected item (due to the
	/// single selection mode). Right after adding the first item a changeSelection
	/// event is fired.</para>
	/// <code>
	/// var selectBox = new qx.ui.form.SelectBox();
	/// selectBox.addListener("changeSelection", function(e) {
	/// // ...
	/// });
	/// // now the 'changeSelection' event is fired
	/// selectBox.add(new qx.ui.form.ListItem("Item 1");
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.ui.form.SelectBox", OmitOptionalParameters = true, Export = false)]
    public partial class SelectBox : qx.ui.form.AbstractSelectBox, qx.ui.core.ISingleSelection, qx.ui.form.IModelSelection
    {
		#region Events

		/// <summary>
		/// <para>Fires after the selection was modified</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelection;

		/// <summary>
		/// <para>Pseudo event. It will never be fired because the array itself can not
		/// be changed. But the event description is needed for the data binding.</para>
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModelSelection;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>The appearance ID. This ID is used to identify the appearance theme
		/// entry to use for this widget. This controls the styling of the element.</para>
		/// </summary>
		[JsProperty(Name = "appearance", NativeField = true)]
		public string Appearance { get; set; }

		#endregion Properties

		#region Methods

		public SelectBox() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all elements which are selectable.</para>
		/// </summary>
		/// <param name="all">true for all selectables, false for the selectables the user can interactively select</param>
		/// <returns>The contained items.</returns>
		[JsMethod(Name = "getSelectables")]
		public qx.ui.core.Widget GetSelectables(bool all) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an array of currently selected items.</para>
		/// <para>Note: The result is only a set of selected items, so the order can
		/// differ from the sequence in which the items were added.</para>
		/// </summary>
		/// <returns>List of items.</returns>
		[JsMethod(Name = "getSelection")]
		public qx.ui.core.Widget GetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Detects whether the given item is currently selected.</para>
		/// </summary>
		/// <param name="item">Any valid selectable item</param>
		/// <returns>Whether the item is selected.</returns>
		[JsMethod(Name = "isSelected")]
		public bool IsSelected(qx.ui.core.Widget item) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the selection is empty.</para>
		/// </summary>
		/// <returns>Whether the selection is empty.</returns>
		[JsMethod(Name = "isSelectionEmpty")]
		public bool IsSelectionEmpty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears the whole selection at once.</para>
		/// </summary>
		[JsMethod(Name = "resetSelection")]
		public void ResetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Replaces current selection with the given items.</para>
		/// </summary>
		/// <param name="items">Items to select.</param>
		[JsMethod(Name = "setSelection")]
		public void SetSelection(qx.ui.core.Widget items) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an array of the selected models.</para>
		/// </summary>
		/// <returns>An array containing the models of the currently selected items.</returns>
		[JsMethod(Name = "getModelSelection")]
		public JsArray GetModelSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Tries to set the selection using the given array containing the
		/// representative models for the selectables.</para>
		/// </summary>
		/// <param name="value">An array of models.</param>
		[JsMethod(Name = "setModelSelection")]
		public void SetModelSelection(JsArray value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}