// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.dev.unit
{
    /// <summary>
	/// <para>Wrapper object for a method containing unit test code.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.dev.unit.TestFunction", OmitOptionalParameters = true, Export = false)]
    public partial class TestFunction : qx.core.Object
    {
		#region Properties

		/// <summary>
		/// <para>Name of the class containing the test</para>
		/// </summary>
		[JsProperty(Name = "className", NativeField = true)]
		public string ClassName { get; set; }

		/// <summary>
		/// <para>Name of the test</para>
		/// </summary>
		[JsProperty(Name = "name", NativeField = true)]
		public string Name { get; set; }

		/// <summary>
		/// <para>The test class</para>
		/// </summary>
		[JsProperty(Name = "testClass", NativeField = true)]
		public qx.dev.unit.TestCase TestClass { get; set; }

		/// <summary>
		/// <para>The test function</para>
		/// </summary>
		[JsProperty(Name = "testFunction", NativeField = true)]
		public Action<object> TestFunctionx { get; set; }

		#endregion Properties

		#region Methods

		public TestFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>There are two ways to define a test function. First by passing a class
		/// and a method name to the contructor or second by giving a the method
		/// directly.</para>
		/// </summary>
		/// <param name="testCase">The test class, which contains the test method</param>
		/// <param name="methodName">The name of the method</param>
		/// <param name="testFunction">A reference to a test function. If this parameter is set the other parameters are ignored.</param>
		public TestFunction(qx.dev.unit.TestCase testCase = null, string methodName = null, Action<object> testFunction = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property className.</para>
		/// </summary>
		[JsMethod(Name = "getClassName")]
		public string GetClassName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the full name of the test.</para>
		/// </summary>
		/// <returns>The test&#8217;s full name</returns>
		[JsMethod(Name = "getFullName")]
		public string GetFullName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property name.</para>
		/// </summary>
		[JsMethod(Name = "getName")]
		public string GetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property testClass.</para>
		/// </summary>
		[JsMethod(Name = "getTestClass")]
		public qx.dev.unit.TestCase GetTestClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property testFunction.</para>
		/// </summary>
		[JsMethod(Name = "getTestFunction")]
		public Action<object> GetTestFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property className
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property className.</param>
		[JsMethod(Name = "initClassName")]
		public void InitClassName(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property name
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property name.</param>
		[JsMethod(Name = "initName")]
		public void InitName(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property testClass
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property testClass.</param>
		[JsMethod(Name = "initTestClass")]
		public void InitTestClass(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property testFunction
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property testFunction.</param>
		[JsMethod(Name = "initTestFunction")]
		public void InitTestFunction(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property className.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetClassName")]
		public void ResetClassName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property name.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetName")]
		public void ResetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property testClass.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTestClass")]
		public void ResetTestClass() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property testFunction.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTestFunction")]
		public void ResetTestFunction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Runs the test and logs the test result to a <see cref="TestResult"/> instance,</para>
		/// </summary>
		/// <param name="testResult">The class used to log the test result.</param>
		[JsMethod(Name = "run")]
		public void Run(TestResult testResult) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property className.</para>
		/// </summary>
		/// <param name="value">New value for property className.</param>
		[JsMethod(Name = "setClassName")]
		public void SetClassName(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property name.</para>
		/// </summary>
		/// <param name="value">New value for property name.</param>
		[JsMethod(Name = "setName")]
		public void SetName(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property testClass.</para>
		/// </summary>
		/// <param name="value">New value for property testClass.</param>
		[JsMethod(Name = "setTestClass")]
		public void SetTestClass(qx.dev.unit.TestCase value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property testFunction.</para>
		/// </summary>
		/// <param name="value">New value for property testFunction.</param>
		[JsMethod(Name = "setTestFunction")]
		public void SetTestFunction(Action<object> value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Call the test class&#8217; setUp method.</para>
		/// </summary>
		[JsMethod(Name = "setUp")]
		public void SetUp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Call the test class&#8217; tearDown method.</para>
		/// </summary>
		[JsMethod(Name = "tearDown")]
		public void TearDown() { throw new NotImplementedException(); }

		#endregion Methods
    }
}