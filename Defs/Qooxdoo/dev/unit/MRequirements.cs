// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.dev.unit
{
    /// <summary>
	/// <para>Common requirement checks for unit tests. Example:</para>
	/// <code>
	/// testBackend : function()
	/// {
	/// this.require(["http", "php"]); // test will be skipped unless all conditions are met
	/// // test code goes here
	/// }
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.dev.unit.MRequirements", OmitOptionalParameters = true, Export = false)]
    public partial class MRequirements 
    {
		#region Methods

		public MRequirements() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application is running in Google Chrome</para>
		/// </summary>
		/// <returns>true if the browser is Google Chrome</returns>
		[JsMethod(Name = "hasChrome")]
		public bool HasChrome() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application is running in Firefox</para>
		/// </summary>
		/// <returns>true if the browser is Firefox</returns>
		[JsMethod(Name = "hasFirefox")]
		public bool HasFirefox() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application is running in a browser using the Gecko engine</para>
		/// </summary>
		/// <returns>true if the browser engine is Mozilla Gecko</returns>
		[JsMethod(Name = "hasGecko")]
		public bool HasGecko() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application extends qx.application.Standalone</para>
		/// </summary>
		/// <returns>true if the application is a standalone (GUI) application</returns>
		[JsMethod(Name = "hasGuiApp")]
		public bool HasGuiApp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application has been loaded over HTTP.</para>
		/// </summary>
		/// <returns>true if HTTP is currently used</returns>
		[JsMethod(Name = "hasHttp")]
		public bool HasHttp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application is running in Internet Explorer</para>
		/// </summary>
		/// <returns>true if the browser is Internet Explorer</returns>
		[JsMethod(Name = "hasIe")]
		public bool HasIe() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application extends qx.application.Inline</para>
		/// </summary>
		/// <returns>true if the application is an inline application</returns>
		[JsMethod(Name = "hasInlineApp")]
		public bool HasInlineApp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application is running in a browser using the MSHTML engine</para>
		/// </summary>
		/// <returns>true if the browser engine is MSHTML</returns>
		[JsMethod(Name = "hasMshtml")]
		public bool HasMshtml() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application extends qx.application.Native</para>
		/// </summary>
		/// <returns>true if the application is a native application</returns>
		[JsMethod(Name = "hasNativeApp")]
		public bool HasNativeApp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application is controlled by Selenium</para>
		/// </summary>
		/// <returns>false if the application is controlled by Selenium</returns>
		[JsMethod(Name = "hasNoSelenium")]
		public bool HasNoSelenium() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application is running in a browser using the Opera engine</para>
		/// </summary>
		/// <returns>true if the browser engine is Opera</returns>
		[JsMethod(Name = "hasOpera")]
		public bool HasOpera() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the server supports PHP.</para>
		/// </summary>
		/// <returns>true if PHP is supported by the backend</returns>
		[JsMethod(Name = "hasPhp")]
		public bool HasPhp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if the application is running in a browser using the Webkit engine</para>
		/// </summary>
		/// <returns>true if the browser engine is Webkit</returns>
		[JsMethod(Name = "hasWebkit")]
		public bool HasWebkit() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Verifies a list of infrastructure requirements by checking for
		/// corresponding &#8220;has&#8221; methods. If no such method was found,
		/// <see cref="qx.core.Environment"/> will be checked for a key matching the given
		/// feature name. Note that asynchronous environment checks are not supported!</para>
		/// <para>See the manual for further details:
		/// Defining Test Requirements</para>
		/// </summary>
		/// <param name="featureList">List of infrastructure requirements</param>
		[JsMethod(Name = "require")]
		public void Require(string featureList) { throw new NotImplementedException(); }

		#endregion Methods
    }
}