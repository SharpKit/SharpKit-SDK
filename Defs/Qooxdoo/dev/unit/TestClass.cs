// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.dev.unit
{
    /// <summary>
	/// <para>This class represents a test suite for an unit test class.</para>
	/// <para>To create your own unit tests, create a class that derives from this one, and
	/// add member methods that start with &#8220;test*&#8221;. You can use assertion methods
	/// inherited from TestClass to ease the implementation process.</para>
	/// <para>A simple example:</para>
	/// <code>
	/// qx. Class.define("myapp.test.MyUnitTest"),
	/// {
	/// extend  : qx.dev.unit.TestCase,
	/// members :
	/// {
	/// testMe : function ()
	/// {
	/// // 'assertEquals' is from the parent
	/// this.assertEquals(4, 3+1, "failure message");
	/// }
	/// }
	/// }
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.dev.unit.TestClass", OmitOptionalParameters = true, Export = false)]
    public partial class TestClass : qx.dev.unit.AbstractTestSuite
    {
		#region Properties

		/// <summary>
		/// <para>Name of the test suite</para>
		/// </summary>
		[JsProperty(Name = "name", NativeField = true)]
		public string Name { get; set; }

		#endregion Properties

		#region Methods

		public TestClass() { throw new NotImplementedException(); }

		/// <param name="clazz">Test class. Must be a sub class of TestCase.</param>
		public TestClass(Class clazz) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property name.</para>
		/// </summary>
		[JsMethod(Name = "getName")]
		public string GetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property name
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property name.</param>
		[JsMethod(Name = "initName")]
		public void InitName(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property name.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetName")]
		public void ResetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property name.</para>
		/// </summary>
		/// <param name="value">New value for property name.</param>
		[JsMethod(Name = "setName")]
		public void SetName(string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}