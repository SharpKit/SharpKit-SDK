// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.dev
{
    /// <summary>
	/// <para>Useful debug capabilities</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.dev.Debug", OmitOptionalParameters = true, Export = false)]
    public partial class Debug 
    {
		#region Methods

		public Debug() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Recursively display an object (as a debug message)</para>
		/// </summary>
		/// <param name="obj">The object to be recursively displayed</param>
		/// <param name="initialMessage">The initial message to be displayed.</param>
		/// <param name="maxLevel">The maximum level of recursion.  Objects beyond this level will not be displayed.</param>
		[JsMethod(Name = "debugObject")]
		public static void DebugObject(object obj, string initialMessage, double maxLevel = 10) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Recursively display an object (into a string)</para>
		/// </summary>
		/// <param name="obj">The object to be recursively displayed</param>
		/// <param name="initialMessage">The initial message to be displayed.</param>
		/// <param name="maxLevel">The maximum level of recursion.  Objects beyond this level will not be displayed.</param>
		/// <param name="bHtml">If true, then render the debug message in HTML; Otherwise, use spaces for indentation and &#8221;\n&#8221; for end of line.</param>
		/// <returns>The string containing the recursive display of the object</returns>
		[JsMethod(Name = "debugObjectToString")]
		public static string DebugObjectToString(object obj, string initialMessage, double maxLevel = 10, bool bHtml = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a string representing the given model. The string will include
		/// all model objects to a given recursive depth.</para>
		/// </summary>
		/// <param name="model">The model object.</param>
		/// <param name="maxLevel">The amount of max recursive depth.</param>
		/// <param name="html">If the returned string should have \n\r as newline of  .</param>
		/// <param name="indent">The indentation level. (Needed for the recursion)</param>
		/// <returns>A string representation of the given model.</returns>
		[JsMethod(Name = "debugProperties")]
		public static string DebugProperties(qx.core.Object model, double maxLevel = 10, bool html = false, double indent = 1) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the name of a member/static function or constructor defined using the new style class definition.
		/// If the function could not be found null is returned.</para>
		/// <para>This function uses a linear search, so don&#8217;t use it in performance critical
		/// code.</para>
		/// </summary>
		/// <param name="func">member function to get the name of.</param>
		/// <param name="functionType">Where to look for the function. Possible values are &#8220;members&#8221;, &#8220;statics&#8221;, &#8220;constructor&#8221;, &#8220;all&#8221;</param>
		/// <returns>Name of the function (null if not found).</returns>
		[JsMethod(Name = "getFunctionName")]
		public static string GetFunctionName(Action<object> func, string functionType = "all") { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Starts a dispose profiling session. Use <see cref="StopDisposeProfiling"/> to
		/// get the results</para>
		/// </summary>
		[JsMethod(Name = "startDisposeProfiling")]
		public static void StartDisposeProfiling() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a list of any (qx) objects that were created but not disposed since
		/// <see cref="StartDisposeProfiling"/> was called. Also returns a stack trace
		/// recorded at the time the object was created.</para>
		/// </summary>
		/// <param name="checkFunction">Custom check function. It is called once for each object that was created after dispose profiling was started, with the object as the only parameter. If it returns false, the object will not be included in the returned list</param>
		/// <returns>List of maps. Each map contains two keys: object and stackTrace</returns>
		[JsMethod(Name = "stopDisposeProfiling")]
		public static object StopDisposeProfiling(Action<object> checkFunction) { throw new NotImplementedException(); }

		#endregion Methods
    }
}