// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.dev
{
    /// <summary>
	/// <para>qooxdoo profiler.</para>
	/// <para>All functions of qooxdoo classes (constructors, members, statics) can be profiled
	/// using this class.</para>
	/// <para>To enable profiling this class must be loaded before qx.Class is
	/// loaded. This can be achieved by making qx.core.Aspect and
	/// qx.dev.Profile a load time dependency of qx.Class.
	/// Further more the variant qx.aspects must be set to on.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.dev.Profile", OmitOptionalParameters = true, Export = false)]
    public partial class Profile 
    {
		#region Methods

		public Profile() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the profiling data as JSON data structure.</para>
		/// <para>Example:</para>
		/// <code>
		/// {
		/// "qx.core.ObjectRegistry.toHashCode (static)":{
		/// *     "totalTime":3,
		/// "ownTime":3,
		/// "callCount":218,
		/// "subRoutineCalls":0,
		/// "name":"qx.core.ObjectRegistry.toHashCode",
		/// "type":"static"
		/// },
		/// "qx.core.Object.addListener (member)":{
		/// "totalTime":19,
		/// "ownTime":12,
		/// "callCount":59,
		/// "subRoutineCalls":251,
		/// "name":"qx.core.Object.addListener",
		/// "type":"member"
		/// },
		/// "qx.ui.table.cellrenderer.Default (constructor)":{
		/// "totalTime":2,
		/// "ownTime":1,
		/// "callCount":1,
		/// "subRoutineCalls":4,
		/// "name":"qx.ui.table.cellrenderer.Default",
		/// "type":"constructor"
		/// }
		/// }
		/// </code>
		/// </summary>
		/// <returns>The current profiling data.</returns>
		[JsMethod(Name = "getProfileData")]
		public static object GetProfileData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Normalize profiling data by subtracting the overhead of wrapping from the
		/// function&#8217;s own time.</para>
		/// </summary>
		[JsMethod(Name = "normalizeProfileData")]
		public static void NormalizeProfileData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This function will be called after each function call. (Stop timing)</para>
		/// </summary>
		/// <param name="fullName">Full name of the function including the class name.</param>
		/// <param name="fcn">Function to time.</param>
		/// <param name="type">Function type as in parameter with same name to qx.core.Aspect#addAdvice</param>
		/// <param name="args">The arguments passed to the wrapped function</param>
		/// <param name="returnValue">return value of the wrapped function.</param>
		[JsMethod(Name = "profileAfter")]
		public static void ProfileAfter(string fullName, Action<object> fcn, string type, JsArguments args, object returnValue) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This function will be called before each function call. (Start timing)</para>
		/// </summary>
		/// <param name="fullName">Full name of the function including the class name.</param>
		/// <param name="fcn">Function to time.</param>
		/// <param name="type">Function type as in parameter with same name to qx.core.Aspect#addAdvice</param>
		/// <param name="args">The arguments passed to the wrapped function</param>
		[JsMethod(Name = "profileBefore")]
		public static void ProfileBefore(string fullName, Action<object> fcn, string type, JsArguments args) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Show profiling results in a popup window. The results are sorted by the
		/// function&#8217;s own time.</para>
		/// </summary>
		/// <param name="maxLength">maximum number of entries to display.</param>
		[JsMethod(Name = "showResults")]
		public static void ShowResults(double maxLength = 100) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clear profiling data and start profiling.</para>
		/// </summary>
		[JsMethod(Name = "start")]
		public static void Start() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stop profiling.</para>
		/// </summary>
		[JsMethod(Name = "stop")]
		public static void Stop() { throw new NotImplementedException(); }

		#endregion Methods
    }
}