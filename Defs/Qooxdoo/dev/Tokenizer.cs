// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.dev
{
    /// <summary>
	/// <para>Simple JavaScript tokenizer used to print syntax highlighted
	/// JavaScript code.</para>
	/// <para>Based on Public Domain code by Christopher Diggins
	/// http://www.cdiggins.com/tokenizer.html</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.dev.Tokenizer", OmitOptionalParameters = true, Export = false)]
    public partial class Tokenizer : qx.core.Object
    {
		#region Methods

		public Tokenizer() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Create a colored HTML string for a string of JavaScript code.
		/// The colored elements are placed in span elements
		/// with class names corresponding to the token types. The returned code
		/// should be placed into pre tags to preserve the
		/// indentation.</para>
		/// </summary>
		/// <param name="javaScriptText">String of JavaScript code to tokenize</param>
		/// <param name="forPreTag">Whatever the HTML should be generated for a pre tag or not</param>
		/// <returns>HTML fragment with the colored JavaScript code.</returns>
		[JsMethod(Name = "javaScriptToHtml")]
		public static string JavaScriptToHtml(string javaScriptText, bool forPreTag = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Tokenizes a string of JavaScript code.</para>
		/// </summary>
		/// <param name="javaScriptText">String of JavaScript code to tokenize</param>
		/// <returns>Array of tokens. A token is a map with the fields type containing the token type and value, which contains the string value of the token from the input string.</returns>
		[JsMethod(Name = "tokenizeJavaScript")]
		public static object TokenizeJavaScript(string javaScriptText) { throw new NotImplementedException(); }

		#endregion Methods
    }
}