// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.core
{
    /// <summary>
	/// <para>This mixin offers the bacis property features which include generic
	/// setter, getter and resetter.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.core.MProperty", OmitOptionalParameters = true, Export = false)]
    public partial class MProperty 
    {
		#region Methods

		public MProperty() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the value of the given property. If no generated getter could be
		/// found, a fallback tries to access a handwritten getter.</para>
		/// </summary>
		/// <param name="prop">Name of the property.</param>
		/// <returns>The value of the value</returns>
		[JsMethod(Name = "get")]
		public object Get(string prop) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the value of the given property. If no generated resetter could be
		/// found, a handwritten resetter will be invoked, if available.</para>
		/// </summary>
		/// <param name="prop">Name of the property.</param>
		[JsMethod(Name = "reset")]
		public void Reset(string prop) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets multiple properties at once by using a property list or
		/// sets one property and its value by the first and second argument.
		/// As a fallback, if no generated property setter could be found, a
		/// handwritten setter will be searched and invoked if available.</para>
		/// </summary>
		/// <param name="data">a map of property values. The key is the name of the property.</param>
		/// <param name="value">the value, only used when data is a string.</param>
		/// <returns>this instance.</returns>
		[JsMethod(Name = "set")]
		public object Set(object data, object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}