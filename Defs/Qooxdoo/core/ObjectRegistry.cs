// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.core
{
    /// <summary>
	/// <para>Registration for all instances of qooxdoo classes. Mainly
	/// used to manage them for the final shutdown sequence and to
	/// use weak references when connecting widgets to DOM nodes etc.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.core.ObjectRegistry", OmitOptionalParameters = true, Export = false)]
    public partial class ObjectRegistry 
    {
		#region Methods

		public ObjectRegistry() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Clears the unique identifier on the given object.</para>
		/// </summary>
		/// <param name="obj">the object to clear the hashcode for</param>
		[JsMethod(Name = "clearHashCode")]
		public static void ClearHashCode(object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get an object instance by its hash code as returned by <see cref="ToHashCode"/>.
		/// If the object is already disposed or the hashCode is invalid,
		/// null is returned.</para>
		/// </summary>
		/// <param name="hash">The object&#8217;s hash code.</param>
		/// <returns>The corresponding object or null.</returns>
		[JsMethod(Name = "fromHashCode")]
		public static qx.core.Object FromHashCode(string hash) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the object registry.</para>
		/// </summary>
		/// <returns>The registry</returns>
		[JsMethod(Name = "getRegistry")]
		public static object GetRegistry() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Registers an object into the database. This adds a hashcode
		/// to the object (if not already done before) and stores it under
		/// this hashcode. You can access this object later using the hashcode
		/// by calling <see cref="FromHashCode"/>.</para>
		/// <para>All registered objects are automatically disposed on application
		/// shutdown. Each registered object must at least have a method
		/// called dispose.</para>
		/// </summary>
		/// <param name="obj">Any object with a dispose() method</param>
		[JsMethod(Name = "register")]
		public static void Register(object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Disposing all registered object and cleaning up registry. This is
		/// automatically executed at application shutdown.</para>
		/// </summary>
		[JsMethod(Name = "shutdown")]
		public static void Shutdown() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns an unique identifier for the given object. If such an identifier
		/// does not yet exist, create it.</para>
		/// </summary>
		/// <param name="obj">the object to get the hashcode for</param>
		/// <returns>unique identifier for the given object</returns>
		[JsMethod(Name = "toHashCode")]
		public static string ToHashCode(object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the given object from the database.</para>
		/// </summary>
		/// <param name="obj">Any previously registered object</param>
		[JsMethod(Name = "unregister")]
		public static void Unregister(object obj) { throw new NotImplementedException(); }

		#endregion Methods
    }
}