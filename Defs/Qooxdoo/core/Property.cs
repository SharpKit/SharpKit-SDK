// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.core
{
    /// <summary>
	/// <para>Internal class for handling of dynamic properties. Should only be used
	/// through the methods provided by <see cref="qx.Class"/>.</para>
	/// <para>For a complete documentation of properties take a look at
	/// http://manual.qooxdoo.org/2.1.1/pages/core.html#properties.</para>
	/// <para>Normal properties</para>
	/// <para>The properties key in the class definition map of <see cref="qx.Class.Define"/>
	/// is used to generate the properties.</para>
	/// <para>Valid keys of a property definition are:</para>
	/// 
	/// NameTypeDescription
	/// checkArray, String, Function
	/// The check is used to check the type the incoming value of a property. This will only
	/// be executed in the source version. The build version will not contain the checks.
	/// The check can be:
	/// <list type="bullet">
	/// <item>a custom check function. The function takes the incoming value as a parameter and must
	/// return a boolean value to indicate whether the values is valid.
	/// </item>
	/// <item>inline check code as a string e.g. "value &gt; 0 &amp;&amp; value &lt; 100"</item>
	/// <item>a class name e.g. qx.ui.form.Button</item>
	/// <item>a name of an interface the value must implement</item>
	/// <item>an array of all valid values</item>
	/// <item>one of the predefined checks: Boolean, String, Number, Integer, Float, Double,
	/// Object, Array, Map, Class, Mixin, Interface, Theme, Error, RegExp, Function,
	/// Date, Node, Element, Document, Window, Event
	/// </item>
	/// <list type="bullet">
	/// 
	/// initvar
	/// Sets the default/initial value of the property. If no property value is set or the property
	/// gets reset, the getter will return the init value.
	/// 
	/// applyString
	/// On change of the property value the method of the specified name will be called. The signature of
	/// the method is function(newValue, oldValue, propertyName). It is conventional to name
	/// the callback _apply + PropertyName, with the property name camel-cased (e.g.
	/// "_applyFooBar" for a property fooBar).
	/// 
	/// eventString
	/// On change of the property value an event with the given name will be dispatched. The event type is
	/// <see cref="qx.event.type.Data"/>.
	/// 
	/// themeableBoolean
	/// Whether this property can be set using themes.
	/// 
	/// inheritableBoolean
	/// Whether the property value should be inheritable. If the property does not have an user defined or an
	/// init value, the property will try to get the value from the parent of the current object.
	/// 
	/// nullableBoolean
	/// Whether null is an allowed value of the property. This is complementary to the check
	/// defined using the check key.
	/// 
	/// refineBoolean
	/// Whether the property definition is a refinement of a property in one of the super classes of the class.
	/// Only the init value can be changed using refine.
	/// 
	/// transformString
	/// On setting of the property value the method of the specified name will
	/// be called. The signature of the method is function(value).
	/// The parameter value is the value passed to the setter.
	/// The function must return the modified or unmodified value.
	/// Transformation occurs before the check function, so both may be
	/// specified if desired.  Alternatively, the transform function may throw
	/// an error if the value passed to it is invalid.
	/// 
	/// validateFunction, String
	/// On setting of the property value the method of the specified name will
	/// be called. The signature of the method is function(value).
	/// The parameter value is the value passed to the setter.
	/// If the validation fails, an qx.core.ValidationError should
	/// be thrown by the validation function. Otherwise, just do nothing in the
	/// function.
	/// <para>If a string is given, the string should hold a reference to a member
	/// method.</para>
	/// "methodname" for example
	/// "__validateProperty"
	/// <para>There are some default validators in the <see cref="qx.util.Validate"/> class.
	/// See this documentation for usage examples.
	/// 
	/// dereferenceBoolean
	/// By default, the references to the values (current, init, ...) of the
	/// property will be stored as references on the object. When disposing
	/// this object, the references will not be deleted. Setting the
	/// dereference key to true tells the property system to delete all
	/// connections made by this property on dispose. This can be necessary for
	/// disconnecting DOM objects to allow the garbage collector to work
	/// properly.
	/// 
	/// deferredInitBoolean
	/// Allow for a deferred initialization for reference types. Defaults to false.
	/// 
	/// </para>
	/// <para>Property groups</para>
	/// <para>Property groups are defined in a similar way but support a different set of keys:</para>
	/// 
	/// NameTypeDescription
	/// groupString[]
	/// A list of property names which should be set using the property group.
	/// 
	/// modeString
	/// If mode is set to "shorthand", the properties can be set using a CSS like shorthand mode.
	/// 
	/// themeableBoolean
	/// Whether this property can be set using themes.
	/// 
	/// 
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.core.Property", OmitOptionalParameters = true, Export = false)]
    public partial class Property 
    {
		#region Methods

		public Property() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Attach one property to class</para>
		/// </summary>
		/// <param name="clazz">Class to attach properties to</param>
		/// <param name="name">Name of property</param>
		/// <param name="config">Configuration map of property</param>
		[JsMethod(Name = "attachMethods")]
		public static void AttachMethods(Class clazz, string name, object config) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Attach $refreshInheritables method stub to the given class</para>
		/// </summary>
		/// <param name="clazz">clazz to which the refresher should be added</param>
		[JsMethod(Name = "attachRefreshInheritables")]
		public static void AttachRefreshInheritables(Class clazz) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Error method used by the property system to report errors.</para>
		/// </summary>
		/// <param name="obj">Any qooxdoo object</param>
		/// <param name="id">Numeric error identifier</param>
		/// <param name="property">Name of the property</param>
		/// <param name="variant">Name of the method variant e.g. &#8220;set&#8221;, &#8220;reset&#8221;, ...</param>
		/// <param name="value">Incoming value</param>
		[JsMethod(Name = "error")]
		public static void Error(qx.core.Object obj, double id, string property, string variant, object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Generates the optimized getter
		/// Supported variants: get</para>
		/// </summary>
		/// <param name="instance">the instance which calls the method</param>
		/// <param name="clazz">the class which originally defined the property</param>
		/// <param name="name">name of the property</param>
		/// <param name="variant">Method variant.</param>
		/// <returns>Execute return value of apply generated function, generally the incoming value</returns>
		[JsMethod(Name = "executeOptimizedGetter")]
		public static object ExecuteOptimizedGetter(object instance, Class clazz, string name, string variant) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Generates the optimized setter
		/// Supported variants: set, reset, init, refresh, style, unstyle</para>
		/// </summary>
		/// <param name="instance">the instance which calls the method</param>
		/// <param name="clazz">the class which originally defined the property</param>
		/// <param name="name">name of the property</param>
		/// <param name="variant">Method variant.</param>
		/// <param name="args">Incoming arguments of wrapper method</param>
		/// <returns>Execute return value of apply generated function, generally the incoming value</returns>
		[JsMethod(Name = "executeOptimizedSetter")]
		public static object ExecuteOptimizedSetter(object instance, Class clazz, string name, string variant, JsArguments args) { throw new NotImplementedException(); }

		#endregion Methods
    }
}