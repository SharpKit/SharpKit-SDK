// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.core
{
    /// <summary>
	/// <para>Basis for Aspect Oriented features in qooxdoo.</para>
	/// <para>This class makes it possible to attach functions (aspects) before or
	/// after each function call of any function defined in <see cref="qx.Class.Define"/>.</para>
	/// <para>Classes, which define own aspects must add an explicit require to this class
	/// in the header comment using the following code:</para>
	/// 
	/// &#35;require(qx.core.Aspect)
	/// &#35;ignore(auto-require)
	/// </code>
	/// <para>One example for a qooxdoo aspect is profiling (<see cref="qx.dev.Profile"/>).</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.core.Aspect", OmitOptionalParameters = true, Export = false)]
    public partial class Aspect 
    {
		#region Methods

		public Aspect() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Register a function to be called just before or after each time
		/// one of the selected functions is called.</para>
		/// </summary>
		/// <param name="fcn">Function to be called just before or after any of the selected functions is called. If position is &#8220;before&#8221; the functions supports the same signature as qx.dev.Profile#profileBefore. If position is &#8220;after&#8221; it supports the same signature as qx.dev.Profile#profileAfter.</param>
		/// <param name="position">One of &#8220;before&#8221; or &#8220;after&#8221;. Whether the function should be called before or after the wrapped function.</param>
		/// <param name="type">Type of the wrapped function. One of &#8220;member&#8221;, &#8220;static&#8221;, &#8220;constructor&#8221;, &#8220;destructor&#8221;, &#8220;property&#8221; or &#8221;&#8221;. null is handled identical to &#8221;&#8221;.</param>
		/// <param name="name">Each function, with a full name matching this pattern (using fullName.match(name)) will be wrapped.</param>
		[JsMethod(Name = "addAdvice")]
		public static void AddAdvice(Action<object> fcn, string position = "after", string type = null, object name = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This function is used by <see cref="qx.Class.Define"/> to wrap all statics, members and
		/// constructors.</para>
		/// </summary>
		/// <param name="fullName">Full name of the function including the class name.</param>
		/// <param name="fcn">function to wrap.</param>
		/// <param name="type">Type of the wrapped function. One of &#8220;member&#8221;, &#8220;static&#8221;, &#8220;constructor&#8221;, &#8220;destructor&#8221; or &#8220;property&#8221;.</param>
		/// <returns>wrapped function</returns>
		[JsMethod(Name = "wrap")]
		public static Action<object> Wrap(string fullName, Action<object> fcn, string type) { throw new NotImplementedException(); }

		#endregion Methods
    }
}