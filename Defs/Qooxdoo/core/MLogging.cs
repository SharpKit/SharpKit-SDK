// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.core
{
    /// <summary>
	/// <para>This mixin offers the basic logging features offered by <see cref="qx.log.Logger"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.core.MLogging", OmitOptionalParameters = true, Export = false)]
    public partial class MLogging 
    {
		#region Methods

		public MLogging() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Logs a debug message.</para>
		/// </summary>
		/// <param name="varargs">The item(s) to log. Any number of arguments is supported. If an argument is not a string, the object dump will be logged.</param>
		[JsMethod(Name = "debug")]
		public void Debug(object varargs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Logs an error message.</para>
		/// </summary>
		/// <param name="varargs">The item(s) to log. Any number of arguments is supported. If an argument is not a string, the object dump will be logged.</param>
		[JsMethod(Name = "error")]
		public void Error(object varargs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Logs an info message.</para>
		/// </summary>
		/// <param name="varargs">The item(s) to log. Any number of arguments is supported. If an argument is not a string, the object dump will be logged.</param>
		[JsMethod(Name = "info")]
		public void Info(object varargs) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Prints the current stack trace</para>
		/// </summary>
		[JsMethod(Name = "trace")]
		public void Trace() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Logs a warning message.</para>
		/// </summary>
		/// <param name="varargs">The item(s) to log. Any number of arguments is supported. If an argument is not a string, the object dump will be logged.</param>
		[JsMethod(Name = "warn")]
		public void Warn(object varargs) { throw new NotImplementedException(); }

		#endregion Methods
    }
}