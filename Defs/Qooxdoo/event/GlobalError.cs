// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx
{
    /// <summary>
	/// <para>The GlobalError class stores a reference to a global error handler function.</para>
	/// <para>This function is called for each uncatched JavaScript exception. To enable
	/// global error handling the setting qx.globalErrorHandling must
	/// be enabled and an error handler must be registered.
	/// Further each JavaScript &#8220;entry point&#8221; must be wrapped with a call to
	/// <see cref="qx.event.GlobalError.ObserveMethod"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.GlobalError", OmitOptionalParameters = true, Export = false)]
    public partial class GlobalError 
    {
		#region Methods

		public GlobalError() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Delegates every given exception to the registered error handler</para>
		/// </summary>
		/// <param name="ex">Exception to delegate</param>
		[JsMethod(Name = "handleError")]
		public static void HandleError(object ex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Wraps a method with error handling code. Only methods, which are called
		/// directly by the browser (e.g. event handler) should be wrapped.</para>
		/// </summary>
		/// <param name="method">method to wrap</param>
		/// <returns>The function wrapped with error handling code</returns>
		[JsMethod(Name = "observeMethod")]
		public static Action<object> ObserveMethod(Action<object> method) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set the global fallback error handler</para>
		/// </summary>
		/// <param name="callback">The error handler. The first argument is the exception, which caused the error</param>
		/// <param name="context">The &#8220;this&#8221; context of the callback function</param>
		[JsMethod(Name = "setErrorHandler")]
		public static void SetErrorHandler(Action<object> callback, object context) { throw new NotImplementedException(); }

		#endregion Methods
    }
}