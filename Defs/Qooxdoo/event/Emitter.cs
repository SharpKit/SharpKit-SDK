// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx
{
    /// <summary>
	/// <para>EXPERIMENTAL &#8211; NOT READY FOR PRODUCTION</para>
	/// <para>Basic implementation for an event emitter. This supplies a basic and
	/// minimalistic event mechanism.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.Emitter", OmitOptionalParameters = true, Export = false)]
    public partial class Emitter : object
    {
		#region Methods

		public Emitter() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Alternative for <see cref="On"/>.</para>
		/// </summary>
		/// <param name="name">The name of the event to listen to.</param>
		/// <param name="listener">The function execute on #emit.</param>
		/// <param name="ctx">The context of the listener.</param>
		/// <returns>An unique id for the attached listener.</returns>
		[JsMethod(Name = "addListener")]
		public double AddListener(string name, Action<qx.eventx.type.Data> listener, object ctx = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Alternative for <see cref="Once"/>.</para>
		/// </summary>
		/// <param name="name">The name of the event to listen to.</param>
		/// <param name="listener">The function execute on #emit.</param>
		/// <param name="ctx">The context of the listener.</param>
		/// <returns>An unique id for the attached listener.</returns>
		[JsMethod(Name = "addListenerOnce")]
		public double AddListenerOnce(string name, Action<qx.eventx.type.Data> listener, object ctx = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Emits an event with the given name. The data will be passed
		/// to the listener.</para>
		/// </summary>
		/// <param name="name">The name of the event to emit.</param>
		/// <param name="data">The data which should be passed to the listener.</param>
		[JsMethod(Name = "emit")]
		public void Emit(string name, object data = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove a listener from the event emitter. The given name
		/// will define the type of event.</para>
		/// </summary>
		/// <param name="name">The name of the event to listen to.</param>
		/// <param name="listener">The function execute on #emit.</param>
		/// <param name="ctx">The context of the listener.</param>
		/// <returns>The listener&#8217;s id if it was removed or null if it wasn&#8217;t found</returns>
		[JsMethod(Name = "off")]
		public double Off(string name, Action<qx.eventx.type.Data> listener, object ctx = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes the listener identified by the given id. The id
		/// will be return on attaching the listener and can be stored for removing.</para>
		/// </summary>
		/// <param name="id">The id of the listener.</param>
		[JsMethod(Name = "offById")]
		public void OffById(double id) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Attach a listener to the event emitter. The given name
		/// will define the type of event. Handing in a &#8217;*&#8217; will
		/// listen to all events emitted by the event emitter.</para>
		/// </summary>
		/// <param name="name">The name of the event to listen to.</param>
		/// <param name="listener">The function execute on #emit.</param>
		/// <param name="ctx">The context of the listener.</param>
		/// <returns>An unique id for the attached listener.</returns>
		[JsMethod(Name = "on")]
		public double On(string name, Action<qx.eventx.type.Data> listener, object ctx = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Attach a listener to the event emitter which will be executed only once.
		/// The given name will define the type of event. Handing in a
		/// &#8217;*&#8217; will listen to all events emitted by the event emitter.</para>
		/// </summary>
		/// <param name="name">The name of the event to listen to.</param>
		/// <param name="listener">The function execute on #emit.</param>
		/// <param name="ctx">The context of the listener.</param>
		/// <returns>An unique id for the attached listener.</returns>
		[JsMethod(Name = "once")]
		public double Once(string name, Action<qx.eventx.type.Data> listener, object ctx = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Alternative for <see cref="Off"/>.</para>
		/// </summary>
		/// <param name="name">The name of the event to listen to.</param>
		/// <param name="listener">The function execute on #emit.</param>
		/// <param name="ctx">The context of the listener.</param>
		[JsMethod(Name = "removeListener")]
		public void RemoveListener(string name, Action<qx.eventx.type.Data> listener, object ctx = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Alternative for <see cref="OffById"/>.</para>
		/// </summary>
		/// <param name="id">The id of the listener.</param>
		[JsMethod(Name = "removeListenerById")]
		public void RemoveListenerById(double id) { throw new NotImplementedException(); }

		#endregion Methods
    }
}