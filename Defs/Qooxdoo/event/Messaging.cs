// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx
{
    /// <summary>
	/// <para>Define messages to react on certain channels.</para>
	/// <para>The channel names will be used in the <see cref="On"/> method to define handlers which will
	/// be called on certain channels and routes. The <see cref="Emit"/> method can be used
	/// to execute a given route on a channel. <see cref="OnAny"/> defines a handler on any channel.</para>
	/// <para>Example</para>
	/// <para>Here is a little example of how to use the messaging.</para>
	/// <code>
	/// var m = new qx.event.Messaging();
	/// m.on("get", "/address/{id}", function(data) {
	/// var id = data.params.id; // 1234
	/// // do something with the id...
	/// },this);
	/// m.emit("get", "/address/1234");
	/// </code>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.Messaging", OmitOptionalParameters = true, Export = false)]
    public partial class Messaging 
    {
		#region Methods

		public Messaging() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sends a message on the given channel and informs all matching route handlers.</para>
		/// </summary>
		/// <param name="channel">The channel of the message.</param>
		/// <param name="path">The path to execute</param>
		/// <param name="paramsx">The given parameters that should be propagated</param>
		/// <param name="customData">The given custom data that should be propagated</param>
		[JsMethod(Name = "emit")]
		public void Emit(string channel, string path, object paramsx, object customData) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a route handler for the given channel. The route is called
		/// if the <see cref="Emit"/> method finds a match.</para>
		/// </summary>
		/// <param name="channel">The channel of the message.</param>
		/// <param name="type">The type, used for checking if the executed path matches.</param>
		/// <param name="handler">The handler to call if the route matches the executed path.</param>
		/// <param name="scope">The scope of the handler.</param>
		/// <returns>The id of the route used to remove the route.</returns>
		[JsMethod(Name = "on")]
		public string On(string channel, object type, Action<object> handler, object scope = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds a handler for the &#8220;any&#8221; channel. The &#8220;any&#8221; channel is called
		/// before all other channels.</para>
		/// </summary>
		/// <param name="type">The route, used for checking if the executed path matches</param>
		/// <param name="handler">The handler to call if the route matches the executed path</param>
		/// <param name="scope">The scope of the handler.</param>
		/// <returns>The id of the route used to remove the route.</returns>
		[JsMethod(Name = "onAny")]
		public string OnAny(object type, Action<object> handler, object scope = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes a registered listener by the given id.</para>
		/// </summary>
		/// <param name="id">The id of the registered listener.</param>
		[JsMethod(Name = "remove")]
		public void Remove(string id) { throw new NotImplementedException(); }

		#endregion Methods
    }
}