// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.dispatch
{
    /// <summary>
	/// <para>Event dispatcher for all bubbling events.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.dispatch.AbstractBubbling", OmitOptionalParameters = true, Export = false)]
    public abstract partial class AbstractBubbling : qx.core.Object, qx.eventx.IEventDispatcher
    {
		#region Methods

		public AbstractBubbling() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Create a new instance</para>
		/// </summary>
		/// <param name="manager">Event manager for the window to use</param>
		public AbstractBubbling(qx.eventx.Manager manager) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the dispatcher is responsible for the this event.</para>
		/// </summary>
		/// <param name="target">The event dispatch target</param>
		/// <param name="eventx">The event object</param>
		/// <param name="type">the event type</param>
		/// <returns>Whether the event dispatcher is responsible for the this event</returns>
		[JsMethod(Name = "canDispatchEvent")]
		public bool CanDispatchEvent(object target, qx.eventx.type.Event eventx, string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This function dispatches the event to the event listeners.</para>
		/// </summary>
		/// <param name="target">The event dispatch target</param>
		/// <param name="eventx">event object to dispatch</param>
		/// <param name="type">the event type</param>
		[JsMethod(Name = "dispatchEvent")]
		public void DispatchEvent(object target, qx.eventx.type.Event eventx, string type) { throw new NotImplementedException(); }

		#endregion Methods
    }
}