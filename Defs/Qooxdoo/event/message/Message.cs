// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.message
{
    /// <summary>
	/// <para>A message to be dispatched on the message bus.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.message.Message", OmitOptionalParameters = true, Export = false)]
    public partial class Message : qx.core.Object
    {
		#region Properties

		/// <summary>
		/// <para>Any data the sender wants to pass with the event.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "data", NativeField = true)]
		public object Data { get; set; }

		/// <summary>
		/// <para>Event name of the message. Based on this name the message is dispatched
		/// to the event listeners.</para>
		/// </summary>
		[JsProperty(Name = "name", NativeField = true)]
		public string Name { get; set; }

		/// <summary>
		/// <para>A reference to the sending object.</para>
		/// </summary>
		[JsProperty(Name = "sender", NativeField = true)]
		public object Sender { get; set; }

		#endregion Properties

		#region Methods

		public Message() { throw new NotImplementedException(); }

		/// <param name="name">The name of the message</param>
		/// <param name="data">Any type of data to attach</param>
		public Message(string name, object data) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property data.</para>
		/// </summary>
		[JsMethod(Name = "getData")]
		public object GetData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property name.</para>
		/// </summary>
		[JsMethod(Name = "getName")]
		public string GetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property sender.</para>
		/// </summary>
		[JsMethod(Name = "getSender")]
		public object GetSender() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property data
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property data.</param>
		[JsMethod(Name = "initData")]
		public void InitData(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property name
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property name.</param>
		[JsMethod(Name = "initName")]
		public void InitName(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property sender
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property sender.</param>
		[JsMethod(Name = "initSender")]
		public void InitSender(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property data.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetData")]
		public void ResetData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property name.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetName")]
		public void ResetName() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property sender.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSender")]
		public void ResetSender() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property data.</para>
		/// </summary>
		/// <param name="value">New value for property data.</param>
		[JsMethod(Name = "setData")]
		public void SetData(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property name.</para>
		/// </summary>
		/// <param name="value">New value for property name.</param>
		[JsMethod(Name = "setName")]
		public void SetName(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property sender.</para>
		/// </summary>
		/// <param name="value">New value for property sender.</param>
		[JsMethod(Name = "setSender")]
		public void SetSender(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}