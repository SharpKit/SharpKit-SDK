// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.message
{
    /// <summary>
	/// <para>A simple message bus singleton.
	/// The message bus registers subscriptions and notifies subscribers when
	/// a matching message is dispatched</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.message.Bus", OmitOptionalParameters = true, Export = false)]
    public partial class Bus : qx.core.Object
    {
		#region Methods

		/// <summary>
		/// <para>checks if subscription is already present
		/// if you supply the callback function, match only the exact message monitor
		/// otherwise match all monitors that have the given message</para>
		/// </summary>
		/// <param name="message">Name of message, can be truncated by *</param>
		/// <param name="subscriber">Callback Function</param>
		/// <param name="context">execution context</param>
		/// <returns>Whether monitor is present or not</returns>
		[JsMethod(Name = "checkSubscription")]
		public static bool CheckSubscriptionS(string message, Action<object> subscriber, object context) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>dispatch message and call subscribed functions</para>
		/// </summary>
		/// <param name="msg">message which is being dispatched</param>
		/// <returns>true if the message was dispatched, false otherwise.</returns>
		[JsMethod(Name = "dispatch")]
		public static bool DispatchS(qx.eventx.message.Message msg) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Dispatches a new message by supplying the name of the
		/// message and its data.</para>
		/// </summary>
		/// <param name="name">name of the message</param>
		/// <param name="data">Any type of data to attach</param>
		/// <returns>true if the message was dispatched, false otherwise.</returns>
		[JsMethod(Name = "dispatchByName")]
		public static bool DispatchByNameS(string name, object data) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a singleton instance of this class. On the first call the class
		/// is instantiated by calling the constructor with no arguments. All following
		/// calls will return this instance.</para>
		/// <para>This method has been added by setting the &#8220;type&#8221; key in the class definition
		/// (<see cref="qx.Class.Define"/>) to &#8220;singleton&#8221;.</para>
		/// </summary>
		/// <returns>The singleton instance of this class.</returns>
		[JsMethod(Name = "getInstance")]
		public static qx.eventx.message.Bus GetInstance() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>gets the hash map of message subscriptions</para>
		/// </summary>
		/// <returns>with registered subscriptions. The key is the message and the value is a map with {subscriber: {Function}, context: {Object|null}}.</returns>
		[JsMethod(Name = "getSubscriptions")]
		public static object GetSubscriptionsS() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>subscribes to a message</para>
		/// </summary>
		/// <param name="message">name of message, can be truncated by *</param>
		/// <param name="subscriber">subscribing callback function</param>
		/// <param name="context">The execution context of the callback (i.e. &#8220;this&#8221;)</param>
		/// <returns>Success</returns>
		[JsMethod(Name = "subscribe")]
		public static bool SubscribeS(string message, Action<object> subscriber, object context) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>unsubscribe a listening method
		/// if you supply the callback function and execution context,
		/// remove only this exact subscription
		/// otherwise remove all subscriptions</para>
		/// </summary>
		/// <param name="message">Name of message, can be truncated by *</param>
		/// <param name="subscriber">Callback Function</param>
		/// <param name="context">execution context</param>
		/// <returns>Whether monitor was removed or not</returns>
		[JsMethod(Name = "unsubscribe")]
		public static bool UnsubscribeS(string message, Action<object> subscriber, object context) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>constructor</para>
		/// </summary>
		public Bus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>checks if subscription is already present
		/// if you supply the callback function, match only the exact message monitor
		/// otherwise match all monitors that have the given message</para>
		/// </summary>
		/// <param name="message">Name of message, can be truncated by *</param>
		/// <param name="subscriber">Callback Function</param>
		/// <param name="context">execution context</param>
		/// <returns>Whether monitor is present or not</returns>
		[JsMethod(Name = "checkSubscription")]
		public bool CheckSubscription(string message, Action<object> subscriber, object context) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>dispatch message and call subscribed functions</para>
		/// </summary>
		/// <param name="msg">message which is being dispatched</param>
		/// <returns>true if the message was dispatched, false otherwise.</returns>
		[JsMethod(Name = "dispatch")]
		public bool Dispatch(qx.eventx.message.Message msg) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Dispatches a new message by supplying the name of the
		/// message and its data.</para>
		/// </summary>
		/// <param name="name">name of the message</param>
		/// <param name="data">Any type of data to attach</param>
		/// <returns>true if the message was dispatched, false otherwise.</returns>
		[JsMethod(Name = "dispatchByName")]
		public bool DispatchByName(string name, object data) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>gets the hash map of message subscriptions</para>
		/// </summary>
		/// <returns>with registered subscriptions. The key is the message and the value is a map with {subscriber: {Function}, context: {Object|null}}.</returns>
		[JsMethod(Name = "getSubscriptions")]
		public object GetSubscriptions() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>subscribes to a message</para>
		/// </summary>
		/// <param name="message">name of message, can be truncated by *</param>
		/// <param name="subscriber">subscribing callback function</param>
		/// <param name="context">The execution context of the callback (i.e. &#8220;this&#8221;)</param>
		/// <returns>Success</returns>
		[JsMethod(Name = "subscribe")]
		public bool Subscribe(string message, Action<object> subscriber, object context) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>unsubscribe a listening method
		/// if you supply the callback function and execution context,
		/// remove only this exact subscription
		/// otherwise remove all subscriptions</para>
		/// </summary>
		/// <param name="message">Name of message, can be truncated by *</param>
		/// <param name="subscriber">Callback Function</param>
		/// <param name="context">execution context</param>
		/// <returns>Whether monitor was removed or not</returns>
		[JsMethod(Name = "unsubscribe")]
		public bool Unsubscribe(string message, Action<object> subscriber, object context) { throw new NotImplementedException(); }

		#endregion Methods
    }
}