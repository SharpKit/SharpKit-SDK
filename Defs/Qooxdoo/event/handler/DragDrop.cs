// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.handler
{
    /// <summary>
	/// <para>Event handler, which supports drag events on DOM elements.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.handler.DragDrop", OmitOptionalParameters = true, Export = false)]
    public partial class DragDrop : qx.core.Object, qx.eventx.IEventHandler
    {
		#region Methods

		public DragDrop() { throw new NotImplementedException(); }

		/// <param name="manager">Event manager for the window to use</param>
		public DragDrop(qx.eventx.Manager manager) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Registers a supported action. One of move,
		/// copy or alias.</para>
		/// </summary>
		/// <param name="action">The action to add</param>
		[JsMethod(Name = "addAction")]
		public void AddAction(string action) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds data of the given type to the internal storage. The data
		/// is available until the dragend event is fired.</para>
		/// </summary>
		/// <param name="type">Any valid type</param>
		/// <param name="data">Any data to store</param>
		[JsMethod(Name = "addData")]
		public void AddData(string type, object data) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Registers a supported type</para>
		/// </summary>
		/// <param name="type">The type to add</param>
		[JsMethod(Name = "addType")]
		public void AddType(string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the event handler can handle events of the given type. If the
		/// event handler class has a static variable called IGNORE_CAN_HANDLE
		/// with the value true this function is not called. Whether the
		/// handler can handle the event is them only determined by the static variables
		/// SUPPORTED_TYPES and TARGET_CHECK.</para>
		/// </summary>
		/// <param name="target">The target to, which the event handler should be attached</param>
		/// <param name="type">event type</param>
		/// <returns>Whether the event handler can handle events of the given type.</returns>
		[JsMethod(Name = "canHandleEvent")]
		public bool CanHandleEvent(object target, string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Cleans up a drag&amp;drop session when dragstart was fired before.</para>
		/// </summary>
		[JsMethod(Name = "clearSession")]
		public void ClearSession() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the currently selected action (by user keyboard modifiers)</para>
		/// </summary>
		/// <returns>One of move, copy or alias</returns>
		[JsMethod(Name = "getCurrentAction")]
		public string GetCurrentAction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the type which was requested last.</para>
		/// </summary>
		/// <returns>The last requested data type</returns>
		[JsMethod(Name = "getCurrentType")]
		public string GetCurrentType() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the data of the given type during the drop event
		/// on the drop target. This method fires a droprequest at
		/// the drag target which should be answered by calls to <see cref="AddData"/>.</para>
		/// </summary>
		/// <param name="type">Any supported type</param>
		/// <returns>The result data</returns>
		[JsMethod(Name = "getData")]
		public object GetData(string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns if a drag session is currently active</para>
		/// </summary>
		/// <returns>active drag session</returns>
		[JsMethod(Name = "isSessionActive")]
		public bool IsSessionActive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method is called each time an event listener, for one of the
		/// supported events, is added using <see cref="qx.event.Manager.AddListener"/>.</para>
		/// </summary>
		/// <param name="target">The target to, which the event handler should be attached</param>
		/// <param name="type">event type</param>
		/// <param name="capture">Whether to attach the event to the capturing phase or the bubbling phase of the event.</param>
		[JsMethod(Name = "registerEvent")]
		public void RegisterEvent(object target, string type, bool capture) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the current drag target supports the given action</para>
		/// </summary>
		/// <param name="type">Any type</param>
		/// <returns>Whether the action is supported</returns>
		[JsMethod(Name = "supportsAction")]
		public bool SupportsAction(string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the current drag target supports the given type</para>
		/// </summary>
		/// <param name="type">Any type</param>
		/// <returns>Whether the type is supported</returns>
		[JsMethod(Name = "supportsType")]
		public bool SupportsType(string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method is called each time an event listener, for one of the
		/// supported events, is removed by using <see cref="qx.event.Manager.RemoveListener"/>
		/// and no other event listener is listening on this type.</para>
		/// </summary>
		/// <param name="target">The target from, which the event handler should be removed</param>
		/// <param name="type">event type</param>
		/// <param name="capture">Whether to attach the event to the capturing phase or the bubbling phase of the event.</param>
		[JsMethod(Name = "unregisterEvent")]
		public void UnregisterEvent(object target, string type, bool capture) { throw new NotImplementedException(); }

		#endregion Methods
    }
}