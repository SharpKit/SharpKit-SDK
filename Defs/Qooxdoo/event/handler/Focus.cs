// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.handler
{
    /// <summary>
	/// <para>This handler is used to normalize all focus/activation requirements
	/// and normalize all cross browser quirks in this area.</para>
	/// <para>Notes:</para>
	/// <list type="bullet">
	/// <item>Webkit and Opera (before 9.5) do not support tabIndex for all elements
	/// (See also: http://bugs.webkit.org/show_bug.cgi?id=7138)</item>
	/// </list>
	/// <list type="bullet">
	/// <item>TabIndex is normally 0, which means all naturally focusable elements are focusable.</item>
	/// <item>TabIndex > 0 means that the element is focusable and tabable</item>
	/// <item>TabIndex 
	/// </list>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.handler.Focus", OmitOptionalParameters = true, Export = false)]
    public partial class Focus : qx.core.Object, qx.eventx.IEventHandler
    {
		#region Properties

		/// <summary>
		/// <para>The active DOM element</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "active", NativeField = true)]
		public object Active { get; set; }

		/// <summary>
		/// <para>The focussed DOM element</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "focus", NativeField = true)]
		public object Focusx { get; set; }

		#endregion Properties

		#region Methods

		public Focus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Create a new instance</para>
		/// </summary>
		/// <param name="manager">Event manager for the window to use</param>
		public Focus(qx.eventx.Manager manager) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Activates the given DOM element</para>
		/// </summary>
		/// <param name="element">DOM element to activate</param>
		[JsMethod(Name = "activate")]
		public void Activate(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Blurs the given DOM element</para>
		/// </summary>
		/// <param name="element">DOM element to focus</param>
		[JsMethod(Name = "blur")]
		public void Blur(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the event handler can handle events of the given type. If the
		/// event handler class has a static variable called IGNORE_CAN_HANDLE
		/// with the value true this function is not called. Whether the
		/// handler can handle the event is them only determined by the static variables
		/// SUPPORTED_TYPES and TARGET_CHECK.</para>
		/// </summary>
		/// <param name="target">The target to, which the event handler should be attached</param>
		/// <param name="type">event type</param>
		/// <returns>Whether the event handler can handle events of the given type.</returns>
		[JsMethod(Name = "canHandleEvent")]
		public bool CanHandleEvent(object target, string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Deactivates the given DOM element</para>
		/// </summary>
		/// <param name="element">DOM element to activate</param>
		[JsMethod(Name = "deactivate")]
		public void Deactivate(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Focuses the given DOM element</para>
		/// </summary>
		/// <param name="element">DOM element to focus</param>
		[JsMethod(Name = "focus")]
		public void FocusElement(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property active.</para>
		/// </summary>
		[JsMethod(Name = "getActive")]
		public object GetActive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property focus.</para>
		/// </summary>
		[JsMethod(Name = "getFocus")]
		public object GetFocus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property active
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property active.</param>
		[JsMethod(Name = "initActive")]
		public void InitActive(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property focus
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property focus.</param>
		[JsMethod(Name = "initFocus")]
		public void InitFocus(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method is called each time an event listener, for one of the
		/// supported events, is added using <see cref="qx.event.Manager.AddListener"/>.</para>
		/// </summary>
		/// <param name="target">The target to, which the event handler should be attached</param>
		/// <param name="type">event type</param>
		/// <param name="capture">Whether to attach the event to the capturing phase or the bubbling phase of the event.</param>
		[JsMethod(Name = "registerEvent")]
		public void RegisterEvent(object target, string type, bool capture) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property active.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetActive")]
		public void ResetActive() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property focus.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFocus")]
		public void ResetFocus() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property active.</para>
		/// </summary>
		/// <param name="value">New value for property active.</param>
		[JsMethod(Name = "setActive")]
		public void SetActive(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property focus.</para>
		/// </summary>
		/// <param name="value">New value for property focus.</param>
		[JsMethod(Name = "setFocus")]
		public void SetFocus(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Tries to activate the given element. This checks whether
		/// the activation is allowed first.</para>
		/// </summary>
		/// <param name="element">DOM element to activate</param>
		[JsMethod(Name = "tryActivate")]
		public void TryActivate(qx.html.Element element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>This method is called each time an event listener, for one of the
		/// supported events, is removed by using <see cref="qx.event.Manager.RemoveListener"/>
		/// and no other event listener is listening on this type.</para>
		/// </summary>
		/// <param name="target">The target from, which the event handler should be removed</param>
		/// <param name="type">event type</param>
		/// <param name="capture">Whether to attach the event to the capturing phase or the bubbling phase of the event.</param>
		[JsMethod(Name = "unregisterEvent")]
		public void UnregisterEvent(object target, string type, bool capture) { throw new NotImplementedException(); }

		#endregion Methods
    }
}