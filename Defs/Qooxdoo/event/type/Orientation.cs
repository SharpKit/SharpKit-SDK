// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.type
{
    /// <summary>
	/// <para>EXPERIMENTAL &#8211; NOT READY FOR PRODUCTION</para>
	/// <para>Orientation event object.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.type.Orientation", OmitOptionalParameters = true, Export = false)]
    public partial class Orientation : qx.eventx.type.Event
    {
		#region Methods

		public Orientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a copy of this object</para>
		/// </summary>
		/// <param name="embryo">Optional event class, which will be configured using the data of this event instance. The event must be an instance of this event class. If the data is null, a new pooled instance is created.</param>
		/// <returns>a copy of this object</returns>
		[JsMethod(Name = "clone")]
		public qx.eventx.type.Orientation Clone(qx.eventx.type.Orientation embryo = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current orientation of the viewport in degree.</para>
		/// <para>All possible values and their meaning:</para>
		/// <list type="bullet">
		/// <item>0: &#8220;Portrait&#8221;</item>
		/// <item>-90: &#8220;Landscape (right, screen turned clockwise)&#8221;</item>
		/// <item>90: &#8220;Landscape (left, screen turned counterclockwise)&#8221;</item>
		/// <item>180: &#8220;Portrait (upside-down portrait)&#8221;</item>
		/// </list
		/// </summary>
		/// <returns>The current orientation in degree</returns>
		[JsMethod(Name = "getOrientation")]
		public double GetOrientation() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initialize the fields of the event. The event must be initialized before
		/// it can be dispatched.</para>
		/// </summary>
		/// <param name="orientation">One of 0, 90 or -90</param>
		/// <param name="mode">landscape or portrait</param>
		/// <returns>The initialized event instance</returns>
		[JsMethod(Name = "init")]
		public qx.eventx.type.Orientation Init(string orientation, string mode) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the viewport orientation is currently in landscape mode.</para>
		/// </summary>
		/// <returns>true when the viewport orientation is currently in landscape mode.</returns>
		[JsMethod(Name = "isLandscape")]
		public bool IsLandscape() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the viewport orientation is currently in portrait mode.</para>
		/// </summary>
		/// <returns>true when the viewport orientation is currently in portrait mode.</returns>
		[JsMethod(Name = "isPortrait")]
		public bool IsPortrait() { throw new NotImplementedException(); }

		#endregion Methods
    }
}