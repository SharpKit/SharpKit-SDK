// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.type
{
    /// <summary>
	/// <para>Event object class for drag events</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.type.Drag", OmitOptionalParameters = true, Export = false)]
    public partial class Drag : qx.eventx.type.Event
    {
		#region Methods

		public Drag() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Used during dragstart listener to
		/// inform the manager about supported drop actions.</para>
		/// </summary>
		/// <param name="action">Action to add to the list of supported actions</param>
		[JsMethod(Name = "addAction")]
		public void AddAction(string action) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds data of the given type to the internal storage. The data
		/// is available until the dragend event is fired.</para>
		/// </summary>
		/// <param name="type">Any valid type</param>
		/// <param name="data">Any data to store</param>
		[JsMethod(Name = "addData")]
		public void AddData(string type, object data) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Used during dragstart listener to
		/// inform the manager about supported data types.</para>
		/// </summary>
		/// <param name="type">Data type to add to list of supported types</param>
		[JsMethod(Name = "addType")]
		public void AddType(string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Create a clone of the event object, which is not automatically disposed
		/// or pooled after an event dispatch.</para>
		/// </summary>
		/// <param name="embryo">Optional event class, which will be configured using the data of this event instance. The event must be an instance of this event class. If the value is null, a new pooled instance is created.</param>
		/// <returns>a clone of this class.</returns>
		[JsMethod(Name = "clone")]
		public qx.eventx.type.Event Clone(qx.eventx.type.Event embryo = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the currently selected action. Depends on the
		/// supported actions of the source target and the modification
		/// keys pressed by the user.</para>
		/// <para>Used in the droprequest listener.</para>
		/// </summary>
		/// <returns>The action. May be one of move, copy or alias.</returns>
		[JsMethod(Name = "getCurrentAction")]
		public string GetCurrentAction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the type which was requested last, to be used
		/// in the droprequest listener.</para>
		/// </summary>
		/// <returns>The last requested data type</returns>
		[JsMethod(Name = "getCurrentType")]
		public string GetCurrentType() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the data of the given type. Used in the drop listener.</para>
		/// </summary>
		/// <param name="type">Any of the supported types.</param>
		/// <returns>The data for the given type</returns>
		[JsMethod(Name = "getData")]
		public object GetData(string type) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the horizontal position at which the event occurred relative to the
		/// left of the document. This property takes into account any scrolling of
		/// the page.</para>
		/// </summary>
		/// <returns>The horizontal mouse position in the document.</returns>
		[JsMethod(Name = "getDocumentLeft")]
		public double GetDocumentLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the vertical position at which the event occurred relative to the
		/// top of the document. This property takes into account any scrolling of
		/// the page.</para>
		/// </summary>
		/// <returns>The vertical mouse position in the document.</returns>
		[JsMethod(Name = "getDocumentTop")]
		public double GetDocumentTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the drag&amp;drop event handler responsible for the target</para>
		/// </summary>
		/// <returns>The drag&amp;drop handler</returns>
		[JsMethod(Name = "getManager")]
		public qx.eventx.handler.DragDrop GetManager() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initialize the fields of the event. The event must be initialized before
		/// it can be dispatched.</para>
		/// </summary>
		/// <param name="cancelable">Whether or not an event can have its default action prevented. The default action can either be the browser&#8217;s default action of a native event (e.g. open the context menu on a right click) or the default action of a qooxdoo class (e.g. close the window widget). The default action can be prevented by calling qx.event.type.Event#preventDefault</param>
		/// <param name="originalEvent">The original (mouse) event to use</param>
		/// <returns>The initialized event instance</returns>
		[JsMethod(Name = "init")]
		public qx.eventx.type.Event Init(bool cancelable = false, qx.eventx.type.Mouse originalEvent = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stops the drag&amp;drop session and fires a dragend event.</para>
		/// </summary>
		[JsMethod(Name = "stopSession")]
		public void StopSession() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given action is supported by the drag
		/// target (source target).</para>
		/// <para>This is used in the event listeners for dragover
		/// or dragdrop.</para>
		/// </summary>
		/// <param name="action">The action to look for</param>
		/// <returns>Whether the given action is supported</returns>
		[JsMethod(Name = "supportsAction")]
		public bool SupportsAction(string action) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given type is supported by the drag
		/// target (source target).</para>
		/// <para>This is used in the event listeners for dragover
		/// or dragdrop.</para>
		/// </summary>
		/// <param name="type">The type to look for</param>
		/// <returns>Whether the given type is supported</returns>
		[JsMethod(Name = "supportsType")]
		public bool SupportsType(string type) { throw new NotImplementedException(); }

		#endregion Methods
    }
}