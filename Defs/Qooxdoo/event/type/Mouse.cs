// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.type
{
    /// <summary>
	/// <para>Mouse event object.</para>
	/// <para>the interface of this class is based on the DOM Level 2 mouse event
	/// interface: http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mouseevents</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.type.Mouse", OmitOptionalParameters = true, Export = false)]
    public partial class Mouse : qx.eventx.type.Dom
    {
		#region Methods

		public Mouse() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>During mouse events caused by the depression or release of a mouse button,
		/// this method can be used to check which mouse button changed state.</para>
		/// <para>Only internet explorer can compute the button during mouse move events. For
		/// all other browsers the button only contains sensible data during
		/// &#8220;click&#8221; events like &#8220;click&#8221;, &#8220;dblclick&#8221;, &#8220;mousedown&#8221;, &#8220;mouseup&#8221; or &#8220;contextmenu&#8221;.</para>
		/// <para>But still, browsers act different on click:</para>
		/// 
		/// <- = left mouse button
		/// -> = right mouse button
		/// ^  = middle mouse button
		/// Browser | click, dblclick | contextmenu
		/// ---------------------------------------
		/// Firefox |          | ->
		/// Chrome  | 
		/// Safari  | 
		/// IE      | 
		/// Opera   |  (twice)
		/// </code>
		/// </summary>
		/// <returns>One of &#8220;left&#8221;, &#8220;right&#8221;, &#8220;middle&#8221; or &#8220;none&#8221;</returns>
		[JsMethod(Name = "getButton")]
		public string GetButton() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the horizontal position at which the event occurred relative to the
		/// left of the document. This property takes into account any scrolling of
		/// the page.</para>
		/// </summary>
		/// <returns>The horizontal mouse position in the document.</returns>
		[JsMethod(Name = "getDocumentLeft")]
		public double GetDocumentLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the vertical position at which the event occurred relative to the
		/// top of the document. This property takes into account any scrolling of
		/// the page.</para>
		/// </summary>
		/// <returns>The vertical mouse position in the document.</returns>
		[JsMethod(Name = "getDocumentTop")]
		public double GetDocumentTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a secondary event target related to an UI event. This attribute is
		/// used with the mouseover event to indicate the event target which the
		/// pointing device exited and with the mouseout event to indicate the
		/// event target which the pointing device entered.</para>
		/// </summary>
		/// <returns>The secondary event target.</returns>
		[JsMethod(Name = "getRelatedTarget")]
		public qx.html.Element GetRelatedTarget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the horizontal coordinate at which the event occurred relative to
		/// the origin of the screen coordinate system.</para>
		/// <para>Note: This value is usually not very useful unless you want to
		/// position a native popup window at this coordinate.</para>
		/// </summary>
		/// <returns>The horizontal mouse position on the screen.</returns>
		[JsMethod(Name = "getScreenLeft")]
		public double GetScreenLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the vertical coordinate at which the event occurred relative to
		/// the origin of the screen coordinate system.</para>
		/// <para>Note: This value is usually not very useful unless you want to
		/// position a native popup window at this coordinate.</para>
		/// </summary>
		/// <returns>The vertical mouse position on the screen.</returns>
		[JsMethod(Name = "getScreenTop")]
		public double GetScreenTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the he horizontal coordinate at which the event occurred relative
		/// to the viewport.</para>
		/// </summary>
		/// <returns>The horizontal mouse position</returns>
		[JsMethod(Name = "getViewportLeft")]
		public double GetViewportLeft() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the vertical coordinate at which the event occurred relative
		/// to the viewport.</para>
		/// </summary>
		/// <returns>The vertical mouse position</returns>
		[JsMethod(Name = "getViewportTop")]
		public double GetViewportTop() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the left button is pressed</para>
		/// </summary>
		/// <returns>true when the left button is pressed</returns>
		[JsMethod(Name = "isLeftPressed")]
		public bool IsLeftPressed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the middle button is pressed</para>
		/// </summary>
		/// <returns>true when the middle button is pressed</returns>
		[JsMethod(Name = "isMiddlePressed")]
		public bool IsMiddlePressed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the right button is pressed</para>
		/// </summary>
		/// <returns>true when the right button is pressed</returns>
		[JsMethod(Name = "isRightPressed")]
		public bool IsRightPressed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Stops event from all further processing. Execute this when the
		/// current handler should have &#8220;exclusive rights&#8221; to the event
		/// and no further reaction by anyone else should happen.</para>
		/// </summary>
		[JsMethod(Name = "stop")]
		public void Stop() { throw new NotImplementedException(); }

		#endregion Methods
    }
}