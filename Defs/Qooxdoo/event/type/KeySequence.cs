// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.type
{
    /// <summary>
	/// <para>Keyboard event object.</para>
	/// <para>the interface of this class is based on the DOM Level 3 keyboard event
	/// interface: http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.type.KeySequence", OmitOptionalParameters = true, Export = false)]
    public partial class KeySequence : qx.eventx.type.Dom
    {
		#region Methods

		public KeySequence() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Create a clone of the event object, which is not automatically disposed
		/// or pooled after an event dispatch.</para>
		/// </summary>
		/// <param name="embryo">Optional event class, which will be configured using the data of this event instance. The event must be an instance of this event class. If the value is null, a new pooled instance is created.</param>
		/// <returns>a clone of this class.</returns>
		[JsMethod(Name = "clone")]
		public qx.eventx.type.Event Clone(qx.eventx.type.Event embryo = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the native keyCode and is best used on keydown/keyup events to
		/// check which physical key was pressed.
		/// Don&#8217;t use this on keypress events because it&#8217;s erroneous and
		/// inconsistent across browsers. But it can be used to detect which key is
		/// exactly pressed (e.g. for num pad keys).
		/// In any regular case, you should use <see cref="GetKeyIdentifier"/> which
		/// takes care of all cross browser stuff.</para>
		/// <para>The key codes are not character codes, they are just ASCII codes to
		/// identify the keyboard (or other input devices) keys.</para>
		/// </summary>
		/// <returns>The key code.</returns>
		[JsMethod(Name = "getKeyCode")]
		public double GetKeyCode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Identifier of the pressed key. This property is modeled after the KeyboardEvent.keyIdentifier property
		/// of the W3C DOM 3 event specification
		/// (http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-KeyboardEvent-keyIdentifier).</para>
		/// <para>Printable keys are represented by an unicode string, non-printable keys
		/// have one of the following values:</para>
		/// 
		/// BackspaceThe Backspace (Back) key.
		/// TabThe Horizontal Tabulation (Tab) key.
		/// SpaceThe Space (Spacebar) key.
		/// EnterThe Enter key. Note: This key identifier is also used for the Return (Macintosh numpad) key.
		/// ShiftThe Shift key.
		/// ControlThe Control (Ctrl) key.
		/// AltThe Alt (Menu) key.
		/// CapsLockThe CapsLock key
		/// MetaThe Meta key. (Apple Meta and Windows key)
		/// EscapeThe Escape (Esc) key.
		/// LeftThe Left Arrow key.
		/// UpThe Up Arrow key.
		/// RightThe Right Arrow key.
		/// DownThe Down Arrow key.
		/// PageUpThe Page Up key.
		/// PageDownThe Page Down (Next) key.
		/// EndThe End key.
		/// HomeThe Home key.
		/// InsertThe Insert (Ins) key. (Does not fire in Opera/Win)
		/// DeleteThe Delete (Del) Key.
		/// F1The F1 key.
		/// F2The F2 key.
		/// F3The F3 key.
		/// F4The F4 key.
		/// F5The F5 key.
		/// F6The F6 key.
		/// F7The F7 key.
		/// F8The F8 key.
		/// F9The F9 key.
		/// F10The F10 key.
		/// F11The F11 key.
		/// F12The F12 key.
		/// NumLockThe Num Lock key.
		/// PrintScreenThe Print Screen (PrintScrn, SnapShot) key.
		/// ScrollThe scroll lock key
		/// PauseThe pause/break key
		/// WinThe Windows Logo key
		/// AppsThe Application key (Windows Context Menu)
		/// 
		/// </summary>
		/// <returns>The key identifier</returns>
		[JsMethod(Name = "getKeyIdentifier")]
		public string GetKeyIdentifier() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initialize the fields of the event.</para>
		/// </summary>
		/// <param name="domEvent">DOM event</param>
		/// <param name="target">The event target</param>
		/// <param name="identifier">Key identifier</param>
		/// <returns>The initialized key event instance</returns>
		[JsMethod(Name = "init")]
		public qx.eventx.type.KeySequence Init(Event domEvent, object target, string identifier) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks whether the pressed key is printable.</para>
		/// </summary>
		/// <returns>Whether the pressed key is printable.</returns>
		[JsMethod(Name = "isPrintable")]
		public bool IsPrintable() { throw new NotImplementedException(); }

		#endregion Methods
    }
}