// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.type
{
    /// <summary>
	/// <para>EXPERIMENTAL &#8211; NOT READY FOR PRODUCTION</para>
	/// <para>Rest event object.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.type.Rest", OmitOptionalParameters = true, Export = false)]
    public partial class Rest : qx.eventx.type.Data
    {
		#region Properties

		/// <summary>
		/// <para>The action that invoked the request.</para>
		/// </summary>
		[JsProperty(Name = "action", NativeField = true)]
		public string Action { get; set; }

		/// <summary>
		/// <para>The id of the request.</para>
		/// </summary>
		[JsProperty(Name = "id", NativeField = true)]
		public double Id { get; set; }

		/// <summary>
		/// <para>The phase of the request.</para>
		/// </summary>
		[JsProperty(Name = "phase", NativeField = true)]
		public string Phase { get; set; }

		/// <summary>
		/// <para>The request of the event.</para>
		/// </summary>
		[JsProperty(Name = "request", NativeField = true)]
		public qx.io.request.AbstractRequest Request { get; set; }

		#endregion Properties

		#region Methods

		public Rest() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a copy of this object</para>
		/// </summary>
		/// <param name="embryo">Optional event class, which will be configured using the data of this event instance. The event must be an instance of this event class. If the data is null, a new pooled instance is created.</param>
		/// <returns>A copy of this object.</returns>
		[JsMethod(Name = "clone")]
		public qx.eventx.type.Data Clone(qx.eventx.type.Data embryo = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property action.</para>
		/// </summary>
		[JsMethod(Name = "getAction")]
		public string GetAction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property id.</para>
		/// </summary>
		[JsMethod(Name = "getId")]
		public double GetId() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property phase.</para>
		/// </summary>
		[JsMethod(Name = "getPhase")]
		public string GetPhase() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property request.</para>
		/// </summary>
		[JsMethod(Name = "getRequest")]
		public qx.io.request.AbstractRequest GetRequest() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initializes an event object.</para>
		/// </summary>
		/// <param name="data">Then event&#8217;s new data</param>
		/// <param name="old">The event&#8217;s old data</param>
		/// <param name="cancelable">Whether or not an event can have its default action prevented. The default action can either be the browser&#8217;s default action of a native event (e.g. open the context menu on a right click) or the default action of a qooxdoo class (e.g. close the window widget). The default action can be prevented by calling qx.event.type.Event#preventDefault</param>
		/// <param name="request">The associated request.</param>
		/// <param name="action">The associated action.</param>
		/// <param name="phase">The associated phase.</param>
		/// <returns>The initialized instance.</returns>
		[JsMethod(Name = "init")]
		public qx.eventx.type.Data Init(object data, object old = null, bool cancelable = false, qx.io.request.AbstractRequest request = null, string action = null, string phase = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property action
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property action.</param>
		[JsMethod(Name = "initAction")]
		public void InitAction(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property id
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property id.</param>
		[JsMethod(Name = "initId")]
		public void InitId(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property phase
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property phase.</param>
		[JsMethod(Name = "initPhase")]
		public void InitPhase(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property request
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property request.</param>
		[JsMethod(Name = "initRequest")]
		public void InitRequest(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property action.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAction")]
		public void ResetAction() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property id.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetId")]
		public void ResetId() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property phase.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPhase")]
		public void ResetPhase() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property request.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetRequest")]
		public void ResetRequest() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property action.</para>
		/// </summary>
		/// <param name="value">New value for property action.</param>
		[JsMethod(Name = "setAction")]
		public void SetAction(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property id.</para>
		/// </summary>
		/// <param name="value">New value for property id.</param>
		[JsMethod(Name = "setId")]
		public void SetId(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property phase.</para>
		/// </summary>
		/// <param name="value">New value for property phase.</param>
		[JsMethod(Name = "setPhase")]
		public void SetPhase(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property request.</para>
		/// </summary>
		/// <param name="value">New value for property request.</param>
		[JsMethod(Name = "setRequest")]
		public void SetRequest(qx.io.request.AbstractRequest value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}