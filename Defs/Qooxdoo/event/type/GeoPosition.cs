// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.eventx.type
{
    /// <summary>
	/// <para>EXPERIMENTAL &#8211; NOT READY FOR PRODUCTION</para>
	/// <para>GeoPosition event used by GeoLocation class.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.event.type.GeoPosition", OmitOptionalParameters = true, Export = false)]
    public partial class GeoPosition : qx.eventx.type.Event
    {
		#region Properties

		/// <summary>
		/// <para>The accuracy level of the latitude and longitude coordinates specified
		/// in meters.</para>
		/// </summary>
		[JsProperty(Name = "accuracy", NativeField = true)]
		public double Accuracy { get; set; }

		/// <summary>
		/// <para>The height of the position, specified in meters above the earth&#8217;s
		/// surface.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "altitude", NativeField = true)]
		public double Altitude { get; set; }

		/// <summary>
		/// <para>The accuracy level of the altitude specified in meters.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "altitudeAccuracy", NativeField = true)]
		public double AltitudeAccuracy { get; set; }

		/// <summary>
		/// <para>The direction of travel of the hosting device specified in degrees in a
		/// range from 0 to 360, counting clockwise relative to the true north.</para>
		/// <para>If the implementation cannot provide heading information, the value of
		/// this attribute must be null. If the hosting device is stationary (i.e.
		/// the value of the speed attribute is 0), then the value of the heading
		/// property must be NaN.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "heading", NativeField = true)]
		public object Heading { get; set; }

		/// <summary>
		/// <para>The angular distance north or south of the earth&#8217;s equator, measured in
		/// decimal degrees along a meridian</para>
		/// </summary>
		[JsProperty(Name = "latitude", NativeField = true)]
		public double Latitude { get; set; }

		/// <summary>
		/// <para>The angular distance on the earth&#8217;s surface, measured east or west from
		/// the prime meridian at Greenwich, England, in decimal degrees</para>
		/// </summary>
		[JsProperty(Name = "longitude", NativeField = true)]
		public double Longitude { get; set; }

		/// <summary>
		/// <para>The current ground speed of the hosting device specified in meters per
		/// second.</para>
		/// <para>If the implementation cannot provide speed information, the value of
		/// this property must be null.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "speed", NativeField = true)]
		public object Speed { get; set; }

		/// <summary>
		/// <para>The time when the position was acquired.</para>
		/// </summary>
		[JsProperty(Name = "timestamp", NativeField = true)]
		public double Timestamp { get; set; }

		#endregion Properties

		#region Methods

		/// <summary>
		/// <para>Create a new instance.</para>
		/// </summary>
		public GeoPosition() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property accuracy.</para>
		/// </summary>
		[JsMethod(Name = "getAccuracy")]
		public double GetAccuracy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property altitude.</para>
		/// </summary>
		[JsMethod(Name = "getAltitude")]
		public double GetAltitude() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property altitudeAccuracy.</para>
		/// </summary>
		[JsMethod(Name = "getAltitudeAccuracy")]
		public double GetAltitudeAccuracy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property heading.</para>
		/// </summary>
		[JsMethod(Name = "getHeading")]
		public object GetHeading() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property latitude.</para>
		/// </summary>
		[JsMethod(Name = "getLatitude")]
		public double GetLatitude() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property longitude.</para>
		/// </summary>
		[JsMethod(Name = "getLongitude")]
		public double GetLongitude() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property speed.</para>
		/// </summary>
		[JsMethod(Name = "getSpeed")]
		public object GetSpeed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property timestamp.</para>
		/// </summary>
		[JsMethod(Name = "getTimestamp")]
		public double GetTimestamp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Initialize the fields of the event.</para>
		/// </summary>
		/// <param name="position">a position map.</param>
		[JsMethod(Name = "init")]
		public void Init(object position) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property accuracy
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property accuracy.</param>
		[JsMethod(Name = "initAccuracy")]
		public void InitAccuracy(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property altitude
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property altitude.</param>
		[JsMethod(Name = "initAltitude")]
		public void InitAltitude(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property altitudeAccuracy
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property altitudeAccuracy.</param>
		[JsMethod(Name = "initAltitudeAccuracy")]
		public void InitAltitudeAccuracy(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property heading
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property heading.</param>
		[JsMethod(Name = "initHeading")]
		public void InitHeading(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property latitude
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property latitude.</param>
		[JsMethod(Name = "initLatitude")]
		public void InitLatitude(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property longitude
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property longitude.</param>
		[JsMethod(Name = "initLongitude")]
		public void InitLongitude(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property speed
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property speed.</param>
		[JsMethod(Name = "initSpeed")]
		public void InitSpeed(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property timestamp
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property timestamp.</param>
		[JsMethod(Name = "initTimestamp")]
		public void InitTimestamp(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property accuracy.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAccuracy")]
		public void ResetAccuracy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property altitude.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAltitude")]
		public void ResetAltitude() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property altitudeAccuracy.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAltitudeAccuracy")]
		public void ResetAltitudeAccuracy() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property heading.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetHeading")]
		public void ResetHeading() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property latitude.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLatitude")]
		public void ResetLatitude() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property longitude.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLongitude")]
		public void ResetLongitude() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property speed.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetSpeed")]
		public void ResetSpeed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property timestamp.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTimestamp")]
		public void ResetTimestamp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property accuracy.</para>
		/// </summary>
		/// <param name="value">New value for property accuracy.</param>
		[JsMethod(Name = "setAccuracy")]
		public void SetAccuracy(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property altitude.</para>
		/// </summary>
		/// <param name="value">New value for property altitude.</param>
		[JsMethod(Name = "setAltitude")]
		public void SetAltitude(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property altitudeAccuracy.</para>
		/// </summary>
		/// <param name="value">New value for property altitudeAccuracy.</param>
		[JsMethod(Name = "setAltitudeAccuracy")]
		public void SetAltitudeAccuracy(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property heading.</para>
		/// </summary>
		/// <param name="value">New value for property heading.</param>
		[JsMethod(Name = "setHeading")]
		public void SetHeading(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property latitude.</para>
		/// </summary>
		/// <param name="value">New value for property latitude.</param>
		[JsMethod(Name = "setLatitude")]
		public void SetLatitude(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property longitude.</para>
		/// </summary>
		/// <param name="value">New value for property longitude.</param>
		[JsMethod(Name = "setLongitude")]
		public void SetLongitude(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property speed.</para>
		/// </summary>
		/// <param name="value">New value for property speed.</param>
		[JsMethod(Name = "setSpeed")]
		public void SetSpeed(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property timestamp.</para>
		/// </summary>
		/// <param name="value">New value for property timestamp.</param>
		[JsMethod(Name = "setTimestamp")]
		public void SetTimestamp(double value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}