// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.io
{
    /// <summary>
	/// <para>The ImageLoader can preload and manage loaded image resources. It easily
	/// handles multiple requests and supports callbacks for successful and failed
	/// requests.</para>
	/// <para>After loading of an image the dimension of the image is stored as long
	/// as the application is running. This is quite useful for in-memory layouting.</para>
	/// <para>Use <see cref="Load"/> to preload your own images.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.io.ImageLoader", OmitOptionalParameters = true, Export = false)]
    public partial class ImageLoader 
    {
		#region Methods

		public ImageLoader() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Abort the loading for the given url.</para>
		/// </summary>
		/// <param name="source">URL of the image to abort its loading.</param>
		[JsMethod(Name = "abort")]
		public static void Abort(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the format of a previously loaded image</para>
		/// </summary>
		/// <param name="source">Image source to query</param>
		/// <returns>The format of the image or null</returns>
		[JsMethod(Name = "getFormat")]
		public static string GetFormat(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the image height</para>
		/// </summary>
		/// <param name="source">Image source to query</param>
		/// <returns>The height or null when the image is not loaded</returns>
		[JsMethod(Name = "getHeight")]
		public static double GetHeight(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the size of a previously loaded image</para>
		/// </summary>
		/// <param name="source">Image source to query</param>
		/// <returns>The dimension of the image (width and height as key). If the image is not yet loaded, the dimensions are given as null for width and height.</returns>
		[JsMethod(Name = "getSize")]
		public static object GetSize(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the image width</para>
		/// </summary>
		/// <param name="source">Image source to query</param>
		/// <returns>The width or null when the image is not loaded</returns>
		[JsMethod(Name = "getWidth")]
		public static double GetWidth(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given image has previously been requested using the
		/// <see cref="Load"/> method but failed.</para>
		/// </summary>
		/// <param name="source">Image source to query</param>
		/// <returns>true when the image loading failed</returns>
		[JsMethod(Name = "isFailed")]
		public static bool IsFailed(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given image has previously been loaded using the
		/// <see cref="Load"/> method.</para>
		/// </summary>
		/// <param name="source">Image source to query</param>
		/// <returns>true when the image is loaded</returns>
		[JsMethod(Name = "isLoaded")]
		public static bool IsLoaded(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the given image is currently loading.</para>
		/// </summary>
		/// <param name="source">Image source to query</param>
		/// <returns>true when the image is loading in the moment.</returns>
		[JsMethod(Name = "isLoading")]
		public static bool IsLoading(string source) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Loads the given image. Supports a callback which is
		/// executed when the image is loaded.</para>
		/// <para>This method works asychronous.</para>
		/// </summary>
		/// <param name="source">Image source to load</param>
		/// <param name="callback">Callback function to execute The first parameter of the callback is the given source url, the second parameter is the data entry which contains additional information about the image.</param>
		/// <param name="context">Context in which the given callback should be executed</param>
		[JsMethod(Name = "load")]
		public static void Load(string source, Action<object> callback, object context) { throw new NotImplementedException(); }

		#endregion Methods
    }
}