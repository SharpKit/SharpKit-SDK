// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.io.request
{
    /// <summary>
	/// <para>Query JSONP services using the script element. Requests may be cross-origin.</para>
	/// <para>Configuration of the request is done with properties. Events are fired for
	/// various states in the life cycle of a request, such as &#8220;success&#8221;. Request
	/// data is transparently processed.</para>
	/// <para>For an introduction to JSONP, please refer to
	/// Ajaxian.com.</para>
	/// <para>Here is how to request a JSON file from a REST service and listen to
	/// the &#8220;success&#8221; event:</para>
	/// <code>
	/// var req = new qx.io.request.Jsonp();
	/// req.setUrl("http://feeds.delicious.com/v2/json/popular");
	/// // Some services have a fixed callback name
	/// // req.setCallbackName("callback");
	/// req.addListener("success", function(e) {
	/// var req = e.getTarget();
	/// // HTTP status code indicating success, e.g. 200
	/// req.getStatus();
	/// // "success"
	/// req.getPhase();
	/// // JSON response
	/// req.getResponse();
	/// }, this);
	/// // Send request
	/// req.send();
	/// </code>
	/// <para>Some noteable features:</para>
	/// <list type="bullet">
	/// <item>Abstraction of low-level request</item>
	/// <item>Convenient setup using properties</item>
	/// <item>Fine-grained events</item>
	/// <item>Symbolic phases</item>
	/// <item>Transparent processing of request data</item>
	/// <item>Stream-lined authentication</item>
	/// <item>Flexible callback handling</item>
	/// <item>Cross-origin requests</item>
	/// </list>
	/// <para>In order to debug requests, set the environment flag
	/// qx.debug.io.</para>
	/// <para>Internally uses <see cref="qx.bom.request.Jsonp"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.io.request.Jsonp", OmitOptionalParameters = true, Export = false)]
    public partial class Jsonp : qx.io.request.AbstractRequest
    {
		#region Events

		/// <summary>
		/// <para>Fired when request completes without error.</para>
		/// <para>Every request receiving a response completes without error. This means
		/// that even for responses that do not call the callback, a &#8220;load&#8221; event
		/// is fired. If you are only interested in the JSON data received, consider
		/// listening to the <see cref="Success"/> event instead.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnLoad;

		/// <summary>
		/// <para>Fired when request completes without error but no data was received.</para>
		/// <para>The underlying script transport does not know the HTTP status of the
		/// response. However, if the callback was not called (no data received)
		/// an erroneous status (500) is assigned to the transport&#8217;s status
		/// property.</para>
		/// <para>Note: If you receive an unexpected &#8220;statusError&#8221;, check that the JSONP
		/// service accepts arbitrary callback names given as the &#8220;callback&#8221;
		/// parameter. In case the service expects another parameter for the callback
		/// name, use <see cref="SetCallbackParam"/>. Should the service respond with a
		/// hard-coded callback, set a custom callback name with
		/// <see cref="SetCallbackName"/>.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnStatusError;

		/// <summary>
		/// <para>Fired when request completes without error and data has been received.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnSuccess;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Whether to allow request to be answered from cache.</para>
		/// <para>Allowed values:</para>
		/// <list type="bullet">
		/// <item>true: Allow caching (Default)</item>
		/// <item>false: Prohibit caching. Appends nocache parameter to URL.</item>
		/// </list>
		/// </summary>
		[JsProperty(Name = "cache", NativeField = true)]
		public bool Cache { get; set; }

		#endregion Properties

		#region Methods

		public Jsonp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property cache.</para>
		/// </summary>
		[JsMethod(Name = "getCache")]
		public bool GetCache() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property cache
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property cache.</param>
		[JsMethod(Name = "initCache")]
		public void InitCache(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property cache equals true.</para>
		/// </summary>
		[JsMethod(Name = "isCache")]
		public void IsCache() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property cache.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetCache")]
		public void ResetCache() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property cache.</para>
		/// </summary>
		/// <param name="value">New value for property cache.</param>
		[JsMethod(Name = "setCache")]
		public void SetCache(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set callback name.</para>
		/// <para>See <see cref="qx.bom.request.Jsonp.SetCallbackName"/>.</para>
		/// </summary>
		/// <param name="name">Name of the callback function.</param>
		[JsMethod(Name = "setCallbackName")]
		public void SetCallbackName(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set callback parameter.</para>
		/// <para>See <see cref="qx.bom.request.Jsonp.SetCallbackParam"/>.</para>
		/// </summary>
		/// <param name="param">Name of the callback parameter.</param>
		[JsMethod(Name = "setCallbackParam")]
		public void SetCallbackParam(string param) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property cache.</para>
		/// </summary>
		[JsMethod(Name = "toggleCache")]
		public void ToggleCache() { throw new NotImplementedException(); }

		#endregion Methods
    }
}