// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.io.remote
{
    /// <summary>
	/// <para>This class is used to send HTTP requests to the server.</para>
	/// <para>Note: This class will be deprecated in a future release. Instead,
	/// please use classes found in <see cref="qx.io.request"/>.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.io.remote.Request", OmitOptionalParameters = true, Export = false)]
    public partial class Request : qx.core.Object
    {
		#region Events

		/// <summary>
		/// <para>Fired when the pending request has been aborted.</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnAborted;

		/// <summary>
		/// Fired on change of the property <see cref="State"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeState;

		/// <summary>
		/// <para>Fired once the request has finished successfully. The event object
		/// can be used to read the transferred data.</para>
		/// </summary>
		public event Action<qx.io.remote.Response> OnCompleted;

		/// <summary>
		/// <para>Fired when the Request object changes its state to &#8216;configured&#8217;</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnConfigured;

		/// <summary>
		/// <para>Fired when the Request object changes its state to &#8216;created&#8217;</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnCreated;

		/// <summary>
		/// <para>Fired when the pending request failes.</para>
		/// </summary>
		public event Action<qx.io.remote.Response> OnFailed;

		/// <summary>
		/// <para>Fired when the Request object changes its state to &#8216;receiving&#8217;</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnReceiving;

		/// <summary>
		/// <para>Fired when the Request object changes its state to &#8216;sending&#8217;</para>
		/// </summary>
		public event Action<qx.eventx.type.Event> OnSending;

		/// <summary>
		/// <para>Fired when the pending request times out.</para>
		/// </summary>
		public event Action<qx.io.remote.Response> OnTimeout;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Set the request to asynchronous.</para>
		/// </summary>
		[JsProperty(Name = "asynchronous", NativeField = true)]
		public bool Asynchronous { get; set; }

		/// <summary>
		/// <para>Indicate that the request is cross domain.</para>
		/// <para>A request is cross domain if the request&#8217;s URL points to a host other than
		/// the local host. This switches the concrete implementation that is used for
		/// sending the request from qx.io.remote.transport.XmlHttp to
		/// qx.io.remote.transport.Script, because only the latter can handle cross
		/// domain requests.</para>
		/// </summary>
		[JsProperty(Name = "crossDomain", NativeField = true)]
		public bool CrossDomain { get; set; }

		/// <summary>
		/// <para>Set the data to be sent via this request</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "data", NativeField = true)]
		public string Data { get; set; }

		/// <summary>
		/// <para>Indicate that the request will be used for a file upload.</para>
		/// <para>The request will be used for a file upload.  This switches the concrete
		/// implementation that is used for sending the request from
		/// qx.io.remote.transport.XmlHttp to qx.io.remote.IFrameTransport, because only
		/// the latter can handle file uploads.</para>
		/// </summary>
		[JsProperty(Name = "fileUpload", NativeField = true)]
		public bool FileUpload { get; set; }

		/// <summary>
		/// <para>Determines what type of request to issue (GET, POST, PUT, HEAD, DELETE).</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "GET","POST","PUT","HEAD","DELETE"
		/// </remarks>
		[JsProperty(Name = "method", NativeField = true)]
		public object Method { get; set; }

		/// <summary>
		/// <para>If true and the responseType property is set to &#8220;application/json&#8221;, getContent() will
		/// return a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().
		/// If false, the raw string data will be returned and the parsing must be done manually.
		/// This is usefull for special JSON dialects / extensions which are not supported by
		/// qx.lang.Json.</para>
		/// <para>Note that this is currently only respected by qx.io.remote.transport.XmlHttp, i. e.
		/// if the transport used is the one using XMLHttpRequests. The other transports
		/// do not support JSON parsing, so this property has no effect.</para>
		/// </summary>
		[JsProperty(Name = "parseJson", NativeField = true)]
		public bool ParseJson { get; set; }

		/// <summary>
		/// <para>Password to use for HTTP authentication.
		/// Set to NULL if HTTP authentication is not used.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "password", NativeField = true)]
		public string Password { get; set; }

		/// <summary>
		/// <para>Prohibit request from being cached.</para>
		/// <para>Setting the value to true adds a parameter &#8220;nocache&#8221; to the
		/// request URL with a value of the current time, as well as adding request
		/// headers Pragma:no-cache and Cache-Control:no-cache.</para>
		/// <para>Setting the value to false removes the parameter and request
		/// headers.</para>
		/// <para>As a special case, this property may be set to the string value
		/// &#8220;no-url-params-on-post&#8221; which will prevent the nocache parameter from
		/// being added to the URL if the POST method is used but will still add
		/// the Pragma and Cache-Control headers.  This is useful if your backend
		/// does nasty things like mixing parameters specified in the URL into
		/// form fields in the POST request.  (One example of this nasty behavior
		/// is known as &#8220;mixed mode&#8221; in Oracle, as described here:
		/// http://download.oracle.com/docs/cd/B32110_01/web.1013/b28963/concept.htm#i1005684)</para>
		/// </summary>
		[JsProperty(Name = "prohibitCaching", NativeField = true)]
		public object ProhibitCaching { get; set; }

		/// <summary>
		/// <para>Response type of request.</para>
		/// <para>The response type is a MIME type, default is text/plain. Other supported
		/// MIME types are text/javascript, text/html, application/json,
		/// application/xml.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "text/plain","text/javascript","application/json","application/xml","text/html"
		/// </remarks>
		[JsProperty(Name = "responseType", NativeField = true)]
		public object ResponseType { get; set; }

		/// <summary>
		/// <para>The state that the request is in, while being processed.</para>
		/// </summary>
		/// <remarks>
		/// Possible values: "configured","queued","sending","receiving","completed","aborted","timeout","failed"
		/// </remarks>
		[JsProperty(Name = "state", NativeField = true)]
		public object State { get; set; }

		/// <summary>
		/// <para>Number of milliseconds before the request is being timed out.</para>
		/// <para>If this property is null, the timeout for the request comes is the
		/// qx.io.remote.RequestQueue&#8217;s property defaultTimeout.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "timeout", NativeField = true)]
		public double Timeout { get; set; }

		/// <summary>
		/// <para>The transport instance used for the request.</para>
		/// <para>This is necessary to be able to abort an asynchronous request.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "transport", NativeField = true)]
		public qx.io.remote.Exchange Transport { get; set; }

		/// <summary>
		/// <para>Target url to issue the request to.</para>
		/// </summary>
		[JsProperty(Name = "url", NativeField = true)]
		public string Url { get; set; }

		/// <summary>
		/// <para>Use Basic HTTP Authentication.</para>
		/// </summary>
		[JsProperty(Name = "useBasicHttpAuth", NativeField = true)]
		public bool UseBasicHttpAuth { get; set; }

		/// <summary>
		/// <para>Username to use for HTTP authentication.
		/// Set to NULL if HTTP authentication is not used.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "username", NativeField = true)]
		public string Username { get; set; }

		#endregion Properties

		#region Methods

		public Request() { throw new NotImplementedException(); }

		/// <param name="vUrl">Target url to issue the request to.</param>
		/// <param name="vMethod">Determines http method (GET, POST, PUT, etc.) to use. See &#8220;method&#8221; property for valid values and default value.</param>
		/// <param name="vResponseType">The mime type of the response. Default is text/plain.</param>
		public Request(string vUrl, string vMethod, string vResponseType) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns true if the given HTTP method allows a request body being transferred to the server.
		/// This is currently POST and PUT. Other methods require their data being encoded into
		/// the URL</para>
		/// </summary>
		/// <param name="httpMethod">one of the values of the method property</param>
		/// <returns></returns>
		[JsMethod(Name = "methodAllowsRequestBody")]
		public static bool MethodAllowsRequestBody(string httpMethod) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Abort sending this request.</para>
		/// <para>The request is removed from the singleton class qx.io.remote.RequestQueue&#8217;s
		/// list of pending events. If the request haven&#8217;t been scheduled this
		/// method is a noop.</para>
		/// </summary>
		[JsMethod(Name = "abort")]
		public void Abort() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property asynchronous.</para>
		/// </summary>
		[JsMethod(Name = "getAsynchronous")]
		public bool GetAsynchronous() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property crossDomain.</para>
		/// </summary>
		[JsMethod(Name = "getCrossDomain")]
		public bool GetCrossDomain() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property data.</para>
		/// </summary>
		[JsMethod(Name = "getData")]
		public string GetData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property fileUpload.</para>
		/// </summary>
		[JsMethod(Name = "getFileUpload")]
		public bool GetFileUpload() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a form field in the POST request.</para>
		/// </summary>
		/// <param name="vId">Identifier of the form field to get.</param>
		/// <returns>Value of form field or null if no value exists for the passed identifier.</returns>
		[JsMethod(Name = "getFormField")]
		public string GetFormField(string vId) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the object containg all form fields for the POST request.</para>
		/// </summary>
		/// <returns>The returned object has as its property names each of the ids of form fields which have been added, and as each property value, the value of the property corresponding to that id.</returns>
		[JsMethod(Name = "getFormFields")]
		public object GetFormFields() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property method.</para>
		/// </summary>
		[JsMethod(Name = "getMethod")]
		public object GetMethod() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get a parameter in the request.</para>
		/// </summary>
		/// <param name="vId">Identifier of the parameter to get.</param>
		/// <param name="bFromData">If false then retrieve the parameter from the URL parameter list. If true then retrieve it from the list of parameters to be sent as request data.</param>
		/// <returns>The requested parameter value</returns>
		[JsMethod(Name = "getParameter")]
		public object GetParameter(string vId, bool bFromData) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the object containg all parameters for the request.</para>
		/// </summary>
		/// <param name="bFromData">If false then retrieve the URL parameter list. If true then retrieve the data parameter list.</param>
		/// <returns>The returned object has as its property names each of the ids of parameters which have been added, and as each property value, the value of the property corresponding to that id.</returns>
		[JsMethod(Name = "getParameters")]
		public object GetParameters(bool bFromData) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property parseJson.</para>
		/// </summary>
		[JsMethod(Name = "getParseJson")]
		public bool GetParseJson() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property password.</para>
		/// </summary>
		[JsMethod(Name = "getPassword")]
		public string GetPassword() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property prohibitCaching.</para>
		/// </summary>
		[JsMethod(Name = "getProhibitCaching")]
		public object GetProhibitCaching() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Retrieve the value of a header which was previously set</para>
		/// </summary>
		/// <param name="vId">The id of the header value being requested</param>
		/// <returns>The value of the header with the specified id</returns>
		[JsMethod(Name = "getRequestHeader")]
		public string GetRequestHeader(string vId) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return the object containing all of the headers which have been added.</para>
		/// </summary>
		/// <returns>The returned object has as its property names each of the ids of headers which have been added, and as each property value, the value of the property corresponding to that id.</returns>
		[JsMethod(Name = "getRequestHeaders")]
		public object GetRequestHeaders() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property responseType.</para>
		/// </summary>
		[JsMethod(Name = "getResponseType")]
		public object GetResponseType() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Obtain the sequence (id) number used for this request</para>
		/// </summary>
		/// <returns>The sequence number of this request</returns>
		[JsMethod(Name = "getSequenceNumber")]
		public double GetSequenceNumber() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property state.</para>
		/// </summary>
		[JsMethod(Name = "getState")]
		public object GetState() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property timeout.</para>
		/// </summary>
		[JsMethod(Name = "getTimeout")]
		public double GetTimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property transport.</para>
		/// </summary>
		[JsMethod(Name = "getTransport")]
		public qx.io.remote.Exchange GetTransport() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property url.</para>
		/// </summary>
		[JsMethod(Name = "getUrl")]
		public string GetUrl() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property useBasicHttpAuth.</para>
		/// </summary>
		[JsMethod(Name = "getUseBasicHttpAuth")]
		public bool GetUseBasicHttpAuth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property username.</para>
		/// </summary>
		[JsMethod(Name = "getUsername")]
		public string GetUsername() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property asynchronous
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property asynchronous.</param>
		[JsMethod(Name = "initAsynchronous")]
		public void InitAsynchronous(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property crossDomain
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property crossDomain.</param>
		[JsMethod(Name = "initCrossDomain")]
		public void InitCrossDomain(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property data
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property data.</param>
		[JsMethod(Name = "initData")]
		public void InitData(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property fileUpload
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property fileUpload.</param>
		[JsMethod(Name = "initFileUpload")]
		public void InitFileUpload(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property method
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property method.</param>
		[JsMethod(Name = "initMethod")]
		public void InitMethod(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property parseJson
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property parseJson.</param>
		[JsMethod(Name = "initParseJson")]
		public void InitParseJson(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property password
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property password.</param>
		[JsMethod(Name = "initPassword")]
		public void InitPassword(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property prohibitCaching
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property prohibitCaching.</param>
		[JsMethod(Name = "initProhibitCaching")]
		public void InitProhibitCaching(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property responseType
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property responseType.</param>
		[JsMethod(Name = "initResponseType")]
		public void InitResponseType(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property state
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property state.</param>
		[JsMethod(Name = "initState")]
		public void InitState(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property timeout
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property timeout.</param>
		[JsMethod(Name = "initTimeout")]
		public void InitTimeout(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property transport
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property transport.</param>
		[JsMethod(Name = "initTransport")]
		public void InitTransport(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property url
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property url.</param>
		[JsMethod(Name = "initUrl")]
		public void InitUrl(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property useBasicHttpAuth
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property useBasicHttpAuth.</param>
		[JsMethod(Name = "initUseBasicHttpAuth")]
		public void InitUseBasicHttpAuth(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property username
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property username.</param>
		[JsMethod(Name = "initUsername")]
		public void InitUsername(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if this request is in the aborted state.</para>
		/// </summary>
		/// <returns> if the request is in the aborted state;  otherwise.</returns>
		[JsMethod(Name = "isAborted")]
		public bool IsAborted() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property asynchronous equals true.</para>
		/// </summary>
		[JsMethod(Name = "isAsynchronous")]
		public void IsAsynchronous() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if this request is in the completed state.</para>
		/// </summary>
		/// <returns> if the request is in the completed state;  otherwise.</returns>
		[JsMethod(Name = "isCompleted")]
		public bool IsCompleted() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if this request is in the configured state.</para>
		/// </summary>
		/// <returns> if the request is in the configured state;  otherwise.</returns>
		[JsMethod(Name = "isConfigured")]
		public bool IsConfigured() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property crossDomain equals true.</para>
		/// </summary>
		[JsMethod(Name = "isCrossDomain")]
		public void IsCrossDomain() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if this request is in the failed state.</para>
		/// </summary>
		/// <returns> if the request is in the failed state;  otherwise.</returns>
		[JsMethod(Name = "isFailed")]
		public bool IsFailed() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property fileUpload equals true.</para>
		/// </summary>
		[JsMethod(Name = "isFileUpload")]
		public void IsFileUpload() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property parseJson equals true.</para>
		/// </summary>
		[JsMethod(Name = "isParseJson")]
		public void IsParseJson() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if this request is in the queued state.</para>
		/// </summary>
		/// <returns> if the request is in the queued state;  otherwise.</returns>
		[JsMethod(Name = "isQueued")]
		public bool IsQueued() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if this request is in the receiving state.</para>
		/// </summary>
		/// <returns> if the request is in the receiving state;  otherwise.</returns>
		[JsMethod(Name = "isReceiving")]
		public bool IsReceiving() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if this request is in the sending state.</para>
		/// </summary>
		/// <returns> if the request is in the sending state;  otherwise.</returns>
		[JsMethod(Name = "isSending")]
		public bool IsSending() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if this request is in the timeout state.</para>
		/// </summary>
		/// <returns> if the request is in the timeout state;  otherwise.</returns>
		[JsMethod(Name = "isTimeout")]
		public bool IsTimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property useBasicHttpAuth equals true.</para>
		/// </summary>
		[JsMethod(Name = "isUseBasicHttpAuth")]
		public void IsUseBasicHttpAuth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove a form field from the POST request.</para>
		/// </summary>
		/// <param name="vId">Identifier of the form field to remove.</param>
		[JsMethod(Name = "removeFormField")]
		public void RemoveFormField(string vId) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove a parameter from the request.</para>
		/// </summary>
		/// <param name="vId">Identifier of the parameter to remove.</param>
		/// <param name="bFromData">If false then remove the parameter of the URL parameter list. If true then remove it from the list of parameters to be sent as request data.</param>
		[JsMethod(Name = "removeParameter")]
		public void RemoveParameter(string vId, bool bFromData) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove a previously-added request header</para>
		/// </summary>
		/// <param name="vId">The id of the header to be removed</param>
		[JsMethod(Name = "removeRequestHeader")]
		public void RemoveRequestHeader(string vId) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Abort sending this request if it has not already been aborted.</para>
		/// </summary>
		[JsMethod(Name = "reset")]
		public void Reset() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property asynchronous.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetAsynchronous")]
		public void ResetAsynchronous() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property crossDomain.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetCrossDomain")]
		public void ResetCrossDomain() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property data.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetData")]
		public void ResetData() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property fileUpload.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetFileUpload")]
		public void ResetFileUpload() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property method.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetMethod")]
		public void ResetMethod() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property parseJson.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetParseJson")]
		public void ResetParseJson() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property password.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetPassword")]
		public void ResetPassword() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property prohibitCaching.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetProhibitCaching")]
		public void ResetProhibitCaching() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property responseType.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetResponseType")]
		public void ResetResponseType() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property state.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetState")]
		public void ResetState() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property timeout.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTimeout")]
		public void ResetTimeout() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property transport.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTransport")]
		public void ResetTransport() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property url.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUrl")]
		public void ResetUrl() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property useBasicHttpAuth.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUseBasicHttpAuth")]
		public void ResetUseBasicHttpAuth() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property username.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetUsername")]
		public void ResetUsername() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Schedule this request for transport to server.</para>
		/// <para>The request is added to the singleton class qx.io.remote.RequestQueue&#8217;s
		/// list of pending requests.</para>
		/// </summary>
		[JsMethod(Name = "send")]
		public void Send() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property asynchronous.</para>
		/// </summary>
		/// <param name="value">New value for property asynchronous.</param>
		[JsMethod(Name = "setAsynchronous")]
		public void SetAsynchronous(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property crossDomain.</para>
		/// </summary>
		/// <param name="value">New value for property crossDomain.</param>
		[JsMethod(Name = "setCrossDomain")]
		public void SetCrossDomain(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property data.</para>
		/// </summary>
		/// <param name="value">New value for property data.</param>
		[JsMethod(Name = "setData")]
		public void SetData(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property fileUpload.</para>
		/// </summary>
		/// <param name="value">New value for property fileUpload.</param>
		[JsMethod(Name = "setFileUpload")]
		public void SetFileUpload(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a form field to the POST request.</para>
		/// <para>NOTE: Adding any programatic form fields using this method will switch the
		/// Transport implementation to IframeTransport.</para>
		/// <para>NOTE: Use of these programatic form fields disallow use of synchronous
		/// requests and cross-domain requests.  Be sure that you do not need
		/// those features when setting these programatic form fields.</para>
		/// </summary>
		/// <param name="vId">String identifier of the form field to add.</param>
		/// <param name="vValue">Value of form field</param>
		[JsMethod(Name = "setFormField")]
		public void SetFormField(string vId, string vValue) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property method.</para>
		/// </summary>
		/// <param name="value">New value for property method.</param>
		[JsMethod(Name = "setMethod")]
		public void SetMethod(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a parameter to the request.</para>
		/// </summary>
		/// <param name="vId">String identifier of the parameter to add.</param>
		/// <param name="vValue">Value of parameter. May be a string (for one parameter) or an array of strings (for setting multiple parameter values with the same parameter name).</param>
		/// <param name="bAsData">If false, add the parameter to the URL.  If true then instead the parameters added by calls to this method will be combined into a string added as the request data, as if the entire set of parameters had been pre-build and passed to setData().  Note: Parameters requested to be sent as data will be silently dropped if data is manually added via a call to setData().  Note: Some transports, e.g. Script, do not support passing parameters as data.</param>
		[JsMethod(Name = "setParameter")]
		public void SetParameter(string vId, object vValue, bool bAsData) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property parseJson.</para>
		/// </summary>
		/// <param name="value">New value for property parseJson.</param>
		[JsMethod(Name = "setParseJson")]
		public void SetParseJson(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property password.</para>
		/// </summary>
		/// <param name="value">New value for property password.</param>
		[JsMethod(Name = "setPassword")]
		public void SetPassword(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property prohibitCaching.</para>
		/// </summary>
		/// <param name="value">New value for property prohibitCaching.</param>
		[JsMethod(Name = "setProhibitCaching")]
		public void SetProhibitCaching(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Add a request header to the request.</para>
		/// <para>Example: request.setRequestHeader(&#8220;Content-Type&#8221;, &#8220;text/html&#8221;)</para>
		/// <para>Please note: Some browsers, such as Safari 3 and 4, will capitalize
		/// header field names. This is in accordance with RFC 26161, which states
		/// that HTTP 1.1 header names are case-insensitive, so your server backend
		/// should be case-agnostic when dealing with request headers.</para>
		/// <para>[1]RFC 2616: HTTP Message Headers</para>
		/// </summary>
		/// <param name="vId">The identifier to use for this added header</param>
		/// <param name="vValue">The value to use for this added header</param>
		[JsMethod(Name = "setRequestHeader")]
		public void SetRequestHeader(string vId, string vValue) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property responseType.</para>
		/// </summary>
		/// <param name="value">New value for property responseType.</param>
		[JsMethod(Name = "setResponseType")]
		public void SetResponseType(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property state.</para>
		/// </summary>
		/// <param name="value">New value for property state.</param>
		[JsMethod(Name = "setState")]
		public void SetState(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property timeout.</para>
		/// </summary>
		/// <param name="value">New value for property timeout.</param>
		[JsMethod(Name = "setTimeout")]
		public void SetTimeout(double value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property transport.</para>
		/// </summary>
		/// <param name="value">New value for property transport.</param>
		[JsMethod(Name = "setTransport")]
		public void SetTransport(qx.io.remote.Exchange value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property url.</para>
		/// </summary>
		/// <param name="value">New value for property url.</param>
		[JsMethod(Name = "setUrl")]
		public void SetUrl(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property useBasicHttpAuth.</para>
		/// </summary>
		/// <param name="value">New value for property useBasicHttpAuth.</param>
		[JsMethod(Name = "setUseBasicHttpAuth")]
		public void SetUseBasicHttpAuth(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property username.</para>
		/// </summary>
		/// <param name="value">New value for property username.</param>
		[JsMethod(Name = "setUsername")]
		public void SetUsername(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property asynchronous.</para>
		/// </summary>
		[JsMethod(Name = "toggleAsynchronous")]
		public void ToggleAsynchronous() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property crossDomain.</para>
		/// </summary>
		[JsMethod(Name = "toggleCrossDomain")]
		public void ToggleCrossDomain() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property fileUpload.</para>
		/// </summary>
		[JsMethod(Name = "toggleFileUpload")]
		public void ToggleFileUpload() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property parseJson.</para>
		/// </summary>
		[JsMethod(Name = "toggleParseJson")]
		public void ToggleParseJson() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property useBasicHttpAuth.</para>
		/// </summary>
		[JsMethod(Name = "toggleUseBasicHttpAuth")]
		public void ToggleUseBasicHttpAuth() { throw new NotImplementedException(); }

		#endregion Methods
    }
}