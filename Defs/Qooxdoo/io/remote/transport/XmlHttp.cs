// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.io.remote.transport
{
    /// <summary>
	/// <para>Transports requests to a server using the native XmlHttpRequest object.</para>
	/// <para>This class should not be used directly by client programmers.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.io.remote.transport.XmlHttp", OmitOptionalParameters = true, Export = false)]
    public partial class XmlHttp : qx.io.remote.transport.Abstract
    {
		#region Properties

		/// <summary>
		/// <para>If true and the responseType property is set to &#8220;application/json&#8221;, getResponseContent() will
		/// return a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().
		/// If false, the raw string data will be returned and the parsing must be done manually.
		/// This is usefull for special JSON dialects / extensions which are not supported by
		/// qx.lang.Json.</para>
		/// </summary>
		[JsProperty(Name = "parseJson", NativeField = true)]
		public bool ParseJson { get; set; }

		#endregion Properties

		#region Methods

		public XmlHttp() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return a new XMLHttpRequest object suitable for the client browser.</para>
		/// </summary>
		/// <returns>native XMLHttpRequest object</returns>
		[JsMethod(Name = "createRequestObject")]
		public static object CreateRequestObject() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the transport type is supported by the client.</para>
		/// </summary>
		/// <returns>supported or not</returns>
		[JsMethod(Name = "isSupported")]
		public static bool IsSupported() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Force the transport into the failed state (&#8220;failed&#8221;).</para>
		/// <para>This method should be used only if the requests URI was local
		/// access. I.e. it started with &#8220;file://&#8221;.</para>
		/// </summary>
		[JsMethod(Name = "failedLocally")]
		public void FailedLocally() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the length of the content as fetched thus far</para>
		/// </summary>
		/// <returns>Length of the response text.</returns>
		[JsMethod(Name = "getFetchedLength")]
		public double GetFetchedLength() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property parseJson.</para>
		/// </summary>
		[JsMethod(Name = "getParseJson")]
		public bool GetParseJson() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the ready state of this transports request.</para>
		/// <para>For qx.io.remote.transport.XmlHttp, ready state is a number between 1 to 4.</para>
		/// </summary>
		/// <returns>ready state number</returns>
		[JsMethod(Name = "getReadyState")]
		public double GetReadyState() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the native request object</para>
		/// </summary>
		/// <returns>native XmlHTTPRequest object</returns>
		[JsMethod(Name = "getRequest")]
		public object GetRequest() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the content of the response</para>
		/// </summary>
		/// <returns>Response content if available</returns>
		[JsMethod(Name = "getResponseContent")]
		public string GetResponseContent() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a specific header provided by the server upon sending a request,
		/// with header name determined by the argument headerName.</para>
		/// <para>Only available at readyState 3 and 4 universally and in readyState 2
		/// in Gecko.</para>
		/// <para>Please note: Some servers/proxies (such as Selenium RC) will capitalize
		/// response header names. This is in accordance with RFC 26161, which
		/// states that HTTP 1.1 header names are case-insensitive, so your
		/// application should be case-agnostic when dealing with response headers.</para>
		/// <para>[1]RFC 2616: HTTP Message Headers</para>
		/// </summary>
		/// <param name="vLabel">Response header name</param>
		/// <returns>Response header value</returns>
		[JsMethod(Name = "getResponseHeader")]
		public string GetResponseHeader(string vLabel) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Provides a hash of all response headers.</para>
		/// </summary>
		/// <returns>hash of all response headers</returns>
		[JsMethod(Name = "getResponseHeaders")]
		public object GetResponseHeaders() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Provides the response text from the request when available and null
		/// otherwise.  By passing true as the &#8220;partial&#8221; parameter of this method,
		/// incomplete data will be made available to the caller.</para>
		/// </summary>
		/// <returns>Content of the response as string</returns>
		[JsMethod(Name = "getResponseText")]
		public string GetResponseText() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Provides the XML provided by the response if any and null otherwise.  By
		/// passing true as the &#8220;partial&#8221; parameter of this method, incomplete data will
		/// be made available to the caller.</para>
		/// </summary>
		/// <returns>Content of the response as XML</returns>
		[JsMethod(Name = "getResponseXml")]
		public string GetResponseXml() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the current status code of the request if available or -1 if not.</para>
		/// </summary>
		/// <returns>current status code</returns>
		[JsMethod(Name = "getStatusCode")]
		public double GetStatusCode() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Provides the status text for the current request if available and null
		/// otherwise.</para>
		/// </summary>
		/// <returns>current status code text</returns>
		[JsMethod(Name = "getStatusText")]
		public string GetStatusText() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all response headers of the request.</para>
		/// </summary>
		/// <returns>response headers</returns>
		[JsMethod(Name = "getStringResponseHeaders")]
		public object GetStringResponseHeaders() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property parseJson
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property parseJson.</param>
		[JsMethod(Name = "initParseJson")]
		public void InitParseJson(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the (computed) value of the boolean property parseJson equals true.</para>
		/// </summary>
		[JsMethod(Name = "isParseJson")]
		public void IsParseJson() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property parseJson.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetParseJson")]
		public void ResetParseJson() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Implementation for sending the request</para>
		/// </summary>
		[JsMethod(Name = "send")]
		public void Send() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property parseJson.</para>
		/// </summary>
		/// <param name="value">New value for property parseJson.</param>
		[JsMethod(Name = "setParseJson")]
		public void SetParseJson(bool value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Set a request header to this transports request.</para>
		/// </summary>
		/// <param name="vLabel">Request header name</param>
		/// <param name="vValue">Request header value</param>
		[JsMethod(Name = "setRequestHeader")]
		public void SetRequestHeader(string vLabel, object vValue) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Toggles the (computed) value of the boolean property parseJson.</para>
		/// </summary>
		[JsMethod(Name = "toggleParseJson")]
		public void ToggleParseJson() { throw new NotImplementedException(); }

		#endregion Methods
    }
}