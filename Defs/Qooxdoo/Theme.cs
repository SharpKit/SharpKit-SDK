// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx
{
    /// <summary>
	/// <para>Theme classes contain styling information for certain aspects of the
	/// graphical user interface.</para>
	/// <para>Supported themes are: colors, decorations, fonts, icons, appearances.
	/// The additional meta theme allows for grouping of the individual
	/// themes.</para>
	/// <para>For more details, take a look at the
	/// 
	/// documentation of the theme system in the qooxdoo manual.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.Theme", OmitOptionalParameters = true, Export = false)]
    public partial class Theme 
    {
		#region Methods

		public Theme() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Theme config</para>
		/// <para>Example:</para>
		/// <code>
		/// qx.Theme.define("name",
		/// {
		/// aliases : {
		/// "aliasKey" : "resourceFolderOrUri"
		/// },
		/// extend : otherTheme,
		/// include : [MMixinTheme],
		/// patch : [MMixinTheme],
		/// colors : {},
		/// decorations : {},
		/// fonts : {},
		/// widgets : {},
		/// appearances : {},
		/// meta : {}
		/// });
		/// </code>
		/// <para>For more details, take a look at the
		/// 
		/// documentation of the theme system in the qooxdoo manual.</para>
		/// </summary>
		/// <param name="name">name of the mixin</param>
		/// <param name="config">config structure</param>
		[JsMethod(Name = "define")]
		public static void Define(string name, object config) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Return a map of all known themes</para>
		/// </summary>
		/// <returns>known themes</returns>
		[JsMethod(Name = "getAll")]
		public static object GetAll() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a theme by name</para>
		/// </summary>
		/// <param name="name">theme name to check</param>
		/// <returns>theme object</returns>
		[JsMethod(Name = "getByName")]
		public static object GetByName(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine the number of themes which are defined</para>
		/// </summary>
		/// <returns>the number of classes</returns>
		[JsMethod(Name = "getTotalNumber")]
		public static double GetTotalNumber() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Include all keys of the given mixin theme into the theme. If the
		/// mixin includes any keys that are already available in the
		/// class, they will be silently ignored. Use the <see cref="Patch"/> method
		/// if you need to overwrite keys in the current class.</para>
		/// </summary>
		/// <param name="theme">An existing theme which should be modified by including the mixin theme.</param>
		/// <param name="mixinTheme">The theme to be included.</param>
		[JsMethod(Name = "include")]
		public static void Include(Theme theme, Theme mixinTheme) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if theme exists</para>
		/// </summary>
		/// <param name="name">theme name to check</param>
		/// <returns>true if theme exists</returns>
		[JsMethod(Name = "isDefined")]
		public static bool IsDefined(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Include all keys of the given mixin theme into the theme. The mixin may
		/// include keys which are already defined in the target theme. Existing
		/// features of equal name will be overwritten.</para>
		/// </summary>
		/// <param name="theme">An existing theme which should be modified by including the mixin theme.</param>
		/// <param name="mixinTheme">The theme to be included.</param>
		[JsMethod(Name = "patch")]
		public static void Patch(Theme theme, Theme mixinTheme) { throw new NotImplementedException(); }

		#endregion Methods
    }
}