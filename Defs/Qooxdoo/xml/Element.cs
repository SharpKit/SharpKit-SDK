// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.xml
{
    /// <summary>
	/// <para>Cross browser XML Element API</para>
	/// <para>API to select, query and serialize XML elements.</para>
	/// <para>Further information:</para>
	/// <list type="bullet">
	/// <item>MDN Parsing and Serializing XML</item>
	/// </list>
	/// <para>Please note that nodes selected using the selectSingleNode() and
	/// selectNodes() methods remain in their document context so
	/// qx.xml.Element.selectNodes(foo, &#8221;//bar&#8221;);
	/// will search the entire document for any nodes named &#8220;bar&#8221;, not just the
	/// foo node.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.xml.Element", OmitOptionalParameters = true, Export = false)]
    public partial class Element 
    {
		#region Methods

		public Element() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates an element with the given namespace and appends it to an existing
		/// element</para>
		/// </summary>
		/// <param name="document">The node&#8217;s parent document, created e.g. by qx.xml.Document#create</param>
		/// <param name="parent">The parent element for the new sub-element</param>
		/// <param name="name">The new element&#8217;s name</param>
		/// <param name="namespaceUri">Namespace URI for the new element</param>
		/// <returns>The newly created sub-element</returns>
		[JsMethod(Name = "createSubElementNS")]
		public static qx.html.Element CreateSubElementNS(Document document, qx.html.Element parent, string name, string namespaceUri) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the value of the attribute with the given namespace and name</para>
		/// </summary>
		/// <param name="element">XML/DOM element to modify</param>
		/// <param name="namespaceUri">Namespace URI</param>
		/// <param name="name">Attribute name</param>
		/// <returns>the value of the attribute, empty string if not found</returns>
		[JsMethod(Name = "getAttributeNS")]
		public static string GetAttributeNS(qx.html.Element element, string namespaceUri, string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a list of elements with the given tag name belonging to the given namespace</para>
		/// <para>(See
		/// MDN
		/// Reference).</para>
		/// </summary>
		/// <param name="element">the element from where the search should start. Note that only the descendants of this element are included in the search, not the node itself.</param>
		/// <param name="namespaceURI">is the namespace URI of elements to look for . For example, if you need to look for XHTML elements, use the XHTML namespace URI, http://www.w3.org/1999/xhtml.</param>
		/// <param name="tagname">the tagname to look for</param>
		/// <returns>a list of found elements in the order they appear in the tree.</returns>
		[JsMethod(Name = "getElementsByTagNameNS")]
		public static qx.html.Element GetElementsByTagNameNS(object element, object namespaceURI, string tagname) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects the first XmlNode that matches the XPath expression and returns the text content of the element</para>
		/// </summary>
		/// <param name="element">root element for the search</param>
		/// <param name="query">XPath query</param>
		/// <returns>the joined text content of the found element or null if not appropriate.</returns>
		[JsMethod(Name = "getSingleNodeText")]
		public static string GetSingleNodeText(object element, string query) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects a list of nodes matching the XPath expression.</para>
		/// </summary>
		/// <param name="element">root element for the search</param>
		/// <param name="query">XPath query</param>
		/// <param name="namespaces">optional map of prefixes and their namespace URIs</param>
		/// <returns>List of matching elements</returns>
		[JsMethod(Name = "selectNodes")]
		public static qx.html.Element SelectNodes(object element, string query, object namespaces) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Selects the first XmlNode that matches the XPath expression.</para>
		/// </summary>
		/// <param name="element">root element for the search</param>
		/// <param name="query">XPath query</param>
		/// <param name="namespaces">optional map of prefixes and their namespace URIs</param>
		/// <returns>first matching element</returns>
		[JsMethod(Name = "selectSingleNode")]
		public static qx.html.Element SelectSingleNode(object element, string query, object namespaces) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The subtree rooted by the specified element or document is serialized to a string.</para>
		/// </summary>
		/// <param name="element">The root of the subtree to be serialized. This could be any node, including a Document.</param>
		/// <returns>Serialized subtree</returns>
		[JsMethod(Name = "serialize")]
		public static string Serialize(object element) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Adds or sets an attribute with the given namespace on a node</para>
		/// </summary>
		/// <param name="document">The node&#8217;s parent document, created e.g. by qx.xml.Document#create</param>
		/// <param name="element">XML/DOM element to modify</param>
		/// <param name="namespaceUri">Namespace URI</param>
		/// <param name="name">Attribute name</param>
		/// <param name="value">Attribute value</param>
		[JsMethod(Name = "setAttributeNS")]
		public static void SetAttributeNS(Document document, qx.html.Element element, string namespaceUri, string name, string value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}