// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.lang
{
    /// <summary>
	/// <para>Utility class with type check for all native JavaScript data types.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.lang.Type", OmitOptionalParameters = true, Export = false)]
    public partial class Type 
    {
		#region Methods

		public Type() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Get the internal class of the value. See
		/// http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/
		/// for details.</para>
		/// </summary>
		/// <param name="value">value to get the class for</param>
		/// <returns>the internal class of the value</returns>
		[JsMethod(Name = "getClass")]
		public static string GetClass(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is an array.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is an array.</returns>
		[JsMethod(Name = "isArray")]
		public static bool IsArray(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is a boolean.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is a boolean.</returns>
		[JsMethod(Name = "isBoolean")]
		public static bool IsBoolean(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is a date.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is a date.</returns>
		[JsMethod(Name = "isDate")]
		public static bool IsDate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is a Error.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is a Error.</returns>
		[JsMethod(Name = "isError")]
		public static bool IsError(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is a function.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is a function.</returns>
		[JsMethod(Name = "isFunction")]
		public static bool IsFunction(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is a number.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is a number.</returns>
		[JsMethod(Name = "isNumber")]
		public static bool IsNumber(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is an object. Note that built-in types like Window are
		/// not reported to be objects.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is an object.</returns>
		[JsMethod(Name = "isObject")]
		public static bool IsObject(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is a regular expression.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is a regular expression.</returns>
		[JsMethod(Name = "isRegExp")]
		public static bool IsRegExp(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Whether the value is a string.</para>
		/// </summary>
		/// <param name="value">Value to check.</param>
		/// <returns>Whether the value is a string.</returns>
		[JsMethod(Name = "isString")]
		public static bool IsString(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}