// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.lang
{
    /// <summary>
	/// <para>String helper functions</para>
	/// <para>The native JavaScript String is not modified by this class. However,
	/// there are modifications to the native String in <see cref="qx.lang.normalize.String"/> for
	/// browsers that do not support certain features.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.lang.String", OmitOptionalParameters = true, Export = false)]
    public partial class String 
    {
		#region Methods

		public String() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Converts a hyphenated string (separated by &#8217;-&#8217;) to camel case.</para>
		/// <para>Example:</para>
		/// <code>qx.lang.String.camelCase("I-like-cookies"); //returns "ILikeCookies"</code>
		/// </summary>
		/// <param name="str">hyphenated string</param>
		/// <returns>camelcase string</returns>
		[JsMethod(Name = "camelCase")]
		public static string CamelCase(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Converts a string to camel case.</para>
		/// <para>Example:</para>
		/// <code>qx.lang.String.camelCase("i like cookies"); //returns "I Like Cookies"</code>
		/// </summary>
		/// <param name="str">any string</param>
		/// <returns>capitalized string</returns>
		[JsMethod(Name = "capitalize")]
		public static string Capitalize(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Removes all extraneous whitespace from a string and trims it</para>
		/// <para>Example:</para>
		/// 
		/// qx.lang.String.clean(" i      like     cookies      \n\n");
		/// 
		/// <para>Returns &#8220;i like cookies&#8221;</para>
		/// </summary>
		/// <param name="str">the string to clean up</param>
		/// <returns>Cleaned up string</returns>
		[JsMethod(Name = "clean")]
		public static string Clean(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the string contains a given substring</para>
		/// </summary>
		/// <param name="str">the string</param>
		/// <param name="substring">substring to search for</param>
		/// <returns>whether the string contains the substring</returns>
		[JsMethod(Name = "contains")]
		public static bool Contains(string str, string substring) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the string ends with the given substring</para>
		/// </summary>
		/// <param name="fullstr">the string to search in</param>
		/// <param name="substr">the substring to look for</param>
		/// <returns>whether the string ends with the given substring</returns>
		[JsMethod(Name = "endsWith")]
		public static bool EndsWith(string fullstr, string substr) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Escapes all chars that have a special meaning in regular expressions</para>
		/// </summary>
		/// <param name="str">the string where to escape the chars.</param>
		/// <returns>the string with the escaped chars.</returns>
		[JsMethod(Name = "escapeRegexpChars")]
		public static string EscapeRegexpChars(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Convert the first character of the string to lower case.</para>
		/// </summary>
		/// <param name="str">the string</param>
		/// <returns>the string with a lower case first character</returns>
		[JsMethod(Name = "firstLow")]
		public static string FirstLow(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Convert the first character of the string to upper case.</para>
		/// </summary>
		/// <param name="str">the string</param>
		/// <returns>the string with an upper case first character</returns>
		[JsMethod(Name = "firstUp")]
		public static string FirstUp(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Print a list of arguments using a format string
		/// In the format string occurrences of %n are replaced by the n&#8217;th element of the args list.
		/// Example:</para>
		/// <code>qx.lang.String.format("Hello %1, my name is %2", ["Egon", "Franz"]) == "Hello Egon, my name is Franz"</code>
		/// </summary>
		/// <param name="pattern">format string</param>
		/// <param name="args">array of arguments to insert into the format string</param>
		/// <returns>the formatted string</returns>
		[JsMethod(Name = "format")]
		public static string Format(string pattern, JsArray args) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Converts a camelcased string to a hyphenated (separated by &#8217;-&#8217;) string.</para>
		/// <para>Example:</para>
		/// <code>qx.lang.String.hyphenate("weLikeCookies"); //returns "we-like-cookies"</code>
		/// </summary>
		/// <param name="str">camelcased string</param>
		/// <returns>hyphenated string</returns>
		[JsMethod(Name = "hyphenate")]
		public static string Hyphenate(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Pad a string up to a given length. Padding characters are added to the left of the string.</para>
		/// </summary>
		/// <param name="str">the string to pad</param>
		/// <param name="length">the final length of the string</param>
		/// <param name="ch">character used to fill up the string</param>
		/// <returns>padded string</returns>
		[JsMethod(Name = "pad")]
		public static string Pad(string str, double length, string ch) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Quotes the given string.</para>
		/// </summary>
		/// <param name="str">String to quote.</param>
		/// <returns>The quoted string.</returns>
		[JsMethod(Name = "quote")]
		public static string Quote(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a string, which repeats a string &#8216;length&#8217; times</para>
		/// </summary>
		/// <param name="str">string used to repeat</param>
		/// <param name="times">the number of repetitions</param>
		/// <returns>repeated string</returns>
		[JsMethod(Name = "repeat")]
		public static string Repeat(string str, double times) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check whether the string starts with the given substring</para>
		/// </summary>
		/// <param name="fullstr">the string to search in</param>
		/// <param name="substr">the substring to look for</param>
		/// <returns>whether the string starts with the given substring</returns>
		[JsMethod(Name = "startsWith")]
		public static bool StartsWith(string fullstr, string substr) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Strips </para>
		/// </summary>
		/// <param name="str">string containing tags</param>
		/// <param name="exec">Whether the filtered code should be executed</param>
		/// <returns>The filtered string</returns>
		[JsMethod(Name = "stripScripts")]
		public static string StripScripts(string str, bool exec = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Remove HTML/XML tags from a string
		/// Example:</para>
		/// <code>qx.lang.String.stripTags("&lt;h1>Hello&lt;/h1>") == "Hello"</code>
		/// </summary>
		/// <param name="str">string containing tags</param>
		/// <returns>the string with stripped tags</returns>
		[JsMethod(Name = "stripTags")]
		public static string StripTags(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Converts a string to an array of characters.</para>
		/// "hello" => [ "h", "e", "l", "l", "o" ];</code>
		/// </summary>
		/// <param name="str">the string which should be split</param>
		/// <returns>the result array of characters</returns>
		[JsMethod(Name = "toArray")]
		public static JsArray ToArray(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>removes white space from the left and the right side of a string</para>
		/// </summary>
		/// <param name="str">the string to trim</param>
		/// <returns>the trimmed string</returns>
		[JsMethod(Name = "trim")]
		public static string Trim(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>removes white space from the left side of a string</para>
		/// </summary>
		/// <param name="str">the string to trim</param>
		/// <returns>the trimmed string</returns>
		[JsMethod(Name = "trimLeft")]
		public static string TrimLeft(string str) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>removes white space from the right side of a string</para>
		/// </summary>
		/// <param name="str">the string to trim</param>
		/// <returns>the trimmed string</returns>
		[JsMethod(Name = "trimRight")]
		public static string TrimRight(string str) { throw new NotImplementedException(); }

		#endregion Methods
    }
}