// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.lang
{
    /// <summary>
	/// <para>The intention of this class is to add features to native JavaScript
	/// objects so that all browsers operate on a common JavaScript language level
	/// (particularly JavaScript 1.6).</para>
	/// <para>The methods defined in this class contain implementations of methods, which
	/// are not supported by all browsers. If a method is supported it points to
	/// the native implementation, otherwise it contains an emulation function.</para>
	/// <para>For reference:</para>
	/// <list type="bullet">
	/// <item>http://www.ecma-international.org/publications/standards/Ecma-262.htm</item>
	/// <item>http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference</item>
	/// <item>http://developer.mozilla.org/en/docs/New_in_JavaScript_1.6</item>
	/// </list>
	/// <para>The following methods are added if they are not supported natively:</para>
	/// <list type="bullet">
	/// <item>Error.toString()</item>
	/// <item>Array.indexOf()</item>
	/// <item>Array.lastIndexOf()</item>
	/// <item>Array.forEach()</item>
	/// <item>Array.filter()</item>
	/// <item>Array.map()</item>
	/// <item>Array.some()</item>
	/// <item>Array.every()</item>
	/// <item>String.quote()</item>
	/// </list>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.lang.Core", OmitOptionalParameters = true, Export = false)]
    public partial class Core 
    {
		#region Methods

		public Core() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Tests whether all elements in the array pass the test implemented by the provided function.</para>
		/// every executes the provided callback function once for each element
		/// present in the array until it finds one where callback returns a false value. If
		/// such an element is found, the every method immediately returns false.
		/// Otherwise, if callback returned a true value for all elements, every
		/// will return true.  callback is invoked only for indexes of the array
		/// which have assigned values; it is not invoked for indexes which have been deleted or which have
		/// never been assigned values.
		/// callback is invoked with three arguments: the value of the element, the index of
		/// the element, and the Array object being traversed.
		/// <para>If a obj parameter is provided to every, it will be used as
		/// the this for each invocation of the callback. If it is not provided,
		/// or is null, the global object associated with callback is used instead.</para>
		/// every does not mutate the array on which it is called. The range of elements processed
		/// by every is set before the first invocation of callback. Elements which
		/// are appended to the array after the call to every begins will not be visited by
		/// callback.  If existing elements of the array are changed, their value as passed
		/// to callback will be the value at the time every visits them; elements
		/// that are deleted are not visited.
		/// <para>Natively supported in Gecko since version 1.8.
		/// http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:every</para>
		/// </summary>
		/// <param name="callback">Function to test for each element.</param>
		/// <param name="obj">Object to use as this when executing callback.</param>
		/// <returns>Returns false whether all elements in the array pass the test implemented by the provided function, false otherwise.</returns>
		[JsMethod(Name = "arrayEvery")]
		public static bool ArrayEvery(Action<object> callback, object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates a new array with all elements that pass the test implemented by the provided
		/// function.</para>
		/// filter calls a provided callback function once for each
		/// element in an array, and constructs a new array of all the values for which
		/// callback returns a true value.  callback is invoked only
		/// for indexes of the array which have assigned values; it is not invoked for indexes
		/// which have been deleted or which have never been assigned values.  Array elements which
		/// do not pass the callback test are simply skipped, and are not included
		/// in the new array.
		/// callback is invoked with three arguments: the value of the element, the
		/// index of the element, and the Array object being traversed.
		/// <para>If a obj parameter is provided to filter, it will
		/// be used as the this for each invocation of the callback.
		/// If it is not provided, or is null, the global object associated with
		/// callback is used instead.</para>
		/// filter does not mutate the array on which it is called. The range of
		/// elements processed by filter is set before the first invocation of
		/// callback. Elements which are appended to the array after the call to
		/// filter begins will not be visited by callback. If existing
		/// elements of the array are changed, or deleted, their value as passed to callback
		/// will be the value at the time filter visits them; elements that are deleted
		/// are not visited.
		/// <para>Natively supported in Gecko since version 1.8.
		/// http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:filter</para>
		/// </summary>
		/// <param name="callback">Function to test each element of the array.</param>
		/// <param name="obj">Object to use as this when executing callback.</param>
		/// <returns>Returns a new array with all elements that pass the test implemented by the provided function.</returns>
		[JsMethod(Name = "arrayFilter")]
		public static JsArray ArrayFilter(Action<object> callback, object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Executes a provided function once per array element.</para>
		/// forEach executes the provided function (callback) once for each
		/// element present in the array.  callback is invoked only for indexes of the array
		/// which have assigned values; it is not invoked for indexes which have been deleted or which
		/// have never been assigned values.
		/// callback is invoked with three arguments: the value of the element, the index
		/// of the element, and the Array object being traversed.
		/// <para>If a obj parameter is provided to forEach, it will be used
		/// as the this for each invocation of the callback.  If it is not
		/// provided, or is null, the global object associated with callback
		/// is used instead.</para>
		/// forEach does not mutate the array on which it is called.
		/// <para>The range of elements processed by forEach is set before the first invocation of
		/// callback.  Elements which are appended to the array after the call to
		/// forEach begins will not be visited by callback. If existing elements
		/// of the array are changed, or deleted, their value as passed to callback will be
		/// the value at the time forEach visits them; elements that are deleted are not visited.</para>
		/// <para>Natively supported in Gecko since version 1.8.
		/// http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:forEach</para>
		/// </summary>
		/// <param name="callback">Function to execute for each element.</param>
		/// <param name="obj">Object to use as this when executing callback.</param>
		[JsMethod(Name = "arrayForEach")]
		public static void ArrayForEach(Action<object> callback, object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the first index at which a given element can be found in the array,
		/// or -1 if it is not present. It compares searchElement to elements of the Array
		/// using strict equality (the same method used by the ===, or
		/// triple-equals, operator).</para>
		/// <para>Natively supported in Gecko since version 1.8.
		/// http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:indexOf</para>
		/// </summary>
		/// <param name="searchElement">Element to locate in the array.</param>
		/// <param name="fromIndex">The index at which to begin the search. Defaults to 0, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from front to back. If the calculated index is less than 0, the whole array will be searched.</param>
		/// <returns>Returns the first index at which a given element can be found in the array, or -1 if it is not present.</returns>
		[JsMethod(Name = "arrayIndexOf")]
		public static double ArrayIndexOf(object searchElement, double fromIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the last index at which a given element can be found in the array, or -1
		/// if it is not present. The array is searched backwards, starting at fromIndex.
		/// It compares searchElement to elements of the Array using strict equality
		/// (the same method used by the ===, or triple-equals, operator).</para>
		/// <para>Natively supported in Gecko since version 1.8.
		/// http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:lastIndexOf</para>
		/// </summary>
		/// <param name="searchElement">Element to locate in the array.</param>
		/// <param name="fromIndex">The index at which to start searching backwards. Defaults to the array&#8217;s length, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.</param>
		/// <returns>Returns the last index at which a given element can be found in the array, or -1 if it is not present.</returns>
		[JsMethod(Name = "arrayLastIndexOf")]
		public static double ArrayLastIndexOf(object searchElement, double fromIndex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates a new array with the results of calling a provided function on every element in this array.</para>
		/// map calls a provided callback function once for each element in an array,
		/// in order, and constructs a new array from the results.  callback is invoked only for
		/// indexes of the array which have assigned values; it is not invoked for indexes which have been
		/// deleted or which have never been assigned values.
		/// callback is invoked with three arguments: the value of the element, the index of the
		/// element, and the Array object being traversed.
		/// <para>If a obj parameter is provided to map, it will be used as the
		/// this for each invocation of the callback. If it is not provided, or is
		/// null, the global object associated with callback is used instead.</para>
		/// map does not mutate the array on which it is called.
		/// <para>The range of elements processed by map is set before the first invocation of
		/// callback. Elements which are appended to the array after the call to map
		/// begins will not be visited by callback.  If existing elements of the array are changed,
		/// or deleted, their value as passed to callback will be the value at the time
		/// map visits them; elements that are deleted are not visited.</para>
		/// <para>Natively supported in Gecko since version 1.8.
		/// http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:map</para>
		/// </summary>
		/// <param name="callback">Function produce an element of the new Array from an element of the current one.</param>
		/// <param name="obj">Object to use as this when executing callback.</param>
		/// <returns>Returns a new array with the results of calling a provided function on every element in this array.</returns>
		[JsMethod(Name = "arrayMap")]
		public static JsArray ArrayMap(Action<object> callback, object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Tests whether some element in the array passes the test implemented by the provided function.</para>
		/// some executes the callback function once for each element present in
		/// the array until it finds one where callback returns a true value. If such an element
		/// is found, some immediately returns true. Otherwise, some
		/// returns false. callback is invoked only for indexes of the array which
		/// have assigned values; it is not invoked for indexes which have been deleted or which have never
		/// been assigned values.
		/// callback is invoked with three arguments: the value of the element, the index of the
		/// element, and the Array object being traversed.
		/// <para>If a obj parameter is provided to some, it will be used as the
		/// this for each invocation of the callback. If it is not provided, or is
		/// null, the global object associated with callback is used instead.</para>
		/// some does not mutate the array on which it is called.
		/// <para>The range of elements processed by some is set before the first invocation of
		/// callback.  Elements that are appended to the array after the call to some
		/// begins will not be visited by callback. If an existing, unvisited element of the array
		/// is changed by callback, its value passed to the visiting callback will
		/// be the value at the time that some visits that element&#8217;s index; elements that are
		/// deleted are not visited.</para>
		/// <para>Natively supported in Gecko since version 1.8.
		/// http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:some</para>
		/// </summary>
		/// <param name="callback">Function to test for each element.</param>
		/// <param name="obj">Object to use as this when executing callback.</param>
		/// <returns>Returns true whether some element in the array passes the test implemented by the provided function, false otherwise.</returns>
		[JsMethod(Name = "arraySome")]
		public static bool ArraySome(Action<object> callback, object obj) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Some browsers (e.g. Internet Explorer) do not support to stringify
		/// error objects like other browsers usually do. This feature is added to
		/// those browsers.</para>
		/// </summary>
		/// <returns>Error message</returns>
		[JsMethod(Name = "errorToString")]
		public static string ErrorToString() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Surrounds the string with double quotes and escapes all double quotes
		/// and backslashes within the string.</para>
		/// <para>Note: Not part of ECMAScript Language Specification ECMA-262
		/// 3rd edition (December 1999), but implemented by Gecko:
		/// http://lxr.mozilla.org/seamonkey/source/js/src/jsstr.c</para>
		/// </summary>
		/// <returns>Returns a string with double quotes and escapes all double quotes and backslashes within the string.</returns>
		[JsMethod(Name = "stringQuote")]
		public static string StringQuote() { throw new NotImplementedException(); }

		#endregion Methods
    }
}