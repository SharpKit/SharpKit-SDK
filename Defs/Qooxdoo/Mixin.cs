// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx
{
    /// <summary>
	/// <para>This class is used to define mixins (similar to mixins in Ruby).</para>
	/// <para>Mixins are collections of code and variables, which can be merged into
	/// other classes. They are similar to classes but don&#8217;t support inheritance.</para>
	/// <para>See the description of the <see cref="Define"/> method how a mixin is defined.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.Mixin", OmitOptionalParameters = true, Export = false)]
    public partial class Mixin 
    {
		#region Methods

		public Mixin() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Check compatibility between mixins (including their includes)</para>
		/// </summary>
		/// <param name="mixins">an array of mixins</param>
		/// <returns>true if the mixin passed the compatibilty check</returns>
		[JsMethod(Name = "checkCompatibility")]
		public static bool CheckCompatibility(Mixin mixins) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Define a new mixin.</para>
		/// <para>Example:</para>
		/// <code>
		/// qx.Mixin.define("name",
		/// {
		/// include: [SuperMixins],
		/// properties: {
		/// tabIndex: {type: "number", init: -1}
		/// },
		/// members:
		/// {
		/// prop1: "foo",
		/// meth1: function() {},
		/// meth2: function() {}
		/// }
		/// });
		/// </code>
		/// </summary>
		/// <param name="name">name of the mixin</param>
		/// <param name="config">Mixin definition structure. The configuration map has the following keys:  NameTypeDescription constructFunctionAn optional mixin constructor. It is called on instantiation each class including this mixin. The constructor takes no parameters. destructFunctionAn optional mixin destructor. includeMixin[]Array of mixins, which will be merged into the mixin. staticsMap Map of statics of the mixin. The statics will not get copied into the target class. They remain accessible from the mixin. This is the same behaviour as statics in interfaces (qx.Interface#define).  membersMapMap of members of the mixin. propertiesMapMap of property definitions. For a description of the format of a property definition see qx.core.Property. eventsMap Map of events the mixin fires. The keys are the names of the events and the values are corresponding event type classes.  </param>
		/// <returns>The configured mixin</returns>
		[JsMethod(Name = "define")]
		public static qx.Mixin Define(string name, object config = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Generates a list of all mixins given plus all the
		/// mixins these includes plus&#8230; (deep)</para>
		/// </summary>
		/// <param name="mixins">List of mixins</param>
		/// <returns>List of all mixins</returns>
		[JsMethod(Name = "flatten")]
		public static JsArray Flatten(Mixin mixins = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns a mixin by name</para>
		/// </summary>
		/// <param name="name">class name to resolve</param>
		/// <returns>the class</returns>
		[JsMethod(Name = "getByName")]
		public static Class GetByName(string name) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine the number of mixins which are defined</para>
		/// </summary>
		/// <returns>the number of mixins</returns>
		[JsMethod(Name = "getTotalNumber")]
		public static double GetTotalNumber() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Checks if a class is compatible to the given mixin (no conflicts)</para>
		/// </summary>
		/// <param name="mixin">mixin to check</param>
		/// <param name="clazz">class to check</param>
		/// <returns>true if the mixin is compatible to the given class</returns>
		[JsMethod(Name = "isCompatible")]
		public static bool IsCompatible(Mixin mixin, Class clazz) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Determine if mixin exists</para>
		/// </summary>
		/// <param name="name">mixin name to check</param>
		/// <returns>true if mixin exists</returns>
		[JsMethod(Name = "isDefined")]
		public static bool IsDefined(string name) { throw new NotImplementedException(); }

		#endregion Methods
    }
}