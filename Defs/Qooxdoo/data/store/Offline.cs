// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.data.store
{
    /// <summary>
	/// <para>This store is a read / write store for local or session storage.
	/// It can be used like any other store by setting and manipulating the model
	/// property or the model itself. Please keep in mind that if you want to have
	/// the update functionality, you have to use a model which supports the
	/// <see cref="qx.data.marshal.MEventBubbling.ChangeBubble"/> event.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.data.store.Offline", OmitOptionalParameters = true, Export = false)]
    public partial class Offline : qx.core.Object
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Model"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModel;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Property for holding the loaded model instance. Please keep in mind to
		/// use a model supporting the changeBubble event.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "model", NativeField = true)]
		public object Model { get; set; }

		#endregion Properties

		#region Methods

		public Offline() { throw new NotImplementedException(); }

		/// <param name="key">A unique key which is used to store the data.</param>
		/// <param name="storage">Either &#8220;local&#8221; or &#8220;session&#8221; to determinate which storage should be used. Default: &#8220;local&#8221;</param>
		public Offline(string key, string storage) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Accessor for the unique key used to store the data.</para>
		/// </summary>
		/// <returns>The key.</returns>
		[JsMethod(Name = "getKey")]
		public string GetKey() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property model.</para>
		/// </summary>
		[JsMethod(Name = "getModel")]
		public object GetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property model
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property model.</param>
		[JsMethod(Name = "initModel")]
		public void InitModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property model.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetModel")]
		public void ResetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property model.</para>
		/// </summary>
		/// <param name="value">New value for property model.</param>
		[JsMethod(Name = "setModel")]
		public void SetModel(object value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}