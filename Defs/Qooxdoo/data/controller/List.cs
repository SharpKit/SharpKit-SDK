// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.data.controller
{
    /// <summary>
	/// List Controller
	/// <para>General idea
	/// The list controller is responsible for synchronizing every list like widget
	/// with a data array. It does not matter if the array contains atomic values
	/// like strings of complete objects where one property holds the value for
	/// the label and another property holds the icon url. You can even use converters
	/// that make the label show a text corresponding to the icon, by binding both
	/// label and icon to the same model property and converting one of them.</para>
	/// <para>Features</para>
	/// <list type="bullet">
	/// <item>Synchronize the model and the target</item>
	/// <item>Label and icon are bindable</item>
	/// <item>Takes care of the selection</item>
	/// <item>Passes on the options used by the bindings</item>
	/// </list
	/// <para>Usage</para>
	/// <para>As model, only <see cref="qx.data.Array"/>s do work. The currently supported
	/// targets are</para>
	/// <list type="bullet">
	/// <item><see cref="qx.ui.form.SelectBox"/></item>
	/// <item><see cref="qx.ui.form.List"/></item>
	/// <item><see cref="qx.ui.form.ComboBox"/></item>
	/// </list
	/// <para>All the properties like model, target or any property path is bindable.
	/// Especially the model is nice to bind to another selection for example.
	/// The controller itself can only work if it has a model and a target set. The
	/// rest of the properties may be empty.</para>
	/// <para>Cross reference</para>
	/// <list type="bullet">
	/// <item>If you want to bind single values, use <see cref="qx.data.controller.Object"/></item>
	/// <item>If you want to bind a tree widget, use <see cref="qx.data.controller.Tree"/></item>
	/// <item>If you want to bind a form widget, use <see cref="qx.data.controller.Form"/></item>
	/// </list
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.data.controller.List", OmitOptionalParameters = true, Export = false)]
    public partial class List : qx.core.Object, qx.data.controller.ISelection
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Delegate"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeDelegate;

		/// <summary>
		/// Fired on change of the property <see cref="Model"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModel;

		/// <summary>
		/// Fired on change of the property <see cref="Target"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeTarget;

		/// <summary>
		/// Fired on change of the property <see cref="Selection"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeSelection;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Delegation object, which can have one or more functions defined by the
		/// <see cref="IControllerDelegate"/> interface.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "delegate", NativeField = true)]
		public object Delegate { get; set; }

		/// <summary>
		/// <para>A map containing the options for the icon binding. The possible keys
		/// can be found in the <see cref="qx.data.SingleValueBinding"/> documentation.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "iconOptions", NativeField = true)]
		public object IconOptions { get; set; }

		/// <summary>
		/// <para>The path to the property which holds the information that should be
		/// shown as an icon. This is only needed if objects are stored in the model
		/// and if the icon should be shown.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "iconPath", NativeField = true)]
		public string IconPath { get; set; }

		/// <summary>
		/// <para>A map containing the options for the label binding. The possible keys
		/// can be found in the <see cref="qx.data.SingleValueBinding"/> documentation.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "labelOptions", NativeField = true)]
		public object LabelOptions { get; set; }

		/// <summary>
		/// <para>The path to the property which holds the information that should be
		/// shown as a label. This is only needed if objects are stored in the model.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "labelPath", NativeField = true)]
		public string LabelPath { get; set; }

		/// <summary>
		/// <para>Data array containing the data which should be shown in the list.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "model", NativeField = true)]
		public qx.data.IListData Model { get; set; }

		/// <summary>
		/// <para>The target widget which should show the data.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "target", NativeField = true)]
		public object Target { get; set; }

		/// <summary>
		/// <para>Data array containing the selected model objects. This property can be
		/// manipulated directly which means that a push to the selection will also
		/// select the corresponding element in the target.</para>
		/// </summary>
		[JsProperty(Name = "selection", NativeField = true)]
		public qx.data.Array Selection { get; set; }

		#endregion Properties

		#region Methods

		public List() { throw new NotImplementedException(); }

		/// <param name="model">The array containing the data.</param>
		/// <param name="target">The widget which should show the ListItems.</param>
		/// <param name="labelPath">If the model contains objects, the labelPath is the path reference to the property in these objects which should be shown as label.</param>
		public List(qx.data.Array model = null, qx.ui.core.Widget target = null, string labelPath = null) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Helper-Method for binding the default properties (label, icon and model)
		/// from the model to the target widget.</para>
		/// <para>This method should only be called in the
		/// <see cref="qx.data.controller.IControllerDelegate.BindItem"/> function
		/// implemented by the <see cref="Delegate"/> property.</para>
		/// </summary>
		/// <param name="item">The internally created and used ListItem.</param>
		/// <param name="index">The index of the ListItem.</param>
		[JsMethod(Name = "bindDefaultProperties")]
		public void BindDefaultProperties(qx.ui.form.ListItem item, double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Helper-Method for binding a given property from the model to the target
		/// widget.
		/// This method should only be called in the
		/// <see cref="qx.data.controller.IControllerDelegate.BindItem"/> function
		/// implemented by the <see cref="Delegate"/> property.</para>
		/// </summary>
		/// <param name="sourcePath">The path to the property in the model. If you use an empty string, the whole model item will be bound.</param>
		/// <param name="targetProperty">The name of the property in the target widget.</param>
		/// <param name="options">The options to use for the binding.</param>
		/// <param name="targetWidget">The target widget.</param>
		/// <param name="index">The index of the current binding.</param>
		[JsMethod(Name = "bindProperty")]
		public void BindProperty(string sourcePath, string targetProperty, object options, qx.ui.core.Widget targetWidget, double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Helper-Method for binding a given property from the target widget to
		/// the model.
		/// This method should only be called in the
		/// <see cref="qx.data.controller.IControllerDelegate.BindItem"/> function
		/// implemented by the <see cref="Delegate"/> property.</para>
		/// </summary>
		/// <param name="targetPath">The path to the property in the model.</param>
		/// <param name="sourcePath">The name of the property in the target.</param>
		/// <param name="options">The options to use for the binding.</param>
		/// <param name="sourceWidget">The source widget.</param>
		/// <param name="index">The index of the current binding.</param>
		[JsMethod(Name = "bindPropertyReverse")]
		public void BindPropertyReverse(string targetPath, string sourcePath, object options, qx.ui.core.Widget sourceWidget, double index) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property delegate.</para>
		/// </summary>
		[JsMethod(Name = "getDelegate")]
		public object GetDelegate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property iconOptions.</para>
		/// </summary>
		[JsMethod(Name = "getIconOptions")]
		public object GetIconOptions() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property iconPath.</para>
		/// </summary>
		[JsMethod(Name = "getIconPath")]
		public string GetIconPath() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property labelOptions.</para>
		/// </summary>
		[JsMethod(Name = "getLabelOptions")]
		public object GetLabelOptions() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property labelPath.</para>
		/// </summary>
		[JsMethod(Name = "getLabelPath")]
		public string GetLabelPath() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property model.</para>
		/// </summary>
		[JsMethod(Name = "getModel")]
		public qx.data.IListData GetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property target.</para>
		/// </summary>
		[JsMethod(Name = "getTarget")]
		public object GetTarget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns all models currently visible by the list. This method is only
		/// useful if you use the filter via the <see cref="Delegate"/>.</para>
		/// </summary>
		/// <returns>A new data array container all the models which representation items are currently visible.</returns>
		[JsMethod(Name = "getVisibleModels")]
		public qx.data.Array GetVisibleModels() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property delegate
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property delegate.</param>
		[JsMethod(Name = "initDelegate")]
		public void InitDelegate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property iconOptions
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property iconOptions.</param>
		[JsMethod(Name = "initIconOptions")]
		public void InitIconOptions(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property iconPath
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property iconPath.</param>
		[JsMethod(Name = "initIconPath")]
		public void InitIconPath(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property labelOptions
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property labelOptions.</param>
		[JsMethod(Name = "initLabelOptions")]
		public void InitLabelOptions(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property labelPath
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property labelPath.</param>
		[JsMethod(Name = "initLabelPath")]
		public void InitLabelPath(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property model
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property model.</param>
		[JsMethod(Name = "initModel")]
		public void InitModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property target
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property target.</param>
		[JsMethod(Name = "initTarget")]
		public void InitTarget(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property delegate.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetDelegate")]
		public void ResetDelegate() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property iconOptions.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIconOptions")]
		public void ResetIconOptions() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property iconPath.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetIconPath")]
		public void ResetIconPath() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property labelOptions.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLabelOptions")]
		public void ResetLabelOptions() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property labelPath.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetLabelPath")]
		public void ResetLabelPath() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property model.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetModel")]
		public void ResetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property target.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTarget")]
		public void ResetTarget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property delegate.</para>
		/// </summary>
		/// <param name="value">New value for property delegate.</param>
		[JsMethod(Name = "setDelegate")]
		public void SetDelegate(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property iconOptions.</para>
		/// </summary>
		/// <param name="value">New value for property iconOptions.</param>
		[JsMethod(Name = "setIconOptions")]
		public void SetIconOptions(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property iconPath.</para>
		/// </summary>
		/// <param name="value">New value for property iconPath.</param>
		[JsMethod(Name = "setIconPath")]
		public void SetIconPath(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property labelOptions.</para>
		/// </summary>
		/// <param name="value">New value for property labelOptions.</param>
		[JsMethod(Name = "setLabelOptions")]
		public void SetLabelOptions(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property labelPath.</para>
		/// </summary>
		/// <param name="value">New value for property labelPath.</param>
		[JsMethod(Name = "setLabelPath")]
		public void SetLabelPath(string value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property model.</para>
		/// </summary>
		/// <param name="value">New value for property model.</param>
		[JsMethod(Name = "setModel")]
		public void SetModel(qx.data.IListData value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property target.</para>
		/// </summary>
		/// <param name="value">New value for property target.</param>
		[JsMethod(Name = "setTarget")]
		public void SetTarget(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Updates the filter and the target. This could be used if the filter
		/// uses an additional parameter which changes the filter result.</para>
		/// </summary>
		[JsMethod(Name = "update")]
		public void Update() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Getter for the selection list.</para>
		/// </summary>
		/// <returns>The current selection.</returns>
		[JsMethod(Name = "getSelection")]
		public qx.data.IListData GetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property selection
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property selection.</param>
		[JsMethod(Name = "initSelection")]
		public void InitSelection(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the selection to its default value.</para>
		/// </summary>
		[JsMethod(Name = "resetSelection")]
		public void ResetSelection() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Setter for the selection.</para>
		/// </summary>
		/// <param name="value">The data of the selection.</param>
		[JsMethod(Name = "setSelection")]
		public void SetSelection(qx.data.IListData value) { throw new NotImplementedException(); }

		#endregion Methods
    }
}