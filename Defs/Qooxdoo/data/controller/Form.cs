// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.data.controller
{
    /// <summary>
	/// Form Controller
	/// <para>General idea</para>
	/// <para>The form controller is responsible for connecting a form with a model. If no
	/// model is given, a model can be created. This created model will fit exactly
	/// to the given form and can be used for serialization. All the connections
	/// between the form items and the model are handled by an internal
	/// <see cref="qx.data.controller.Object"/>.</para>
	/// <para>Features</para>
	/// <list type="bullet">
	/// <item>Connect a form to a model (bidirectional)</item>
	/// <item>Create a model for a given form</item>
	/// </list>
	/// <para>Usage</para>
	/// <para>The controller only works if both a controller and a model are set.
	/// Creating a model will automatically set the created model.</para>
	/// <para>Cross reference</para>
	/// <list type="bullet">
	/// <item>If you want to bind single values, use <see cref="qx.data.controller.Object"/></item>
	/// <item>If you want to bind a list like widget, use <see cref="qx.data.controller.List"/></item>
	/// <item>If you want to bind a tree widget, use <see cref="qx.data.controller.Tree"/></item>
	/// </list>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.data.controller.Form", OmitOptionalParameters = true, Export = false)]
    public partial class Form : qx.core.Object
    {
		#region Events

		/// <summary>
		/// Fired on change of the property <see cref="Model"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeModel;

		/// <summary>
		/// Fired on change of the property <see cref="Target"/>.
		/// </summary>
		public event Action<qx.eventx.type.Data> OnChangeTarget;

		#endregion Events

		#region Properties

		/// <summary>
		/// <para>Data object containing the data which should be shown in the target.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "model", NativeField = true)]
		public qx.core.Object Model { get; set; }

		/// <summary>
		/// <para>The target widget which should show the data.</para>
		/// </summary>
		/// <remarks>
		/// Allow nulls: true
		/// </remarks>
		[JsProperty(Name = "target", NativeField = true)]
		public qx.ui.form.Form Target { get; set; }

		#endregion Properties

		#region Methods

		public Form() { throw new NotImplementedException(); }

		/// <param name="model">The model to bind the target to. The given object will be set as #model property.</param>
		/// <param name="target">The form which contains the form items. The given form will be set as #target property.</param>
		/// <param name="selfUpdate">If set to true, you need to call the #updateModel method to get the data in the form to the model. Otherwise, the data will be synced automatically on every change of the form.</param>
		public Form(qx.core.Object model, qx.ui.form.Form target, bool selfUpdate = false) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>The form controller uses for setting up the bindings the fundamental
		/// binding layer, the <see cref="qx.data.SingleValueBinding"/>. To achieve a
		/// binding in both directions, two bindings are neede. With this method,
		/// you have the opportunity to set the options used for the bindings.</para>
		/// </summary>
		/// <param name="name">The name of the form item for which the options should be used.</param>
		/// <param name="model2target">Options map used for the binding from model to target. The possible options can be found in the qx.data.SingleValueBinding class.</param>
		/// <param name="target2model">Options map used for the binding from target to model. The possible options can be found in the qx.data.SingleValueBinding class.</param>
		[JsMethod(Name = "addBindingOptions")]
		public void AddBindingOptions(string name, object model2target, object target2model) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates and sets a model using the <see cref="qx.data.marshal.Json"/> object.
		/// Remember that this method can only work if the form is set. The created
		/// model will fit exactly that form. Changing the form or adding an item to
		/// the form will need a new model creation.</para>
		/// </summary>
		/// <param name="includeBubbleEvents">Whether the model should support the bubbling of change events or not.</param>
		/// <returns>The created model.</returns>
		[JsMethod(Name = "createModel")]
		public qx.core.Object CreateModel(bool includeBubbleEvents) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property model.</para>
		/// </summary>
		[JsMethod(Name = "getModel")]
		public qx.core.Object GetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Returns the (computed) value of the property target.</para>
		/// </summary>
		[JsMethod(Name = "getTarget")]
		public qx.ui.form.Form GetTarget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property model
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property model.</param>
		[JsMethod(Name = "initModel")]
		public void InitModel(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Calls the apply method and dispatches the change event of the property target
		/// with the default value defined by the class developer. This function can
		/// only be called from the constructor of a class.</para>
		/// </summary>
		/// <param name="value">Initial value for property target.</param>
		[JsMethod(Name = "initTarget")]
		public void InitTarget(object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property model.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetModel")]
		public void ResetModel() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Resets the user value of the property target.</para>
		/// <para>The computed value falls back to the next available value e.g. appearance, init or
		/// inheritance value depeneding on the property configuration and value availability.</para>
		/// </summary>
		[JsMethod(Name = "resetTarget")]
		public void ResetTarget() { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property model.</para>
		/// </summary>
		/// <param name="value">New value for property model.</param>
		[JsMethod(Name = "setModel")]
		public void SetModel(qx.core.Object value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Sets the user value of the property target.</para>
		/// </summary>
		/// <param name="value">New value for property target.</param>
		[JsMethod(Name = "setTarget")]
		public void SetTarget(qx.ui.form.Form value) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Responsible for synching the data from entered in the form to the model.
		/// Please keep in mind that this method only works if you create the form
		/// with selfUpdate set to true. Otherwise, this method will
		/// do nothing because updates will be synched automatically on every
		/// change.</para>
		/// </summary>
		[JsMethod(Name = "updateModel")]
		public void UpdateModel() { throw new NotImplementedException(); }

		#endregion Methods
    }
}