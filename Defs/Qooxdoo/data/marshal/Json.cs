// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.data.marshal
{
    /// <summary>
	/// <para>This class is responsible for converting json data to class instances
	/// including the creation of the classes.</para>
	/// </summary>
	[JsType(JsMode.Prototype, Name = "qx.data.marshal.Json", OmitOptionalParameters = true, Export = false)]
    public partial class Json : qx.core.Object, qx.data.marshal.IMarshaler
    {
		#region Methods

		public Json() { throw new NotImplementedException(); }

		/// <param name="delegatex">An object containing one of the methods described in qx.data.marshal.IMarshalerDelegate.</param>
		public Json(object delegatex) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates a qooxdoo object based on the given json data. This function
		/// is just a static wrapper. If you want to configure the creation
		/// process of the class, use <see cref="qx.data.marshal.Json"/> directly.</para>
		/// </summary>
		/// <param name="data">The object for which classes should be created.</param>
		/// <param name="includeBubbleEvents">Whether the model should support the bubbling of change events or not.</param>
		/// <returns>An instance of the corresponding class.</returns>
		[JsMethod(Name = "createModel")]
		public static qx.core.Object CreateModel(object data, bool includeBubbleEvents) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates for the given data the needed classes. The classes contain for
		/// every key in the data a property. The classname is always the prefix
		/// qx.data.model. Two objects containing the same keys will not
		/// create two different classes.</para>
		/// </summary>
		/// <param name="data">The object for which classes should be created.</param>
		/// <param name="includeBubbleEvents">Whether the model should support the bubbling of change events or not.</param>
		[JsMethod(Name = "toClass")]
		public void ToClass(object data, bool includeBubbleEvents) { throw new NotImplementedException(); }

		/// <summary>
		/// <para>Creates for the given data the needed models. Be sure to have the classes
		/// created with <see cref="ToClass"/> before calling this method.</para>
		/// </summary>
		/// <param name="data">The object for which models should be created.</param>
		/// <returns>The created model object.</returns>
		[JsMethod(Name = "toModel")]
		public qx.core.Object ToModel(object data) { throw new NotImplementedException(); }

		#endregion Methods
    }
}