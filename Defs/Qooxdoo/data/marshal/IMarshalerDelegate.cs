// Generated by SharpKit.QooxDoo.Generator
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;

namespace qx.data.marshal
{
    /// <summary>
	/// <para>Objects, which are used as delegates for a data binding marshaler may
	/// implement any of the methods described in this interface. The delegate does
	/// not need implement all of the methods of this interface. If a method is not
	/// implemented the marshaler provides a default implementation.</para>
	/// <para>Note: This interface is meant to document the delegate but should not be
	/// listed in the implement key of a class unless all methods are
	/// really implemented.</para>
	/// </summary>
	public interface IMarshalerDelegate
    {
		#region Methods

		/// <summary>
		/// <para>Determines the user defined class for the given properties string.
		/// This class could contain additional methods but needs to have the
		/// properties with the given names. Also every property needs to have a
		/// change event.</para>
		/// <para>If this method is implemented, you have to add the superclass and mixins
		/// yourself to the returned class. This means that the methods
		/// <see cref="GetModelSuperClass"/> and <see cref="GetModelMixins"/> will not be
		/// called for the corresponding class.</para>
		/// </summary>
		/// <param name="properties">A sorted order of propertynames separated by &#8221;.</param>
		/// <returns>Returns the class containing the properties corresponding to the given hash of the properties. If null will be returned, the marshaler will create a class.</returns>
		Class GetModelClass(string properties);

		/// <summary>
		/// <para>Returns the mixins which should be included to the class, created by the
		/// marshaler and identified by the given properties string.</para>
		/// </summary>
		/// <param name="properties">A sorted order of propertynames separated by &#8221;.</param>
		/// <returns>Returns an array of mixins or a single mixin which will be included into the given class identified by the properties given in the parameter. If null will be returned, no mixin will be included.</returns>
		object GetModelMixins(string properties);

		/// <summary>
		/// <para>Returns the class which the created model class uses as superclass.</para>
		/// </summary>
		/// <param name="properties">A sorted order of propertynames separated by &#8221;.</param>
		/// <returns>Returns the class which should be used as superclass corresponding to the given hash of the properties. If null will be returned, qx.core.Object will be used as superclass.</returns>
		Class GetModelSuperClass(string properties);

		/// <summary>
		/// <para>Gives the possibility to change the names given in the data to convert
		/// to something different.</para>
		/// </summary>
		/// <param name="property">The name of the property from the data source.</param>
		/// <param name="properties">A sorted order of propertynames separated by &#8221;.</param>
		/// <returns>The new which should be used for that property in the model.</returns>
		string GetPropertyMapping(string property, string properties);

		/// <summary>
		/// <para>Returns the validation rules which should be added to the created class
		/// for the given property. This method will be called for every property.</para>
		/// </summary>
		/// <param name="properties">A sorted order of propertynames separated by &#8221;.</param>
		/// <param name="propertyName">The name of the current property.</param>
		/// <returns>If you want to have a validation rule for the current property, you should return a validation function which will be included into the property definition as validator. qx.core.Property for more details.</returns>
		Action<object> GetValidationRule(string properties, string propertyName);

		/// <summary>
		/// <para>Gives the possibility to ignore parts of the marshaled data and store the
		/// original data.</para>
		/// </summary>
		/// <param name="properties">A sorted order of propertynames separated by &#8221;.</param>
		/// <param name="parentProperty">If there is a named parent property, the name is given here. This might be null in case of arrays and the root data.</param>
		/// <param name="depth">The depth level of the data.</param>
		/// <returns>The new which should be used for that property in the model.</returns>
		string Ignore(string properties, string parentProperty, double depth);

		#endregion Methods
    }
}