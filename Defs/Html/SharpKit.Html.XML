<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.Html</name>
    </assembly>
    <members>
        <member name="T:SharpKit.Html.DocumentView">
            <summary>
            The <code>DocumentView</code> interface is implemented by 
            <code>Document</code> objects in DOM implementations supporting DOM 
            Views. It provides an attribute to retrieve the default view of a 
            document.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113'>Document Object Model (DOM) Level 2 Views Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.DocumentView.defaultView">
            <summary>
            The default <code>AbstractView</code> for this <code>Document</code>, 
            or <code>null</code> if none available.
            </summary>
        </member>
        <member name="T:SharpKit.Html.Element">
            <summary>
            The <code>Element</code> interface represents an element in an HTML or XML 
            document. Elements may have attributes associated with them; since the 
            <code>Element</code> interface inherits from <code>Node</code>, the 
            generic <code>Node</code> interface attribute <code>attributes</code> may 
            be used to retrieve the set of all attributes for an element. There are 
            methods on the <code>Element</code> interface to retrieve either an 
            <code>Attr</code> object by name or an attribute value by name. In XML, 
            where an attribute value may contain entity references, an 
            <code>Attr</code> object should be retrieved to examine the possibly 
            fairly complex sub-tree representing the attribute value. On the other 
            hand, in HTML, where all attributes have simple string values, methods to 
            directly access an attribute value can safely be used as a convenience.In 
            DOM Level 2, the method <code>normalize</code> is inherited from the 
            <code>Node</code> interface where it was moved.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="T:SharpKit.Html.Node">
            <summary>
            The <code>Node</code> interface is the primary datatype for the entire 
            Document Object Model. It represents a single node in the document tree. 
            While all objects implementing the <code>Node</code> interface expose 
            methods for dealing with children, not all objects implementing the 
            <code>Node</code> interface may have children. For example, 
            <code>Text</code> nodes may not have children, and adding children to 
            such nodes results in a <code>DOMException</code> being raised.
            <br/>The attributes <code>nodeName</code>, <code>nodeValue</code> and 
            <code>attributes</code> are included as a mechanism to get at node 
            information without casting down to the specific derived interface. In 
            cases where there is no obvious mapping of these attributes for a 
            specific <code>nodeType</code> (e.g., <code>nodeValue</code> for an 
            <code>Element</code> or <code>attributes</code> for a <code>Comment</code>
            ), this returns <code>null</code>. Note that the specialized interfaces 
            may contain additional and more convenient mechanisms to get and set the 
            relevant information.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="M:SharpKit.Html.Node.insertBefore(SharpKit.Html.Node,SharpKit.Html.Node)">
            <summary>
            Inserts the node <code>newChild</code> before the existing child node 
            <code>refChild</code>. If <code>refChild</code> is <code>null</code>, 
            insert <code>newChild</code> at the end of the list of children.
            <br/>If <code>newChild</code> is a <code>DocumentFragment</code> object, 
            all of its children are inserted, in the same order, before 
            <code>refChild</code>. If the <code>newChild</code> is already in the 
            tree, it is first removed. </summary>
            <param name="newChildThe"> node to insert. </param>
            <param name="refChildThe"> reference node, i.e., the node before which the new 
              node must be inserted. </param>
            <returns> The node being inserted. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not 
              allow children of the type of the <code>newChild</code> node, or if 
              the node to insert is one of this node's ancestors.
              <br/>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created 
              from a different document than the one that created this node.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or 
              if the parent of the node being inserted is readonly.
              <br/>NOT_FOUND_ERR: Raised if <code>refChild</code> is not a child of 
              this node. </exception>
        </member>
        <member name="M:SharpKit.Html.Node.replaceChild(SharpKit.Html.Node,SharpKit.Html.Node)">
            <summary>
            Replaces the child node <code>oldChild</code> with <code>newChild</code>
             in the list of children, and returns the <code>oldChild</code> node.
            <br/>If <code>newChild</code> is a <code>DocumentFragment</code> object, 
            <code>oldChild</code> is replaced by all of the 
            <code>DocumentFragment</code> children, which are inserted in the 
            same order. If the <code>newChild</code> is already in the tree, it 
            is first removed. </summary>
            <param name="newChildThe"> new node to put in the child list. </param>
            <param name="oldChildThe"> node being replaced in the list. </param>
            <returns> The node replaced. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not 
              allow children of the type of the <code>newChild</code> node, or if 
              the node to put in is one of this node's ancestors.
              <br/>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created 
              from a different document than the one that created this node.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node or the parent of 
              the new node is readonly.
              <br/>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child of 
              this node. </exception>
        </member>
        <member name="M:SharpKit.Html.Node.removeChild(SharpKit.Html.Node)">
            <summary>
            Removes the child node indicated by <code>oldChild</code> from the list 
            of children, and returns it. </summary>
            <param name="oldChildThe"> node being removed. </param>
            <returns> The node removed. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
              <br/>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child of 
              this node. </exception>
        </member>
        <member name="M:SharpKit.Html.Node.appendChild(SharpKit.Html.Node)">
            <summary>
            Adds the node <code>newChild</code> to the end of the list of children 
            of this node. If the <code>newChild</code> is already in the tree, it 
            is first removed. </summary>
            <param name="newChildThe"> node to add.If it is a <code>DocumentFragment</code>
               object, the entire contents of the document fragment are moved 
              into the child list of this node </param>
            <returns> The node added. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not 
              allow children of the type of the <code>newChild</code> node, or if 
              the node to append is one of this node's ancestors.
              <br/>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created 
              from a different document than the one that created this node.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.Node.hasChildNodes">
            <summary>
            Returns whether this node has any children. </summary>
            <returns>  <code>true</code> if this node has any children, 
              <code>false</code> otherwise. </returns>
        </member>
        <member name="M:SharpKit.Html.Node.cloneNode(System.Boolean)">
            <summary>
            Returns a duplicate of this node, i.e., serves as a generic copy 
            constructor for nodes. The duplicate node has no parent; (
            <code>parentNode</code> is <code>null</code>.).
            <br/>Cloning an <code>Element</code> copies all attributes and their 
            values, including those generated by the XML processor to represent 
            defaulted attributes, but this method does not copy any text it 
            contains unless it is a deep clone, since the text is contained in a 
            child <code>Text</code> node. Cloning an <code>Attribute</code> 
            directly, as opposed to be cloned as part of an <code>Element</code> 
            cloning operation, returns a specified attribute (
            <code>specified</code> is <code>true</code>). Cloning any other type 
            of node simply returns a copy of this node.
            <br/>Note that cloning an immutable subtree results in a mutable copy, 
            but the children of an <code>EntityReference</code> clone are readonly
            . In addition, clones of unspecified <code>Attr</code> nodes are 
            specified. And, cloning <code>Document</code>, 
            <code>DocumentType</code>, <code>Entity</code>, and 
            <code>Notation</code> nodes is implementation dependent. </summary>
            <param name="deepIf"> <code>true</code>, recursively clone the subtree under 
              the specified node; if <code>false</code>, clone only the node 
              itself (and its attributes, if it is an <code>Element</code>). </param>
            <returns> The duplicate node. </returns>
        </member>
        <member name="M:SharpKit.Html.Node.normalize">
            <summary>
            Puts all <code>Text</code> nodes in the full depth of the sub-tree 
            underneath this <code>Node</code>, including attribute nodes, into a 
            "normal" form where only structure (e.g., elements, comments, 
            processing instructions, CDATA sections, and entity references) 
            separates <code>Text</code> nodes, i.e., there are neither adjacent 
            <code>Text</code> nodes nor empty <code>Text</code> nodes. This can 
            be used to ensure that the DOM view of a document is the same as if 
            it were saved and re-loaded, and is useful when operations (such as 
            XPointer  lookups) that depend on a particular document tree 
            structure are to be used.In cases where the document contains 
            <code>CDATASections</code>, the normalize operation alone may not be 
            sufficient, since XPointers do not differentiate between 
            <code>Text</code> nodes and <code>CDATASection</code> nodes.
            @version DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.Node.isSupported(System.String,System.String)">
            <summary>
            Tests whether the DOM implementation implements a specific feature and 
            that feature is supported by this node. </summary>
            <param name="featureThe"> name of the feature to test. This is the same name 
              which can be passed to the method <code>hasFeature</code> on 
              <code>DOMImplementation</code>. </param>
            <param name="versionThis"> is the version number of the feature to test. In 
              Level 2, version 1, this is the string "2.0". If the version is not 
              specified, supporting any version of the feature will cause the 
              method to return <code>true</code>. </param>
            <returns> Returns <code>true</code> if the specified feature is 
              supported on this node, <code>false</code> otherwise.
            @since DOM Level 2 </returns>
        </member>
        <member name="M:SharpKit.Html.Node.hasAttributes">
            <summary>
            Returns whether this node (if it is an element) has any attributes. </summary>
            <returns> <code>true</code> if this node has any attributes, 
              <code>false</code> otherwise.
            @since DOM Level 2 </returns>
        </member>
        <member name="P:SharpKit.Html.Node.nodeName">
            <summary>
            The name of this node, depending on its type; see the table above. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.nodeValue">
            <summary>
            The value of this node, depending on its type; see the table above. 
            When it is defined to be <code>null</code>, setting it has no effect. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              DOMSTRING_SIZE_ERR: Raised when it would return more characters than 
              fit in a <code>DOMString</code> variable on the implementation 
              platform. </exception>
        </member>
        <member name="P:SharpKit.Html.Node.nodeType">
            <summary>
            A code representing the type of the underlying object, as defined above.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.parentNode">
            <summary>
            The parent of this node. All nodes, except <code>Attr</code>, 
            <code>Document</code>, <code>DocumentFragment</code>, 
            <code>Entity</code>, and <code>Notation</code> may have a parent. 
            However, if a node has just been created and not yet added to the 
            tree, or if it has been removed from the tree, this is 
            <code>null</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.childNodes">
            <summary>
            A <code>NodeList</code> that contains all children of this node. If 
            there are no children, this is a <code>NodeList</code> containing no 
            nodes.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.firstChild">
            <summary>
            The first child of this node. If there is no such node, this returns 
            <code>null</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.lastChild">
            <summary>
            The last child of this node. If there is no such node, this returns 
            <code>null</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.previousSibling">
            <summary>
            The node immediately preceding this node. If there is no such node, 
            this returns <code>null</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.nextSibling">
            <summary>
            The node immediately following this node. If there is no such node, 
            this returns <code>null</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.attributes">
            <summary>
            A <code>NamedNodeMap</code> containing the attributes of this node (if 
            it is an <code>Element</code>) or <code>null</code> otherwise. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.ownerDocument">
            <summary>
            The <code>Document</code> object associated with this node. This is 
            also the <code>Document</code> object used to create new nodes. When 
            this node is a <code>Document</code> or a <code>DocumentType</code> 
            which is not used with any <code>Document</code> yet, this is 
            <code>null</code>.
            @version DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.namespaceURI">
            <summary>
            The namespace URI of this node, or <code>null</code> if it is 
            unspecified.
            <br/>This is not a computed value that is the result of a namespace 
            lookup based on an examination of the namespace declarations in 
            scope. It is merely the namespace URI given at creation time.
            <br/>For nodes of any type other than <code>ELEMENT_NODE</code> and 
            <code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1 
            method, such as <code>createElement</code> from the 
            <code>Document</code> interface, this is always <code>null</code>.Per 
            the Namespaces in XML Specification  an attribute does not inherit 
            its namespace from the element it is attached to. If an attribute is 
            not explicitly given a namespace, it simply has no namespace.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.Node.prefix">
            <summary>
            The namespace prefix of this node, or <code>null</code> if it is 
            unspecified.
            <br/>Note that setting this attribute, when permitted, changes the 
            <code>nodeName</code> attribute, which holds the qualified name, as 
            well as the <code>tagName</code> and <code>name</code> attributes of 
            the <code>Element</code> and <code>Attr</code> interfaces, when 
            applicable.
            <br/>Note also that changing the prefix of an attribute that is known to 
            have a default value, does not make a new attribute with the default 
            value and the original prefix appear, since the 
            <code>namespaceURI</code> and <code>localName</code> do not change.
            <br/>For nodes of any type other than <code>ELEMENT_NODE</code> and 
            <code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1 
            method, such as <code>createElement</code> from the 
            <code>Document</code> interface, this is always <code>null</code>. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified prefix contains an 
              illegal character.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
              <br/>NAMESPACE_ERR: Raised if the specified <code>prefix</code> is 
              malformed, if the <code>namespaceURI</code> of this node is 
              <code>null</code>, if the specified prefix is "xml" and the 
              <code>namespaceURI</code> of this node is different from "
              http://www.w3.org/XML/1998/namespace", if this node is an attribute 
              and the specified prefix is "xmlns" and the 
              <code>namespaceURI</code> of this node is different from "
              http://www.w3.org/2000/xmlns/", or if this node is an attribute and 
              the <code>qualifiedName</code> of this node is "xmlns" .
            @since DOM Level 2 </exception>
        </member>
        <member name="P:SharpKit.Html.Node.localName">
            <summary>
            Returns the local part of the qualified name of this node.
            <br/>For nodes of any type other than <code>ELEMENT_NODE</code> and 
            <code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1 
            method, such as <code>createElement</code> from the 
            <code>Document</code> interface, this is always <code>null</code>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.Element.getAttribute(System.String)">
            <summary>
            Retrieves an attribute value by name. </summary>
            <param name="nameThe"> name of the attribute to retrieve. </param>
            <returns> The <code>Attr</code> value as a string, or the empty string 
              if that attribute does not have a specified or default value. </returns>
        </member>
        <member name="M:SharpKit.Html.Element.setAttribute(System.String,System.String)">
            <summary>
            Adds a new attribute. If an attribute with that name is already present 
            in the element, its value is changed to be that of the value 
            parameter. This value is a simple string; it is not parsed as it is 
            being set. So any markup (such as syntax to be recognized as an 
            entity reference) is treated as literal text, and needs to be 
            appropriately escaped by the implementation when it is written out. 
            In order to assign an attribute value that contains entity 
            references, the user must create an <code>Attr</code> node plus any 
            <code>Text</code> and <code>EntityReference</code> nodes, build the 
            appropriate subtree, and use <code>setAttributeNode</code> to assign 
            it as the value of an attribute.
            <br/>To set an attribute with a qualified name and namespace URI, use 
            the <code>setAttributeNS</code> method. </summary>
            <param name="nameThe"> name of the attribute to create or alter. </param>
            <param name="valueValue"> to set in string form. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified name contains an 
              illegal character.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.Element.removeAttribute(System.String)">
            <summary>
            Removes an attribute by name. If the removed attribute is known to have 
            a default value, an attribute immediately appears containing the 
            default value as well as the corresponding namespace URI, local name, 
            and prefix when applicable.
            <br/>To remove an attribute by local name and namespace URI, use the 
            <code>removeAttributeNS</code> method. </summary>
            <param name="nameThe"> name of the attribute to remove. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.Element.getAttributeNode(System.String)">
            <summary>
            Retrieves an attribute node by name.
            <br/>To retrieve an attribute node by qualified name and namespace URI, 
            use the <code>getAttributeNodeNS</code> method. </summary>
            <param name="nameThe"> name (<code>nodeName</code>) of the attribute to 
              retrieve. </param>
            <returns> The <code>Attr</code> node with the specified name (
              <code>nodeName</code>) or <code>null</code> if there is no such 
              attribute. </returns>
        </member>
        <member name="M:SharpKit.Html.Element.setAttributeNode(SharpKit.Html.Attr)">
            <summary>
            Adds a new attribute node. If an attribute with that name (
            <code>nodeName</code>) is already present in the element, it is 
            replaced by the new one.
            <br/>To add a new attribute node with a qualified name and namespace 
            URI, use the <code>setAttributeNodeNS</code> method. </summary>
            <param name="newAttrThe"> <code>Attr</code> node to add to the attribute list. </param>
            <returns> If the <code>newAttr</code> attribute replaces an existing 
              attribute, the replaced <code>Attr</code> node is returned, 
              otherwise <code>null</code> is returned. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was created from a 
              different document than the one that created the element.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
              <br/>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already an 
              attribute of another <code>Element</code> object. The DOM user must 
              explicitly clone <code>Attr</code> nodes to re-use them in other 
              elements. </exception>
        </member>
        <member name="M:SharpKit.Html.Element.removeAttributeNode(SharpKit.Html.Attr)">
            <summary>
            Removes the specified attribute node. If the removed <code>Attr</code> 
            has a default value it is immediately replaced. The replacing 
            attribute has the same namespace URI and local name, as well as the 
            original prefix, when applicable. </summary>
            <param name="oldAttrThe"> <code>Attr</code> node to remove from the attribute 
              list. </param>
            <returns> The <code>Attr</code> node that was removed. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
              <br/>NOT_FOUND_ERR: Raised if <code>oldAttr</code> is not an attribute 
              of the element. </exception>
        </member>
        <member name="M:SharpKit.Html.Element.getElementsByTagName(System.String)">
            <summary>
            Returns a <code>NodeList</code> of all descendant <code>Elements</code> 
            with a given tag name, in the order in which they are encountered in 
            a preorder traversal of this <code>Element</code> tree. </summary>
            <param name="nameThe"> name of the tag to match on. The special value "*" 
              matches all tags. </param>
            <returns> A list of matching <code>Element</code> nodes. </returns>
        </member>
        <member name="M:SharpKit.Html.Element.getAttributeNS(System.String,System.String)">
            <summary>
            Retrieves an attribute value by local name and namespace URI. HTML-only 
            DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the attribute to retrieve. </param>
            <param name="localNameThe"> local name of the attribute to retrieve. </param>
            <returns> The <code>Attr</code> value as a string, or the empty string 
              if that attribute does not have a specified or default value.
            @since DOM Level 2 </returns>
        </member>
        <member name="M:SharpKit.Html.Element.setAttributeNS(System.String,System.String,System.String)">
            <summary>
            Adds a new attribute. If an attribute with the same local name and 
            namespace URI is already present on the element, its prefix is 
            changed to be the prefix part of the <code>qualifiedName</code>, and 
            its value is changed to be the <code>value</code> parameter. This 
            value is a simple string; it is not parsed as it is being set. So any 
            markup (such as syntax to be recognized as an entity reference) is 
            treated as literal text, and needs to be appropriately escaped by the 
            implementation when it is written out. In order to assign an 
            attribute value that contains entity references, the user must create 
            an <code>Attr</code> node plus any <code>Text</code> and 
            <code>EntityReference</code> nodes, build the appropriate subtree, 
            and use <code>setAttributeNodeNS</code> or 
            <code>setAttributeNode</code> to assign it as the value of an 
            attribute.
            <br/>HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the attribute to create or 
              alter. </param>
            <param name="qualifiedNameThe"> qualified name of the attribute to create or 
              alter. </param>
            <param name="valueThe"> value to set in string form. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified qualified name 
              contains an illegal character.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
              <br/>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is 
              malformed, if the <code>qualifiedName</code> has a prefix and the 
              <code>namespaceURI</code> is <code>null</code>, if the 
              <code>qualifiedName</code> has a prefix that is "xml" and the 
              <code>namespaceURI</code> is different from "
              http://www.w3.org/XML/1998/namespace", or if the 
              <code>qualifiedName</code> is "xmlns" and the 
              <code>namespaceURI</code> is different from "
              http://www.w3.org/2000/xmlns/".
            @since DOM Level 2 </exception>
        </member>
        <member name="M:SharpKit.Html.Element.removeAttributeNS(System.String,System.String)">
            <summary>
            Removes an attribute by local name and namespace URI. If the removed 
            attribute has a default value it is immediately replaced. The 
            replacing attribute has the same namespace URI and local name, as 
            well as the original prefix.
            <br/>HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the attribute to remove. </param>
            <param name="localNameThe"> local name of the attribute to remove. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
            @since DOM Level 2 </exception>
        </member>
        <member name="M:SharpKit.Html.Element.getAttributeNodeNS(System.String,System.String)">
            <summary>
            Retrieves an <code>Attr</code> node by local name and namespace URI. 
            HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the attribute to retrieve. </param>
            <param name="localNameThe"> local name of the attribute to retrieve. </param>
            <returns> The <code>Attr</code> node with the specified attribute local 
              name and namespace URI or <code>null</code> if there is no such 
              attribute.
            @since DOM Level 2 </returns>
        </member>
        <member name="M:SharpKit.Html.Element.setAttributeNodeNS(SharpKit.Html.Attr)">
            <summary>
            Adds a new attribute. If an attribute with that local name and that 
            namespace URI is already present in the element, it is replaced by 
            the new one.
            <br/>HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="newAttrThe"> <code>Attr</code> node to add to the attribute list. </param>
            <returns> If the <code>newAttr</code> attribute replaces an existing 
              attribute with the same local name and namespace URI, the replaced 
              <code>Attr</code> node is returned, otherwise <code>null</code> is 
              returned. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was created from a 
              different document than the one that created the element.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
              <br/>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already an 
              attribute of another <code>Element</code> object. The DOM user must 
              explicitly clone <code>Attr</code> nodes to re-use them in other 
              elements.
            @since DOM Level 2 </exception>
        </member>
        <member name="M:SharpKit.Html.Element.getElementsByTagNameNS(System.String,System.String)">
            <summary>
            Returns a <code>NodeList</code> of all the descendant 
            <code>Elements</code> with a given local name and namespace URI in 
            the order in which they are encountered in a preorder traversal of 
            this <code>Element</code> tree.
            <br/>HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the elements to match on. The 
              special value "*" matches all namespaces. </param>
            <param name="localNameThe"> local name of the elements to match on. The 
              special value "*" matches all local names. </param>
            <returns> A new <code>NodeList</code> object containing all the matched 
              <code>Elements</code>.
            @since DOM Level 2 </returns>
        </member>
        <member name="M:SharpKit.Html.Element.hasAttribute(System.String)">
            <summary>
            Returns <code>true</code> when an attribute with a given name is 
            specified on this element or has a default value, <code>false</code> 
            otherwise. </summary>
            <param name="nameThe"> name of the attribute to look for. </param>
            <returns> <code>true</code> if an attribute with the given name is 
              specified on this element or has a default value, <code>false</code>
               otherwise.
            @since DOM Level 2 </returns>
        </member>
        <member name="M:SharpKit.Html.Element.hasAttributeNS(System.String,System.String)">
            <summary>
            Returns <code>true</code> when an attribute with a given local name and 
            namespace URI is specified on this element or has a default value, 
            <code>false</code> otherwise. HTML-only DOM implementations do not 
            need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the attribute to look for. </param>
            <param name="localNameThe"> local name of the attribute to look for. </param>
            <returns> <code>true</code> if an attribute with the given local name 
              and namespace URI is specified or has a default value on this 
              element, <code>false</code> otherwise.
            @since DOM Level 2 </returns>
        </member>
        <member name="P:SharpKit.Html.Element.tagName">
            <summary>
            The name of the element. For example, in: 
            <pre> &lt;elementExample 
            id="demo"&gt; ... &lt;/elementExample&gt; , </pre>
             <code>tagName</code> has 
            the value <code>"elementExample"</code>. Note that this is 
            case-preserving in XML, as are all of the operations of the DOM. The 
            HTML DOM returns the <code>tagName</code> of an HTML element in the 
            canonical uppercase form, regardless of the case in the source HTML 
            document. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.NodeList">
            <summary>
            The <code>NodeList</code> interface provides the abstraction of an ordered 
            collection of nodes, without defining or constraining how this collection 
            is implemented. <code>NodeList</code> objects in the DOM are live.
            <br/>The items in the <code>NodeList</code> are accessible via an integral 
            index, starting from 0.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="M:SharpKit.Html.NodeList.item(System.Int32)">
            <summary>
            Returns the <code>index</code>th item in the collection. If 
            <code>index</code> is greater than or equal to the number of nodes in 
            the list, this returns <code>null</code>. </summary>
            <param name="indexIndex"> into the collection. </param>
            <returns> The node at the <code>index</code>th position in the 
              <code>NodeList</code>, or <code>null</code> if that is not a valid 
              index. </returns>
        </member>
        <member name="P:SharpKit.Html.NodeList.length">
            <summary>
            The number of nodes in the list. The range of valid child node indices 
            is 0 to <code>length-1</code> inclusive. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.DOMImplementation">
            <summary>
            The <code>DOMImplementation</code> interface provides a number of methods 
            for performing operations that are independent of any particular instance 
            of the document object model.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="M:SharpKit.Html.DOMImplementation.hasFeature(System.String,System.String)">
            <summary>
            Test if the DOM implementation implements a specific feature. </summary>
            <param name="featureThe"> name of the feature to test (case-insensitive). The 
              values used by DOM features are defined throughout the DOM Level 2 
              specifications and listed in the  section. The name must be an XML 
              name. To avoid possible conflicts, as a convention, names referring 
              to features defined outside the DOM specification should be made 
              unique by reversing the name of the Internet domain name of the 
              person (or the organization that the person belongs to) who defines 
              the feature, component by component, and using this as a prefix. 
              For instance, the W3C SVG Working Group defines the feature 
              "SharpKit.Html.svg". </param>
            <param name="versionThis"> is the version number of the feature to test. In 
              Level 2, the string can be either "2.0" or "1.0". If the version is 
              not specified, supporting any version of the feature causes the 
              method to return <code>true</code>. </param>
            <returns> <code>true</code> if the feature is implemented in the 
              specified version, <code>false</code> otherwise. </returns>
        </member>
        <member name="M:SharpKit.Html.DOMImplementation.createDocumentType(System.String,System.String,System.String)">
            <summary>
            Creates an empty <code>DocumentType</code> node. Entity declarations 
            and notations are not made available. Entity reference expansions and 
            default attribute additions do not occur. It is expected that a 
            future version of the DOM will provide a way for populating a 
            <code>DocumentType</code>.
            <br/>HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="qualifiedNameThe"> qualified name of the document type to be 
              created. </param>
            <param name="publicIdThe"> external subset public identifier. </param>
            <param name="systemIdThe"> external subset system identifier. </param>
            <returns> A new <code>DocumentType</code> node with 
              <code>Node.ownerDocument</code> set to <code>null</code>. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified qualified name 
              contains an illegal character.
              <br/>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is 
              malformed.
            @since DOM Level 2 </exception>
        </member>
        <member name="M:SharpKit.Html.DOMImplementation.createDocument(System.String,System.String,SharpKit.Html.DocumentType)">
            <summary>
            Creates an XML <code>Document</code> object of the specified type with 
            its document element. HTML-only DOM implementations do not need to 
            implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the document element to create. </param>
            <param name="qualifiedNameThe"> qualified name of the document element to be 
              created. </param>
            <param name="doctypeThe"> type of document to be created or <code>null</code>.
              When <code>doctype</code> is not <code>null</code>, its 
              <code>Node.ownerDocument</code> attribute is set to the document 
              being created. </param>
            <returns> A new <code>Document</code> object. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified qualified name 
              contains an illegal character.
              <br/>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is 
              malformed, if the <code>qualifiedName</code> has a prefix and the 
              <code>namespaceURI</code> is <code>null</code>, or if the 
              <code>qualifiedName</code> has a prefix that is "xml" and the 
              <code>namespaceURI</code> is different from "
              http://www.w3.org/XML/1998/namespace" .
              <br/>WRONG_DOCUMENT_ERR: Raised if <code>doctype</code> has already 
              been used with a different document or was created from a different 
              implementation.
            @since DOM Level 2 </exception>
        </member>
        <member name="T:SharpKit.Html.UIEvent">
            <summary>
            The <code>UIEvent</code> interface provides specific contextual information 
            associated with User Interface events.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.Event">
            <summary>
            The <code>Event</code> interface is used to provide contextual information 
            about an event to the handler processing the event. An object which 
            implements the <code>Event</code> interface is generally passed as the 
            first parameter to an event handler. More specific context information is 
            passed to event handlers by deriving additional interfaces from 
            <code>Event</code> which contain information directly relating to the 
            type of event they accompany. These derived interfaces are also 
            implemented by the object passed to the event listener. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.Event.stopPropagation">
            <summary>
            The <code>stopPropagation</code> method is used prevent further 
            propagation of an event during event flow. If this method is called 
            by any <code>EventListener</code> the event will cease propagating 
            through the tree. The event will complete dispatch to all listeners 
            on the current <code>EventTarget</code> before event flow stops. This 
            method may be used during any stage of event flow.
            </summary>
        </member>
        <member name="M:SharpKit.Html.Event.preventDefault">
            <summary>
            If an event is cancelable, the <code>preventDefault</code> method is 
            used to signify that the event is to be canceled, meaning any default 
            action normally taken by the implementation as a result of the event 
            will not occur. If, during any stage of event flow, the 
            <code>preventDefault</code> method is called the event is canceled. 
            Any default action associated with the event will not occur. Calling 
            this method for a non-cancelable event has no effect. Once 
            <code>preventDefault</code> has been called it will remain in effect 
            throughout the remainder of the event's propagation. This method may 
            be used during any stage of event flow. 
            </summary>
        </member>
        <member name="M:SharpKit.Html.Event.initEvent(System.String,System.Boolean,System.Boolean)">
            <summary>
            The <code>initEvent</code> method is used to initialize the value of an 
            <code>Event</code> created through the <code>DocumentEvent</code> 
            interface. This method may only be called before the 
            <code>Event</code> has been dispatched via the 
            <code>dispatchEvent</code> method, though it may be called multiple 
            times during that phase if necessary. If called multiple times the 
            final invocation takes precedence. If called from a subclass of 
            <code>Event</code> interface only the values specified in the 
            <code>initEvent</code> method are modified, all other attributes are 
            left unchanged. </summary>
            <param name="eventTypeArgSpecifies"> the event type. This type may be any 
              event type currently defined in this specification or a new event 
              type.. The string must be an XML name. Any new event type must not 
              begin with any upper, lower, or mixed case version of the string 
              "DOM". This prefix is reserved for future DOM event sets. It is 
              also strongly recommended that third parties adding their own 
              events use their own prefix to avoid confusion and lessen the 
              probability of conflicts with other new events. </param>
            <param name="canBubbleArgSpecifies"> whether or not the event can bubble. </param>
            <param name="cancelableArgSpecifies"> whether or not the event's default 
              action can be prevented. </param>
        </member>
        <member name="P:SharpKit.Html.Event.type">
            <summary>
            The name of the event (case-insensitive). The name must be an XML name.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Event.target">
            <summary>
            Used to indicate the <code>EventTarget</code> to which the event was 
            originally dispatched. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Event.currentTarget">
            <summary>
            Used to indicate the <code>EventTarget</code> whose 
            <code>EventListeners</code> are currently being processed. This is 
            particularly useful during capturing and bubbling. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Event.eventPhase">
            <summary>
            Used to indicate which phase of event flow is currently being 
            evaluated. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Event.bubbles">
            <summary>
            Used to indicate whether or not an event is a bubbling event. If the 
            event can bubble the value is true, else the value is false. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Event.cancelable">
            <summary>
            Used to indicate whether or not an event can have its default action 
            prevented. If the default action can be prevented the value is true, 
            else the value is false. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Event.timeStamp">
            <summary>
             Used to specify the time (in milliseconds relative to the epoch) at 
            which the event was created. Due to the fact that some systems may 
            not provide this information the value of <code>timeStamp</code> may 
            be not available for all events. When not available, a value of 0 
            will be returned. Examples of epoch time are the time of the system 
            start or 0:0:0 UTC 1st January 1970. 
            </summary>
        </member>
        <member name="M:SharpKit.Html.UIEvent.initUIEvent(System.String,System.Boolean,System.Boolean,SharpKit.Html.AbstractView,System.Int32)">
            <summary>
            The <code>initUIEvent</code> method is used to initialize the value of 
            a <code>UIEvent</code> created through the <code>DocumentEvent</code> 
            interface. This method may only be called before the 
            <code>UIEvent</code> has been dispatched via the 
            <code>dispatchEvent</code> method, though it may be called multiple 
            times during that phase if necessary. If called multiple times, the 
            final invocation takes precedence. </summary>
            <param name="typeArgSpecifies"> the event type. </param>
            <param name="canBubbleArgSpecifies"> whether or not the event can bubble. </param>
            <param name="cancelableArgSpecifies"> whether or not the event's default 
              action can be prevented. </param>
            <param name="viewArgSpecifies"> the <code>Event</code>'s 
              <code>AbstractView</code>. </param>
            <param name="detailArgSpecifies"> the <code>Event</code>'s detail. </param>
        </member>
        <member name="P:SharpKit.Html.UIEvent.view">
            <summary>
            The <code>view</code> attribute identifies the <code>AbstractView</code>
             from which the event was generated.
            </summary>
        </member>
        <member name="P:SharpKit.Html.UIEvent.detail">
            <summary>
            Specifies some detail information about the <code>Event</code>, 
            depending on the type of event.
            </summary>
        </member>
        <member name="T:SharpKit.Html.DOMException">
            <summary>
            DOM operations only raise exceptions in "exceptional" circumstances, i.e., 
            when an operation is impossible to perform (either for logical reasons, 
            because data is lost, or because the implementation has become unstable). 
            In general, DOM methods return specific error values in ordinary 
            processing situations, such as out-of-bound errors when using 
            <code>NodeList</code>. 
            <br/>Implementations should raise other exceptions under other circumstances. 
            For example, implementations should raise an implementation-dependent 
            exception if a <code>null</code> argument is passed. 
            <br/>Some languages and object systems do not support the concept of 
            exceptions. For such systems, error conditions may be indicated using 
            native error reporting mechanisms. For some bindings, for example, 
            methods may return error codes similar to those listed in the 
            corresponding method descriptions.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.INDEX_SIZE_ERR">
            <summary>
            If index or size is negative, or greater than the allowed value
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.DOMSTRING_SIZE_ERR">
            <summary>
            If the specified range of text does not fit into a DOMString
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.HIERARCHY_REQUEST_ERR">
            <summary>
            If any node is inserted somewhere it doesn't belong
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.WRONG_DOCUMENT_ERR">
            <summary>
            If a node is used in a different document than the one that created it 
            (that doesn't support it)
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.INVALID_CHARACTER_ERR">
            <summary>
            If an invalid or illegal character is specified, such as in a name. See 
            production 2 in the XML specification for the definition of a legal 
            character, and production 5 for the definition of a legal name 
            character.
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.NO_DATA_ALLOWED_ERR">
            <summary>
            If data is specified for a node which does not support data
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.NO_MODIFICATION_ALLOWED_ERR">
            <summary>
            If an attempt is made to modify an object where modifications are not 
            allowed
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.NOT_FOUND_ERR">
            <summary>
            If an attempt is made to reference a node in a context where it does 
            not exist
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.NOT_SUPPORTED_ERR">
            <summary>
            If the implementation does not support the requested type of object or 
            operation.
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.INUSE_ATTRIBUTE_ERR">
            <summary>
            If an attempt is made to add an attribute that is already in use 
            elsewhere
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.INVALID_STATE_ERR">
            <summary>
            If an attempt is made to use an object that is not, or is no longer, 
            usable.
            @since DOM Level 2
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.SYNTAX_ERR">
            <summary>
            If an invalid or illegal string is specified.
            @since DOM Level 2
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.INVALID_MODIFICATION_ERR">
            <summary>
            If an attempt is made to modify the type of the underlying object.
            @since DOM Level 2
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.NAMESPACE_ERR">
            <summary>
            If an attempt is made to create or change an object in a way which is 
            incorrect with regard to namespaces.
            @since DOM Level 2
            </summary>
        </member>
        <member name="F:SharpKit.Html.DOMException.INVALID_ACCESS_ERR">
            <summary>
            If a parameter or an operation is not supported by the underlying 
            object.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.DOMImplementationCSS">
            <summary>
             This interface allows the DOM user to create a <code>CSSStyleSheet</code> 
            outside the context of a document. There is no way to associate the new 
            <code>CSSStyleSheet</code> with a document in DOM Level 2. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM   Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.DOMImplementationCSS.createCSSStyleSheet(System.String,System.String)">
            <summary>
            Creates a new <code>CSSStyleSheet</code>. </summary>
            <param name="title"> The advisory title. See also the  section. </param>
            <param name="media"> The comma-separated list of media associated with the new 
              style sheet. See also the  section. </param>
            <returns> A new CSS style sheet. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
               SYNTAX_ERR: Raised if the specified media string value has a syntax 
              error and is unparsable.  </exception>
        </member>
        <member name="T:SharpKit.Html.CSSFontFaceRule">
            <summary>
             The <code>CSSFontFaceRule</code> interface represents a @font-face rule in 
            a CSS style sheet. The <code>@font-face</code> rule is used to hold a set 
            of font descriptions. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSRule">
            <summary>
             The <code>CSSRule</code> interface is the abstract base interface for any 
            type of CSS statement. This includes both rule sets and at-rules. An 
            implementation is expected to preserve all rules specified in a CSS style 
            sheet, even if the rule is not recognized by the parser. Unrecognized 
            rules are represented using the <code>CSSUnknownRule</code> interface. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSRule.type">
            <summary>
             The type of the rule, as defined above. The expectation is that 
            binding-specific casting methods can be used to cast down from an 
            instance of the <code>CSSRule</code> interface to the specific 
            derived interface implied by the <code>type</code>. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSRule.cssText">
            <summary>
             The parsable textual representation of the rule. This reflects the 
            current state of the rule and not its initial value. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the specified CSS string value has a syntax 
              error and is unparsable.
              <br/>INVALID_MODIFICATION_ERR: Raised if the specified CSS string 
              value represents a different type of rule than the current one.
              <br/>HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at 
              this point in the style sheet.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if the rule is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSSRule.parentStyleSheet">
            <summary>
             The style sheet that contains this rule. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSRule.parentRule">
            <summary>
             If this rule is contained inside another rule (e.g. a style rule 
            inside an @media block), this is the containing rule. If this rule is 
            not nested inside any other rules, this returns <code>null</code>. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSFontFaceRule.style">
            <summary>
             The declaration-block of this rule. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSMediaRule">
            <summary>
             The <code>CSSMediaRule</code> interface represents a @media rule in a CSS 
            style sheet. A <code>@media</code> rule can be used to delimit style 
            rules for specific media types. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.CSSMediaRule.insertRule(System.String,System.Int32)">
            <summary>
             Used to insert a new rule into the media block. </summary>
            <param name="rule"> The parsable text representing the rule. For rule sets 
              this contains both the selector and the style declaration. For 
              at-rules, this specifies both the at-identifier and the rule 
              content. </param>
            <param name="index"> The index within the media block's rule collection of the 
              rule before which to insert the specified rule. If the specified 
              index is equal to the length of the media blocks's rule collection, 
              the rule will be added to the end of the media block. </param>
            <returns>  The index within the media block's rule collection of the 
              newly inserted rule. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the 
              specified index, e.g., if an <code>@import</code> rule is inserted 
              after a standard rule set or other at-rule.
              <br/>INDEX_SIZE_ERR: Raised if the specified index is not a valid 
              insertion point.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is 
              readonly.
              <br/>SYNTAX_ERR: Raised if the specified rule has a syntax error and 
              is unparsable. </exception>
        </member>
        <member name="M:SharpKit.Html.CSSMediaRule.deleteRule(System.Int32)">
            <summary>
             Used to delete a rule from the media block. </summary>
            <param name="index"> The index within the media block's rule collection of the 
              rule to remove. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if the specified index does not correspond to 
              a rule in the media rule list.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is 
              readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSSMediaRule.media">
            <summary>
             A list of media types for this rule. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSMediaRule.cssRules">
            <summary>
             A list of all CSS rules contained within the media block. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.Notation">
            <summary>
            This interface represents a notation declared in the DTD. A notation either 
            declares, by name, the format of an unparsed entity (see section 4.7 of 
            the XML 1.0 specification ), or is used for formal declaration of 
            processing instruction targets (see section 2.6 of the XML 1.0 
            specification ). The <code>nodeName</code> attribute inherited from 
            <code>Node</code> is set to the declared name of the notation.
            <br/>The DOM Level 1 does not support editing <code>Notation</code> nodes; 
            they are therefore readonly.
            <br/>A <code>Notation</code> node does not have any parent.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Notation.publicId">
            <summary>
            The public identifier of this notation. If the public identifier was 
            not specified, this is <code>null</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Notation.systemId">
            <summary>
            The system identifier of this notation. If the system identifier was 
            not specified, this is <code>null</code>.
            </summary>
        </member>
        <member name="T:SharpKit.Html.MouseEvent">
            <summary>
            The <code>MouseEvent</code> interface provides specific contextual 
            information associated with Mouse events.
            <br/>The <code>detail</code> attribute inherited from <code>UIEvent</code> 
            indicates the number of times a mouse button has been pressed and 
            released over the same screen location during a user action. The 
            attribute value is 1 when the user begins this action and increments by 1 
            for each full sequence of pressing and releasing. If the user moves the 
            mouse between the mousedown and mouseup the value will be set to 0, 
            indicating that no click is occurring.
            <br/>In the case of nested elements mouse events are always targeted at the 
            most deeply nested element. Ancestors of the targeted element may use 
            bubbling to obtain notification of mouse events which occur within its 
            descendent elements.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.MouseEvent.initMouseEvent(System.String,System.Boolean,System.Boolean,SharpKit.Html.AbstractView,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int16,SharpKit.Html.EventTarget)">
            <summary>
            The <code>initMouseEvent</code> method is used to initialize the value 
            of a <code>MouseEvent</code> created through the 
            <code>DocumentEvent</code> interface. This method may only be called 
            before the <code>MouseEvent</code> has been dispatched via the 
            <code>dispatchEvent</code> method, though it may be called multiple 
            times during that phase if necessary. If called multiple times, the 
            final invocation takes precedence. </summary>
            <param name="typeArgSpecifies"> the event type. </param>
            <param name="canBubbleArgSpecifies"> whether or not the event can bubble. </param>
            <param name="cancelableArgSpecifies"> whether or not the event's default 
              action can be prevented. </param>
            <param name="viewArgSpecifies"> the <code>Event</code>'s 
              <code>AbstractView</code>. </param>
            <param name="detailArgSpecifies"> the <code>Event</code>'s mouse click count. </param>
            <param name="screenXArgSpecifies"> the <code>Event</code>'s screen x coordinate </param>
            <param name="screenYArgSpecifies"> the <code>Event</code>'s screen y coordinate </param>
            <param name="clientXArgSpecifies"> the <code>Event</code>'s client x coordinate </param>
            <param name="clientYArgSpecifies"> the <code>Event</code>'s client y coordinate </param>
            <param name="ctrlKeyArgSpecifies"> whether or not control key was depressed 
              during the <code>Event</code>. </param>
            <param name="altKeyArgSpecifies"> whether or not alt key was depressed during 
              the <code>Event</code>. </param>
            <param name="shiftKeyArgSpecifies"> whether or not shift key was depressed 
              during the <code>Event</code>. </param>
            <param name="metaKeyArgSpecifies"> whether or not meta key was depressed 
              during the <code>Event</code>. </param>
            <param name="buttonArgSpecifies"> the <code>Event</code>'s mouse button. </param>
            <param name="relatedTargetArgSpecifies"> the <code>Event</code>'s related 
              <code>EventTarget</code>. </param>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.screenX">
            <summary>
            The horizontal coordinate at which the event occurred relative to the 
            origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.screenY">
            <summary>
            The vertical coordinate at which the event occurred relative to the 
            origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.clientX">
            <summary>
            The horizontal coordinate at which the event occurred relative to the 
            DOM implementation's client area.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.clientY">
            <summary>
            The vertical coordinate at which the event occurred relative to the DOM 
            implementation's client area.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.ctrlKey">
            <summary>
            Used to indicate whether the 'ctrl' key was depressed during the firing 
            of the event.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.shiftKey">
            <summary>
            Used to indicate whether the 'shift' key was depressed during the 
            firing of the event.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.altKey">
            <summary>
            Used to indicate whether the 'alt' key was depressed during the firing 
            of the event. On some platforms this key may map to an alternative 
            key name.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.metaKey">
            <summary>
            Used to indicate whether the 'meta' key was depressed during the firing 
            of the event. On some platforms this key may map to an alternative 
            key name.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.button">
            <summary>
            During mouse events caused by the depression or release of a mouse 
            button, <code>button</code> is used to indicate which mouse button 
            changed state. The values for <code>button</code> range from zero to 
            indicate the left button of the mouse, one to indicate the middle 
            button if present, and two to indicate the right button. For mice 
            configured for left handed use in which the button actions are 
            reversed the values are instead read from right to left.
            </summary>
        </member>
        <member name="P:SharpKit.Html.MouseEvent.relatedTarget">
            <summary>
            Used to identify a secondary <code>EventTarget</code> related to a UI 
            event. Currently this attribute is used with the mouseover event to 
            indicate the <code>EventTarget</code> which the pointing device 
            exited and with the mouseout event to indicate the 
            <code>EventTarget</code> which the pointing device entered.
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSRuleList">
            <summary>
             The <code>CSSRuleList</code> interface provides the abstraction of an 
            ordered collection of CSS rules. 
            <br/> The items in the <code>CSSRuleList</code> are accessible via an 
            integral index, starting from 0. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.CSSRuleList.item(System.Int32)">
            <summary>
             Used to retrieve a CSS rule by ordinal index. The order in this 
            collection represents the order of the rules in the CSS style sheet. 
            If index is greater than or equal to the number of rules in the list, 
            this returns <code>null</code>. </summary>
            <param name="indexIndex"> into the collection </param>
            <returns> The style rule at the <code>index</code> position in the 
              <code>CSSRuleList</code>, or <code>null</code> if that is not a 
              valid index.  </returns>
        </member>
        <member name="P:SharpKit.Html.CSSRuleList.length">
            <summary>
             The number of <code>CSSRules</code> in the list. The range of valid 
            child rule indices is <code>0</code> to <code>length-1</code> 
            inclusive. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.Document">
            <summary>
            The <code>Document</code> interface represents the entire HTML or XML 
            document. Conceptually, it is the root of the document tree, and provides 
            the primary access to the document's data.
            <br/>Since elements, text nodes, comments, processing instructions, etc. 
            cannot exist outside the context of a <code>Document</code>, the 
            <code>Document</code> interface also contains the factory methods needed 
            to create these objects. The <code>Node</code> objects created have a 
            <code>ownerDocument</code> attribute which associates them with the 
            <code>Document</code> within whose context they were created.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="M:SharpKit.Html.Document.createElement(System.String)">
            <summary>
            Creates an element of the type specified. Note that the instance 
            returned implements the <code>Element</code> interface, so attributes 
            can be specified directly on the returned object.
            <br/>In addition, if there are known attributes with default values, 
            <code>Attr</code> nodes representing them are automatically created 
            and attached to the element.
            <br/>To create an element with a qualified name and namespace URI, use 
            the <code>createElementNS</code> method. </summary>
            <param name="tagNameThe"> name of the element type to instantiate. For XML, 
              this is case-sensitive. For HTML, the <code>tagName</code> 
              parameter may be provided in any case, but it must be mapped to the 
              canonical uppercase form by the DOM implementation. </param>
            <returns> A new <code>Element</code> object with the 
              <code>nodeName</code> attribute set to <code>tagName</code>, and 
              <code>localName</code>, <code>prefix</code>, and 
              <code>namespaceURI</code> set to <code>null</code>. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified name contains an 
              illegal character. </exception>
        </member>
        <member name="M:SharpKit.Html.Document.createDocumentFragment">
            <summary>
            Creates an empty <code>DocumentFragment</code> object. </summary>
            <returns> A new <code>DocumentFragment</code>. </returns>
        </member>
        <member name="M:SharpKit.Html.Document.createTextNode(System.String)">
            <summary>
            Creates a <code>Text</code> node given the specified string. </summary>
            <param name="dataThe"> data for the node. </param>
            <returns> The new <code>Text</code> object. </returns>
        </member>
        <member name="M:SharpKit.Html.Document.createComment(System.String)">
            <summary>
            Creates a <code>Comment</code> node given the specified string. </summary>
            <param name="dataThe"> data for the node. </param>
            <returns> The new <code>Comment</code> object. </returns>
        </member>
        <member name="M:SharpKit.Html.Document.createCDATASection(System.String)">
            <summary>
            Creates a <code>CDATASection</code> node whose value is the specified 
            string. </summary>
            <param name="dataThe"> data for the <code>CDATASection</code> contents. </param>
            <returns> The new <code>CDATASection</code> object. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NOT_SUPPORTED_ERR: Raised if this document is an HTML document. </exception>
        </member>
        <member name="M:SharpKit.Html.Document.createProcessingInstruction(System.String,System.String)">
            <summary>
            Creates a <code>ProcessingInstruction</code> node given the specified 
            name and data strings. </summary>
            <param name="targetThe"> target part of the processing instruction. </param>
            <param name="dataThe"> data for the node. </param>
            <returns> The new <code>ProcessingInstruction</code> object. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified target contains an 
              illegal character.
              <br/>NOT_SUPPORTED_ERR: Raised if this document is an HTML document. </exception>
        </member>
        <member name="M:SharpKit.Html.Document.createAttribute(System.String)">
            <summary>
            Creates an <code>Attr</code> of the given name. Note that the 
            <code>Attr</code> instance can then be set on an <code>Element</code> 
            using the <code>setAttributeNode</code> method. 
            <br/>To create an attribute with a qualified name and namespace URI, use 
            the <code>createAttributeNS</code> method. </summary>
            <param name="nameThe"> name of the attribute. </param>
            <returns> A new <code>Attr</code> object with the <code>nodeName</code> 
              attribute set to <code>name</code>, and <code>localName</code>, 
              <code>prefix</code>, and <code>namespaceURI</code> set to 
              <code>null</code>. The value of the attribute is the empty string. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified name contains an 
              illegal character. </exception>
        </member>
        <member name="M:SharpKit.Html.Document.createEntityReference(System.String)">
            <summary>
            Creates an <code>EntityReference</code> object. In addition, if the 
            referenced entity is known, the child list of the 
            <code>EntityReference</code> node is made the same as that of the 
            corresponding <code>Entity</code> node.If any descendant of the 
            <code>Entity</code> node has an unbound namespace prefix, the 
            corresponding descendant of the created <code>EntityReference</code> 
            node is also unbound; (its <code>namespaceURI</code> is 
            <code>null</code>). The DOM Level 2 does not support any mechanism to 
            resolve namespace prefixes. </summary>
            <param name="nameThe"> name of the entity to reference. </param>
            <returns> The new <code>EntityReference</code> object. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified name contains an 
              illegal character.
              <br/>NOT_SUPPORTED_ERR: Raised if this document is an HTML document. </exception>
        </member>
        <member name="M:SharpKit.Html.Document.getElementsByTagName(System.String)">
            <summary>
            Returns a <code>NodeList</code> of all the <code>Elements</code> with a 
            given tag name in the order in which they are encountered in a 
            preorder traversal of the <code>Document</code> tree. </summary>
            <param name="tagnameThe"> name of the tag to match on. The special value "*" 
              matches all tags. </param>
            <returns> A new <code>NodeList</code> object containing all the matched 
              <code>Elements</code>. </returns>
        </member>
        <member name="M:SharpKit.Html.Document.importNode(SharpKit.Html.Node,System.Boolean)">
            <summary>
            Imports a node from another document to this document. The returned 
            node has no parent; (<code>parentNode</code> is <code>null</code>). 
            The source node is not altered or removed from the original document; 
            this method creates a new copy of the source node.
            <br/>For all nodes, importing a node creates a node object owned by the 
            importing document, with attribute values identical to the source 
            node's <code>nodeName</code> and <code>nodeType</code>, plus the 
            attributes related to namespaces (<code>prefix</code>, 
            <code>localName</code>, and <code>namespaceURI</code>). As in the 
            <code>cloneNode</code> operation on a <code>Node</code>, the source 
            node is not altered.
            <br/>Additional information is copied as appropriate to the 
            <code>nodeType</code>, attempting to mirror the behavior expected if 
            a fragment of XML or HTML source was copied from one document to 
            another, recognizing that the two documents may have different DTDs 
            in the XML case. The following list describes the specifics for each 
            type of node. 
            <dt>ATTRIBUTE_NODE</dt>
            <dd>The <code>ownerElement</code> attribute 
            is set to <code>null</code> and the <code>specified</code> flag is 
            set to <code>true</code> on the generated <code>Attr</code>. The 
            descendants of the source <code>Attr</code> are recursively imported 
            and the resulting nodes reassembled to form the corresponding subtree.
            Note that the <code>deep</code> parameter has no effect on 
            <code>Attr</code> nodes; they always carry their children with them 
            when imported.</dd>
            <dt>DOCUMENT_FRAGMENT_NODE</dt>
            <dd>If the <code>deep</code> option 
            was set to <code>true</code>, the descendants of the source element 
            are recursively imported and the resulting nodes reassembled to form 
            the corresponding subtree. Otherwise, this simply generates an empty 
            <code>DocumentFragment</code>.</dd>
            <dt>DOCUMENT_NODE</dt>
            <dd><code>Document</code> 
            nodes cannot be imported.</dd>
            <dt>DOCUMENT_TYPE_NODE</dt>
            <dd><code>DocumentType</code> 
            nodes cannot be imported.</dd>
            <dt>ELEMENT_NODE</dt>
            <dd>Specified attribute nodes of the 
            source element are imported, and the generated <code>Attr</code> 
            nodes are attached to the generated <code>Element</code>. Default 
            attributes are not copied, though if the document being imported into 
            defines default attributes for this element name, those are assigned. 
            If the <code>importNode</code> <code>deep</code> parameter was set to 
            <code>true</code>, the descendants of the source element are 
            recursively imported and the resulting nodes reassembled to form the 
            corresponding subtree.</dd>
            <dt>ENTITY_NODE</dt>
            <dd><code>Entity</code> nodes can be 
            imported, however in the current release of the DOM the 
            <code>DocumentType</code> is readonly. Ability to add these imported 
            nodes to a <code>DocumentType</code> will be considered for addition 
            to a future release of the DOM.On import, the <code>publicId</code>, 
            <code>systemId</code>, and <code>notationName</code> attributes are 
            copied. If a <code>deep</code> import is requested, the descendants 
            of the the source <code>Entity</code> are recursively imported and 
            the resulting nodes reassembled to form the corresponding subtree.</dd>
            <dt>
            ENTITY_REFERENCE_NODE</dt>
            <dd>Only the <code>EntityReference</code> itself is 
            copied, even if a <code>deep</code> import is requested, since the 
            source and destination documents might have defined the entity 
            differently. If the document being imported into provides a 
            definition for this entity name, its value is assigned.</dd>
            <dt>NOTATION_NODE</dt>
            <dd>
            <code>Notation</code> nodes can be imported, however in the current 
            release of the DOM the <code>DocumentType</code> is readonly. Ability 
            to add these imported nodes to a <code>DocumentType</code> will be 
            considered for addition to a future release of the DOM.On import, the 
            <code>publicId</code> and <code>systemId</code> attributes are copied.
            Note that the <code>deep</code> parameter has no effect on 
            <code>Notation</code> nodes since they never have any children.</dd>
            <dt>
            PROCESSING_INSTRUCTION_NODE</dt>
            <dd>The imported node copies its 
            <code>target</code> and <code>data</code> values from those of the 
            source node.</dd>
            <dt>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE</dt>
            <dd>These three 
            types of nodes inheriting from <code>CharacterData</code> copy their 
            <code>data</code> and <code>length</code> attributes from those of 
            the source node.</dd>
            </summary>
            <param name="importedNodeThe"> node to import. </param>
            <param name="deepIf"> <code>true</code>, recursively import the subtree under 
              the specified node; if <code>false</code>, import only the node 
              itself, as explained above. This has no effect on <code>Attr</code>
              , <code>EntityReference</code>, and <code>Notation</code> nodes. </param>
            <returns> The imported node that belongs to this <code>Document</code>. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NOT_SUPPORTED_ERR: Raised if the type of node being imported is not 
              supported.
            @since DOM Level 2 </exception>
        </member>
        <member name="M:SharpKit.Html.Document.createElementNS(System.String,System.String)">
            <summary>
            Creates an element of the given qualified name and namespace URI. 
            HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the element to create. </param>
            <param name="qualifiedNameThe"> qualified name of the element type to 
              instantiate. </param>
            <returns> A new <code>Element</code> object with the following 
              attributes:AttributeValue<code>Node.nodeName</code>
              <code>qualifiedName</code><code>Node.namespaceURI</code>
              <code>namespaceURI</code><code>Node.prefix</code>prefix, extracted 
              from <code>qualifiedName</code>, or <code>null</code> if there is 
              no prefix<code>Node.localName</code>local name, extracted from 
              <code>qualifiedName</code><code>Element.tagName</code>
              <code>qualifiedName</code> </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified qualified name 
              contains an illegal character.
              <br/>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is 
              malformed, if the <code>qualifiedName</code> has a prefix and the 
              <code>namespaceURI</code> is <code>null</code>, or if the 
              <code>qualifiedName</code> has a prefix that is "xml" and the 
              <code>namespaceURI</code> is different from "
              http://www.w3.org/XML/1998/namespace" .
            @since DOM Level 2 </exception>
        </member>
        <member name="M:SharpKit.Html.Document.createAttributeNS(System.String,System.String)">
            <summary>
            Creates an attribute of the given qualified name and namespace URI. 
            HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the attribute to create. </param>
            <param name="qualifiedNameThe"> qualified name of the attribute to instantiate. </param>
            <returns> A new <code>Attr</code> object with the following attributes:
              AttributeValue<code>Node.nodeName</code>qualifiedName
              <code>Node.namespaceURI</code><code>namespaceURI</code>
              <code>Node.prefix</code>prefix, extracted from 
              <code>qualifiedName</code>, or <code>null</code> if there is no 
              prefix<code>Node.localName</code>local name, extracted from 
              <code>qualifiedName</code><code>Attr.name</code>
              <code>qualifiedName</code><code>Node.nodeValue</code>the empty 
              string </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_CHARACTER_ERR: Raised if the specified qualified name 
              contains an illegal character.
              <br/>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is 
              malformed, if the <code>qualifiedName</code> has a prefix and the 
              <code>namespaceURI</code> is <code>null</code>, if the 
              <code>qualifiedName</code> has a prefix that is "xml" and the 
              <code>namespaceURI</code> is different from "
              http://www.w3.org/XML/1998/namespace", or if the 
              <code>qualifiedName</code> is "xmlns" and the 
              <code>namespaceURI</code> is different from "
              http://www.w3.org/2000/xmlns/".
            @since DOM Level 2 </exception>
        </member>
        <member name="M:SharpKit.Html.Document.getElementsByTagNameNS(System.String,System.String)">
            <summary>
            Returns a <code>NodeList</code> of all the <code>Elements</code> with a 
            given local name and namespace URI in the order in which they are 
            encountered in a preorder traversal of the <code>Document</code> tree. </summary>
            <param name="namespaceURIThe"> namespace URI of the elements to match on. The 
              special value "*" matches all namespaces. </param>
            <param name="localNameThe"> local name of the elements to match on. The 
              special value "*" matches all local names. </param>
            <returns> A new <code>NodeList</code> object containing all the matched 
              <code>Elements</code>.
            @since DOM Level 2 </returns>
        </member>
        <member name="M:SharpKit.Html.Document.getElementById(System.String)">
            <summary>
            Returns the <code>Element</code> whose <code>ID</code> is given by 
            <code>elementId</code>. If no such element exists, returns 
            <code>null</code>. Behavior is not defined if more than one element 
            has this <code>ID</code>. The DOM implementation must have 
            information that says which attributes are of type ID. Attributes 
            with the name "ID" are not of type ID unless so defined. 
            Implementations that do not know whether attributes are of type ID or 
            not are expected to return <code>null</code>. </summary>
            <param name="elementIdThe"> unique <code>id</code> value for an element. </param>
            <returns> The matching element.
            @since DOM Level 2 </returns>
        </member>
        <member name="P:SharpKit.Html.Document.doctype">
            <summary>
            The Document Type Declaration (see <code>DocumentType</code>) 
            associated with this document. For HTML documents as well as XML 
            documents without a document type declaration this returns 
            <code>null</code>. The DOM Level 2 does not support editing the 
            Document Type Declaration. <code>docType</code> cannot be altered in 
            any way, including through the use of methods inherited from the 
            <code>Node</code> interface, such as <code>insertNode</code> or 
            <code>removeNode</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Document.implementation">
            <summary>
            The <code>DOMImplementation</code> object that handles this document. A 
            DOM application may use objects from multiple implementations.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Document.documentElement">
            <summary>
            This is a convenience attribute that allows direct access to the child 
            node that is the root element of the document. For HTML documents, 
            this is the element with the tagName "HTML".
            </summary>
        </member>
        <member name="T:SharpKit.Html.MutationEvent">
            <summary>
            The <code>MutationEvent</code> interface provides specific contextual 
            information associated with Mutation events. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.MutationEvent.initMutationEvent(System.String,System.Boolean,System.Boolean,SharpKit.Html.Node,System.String,System.String,System.String,System.Int16)">
            <summary>
            The <code>initMutationEvent</code> method is used to initialize the 
            value of a <code>MutationEvent</code> created through the 
            <code>DocumentEvent</code> interface. This method may only be called 
            before the <code>MutationEvent</code> has been dispatched via the 
            <code>dispatchEvent</code> method, though it may be called multiple 
            times during that phase if necessary. If called multiple times, the 
            final invocation takes precedence. </summary>
            <param name="typeArgSpecifies"> the event type. </param>
            <param name="canBubbleArgSpecifies"> whether or not the event can bubble. </param>
            <param name="cancelableArgSpecifies"> whether or not the event's default 
              action can be prevented. </param>
            <param name="relatedNodeArgSpecifies"> the <code>Event</code>'s related Node. </param>
            <param name="prevValueArgSpecifies"> the <code>Event</code>'s 
              <code>prevValue</code> attribute. This value may be null. </param>
            <param name="newValueArgSpecifies"> the <code>Event</code>'s 
              <code>newValue</code> attribute. This value may be null. </param>
            <param name="attrNameArgSpecifies"> the <code>Event</code>'s 
              <code>attrName</code> attribute. This value may be null. </param>
            <param name="attrChangeArgSpecifies"> the <code>Event</code>'s 
              <code>attrChange</code> attribute </param>
        </member>
        <member name="P:SharpKit.Html.MutationEvent.relatedNode">
            <summary>
             <code>relatedNode</code> is used to identify a secondary node related 
            to a mutation event. For example, if a mutation event is dispatched 
            to a node indicating that its parent has changed, the 
            <code>relatedNode</code> is the changed parent. If an event is 
            instead dispatched to a subtree indicating a node was changed within 
            it, the <code>relatedNode</code> is the changed node. In the case of 
            the DOMAttrModified event it indicates the <code>Attr</code> node 
            which was modified, added, or removed. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.MutationEvent.prevValue">
            <summary>
             <code>prevValue</code> indicates the previous value of the 
            <code>Attr</code> node in DOMAttrModified events, and of the 
            <code>CharacterData</code> node in DOMCharDataModified events. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.MutationEvent.newValue">
            <summary>
             <code>newValue</code> indicates the new value of the <code>Attr</code> 
            node in DOMAttrModified events, and of the <code>CharacterData</code> 
            node in DOMCharDataModified events. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.MutationEvent.attrName">
            <summary>
             <code>attrName</code> indicates the name of the changed 
            <code>Attr</code> node in a DOMAttrModified event. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.MutationEvent.attrChange">
            <summary>
             <code>attrChange</code> indicates the type of change which triggered 
            the DOMAttrModified event. The values can be <code>MODIFICATION</code>
            , <code>ADDITION</code>, or <code>REMOVAL</code>. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.Comment">
            <summary>
            This interface inherits from <code>CharacterData</code> and represents the 
            content of a comment, i.e., all the characters between the starting '
            <code>&lt;!--</code>' and ending '<code>--&gt;</code>'. Note that this is 
            the definition of a comment in XML, and, in practice, HTML, although some 
            HTML tools may implement the full SGML comment structure.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="T:SharpKit.Html.CharacterData">
            <summary>
            The <code>CharacterData</code> interface extends Node with a set of 
            attributes and methods for accessing character data in the DOM. For 
            clarity this set is defined here rather than on each object that uses 
            these attributes and methods. No DOM objects correspond directly to 
            <code>CharacterData</code>, though <code>Text</code> and others do 
            inherit the interface from it. All <code>offsets</code> in this interface 
            start from <code>0</code>.
            <br/>As explained in the <code>DOMString</code> interface, text strings in 
            the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In 
            the following, the term 16-bit units is used whenever necessary to 
            indicate that indexing on CharacterData is done in 16-bit units.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="M:SharpKit.Html.CharacterData.substringData(System.Int32,System.Int32)">
            <summary>
            Extracts a range of data from the node. </summary>
            <param name="offsetStart"> offset of substring to extract. </param>
            <param name="countThe"> number of 16-bit units to extract. </param>
            <returns> The specified substring. If the sum of <code>offset</code> and 
              <code>count</code> exceeds the <code>length</code>, then all 16-bit 
              units to the end of the data are returned. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is 
              negative or greater than the number of 16-bit units in 
              <code>data</code>, or if the specified <code>count</code> is 
              negative.
              <br/>DOMSTRING_SIZE_ERR: Raised if the specified range of text does 
              not fit into a <code>DOMString</code>. </exception>
        </member>
        <member name="M:SharpKit.Html.CharacterData.appendData(System.String)">
            <summary>
            Append the string to the end of the character data of the node. Upon 
            success, <code>data</code> provides access to the concatenation of 
            <code>data</code> and the <code>DOMString</code> specified. </summary>
            <param name="argThe"> <code>DOMString</code> to append. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.CharacterData.insertData(System.Int32,System.String)">
            <summary>
            Insert a string at the specified 16-bit unit offset. </summary>
            <param name="offsetThe"> character offset at which to insert. </param>
            <param name="argThe"> <code>DOMString</code> to insert. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is 
              negative or greater than the number of 16-bit units in 
              <code>data</code>.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.CharacterData.deleteData(System.Int32,System.Int32)">
            <summary>
            Remove a range of 16-bit units from the node. Upon success, 
            <code>data</code> and <code>length</code> reflect the change. </summary>
            <param name="offsetThe"> offset from which to start removing. </param>
            <param name="countThe"> number of 16-bit units to delete. If the sum of 
              <code>offset</code> and <code>count</code> exceeds 
              <code>length</code> then all 16-bit units from <code>offset</code> 
              to the end of the data are deleted. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is 
              negative or greater than the number of 16-bit units in 
              <code>data</code>, or if the specified <code>count</code> is 
              negative.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.CharacterData.replaceData(System.Int32,System.Int32,System.String)">
            <summary>
            Replace the characters starting at the specified 16-bit unit offset 
            with the specified string. </summary>
            <param name="offsetThe"> offset from which to start replacing. </param>
            <param name="countThe"> number of 16-bit units to replace. If the sum of 
              <code>offset</code> and <code>count</code> exceeds 
              <code>length</code>, then all 16-bit units to the end of the data 
              are replaced; (i.e., the effect is the same as a <code>remove</code>
               method call with the same range, followed by an <code>append</code>
               method invocation). </param>
            <param name="argThe"> <code>DOMString</code> with which the range must be 
              replaced. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is 
              negative or greater than the number of 16-bit units in 
              <code>data</code>, or if the specified <code>count</code> is 
              negative.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CharacterData.data">
            <summary>
            The character data of the node that implements this interface. The DOM 
            implementation may not put arbitrary limits on the amount of data 
            that may be stored in a <code>CharacterData</code> node. However, 
            implementation limits may mean that the entirety of a node's data may 
            not fit into a single <code>DOMString</code>. In such cases, the user 
            may call <code>substringData</code> to retrieve the data in 
            appropriately sized pieces. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              DOMSTRING_SIZE_ERR: Raised when it would return more characters than 
              fit in a <code>DOMString</code> variable on the implementation 
              platform. </exception>
        </member>
        <member name="P:SharpKit.Html.CharacterData.length">
            <summary>
            The number of 16-bit units that are available through <code>data</code> 
            and the <code>substringData</code> method below. This may have the 
            value zero, i.e., <code>CharacterData</code> nodes may be empty.
            </summary>
        </member>
        <member name="T:SharpKit.Html.EventException">
            <summary>
             Event operations may throw an <code>EventException</code> as specified in 
            their method descriptions. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="F:SharpKit.Html.EventException.UNSPECIFIED_EVENT_TYPE_ERR">
            <summary>
             If the <code>Event</code>'s type was not specified by initializing the 
            event before the method was called. Specification of the Event's type 
            as <code>null</code> or an empty string will also trigger this 
            exception. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSValueList">
            <summary>
            The <code>CSSValueList</code> interface provides the abstraction of an 
            ordered collection of CSS values.
            <br/> Some properties allow an empty list into their syntax. In that case, 
            these properties take the <code>none</code> identifier. So, an empty list 
            means that the property has the value <code>none</code>. 
            <br/> The items in the <code>CSSValueList</code> are accessible via an 
            integral index, starting from 0. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSValue">
            <summary>
             The <code>CSSValue</code> interface represents a simple or a complex 
            value. A <code>CSSValue</code> object only occurs in a context of a CSS 
            property. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSValue.cssText">
            <summary>
             A string representation of the current value. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
               SYNTAX_ERR: Raised if the specified CSS string value has a syntax 
              error (according to the attached property) or is unparsable. 
              <br/>INVALID_MODIFICATION_ERR: Raised if the specified CSS string 
              value represents a different type of values than the values allowed 
              by the CSS property.
              <br/> NO_MODIFICATION_ALLOWED_ERR: Raised if this value is readonly.  </exception>
        </member>
        <member name="P:SharpKit.Html.CSSValue.cssValueType">
            <summary>
             A code defining the type of the value as defined above. 
            </summary>
        </member>
        <member name="M:SharpKit.Html.CSSValueList.item(System.Int32)">
            <summary>
            Used to retrieve a <code>CSSValue</code> by ordinal index. The order in 
            this collection represents the order of the values in the CSS style 
            property. If index is greater than or equal to the number of values 
            in the list, this returns <code>null</code>. </summary>
            <param name="indexIndex"> into the collection. </param>
            <returns> The <code>CSSValue</code> at the <code>index</code> position 
              in the <code>CSSValueList</code>, or <code>null</code> if that is 
              not a valid index. </returns>
        </member>
        <member name="P:SharpKit.Html.CSSValueList.length">
            <summary>
            The number of <code>CSSValues</code> in the list. The range of valid 
            values of the indices is <code>0</code> to <code>length-1</code> 
            inclusive.
            </summary>
        </member>
        <member name="T:SharpKit.Html.Counter">
            <summary>
             The <code>Counter</code> interface is used to represent any counter or 
            counters function value. This interface reflects the values in the 
            underlying style property. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.Counter.identifier">
            <summary>
             This attribute is used for the identifier of the counter. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Counter.listStyle">
            <summary>
             This attribute is used for the style of the list. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Counter.separator">
            <summary>
             This attribute is used for the separator of the nested counters. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSUnknownRule">
            <summary>
             The <code>CSSUnknownRule</code> interface represents an at-rule not 
            supported by this user agent. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSCharsetRule">
            <summary>
             The <code>CSSCharsetRule</code> interface represents a @charset rule in a 
            CSS style sheet. The value of the <code>encoding</code> attribute does 
            not affect the encoding of text data in the DOM objects; this encoding is 
            always UTF-16. After a stylesheet is loaded, the value of the 
            <code>encoding</code> attribute is the value found in the 
            <code>@charset</code> rule. If there was no <code>@charset</code> in the 
            original document, then no <code>CSSCharsetRule</code> is created. The 
            value of the <code>encoding</code> attribute may also be used as a hint 
            for the encoding used on serialization of the style sheet. 
            <br/> The value of the @charset rule (and therefore of the 
            <code>CSSCharsetRule</code>) may not correspond to the encoding the 
            document actually came in; character encoding information e.g. in an HTTP 
            header, has priority (see CSS document representation) but this is not 
            reflected in the <code>CSSCharsetRule</code>. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSCharsetRule.encoding">
            <summary>
             The encoding information used in this <code>@charset</code> rule. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the specified encoding value has a syntax error 
              and is unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this encoding rule is 
              readonly. </exception>
        </member>
        <member name="T:SharpKit.Html.ProcessingInstruction">
            <summary>
            The <code>ProcessingInstruction</code> interface represents a "processing 
            instruction", used in XML as a way to keep processor-specific information 
            in the text of the document.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.ProcessingInstruction.target">
            <summary>
            The target of this processing instruction. XML defines this as being 
            the first token following the markup that begins the processing 
            instruction.
            </summary>
        </member>
        <member name="P:SharpKit.Html.ProcessingInstruction.data">
            <summary>
            The content of this processing instruction. This is from the first non 
            white space character after the target to the character immediately 
            preceding the <code>?&gt;</code>. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly. </exception>
        </member>
        <member name="T:SharpKit.Html.Entity">
            <summary>
            This interface represents an entity, either parsed or unparsed, in an XML 
            document. Note that this models the entity itself not the entity 
            declaration. <code>Entity</code> declaration modeling has been left for a 
            later Level of the DOM specification.
            <br/>The <code>nodeName</code> attribute that is inherited from 
            <code>Node</code> contains the name of the entity.
            <br/>An XML processor may choose to completely expand entities before the 
            structure model is passed to the DOM; in this case there will be no 
            <code>EntityReference</code> nodes in the document tree.
            <br/>XML does not mandate that a non-validating XML processor read and 
            process entity declarations made in the external subset or declared in 
            external parameter entities. This means that parsed entities declared in 
            the external subset need not be expanded by some classes of applications, 
            and that the replacement value of the entity may not be available. When 
            the replacement value is available, the corresponding <code>Entity</code> 
            node's child list represents the structure of that replacement text. 
            Otherwise, the child list is empty.
            <br/>The DOM Level 2 does not support editing <code>Entity</code> nodes; if a 
            user wants to make changes to the contents of an <code>Entity</code>, 
            every related <code>EntityReference</code> node has to be replaced in the 
            structure model by a clone of the <code>Entity</code>'s contents, and 
            then the desired changes must be made to each of those clones instead. 
            <code>Entity</code> nodes and all their descendants are readonly.
            <br/>An <code>Entity</code> node does not have any parent.If the entity 
            contains an unbound namespace prefix, the <code>namespaceURI</code> of 
            the corresponding node in the <code>Entity</code> node subtree is 
            <code>null</code>. The same is true for <code>EntityReference</code> 
            nodes that refer to this entity, when they are created using the 
            <code>createEntityReference</code> method of the <code>Document</code> 
            interface. The DOM Level 2 does not support any mechanism to resolve 
            namespace prefixes.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Entity.publicId">
            <summary>
            The public identifier associated with the entity, if specified. If the 
            public identifier was not specified, this is <code>null</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Entity.systemId">
            <summary>
            The system identifier associated with the entity, if specified. If the 
            system identifier was not specified, this is <code>null</code>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Entity.notationName">
            <summary>
            For unparsed entities, the name of the notation for the entity. For 
            parsed entities, this is <code>null</code>. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.Rect">
            <summary>
             The <code>Rect</code> interface is used to represent any rect value. This 
            interface reflects the values in the underlying style property. Hence, 
            modifications made to the <code>CSSPrimitiveValue</code> objects modify 
            the style property. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.Rect.top">
            <summary>
             This attribute is used for the top of the rect. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Rect.right">
            <summary>
             This attribute is used for the right of the rect. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Rect.bottom">
            <summary>
             This attribute is used for the bottom of the rect. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Rect.left">
            <summary>
             This attribute is used for the left of the rect. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.DocumentCSS">
            <summary>
            This interface represents a document with a CSS view.
            <br/> The <code>getOverrideStyle</code> method provides a mechanism through 
            which a DOM author could effect immediate change to the style of an 
            element without modifying the explicitly linked style sheets of a 
            document or the inline style of elements in the style sheets. This style 
            sheet comes after the author style sheet in the cascade algorithm and is 
            called override style sheet. The override style sheet takes precedence 
            over author style sheets. An "!important" declaration still takes 
            precedence over a normal declaration. Override, author, and user style 
            sheets all may contain "!important" declarations. User "!important" rules 
            take precedence over both override and author "!important" rules, and 
            override "!important" rules take precedence over author "!important" 
            rules. 
            <br/> The expectation is that an instance of the <code>DocumentCSS</code> 
            interface can be obtained by using binding-specific casting methods on an 
            instance of the <code>Document</code> interface. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.DocumentStyle">
            <summary>
             The <code>DocumentStyle</code> interface provides a mechanism by which the 
            style sheets embedded in a document can be retrieved. The expectation is 
            that an instance of the <code>DocumentStyle</code> interface can be 
            obtained by using binding-specific casting methods on an instance of the 
            <code>Document</code> interface. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.DocumentStyle.styleSheets">
            <summary>
             A list containing all the style sheets explicitly linked into or 
            embedded in a document. For HTML documents, this includes external 
            style sheets, included via the HTML  LINK element, and inline  STYLE 
            elements. In XML, this includes external style sheets, included via 
            style sheet processing instructions (see ). 
            </summary>
        </member>
        <member name="M:SharpKit.Html.DocumentCSS.getOverrideStyle(SharpKit.Html.Element,System.String)">
            <summary>
             This method is used to retrieve the override style declaration for a 
            specified element and a specified pseudo-element. </summary>
            <param name="elt"> The element whose style is to be modified. This parameter 
              cannot be null. </param>
            <param name="pseudoElt"> The pseudo-element or <code>null</code> if none. </param>
            <returns>  The override style declaration.  </returns>
        </member>
        <member name="T:SharpKit.Html.CSSImportRule">
            <summary>
             The <code>CSSImportRule</code> interface represents a @import rule within 
            a CSS style sheet. The <code>@import</code> rule is used to import style 
            rules from other style sheets. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSImportRule.href">
            <summary>
             The location of the style sheet to be imported. The attribute will not 
            contain the <code>"url(...)"</code> specifier around the URI. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSImportRule.media">
            <summary>
             A list of media types for which this style sheet may be used. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSImportRule.styleSheet">
            <summary>
            The style sheet referred to by this rule, if it has been loaded. The 
            value of this attribute is <code>null</code> if the style sheet has 
            not yet been loaded or if it will not be loaded (e.g. if the style 
            sheet is for a media type not supported by the user agent). 
            </summary>
        </member>
        <member name="T:SharpKit.Html.EventListener">
            <summary>
             The <code>EventListener</code> interface is the primary method for 
            handling events. Users implement the <code>EventListener</code> interface 
            and register their listener on an <code>EventTarget</code> using the 
            <code>AddEventListener</code> method. The users should also remove their 
            <code>EventListener</code> from its <code>EventTarget</code> after they 
            have completed using the listener. 
            <br/> When a <code>Node</code> is copied using the <code>cloneNode</code> 
            method the <code>EventListener</code>s attached to the source 
            <code>Node</code> are not attached to the copied <code>Node</code>. If 
            the user wishes the same <code>EventListener</code>s to be added to the 
            newly created copy the user must add them manually. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.EventListener.handleEvent(SharpKit.Html.Event)">
            <summary>
             This method is called whenever an event occurs of the type for which 
            the <code> EventListener</code> interface was registered. </summary>
            <param name="evt"> The <code>Event</code> contains contextual information 
              about the event. It also contains the <code>stopPropagation</code> 
              and <code>preventDefault</code> methods which are used in 
              determining the event's flow and default action.  </param>
        </member>
        <member name="T:SharpKit.Html.ViewCSS">
            <summary>
             This interface represents a CSS view. The <code>getComputedStyle</code> 
            method provides a read only access to the computed values of an element. 
            <br/> The expectation is that an instance of the <code>ViewCSS</code> 
            interface can be obtained by using binding-specific casting methods on an 
            instance of the <code>AbstractView</code> interface. 
            <br/> Since a computed style is related to an <code>Element</code> node, if 
            this element is removed from the document, the associated 
            <code>CSSStyleDeclaration</code> and <code>CSSValue</code> related to 
            this declaration are no longer valid. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.AbstractView">
            <summary>
            A base interface that all views shall derive from.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113'>Document Object Model (DOM) Level 2 Views Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.AbstractView.document">
            <summary>
            The source <code>DocumentView</code> of which this is an 
            <code>AbstractView</code>.
            </summary>
        </member>
        <member name="M:SharpKit.Html.ViewCSS.getComputedStyle(SharpKit.Html.Element,System.String)">
            <summary>
             This method is used to get the computed style as it is defined in . </summary>
            <param name="elt"> The element whose style is to be computed. This parameter 
              cannot be null. </param>
            <param name="pseudoElt"> The pseudo-element or <code>null</code> if none. </param>
            <returns>  The computed style. The <code>CSSStyleDeclaration</code> is 
              read-only and contains only absolute values.  </returns>
        </member>
        <member name="T:SharpKit.Html.CSSStyleSheet">
            <summary>
             The <code>CSSStyleSheet</code> interface is a concrete interface used to 
            represent a CSS style sheet i.e., a style sheet whose content type is 
            "text/css". 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.StyleSheet">
            <summary>
             The <code>StyleSheet</code> interface is the abstract base interface for 
            any type of style sheet. It represents a single style sheet associated 
            with a structured document. In HTML, the StyleSheet interface represents 
            either an external style sheet, included via the HTML  LINK element, or 
            an inline  STYLE element. In XML, this interface represents an external 
            style sheet, included via a style sheet processing instruction. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.StyleSheet.type">
            <summary>
             This specifies the style sheet language for this style sheet. The 
            style sheet language is specified as a content type (e.g. 
            "text/css"). The content type is often specified in the 
            <code>ownerNode</code>. Also see the type attribute definition for 
            the <code>LINK</code> element in HTML 4.0, and the type 
            pseudo-attribute for the XML style sheet processing instruction. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.StyleSheet.disabled">
            <summary>
             <code>false</code> if the style sheet is applied to the document. 
            <code>true</code> if it is not. Modifying this attribute may cause a 
            new resolution of style for the document. A stylesheet only applies 
            if both an appropriate medium definition is present and the disabled 
            attribute is false. So, if the media doesn't apply to the current 
            user agent, the <code>disabled</code> attribute is ignored. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.StyleSheet.ownerNode">
            <summary>
             The node that associates this style sheet with the document. For HTML, 
            this may be the corresponding <code>LINK</code> or <code>STYLE</code> 
            element. For XML, it may be the linking processing instruction. For 
            style sheets that are included by other style sheets, the value of 
            this attribute is <code>null</code>. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.StyleSheet.parentStyleSheet">
            <summary>
             For style sheet languages that support the concept of style sheet 
            inclusion, this attribute represents the including style sheet, if 
            one exists. If the style sheet is a top-level style sheet, or the 
            style sheet language does not support inclusion, the value of this 
            attribute is <code>null</code>. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.StyleSheet.href">
            <summary>
             If the style sheet is a linked style sheet, the value of its attribute 
            is its location. For inline style sheets, the value of this attribute 
            is <code>null</code>. See the href attribute definition for the 
            <code>LINK</code> element in HTML 4.0, and the href pseudo-attribute 
            for the XML style sheet processing instruction. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.StyleSheet.title">
            <summary>
             The advisory title. The title is often specified in the 
            <code>ownerNode</code>. See the title attribute definition for the 
            <code>LINK</code> element in HTML 4.0, and the title pseudo-attribute 
            for the XML style sheet processing instruction. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.StyleSheet.media">
            <summary>
             The intended destination media for style information. The media is 
            often specified in the <code>ownerNode</code>. If no media has been 
            specified, the <code>MediaList</code> will be empty. See the media 
            attribute definition for the <code>LINK</code> element in HTML 4.0, 
            and the media pseudo-attribute for the XML style sheet processing 
            instruction . Modifying the media list may cause a change to the 
            attribute <code>disabled</code>. 
            </summary>
        </member>
        <member name="M:SharpKit.Html.CSSStyleSheet.insertRule(System.String,System.Int32)">
            <summary>
             Used to insert a new rule into the style sheet. The new rule now 
            becomes part of the cascade. </summary>
            <param name="rule"> The parsable text representing the rule. For rule sets 
              this contains both the selector and the style declaration. For 
              at-rules, this specifies both the at-identifier and the rule 
              content. </param>
            <param name="index"> The index within the style sheet's rule list of the rule 
              before which to insert the specified rule. If the specified index 
              is equal to the length of the style sheet's rule collection, the 
              rule will be added to the end of the style sheet. </param>
            <returns>  The index within the style sheet's rule collection of the 
              newly inserted rule. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the 
              specified index e.g. if an <code>@import</code> rule is inserted 
              after a standard rule set or other at-rule.
              <br/>INDEX_SIZE_ERR: Raised if the specified index is not a valid 
              insertion point.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is 
              readonly.
              <br/>SYNTAX_ERR: Raised if the specified rule has a syntax error and 
              is unparsable. </exception>
        </member>
        <member name="M:SharpKit.Html.CSSStyleSheet.deleteRule(System.Int32)">
            <summary>
             Used to delete a rule from the style sheet. </summary>
            <param name="index"> The index within the style sheet's rule list of the rule 
              to remove. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if the specified index does not correspond to 
              a rule in the style sheet's rule list.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is 
              readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSSStyleSheet.ownerRule">
            <summary>
             If this style sheet comes from an <code>@import</code> rule, the 
            <code>ownerRule</code> attribute will contain the 
            <code>CSSImportRule</code>. In that case, the <code>ownerNode</code> 
            attribute in the <code>StyleSheet</code> interface will be 
            <code>null</code>. If the style sheet comes from an element or a 
            processing instruction, the <code>ownerRule</code> attribute will be 
            <code>null</code> and the <code>ownerNode</code> attribute will 
            contain the <code>Node</code>. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSStyleSheet.cssRules">
            <summary>
             The list of all CSS rules contained within the style sheet. This 
            includes both rule sets and at-rules. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSStyleDeclaration">
            <summary>
             The <code>CSSStyleDeclaration</code> interface represents a single CSS 
            declaration block. This interface may be used to determine the style 
            properties currently set in a block or to set style properties explicitly 
            within the block. 
            <br/> While an implementation may not recognize all CSS properties within a 
            CSS declaration block, it is expected to provide access to all specified 
            properties in the style sheet through the <code>CSSStyleDeclaration</code>
             interface. Furthermore, implementations that support a specific level of 
            CSS should correctly handle CSS shorthand properties for that level. For 
            a further discussion of shorthand properties, see the 
            <code>CSS2Properties</code> interface. 
            <br/> This interface is also used to provide a read-only access to the 
            computed values of an element. See also the <code>ViewCSS</code> 
            interface.  The CSS Object Model doesn't provide an access to the 
            specified or actual values of the CSS cascade. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.CSSStyleDeclaration.getPropertyValue(System.String)">
            <summary>
             Used to retrieve the value of a CSS property if it has been explicitly 
            set within this declaration block. </summary>
            <param name="propertyName"> The name of the CSS property. See the CSS property 
              index. </param>
            <returns>  Returns the value of the property if it has been explicitly 
              set for this declaration block. Returns the empty string if the 
              property has not been set.  </returns>
        </member>
        <member name="M:SharpKit.Html.CSSStyleDeclaration.getPropertyCSSValue(System.String)">
            <summary>
             Used to retrieve the object representation of the value of a CSS 
            property if it has been explicitly set within this declaration block. 
            This method returns <code>null</code> if the property is a shorthand 
            property. Shorthand property values can only be accessed and modified 
            as strings, using the <code>getPropertyValue</code> and 
            <code>setProperty</code> methods. </summary>
            <param name="propertyName"> The name of the CSS property. See the CSS property 
              index. </param>
            <returns>  Returns the value of the property if it has been explicitly 
              set for this declaration block. Returns <code>null</code> if the 
              property has not been set.  </returns>
        </member>
        <member name="M:SharpKit.Html.CSSStyleDeclaration.removeProperty(System.String)">
            <summary>
             Used to remove a CSS property if it has been explicitly set within 
            this declaration block. </summary>
            <param name="propertyName"> The name of the CSS property. See the CSS property 
              index. </param>
            <returns>  Returns the value of the property if it has been explicitly 
              set for this declaration block. Returns the empty string if the 
              property has not been set or the property name does not correspond 
              to a known CSS property. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly 
              or the property is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.CSSStyleDeclaration.getPropertyPriority(System.String)">
            <summary>
             Used to retrieve the priority of a CSS property (e.g. the 
            <code>"important"</code> qualifier) if the property has been 
            explicitly set in this declaration block. </summary>
            <param name="propertyName"> The name of the CSS property. See the CSS property 
              index. </param>
            <returns>  A string representing the priority (e.g. 
              <code>"important"</code>) if one exists. The empty string if none 
              exists.  </returns>
        </member>
        <member name="M:SharpKit.Html.CSSStyleDeclaration.setProperty(System.String,System.String,System.String)">
            <summary>
             Used to set a property value and priority within this declaration 
            block. </summary>
            <param name="propertyName"> The name of the CSS property. See the CSS property 
              index. </param>
            <param name="value"> The new value of the property. </param>
            <param name="priority"> The new priority of the property (e.g. 
              <code>"important"</code>). </param>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the specified value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is 
              readonly or the property is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.CSSStyleDeclaration.item(System.Int32)">
            <summary>
             Used to retrieve the properties that have been explicitly set in this 
            declaration block. The order of the properties retrieved using this 
            method does not have to be the order in which they were set. This 
            method can be used to iterate over all properties in this declaration 
            block. </summary>
            <param name="index"> Index of the property name to retrieve. </param>
            <returns>  The name of the property at this ordinal position. The empty 
              string if no property exists at this position.  </returns>
        </member>
        <member name="P:SharpKit.Html.CSSStyleDeclaration.cssText">
            <summary>
             The parsable textual representation of the declaration block 
            (excluding the surrounding curly braces). Setting this attribute will 
            result in the parsing of the new value and resetting of all the 
            properties in the declaration block including the removal or addition 
            of properties. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the specified CSS string value has a syntax 
              error and is unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is 
              readonly or a property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSSStyleDeclaration.length">
            <summary>
             The number of properties that have been explicitly set in this 
            declaration block. The range of valid indices is 0 to length-1 
            inclusive. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSStyleDeclaration.parentRule">
            <summary>
             The CSS rule that contains this declaration block or <code>null</code> 
            if this <code>CSSStyleDeclaration</code> is not attached to a 
            <code>CSSRule</code>. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.EntityReference">
            <summary>
            <code>EntityReference</code> objects may be inserted into the structure 
            model when an entity reference is in the source document, or when the 
            user wishes to insert an entity reference. Note that character references 
            and references to predefined entities are considered to be expanded by 
            the HTML or XML processor so that characters are represented by their 
            Unicode equivalent rather than by an entity reference. Moreover, the XML 
            processor may completely expand references to entities while building the 
            structure model, instead of providing <code>EntityReference</code> 
            objects. If it does provide such objects, then for a given 
            <code>EntityReference</code> node, it may be that there is no 
            <code>Entity</code> node representing the referenced entity. If such an 
            <code>Entity</code> exists, then the subtree of the 
            <code>EntityReference</code> node is in general a copy of the 
            <code>Entity</code> node subtree. However, this may not be true when an 
            entity contains an unbound namespace prefix. In such a case, because the 
            namespace prefix resolution depends on where the entity reference is, the 
            descendants of the <code>EntityReference</code> node may be bound to 
            different namespace URIs.
            <br/>As for <code>Entity</code> nodes, <code>EntityReference</code> nodes and 
            all their descendants are readonly.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="T:SharpKit.Html.DocumentFragment">
            <summary>
            <code>DocumentFragment</code> is a "lightweight" or "minimal" 
            <code>Document</code> object. It is very common to want to be able to 
            extract a portion of a document's tree or to create a new fragment of a 
            document. Imagine implementing a user command like cut or rearranging a 
            document by moving fragments around. It is desirable to have an object 
            which can hold such fragments and it is quite natural to use a Node for 
            this purpose. While it is true that a <code>Document</code> object could 
            fulfill this role, a <code>Document</code> object can potentially be a 
            heavyweight object, depending on the underlying implementation. What is 
            really needed for this is a very lightweight object. 
            <code>DocumentFragment</code> is such an object.
            <br/>Furthermore, various operations -- such as inserting nodes as children 
            of another <code>Node</code> -- may take <code>DocumentFragment</code> 
            objects as arguments; this results in all the child nodes of the 
            <code>DocumentFragment</code> being moved to the child list of this node.
            <br/>The children of a <code>DocumentFragment</code> node are zero or more 
            nodes representing the tops of any sub-trees defining the structure of 
            the document. <code>DocumentFragment</code> nodes do not need to be 
            well-formed XML documents (although they do need to follow the rules 
            imposed upon well-formed XML parsed entities, which can have multiple top 
            nodes). For example, a <code>DocumentFragment</code> might have only one 
            child and that child node could be a <code>Text</code> node. Such a 
            structure model represents neither an HTML document nor a well-formed XML 
            document.
            <br/>When a <code>DocumentFragment</code> is inserted into a 
            <code>Document</code> (or indeed any other <code>Node</code> that may 
            take children) the children of the <code>DocumentFragment</code> and not 
            the <code>DocumentFragment</code> itself are inserted into the 
            <code>Node</code>. This makes the <code>DocumentFragment</code> very 
            useful when the user wishes to create nodes that are siblings; the 
            <code>DocumentFragment</code> acts as the parent of these nodes so that 
            the user can use the standard methods from the <code>Node</code> 
            interface, such as <code>insertBefore</code> and <code>appendChild</code>.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="T:SharpKit.Html.TreeWalker">
            <summary>
            <code>TreeWalker</code> objects are used to navigate a document tree or 
            subtree using the view of the document defined by their 
            <code>whatToShow</code> flags and filter (if any). Any function which 
            performs navigation using a <code>TreeWalker</code> will automatically 
            support any view defined by a <code>TreeWalker</code>.
            <br/>Omitting nodes from the logical view of a subtree can result in a 
            structure that is substantially different from the same subtree in the 
            complete, unfiltered document. Nodes that are siblings in the 
            <code>TreeWalker</code> view may be children of different, widely 
            separated nodes in the original view. For instance, consider a 
            <code>NodeFilter</code> that skips all nodes except for Text nodes and 
            the root node of a document. In the logical view that results, all text 
            nodes will be siblings and appear as direct children of the root node, no 
            matter how deeply nested the structure of the original document.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.TreeWalker.parentNode">
            <summary>
            Moves to and returns the closest visible ancestor node of the current 
            node. If the search for <code>parentNode</code> attempts to step 
            upward from the <code>TreeWalker</code>'s <code>root</code> node, or 
            if it fails to find a visible ancestor node, this method retains the 
            current position and returns <code>null</code>. </summary>
            <returns> The new parent node, or <code>null</code> if the current node 
              has no parent  in the <code>TreeWalker</code>'s logical view.   </returns>
        </member>
        <member name="M:SharpKit.Html.TreeWalker.firstChild">
            <summary>
            Moves the <code>TreeWalker</code> to the first visible child of the 
            current node, and returns the new node. If the current node has no 
            visible children, returns <code>null</code>, and retains the current 
            node. </summary>
            <returns> The new node, or <code>null</code> if the current node has no 
              visible children  in the <code>TreeWalker</code>'s logical view.   </returns>
        </member>
        <member name="M:SharpKit.Html.TreeWalker.lastChild">
            <summary>
            Moves the <code>TreeWalker</code> to the last visible child of the 
            current node, and returns the new node. If the current node has no 
            visible children, returns <code>null</code>, and retains the current 
            node. </summary>
            <returns> The new node, or <code>null</code> if the current node has no 
              children  in the <code>TreeWalker</code>'s logical view.   </returns>
        </member>
        <member name="M:SharpKit.Html.TreeWalker.previousSibling">
            <summary>
            Moves the <code>TreeWalker</code> to the previous sibling of the 
            current node, and returns the new node. If the current node has no 
            visible previous sibling, returns <code>null</code>, and retains the 
            current node. </summary>
            <returns> The new node, or <code>null</code> if the current node has no 
              previous sibling.  in the <code>TreeWalker</code>'s logical view.   </returns>
        </member>
        <member name="M:SharpKit.Html.TreeWalker.nextSibling">
            <summary>
            Moves the <code>TreeWalker</code> to the next sibling of the current 
            node, and returns the new node. If the current node has no visible 
            next sibling, returns <code>null</code>, and retains the current node. </summary>
            <returns> The new node, or <code>null</code> if the current node has no 
              next sibling.  in the <code>TreeWalker</code>'s logical view.   </returns>
        </member>
        <member name="M:SharpKit.Html.TreeWalker.previousNode">
            <summary>
            Moves the <code>TreeWalker</code> to the previous visible node in 
            document order relative to the current node, and returns the new 
            node. If the current node has no previous node,  or if the search for 
            <code>previousNode</code> attempts to step upward from the 
            <code>TreeWalker</code>'s <code>root</code> node,  returns 
            <code>null</code>, and retains the current node. </summary>
            <returns> The new node, or <code>null</code> if the current node has no 
              previous node  in the <code>TreeWalker</code>'s logical view.   </returns>
        </member>
        <member name="M:SharpKit.Html.TreeWalker.nextNode">
            <summary>
            Moves the <code>TreeWalker</code> to the next visible node in document 
            order relative to the current node, and returns the new node. If the 
            current node has no next node, or if the search for nextNode attempts 
            to step upward from the <code>TreeWalker</code>'s <code>root</code> 
            node, returns <code>null</code>, and retains the current node. </summary>
            <returns> The new node, or <code>null</code> if the current node has no 
              next node  in the <code>TreeWalker</code>'s logical view.   </returns>
        </member>
        <member name="P:SharpKit.Html.TreeWalker.root">
            <summary>
            The <code>root</code> node of the <code>TreeWalker</code>, as specified 
            when it was created.
            </summary>
        </member>
        <member name="P:SharpKit.Html.TreeWalker.whatToShow">
            <summary>
            This attribute determines which node types are presented via the 
            <code>TreeWalker</code>. The available set of constants is defined in 
            the <code>NodeFilter</code> interface.  Nodes not accepted by 
            <code>whatToShow</code> will be skipped, but their children may still 
            be considered. Note that this skip takes precedence over the filter, 
            if any. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.TreeWalker.filter">
            <summary>
            The filter used to screen nodes.
            </summary>
        </member>
        <member name="P:SharpKit.Html.TreeWalker.expandEntityReferences">
            <summary>
            The value of this flag determines whether the children of entity 
            reference nodes are visible to the <code>TreeWalker</code>. If false, 
            they  and their descendants will be rejected. Note that this 
            rejection takes precedence over <code>whatToShow</code> and the 
            filter, if any. 
            <br/> To produce a view of the document that has entity references 
            expanded and does not expose the entity reference node itself, use 
            the <code>whatToShow</code> flags to hide the entity reference node 
            and set <code>expandEntityReferences</code> to true when creating the 
            <code>TreeWalker</code>. To produce a view of the document that has 
            entity reference nodes but no entity expansion, use the 
            <code>whatToShow</code> flags to show the entity reference node and 
            set <code>expandEntityReferences</code> to false.
            </summary>
        </member>
        <member name="P:SharpKit.Html.TreeWalker.currentNode">
            <summary>
            The node at which the <code>TreeWalker</code> is currently positioned.
            <br/>Alterations to the DOM tree may cause the current node to no longer 
            be accepted by the <code>TreeWalker</code>'s associated filter. 
            <code>currentNode</code> may also be explicitly set to any node, 
            whether or not it is within the subtree specified by the 
            <code>root</code> node or would be accepted by the filter and 
            <code>whatToShow</code> flags. Further traversal occurs relative to 
            <code>currentNode</code> even if it is not part of the current view, 
            by applying the filters in the requested direction; if no traversal 
            is possible, <code>currentNode</code> is not changed. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              NOT_SUPPORTED_ERR: Raised if an attempt is made to set 
              <code>currentNode</code> to <code>null</code>. </exception>
        </member>
        <member name="T:SharpKit.Html.MediaList">
            <summary>
             The <code>MediaList</code> interface provides the abstraction of an 
            ordered collection of media, without defining or constraining how this 
            collection is implemented. An empty list is the same as a list that 
            contains the medium <code>"all"</code>. 
            <br/> The items in the <code>MediaList</code> are accessible via an integral 
            index, starting from 0. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.MediaList.item(System.Int32)">
            <summary>
             Returns the <code>index</code>th in the list. If <code>index</code> is 
            greater than or equal to the number of media in the list, this 
            returns <code>null</code>. </summary>
            <param name="index"> Index into the collection. </param>
            <returns>  The medium at the <code>index</code>th position in the 
              <code>MediaList</code>, or <code>null</code> if that is not a valid 
              index.  </returns>
        </member>
        <member name="M:SharpKit.Html.MediaList.deleteMedium(System.String)">
            <summary>
             Deletes the medium indicated by <code>oldMedium</code> from the list. </summary>
            <param name="oldMediumThe"> medium to delete in the media list. </param>
            <exception cref="T:SharpKit.Html.DOMException">
               NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly. 
              <br/> NOT_FOUND_ERR: Raised if <code>oldMedium</code> is not in the 
              list.  </exception>
        </member>
        <member name="M:SharpKit.Html.MediaList.appendMedium(System.String)">
            <summary>
             Adds the medium <code>newMedium</code> to the end of the list. If the 
            <code>newMedium</code> is already used, it is first removed. </summary>
            <param name="newMediumThe"> new medium to add. </param>
            <exception cref="T:SharpKit.Html.DOMException">
               INVALID_CHARACTER_ERR: If the medium contains characters that are 
              invalid in the underlying style language. 
              <br/> NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly.  </exception>
        </member>
        <member name="P:SharpKit.Html.MediaList.mediaText">
            <summary>
             The parsable textual representation of the media list. This is a 
            comma-separated list of media. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the specified string value has a syntax error 
              and is unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this media list is 
              readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.MediaList.length">
            <summary>
             The number of media in the list. The range of valid media is 
            <code>0</code> to <code>length-1</code> inclusive. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.ElementTimeControl">
            <summary>
            <p><a href="http://www.w3.org/TR/2000/WD-smil-animation-20000731/">SMILAnimation</a>
            supports several methods for controlling the behavior of animation:
            <code>beginElement()</code> and <code>endElement()</code>, et al.  These
            methods are used to begin and end an animation that has declared the timing
            to respond to the DOM, using the following syntax:</p>
            <pre>&lt;animate begin="indefinite" end="indefinite" .../&gt;</pre>
            
             <p>Note that only one of <code>begin</code> or <code>end</code> need be
             specified - either or both can be used.  The <code>beginElement()</code>
             and <code>beginElementAt()</code> methods must do nothing if the animation
             is not explicitly set with the <code>begin="indefinite"</code> syntax
             above. The <code>endElement()</code> and <code>endElementAt()</code>
             methods must do nothing if the animation is not explicitly set with the
             <code>end</code><code>="indefinite"</code> syntax above.</p>
            
            <p>Calling <code>beginElement()</code> causes the animation to begin in much
            the same way that an animation with event-based begin timing begins. The
            effective begin time is the current presentation time at the time of the DOM
            method call. Note that <code>beginElement()</code> is subject to the
            <code>restart</code> attribute in the same manner that event-based begin
            timing is. If an animation is specified to disallow restarting at a given
            point, <code>beginElement()</code> methods calls must fail. Refer also to
            the section <a href="http://www.w3.org/TR/2000/WD-smil-animation-20000731/#Restart">Restarting
            animations</a>.</p>
            
            <p>Calling <code>beginElementAt()</code> has the same effect as
            <code>beginElement()</code>, except that the effective begin time is offset
            from the current presentation time by an amount specified as a parameter.
            Passing a negative value for the offset causes the element to begin as for
            <code>beginElement()</code>, but has the effect that the element begins at
            the specified offset into its active duration. The
            <code>beginElementAt()</code> method must also respect the
            <code>restart</code> attribute. The restart semantics for a
            <code>beginElementAt()</code> method call are evaluated at the time of the
            method call, and not at the effective begin time specified by the offset
            parameter.</p>
            
            <p>Calling <code>endElement()</code> causes an animation to end the active
            duration, just as <code>end</code> does. Depending upon the value of the
            <code>fill</code> attribute, the animation effect may no longer be applied,
            or it may be frozen at the current effect. Refer also to the section <a href="#Fill">Freezing animations</a>. If an animation is not currently
            active (i.e. if it has not yet begun or if it is frozen), the
            <code>endElement()</code> method will fail.</p>
            
            <p>Calling <code>endElementAt()</code> causes an animation to end the active
            duration, just as <code>endElement()</code> does, but allows the caller to
            specify a positive offset, to cause the element to end at a point in the
            future. Other than delaying when the end actually happens, the semantics are
            identical to those for <code>endElement()</code>. If
            <code>endElementAt()</code> is called more than once while an element is
            active, the end time specified by the last method call will determine the
            end behavior. </p>
            
            <p>The expectation of the following interface is that an instance of the
            ElementTimeControl interface can be obtained by using binding-specific
            casting methods on an instance of an animate element. A DOM application can
            use the <code>hasFeature</code> method of the <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/#ID-5CED94D7">DOMImplementation</a>
            interface to determine whether the <a href="http://www.w3.org/TR/2000/WD-smil-animation-20000731/#ElementTimeControl"><code>ElementTimeControl</code></a> interface is
            supported or not. The feature string for this interface is
            <code>"TimeControl"</code>.</p>
            </summary>
            <seealso cref="!:http://www.w3.org/TR/2000/WD-smil-animation-20000731/">SMIL Animation</seealso>
        </member>
        <member name="M:SharpKit.Html.ElementTimeControl.beginElement">
            <summary>
            Causes this element to begin the local timeline (subject to restart constraints). </summary>
            <returns> <code>true</code> if the method call was successful and the
                    element was begun. <code>false</code> if the method call
                    failed. Possible reasons for failure include:
            <ul>
            <li>The element does not support the <code>beginElement</code>
            method. The <code>begin</code> attribute is not set to
            <code>"indefinite"</code>.</li>
            <li>The element is already active and cannot be restarted when it is
            active. The <code>restart</code> attribute is set to
            <code>"whenNotActive"</code>.</li>
            <li>The element is active or has been active and cannot be
            restarted. The <code>restart</code> attribute is set to
            <code>"never"</code>.</li>
            </ul>
            @raise DOMException <code>SYNTAX_ERR</code>: The element was not defined
            with the appropriate syntax to allow <code>beginElement</code> calls. </returns>
        </member>
        <member name="M:SharpKit.Html.ElementTimeControl.beginElementAt(System.Single)">
            <summary>
            Causes this element to begin the local timeline (subject to restart
            constraints), at the passed offset from the current time when the method
            is called. If the offset is &gt;= 0, the semantics are equivalent to an
            event-base begin with the specified offset. If the offset is &lt; 0, the
            semantics are equivalent to beginElement(), but the element active
            duration is evaluated as though the element had begun at the passed
            (negative) offset from the current time when the method is called.
            </summary>
            <param name="offset"> The offset in seconds at which to begin the element. </param>
            <returns> <code>true</code> if the method call was successful and the element was begun.
            <code>false</code> if the method call failed.
            Possible reasons for failure include:
            <ul>
            <li>The element does not support the
            <code>beginElementAt</code> method. The
            <code>begin</code> attribute is not set to
            <code>"indefinite"</code>.</li>
            <li>The element is already active and cannot be
            restarted when it is active. The
            <code>restart</code> attribute is set to
            <code>"whenNotActive"</code>.</li>
            <li>The element is active or has been active and
            cannot be restarted. The <code>restart</code>
            attribute is set to <code>"never"</code>.</li>
            </ul>     
            @raise DOMException SYNTAX_ERR: The element was not defined with the appropriate
            syntax to allow <code>beginElementAt</code> calls. </returns>
        </member>
        <member name="M:SharpKit.Html.ElementTimeControl.endElement">
            <summary>
            Causes this element to end the local timeline.
            </summary>
            <returns> <code>true</code> if the method call was
            successful and the element was ended.
            <code>false</code> if method call failed. Possible
            reasons for failure include:
            <ul>
            <li>The element does not support the
            <code>endElement</code> method. The
            <code>end</code> attribute is not set to
            <code>"indefinite"</code>.</li>
            <li>The element is not active.</li>
            </ul>
            @raise DOMException SYNTAX_ERR: The element was not defined with the
                                appropriate syntax to allow <code>endElement</code>
                                calls. </returns>
        </member>
        <member name="M:SharpKit.Html.ElementTimeControl.endElementAt(System.Single)">
            <summary>
            Causes this element to end the local timeline at the specified offset
            from the current time when the method is called
            </summary>
            <param name="offset"> The offset in seconds at which to end the element.
                          Must be <code>&gt;= 0</code>. </param>
            <returns> <code>true</code> if the method call was
            successful and the element was ended.
            <code>false</code> if method call failed. Possible
            reasons for failure include:
            <ul>
            <li>The element does not support the
            <code>endElementAt</code> method. The
            <code>end</code> attribute is not set to
            <code>"indefinite"</code>.</li>
            <li>The element is not active.</li>
            </ul>
            @raise DOMException SYNTAX_ERR: The element was not defined with the
            appropriate syntax to allow
            <code>endElementAt</code> calls. </returns>
        </member>
        <member name="T:SharpKit.Html.Range">
            <summary>
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.Range.setStart(SharpKit.Html.Node,System.Int32)">
            <summary>
            Sets the attributes describing the start of the Range. </summary>
            <param name="refNodeThe"> <code>refNode</code> value. This parameter must be 
              different from <code>null</code>. </param>
            <param name="offsetThe"> <code>startOffset</code> value. </param>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if <code>refNode</code> or an ancestor 
              of <code>refNode</code> is an Entity, Notation, or DocumentType 
              node. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if <code>offset</code> is negative or greater 
              than the number of child units in <code>refNode</code>. Child units 
              are 16-bit units if <code>refNode</code> is a type of CharacterData 
              node (e.g., a Text or Comment node) or a ProcessingInstruction 
              node. Child units are Nodes in all other cases.
              <br/>INVALID_STATE_ERR: Raised if <code>detach()</code> has already 
              been invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.setEnd(SharpKit.Html.Node,System.Int32)">
            <summary>
            Sets the attributes describing the end of a Range. </summary>
            <param name="refNodeThe"> <code>refNode</code> value. This parameter must be 
              different from <code>null</code>. </param>
            <param name="offsetThe"> <code>endOffset</code> value. </param>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if <code>refNode</code> or an ancestor 
              of <code>refNode</code> is an Entity, Notation, or DocumentType 
              node. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if <code>offset</code> is negative or greater 
              than the number of child units in <code>refNode</code>. Child units 
              are 16-bit units if <code>refNode</code> is a type of CharacterData 
              node (e.g., a Text or Comment node) or a ProcessingInstruction 
              node. Child units are Nodes in all other cases.
              <br/>INVALID_STATE_ERR: Raised if <code>detach()</code> has already 
              been invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.collapse(System.Boolean)">
            <summary>
            Collapse a Range onto one of its boundary-points </summary>
            <param name="toStartIf"> TRUE, collapses the Range onto its start; if FALSE, 
              collapses it onto its end. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.selectNode(SharpKit.Html.Node)">
            <summary>
            Select a node and its contents </summary>
            <param name="refNodeThe"> node to select. </param>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if an ancestor of <code>refNode</code> 
              is an Entity, Notation or DocumentType node or if 
              <code>refNode</code> is a Document, DocumentFragment, Attr, Entity, 
              or Notation node. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.selectNodeContents(SharpKit.Html.Node)">
            <summary>
            Select the contents within a node </summary>
            <param name="refNodeNode"> to select from </param>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if <code>refNode</code> or an ancestor 
              of <code>refNode</code> is an Entity, Notation or DocumentType node. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.compareBoundaryPoints(System.Int16,SharpKit.Html.Range)">
            <summary>
            Compare the boundary-points of two Ranges in a document. </summary>
            <param name="howA"> code representing the type of comparison, as defined above. </param>
            <param name="sourceRangeThe"> <code>Range</code> on which this current 
              <code>Range</code> is compared to. </param>
            <returns>  -1, 0 or 1 depending on whether the corresponding 
              boundary-point of the Range is respectively before, equal to, or 
              after the corresponding boundary-point of <code>sourceRange</code>. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              WRONG_DOCUMENT_ERR: Raised if the two Ranges are not in the same 
              Document or DocumentFragment.
              <br/>INVALID_STATE_ERR: Raised if <code>detach()</code> has already 
              been invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.deleteContents">
            <summary>
            Removes the contents of a Range from the containing document or 
            document fragment without returning a reference to the removed 
            content. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if any portion of the content of 
              the Range is read-only or any of the nodes that contain any of the 
              content of the Range are read-only.
              <br/>INVALID_STATE_ERR: Raised if <code>detach()</code> has already 
              been invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.extractContents">
            <summary>
            Moves the contents of a Range from the containing document or document 
            fragment to a new DocumentFragment. </summary>
            <returns> A DocumentFragment containing the extracted contents. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if any portion of the content of 
              the Range is read-only or any of the nodes which contain any of the 
              content of the Range are read-only.
              <br/>HIERARCHY_REQUEST_ERR: Raised if a DocumentType node would be 
              extracted into the new DocumentFragment.
              <br/>INVALID_STATE_ERR: Raised if <code>detach()</code> has already 
              been invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.cloneContents">
            <summary>
            Duplicates the contents of a Range </summary>
            <returns> A DocumentFragment that contains content equivalent to this 
              Range. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              HIERARCHY_REQUEST_ERR: Raised if a DocumentType node would be 
              extracted into the new DocumentFragment.
              <br/>INVALID_STATE_ERR: Raised if <code>detach()</code> has already 
              been invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.insertNode(SharpKit.Html.Node)">
            <summary>
            Inserts a node into the Document or DocumentFragment at the start of 
            the Range. If the container is a Text node, this will be split at the 
            start of the Range (as if the Text node's splitText method was 
            performed at the insertion point) and the insertion will occur 
            between the two resulting Text nodes. Adjacent Text nodes will not be 
            automatically merged. If the node to be inserted is a 
            DocumentFragment node, the children will be inserted rather than the 
            DocumentFragment node itself. </summary>
            <param name="newNodeThe"> node to insert at the start of the Range </param>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if an ancestor container of the 
              start of the Range is read-only.
              <br/>WRONG_DOCUMENT_ERR: Raised if <code>newNode</code> and the 
              container of the start of the Range were not created from the same 
              document.
              <br/>HIERARCHY_REQUEST_ERR: Raised if the container of the start of 
              the Range is of a type that does not allow children of the type of 
              <code>newNode</code> or if <code>newNode</code> is an ancestor of 
              the container.
              <br/>INVALID_STATE_ERR: Raised if <code>detach()</code> has already 
              been invoked on this object. </exception>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if <code>newNode</code> is an Attr, 
              Entity, Notation, or Document node. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.surroundContents(SharpKit.Html.Node)">
            <summary>
            Reparents the contents of the Range to the given node and inserts the 
            node at the position of the start of the Range. </summary>
            <param name="newParentThe"> node to surround the contents with. </param>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised if an ancestor container of 
              either boundary-point of the Range is read-only.
              <br/>WRONG_DOCUMENT_ERR: Raised if <code> newParent</code> and the 
              container of the start of the Range were not created from the same 
              document.
              <br/>HIERARCHY_REQUEST_ERR: Raised if the container of the start of 
              the Range is of a type that does not allow children of the type of 
              <code>newParent</code> or if <code>newParent</code> is an ancestor 
              of the container or if <code>node</code> would end up with a child 
              node of a type not allowed by the type of <code>node</code>.
              <br/>INVALID_STATE_ERR: Raised if <code>detach()</code> has already 
              been invoked on this object. </exception>
            <exception cref="T:SharpKit.Html.RangeException">
              BAD_BOUNDARYPOINTS_ERR: Raised if the Range partially selects a 
              non-text node.
              <br/>INVALID_NODE_TYPE_ERR: Raised if <code> node</code> is an Attr, 
              Entity, DocumentType, Notation, Document, or DocumentFragment node. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.cloneRange">
            <summary>
            Produces a new Range whose boundary-points are equal to the 
            boundary-points of the Range. </summary>
            <returns> The duplicated Range. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.ToString">
            <summary>
            Returns the contents of a Range as a string. This string contains only 
            the data characters, not any markup. </summary>
            <returns> The contents of the Range. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="M:SharpKit.Html.Range.detach">
            <summary>
            Called to indicate that the Range is no longer in use and that the 
            implementation may relinquish any resources associated with this 
            Range. Subsequent calls to any methods or attribute getters on this 
            Range will result in a <code>DOMException</code> being thrown with an 
            error code of <code>INVALID_STATE_ERR</code>. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.startContainer">
            <summary>
            Node within which the Range begins </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.startOffset">
            <summary>
            Offset within the starting node of the Range. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.endContainer">
            <summary>
            Node within which the Range ends </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.endOffset">
            <summary>
            Offset within the ending node of the Range. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.collapsed">
            <summary>
            TRUE if the Range is collapsed </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.commonAncestorContainer">
            <summary>
            The deepest common ancestor container of the Range's two 
            boundary-points. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.startBefore">
            <summary>
            Sets the start position to be before a node </summary>
            <param name="refNodeRange"> starts before <code>refNode</code> </param>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if the root container of 
              <code>refNode</code> is not an Attr, Document, or DocumentFragment 
              node or if <code>refNode</code> is a Document, DocumentFragment, 
              Attr, Entity, or Notation node. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.startAfter">
            <summary>
            Sets the start position to be after a node </summary>
            <param name="refNodeRange"> starts after <code>refNode</code> </param>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if the root container of 
              <code>refNode</code> is not an Attr, Document, or DocumentFragment 
              node or if <code>refNode</code> is a Document, DocumentFragment, 
              Attr, Entity, or Notation node. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.endBefore">
            <summary>
            Sets the end position to be before a node. </summary>
            <param name="refNodeRange"> ends before <code>refNode</code> </param>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if the root container of 
              <code>refNode</code> is not an Attr, Document, or DocumentFragment 
              node or if <code>refNode</code> is a Document, DocumentFragment, 
              Attr, Entity, or Notation node. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="P:SharpKit.Html.Range.endAfter">
            <summary>
            Sets the end of a Range to be after a node </summary>
            <param name="refNodeRange"> ends after <code>refNode</code>. </param>
            <exception cref="T:SharpKit.Html.RangeException">
              INVALID_NODE_TYPE_ERR: Raised if the root container of 
              <code>refNode</code> is not an Attr, Document or DocumentFragment 
              node or if <code>refNode</code> is a Document, DocumentFragment, 
              Attr, Entity, or Notation node. </exception>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if <code>detach()</code> has already been 
              invoked on this object. </exception>
        </member>
        <member name="T:SharpKit.Html.DocumentRange">
            <summary>
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.DocumentRange.createRange">
            <summary>
            This interface can be obtained from the object implementing the 
            <code>Document</code> interface using binding-specific casting 
            methods. </summary>
            <returns> The initial state of the Range returned from this method is 
              such that both of its boundary-points are positioned at the 
              beginning of the corresponding Document, before any content. The 
              Range returned can only be used to select content associated with 
              this Document, or with DocumentFragments and Attrs for which this 
              Document is the <code>ownerDocument</code>. </returns>
        </member>
        <member name="T:SharpKit.Html.CSSPrimitiveValue">
            <summary>
             The <code>CSSPrimitiveValue</code> interface represents a single CSS value
            . This interface may be used to determine the value of a specific style 
            property currently set in a block or to set a specific style property 
            explicitly within the block. An instance of this interface might be 
            obtained from the <code>getPropertyCSSValue</code> method of the 
            <code>CSSStyleDeclaration</code> interface. A 
            <code>CSSPrimitiveValue</code> object only occurs in a context of a CSS 
            property. 
            <br/> Conversions are allowed between absolute values (from millimeters to 
            centimeters, from degrees to radians, and so on) but not between relative 
            values. (For example, a pixel value cannot be converted to a centimeter 
            value.) Percentage values can't be converted since they are relative to 
            the parent value (or another property value). There is one exception for 
            color percentage values: since a color percentage value is relative to 
            the range 0-255, a color percentage value can be converted to a number; 
            (see also the <code>RGBColor</code> interface). 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.CSSPrimitiveValue.setFloatValue(System.Int16,System.Single)">
            <summary>
             A method to set the float value with a specified unit. If the property 
            attached with this value can not accept the specified unit or the 
            float value, the value will be unchanged and a 
            <code>DOMException</code> will be raised. </summary>
            <param name="unitType"> A unit code as defined above. The unit code can only 
              be a float unit type (i.e. <code>CSS_NUMBER</code>, 
              <code>CSS_PERCENTAGE</code>, <code>CSS_EMS</code>, 
              <code>CSS_EXS</code>, <code>CSS_PX</code>, <code>CSS_CM</code>, 
              <code>CSS_MM</code>, <code>CSS_IN</code>, <code>CSS_PT</code>, 
              <code>CSS_PC</code>, <code>CSS_DEG</code>, <code>CSS_RAD</code>, 
              <code>CSS_GRAD</code>, <code>CSS_MS</code>, <code>CSS_S</code>, 
              <code>CSS_HZ</code>, <code>CSS_KHZ</code>, 
              <code>CSS_DIMENSION</code>). </param>
            <param name="floatValue"> The new float value. </param>
            <exception cref="T:SharpKit.Html.DOMException">
               INVALID_ACCESS_ERR: Raised if the attached property doesn't support 
              the float value or the unit type.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.CSSPrimitiveValue.getFloatValue(System.Int16)">
            <summary>
             This method is used to get a float value in a specified unit. If this 
            CSS value doesn't contain a float value or can't be converted into 
            the specified unit, a <code>DOMException</code> is raised. </summary>
            <param name="unitType"> A unit code to get the float value. The unit code can 
              only be a float unit type (i.e. <code>CSS_NUMBER</code>, 
              <code>CSS_PERCENTAGE</code>, <code>CSS_EMS</code>, 
              <code>CSS_EXS</code>, <code>CSS_PX</code>, <code>CSS_CM</code>, 
              <code>CSS_MM</code>, <code>CSS_IN</code>, <code>CSS_PT</code>, 
              <code>CSS_PC</code>, <code>CSS_DEG</code>, <code>CSS_RAD</code>, 
              <code>CSS_GRAD</code>, <code>CSS_MS</code>, <code>CSS_S</code>, 
              <code>CSS_HZ</code>, <code>CSS_KHZ</code>, 
              <code>CSS_DIMENSION</code>). </param>
            <returns>  The float value in the specified unit. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
               INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float 
              value or if the float value can't be converted into the specified 
              unit.  </exception>
        </member>
        <member name="M:SharpKit.Html.CSSPrimitiveValue.setStringValue(System.Int16,System.String)">
            <summary>
             A method to set the string value with the specified unit. If the 
            property attached to this value can't accept the specified unit or 
            the string value, the value will be unchanged and a 
            <code>DOMException</code> will be raised. </summary>
            <param name="stringType"> A string code as defined above. The string code can 
              only be a string unit type (i.e. <code>CSS_STRING</code>, 
              <code>CSS_URI</code>, <code>CSS_IDENT</code>, and 
              <code>CSS_ATTR</code>). </param>
            <param name="stringValue"> The new string value. </param>
            <exception cref="T:SharpKit.Html.DOMException">
               INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string 
              value or if the string value can't be converted into the specified 
              unit.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSSPrimitiveValue.primitiveType">
            <summary>
            The type of the value as defined by the constants specified above.
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSPrimitiveValue.stringValue">
            <summary>
             This method is used to get the string value. If the CSS value doesn't 
            contain a string value, a <code>DOMException</code> is raised.  Some 
            properties (like 'font-family' or 'voice-family') convert a 
            whitespace separated list of idents to a string. </summary>
            <returns>  The string value in the current unit. The current 
              <code>primitiveType</code> can only be a string unit type (i.e. 
              <code>CSS_STRING</code>, <code>CSS_URI</code>, 
              <code>CSS_IDENT</code> and <code>CSS_ATTR</code>). </returns>
            <exception cref="T:SharpKit.Html.DOMException">
               INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string 
              value.  </exception>
        </member>
        <member name="P:SharpKit.Html.CSSPrimitiveValue.counterValue">
            <summary>
             This method is used to get the Counter value. If this CSS value 
            doesn't contain a counter value, a <code>DOMException</code> is 
            raised. Modification to the corresponding style property can be 
            achieved using the <code>Counter</code> interface. </summary>
            <returns> The Counter value. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
               INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a 
              Counter value (e.g. this is not <code>CSS_COUNTER</code>).  </exception>
        </member>
        <member name="P:SharpKit.Html.CSSPrimitiveValue.rectValue">
            <summary>
             This method is used to get the Rect value. If this CSS value doesn't 
            contain a rect value, a <code>DOMException</code> is raised. 
            Modification to the corresponding style property can be achieved 
            using the <code>Rect</code> interface. </summary>
            <returns> The Rect value. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
               INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Rect 
              value. (e.g. this is not <code>CSS_RECT</code>).  </exception>
        </member>
        <member name="P:SharpKit.Html.CSSPrimitiveValue.rGBColorValue">
            <summary>
             This method is used to get the RGB color. If this CSS value doesn't 
            contain a RGB color value, a <code>DOMException</code> is raised. 
            Modification to the corresponding style property can be achieved 
            using the <code>RGBColor</code> interface. </summary>
            <returns> the RGB color value. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
               INVALID_ACCESS_ERR: Raised if the attached property can't return a 
              RGB color value (e.g. this is not <code>CSS_RGBCOLOR</code>).  </exception>
        </member>
        <member name="T:SharpKit.Html.CSS2Properties">
            <summary>
             The <code>CSS2Properties</code> interface represents a convenience 
            mechanism for retrieving and setting properties within a 
            <code>CSSStyleDeclaration</code>. The attributes of this interface 
            correspond to all the properties specified in CSS2. Getting an attribute 
            of this interface is equivalent to calling the 
            <code>getPropertyValue</code> method of the 
            <code>CSSStyleDeclaration</code> interface. Setting an attribute of this 
            interface is equivalent to calling the <code>setProperty</code> method of 
            the <code>CSSStyleDeclaration</code> interface. 
            <br/> A conformant implementation of the CSS module is not required to 
            implement the <code>CSS2Properties</code> interface. If an implementation 
            does implement this interface, the expectation is that language-specific 
            methods can be used to cast from an instance of the 
            <code>CSSStyleDeclaration</code> interface to the 
            <code>CSS2Properties</code> interface. 
            <br/> If an implementation does implement this interface, it is expected to 
            understand the specific syntax of the shorthand properties, and apply 
            their semantics; when the <code>margin</code> property is set, for 
            example, the <code>marginTop</code>, <code>marginRight</code>, 
            <code>marginBottom</code> and <code>marginLeft</code> properties are 
            actually being set by the underlying implementation. 
            <br/> When dealing with CSS "shorthand" properties, the shorthand properties 
            should be decomposed into their component longhand properties as 
            appropriate, and when querying for their value, the form returned should 
            be the shortest form exactly equivalent to the declarations made in the 
            ruleset. However, if there is no shorthand declaration that could be 
            added to the ruleset without changing in any way the rules already 
            declared in the ruleset (i.e., by adding longhand rules that were 
            previously not declared in the ruleset), then the empty string should be 
            returned for the shorthand property. 
            <br/> For example, querying for the <code>font</code> property should not 
            return "normal normal normal 14pt/normal Arial, sans-serif", when "14pt 
            Arial, sans-serif" suffices. (The normals are initial values, and are 
            implied by use of the longhand property.) 
            <br/> If the values for all the longhand properties that compose a particular 
            string are the initial values, then a string consisting of all the 
            initial values should be returned (e.g. a <code>border-width</code> value 
            of "medium" should be returned as such, not as ""). 
            <br/> For some shorthand properties that take missing values from other 
            sides, such as the <code>margin</code>, <code>padding</code>, and 
            <code>border-[width|style|color]</code> properties, the minimum number of 
            sides possible should be used; i.e., "0px 10px" will be returned instead 
            of "0px 10px 0px 10px". 
            <br/> If the value of a shorthand property can not be decomposed into its 
            component longhand properties, as is the case for the <code>font</code> 
            property with a value of "menu", querying for the values of the component 
            longhand properties should return the empty string. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.azimuth">
            <summary>
             See the azimuth property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.background">
            <summary>
             See the background property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.backgroundAttachment">
            <summary>
             See the background-attachment property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.backgroundColor">
            <summary>
             See the background-color property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.backgroundImage">
            <summary>
             See the background-image property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.backgroundPosition">
            <summary>
             See the background-position property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.backgroundRepeat">
            <summary>
             See the background-repeat property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.border">
            <summary>
             See the border property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderCollapse">
            <summary>
             See the border-collapse property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderColor">
            <summary>
             See the border-color property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderSpacing">
            <summary>
             See the border-spacing property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderStyle">
            <summary>
             See the border-style property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderTop">
            <summary>
             See the border-top property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderRight">
            <summary>
             See the border-right property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderBottom">
            <summary>
             See the border-bottom property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderLeft">
            <summary>
             See the border-left property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderTopColor">
            <summary>
             See the border-top-color property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderRightColor">
            <summary>
             See the border-right-color property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderBottomColor">
            <summary>
             See the border-bottom-color property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderLeftColor">
            <summary>
             See the border-left-color property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderTopStyle">
            <summary>
             See the border-top-style property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderRightStyle">
            <summary>
             See the border-right-style property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderBottomStyle">
            <summary>
             See the border-bottom-style property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderLeftStyle">
            <summary>
             See the border-left-style property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderTopWidth">
            <summary>
             See the border-top-width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderRightWidth">
            <summary>
             See the border-right-width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderBottomWidth">
            <summary>
             See the border-bottom-width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderLeftWidth">
            <summary>
             See the border-left-width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.borderWidth">
            <summary>
             See the border-width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.bottom">
            <summary>
             See the bottom property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.captionSide">
            <summary>
             See the caption-side property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.clear">
            <summary>
             See the clear property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.clip">
            <summary>
             See the clip property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.color">
            <summary>
             See the color property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.content">
            <summary>
             See the content property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.counterIncrement">
            <summary>
             See the counter-increment property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.counterReset">
            <summary>
             See the counter-reset property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.cue">
            <summary>
             See the cue property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.cueAfter">
            <summary>
             See the cue-after property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.cueBefore">
            <summary>
             See the cue-before property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.cursor">
            <summary>
             See the cursor property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.direction">
            <summary>
             See the direction property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.display">
            <summary>
             See the display property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.elevation">
            <summary>
             See the elevation property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.emptyCells">
            <summary>
             See the empty-cells property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.cssFloat">
            <summary>
             See the float property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.font">
            <summary>
             See the font property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.fontFamily">
            <summary>
             See the font-family property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.fontSize">
            <summary>
             See the font-size property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.fontSizeAdjust">
            <summary>
             See the font-size-adjust property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.fontStretch">
            <summary>
             See the font-stretch property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.fontStyle">
            <summary>
             See the font-style property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.fontVariant">
            <summary>
             See the font-variant property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.fontWeight">
            <summary>
             See the font-weight property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.height">
            <summary>
             See the height property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.left">
            <summary>
             See the left property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.letterSpacing">
            <summary>
             See the letter-spacing property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.lineHeight">
            <summary>
             See the line-height property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.listStyle">
            <summary>
             See the list-style property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.listStyleImage">
            <summary>
             See the list-style-image property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.listStylePosition">
            <summary>
             See the list-style-position property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.listStyleType">
            <summary>
             See the list-style-type property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.margin">
            <summary>
             See the margin property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.marginTop">
            <summary>
             See the margin-top property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.marginRight">
            <summary>
             See the margin-right property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.marginBottom">
            <summary>
             See the margin-bottom property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.marginLeft">
            <summary>
             See the margin-left property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.markerOffset">
            <summary>
             See the marker-offset property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.marks">
            <summary>
             See the marks property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.maxHeight">
            <summary>
             See the max-height property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.maxWidth">
            <summary>
             See the max-width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.minHeight">
            <summary>
             See the min-height property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.minWidth">
            <summary>
             See the min-width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.orphans">
            <summary>
             See the orphans property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.outline">
            <summary>
             See the outline property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.outlineColor">
            <summary>
             See the outline-color property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.outlineStyle">
            <summary>
             See the outline-style property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.outlineWidth">
            <summary>
             See the outline-width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.overflow">
            <summary>
             See the overflow property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.padding">
            <summary>
             See the padding property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.paddingTop">
            <summary>
             See the padding-top property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.paddingRight">
            <summary>
             See the padding-right property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.paddingBottom">
            <summary>
             See the padding-bottom property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.paddingLeft">
            <summary>
             See the padding-left property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.page">
            <summary>
             See the page property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.pageBreakAfter">
            <summary>
             See the page-break-after property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.pageBreakBefore">
            <summary>
             See the page-break-before property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.pageBreakInside">
            <summary>
             See the page-break-inside property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.pause">
            <summary>
             See the pause property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.pauseAfter">
            <summary>
             See the pause-after property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.pauseBefore">
            <summary>
             See the pause-before property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.pitch">
            <summary>
             See the pitch property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.pitchRange">
            <summary>
             See the pitch-range property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.playDuring">
            <summary>
             See the play-during property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.position">
            <summary>
             See the position property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.quotes">
            <summary>
             See the quotes property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.richness">
            <summary>
             See the richness property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.right">
            <summary>
             See the right property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.size">
            <summary>
             See the size property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.speak">
            <summary>
             See the speak property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.speakHeader">
            <summary>
             See the speak-header property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.speakNumeral">
            <summary>
             See the speak-numeral property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.speakPunctuation">
            <summary>
             See the speak-punctuation property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.speechRate">
            <summary>
             See the speech-rate property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.stress">
            <summary>
             See the stress property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.tableLayout">
            <summary>
             See the table-layout property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.textAlign">
            <summary>
             See the text-align property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.textDecoration">
            <summary>
             See the text-decoration property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.textIndent">
            <summary>
             See the text-indent property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.textShadow">
            <summary>
             See the text-shadow property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.textTransform">
            <summary>
             See the text-transform property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.top">
            <summary>
             See the top property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.unicodeBidi">
            <summary>
             See the unicode-bidi property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.verticalAlign">
            <summary>
             See the vertical-align property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.visibility">
            <summary>
             See the visibility property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.voiceFamily">
            <summary>
             See the voice-family property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.volume">
            <summary>
             See the volume property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.whiteSpace">
            <summary>
             See the white-space property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.widows">
            <summary>
             See the widows property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.width">
            <summary>
             See the width property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.wordSpacing">
            <summary>
             See the word-spacing property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSS2Properties.zIndex">
            <summary>
             See the z-index property definition in CSS2. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the new value has a syntax error and is 
              unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly. </exception>
        </member>
        <member name="T:SharpKit.Html.DocumentType">
            <summary>
            Each <code>Document</code> has a <code>doctype</code> attribute whose value 
            is either <code>null</code> or a <code>DocumentType</code> object. The 
            <code>DocumentType</code> interface in the DOM Core provides an interface 
            to the list of entities that are defined for the document, and little 
            else because the effect of namespaces and the various XML schema efforts 
            on DTD representation are not clearly understood as of this writing.
            <br/>The DOM Level 2 doesn't support editing <code>DocumentType</code> nodes.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.DocumentType.name">
            <summary>
            The name of DTD; i.e., the name immediately following the 
            <code>DOCTYPE</code> keyword.
            </summary>
        </member>
        <member name="P:SharpKit.Html.DocumentType.entities">
            <summary>
            A <code>NamedNodeMap</code> containing the general entities, both 
            external and internal, declared in the DTD. Parameter entities are 
            not contained. Duplicates are discarded. For example in: 
            <pre>&lt;!DOCTYPE 
            ex SYSTEM "ex.dtd" [ &lt;!ENTITY foo "foo"&gt; &lt;!ENTITY bar 
            "bar"&gt; &lt;!ENTITY bar "bar2"&gt; &lt;!ENTITY % baz "baz"&gt; 
            ]&gt; &lt;ex/&gt;</pre>
             the interface provides access to <code>foo</code> 
            and the first declaration of <code>bar</code> but not the second 
            declaration of <code>bar</code> or <code>baz</code>. Every node in 
            this map also implements the <code>Entity</code> interface.
            <br/>The DOM Level 2 does not support editing entities, therefore 
            <code>entities</code> cannot be altered in any way.
            </summary>
        </member>
        <member name="P:SharpKit.Html.DocumentType.notations">
            <summary>
            A <code>NamedNodeMap</code> containing the notations declared in the 
            DTD. Duplicates are discarded. Every node in this map also implements 
            the <code>Notation</code> interface.
            <br/>The DOM Level 2 does not support editing notations, therefore 
            <code>notations</code> cannot be altered in any way.
            </summary>
        </member>
        <member name="P:SharpKit.Html.DocumentType.publicId">
            <summary>
            The public identifier of the external subset.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.DocumentType.systemId">
            <summary>
            The system identifier of the external subset.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.DocumentType.internalSubset">
            <summary>
            The internal subset as a string.The actual content returned depends on 
            how much information is available to the implementation. This may 
            vary depending on various parameters, including the XML processor 
            used to build the document.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.RGBColor">
            <summary>
             The <code>RGBColor</code> interface is used to represent any RGB color 
            value. This interface reflects the values in the underlying style 
            property. Hence, modifications made to the <code>CSSPrimitiveValue</code> 
            objects modify the style property. 
            <br/> A specified RGB color is not clipped (even if the number is outside the 
            range 0-255 or 0%-100%). A computed RGB color is clipped depending on the 
            device. 
            <br/> Even if a style sheet can only contain an integer for a color value, 
            the internal storage of this integer is a float, and this can be used as 
            a float in the specified or the computed style. 
            <br/> A color percentage value can always be converted to a number and vice 
            versa. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.RGBColor.red">
            <summary>
             This attribute is used for the red value of the RGB color. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.RGBColor.green">
            <summary>
             This attribute is used for the green value of the RGB color. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.RGBColor.blue">
            <summary>
             This attribute is used for the blue value of the RGB color. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.Text">
            <summary>
            The <code>Text</code> interface inherits from <code>CharacterData</code> 
            and represents the textual content (termed character data in XML) of an 
            <code>Element</code> or <code>Attr</code>. If there is no markup inside 
            an element's content, the text is contained in a single object 
            implementing the <code>Text</code> interface that is the only child of 
            the element. If there is markup, it is parsed into the information items 
            (elements, comments, etc.) and <code>Text</code> nodes that form the list 
            of children of the element.
            <br/>When a document is first made available via the DOM, there is only one 
            <code>Text</code> node for each block of text. Users may create adjacent 
            <code>Text</code> nodes that represent the contents of a given element 
            without any intervening markup, but should be aware that there is no way 
            to represent the separations between these nodes in XML or HTML, so they 
            will not (in general) persist between DOM editing sessions. The 
            <code>normalize()</code> method on <code>Node</code> merges any such 
            adjacent <code>Text</code> objects into a single node for each block of 
            text.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="M:SharpKit.Html.Text.splitText(System.Int32)">
            <summary>
            Breaks this node into two nodes at the specified <code>offset</code>, 
            keeping both in the tree as siblings. After being split, this node 
            will contain all the content up to the <code>offset</code> point. A 
            new node of the same type, which contains all the content at and 
            after the <code>offset</code> point, is returned. If the original 
            node had a parent node, the new node is inserted as the next sibling 
            of the original node. When the <code>offset</code> is equal to the 
            length of this node, the new node has no data. </summary>
            <param name="offsetThe"> 16-bit unit offset at which to split, starting from 
              <code>0</code>. </param>
            <returns> The new node, of the same type as this node. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INDEX_SIZE_ERR: Raised if the specified offset is negative or greater 
              than the number of 16-bit units in <code>data</code>.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. </exception>
        </member>
        <member name="T:SharpKit.Html.StyleSheetList">
            <summary>
            The <code>StyleSheetList</code> interface provides the abstraction of an 
            ordered collection of style sheets. 
            <br/> The items in the <code>StyleSheetList</code> are accessible via an 
            integral index, starting from 0. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.StyleSheetList.item(System.Int32)">
            <summary>
             Used to retrieve a style sheet by ordinal index. If index is greater 
            than or equal to the number of style sheets in the list, this returns 
            <code>null</code>. </summary>
            <param name="indexIndex"> into the collection </param>
            <returns> The style sheet at the <code>index</code> position in the 
              <code>StyleSheetList</code>, or <code>null</code> if that is not a 
              valid index.  </returns>
        </member>
        <member name="P:SharpKit.Html.StyleSheetList.length">
            <summary>
             The number of <code>StyleSheets</code> in the list. The range of valid 
            child stylesheet indices is <code>0</code> to <code>length-1</code> 
            inclusive. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.TimeEvent">
            <summary>
            The <code>TimeEvent</code> interface provides specific contextual
            information associated with Time events.
            </summary>
            <seealso cref="!:http://www.w3.org/TR/2000/WD-smil-animation-20000731/">SMIL Animation</seealso>
        </member>
        <member name="M:SharpKit.Html.TimeEvent.initTimeEvent(System.String,SharpKit.Html.AbstractView,System.Int32)">
            <summary>
            The <code>initTimeEvent</code> method is used to initialize the value of
            a <code>TimeEvent</code> created through the <code>DocumentEvent</code>
            interface. This method may only be called before the
            <code>TimeEvent</code> has been dispatched via the
            <code>dispatchEvent</code> method, though it may be called multiple
            times during that phase if necessary. If called multiple times, the
            final invocation takes precedence.
            
            <p>The different types of events that can occur are:</p>
            
            <dl>
            <dt><b>begin</b></dt>
            <dd>This event is raised when the element local timeline begins to play.
            It will be raised each time the element begins the active duration (i.e.
            when it restarts, but not when it repeats). It may be raised both in the
            course of normal (i.e. scheduled or interactive) timeline play, as well
            as in the case that the element was begun with the <code>
            beginElement()</code> or <code> beginElementAt()</code> methods. Note
            that if an element is restarted while it is currently playing, the
            element will raise an end event and another begin event, as the element
            restarts.
            <ul>
            <li>Bubbles: No</li>
            <li>Cancelable: No</li>
            <li>Context Info: None</li>
            </ul>
            </dd>
            <dt><b>end</b></dt>
            <dd>This event is raised at the active end of the element. Note that
            this event is not raised at the simple end of each repeat. This event
            may be raised both in the course of normal (i.e. scheduled or
            interactive) timeline play, as well as in the case that the element was
            ended with the <code> endElement()</code> or <code>
            endElementAt()</code> methods.  Note that if an element is restarted
            while it is currently playing, the element will raise an end event and
            another begin event, as the element restarts.
            <ul>
            <li>Bubbles: No</li>
            <li>Cancelable: No</li>
            <li>Context Info: None</li>
            </ul>
            </dd>
            <dt><b>repeat</b></dt>
            <dd>This event is raised when the element local timeline repeats. It
            will be raised each time the element repeats, after the first
            iteration.<br/> The event provides a numerical indication of which repeat
            iteration is beginning. The value is a 0-based integer, but the repeat
            event is not raised for the first iteration and so the observed values
            of the detail attribute will be &gt;= 1.
            <ul>
            <li>Bubbles: No</li>
            <li>Cancelable: No</li>
            <li>Context Info: detail (current iteration)</li>
            </ul>
            </dd>
            </dl>
            </summary>
            <param name="typeArg"> Specifies the event type. </param>
            <param name="viewArg"> Specifies the <code>Event</code>'s
                           <code>AbstractView</code>. </param>
        </member>
        <member name="P:SharpKit.Html.TimeEvent.view">
            <summary>
            The <code>view</code> attribute identifies the <code>AbstractView</code>
            from which the event was generated.
            </summary>
        </member>
        <member name="P:SharpKit.Html.TimeEvent.detail">
            <summary>
            Specifies some detail information about the <code>Event</code>,
            depending on the type of event.
            </summary>
        </member>
        <member name="T:SharpKit.Html.DocumentTraversal">
            <summary>
            <code>DocumentTraversal</code> contains methods that create iterators and 
            tree-walkers to traverse a node and its children in document order (depth 
            first, pre-order traversal, which is equivalent to the order in which the 
            start tags occur in the text representation of the document). In DOMs 
            which support the Traversal feature, <code>DocumentTraversal</code> will 
            be implemented by the same objects that implement the Document interface.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.DocumentTraversal.createNodeIterator(SharpKit.Html.Node,System.Int32,SharpKit.Html.NodeFilter,System.Boolean)">
            <summary>
            Create a new <code>NodeIterator</code> over the subtree rooted at the 
            specified node. </summary>
            <param name="rootThe"> node which will be iterated together with its children. 
              The iterator is initially positioned just before this node. The 
              <code>whatToShow</code> flags and the filter, if any, are not 
              considered when setting this position. The root must not be 
              <code>null</code>. </param>
            <param name="whatToShowThis"> flag specifies which node types may appear in 
              the logical view of the tree presented by the iterator. See the 
              description of <code>NodeFilter</code> for the set of possible 
              <code>SHOW_</code> values.These flags can be combined using 
              <code>OR</code>. </param>
            <param name="filterThe"> <code>NodeFilter</code> to be used with this 
              <code>TreeWalker</code>, or <code>null</code> to indicate no filter. </param>
            <param name="entityReferenceExpansionThe"> value of this flag determines 
              whether entity reference nodes are expanded. </param>
            <returns> The newly created <code>NodeIterator</code>. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NOT_SUPPORTED_ERR: Raised if the specified <code>root</code> is 
              <code>null</code>. </exception>
        </member>
        <member name="M:SharpKit.Html.DocumentTraversal.createTreeWalker(SharpKit.Html.Node,System.Int32,SharpKit.Html.NodeFilter,System.Boolean)">
            <summary>
            Create a new <code>TreeWalker</code> over the subtree rooted at the 
            specified node. </summary>
            <param name="rootThe"> node which will serve as the <code>root</code> for the 
              <code>TreeWalker</code>. The <code>whatToShow</code> flags and the 
              <code>NodeFilter</code> are not considered when setting this value; 
              any node type will be accepted as the <code>root</code>. The 
              <code>currentNode</code> of the <code>TreeWalker</code> is 
              initialized to this node, whether or not it is visible. The 
              <code>root</code> functions as a stopping point for traversal 
              methods that look upward in the document structure, such as 
              <code>parentNode</code> and nextNode. The <code>root</code> must 
              not be <code>null</code>. </param>
            <param name="whatToShowThis"> flag specifies which node types may appear in 
              the logical view of the tree presented by the tree-walker. See the 
              description of <code>NodeFilter</code> for the set of possible 
              SHOW_ values.These flags can be combined using <code>OR</code>. </param>
            <param name="filterThe"> <code>NodeFilter</code> to be used with this 
              <code>TreeWalker</code>, or <code>null</code> to indicate no filter. </param>
            <param name="entityReferenceExpansionIf"> this flag is false, the contents of 
              <code>EntityReference</code> nodes are not presented in the logical 
              view. </param>
            <returns> The newly created <code>TreeWalker</code>. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
               NOT_SUPPORTED_ERR: Raised if the specified <code>root</code> is 
              <code>null</code>. </exception>
        </member>
        <member name="T:SharpKit.Html.ElementCSSInlineStyle">
            <summary>
             Inline style information attached to elements is exposed through the 
            <code>style</code> attribute. This represents the contents of the STYLE 
            attribute for HTML elements (or elements in other schemas or DTDs which 
            use the STYLE attribute in the same way). The expectation is that an 
            instance of the ElementCSSInlineStyle interface can be obtained by using 
            binding-specific casting methods on an instance of the Element interface 
            when the element supports inline CSS style informations. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.ElementCSSInlineStyle.style">
            <summary>
             The style attribute. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.NodeFilter">
            <summary>
            Filters are objects that know how to "filter out" nodes. If a 
            <code>NodeIterator</code> or <code>TreeWalker</code> is given a 
            <code>NodeFilter</code>, it applies the filter before it returns the next 
            node. If the filter says to accept the node, the traversal logic returns 
            it; otherwise, traversal looks for the next node and pretends that the 
            node that was rejected was not there.
            <br/>The DOM does not provide any filters. <code>NodeFilter</code> is just an 
            interface that users can implement to provide their own filters. 
            <br/><code>NodeFilters</code> do not need to know how to traverse from node 
            to node, nor do they need to know anything about the data structure that 
            is being traversed. This makes it very easy to write filters, since the 
            only thing they have to know how to do is evaluate a single node. One 
            filter may be used with a number of different kinds of traversals, 
            encouraging code reuse.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.NodeFilter.acceptNode(SharpKit.Html.Node)">
            <summary>
            Test whether a specified node is visible in the logical view of a 
            <code>TreeWalker</code> or <code>NodeIterator</code>. This function 
            will be called by the implementation of <code>TreeWalker</code> and 
            <code>NodeIterator</code>; it is not normally called directly from 
            user code. (Though you could do so if you wanted to use the same 
            filter to guide your own application logic.) </summary>
            <param name="nThe"> node to check to see if it passes the filter or not. </param>
            <returns> a constant to determine whether the node is accepted, 
              rejected, or skipped, as defined above. </returns>
        </member>
        <member name="T:SharpKit.Html.LinkStyle">
            <summary>
             The <code>LinkStyle</code> interface provides a mechanism by which a style 
            sheet can be retrieved from the node responsible for linking it into a 
            document. An instance of the <code>LinkStyle</code> interface can be 
            obtained using binding-specific casting methods on an instance of a 
            linking node (<code>HTMLLinkElement</code>, <code>HTMLStyleElement</code> 
            or <code>ProcessingInstruction</code> in DOM Level 2). 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.LinkStyle.sheet">
            <summary>
             The style sheet. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.CDATASection">
            <summary>
            CDATA sections are used to escape blocks of text containing characters that 
            would otherwise be regarded as markup. The only delimiter that is 
            recognized in a CDATA section is the "]]&gt;" string that ends the CDATA 
            section. CDATA sections cannot be nested. Their primary purpose is for 
            including material such as XML fragments, without needing to escape all 
            the delimiters.
            <br/>The <code>DOMString</code> attribute of the <code>Text</code> node holds 
            the text that is contained by the CDATA section. Note that this may 
            contain characters that need to be escaped outside of CDATA sections and 
            that, depending on the character encoding ("charset") chosen for 
            serialization, it may be impossible to write out some characters as part 
            of a CDATA section. 
            <br/> The <code>CDATASection</code> interface inherits from the 
            <code>CharacterData</code> interface through the <code>Text</code> 
            interface. Adjacent <code>CDATASection</code> nodes are not merged by use 
            of the <code>normalize</code> method of the <code>Node</code> interface.
            Because no markup is recognized within a <code>CDATASection</code>, 
            character numeric references cannot be used as an escape mechanism when 
            serializing. Therefore, action needs to be taken when serializing a 
            <code>CDATASection</code> with a character encoding where some of the 
            contained characters cannot be represented. Failure to do so would not 
            produce well-formed XML.One potential solution in the serialization 
            process is to end the CDATA section before the character, output the 
            character using a character reference or entity reference, and open a new 
            CDATA section for any further characters in the text node. Note, however, 
            that some code conversion libraries at the time of writing do not return 
            an error or exception when a character is missing from the encoding, 
            making the task of ensuring that data is not corrupted on serialization 
            more difficult.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="T:SharpKit.Html.NodeIterator">
            <summary>
            <code>Iterators</code> are used to step through a set of nodes, e.g. the 
            set of nodes in a <code>NodeList</code>, the document subtree governed by 
            a particular <code>Node</code>, the results of a query, or any other set 
            of nodes. The set of nodes to be iterated is determined by the 
            implementation of the <code>NodeIterator</code>. DOM Level 2 specifies a 
            single <code>NodeIterator</code> implementation for document-order 
            traversal of a document subtree. Instances of these iterators are created 
            by calling <code>DocumentTraversal</code>
            <code>.createNodeIterator()</code>.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.NodeIterator.nextNode">
            <summary>
            Returns the next node in the set and advances the position of the 
            iterator in the set. After a <code>NodeIterator</code> is created, 
            the first call to <code>nextNode()</code> returns the first node in 
            the set. </summary>
            <returns> The next <code>Node</code> in the set being iterated over, or 
              <code>null</code> if there are no more members in that set. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if this method is called after the 
              <code>detach</code> method was invoked. </exception>
        </member>
        <member name="M:SharpKit.Html.NodeIterator.previousNode">
            <summary>
            Returns the previous node in the set and moves the position of the 
            <code>NodeIterator</code> backwards in the set. </summary>
            <returns> The previous <code>Node</code> in the set being iterated over, 
              or <code>null</code> if there are no more members in that set. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              INVALID_STATE_ERR: Raised if this method is called after the 
              <code>detach</code> method was invoked. </exception>
        </member>
        <member name="M:SharpKit.Html.NodeIterator.detach">
            <summary>
            Detaches the <code>NodeIterator</code> from the set which it iterated 
            over, releasing any computational resources and placing the iterator 
            in the INVALID state. After <code>detach</code> has been invoked, 
            calls to <code>nextNode</code> or <code>previousNode</code> will 
            raise the exception INVALID_STATE_ERR.
            </summary>
        </member>
        <member name="P:SharpKit.Html.NodeIterator.root">
            <summary>
            The root node of the <code>NodeIterator</code>, as specified when it 
            was created.
            </summary>
        </member>
        <member name="P:SharpKit.Html.NodeIterator.whatToShow">
            <summary>
            This attribute determines which node types are presented via the 
            iterator. The available set of constants is defined in the 
            <code>NodeFilter</code> interface.  Nodes not accepted by 
            <code>whatToShow</code> will be skipped, but their children may still 
            be considered. Note that this skip takes precedence over the filter, 
            if any. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.NodeIterator.filter">
            <summary>
            The <code>NodeFilter</code> used to screen nodes.
            </summary>
        </member>
        <member name="P:SharpKit.Html.NodeIterator.expandEntityReferences">
            <summary>
             The value of this flag determines whether the children of entity 
            reference nodes are visible to the iterator. If false, they  and 
            their descendants will be rejected. Note that this rejection takes 
            precedence over <code>whatToShow</code> and the filter. Also note 
            that this is currently the only situation where 
            <code>NodeIterators</code> may reject a complete subtree rather than 
            skipping individual nodes. 
            <br/>
            <br/> To produce a view of the document that has entity references 
            expanded and does not expose the entity reference node itself, use 
            the <code>whatToShow</code> flags to hide the entity reference node 
            and set <code>expandEntityReferences</code> to true when creating the 
            iterator. To produce a view of the document that has entity reference 
            nodes but no entity expansion, use the <code>whatToShow</code> flags 
            to show the entity reference node and set 
            <code>expandEntityReferences</code> to false.
            </summary>
        </member>
        <member name="T:SharpKit.Html.DocumentEvent">
            <summary>
             The <code>DocumentEvent</code> interface provides a mechanism by which the 
            user can create an Event of a type supported by the implementation. It is 
            expected that the <code>DocumentEvent</code> interface will be 
            implemented on the same object which implements the <code>Document</code> 
            interface in an implementation which supports the Event model. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.DocumentEvent.createEvent(System.String)">
            
            <param name="eventTypeThe"> <code>eventType</code> parameter specifies the 
              type of <code>Event</code> interface to be created. If the 
              <code>Event</code> interface specified is supported by the 
              implementation this method will return a new <code>Event</code> of 
              the interface type requested. If the <code>Event</code> is to be 
              dispatched via the <code>dispatchEvent</code> method the 
              appropriate event init method must be called after creation in 
              order to initialize the <code>Event</code>'s values. As an example, 
              a user wishing to synthesize some kind of <code>UIEvent</code> 
              would call <code>createEvent</code> with the parameter "UIEvents". 
              The <code>initUIEvent</code> method could then be called on the 
              newly created <code>UIEvent</code> to set the specific type of 
              UIEvent to be dispatched and set its context information.The 
              <code>createEvent</code> method is used in creating 
              <code>Event</code>s when it is either inconvenient or unnecessary 
              for the user to create an <code>Event</code> themselves. In cases 
              where the implementation provided <code>Event</code> is 
              insufficient, users may supply their own <code>Event</code> 
              implementations for use with the <code>dispatchEvent</code> method. </param>
            <returns> The newly created <code>Event</code> </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NOT_SUPPORTED_ERR: Raised if the implementation does not support the 
              type of <code>Event</code> interface requested </exception>
        </member>
        <member name="T:SharpKit.Html.CSSStyleRule">
            <summary>
             The <code>CSSStyleRule</code> interface represents a single rule set in a 
            CSS style sheet. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSStyleRule.selectorText">
            <summary>
             The textual representation of the selector for the rule set. The 
            implementation may have stripped out insignificant whitespace while 
            parsing the selector. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the specified CSS string value has a syntax 
              error and is unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSSStyleRule.style">
            <summary>
             The declaration-block of this rule set. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.RangeException">
            <summary>
            Range operations may throw a <code>RangeException</code> as specified in 
            their method descriptions.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="F:SharpKit.Html.RangeException.BAD_BOUNDARYPOINTS_ERR">
            <summary>
            If the boundary-points of a Range do not meet specific requirements.
            </summary>
        </member>
        <member name="F:SharpKit.Html.RangeException.INVALID_NODE_TYPE_ERR">
            <summary>
            If the container of an boundary-point of a Range is being set to either 
            a node of an invalid type or a node with an ancestor of an invalid 
            type.
            </summary>
        </member>
        <member name="T:SharpKit.Html.NamedNodeMap">
            <summary>
            Objects implementing the <code>NamedNodeMap</code> interface are used to 
            represent collections of nodes that can be accessed by name. Note that 
            <code>NamedNodeMap</code> does not inherit from <code>NodeList</code>; 
            <code>NamedNodeMaps</code> are not maintained in any particular order. 
            Objects contained in an object implementing <code>NamedNodeMap</code> may 
            also be accessed by an ordinal index, but this is simply to allow 
            convenient enumeration of the contents of a <code>NamedNodeMap</code>, 
            and does not imply that the DOM specifies an order to these Nodes. 
            <br/><code>NamedNodeMap</code> objects in the DOM are live.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="M:SharpKit.Html.NamedNodeMap.getNamedItem(System.String)">
            <summary>
            Retrieves a node specified by name. </summary>
            <param name="nameThe"> <code>nodeName</code> of a node to retrieve. </param>
            <returns> A <code>Node</code> (of any type) with the specified 
              <code>nodeName</code>, or <code>null</code> if it does not identify 
              any node in this map. </returns>
        </member>
        <member name="M:SharpKit.Html.NamedNodeMap.setNamedItem(SharpKit.Html.Node)">
            <summary>
            Adds a node using its <code>nodeName</code> attribute. If a node with 
            that name is already present in this map, it is replaced by the new 
            one.
            <br/>As the <code>nodeName</code> attribute is used to derive the name 
            which the node must be stored under, multiple nodes of certain types 
            (those that have a "special" string value) cannot be stored as the 
            names would clash. This is seen as preferable to allowing nodes to be 
            aliased. </summary>
            <param name="argA"> node to store in this map. The node will later be 
              accessible using the value of its <code>nodeName</code> attribute. </param>
            <returns> If the new <code>Node</code> replaces an existing node the 
              replaced <code>Node</code> is returned, otherwise <code>null</code> 
              is returned. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a 
              different document than the one that created this map.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
              <br/>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an 
              <code>Attr</code> that is already an attribute of another 
              <code>Element</code> object. The DOM user must explicitly clone 
              <code>Attr</code> nodes to re-use them in other elements. </exception>
        </member>
        <member name="M:SharpKit.Html.NamedNodeMap.removeNamedItem(System.String)">
            <summary>
            Removes a node specified by name. When this map contains the attributes 
            attached to an element, if the removed attribute is known to have a 
            default value, an attribute immediately appears containing the 
            default value as well as the corresponding namespace URI, local name, 
            and prefix when applicable. </summary>
            <param name="nameThe"> <code>nodeName</code> of the node to remove. </param>
            <returns> The node removed from this map if a node with such a name 
              exists. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NOT_FOUND_ERR: Raised if there is no node named <code>name</code> in 
              this map.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly. </exception>
        </member>
        <member name="M:SharpKit.Html.NamedNodeMap.item(System.Int32)">
            <summary>
            Returns the <code>index</code>th item in the map. If <code>index</code> 
            is greater than or equal to the number of nodes in this map, this 
            returns <code>null</code>. </summary>
            <param name="indexIndex"> into this map. </param>
            <returns> The node at the <code>index</code>th position in the map, or 
              <code>null</code> if that is not a valid index. </returns>
        </member>
        <member name="M:SharpKit.Html.NamedNodeMap.getNamedItemNS(System.String,System.String)">
            <summary>
            Retrieves a node specified by local name and namespace URI. HTML-only 
            DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the node to retrieve. </param>
            <param name="localNameThe"> local name of the node to retrieve. </param>
            <returns> A <code>Node</code> (of any type) with the specified local 
              name and namespace URI, or <code>null</code> if they do not 
              identify any node in this map.
            @since DOM Level 2 </returns>
        </member>
        <member name="M:SharpKit.Html.NamedNodeMap.setNamedItemNS(SharpKit.Html.Node)">
            <summary>
            Adds a node using its <code>namespaceURI</code> and 
            <code>localName</code>. If a node with that namespace URI and that 
            local name is already present in this map, it is replaced by the new 
            one.
            <br/>HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="argA"> node to store in this map. The node will later be 
              accessible using the value of its <code>namespaceURI</code> and 
              <code>localName</code> attributes. </param>
            <returns> If the new <code>Node</code> replaces an existing node the 
              replaced <code>Node</code> is returned, otherwise <code>null</code> 
              is returned. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a 
              different document than the one that created this map.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
              <br/>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an 
              <code>Attr</code> that is already an attribute of another 
              <code>Element</code> object. The DOM user must explicitly clone 
              <code>Attr</code> nodes to re-use them in other elements.
            @since DOM Level 2 </exception>
        </member>
        <member name="M:SharpKit.Html.NamedNodeMap.removeNamedItemNS(System.String,System.String)">
            <summary>
            Removes a node specified by local name and namespace URI. A removed 
            attribute may be known to have a default value when this map contains 
            the attributes attached to an element, as returned by the attributes 
            attribute of the <code>Node</code> interface. If so, an attribute 
            immediately appears containing the default value as well as the 
            corresponding namespace URI, local name, and prefix when applicable.
            <br/>HTML-only DOM implementations do not need to implement this method. </summary>
            <param name="namespaceURIThe"> namespace URI of the node to remove. </param>
            <param name="localNameThe"> local name of the node to remove. </param>
            <returns> The node removed from this map if a node with such a local 
              name and namespace URI exists. </returns>
            <exception cref="T:SharpKit.Html.DOMException">
              NOT_FOUND_ERR: Raised if there is no node with the specified 
              <code>namespaceURI</code> and <code>localName</code> in this map.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
            @since DOM Level 2 </exception>
        </member>
        <member name="P:SharpKit.Html.NamedNodeMap.length">
            <summary>
            The number of nodes in this map. The range of valid child node indices 
            is <code>0</code> to <code>length-1</code> inclusive. 
            </summary>
        </member>
        <member name="T:SharpKit.Html.EventTarget">
            <summary>
             The <code>EventTarget</code> interface is implemented by all 
            <code>Nodes</code> in an implementation which supports the DOM Event 
            Model. Therefore, this interface can be obtained by using 
            binding-specific casting methods on an instance of the <code>Node</code> 
            interface. The interface allows registration and removal of 
            <code>EventListeners</code> on an <code>EventTarget</code> and dispatch 
            of events to that <code>EventTarget</code>.
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="M:SharpKit.Html.EventTarget.addEventListener(System.String,SharpKit.Html.EventListener,System.Boolean)">
            <summary>
            This method allows the registration of event listeners on the event 
            target. If an <code>EventListener</code> is added to an 
            <code>EventTarget</code> while it is processing an event, it will not 
            be triggered by the current actions but may be triggered during a 
            later stage of event flow, such as the bubbling phase. 
            <br/> If multiple identical <code>EventListener</code>s are registered 
            on the same <code>EventTarget</code> with the same parameters the 
            duplicate instances are discarded. They do not cause the 
            <code>EventListener</code> to be called twice and since they are 
            discarded they do not need to be removed with the 
            <code>removeEventListener</code> method. </summary>
            <param name="typeThe"> event type for which the user is registering </param>
            <param name="listenerThe"> <code>listener</code> parameter takes an interface 
              implemented by the user which contains the methods to be called 
              when the event occurs. </param>
            <param name="useCaptureIf"> true, <code>useCapture</code> indicates that the 
              user wishes to initiate capture. After initiating capture, all 
              events of the specified type will be dispatched to the registered 
              <code>EventListener</code> before being dispatched to any 
              <code>EventTargets</code> beneath them in the tree. Events which 
              are bubbling upward through the tree will not trigger an 
              <code>EventListener</code> designated to use capture. </param>
        </member>
        <member name="M:SharpKit.Html.EventTarget.removeEventListener(System.String,SharpKit.Html.EventListener,System.Boolean)">
            <summary>
            This method allows the removal of event listeners from the event 
            target. If an <code>EventListener</code> is removed from an 
            <code>EventTarget</code> while it is processing an event, it will not 
            be triggered by the current actions. <code>EventListener</code>s can 
            never be invoked after being removed.
            <br/>Calling <code>removeEventListener</code> with arguments which do 
            not identify any currently registered <code>EventListener</code> on 
            the <code>EventTarget</code> has no effect. </summary>
            <param name="typeSpecifies"> the event type of the <code>EventListener</code> 
              being removed. </param>
            <param name="listenerThe"> <code>EventListener</code> parameter indicates the 
              <code>EventListener </code> to be removed. </param>
            <param name="useCaptureSpecifies"> whether the <code>EventListener</code> 
              being removed was registered as a capturing listener or not. If a 
              listener was registered twice, one with capture and one without, 
              each must be removed separately. Removal of a capturing listener 
              does not affect a non-capturing version of the same listener, and 
              vice versa.  </param>
        </member>
        <member name="M:SharpKit.Html.EventTarget.dispatchEvent(SharpKit.Html.Event)">
            <summary>
            This method allows the dispatch of events into the implementations 
            event model. Events dispatched in this manner will have the same 
            capturing and bubbling behavior as events dispatched directly by the 
            implementation. The target of the event is the 
            <code> EventTarget</code> on which <code>dispatchEvent</code> is 
            called. </summary>
            <param name="evtSpecifies"> the event type, behavior, and contextual 
              information to be used in processing the event. </param>
            <returns> The return value of <code>dispatchEvent</code> indicates 
              whether any of the listeners which handled the event called 
              <code>preventDefault</code>. If <code>preventDefault</code> was 
              called the value is false, else the value is true. </returns>
            <exception cref="T:SharpKit.Html.EventException">
              UNSPECIFIED_EVENT_TYPE_ERR: Raised if the <code>Event</code>'s type 
              was not specified by initializing the event before 
              <code>dispatchEvent</code> was called. Specification of the 
              <code>Event</code>'s type as <code>null</code> or an empty string 
              will also trigger this exception. </exception>
        </member>
        <member name="T:SharpKit.Html.Attr">
            <summary>
             The <code>Attr</code> interface represents an attribute in an 
            <code>Element</code> object. Typically the allowable values for the 
            attribute are defined in a document type definition.
            <br/><code>Attr</code> objects inherit the <code>Node</code> interface, but 
            since they are not actually child nodes of the element they describe, the 
            DOM does not consider them part of the document tree. Thus, the 
            <code>Node</code> attributes <code>parentNode</code>, 
            <code>previousSibling</code>, and <code>nextSibling</code> have a 
            <code>null</code> value for <code>Attr</code> objects. The DOM takes the 
            view that attributes are properties of elements rather than having a 
            separate identity from the elements they are associated with; this should 
            make it more efficient to implement such features as default attributes 
            associated with all elements of a given type. Furthermore, 
            <code>Attr</code> nodes may not be immediate children of a 
            <code>DocumentFragment</code>. However, they can be associated with 
            <code>Element</code> nodes contained within a 
            <code>DocumentFragment</code>. In short, users and implementors of the 
            DOM need to be aware that <code>Attr</code> nodes have some things in 
            common with other objects inheriting the <code>Node</code> interface, but 
            they also are quite distinct.
            <br/> The attribute's effective value is determined as follows: if this 
            attribute has been explicitly assigned any value, that value is the 
            attribute's effective value; otherwise, if there is a declaration for 
            this attribute, and that declaration includes a default value, then that 
            default value is the attribute's effective value; otherwise, the 
            attribute does not exist on this element in the structure model until it 
            has been explicitly added. Note that the <code>nodeValue</code> attribute 
            on the <code>Attr</code> instance can also be used to retrieve the string 
            version of the attribute's value(s). 
            <br/>In XML, where the value of an attribute can contain entity references, 
            the child nodes of the <code>Attr</code> node may be either 
            <code>Text</code> or <code>EntityReference</code> nodes (when these are 
            in use; see the description of <code>EntityReference</code> for 
            discussion). Because the DOM Core is not aware of attribute types, it 
            treats all attribute values as simple strings, even if the DTD or schema 
            declares them as having tokenized types. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
            </summary>
        </member>
        <member name="P:SharpKit.Html.Attr.name">
            <summary>
            Returns the name of this attribute. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Attr.specified">
            <summary>
            If this attribute was explicitly given a value in the original 
            document, this is <code>true</code>; otherwise, it is 
            <code>false</code>. Note that the implementation is in charge of this 
            attribute, not the user. If the user changes the value of the 
            attribute (even if it ends up having the same value as the default 
            value) then the <code>specified</code> flag is automatically flipped 
            to <code>true</code>. To re-specify the attribute as the default 
            value from the DTD, the user must delete the attribute. The 
            implementation will then make a new attribute available with 
            <code>specified</code> set to <code>false</code> and the default 
            value (if one exists).
            <br/>In summary:  If the attribute has an assigned value in the document 
            then <code>specified</code> is <code>true</code>, and the value is 
            the assigned value.  If the attribute has no assigned value in the 
            document and has a default value in the DTD, then 
            <code>specified</code> is <code>false</code>, and the value is the 
            default value in the DTD. If the attribute has no assigned value in 
            the document and has a value of #IMPLIED in the DTD, then the 
            attribute does not appear in the structure model of the document. If 
            the <code>ownerElement</code> attribute is <code>null</code> (i.e. 
            because it was just created or was set to <code>null</code> by the 
            various removal and cloning operations) <code>specified</code> is 
            <code>true</code>. 
            </summary>
        </member>
        <member name="P:SharpKit.Html.Attr.value">
            <summary>
            On retrieval, the value of the attribute is returned as a string. 
            Character and general entity references are replaced with their 
            values. See also the method <code>getAttribute</code> on the 
            <code>Element</code> interface.
            <br/>On setting, this creates a <code>Text</code> node with the unparsed 
            contents of the string. I.e. any characters that an XML processor 
            would recognize as markup are instead treated as literal text. See 
            also the method <code>setAttribute</code> on the <code>Element</code> 
            interface. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.Attr.ownerElement">
            <summary>
            The <code>Element</code> node this attribute is attached to or 
            <code>null</code> if this attribute is not in use.
            @since DOM Level 2
            </summary>
        </member>
        <member name="T:SharpKit.Html.CSSPageRule">
            <summary>
             The <code>CSSPageRule</code> interface represents a @page rule within a 
            CSS style sheet. The <code>@page</code> rule is used to specify the 
            dimensions, orientation, margins, etc. of a page box for paged media. 
            <br/>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification</a>.
            @since DOM Level 2
            </summary>
        </member>
        <member name="P:SharpKit.Html.CSSPageRule.selectorText">
            <summary>
             The parsable textual representation of the page selector for the rule. </summary>
            <exception cref="T:SharpKit.Html.DOMException">
              SYNTAX_ERR: Raised if the specified CSS string value has a syntax 
              error and is unparsable.
              <br/>NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly. </exception>
        </member>
        <member name="P:SharpKit.Html.CSSPageRule.style">
            <summary>
             The declaration-block of this rule. 
            </summary>
        </member>
      <member name="T:AssemblyDoc">
        <summary>
          Latest HTML interfaces, created according to w3c specifications, including HTML5, CSS3, SVG, WebGL, WebDatabase and more.
        </summary>
      </member>
    </members>
</doc>
