/* Generated by SharpKit 5 v5.4.5 */
"use strict";
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Linq$Enumerable = {
    fullname: "System.Linq.Enumerable",
    baseTypeName: "System.Object",
    staticDefinition: {
        CombinePredicates$1: function (TSource, predicate1, predicate2){
            return function (x){
                return predicate1(x) && predicate2(x);
            };
        },
        CombineSelectors$3: function (TSource, TMiddle, TResult, selector1, selector2){
            return function (x){
                return selector2(selector1(x));
            };
        },
        First$1$$IEnumerable$1: function (TSource, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null){
                if (list.get_Count() > 0){
                    return list.get_Item$$Int32(0);
                }
            }
            else {
                var enumerator = source.GetEnumerator();
                try{
                    if (enumerator.MoveNext()){
                        return enumerator.get_Current();
                    }
                }
                finally{
                    enumerator.Dispose();
                }
            }
            throw $CreateException(System.Linq.Error.NoElements(), new Error());
        },
        First$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var $it5 = source.GetEnumerator();
            while ($it5.MoveNext()){
                var local = $it5.get_Current();
                if (predicate(local)){
                    return local;
                }
            }
            throw $CreateException(System.Linq.Error.NoMatch(), new Error());
        },
        FirstOrDefault$1$$IEnumerable$1: function (TSource, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null){
                if (list.get_Count() > 0){
                    return list.get_Item$$Int32(0);
                }
            }
            else {
                var enumerator = source.GetEnumerator();
                try{
                    if (enumerator.MoveNext()){
                        return enumerator.get_Current();
                    }
                }
                finally{
                    enumerator.Dispose();
                }
            }
            return Default(TSource);
        },
        FirstOrDefault$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var $it6 = source.GetEnumerator();
            while ($it6.MoveNext()){
                var local = $it6.get_Current();
                if (predicate(local)){
                    return local;
                }
            }
            return Default(TSource);
        },
        Single$1$$IEnumerable$1: function (TSource, source){
            if (source == null)
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null){
                if (list.get_Count() == 1)
                    return list.get_Item$$Int32(0);
                else
                    throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
            }
            else {
                var enumerator = source.GetEnumerator();
                try{
                    if (enumerator.MoveNext())
                        return enumerator.get_Current();
                }
                finally{
                    enumerator.Dispose();
                }
            }
            throw $CreateException(System.Linq.Error.NoElements(), new Error());
        },
        Single$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null)
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            if (predicate == null)
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            var $it7 = source.GetEnumerator();
            while ($it7.MoveNext()){
                var local = $it7.get_Current();
                if (predicate(local))
                    return local;
            }
            throw $CreateException(System.Linq.Error.NoMatch(), new Error());
        },
        SingleOrDefault$1$$IEnumerable$1: function (TSource, source){
            if (source == null)
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null){
                if (list.get_Count() == 1)
                    return list.get_Item$$Int32(0);
                else
                    throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
            }
            else {
                var enumerator = source.GetEnumerator();
                try{
                    if (enumerator.MoveNext())
                        return enumerator.get_Current();
                }
                finally{
                    enumerator.Dispose();
                }
            }
            return Default(TSource);
        },
        SingleOrDefault$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null)
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            if (predicate == null)
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            var $it8 = source.GetEnumerator();
            while ($it8.MoveNext()){
                var local = $it8.get_Current();
                if (predicate(local))
                    return local;
            }
            return Default(TSource);
        },
        Last$1$$IEnumerable$1: function (TSource, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null){
                var count = list.get_Count();
                if (count > 0){
                    return list.get_Item$$Int32(count - 1);
                }
            }
            else {
                var enumerator = source.GetEnumerator();
                try{
                    if (enumerator.MoveNext()){
                        var current;
                        do{
                            current = enumerator.get_Current();
                        }
                        while (enumerator.MoveNext())
                        return current;
                    }
                }
                finally{
                    enumerator.Dispose();
                }
            }
            throw $CreateException(System.Linq.Error.NoElements(), new Error());
        },
        Last$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var local = Default(TSource);
            var flag = false;
            var $it9 = source.GetEnumerator();
            while ($it9.MoveNext()){
                var local2 = $it9.get_Current();
                if (predicate(local2)){
                    local = local2;
                    flag = true;
                }
            }
            if (!flag){
                throw $CreateException(System.Linq.Error.NoMatch(), new Error());
            }
            return local;
        },
        LastOrDefault$1$$IEnumerable$1: function (TSource, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null){
                var count = list.get_Count();
                if (count > 0){
                    return list.get_Item$$Int32(count - 1);
                }
            }
            else {
                var enumerator = source.GetEnumerator();
                try{
                    if (enumerator.MoveNext()){
                        var current;
                        do{
                            current = enumerator.get_Current();
                        }
                        while (enumerator.MoveNext())
                        return current;
                    }
                }
                finally{
                    enumerator.Dispose();
                }
            }
            return Default(TSource);
        },
        LastOrDefault$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var local = Default(TSource);
            var $it10 = source.GetEnumerator();
            while ($it10.MoveNext()){
                var local2 = $it10.get_Current();
                if (predicate(local2)){
                    local = local2;
                }
            }
            return local;
        },
        Where$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            if (Is(source, System.Linq.Enumerable.Iterator.ctor)){
                return (Cast(source, System.Linq.Enumerable.Iterator.ctor)).Where(predicate);
            }
            if (source instanceof Array){
                return new System.Linq.Enumerable.WhereArrayIterator.ctor(TSource, source instanceof Array || source == null ? source : (function (){
                    throw new Error("InvalidCastException");
                }
                ()), predicate);
            }
            if (Is(source, System.Collections.Generic.List$1.ctor)){
                return new System.Linq.Enumerable.WhereListIterator.ctor(TSource, Cast(source, System.Collections.Generic.List$1.ctor), predicate);
            }
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(TSource, source, predicate);
        },
        Where$1$$IEnumerable$1$$Func$3: function (TSource, source, predicate){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Contains$1$$IEnumerable$1$$TSource: function (TSource, source, value){
            if (source == null)
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            var is2 = As(source, System.Collections.Generic.ICollection$1.ctor);
            if (is2 != null)
                return is2.Contains(value);
            var $it11 = source.GetEnumerator();
            while ($it11.MoveNext()){
                var local = $it11.get_Current();
                if (local == value)
                    return true;
            }
            return false;
        },
        Contains$1$$IEnumerable$1$$TSource$$IEqualityComparer$1: function (TSource, source, value, comparer){
            if (comparer == null){
                return System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(TSource, source, value);
            }
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var $it12 = source.GetEnumerator();
            while ($it12.MoveNext()){
                var local = $it12.get_Current();
                if (comparer.Equals$$T$$T(local, value)){
                    return true;
                }
            }
            return false;
        },
        Any$1$$IEnumerable$1: function (TSource, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var enumerator = source.GetEnumerator();
            try{
                if (enumerator.MoveNext()){
                    return true;
                }
            }
            finally{
                enumerator.Dispose();
            }
            return false;
        },
        Any$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var $it13 = source.GetEnumerator();
            while ($it13.MoveNext()){
                var local = $it13.get_Current();
                if (predicate(local)){
                    return true;
                }
            }
            return false;
        },
        Concat$1: function (TSource, first, second){
            if (first == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("first"), new Error());
            }
            if (second == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("second"), new Error());
            }
            return new System.Linq.Enumerable.ConcatIterator.ctor(TSource, first, second);
        },
        Count$1$$IEnumerable$1: function (TSource, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var is2 = As(source, System.Collections.Generic.ICollection$1.ctor);
            if (is2 != null){
                return is2.get_Count();
            }
            var num = 0;
            var enumerator = source.GetEnumerator();
            try{
                while (enumerator.MoveNext()){
                    num++;
                }
            }
            finally{
                enumerator.Dispose();
            }
            return num;
        },
        Count$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var num = 0;
            var $it14 = source.GetEnumerator();
            while ($it14.MoveNext()){
                var local = $it14.get_Current();
                if (predicate(local)){
                    num++;
                }
            }
            return num;
        },
        OfType$1: function (TResult, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            return new System.Linq.Enumerable.OfTypeIterator.ctor(TResult, source);
        },
        OrderBy$2$$IEnumerable$1$$Func$2: function (TSource, TKey, source, keySelector){
            return new System.Linq._OrderedEnumerable$2.ctor(TSource, TKey, source, keySelector, null, false);
        },
        OrderBy$2$$IEnumerable$1$$Func$2$$IComparer$1: function (TSource, TKey, source, keySelector, comparer){
            return new System.Linq._OrderedEnumerable$2.ctor(TSource, TKey, source, keySelector, comparer, false);
        },
        OrderByDescending$2$$IEnumerable$1$$Func$2: function (TSource, TKey, source, keySelector){
            return new System.Linq._OrderedEnumerable$2.ctor(TSource, TKey, source, keySelector, null, true);
        },
        OrderByDescending$2$$IEnumerable$1$$Func$2$$IComparer$1: function (TSource, TKey, source, keySelector, comparer){
            return new System.Linq._OrderedEnumerable$2.ctor(TSource, TKey, source, keySelector, comparer, true);
        },
        ThenBy$2$$IOrderedEnumerable$1$$Func$2: function (TSource, TKey, source, keySelector){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            return source.CreateOrderedEnumerable$1(TKey, keySelector, null, false);
        },
        ThenBy$2$$IOrderedEnumerable$1$$Func$2$$IComparer$1: function (TSource, TKey, source, keySelector, comparer){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            return source.CreateOrderedEnumerable$1(TKey, keySelector, comparer, false);
        },
        ThenByDescending$2$$IOrderedEnumerable$1$$Func$2: function (TSource, TKey, source, keySelector){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            return source.CreateOrderedEnumerable$1(TKey, keySelector, null, true);
        },
        ThenByDescending$2$$IOrderedEnumerable$1$$Func$2$$IComparer$1: function (TSource, TKey, source, keySelector, comparer){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            return source.CreateOrderedEnumerable$1(TKey, keySelector, comparer, true);
        },
        Select$2$$IEnumerable$1$$Func$2: function (TSource, TResult, source, selector){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (selector == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("selector"), new Error());
            }
            if (Is(source, System.Linq.Enumerable.Iterator.ctor)){
                return (Cast(source, System.Linq.Enumerable.Iterator.ctor)).Select$1(TResult, selector);
            }
            if (source instanceof Array){
                return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(TSource, TResult, source instanceof Array || source == null ? source : (function (){
                    throw new Error("InvalidCastException");
                }
                ()), null, selector);
            }
            if (Is(source, System.Collections.Generic.List$1.ctor)){
                return new System.Linq.Enumerable.WhereSelectListIterator.ctor(TSource, TResult, Cast(source, System.Collections.Generic.List$1.ctor), null, selector);
            }
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(TSource, TResult, source, null, selector);
        },
        Select$2$$IEnumerable$1$$Func$3: function (TSource, TResult, source, selector){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        SelectMany$2$$IEnumerable$1$$Func$2: function (TSource, TResult, source, selector){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (selector == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("selector"), new Error());
            }
            if (source instanceof Array){
                return new System.Linq.Enumerable.SelectManyArrayIterator.ctor(TSource, TResult, source instanceof Array || source == null ? source : (function (){
                    throw new Error("InvalidCastException");
                }
                ()), selector);
            }
            if (Is(source, System.Collections.Generic.List$1.ctor)){
                return new System.Linq.Enumerable.SelectManyListIterator.ctor(TSource, TResult, Cast(source, System.Collections.Generic.List$1.ctor), selector);
            }
            return new System.Linq.Enumerable.SelectManyEnumerableIterator.ctor(TSource, TResult, source, selector);
        },
        SelectMany$2$$IEnumerable$1$$Func$3: function (TSource, TResult, source, selector){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        SelectMany$3$$IEnumerable$1$$Func$2$$Func$3: function (TSource, TCollection, TResult, source, collectionSelector, resultSelector){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (collectionSelector == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("collectionSelector"), new Error());
            }
            if (resultSelector == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("resultSelector"), new Error());
            }
            return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.Tuple$2.ctor, TResult, System.Linq.Enumerable.SelectMany$2$$IEnumerable$1$$Func$2(TSource, System.Tuple$2.ctor, source, function (t){
                return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(TCollection, System.Tuple$2.ctor, collectionSelector(t), function (x){
                    return System.Tuple.Create$2$$T1$$T2(TSource, TCollection, t, x);
                });
            }), function (pair){
                return resultSelector(pair.get_Item1(), pair.get_Item2());
            });
        },
        Skip$1: function (TSource, source, count){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var x = new System.Linq.Enumerable.SkipIterator.ctor(TSource, source, count);
            return x;
        },
        Take$1: function (TSource, source, count){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var x = new System.Linq.Enumerable.TakeIterator.ctor(TSource, source, count);
            return x;
        },
        ToArray$1: function (TSource, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var arr =  [];
            var $it15 = source.GetEnumerator();
            while ($it15.MoveNext()){
                var obj = $it15.get_Current();
                arr.push(obj);
            }
            return arr;
        },
        ToList$1: function (TSource, source){
            if (source == null){
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            return new System.Collections.Generic.List$1.ctor$$IEnumerable$1(TSource, source);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Linq$Enumerable);
var System$Linq$Enumerable$Iterator = {
    fullname: "System.Linq.Enumerable.Iterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$1", "System.IDisposable", "System.Collections.IEnumerator"],
    Kind: "Class",
    definition: {
        ctor: function (TSource){
            this.TSource = TSource;
            this.state = 0;
            this.current = null;
            System.Object.ctor.call(this);
        },
        Current$$: "`0",
        get_Current: function (){
            return this.current;
        },
        Dispose: function (){
            this.current = Default(this.TSource);
            this.state = -1;
        },
        GetEnumerator: function (){
            if (this.state == 0){
                this.state = 1;
                return this;
            }
            var iterator = this.Clone();
            iterator.state = 1;
            return iterator;
        }
    }
};
JsTypes.push(System$Linq$Enumerable$Iterator);
var System$Linq$Enumerable$SelectManyEnumerableIterator = {
    fullname: "System.Linq.Enumerable.SelectManyEnumerableIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, TResult, source, selector){
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.selector = null;
            this.enumerator = null;
            this.innerEnumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.selector = selector;
        },
        Clone: function (){
            return new System.Linq.Enumerable.SelectManyEnumerableIterator.ctor(this.TSource, this.TResult, this.source, this.selector);
        },
        Dispose: function (){
            if (this.enumerator != null){
                this.enumerator.Dispose();
            }
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this);
        },
        MoveNext: function (){
            switch (this.state){
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default:
                    return false;
            }
            while (true){
                if (this.innerEnumerator == null){
                    if (this.enumerator.MoveNext()){
                        this.innerEnumerator = this.selector(this.enumerator.get_Current()).GetEnumerator();
                    }
                    else {
                        this.Dispose();
                        return false;
                    }
                }
                else {
                    if (this.innerEnumerator.MoveNext()){
                        this.current = this.innerEnumerator.get_Current();
                        return true;
                    }
                    this.innerEnumerator = null;
                }
            }
        },
        Select$1: function (TResult2, selector){
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TResult, TResult2, this, null, selector);
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$SelectManyEnumerableIterator);
var System$Linq$Enumerable$SelectManyListIterator = {
    fullname: "System.Linq.Enumerable.SelectManyListIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, TResult, source, selector){
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.selector = null;
            this.index = 0;
            this.innerEnumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.selector = selector;
        },
        Clone: function (){
            return new System.Linq.Enumerable.SelectManyListIterator.ctor(this.TSource, this.TResult, this.source, this.selector);
        },
        MoveNext: function (){
            if (this.state == 1){
                while (this.index < this.source.get_Count() || this.innerEnumerator != null){
                    if (this.innerEnumerator == null){
                        var arg = this.source.get_Item$$Int32(this.index);
                        this.index++;
                        var innerEnumerable = this.selector(arg);
                        this.innerEnumerator = innerEnumerable.GetEnumerator();
                    }
                    var hadNext = this.innerEnumerator.MoveNext();
                    if (!hadNext){
                        this.innerEnumerator = null;
                        continue;
                    }
                    this.current = this.innerEnumerator.get_Current();
                    return true;
                }
                this.Dispose();
            }
            return false;
        },
        Select$1: function (TResult2, selector){
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TResult, TResult2, this, null, selector);
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$SelectManyListIterator);
var System$Linq$Enumerable$WhereArrayIterator = {
    fullname: "System.Linq.Enumerable.WhereArrayIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, source, predicate){
            this.TSource = TSource;
            this.source = null;
            this.predicate = null;
            this.index = 0;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TSource);
            this.source = source;
            this.predicate = predicate;
        },
        Clone: function (){
            return new System.Linq.Enumerable.WhereArrayIterator.ctor(this.TSource, this.source, this.predicate);
        },
        MoveNext: function (){
            if (this.state == 1){
                while (this.index < this.source.length){
                    var tSource = this.source[this.index];
                    this.index++;
                    if (this.predicate(tSource)){
                        this.current = tSource;
                        return true;
                    }
                }
                this.Dispose();
            }
            return false;
        },
        Select$1: function (TResult, selector){
            return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource, TResult, this.source, this.predicate, selector);
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereArrayIterator.ctor(this.TSource, this.source, System.Linq.Enumerable.CombinePredicates$1(this.TSource, this.predicate, predicate));
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereArrayIterator);
var System$Linq$Enumerable$WhereEnumerableIterator = {
    fullname: "System.Linq.Enumerable.WhereEnumerableIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, source, predicate){
            this.TSource = TSource;
            this.source = null;
            this.predicate = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TSource);
            this.source = source;
            this.predicate = predicate;
        },
        Clone: function (){
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TSource, this.source, this.predicate);
        },
        Dispose: function (){
            if (this.enumerator != null){
                this.enumerator.Dispose();
            }
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this);
        },
        MoveNext: function (){
            switch (this.state){
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default:
                    return false;
            }
            while (this.enumerator.MoveNext()){
                var current = this.enumerator.get_Current();
                if (this.predicate(current)){
                    this.current = current;
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1: function (TResult, selector){
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource, TResult, this.source, this.predicate, selector);
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TSource, this.source, System.Linq.Enumerable.CombinePredicates$1(this.TSource, this.predicate, predicate));
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereEnumerableIterator);
var System$Linq$Enumerable$WhereListIterator = {
    fullname: "System.Linq.Enumerable.WhereListIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, source, predicate){
            this.TSource = TSource;
            this.source = null;
            this.predicate = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TSource);
            this.source = source;
            this.predicate = predicate;
        },
        Clone: function (){
            return new System.Linq.Enumerable.WhereListIterator.ctor(this.TSource, this.source, this.predicate);
        },
        MoveNext: function (){
            switch (this.state){
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default:
                    return false;
            }
            while (this.enumerator.MoveNext()){
                var current = this.enumerator.get_Current();
                if (this.predicate(current)){
                    this.current = current;
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1: function (TResult, selector){
            return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource, TResult, this.source, this.predicate, selector);
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereListIterator.ctor(this.TSource, this.source, System.Linq.Enumerable.CombinePredicates$1(this.TSource, this.predicate, predicate));
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereListIterator);
var System$Linq$Enumerable$WhereSelectArrayIterator = {
    fullname: "System.Linq.Enumerable.WhereSelectArrayIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, TResult, source, predicate, selector){
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.predicate = null;
            this.selector = null;
            this.index = 0;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.predicate = predicate;
            this.selector = selector;
        },
        Clone: function (){
            return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource, this.TResult, this.source, this.predicate, this.selector);
        },
        MoveNext: function (){
            if (this.state == 1){
                while (this.index < this.source.length){
                    var arg = this.source[this.index];
                    this.index++;
                    if (this.predicate == null || this.predicate(arg)){
                        this.current = this.selector(arg);
                        return true;
                    }
                }
                this.Dispose();
            }
            return false;
        },
        Select$1: function (TResult2, selector){
            return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource, TResult2, this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$3(this.TSource, this.TResult, TResult2, this.selector, selector));
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereSelectArrayIterator);
var System$Linq$Enumerable$WhereSelectEnumerableIterator = {
    fullname: "System.Linq.Enumerable.WhereSelectEnumerableIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, TResult, source, predicate, selector){
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.predicate = null;
            this.selector = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.predicate = predicate;
            this.selector = selector;
        },
        Clone: function (){
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource, this.TResult, this.source, this.predicate, this.selector);
        },
        Dispose: function (){
            if (this.enumerator != null){
                this.enumerator.Dispose();
            }
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this);
        },
        MoveNext: function (){
            switch (this.state){
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default:
                    return false;
            }
            while (this.enumerator.MoveNext()){
                var current = this.enumerator.get_Current();
                if (this.predicate == null || this.predicate(current)){
                    this.current = this.selector(current);
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1: function (TResult2, selector){
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource, TResult2, this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$3(this.TSource, this.TResult, TResult2, this.selector, selector));
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereSelectEnumerableIterator);
var System$Linq$Enumerable$WhereSelectListIterator = {
    fullname: "System.Linq.Enumerable.WhereSelectListIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, TResult, source, predicate, selector){
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.predicate = null;
            this.selector = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.predicate = predicate;
            this.selector = selector;
        },
        Clone: function (){
            return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource, this.TResult, this.source, this.predicate, this.selector);
        },
        MoveNext: function (){
            switch (this.state){
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default:
                    return false;
            }
            while (this.enumerator.MoveNext()){
                var current = this.enumerator.get_Current();
                if (this.predicate == null || this.predicate(current)){
                    this.current = this.selector(current);
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1: function (TResult2, selector){
            return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource, TResult2, this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$3(this.TSource, this.TResult, TResult2, this.selector, selector));
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereSelectListIterator);
var System$Linq$Enumerable$OfTypeIterator = {
    fullname: "System.Linq.Enumerable.OfTypeIterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, source){
            this.T = T;
            this.Source = null;
            this.SourceEnumerator = null;
            System.Object.ctor.call(this);
            this.Source = source;
        },
        Reset: function (){
            if (this.SourceEnumerator != null)
                this.SourceEnumerator.Reset();
        },
        Current$$: "`0",
        get_Current: function (){
            return this.SourceEnumerator.get_Current();
        },
        MoveNext: function (){
            if (this.SourceEnumerator == null)
                this.SourceEnumerator = this.Source.GetEnumerator();
            while (true){
                if (!this.SourceEnumerator.MoveNext())
                    return false;
                var item = this.SourceEnumerator.get_Current();
                if (Is(item, this.T))
                    return true;
            }
        },
        Dispose: function (){
            this.Source = null;
            this.SourceEnumerator = null;
        },
        GetEnumerator: function (){
            return this;
        }
    }
};
JsTypes.push(System$Linq$Enumerable$OfTypeIterator);
var System$Linq$Enumerable$SkipIterator = {
    fullname: "System.Linq.Enumerable.SkipIterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, source, skipCount){
            this.T = T;
            this.SkipCount = 0;
            this.Source = null;
            this.SourceEnumerator = null;
            this.State = 0;
            System.Object.ctor.call(this);
            this.Source = source;
            this.SkipCount = skipCount;
        },
        Reset: function (){
            if (this.SourceEnumerator != null)
                this.SourceEnumerator.Reset();
        },
        Current$$: "`0",
        get_Current: function (){
            return this.SourceEnumerator.get_Current();
        },
        MoveNext: function (){
            if (this.State == 0){
                this.SourceEnumerator = this.Source.GetEnumerator();
                this.State = 1;
            }
            if (this.State == 1){
                for (var i = 0; i < this.SkipCount; i++){
                    if (!this.SourceEnumerator.MoveNext())
                        return false;
                }
                this.State = 2;
            }
            if (this.State == 2){
                return this.SourceEnumerator.MoveNext();
            }
            return false;
        },
        Dispose: function (){
            this.Source = null;
            this.SourceEnumerator = null;
        },
        GetEnumerator: function (){
            if (this.State == 0)
                return this;
            return new System.Linq.Enumerable.SkipIterator.ctor(this.T, this.Source, this.SkipCount);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$SkipIterator);
var System$Linq$Enumerable$TakeIterator = {
    fullname: "System.Linq.Enumerable.TakeIterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, source, takeCount){
            this.T = T;
            this.TakeCount = 0;
            this.Source = null;
            this.SourceEnumerator = null;
            this.State = 0;
            this.TakeIndex = 0;
            System.Object.ctor.call(this);
            this.Source = source;
            this.TakeCount = takeCount;
        },
        Reset: function (){
            if (this.SourceEnumerator != null)
                this.SourceEnumerator.Reset();
        },
        Current$$: "`0",
        get_Current: function (){
            return this.SourceEnumerator.get_Current();
        },
        MoveNext: function (){
            if (this.State == 0){
                this.SourceEnumerator = this.Source.GetEnumerator();
                this.State = 1;
            }
            if (this.State == 1){
                if (this.SourceEnumerator.MoveNext()){
                    this.TakeIndex++;
                    if (this.TakeIndex <= this.TakeCount)
                        return true;
                }
                this.State = 2;
                return false;
            }
            return false;
        },
        Dispose: function (){
            this.Source = null;
            this.SourceEnumerator = null;
        },
        GetEnumerator: function (){
            if (this.State == 0)
                return this;
            return new System.Linq.Enumerable.TakeIterator.ctor(this.T, this.Source, this.TakeCount);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$TakeIterator);
var System$Linq$Enumerable$ConcatIterator = {
    fullname: "System.Linq.Enumerable.ConcatIterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, first, second){
            this.T = T;
            this.First = null;
            this.Second = null;
            this.FirstEnumerator = null;
            this.SecondEnumerator = null;
            this.State = 0;
            this.onFirst = true;
            System.Object.ctor.call(this);
            this.First = first;
            this.Second = second;
        },
        Reset: function (){
            if (this.FirstEnumerator != null)
                this.FirstEnumerator.Reset();
            if (this.SecondEnumerator != null)
                this.SecondEnumerator.Reset();
            this.onFirst = true;
        },
        Current$$: "`0",
        get_Current: function (){
            if (this.State == 1){
                return this.FirstEnumerator.get_Current();
            }
            if (this.State == 3){
                return this.SecondEnumerator.get_Current();
            }
            throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
        },
        MoveNext: function (){
            if (this.State == 0){
                this.FirstEnumerator = this.First.GetEnumerator();
                this.State = 1;
            }
            if (this.State == 1){
                if (this.FirstEnumerator.MoveNext()){
                    return true;
                }
                this.State = 2;
            }
            if (this.State == 2){
                this.SecondEnumerator = this.Second.GetEnumerator();
                this.State = 3;
            }
            if (this.State == 3){
                if (this.SecondEnumerator.MoveNext()){
                    return true;
                }
                this.State = 4;
            }
            return false;
        },
        Dispose: function (){
            this.First = null;
            this.FirstEnumerator = null;
            this.Second = null;
            this.SecondEnumerator = null;
        },
        GetEnumerator: function (){
            if (this.State == 0)
                return this;
            return new System.Linq.Enumerable.ConcatIterator.ctor(this.T, this.First, this.Second);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$ConcatIterator);
var System$Linq$Enumerable$SelectManyArrayIterator = {
    fullname: "System.Linq.Enumerable.SelectManyArrayIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TSource, TResult, source, selector){
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.selector = null;
            this.index = 0;
            this.innerEnumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.selector = selector;
        },
        Clone: function (){
            return new System.Linq.Enumerable.SelectManyArrayIterator.ctor(this.TSource, this.TResult, this.source, this.selector);
        },
        MoveNext: function (){
            if (this.state == 1){
                while (this.index < this.source.length || this.innerEnumerator != null){
                    if (this.innerEnumerator == null){
                        var arg = this.source[this.index];
                        this.index++;
                        var innerEnumerable = this.selector(arg);
                        this.innerEnumerator = innerEnumerable.GetEnumerator();
                    }
                    var hadNext = this.innerEnumerator.MoveNext();
                    if (!hadNext){
                        this.innerEnumerator = null;
                        continue;
                    }
                    this.current = this.innerEnumerator.get_Current();
                    return true;
                }
                this.Dispose();
            }
            return false;
        },
        Select$1: function (TResult2, selector){
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TResult, TResult2, this, null, selector);
        },
        Where: function (predicate){
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$SelectManyArrayIterator);
var System$Linq$_Error = {
    fullname: "System.Linq._Error",
    baseTypeName: "System.Object",
    staticDefinition: {
        ArgumentArrayHasTooManyElements: function (p0){
            return new System.ArgumentException.ctor$$String("ArgumentArrayHasTooManyElements(p0");
        },
        ArgumentNotIEnumerableGeneric: function (p0){
            return new System.ArgumentException.ctor$$String("ArgumentNotIEnumerableGeneric(p0");
        },
        ArgumentNotSequence: function (p0){
            return new System.ArgumentException.ctor$$String("ArgumentNotSequence(p0");
        },
        ArgumentNotValid: function (p0){
            return new System.ArgumentException.ctor$$String("ArgumentNotValid(p0");
        },
        IncompatibleElementTypes: function (){
            return new System.ArgumentException.ctor$$String("IncompatibleElementTypes");
        },
        ArgumentNotLambda: function (p0){
            return new System.ArgumentException.ctor$$String("ArgumentNotLambda(p0");
        },
        MoreThanOneElement: function (){
            return new System.InvalidOperationException.ctor$$String("MoreThanOneElement");
        },
        MoreThanOneMatch: function (){
            return new System.InvalidOperationException.ctor$$String("MoreThanOneMatch");
        },
        NoArgumentMatchingMethodsInQueryable: function (p0){
            return new System.InvalidOperationException.ctor$$String("NoArgumentMatchingMethodsInQueryable(p0");
        },
        NoElements: function (){
            return new System.InvalidOperationException.ctor$$String("NoElements");
        },
        NoMatch: function (){
            return new System.InvalidOperationException.ctor$$String("NoMatch");
        },
        NoMethodOnType: function (p0, p1){
            return new System.InvalidOperationException.ctor$$String("NoMethodOnType(p0, p1");
        },
        NoMethodOnTypeMatchingArguments: function (p0, p1){
            return new System.InvalidOperationException.ctor$$String("NoMethodOnTypeMatchingArguments(p0, p1");
        },
        NoNameMatchingMethodsInQueryable: function (p0){
            return new System.InvalidOperationException.ctor$$String("NoNameMatchingMethodsInQueryable(p0");
        },
        ArgumentNull: function (paramName){
            return new System.ArgumentNullException.ctor$$String(paramName);
        },
        ArgumentOutOfRange: function (paramName){
            return new System.ArgumentOutOfRangeException.ctor$$String(paramName);
        },
        NotImplemented: function (){
            return new System.NotImplementedException.ctor();
        },
        NotSupported: function (){
            return new System.NotSupportedException.ctor();
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Linq$_Error);
var System$Linq$IGrouping$2 = {
    fullname: "System.Linq.IGrouping$2",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable"],
    Kind: "Interface"
};
JsTypes.push(System$Linq$IGrouping$2);
var System$Linq$IOrderedEnumerable$1 = {
    fullname: "System.Linq.IOrderedEnumerable$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable"],
    Kind: "Interface"
};
JsTypes.push(System$Linq$IOrderedEnumerable$1);
var System$Linq$Error = {
    fullname: "System.Linq.Error",
    baseTypeName: "System.Object",
    staticDefinition: {
        ArgumentNull: function (p){
            return new System.Exception.ctor$$String("ArgumentNull " + p);
        },
        NoElements: function (){
            return new System.Exception.ctor$$String("NoElements");
        },
        NoMatch: function (){
            return new System.Exception.ctor$$String("NoMatch");
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Linq$Error);
var System$Linq$_OrderedEnumerable$1 = {
    fullname: "System.Linq._OrderedEnumerable$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Linq.IOrderedEnumerable$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable"],
    Kind: "Class",
    definition: {
        ctor: function (TElement){
            this.TElement = TElement;
            this.source = null;
            this.sorted = null;
            System.Object.ctor.call(this);
        },
        GetEnumerator: function (){
            if (this.sorted == null)
                this.sorted = this.SortSource();
            return this.sorted.GetEnumerator();
        },
        SortSource: function (){
            var list = System.Linq.Enumerable.ToArray$1(this.TElement, this.source);
            list.sort($CreateDelegate(this, this.Compare));
            return list;
        },
        CreateOrderedEnumerable$1: function (TKey, keySelector, comparer, descending){
            return (function (){
                var $v1 = new System.Linq._OrderedEnumerable$2.ctor(this.TElement, TKey, this.source, keySelector, comparer, descending);
                $v1.parent = this;
                return $v1;
            }).call(this);
        }
    }
};
JsTypes.push(System$Linq$_OrderedEnumerable$1);
var System$Linq$_OrderedEnumerable$2 = {
    fullname: "System.Linq._OrderedEnumerable$2",
    baseTypeName: "System.Linq._OrderedEnumerable$1",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (TElement, TKey, source, keySelector, comparer, descending){
            this.TElement = TElement;
            this.TKey = TKey;
            this.parent = null;
            this.keySelector = null;
            this.comparer = null;
            this.descending = false;
            System.Linq._OrderedEnumerable$1.ctor.call(this, this.TElement);
            if (source == null){
                throw $CreateException(System.Linq._Error.ArgumentNull("source"), new Error());
            }
            if (keySelector == null){
                throw $CreateException(System.Linq._Error.ArgumentNull("keySelector"), new Error());
            }
            this.source = source;
            this.keySelector = keySelector;
            this.comparer = ((comparer != null) ? comparer : System.Collections.Generic.Comparer$1.get_Default());
            this.descending = descending;
        },
        Compare: function (x, y){
            if (this.parent != null){
                var z = this.parent.Compare(x, y);
                if (z != 0)
                    return z;
            }
            var xx = this.keySelector(x);
            var yy = this.keySelector(y);
            var zz = this.comparer.Compare(xx, yy);
            if (this.descending)
                zz *= -1;
            return zz;
        }
    }
};
JsTypes.push(System$Linq$_OrderedEnumerable$2);

