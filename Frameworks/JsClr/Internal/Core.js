/* Generated by SharpKit 5 v5.4.5 */
"use strict";
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

if (typeof(Int32Array) == "undefined")
    var Int32Array = Array;
if (typeof(Uint8Array) == "undefined")
    var Uint8Array = Array;

if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Activator = {
    fullname: "System.Activator",
    baseTypeName: "System.Object",
    staticDefinition: {
        CreateInstance$$Type: function (type){
            return new type._JsType.ctor();
        },
        CreateInstance$$Type$$BindingFlags$$Binder$$Object$Array$$CultureInfo: function (type, bindingAttr, binder, args, culture){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$BindingFlags$$Binder$$Object$Array$$CultureInfo$$Object$Array: function (type, bindingAttr, binder, args, culture, activationAttributes){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Object$Array: function (type, args){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Object$Array$$Object$Array: function (type, args, activationAttributes){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Boolean: function (type, nonPublic){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$1: function (T){
            return System.Activator.CreateInstance$$Type(Typeof(T));
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Activator);
var System$Array = {
    fullname: "System.Array",
    baseTypeName: "System.Object",
    staticDefinition: {
        Sort$$Array: function (array){
            System.Array.Sort$1$$T$Array(System.Object.ctor, array);
        },
        Sort$1$$T$Array: function (T, array){
            System.Array.Sort$1$$T$Array$$Comparison$1(T, array, null);
        },
        Sort$1$$T$Array$$Comparison$1: function (T, array, cmpFunc){
            var needConvert = !(array instanceof Array);
            var sortArray;
            if (needConvert){
                sortArray = new Array(array.length);
                for (var i = 0; i < array.length; i++)
                    sortArray[i] = array[i];
            }
            else
                sortArray = array;
            if (cmpFunc == null){
                cmpFunc = $CreateDelegate(System.Collections.Generic.Comparer$1.get_Default(), System.Collections.Generic.Comparer$1.get_Default().Compare);
            }
            if (cmpFunc == null){
                sortArray.sort();
            }
            else
                sortArray.sort(cmpFunc);
            if (!needConvert)
                return;
            for (var i = 0; i < array.length; i++)
                array[i] = sortArray[i];
        },
        Sort$1$$T$Array$$IComparer$1: function (T, array, cmp){
            System.Array.Sort$1$$T$Array$$Comparison$1(T, array, $CreateDelegate(new SharpKit.JavaScript.Private.JsComparerHelper$1.ctor(T, cmp), new SharpKit.JavaScript.Private.JsComparerHelper$1.ctor(T, cmp).Compare));
        },
        Sort$$Array$$IComparer: function (array, cmp){
            System.Array.Sort$1$$T$Array$$IComparer$1(System.Object.ctor, array, cmp);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Array);
var SharpKit$JavaScript$Private$JsComparerHelper$1 = {
    fullname: "SharpKit.JavaScript.Private.JsComparerHelper$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IComparer$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, cmp){
            this.T = T;
            this.cmp = null;
            System.Object.ctor.call(this);
            this.cmp = cmp;
        },
        Compare: function (x, y){
            return this.cmp.Compare(x, y);
        }
    }
};
JsTypes.push(SharpKit$JavaScript$Private$JsComparerHelper$1);
var System$Attribute = {
    fullname: "System.Attribute",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Attribute);
var System$Collections$Comparer = {
    fullname: "System.Collections.Comparer",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            System.Collections.Comparer._Default = null;
        },
        Default$$: "SharpKit.JavaScript.Private.JsImplComparer",
        get_Default: function (){
            if (System.Collections.Comparer._Default == null)
                System.Collections.Comparer._Default = new SharpKit.JavaScript.Private.DefaultComparer.ctor();
            return System.Collections.Comparer._Default;
        }
    },
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.IComparer"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Collections$Comparer);
var SharpKit$JavaScript$Private$DefaultComparer = {
    fullname: "SharpKit.JavaScript.Private.DefaultComparer",
    baseTypeName: "System.Collections.Comparer",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Collections.Comparer.ctor.call(this);
        },
        Compare: function (x, y){
            var xx = x;
            var yy = y;
            if (xx.CompareTo)
                return xx.CompareTo(y);
            if (xx > yy)
                return 1;
            if (xx < yy)
                return -1;
            return 0;
        }
    }
};
JsTypes.push(SharpKit$JavaScript$Private$DefaultComparer);
var System$Collections$Generic$Comparer$1 = {
    fullname: "System.Collections.Generic.Comparer$1",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (T){
            System.Collections.Generic.Comparer$1._Default = null;
        },
        Default$$: "SharpKit.JavaScript.Private.JsImplComparer`1[[`0]]",
        get_Default: function (){
            if (System.Collections.Generic.Comparer$1._Default == null)
                System.Collections.Generic.Comparer$1._Default = new SharpKit.JavaScript.Private.DefaultComparer.ctor();
            return System.Collections.Generic.Comparer$1._Default;
        }
    },
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IComparer$1"],
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Collections$Generic$Comparer$1);
var System$Collections$Generic$KeyNotFoundException = {
    fullname: "System.Collections.Generic.KeyNotFoundException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Exception.ctor$$String.call(this, "JsImplKeyNotFoundException");
        },
        ctor$$String: function (s){
            System.Exception.ctor$$String.call(this, "JsImplKeyNotFoundException: " + s);
        },
        ctor$$String$$Exception: function (s, innerException){
            System.Exception.ctor$$String$$Exception.call(this, "JsImplKeyNotFoundException: " + s, innerException);
        }
    }
};
JsTypes.push(System$Collections$Generic$KeyNotFoundException);
var System$Collections$Generic$IEnumerator$1 = {
    fullname: "System.Collections.Generic.IEnumerator$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$Generic$IEnumerator$1);
var System$Collections$Generic$IEnumerable$1 = {
    fullname: "System.Collections.Generic.IEnumerable$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.IEnumerable"],
    Kind: "Interface"
};
JsTypes.push(System$Collections$Generic$IEnumerable$1);
var System$Collections$Generic$IList$1 = {
    fullname: "System.Collections.Generic.IList$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.ICollection$1"],
    Kind: "Interface"
};
JsTypes.push(System$Collections$Generic$IList$1);
var System$Collections$Generic$ICollection$1 = {
    fullname: "System.Collections.Generic.ICollection$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1"],
    Kind: "Interface"
};
JsTypes.push(System$Collections$Generic$ICollection$1);
var System$Collections$Generic$IDictionary$2 = {
    fullname: "System.Collections.Generic.IDictionary$2",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$Generic$IDictionary$2);
var System$Collections$Generic$ISet$1 = {
    fullname: "System.Collections.Generic.ISet$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable"],
    Kind: "Interface"
};
JsTypes.push(System$Collections$Generic$ISet$1);
var System$Collections$IEqualityComparer = {
    fullname: "System.Collections.IEqualityComparer",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$IEqualityComparer);
var System$Collections$Generic$IEqualityComparer$1 = {
    fullname: "System.Collections.Generic.IEqualityComparer$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$Generic$IEqualityComparer$1);
var System$Collections$Generic$IComparer$1 = {
    fullname: "System.Collections.Generic.IComparer$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$Generic$IComparer$1);
var System$Comparison$1 = {
    fullname: "System.Comparison$1",
    Kind: "Delegate",
    definition: {
        ctor: function (T, obj, func){
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Comparison$1);
var System$Collections$IDictionary = {
    fullname: "System.Collections.IDictionary",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.ICollection", "System.Collections.IEnumerable"],
    Kind: "Interface"
};
JsTypes.push(System$Collections$IDictionary);
var System$Collections$IEnumerable = {
    fullname: "System.Collections.IEnumerable",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$IEnumerable);
var System$Collections$IEnumerator = {
    fullname: "System.Collections.IEnumerator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$IEnumerator);
var System$Collections$ICollection = {
    fullname: "System.Collections.ICollection",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.IEnumerable"],
    Kind: "Interface"
};
JsTypes.push(System$Collections$ICollection);
var System$Collections$IList = {
    fullname: "System.Collections.IList",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.ICollection"],
    Kind: "Interface"
};
JsTypes.push(System$Collections$IList);
var System$Collections$IComparer = {
    fullname: "System.Collections.IComparer",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$IComparer);
var System$Collections$Specialized$NotifyCollectionChangedAction = {
    fullname: "System.Collections.Specialized.NotifyCollectionChangedAction",
    staticDefinition: {
        Add: 0,
        Remove: 1,
        Replace: 2,
        Move: 3,
        Reset: 4
    },
    Kind: "Enum"
};
JsTypes.push(System$Collections$Specialized$NotifyCollectionChangedAction);
var System$Collections$Specialized$INotifyCollectionChanged = {
    fullname: "System.Collections.Specialized.INotifyCollectionChanged",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$Collections$Specialized$INotifyCollectionChanged);
var System$Collections$Specialized$NotifyCollectionChangedEventArgs = {
    fullname: "System.Collections.Specialized.NotifyCollectionChangedEventArgs",
    baseTypeName: "System.EventArgs",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor$$NotifyCollectionChangedAction: function (action){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.EventArgs.ctor.call(this);
            this.action = action;
            if (action != 4)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action.", "action"), new Error());
        },
        ctor$$NotifyCollectionChangedAction$$IList: function (action, changedItems){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$IList$$Int32.call(this, action, changedItems, -1);
        },
        ctor$$NotifyCollectionChangedAction$$Object: function (action, changedItem){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$Object$$Int32.call(this, action, changedItem, -1);
        },
        ctor$$NotifyCollectionChangedAction$$IList$$IList: function (action, newItems, oldItems){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$IList$$IList$$Int32.call(this, action, newItems, oldItems, -1);
        },
        ctor$$NotifyCollectionChangedAction$$IList$$Int32: function (action, changedItems, startingIndex){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.EventArgs.ctor.call(this);
            this.action = action;
            if (action == 0 || action == 1){
                if (changedItems == null)
                    throw $CreateException(new System.ArgumentNullException.ctor$$String("changedItems"), new Error());
                if (startingIndex < -1)
                    throw $CreateException(new System.ArgumentException.ctor$$String$$String("The value of startingIndex must be -1 or greater.", "startingIndex"), new Error());
                if (action == 0)
                    this.InitializeAdd(changedItems, startingIndex);
                else
                    this.InitializeRemove(changedItems, startingIndex);
            }
            else if (action == 4){
                if (changedItems != null)
                    throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action if changedItems is null", "changedItems"), new Error());
                if (startingIndex != -1)
                    throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action if startingIndex is -1", "startingIndex"), new Error());
            }
            else {
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset, Add, or Remove actions.", "action"), new Error());
            }
        },
        ctor$$NotifyCollectionChangedAction$$Object$$Int32: function (action, changedItem, index){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.EventArgs.ctor.call(this);
            var changedItems = [changedItem];
            this.action = action;
            if (action == 0)
                this.InitializeAdd(changedItems, index);
            else if (action == 1)
                this.InitializeRemove(changedItems, index);
            else if (action == 4){
                if (changedItem != null)
                    throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action if changedItem is null", "changedItem"), new Error());
                if (index != -1)
                    throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset action if index is -1", "index"), new Error());
            }
            else {
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Reset, Add, or Remove actions.", "action"), new Error());
            }
        },
        ctor$$NotifyCollectionChangedAction$$Object$$Object: function (action, newItem, oldItem){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$Object$$Object$$Int32.call(this, action, newItem, oldItem, -1);
        },
        ctor$$NotifyCollectionChangedAction$$IList$$IList$$Int32: function (action, newItems, oldItems, startingIndex){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.EventArgs.ctor.call(this);
            this.action = action;
            if (action != 2)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Replace action.", "action"), new Error());
            if (newItems == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("newItems"), new Error());
            if (oldItems == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("oldItems"), new Error());
            this.oldItems = oldItems;
            this.newItems = newItems;
            this.oldIndex = startingIndex;
            this.newIndex = startingIndex;
        },
        ctor$$NotifyCollectionChangedAction$$IList$$Int32$$Int32: function (action, changedItems, index, oldIndex){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.EventArgs.ctor.call(this);
            this.action = action;
            if (action != 3)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Move action.", "action"), new Error());
            if (index < -1)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("The value of index must be -1 or greater.", "index"), new Error());
            this.InitializeMove(changedItems, index, oldIndex);
        },
        ctor$$NotifyCollectionChangedAction$$Object$$Int32$$Int32: function (action, changedItem, index, oldIndex){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.Collections.Specialized.NotifyCollectionChangedEventArgs.ctor$$NotifyCollectionChangedAction$$IList$$Int32$$Int32.call(this, action, [changedItem], index, oldIndex);
        },
        ctor$$NotifyCollectionChangedAction$$Object$$Object$$Int32: function (action, newItem, oldItem, index){
            this.action = 0;
            this.oldItems = null;
            this.newItems = null;
            this.oldIndex = -1;
            this.newIndex = -1;
            System.EventArgs.ctor.call(this);
            this.action = action;
            if (action != 2)
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("This constructor can only be used with the Replace action.", "action"), new Error());
            this.InitializeReplace([newItem], [oldItem], index);
        },
        Action$$: "System.Collections.Specialized.NotifyCollectionChangedAction",
        get_Action: function (){
            return this.action;
        },
        NewItems$$: "System.Collections.IList",
        get_NewItems: function (){
            return this.newItems;
        },
        NewStartingIndex$$: "System.Int32",
        get_NewStartingIndex: function (){
            return this.newIndex;
        },
        OldItems$$: "System.Collections.IList",
        get_OldItems: function (){
            return this.oldItems;
        },
        OldStartingIndex$$: "System.Int32",
        get_OldStartingIndex: function (){
            return this.oldIndex;
        },
        InitializeAdd: function (items, index){
            this.newItems = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            var $it1 = items.GetEnumerator();
            while ($it1.MoveNext()){
                var item = $it1.get_Current();
                this.newItems.Add(item);
            }
            this.newIndex = index;
        },
        InitializeRemove: function (items, index){
            this.oldItems = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            var $it2 = items.GetEnumerator();
            while ($it2.MoveNext()){
                var item = $it2.get_Current();
                this.oldItems.Add(item);
            }
            this.oldIndex = index;
        },
        InitializeMove: function (changedItems, newItemIndex, oldItemIndex){
            this.InitializeAdd(changedItems, newItemIndex);
            this.InitializeRemove(changedItems, oldItemIndex);
        },
        InitializeReplace: function (addedItems, removedItems, index){
            this.InitializeAdd(addedItems, index);
            this.InitializeRemove(removedItems, index);
        }
    }
};
JsTypes.push(System$Collections$Specialized$NotifyCollectionChangedEventArgs);
var System$ComponentModel$AsyncCompletedEventHandler = {
    fullname: "System.ComponentModel.AsyncCompletedEventHandler",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$ComponentModel$AsyncCompletedEventHandler);
var System$ComponentModel$AsyncCompletedEventArgs = {
    fullname: "System.ComponentModel.AsyncCompletedEventArgs",
    baseTypeName: "System.EventArgs",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (error, cancelled, userState){
            this._error = null;
            this._cancelled = false;
            this._userState = null;
            System.EventArgs.ctor.call(this);
            this._error = error;
            this._cancelled = cancelled;
            this._userState = userState;
        },
        RaiseExceptionIfNecessary: function (){
            if (this._error != null)
                throw $CreateException(new System.Reflection.TargetInvocationException.ctor$$Exception(this._error), new Error());
            else if (this._cancelled)
                throw $CreateException(new System.InvalidOperationException.ctor$$String("The operation was cancelled"), new Error());
        },
        Cancelled$$: "System.Boolean",
        get_Cancelled: function (){
            return this._cancelled;
        },
        Error$$: "System.Exception",
        get_Error: function (){
            return this._error;
        },
        UserState$$: "System.Object",
        get_UserState: function (){
            return this._userState;
        }
    }
};
JsTypes.push(System$ComponentModel$AsyncCompletedEventArgs);
var System$ComponentModel$CancelEventHandler = {
    fullname: "System.ComponentModel.CancelEventHandler",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$ComponentModel$CancelEventHandler);
var System$ComponentModel$CancelEventArgs = {
    fullname: "System.ComponentModel.CancelEventArgs",
    baseTypeName: "System.EventArgs",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Cancel = false;
            System.EventArgs.ctor.call(this);
            this._Cancel = false;
        },
        ctor$$Boolean: function (cancel){
            this._Cancel = false;
            System.EventArgs.ctor.call(this);
            this._Cancel = cancel;
        },
        Cancel$$: "System.Boolean",
        get_Cancel: function (){
            return this._Cancel;
        },
        set_Cancel: function (value){
            this._Cancel = value;
        }
    }
};
JsTypes.push(System$ComponentModel$CancelEventArgs);
var System$ComponentModel$INotifyPropertyChanging = {
    fullname: "System.ComponentModel.INotifyPropertyChanging",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$ComponentModel$INotifyPropertyChanging);
var System$ComponentModel$INotifyPropertyChanged = {
    fullname: "System.ComponentModel.INotifyPropertyChanged",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$ComponentModel$INotifyPropertyChanged);
var System$ComponentModel$PropertyChangedEventHandler = {
    fullname: "System.ComponentModel.PropertyChangedEventHandler",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$ComponentModel$PropertyChangedEventHandler);
var System$ComponentModel$PropertyChangedEventArgs = {
    fullname: "System.ComponentModel.PropertyChangedEventArgs",
    baseTypeName: "System.EventArgs",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (propertyName){
            this._PropertyName = null;
            System.EventArgs.ctor.call(this);
            this._PropertyName = propertyName;
        },
        PropertyName$$: "System.String",
        get_PropertyName: function (){
            return this._PropertyName;
        }
    }
};
JsTypes.push(System$ComponentModel$PropertyChangedEventArgs);
var System$DateTime = {
    fullname: "System.DateTime",
    baseTypeName: "Date",
    staticDefinition: {
        cctor: function (){
            System.DateTime.MinValue = null;
            System.DateTime.MaxValue = null;
            System.DateTime.MinValue = new Date(0);
            System.DateTime.MinValue.setUTCFullYear(1, 0, 1);
            System.DateTime.MaxValue = new Date(0);
            System.DateTime.MaxValue.setUTCFullYear(9999, 11, 31);
        },
        Parse$$String: function (str){
            return new Date(Date.parse(str));
        },
        DaysInMonth: function (year, month){
            return 32 - new Date(year, month - 1, 32).getDate();
        },
        Compare: function (t1, t2){
            return t1.valueOf() - t2.valueOf();
        },
        op_Equality: function (t1, t2){
            return System.DateTime.Compare(t1, t2) == 0;
        },
        op_Inequality: function (t1, t2){
            return System.DateTime.Compare(t1, t2) != 0;
        },
        op_GreaterThan$$DateTime$$DateTime: function (t1, t2){
            return System.DateTime.Compare(t1, t2) > 0;
        },
        op_LessThan$$DateTime$$DateTime: function (t1, t2){
            return System.DateTime.Compare(t1, t2) < 0;
        },
        op_LessThanOrEqual$$DateTime$$DateTime: function (t1, t2){
            return System.DateTime.Compare(t1, t2) <= 0;
        },
        op_GreaterThanOrEqual$$DateTime$$DateTime: function (t1, t2){
            return System.DateTime.Compare(t1, t2) >= 0;
        },
        op_Subtraction$$DateTime$$DateTime: function (t1, t2){
            return System.TimeSpan.FromMilliseconds(t1.valueOf() - t2.valueOf());
        },
        op_Subtraction$$DateTime$$TimeSpan: function (t1, t2){
            return new Date(t1.valueOf() - Cast(t2.get_TotalMilliseconds(), System.Int64.ctor));
        },
        op_Addition$$DateTime$$DateTime: function (t1, t2){
            return System.TimeSpan.FromMilliseconds(t1.valueOf() + t2.valueOf());
        },
        op_Addition$$DateTime$$TimeSpan: function (t1, t2){
            return new Date(t1.valueOf() + Cast(t2.get_TotalMilliseconds(), System.Int64.ctor));
        },
        CompareJsDates: function (d1, d2){
            if (d1 == d2)
                return 0;
            if (d1 == null)
                return 1;
            if (d2 == null)
                return -1;
            return d1.valueOf() - d2.valueOf();
        },
        Now$$: "SharpKit.JavaScript.Private.JsImplDateTime",
        get_Now: function (){
            return new Date();
        },
        UtcNow$$: "SharpKit.JavaScript.Private.JsImplDateTime",
        get_UtcNow: function (){
            return System.DateTime.get_Now();
        },
        Today$$: "SharpKit.JavaScript.Private.JsImplDateTime",
        get_Today: function (){
            return Date.get_Today();
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            var x = System.DateTime.MinValue;
            return x;
        },
        ctor$$Int64: function (ticks){
            throw $CreateException(new System.NotSupportedException.ctor$$String("Ticks are not available due to JavaScript number limitation"), new Error());
        },
        ctor$$Int32$$Int32$$Int32: function (year, month, day){
            var x = new Date();
            x.set_Year(year);
            x.set_Month(month);
            x.set_Day(day);
            return x;
        },
        ctor$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32: function (year, month, day, hour, minute, second){
            var x = new Date(year, month - 1, day, hour, minute, second);
            return x;
        },
        ctor$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$DateTimeKind: function (year, month, day, hour, minute, second, kind){
            var x;
            if (kind == 1){
                x = new Date(Date.UTC(year, month - 1, day, hour, minute, second));
            }
            else {
                x = new Date(year, month - 1, day, hour, minute, second);
            }
            x._Kind = kind;
            return x;
        },
        Equals$$Object: function (obj){
            if (obj == null)
                return false;
            return obj.valueOf() == this.valueOf();
        },
        GetHashCode: function (){
            return this.valueOf();
        }
    }
};
JsTypes.push(System$DateTime);
var System$DateTimeKind = {
    fullname: "System.DateTimeKind",
    staticDefinition: {
        Unspecified: 0,
        Utc: 1,
        Local: 2
    },
    Kind: "Enum"
};
JsTypes.push(System$DateTimeKind);
var System$Delegate = {
    fullname: "System.Delegate",
    baseTypeName: "System.Object",
    staticDefinition: {
        Combine$$Delegate$Array: function (delegates){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Combine$$Delegate$$Delegate: function (delegate1, delegate2){
            return CombineDelegates(delegate1, delegate2);
        },
        Remove: function (delegate1, delegate2){
            return RemoveDelegate(delegate1, delegate2);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        DynamicInvoke: function (args){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(System$Delegate);
var System$MulticastDelegate = {
    fullname: "System.MulticastDelegate",
    baseTypeName: "System.Delegate",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Delegate.ctor.call(this);
        },
        GetInvocationList: function (){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Equals$$MulticastDelegate: function (del){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Invoke: function (varargs){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(System$MulticastDelegate);
var System$Action = {
    fullname: "System.Action",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action);
var System$Action$1 = {
    fullname: "System.Action$1",
    Kind: "Delegate",
    definition: {
        ctor: function (T, obj, func){
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$1);
var System$Action$2 = {
    fullname: "System.Action$2",
    Kind: "Delegate",
    definition: {
        ctor: function (T1, T2, obj, func){
            this.T1 = T1;
            this.T2 = T2;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$2);
var System$Action$3 = {
    fullname: "System.Action$3",
    Kind: "Delegate",
    definition: {
        ctor: function (T1, T2, T3, obj, func){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$3);
var System$Func$1 = {
    fullname: "System.Func$1",
    Kind: "Delegate",
    definition: {
        ctor: function (TResult, obj, func){
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$1);
var System$Func$2 = {
    fullname: "System.Func$2",
    Kind: "Delegate",
    definition: {
        ctor: function (T, TResult, obj, func){
            this.T = T;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$2);
var System$Func$3 = {
    fullname: "System.Func$3",
    Kind: "Delegate",
    definition: {
        ctor: function (T1, T2, TResult, obj, func){
            this.T1 = T1;
            this.T2 = T2;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$3);
var System$Func$4 = {
    fullname: "System.Func$4",
    Kind: "Delegate",
    definition: {
        ctor: function (T1, T2, T3, TResult, obj, func){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$4);
var System$EventHandler = {
    fullname: "System.EventHandler",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$EventHandler);
var System$EventHandler$1 = {
    fullname: "System.EventHandler$1",
    Kind: "Delegate",
    definition: {
        ctor: function (TEventArgs, obj, func){
            this.TEventArgs = TEventArgs;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$EventHandler$1);
var System$Predicate$1 = {
    fullname: "System.Predicate$1",
    Kind: "Delegate",
    definition: {
        ctor: function (T, obj, func){
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Predicate$1);
var System$Enum = {
    fullname: "System.Enum",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetName: function (enumType, value){
            if (enumType == null || value == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("enumType"), new Error());
            var jsType = enumType._JsType;
            for (var p in jsType.staticDefinition)
                if (p == value)
                    return p;
            throw $CreateException(new System.ArgumentException.ctor$$String("value"), new Error());
        },
        GetNames: function (enumType){
            if (enumType == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("enumType"), new Error());
            var jsType = enumType._JsType;
            var array = new Array();
            for (var p in jsType.staticDefinition)
                array.push(p);
            return array;
        },
        GetValues: function (enumType){
            if (enumType == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("enumType"), new Error());
            var jsType = enumType._JsType;
            var array = new Array();
            for (var p in jsType.staticDefinition)
                array.push(jsType.staticDefinition[p]);
            return array;
        },
        Parse$$Type$$String: function (enumType, value){
            return System.Enum.Parse$$Type$$String$$Boolean(enumType, value, false);
        },
        Parse$$Type$$String$$Boolean: function (enumType, value, ignoreCase){
            if (enumType == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("enumType"), new Error());
            if (value == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("value"), new Error());
            if (value.trim() == System.String.Empty)
                throw $CreateException(new System.ArgumentException.ctor$$String("value is either an empty string or only contains white space."), new Error());
            var jsType = enumType._JsType;
            for (var p in jsType.staticDefinition)
                if (ignoreCase ? p.toUpperCase() == value.toUpperCase() : p == value)
                    return jsType.staticDefinition[p];
            throw $CreateException(new System.ArgumentException.ctor$$String("value is a name, but not one of the named constants defined for the enumeration."), new Error());
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Enum);
var System$Environment = {
    fullname: "System.Environment",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetResourceString: function (p){
            return p;
        },
        TickCount$$: "System.Int32",
        get_TickCount: function (){
            return new Date().valueOf();
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Environment);
var System$EventArgs = {
    fullname: "System.EventArgs",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$EventArgs);
var System$Exception = {
    fullname: "System.Exception",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor$$String$$Exception: function (message, innerException){
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
            this._Message = message;
            this._InnerException = innerException;
        },
        ctor$$String: function (message){
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
            this._Message = message;
        },
        ctor: function (){
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
        },
        InnerException$$: "System.Exception",
        get_InnerException: function (){
            return this._InnerException;
        },
        Message$$: "System.String",
        get_Message: function (){
            return this._Message;
        },
        toString: function (){
            var ie = this.get_InnerException();
            if (ie == null)
                return this.get_Message();
            return this.get_Message() + ", " + this.get_InnerException();
        },
        SetErrorCode: function (hr){
        }
    }
};
JsTypes.push(System$Exception);
var System$NotImplementedException = {
    fullname: "System.NotImplementedException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Exception.ctor$$String.call(this, "NotImplementedException");
        },
        ctor$$String: function (s){
            System.Exception.ctor$$String.call(this, "NotImplementedException: " + s);
        }
    }
};
JsTypes.push(System$NotImplementedException);
var System$SystemException = {
    fullname: "System.SystemException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Exception.ctor$$String.call(this, System.Environment.GetResourceString("Arg_SystemException"));
            this.SetErrorCode(-2146233087);
        },
        ctor$$String: function (message){
            System.Exception.ctor$$String.call(this, message);
            this.SetErrorCode(-2146233087);
        },
        ctor$$String$$Exception: function (message, innerException){
            System.Exception.ctor$$String$$Exception.call(this, message, innerException);
            this.SetErrorCode(-2146233087);
        }
    }
};
JsTypes.push(System$SystemException);
var System$ArgumentException = {
    fullname: "System.ArgumentException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, System.Environment.GetResourceString("Arg_ArgumentException"));
            this.SetErrorCode(-2147024809);
        },
        ctor$$String: function (message){
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, message);
            this.SetErrorCode(-2147024809);
        },
        ctor$$String$$Exception: function (message, innerException){
            this.m_paramName = null;
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
        },
        ctor$$String$$String: function (message, paramName){
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, message);
            this.m_paramName = paramName;
            this.SetErrorCode(-2147024809);
        },
        ctor$$String$$String$$Exception: function (message, paramName, innerException){
            this.m_paramName = null;
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
            this.m_paramName = paramName;
            this.SetErrorCode(-2147024809);
        },
        ParamName$$: "System.String",
        get_ParamName: function (){
            return this.m_paramName;
        }
    }
};
JsTypes.push(System$ArgumentException);
var System$NullReferenceException = {
    fullname: "System.NullReferenceException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.SystemException.ctor$$String.call(this, "Object reference not set to an instance of object");
        },
        ctor$$String: function (message){
            System.SystemException.ctor$$String.call(this, message);
        }
    }
};
JsTypes.push(System$NullReferenceException);
var System$NotSupportedException = {
    fullname: "System.NotSupportedException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.SystemException.ctor$$String.call(this, "Arg_NotSupportedException");
        },
        ctor$$String: function (message){
            System.SystemException.ctor$$String.call(this, message);
        },
        ctor$$String$$Exception: function (message, innerException){
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
        }
    }
};
JsTypes.push(System$NotSupportedException);
var System$ArgumentOutOfRangeException = {
    fullname: "System.ArgumentOutOfRangeException",
    baseTypeName: "System.ArgumentException",
    staticDefinition: {
        cctor: function (){
            System.ArgumentOutOfRangeException._rangeMessage = null;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String.call(this, "Arg_ArgumentOutOfRangeException");
            this.SetErrorCode(-2146233086);
        },
        ctor$$String: function (paramName){
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, "Arg_ArgumentOutOfRangeException", paramName);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$Exception: function (message, innerException){
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$Exception.call(this, message, innerException);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$String: function (paramName, message){
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, message, paramName);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$Object$$String: function (paramName, actualValue, message){
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, message, paramName);
            this.m_actualValue = actualValue;
            this.SetErrorCode(-2146233086);
        },
        ActualValue$$: "System.Object",
        get_ActualValue: function (){
            return this.m_actualValue;
        },
        RangeMessage$$: "System.String",
        get_RangeMessage: function (){
            if (System.ArgumentOutOfRangeException._rangeMessage == null){
                System.ArgumentOutOfRangeException._rangeMessage = "Arg_ArgumentOutOfRangeException";
            }
            return System.ArgumentOutOfRangeException._rangeMessage;
        }
    }
};
JsTypes.push(System$ArgumentOutOfRangeException);
var System$Guid = {
    fullname: "System.Guid",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        cctor: function (){
            System.Guid.Empty = new System.Guid.ctor();
            System.Guid._random = new System.Random.ctor();
            System.Guid._hexChars = "0123456789abcdef";
        },
        NewGuid: function (){
            var array = new Uint8Array(16);
            for (var i = 0; i < 16; i++){
                array[i] = System.Guid._random.Next$$Int32(256);
            }
            var result = new System.Guid.ctor$$Byte$Array(array);
            result._d = ((result._d & 63) | 128);
            result._c = ((result._c & 4095) | 16384);
            return result;
        },
        AppendByte: function (builder, value){
            builder.Append$$String(System.Guid.ToHex(value >> 4 & 15));
            builder.Append$$String(System.Guid.ToHex((value & 15)));
        },
        AppendInt: function (builder, value){
            builder.Append$$String(System.Guid.ToHex(value >> 28 & 15));
            builder.Append$$String(System.Guid.ToHex(value >> 24 & 15));
            builder.Append$$String(System.Guid.ToHex(value >> 20 & 15));
            builder.Append$$String(System.Guid.ToHex(value >> 16 & 15));
            builder.Append$$String(System.Guid.ToHex(value >> 12 & 15));
            builder.Append$$String(System.Guid.ToHex(value >> 8 & 15));
            builder.Append$$String(System.Guid.ToHex(value >> 4 & 15));
            builder.Append$$String(System.Guid.ToHex(value & 15));
        },
        AppendShort: function (builder, value){
            builder.Append$$String(System.Guid.ToHex(value >> 12 & 15));
            builder.Append$$String(System.Guid.ToHex(value >> 8 & 15));
            builder.Append$$String(System.Guid.ToHex(value >> 4 & 15));
            builder.Append$$String(System.Guid.ToHex((value & 15)));
        },
        CheckArray: function (o, l){
            System.Guid.CheckNull(o);
            System.Guid.CheckLength(o, l);
        },
        CheckLength: function (o, l){
            if (o.length != l){
                throw $CreateException(new System.ArgumentException.ctor$$String(System.String.Format$$String$$Object("Array should be exactly {0} bytes long.", l)), new Error());
            }
        },
        CheckNull: function (o){
            if (o == null){
                throw $CreateException(new System.ArgumentNullException.ctor$$String("Value cannot be null."), new Error());
            }
        },
        Compare: function (x, y){
            return (x >= y) ? 1 : -1;
        },
        CreateFormatException: function (s){
            return new System.FormatException.ctor$$String(System.String.Format$$String$$Object("Invalid Guid format: {0}", s));
        },
        ToHex: function (b){
            return System.Guid._hexChars.substr(b, 1);
        },
        op_Equality: function (a, b){
            return a.Equals$$Guid(b);
        },
        op_Inequality: function (a, b){
            return !a.Equals$$Guid(b);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Struct",
    definition: {
        ctor$$Byte$Array: function (b){
            this._i = 0;
            this._h = 0;
            this._k = 0;
            this._j = 0;
            this._g = 0;
            this._c = 0;
            this._b = 0;
            this._a = 0;
            this._f = 0;
            this._e = 0;
            this._d = 0;
            System.ValueType.ctor.call(this);
            this._a = b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24);
            this._b = (b[4] | (b[5] << 8));
            this._c = (b[6] | (b[7] << 8));
            this._d = b[8];
            this._e = b[9];
            this._f = b[10];
            this._g = b[11];
            this._h = b[12];
            this._i = b[13];
            this._j = b[14];
            this._k = b[15];
        },
        ctor$$UInt32$$UInt16$$UInt16$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte: function (a, b, c, d, e, f, g, h, i, j, k){
            this._i = 0;
            this._h = 0;
            this._k = 0;
            this._j = 0;
            this._g = 0;
            this._c = 0;
            this._b = 0;
            this._a = 0;
            this._f = 0;
            this._e = 0;
            this._d = 0;
            System.Guid.ctor$$Int32$$Int16$$Int16$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte.call(this, a, b, c, d, e, f, g, h, i, j, k);
        },
        ctor$$Int32$$Int16$$Int16$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte$$Byte: function (a, b, c, d, e, f, g, h, i, j, k){
            this._i = 0;
            this._h = 0;
            this._k = 0;
            this._j = 0;
            this._g = 0;
            this._c = 0;
            this._b = 0;
            this._a = 0;
            this._f = 0;
            this._e = 0;
            this._d = 0;
            System.ValueType.ctor.call(this);
            this._a = a;
            this._b = b;
            this._c = c;
            this._d = d;
            this._e = e;
            this._f = f;
            this._g = g;
            this._h = h;
            this._i = i;
            this._j = j;
            this._k = k;
        },
        BaseToString: function (h, p, b){
            var stringBuilder = new System.Text.StringBuilder.ctor$$Int32(40);
            if (p){
                stringBuilder.Append$$Char("(");
            }
            else {
                if (b){
                    stringBuilder.Append$$Char("{");
                }
            }
            System.Guid.AppendInt(stringBuilder, this._a);
            if (h){
                stringBuilder.Append$$Char("-");
            }
            System.Guid.AppendShort(stringBuilder, this._b);
            if (h){
                stringBuilder.Append$$Char("-");
            }
            System.Guid.AppendShort(stringBuilder, this._c);
            if (h){
                stringBuilder.Append$$Char("-");
            }
            System.Guid.AppendByte(stringBuilder, this._d);
            System.Guid.AppendByte(stringBuilder, this._e);
            if (h){
                stringBuilder.Append$$Char("-");
            }
            System.Guid.AppendByte(stringBuilder, this._f);
            System.Guid.AppendByte(stringBuilder, this._g);
            System.Guid.AppendByte(stringBuilder, this._h);
            System.Guid.AppendByte(stringBuilder, this._i);
            System.Guid.AppendByte(stringBuilder, this._j);
            System.Guid.AppendByte(stringBuilder, this._k);
            if (p){
                stringBuilder.Append$$Char(")");
            }
            else {
                if (b){
                    stringBuilder.Append$$Char("}");
                }
            }
            return stringBuilder.toString();
        },
        CompareTo$$Guid: function (value){
            if (this._a != value._a){
                return System.Guid.Compare(this._a, value._a);
            }
            if (this._b != value._b){
                return System.Guid.Compare(this._b, value._b);
            }
            if (this._c != value._c){
                return System.Guid.Compare(this._c, value._c);
            }
            if (this._d != value._d){
                return System.Guid.Compare(this._d, value._d);
            }
            if (this._e != value._e){
                return System.Guid.Compare(this._e, value._e);
            }
            if (this._f != value._f){
                return System.Guid.Compare(this._f, value._f);
            }
            if (this._g != value._g){
                return System.Guid.Compare(this._g, value._g);
            }
            if (this._h != value._h){
                return System.Guid.Compare(this._h, value._h);
            }
            if (this._i != value._i){
                return System.Guid.Compare(this._i, value._i);
            }
            if (this._j != value._j){
                return System.Guid.Compare(this._j, value._j);
            }
            if (this._k != value._k){
                return System.Guid.Compare(this._k, value._k);
            }
            return 0;
        },
        CompareTo$$Object: function (value){
            if (value == null){
                return 1;
            }
            if (!(Is(value, System.Guid.ctor))){
                throw $CreateException(new System.ArgumentException.ctor$$String$$String("value", "Argument of System.Guid.CompareTo should be a Guid."), new Error());
            }
            return this.CompareTo$$Guid(Cast(value, System.Guid.ctor));
        },
        Equals$$Object: function (o){
            return Is(o, System.Guid.ctor) && this.CompareTo$$Guid(Cast(o, System.Guid.ctor)) == 0;
        },
        Equals$$Guid: function (g){
            return this.CompareTo$$Guid(g) == 0;
        },
        GetHashCode: function (){
            var num = this._a;
            num ^= this._b << 16 | this._c;
            num ^= this._d << 24;
            num ^= this._e << 16;
            num ^= this._f << 8;
            num ^= this._g;
            num ^= this._h << 24;
            num ^= this._i << 16;
            num ^= this._j << 8;
            return num ^ this._k;
        },
        toString: function (){
            return this.BaseToString(true, false, false);
        },
        ToString$$String: function (format){
            var h = true;
            var p = false;
            var b = false;
            if (format != null){
                var a = format.ToLowerInvariant();
                if (a == "b"){
                    b = true;
                }
                else {
                    if (a == "p"){
                        p = true;
                    }
                    else {
                        if (a == "n"){
                            h = false;
                        }
                        else {
                            if (a != "d" && a != System.String.Empty){
                                throw $CreateException(new System.FormatException.ctor$$String("Argument to Guid.ToString(string format) should be \"b\", \"B\", \"d\", \"D\", \"n\", \"N\", \"p\" or \"P\""), new Error());
                            }
                        }
                    }
                }
            }
            return this.BaseToString(h, p, b);
        },
        ToString$$String$$IFormatProvider: function (format, provider){
            return this.ToString$$String(format);
        },
        ctor: function (){
            this._i = 0;
            this._h = 0;
            this._k = 0;
            this._j = 0;
            this._g = 0;
            this._c = 0;
            this._b = 0;
            this._a = 0;
            this._f = 0;
            this._e = 0;
            this._d = 0;
            System.ValueType.ctor.call(this);
        }
    }
};
JsTypes.push(System$Guid);
var System$ICloneable = {
    fullname: "System.ICloneable",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$ICloneable);
var System$IDisposable = {
    fullname: "System.IDisposable",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$IDisposable);
var System$Int64 = {
    fullname: "System.Int64",
    baseTypeName: "System.Object",
    staticDefinition: {
        op_Implicit$$UInt32: function (value){
            return new System.Int64.ctor$$Object(value);
        },
        op_Explicit: function (value){
            return new System.Int64.ctor$$Object(value);
        },
        op_Implicit$$Int64: function (value){
            return value._value;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._value = null;
            System.Int64.ctor$$Object.call(this, 0);
        },
        ctor$$Object: function (value){
            this._value = null;
            System.Object.ctor.call(this);
            this._value = this.Convert(value);
        },
        Convert: function (value){
            if (value == null)
                throw $CreateException(new System.ArgumentNullException.ctor(), new Error());
            var regex = new RegExp("^-?([0-9]+)[^0-9]");
            var match = regex.exec(value.toString());
            if (match == null)
                throw $CreateException(new System.FormatException.ctor(), new Error());
            return new Number(match[1]);
        }
    }
};
JsTypes.push(System$Int64);
var System$IComparable = {
    fullname: "System.IComparable",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$IComparable);
var System$IComparable$1 = {
    fullname: "System.IComparable$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$IComparable$1);
var System$IEquatable$1 = {
    fullname: "System.IEquatable$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$IEquatable$1);
var System$IFormattable = {
    fullname: "System.IFormattable",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Interface"
};
JsTypes.push(System$IFormattable);
Date.prototype.CompareTo = function (value){
    return this.valueOf() - value.valueOf();
};
Date.prototype.get_Year = function (){
    if (this._Kind == 1)
        return this.getUTCFullYear();
    return this.getFullYear();
};
Date.prototype.set_Year = function (value){
    if (this._Kind == 1)
        this.setUTCFullYear(value);
    else
        this.setFullYear(value);
};
Date.prototype.get_Month = function (){
    if (this._Kind == 1)
        return this.getUTCMonth() + 1;
    return this.getMonth() + 1;
};
Date.prototype.set_Month = function (value){
    if (this._Kind == 1)
        this.setUTCMonth(value - 1);
    else
        this.setMonth(value - 1);
};
Date.prototype.get_Day = function (){
    if (this._Kind == 1)
        return this.getUTCDate();
    return this.getDate();
};
Date.prototype.set_Day = function (value){
    if (this._Kind == 1)
        this.setUTCDate(value);
    else
        this.setDate(value);
};
Date.prototype.get_Hour = function (){
    if (this._Kind == 1)
        return this.getUTCHours();
    return this.getHours();
};
Date.prototype.set_Hour = function (value){
    if (this._Kind == 1)
        this.setUTCHours(value);
    else
        this.setHours(value);
};
Date.prototype.get_Minute = function (){
    if (this._Kind == 1)
        return this.getUTCMinutes();
    return this.getMinutes();
};
Date.prototype.set_Minute = function (value){
    if (this._Kind == 1)
        this.setUTCMinutes(value);
    else
        this.setMinutes(value);
};
Date.prototype.get_Second = function (){
    if (this._Kind == 1)
        return this.getUTCSeconds();
    return this.getSeconds();
};
Date.prototype.set_Second = function (value){
    if (this._Kind == 1)
        this.setUTCSeconds(value);
    else
        this.setSeconds(value);
};
Date.prototype.get_Millisecond = function (){
    if (this._Kind == 1)
        return this.getUTCMilliseconds();
    return this.getMilliseconds();
};
Date.prototype.set_Millisecond = function (value){
    if (this._Kind == 1)
        this.setUTCMilliseconds(value);
    else
        this.setMilliseconds(value);
};
Date.prototype.get_Ticks = function (){
    if (this._Kind == 1)
        return this.getUTCMilliseconds() * 10000;
    return this.getMilliseconds() * 10000;
};
Date.prototype.set_Ticks = function (value){
    var milliseconds = value / 10000;
    if (this._Kind == 1)
        this.setUTCMilliseconds(milliseconds);
    else
        this.setMilliseconds(milliseconds);
};
Date.prototype.get_DayOfWeek = function (){
    return this.getDay();
};
Date.prototype.ToLocalTime = function (){
    if (this._Kind != 1)
        return this;
    var x = this.Clone();
    x._Kind = 2;
    return x;
};
Date.prototype.ToUniversalTime = function (){
    if (this._Kind == 1)
        return this;
    var x = this.Clone();
    x._Kind = 1;
    return x;
};
Date.get_Today = function (){
    return new Date().RemoveTime();
};
Date.prototype.Subtract$$DateTime = function (value){
    var diff = this.valueOf() - value.valueOf();
    return new System.TimeSpan.ctor$$Int64(diff * 10000);
};
Date.prototype.Subtract$$TimeSpan = function (value){
    var newDate = this.Clone();
    newDate.setMilliseconds(this.getMilliseconds() + value.get_TotalMilliseconds());
    return newDate;
};
Date.prototype.ToString$$String = function (format){
    format = format.Replace$$String$$String("yyyy", this.get_Year().ToString$$String("0000"));
    format = format.Replace$$String$$String("yy", this.get_Year().ToString$$String("00"));
    format = format.Replace$$String$$String("y", this.get_Year().toString());
    format = format.Replace$$String$$String("MM", this.get_Month().ToString$$String("00"));
    format = format.Replace$$String$$String("M", this.get_Month().toString());
    format = format.Replace$$String$$String("dd", this.get_Day().ToString$$String("00"));
    format = format.Replace$$String$$String("d", this.get_Day().toString());
    format = format.Replace$$String$$String("HH", this.get_Hour().ToString$$String("00"));
    format = format.Replace$$String$$String("H", this.get_Hour().toString());
    format = format.Replace$$String$$String("mm", this.get_Minute().ToString$$String("00"));
    format = format.Replace$$String$$String("m", this.get_Minute().toString());
    format = format.Replace$$String$$String("ss", this.get_Second().ToString$$String("00"));
    format = format.Replace$$String$$String("s", this.get_Second().toString());
    return format;
};
Date.prototype.Clone = function (){
    var x = new Date(this.valueOf());
    x._Kind = this._Kind;
    return x;
};
Date.prototype.Clone2 = function (totalMs){
    var x = new Date(totalMs);
    x._Kind = this._Kind;
    return x;
};
Date.prototype.AddMilliseconds = function (miliseconds){
    var date2 = this.Clone2(this.valueOf() + miliseconds);
    return date2;
};
Date.prototype.AddSeconds = function (seconds){
    var ms = this.valueOf() + (seconds * 1000);
    var date2 = this.Clone2(ms);
    return date2;
};
Date.prototype.AddMinutes = function (minutes){
    var date2 = this.Clone();
    date2.setMinutes(date2.getMinutes() + minutes);
    return date2;
};
Date.prototype.AddHours = function (hours){
    var date2 = this.Clone();
    date2.setHours(date2.getHours() + hours);
    return date2;
};
Date.prototype.AddDays = function (days){
    var date2 = this.Clone();
    date2.setDate(date2.getDate() + days);
    return date2;
};
Date.prototype.AddMonths = function (months){
    var date2 = this.Clone();
    date2.setMonth(date2.getMonth() + months);
    return date2;
};
Date.prototype.AddYears = function (years){
    var date2 = this.Clone();
    date2.setMonth(date2.getFullYear() + years);
    return date2;
};
Date.prototype.RemoveTime = function (){
    var date2 = this.Clone();
    date2.setHours(0, 0, 0, 0);
    return date2;
};
Date.prototype.Equals$$Object = function (obj){
    if (obj == null)
        return false;
    return obj.valueOf() == this.valueOf();
};
Date.prototype.GetHashCode = function (){
    return this.valueOf();
};
Date.prototype.GetType = function (){
    return Typeof(System.DateTime.ctor);
};
Date.prototype.get_Kind = function (){
    if (this._Kind == null)
        return 2;
    return this._Kind;
};
Number.prototype.CompareTo$$Double = function (value){
    if (this < value)
        return -1;
    if (this > value)
        return 1;
    if (this == value)
        return 0;
    if (!System.Double.IsNaN(this))
        return 1;
    return !System.Double.IsNaN(value) ? -1 : 0;
};
Number.prototype.CompareTo$$Int32 = function (value){
    if (this < value)
        return -1;
    return this > value ? 1 : 0;
};
var System$Nullable$1 = {
    fullname: "System.Nullable$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (T, value){
            this.T = T;
            this.hasValue = false;
            this.value = null;
            System.Object.ctor.call(this);
            this.value = value;
            this.hasValue = true;
        },
        HasValue$$: "System.Boolean",
        get_HasValue: function (){
            return this.hasValue;
        },
        Value$$: "`0",
        get_Value: function (){
            if (!this.get_HasValue()){
                throw $CreateException(new System.InvalidOperationException.ctor$$String("InvalidOperation_NoValue"), new Error());
            }
            return this.value;
        },
        GetValueOrDefault: function (){
            return this.value;
        },
        GetValueOrDefault$$T: function (defaultValue){
            if (!this.get_HasValue()){
                return defaultValue;
            }
            return this.value;
        },
        Equals$$Object: function (other){
            if (!this.get_HasValue()){
                return (other == null);
            }
            if (other == null){
                return false;
            }
            return this.value.Equals$$Object(other);
        },
        GetHashCode: function (){
            if (!this.get_HasValue()){
                return 0;
            }
            return this.value.GetHashCode();
        },
        toString: function (){
            if (!this.get_HasValue()){
                return "";
            }
            return this.value.toString();
        }
    }
};
JsTypes.push(System$Nullable$1);
var System$Random = {
    fullname: "System.Random",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            System.Random.MBIG = 2147483647;
            System.Random.MSEED = 161803398;
            System.Random.MZ = 0;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.inext = 0;
            this.inextp = 0;
            this.SeedArray = new Int32Array(56);
            System.Random.ctor$$Int32.call(this, System.Environment.get_TickCount());
        },
        ctor$$Int32: function (Seed){
            this.inext = 0;
            this.inextp = 0;
            this.SeedArray = new Int32Array(56);
            System.Object.ctor.call(this);
            var num = 161803398 - System.Math.Abs$$Int32(Seed);
            this.SeedArray[55] = num;
            var num2 = 1;
            for (var i = 1; i < 55; i++){
                var num3 = 21 * i % 55;
                this.SeedArray[num3] = num2;
                num2 = num - num2;
                if (num2 < 0){
                    num2 += 2147483647;
                }
                num = this.SeedArray[num3];
            }
            for (var j = 1; j < 5; j++){
                for (var k = 1; k < 56; k++){
                    this.SeedArray[k] -= this.SeedArray[1 + (k + 30) % 55];
                    if (this.SeedArray[k] < 0){
                        this.SeedArray[k] += 2147483647;
                    }
                }
            }
            this.inext = 0;
            this.inextp = 21;
            Seed = 1;
        },
        Sample: function (){
            return this.InternalSample() * 4.6566128752458E-10;
        },
        InternalSample: function (){
            var num = this.inext;
            var num2 = this.inextp;
            if (++num >= 56){
                num = 1;
            }
            if (++num2 >= 56){
                num2 = 1;
            }
            var num3 = this.SeedArray[num] - this.SeedArray[num2];
            if (num3 < 0){
                num3 += 2147483647;
            }
            this.SeedArray[num] = num3;
            this.inext = num;
            this.inextp = num2;
            return num3;
        },
        Next: function (){
            return this.InternalSample();
        },
        GetSampleForLargeRange: function (){
            var num = this.InternalSample();
            var flag = this.InternalSample() % 2 == 0;
            if (flag){
                num = -num;
            }
            var num2 = num;
            num2 += 2147483646;
            return num2 / 4294967293;
        },
        Next$$Int32$$Int32: function (minValue, maxValue){
            if (minValue > maxValue){
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("minValue", "Argument_MinMaxValue"), new Error());
            }
            var num = maxValue - minValue;
            if (num <= 2147483647){
                return (this.Sample() * num) + minValue;
            }
            return ((this.GetSampleForLargeRange() * num) + minValue);
        },
        Next$$Int32: function (maxValue){
            if (maxValue < 0){
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("maxValue", "ArgumentOutOfRange_MustBePositive"), new Error());
            }
            return (this.Sample() * maxValue);
        },
        NextDouble: function (){
            return this.Sample();
        },
        NextBytes: function (buffer){
            if (buffer == null){
                throw $CreateException(new System.ArgumentNullException.ctor$$String("buffer"), new Error());
            }
            for (var i = 0; i < buffer.length; i++){
                buffer[i] = (this.InternalSample() % 256);
            }
        }
    }
};
JsTypes.push(System$Random);
var System$StringSplitOptions = {
    fullname: "System.StringSplitOptions",
    staticDefinition: {
        None: 0,
        RemoveEmptyEntries: 1
    },
    Kind: "Enum"
};
JsTypes.push(System$StringSplitOptions);
var System$Char = {
    fullname: "System.Char",
    baseTypeName: "System.Object",
    staticDefinition: {
        IsWhiteSpace: function (c){
            return /\s/.test(c);
        },
        IsUpper: function (c){
            return c.toUpperCase() == c;
        },
        IsDigit$$Char: function (s){
            return /[0-9]/.test(s);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Char);
var System$CharEnumerator = {
    fullname: "System.CharEnumerator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.IEnumerator"],
    Kind: "Class",
    definition: {
        ctor: function (str2){
            this.currentElement = "\0";
            this.index = 0;
            this.str = null;
            System.Object.ctor.call(this);
            this.str = str2;
            this.index = -1;
        },
        MoveNext: function (){
            if (this.index < (this.str.length - 1)){
                this.index++;
                this.currentElement = this.str.charAt(this.index);
                return true;
            }
            this.index = this.str.length;
            return false;
        },
        Reset: function (){
            this.currentElement = "\0";
            this.index = -1;
        },
        Current$$: "System.Char",
        get_Current: function (){
            if (this.index == -1){
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Enum Not Started"), new Error());
            }
            if (this.index >= this.str.length){
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Enum Ended"), new Error());
            }
            return this.currentElement;
        }
    }
};
JsTypes.push(System$CharEnumerator);
var System$StringComparison = {
    fullname: "System.StringComparison",
    staticDefinition: {
        CurrentCulture: 0,
        CurrentCultureIgnoreCase: 1,
        InvariantCulture: 2,
        InvariantCultureIgnoreCase: 3,
        Ordinal: 4,
        OrdinalIgnoreCase: 5
    },
    Kind: "Enum"
};
JsTypes.push(System$StringComparison);
var System$TimeSpan = {
    fullname: "System.TimeSpan",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            System.TimeSpan.TicksPerMillisecond = 10000;
            System.TimeSpan.MillisecondsPerTick = 0.0001;
            System.TimeSpan.TicksPerSecond = 10000000;
            System.TimeSpan.SecondsPerTick = 1E-07;
            System.TimeSpan.TicksPerMinute = 600000000;
            System.TimeSpan.MinutesPerTick = 1.66666666666667E-09;
            System.TimeSpan.TicksPerHour = 36000000000;
            System.TimeSpan.HoursPerTick = 2.77777777777778E-11;
            System.TimeSpan.TicksPerDay = 864000000000;
            System.TimeSpan.DaysPerTick = 1.15740740740741E-12;
            System.TimeSpan.MillisPerSecond = 1000;
            System.TimeSpan.MillisPerMinute = 60000;
            System.TimeSpan.MillisPerHour = 3600000;
            System.TimeSpan.MillisPerDay = 86400000;
            System.TimeSpan.MaxSeconds = 922337203685;
            System.TimeSpan.MinSeconds = -922337203685;
            System.TimeSpan.MaxMilliSeconds = 922337203685477;
            System.TimeSpan.MinMilliSeconds = -922337203685477;
            System.TimeSpan.TicksPerTenthSecond = 1000000;
            System.TimeSpan.Zero = new System.TimeSpan.ctor$$Int64(0);
            System.TimeSpan.MaxValue = new System.TimeSpan.ctor$$Int64(9223372036854775807);
            System.TimeSpan.MinValue = new System.TimeSpan.ctor$$Int64(-9223372036854775808);
        },
        Compare: function (t1, t2){
            if (t1.get__ticks() > t2.get__ticks()){
                return 1;
            }
            if (t1.get__ticks() < t2.get__ticks()){
                return -1;
            }
            return 0;
        },
        FromDays: function (value){
            return System.TimeSpan.Interval(value, 86400000);
        },
        Equals$$TimeSpan$$TimeSpan: function (t1, t2){
            return t1.get__ticks() == t2.get__ticks();
        },
        FromHours: function (value){
            return System.TimeSpan.Interval(value, 3600000);
        },
        Interval: function (value, scale){
            if (System.Double.IsNaN(value)){
                throw $CreateException(new System.ArgumentException.ctor$$String("Arg_CannotBeNaN"), new Error());
            }
            var num = value * scale;
            var num2 = num + ((value >= 0) ? 0.5 : -0.5);
            if (num2 > 922337203685477 || num2 < -922337203685477){
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64((num2 * 10000));
        },
        FromMilliseconds: function (value){
            var ts = new System.TimeSpan.ctor();
            ts._TotalMilliseconds = value;
            return ts;
        },
        FromMinutes: function (value){
            return System.TimeSpan.Interval(value, 60000);
        },
        FromSeconds: function (value){
            return System.TimeSpan.Interval(value, 1000);
        },
        FromTicks: function (value){
            return new System.TimeSpan.ctor$$Int64(value);
        },
        TimeToTicks: function (hour, minute, second){
            var num = hour * 3600 + minute * 60 + second;
            if (num > 922337203685 || num < -922337203685){
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null, "Overflow_TimeSpanTooLong"), new Error());
            }
            return num * 10000000;
        },
        TimeToMs: function (hour, minute, second){
            var num = hour * 3600 + minute * 60 + second;
            if (num > 922337203685 || num < -922337203685){
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null, "Overflow_TimeSpanTooLong"), new Error());
            }
            return num * 1000;
        },
        op_UnaryNegation: function (t){
            if (t.get__ticks() == System.TimeSpan.MinValue.get__ticks()){
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_NegateTwosCompNum"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(-t.get__ticks());
        },
        op_Subtraction: function (t1, t2){
            return t1.Subtract(t2);
        },
        op_UnaryPlus: function (t){
            return t;
        },
        op_Addition: function (t1, t2){
            return t1.Add(t2);
        },
        op_Equality: function (t1, t2){
            return t1.get__ticks() == t2.get__ticks();
        },
        op_Inequality: function (t1, t2){
            return t1.get__ticks() != t2.get__ticks();
        },
        op_LessThan: function (t1, t2){
            return t1.get__ticks() < t2.get__ticks();
        },
        op_LessThanOrEqual: function (t1, t2){
            return t1.get__ticks() <= t2.get__ticks();
        },
        op_GreaterThan: function (t1, t2){
            return t1.get__ticks() > t2.get__ticks();
        },
        op_GreaterThanOrEqual: function (t1, t2){
            return t1.get__ticks() >= t2.get__ticks();
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._TotalMilliseconds = 0;
            System.Object.ctor.call(this);
        },
        Ticks$$: "System.Int64",
        get_Ticks: function (){
            return (this._TotalMilliseconds * 10000);
        },
        _ticks$$: "System.Int64",
        get__ticks: function (){
            return (this._TotalMilliseconds * 10000);
        },
        Days$$: "System.Int32",
        get_Days: function (){
            return (this.get__ticks() / 864000000000);
        },
        Hours$$: "System.Int32",
        get_Hours: function (){
            return (this.get__ticks() / 36000000000 % 24);
        },
        Milliseconds$$: "System.Int32",
        get_Milliseconds: function (){
            return (this.get__ticks() / 10000 % 1000);
        },
        Minutes$$: "System.Int32",
        get_Minutes: function (){
            return (this.get__ticks() / 600000000 % 60);
        },
        Seconds$$: "System.Int32",
        get_Seconds: function (){
            return (this.get__ticks() / 10000000 % 60);
        },
        TotalDays$$: "System.Double",
        get_TotalDays: function (){
            return this.get__ticks() / 86400000;
        },
        TotalHours$$: "System.Double",
        get_TotalHours: function (){
            return this._TotalMilliseconds / 3600000;
        },
        TotalMilliseconds$$: "System.Double",
        get_TotalMilliseconds: function (){
            return this._TotalMilliseconds;
        },
        TotalMinutes$$: "System.Double",
        get_TotalMinutes: function (){
            return this._TotalMilliseconds / 60000;
        },
        TotalSeconds$$: "System.Double",
        get_TotalSeconds: function (){
            return this._TotalMilliseconds / 1000;
        },
        ctor$$Int64: function (ticks){
            this._TotalMilliseconds = 0;
            System.Object.ctor.call(this);
            this._TotalMilliseconds = ticks / 10000;
        },
        ctor$$Int32$$Int32$$Int32: function (hours, minutes, seconds){
            this._TotalMilliseconds = 0;
            System.Object.ctor.call(this);
            this._TotalMilliseconds = System.TimeSpan.TimeToMs(hours, minutes, seconds);
        },
        ctor$$Int32$$Int32$$Int32$$Int32: function (days, hours, minutes, seconds){
            this._TotalMilliseconds = 0;
            System.TimeSpan.ctor$$Int32$$Int32$$Int32$$Int32$$Int32.call(this, days, hours, minutes, seconds, 0);
        },
        ctor$$Int32$$Int32$$Int32$$Int32$$Int32: function (days, hours, minutes, seconds, milliseconds){
            this._TotalMilliseconds = 0;
            System.Object.ctor.call(this);
            var num = (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;
            if (num > 922337203685477 || num < -922337203685477){
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null, "Overflow_TimeSpanTooLong"), new Error());
            }
            this._TotalMilliseconds = num;
        },
        Add: function (ts){
            var num = this._TotalMilliseconds + ts._TotalMilliseconds;
            return System.TimeSpan.FromMilliseconds(num);
        },
        CompareTo$$Object: function (value){
            if (value == null){
                return 1;
            }
            if (!(Is(value, System.TimeSpan.ctor))){
                throw $CreateException(new System.ArgumentException.ctor$$String("Arg_MustBeTimeSpan"), new Error());
            }
            var ticks = (Cast(value, System.TimeSpan.ctor)).get__ticks();
            if (this.get__ticks() > ticks){
                return 1;
            }
            if (this.get__ticks() < ticks){
                return -1;
            }
            return 0;
        },
        CompareTo$$TimeSpan: function (value){
            var ticks = value.get__ticks();
            if (this.get__ticks() > ticks){
                return 1;
            }
            if (this.get__ticks() < ticks){
                return -1;
            }
            return 0;
        },
        Duration: function (){
            if (this.get_Ticks() == System.TimeSpan.MinValue.get_Ticks()){
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_Duration"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64((this.get__ticks() >= 0) ? this.get__ticks() : (-this.get__ticks()));
        },
        Equals$$Object: function (value){
            return Is(value, System.TimeSpan.ctor) && this.get__ticks() == (Cast(value, System.TimeSpan.ctor)).get__ticks();
        },
        Equals$$TimeSpan: function (obj){
            return this.get__ticks() == obj.get__ticks();
        },
        GetHashCode: function (){
            return (this.get__ticks() ^ (this.get__ticks() >> 32));
        },
        Negate: function (){
            if (this.get_Ticks() == System.TimeSpan.MinValue.get_Ticks()){
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_NegateTwosCompNum"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(-this.get__ticks());
        },
        Subtract: function (ts){
            var num = this.get__ticks() - ts.get__ticks();
            if (this.get__ticks() >> 63 != ts.get__ticks() >> 63 && this.get__ticks() >> 63 != num >> 63){
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(num);
        }
    }
};
JsTypes.push(System$TimeSpan);
var System$Tuple = {
    fullname: "System.Tuple",
    baseTypeName: "System.Object",
    staticDefinition: {
        Create$1$$T1: function (T1, item1){
            return new System.Tuple$1.ctor(T1, item1);
        },
        Create$2$$T1$$T2: function (T1, T2, item1, item2){
            return new System.Tuple$2.ctor(T1, T2, item1, item2);
        },
        Create$3$$T1$$T2$$T3: function (T1, T2, T3, item1, item2, item3){
            return new System.Tuple$3.ctor(T1, T2, T3, item1, item2, item3);
        },
        Create$4$$T1$$T2$$T3$$T4: function (T1, T2, T3, T4, item1, item2, item3, item4){
            return new System.Tuple$4.ctor(T1, T2, T3, T4, item1, item2, item3, item4);
        },
        Create$5$$T1$$T2$$T3$$T4$$T5: function (T1, T2, T3, T4, T5, item1, item2, item3, item4, item5){
            return new System.Tuple$5.ctor(T1, T2, T3, T4, T5, item1, item2, item3, item4, item5);
        },
        Create$6$$T1$$T2$$T3$$T4$$T5$$T6: function (T1, T2, T3, T4, T5, T6, item1, item2, item3, item4, item5, item6){
            return new System.Tuple$6.ctor(T1, T2, T3, T4, T5, T6, item1, item2, item3, item4, item5, item6);
        },
        Create$7$$T1$$T2$$T3$$T4$$T5$$T6$$T7: function (T1, T2, T3, T4, T5, T6, T7, item1, item2, item3, item4, item5, item6, item7){
            return new System.Tuple$7.ctor(T1, T2, T3, T4, T5, T6, T7, item1, item2, item3, item4, item5, item6, item7);
        },
        Create$8$$T1$$T2$$T3$$T4$$T5$$T6$$T7$$T8: function (T1, T2, T3, T4, T5, T6, T7, T8, item1, item2, item3, item4, item5, item6, item7, item8){
            return new System.Tuple$8.ctor(T1, T2, T3, T4, T5, T6, T7, System.Tuple$1.ctor, item1, item2, item3, item4, item5, item6, item7, new System.Tuple$1.ctor(T8, item8));
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Tuple);
var System$Tuple$1 = {
    fullname: "System.Tuple$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (T1, item1){
            this.T1 = T1;
            this._item1 = null;
            System.Object.ctor.call(this);
            this._item1 = item1;
        },
        Item1$$: "`0",
        get_Item1: function (){
            return this._item1;
        }
    }
};
JsTypes.push(System$Tuple$1);
var System$Tuple$2 = {
    fullname: "System.Tuple$2",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, item1, item2){
            this.T1 = T1;
            this.T2 = T2;
            this._item1 = null;
            this._item2 = null;
            System.Object.ctor.call(this);
            this._item1 = item1;
            this._item2 = item2;
        },
        Item1$$: "`0",
        get_Item1: function (){
            return this._item1;
        },
        Item2$$: "`1",
        get_Item2: function (){
            return this._item2;
        }
    }
};
JsTypes.push(System$Tuple$2);
var System$Tuple$3 = {
    fullname: "System.Tuple$3",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, item1, item2, item3){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this._item1 = null;
            this._item2 = null;
            this._item3 = null;
            System.Object.ctor.call(this);
            this._item1 = item1;
            this._item2 = item2;
            this._item3 = item3;
        },
        Item1$$: "`0",
        get_Item1: function (){
            return this._item1;
        },
        Item2$$: "`1",
        get_Item2: function (){
            return this._item2;
        },
        Item3$$: "`2",
        get_Item3: function (){
            return this._item3;
        }
    }
};
JsTypes.push(System$Tuple$3);
var System$Tuple$4 = {
    fullname: "System.Tuple$4",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, T4, item1, item2, item3, item4){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this._item1 = null;
            this._item2 = null;
            this._item3 = null;
            this._item4 = null;
            System.Object.ctor.call(this);
            this._item1 = item1;
            this._item2 = item2;
            this._item3 = item3;
            this._item4 = item4;
        },
        Item1$$: "`0",
        get_Item1: function (){
            return this._item1;
        },
        Item2$$: "`1",
        get_Item2: function (){
            return this._item2;
        },
        Item3$$: "`2",
        get_Item3: function (){
            return this._item3;
        },
        Item4$$: "`3",
        get_Item4: function (){
            return this._item4;
        }
    }
};
JsTypes.push(System$Tuple$4);
var System$Tuple$5 = {
    fullname: "System.Tuple$5",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, T4, T5, item1, item2, item3, item4, item5){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this.T5 = T5;
            this._item1 = null;
            this._item2 = null;
            this._item3 = null;
            this._item4 = null;
            this._item5 = null;
            System.Object.ctor.call(this);
            this._item1 = item1;
            this._item2 = item2;
            this._item3 = item3;
            this._item4 = item4;
            this._item5 = item5;
        },
        Item1$$: "`0",
        get_Item1: function (){
            return this._item1;
        },
        Item2$$: "`1",
        get_Item2: function (){
            return this._item2;
        },
        Item3$$: "`2",
        get_Item3: function (){
            return this._item3;
        },
        Item4$$: "`3",
        get_Item4: function (){
            return this._item4;
        },
        Item5$$: "`4",
        get_Item5: function (){
            return this._item5;
        }
    }
};
JsTypes.push(System$Tuple$5);
var System$Tuple$6 = {
    fullname: "System.Tuple$6",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, T4, T5, T6, item1, item2, item3, item4, item5, item6){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this.T5 = T5;
            this.T6 = T6;
            this._item1 = null;
            this._item2 = null;
            this._item3 = null;
            this._item4 = null;
            this._item5 = null;
            this._item6 = null;
            System.Object.ctor.call(this);
            this._item1 = item1;
            this._item2 = item2;
            this._item3 = item3;
            this._item4 = item4;
            this._item5 = item5;
            this._item6 = item6;
        },
        Item1$$: "`0",
        get_Item1: function (){
            return this._item1;
        },
        Item2$$: "`1",
        get_Item2: function (){
            return this._item2;
        },
        Item3$$: "`2",
        get_Item3: function (){
            return this._item3;
        },
        Item4$$: "`3",
        get_Item4: function (){
            return this._item4;
        },
        Item5$$: "`4",
        get_Item5: function (){
            return this._item5;
        },
        Item6$$: "`5",
        get_Item6: function (){
            return this._item6;
        }
    }
};
JsTypes.push(System$Tuple$6);
var System$Tuple$7 = {
    fullname: "System.Tuple$7",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, T4, T5, T6, T7, item1, item2, item3, item4, item5, item6, item7){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this.T5 = T5;
            this.T6 = T6;
            this.T7 = T7;
            this._item1 = null;
            this._item2 = null;
            this._item3 = null;
            this._item4 = null;
            this._item5 = null;
            this._item6 = null;
            this._item7 = null;
            System.Object.ctor.call(this);
            this._item1 = item1;
            this._item2 = item2;
            this._item3 = item3;
            this._item4 = item4;
            this._item5 = item5;
            this._item6 = item6;
            this._item7 = item7;
        },
        Item1$$: "`0",
        get_Item1: function (){
            return this._item1;
        },
        Item2$$: "`1",
        get_Item2: function (){
            return this._item2;
        },
        Item3$$: "`2",
        get_Item3: function (){
            return this._item3;
        },
        Item4$$: "`3",
        get_Item4: function (){
            return this._item4;
        },
        Item5$$: "`4",
        get_Item5: function (){
            return this._item5;
        },
        Item6$$: "`5",
        get_Item6: function (){
            return this._item6;
        },
        Item7$$: "`6",
        get_Item7: function (){
            return this._item7;
        }
    }
};
JsTypes.push(System$Tuple$7);
var System$UInt32 = {
    fullname: "System.UInt32",
    baseTypeName: "System.Object",
    staticDefinition: {
        op_Implicit$$UInt32: function (value){
            return value._value;
        },
        op_Explicit: function (value){
            return new System.UInt32.ctor$$Object(value);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._value = null;
            System.UInt32.ctor$$Object.call(this, 0);
        },
        ctor$$Object: function (value){
            this._value = null;
            System.Object.ctor.call(this);
            this._value = this.Convert(value);
        },
        Convert: function (value){
            if (value == null)
                throw $CreateException(new System.ArgumentNullException.ctor(), new Error());
            var regex = new RegExp("^-?([0-9]+)[^0-9]");
            var match = regex.exec(value.toString());
            if (match == null)
                throw $CreateException(new System.FormatException.ctor(), new Error());
            return new Number(match[1]);
        }
    }
};
JsTypes.push(System$UInt32);
var System$Uri = {
    fullname: "System.Uri",
    baseTypeName: "System.Object",
    staticDefinition: {
        op_Equality: function (u1, u2){
            if (u1 == u2){
                return true;
            }
            if (u1 == null){
                return false;
            }
            if (u2 == null){
                return false;
            }
            return u1._OriginalString == u2._OriginalString;
        },
        op_Inequality: function (u1, u2){
            return !(System.Uri.op_Equality(u1, u2));
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._OriginalString = null;
            this._Fragment = null;
            this._Query = null;
            System.Object.ctor.call(this);
            this._OriginalString = null;
        },
        ctor$$String: function (uri){
            this._OriginalString = null;
            this._Fragment = null;
            this._Query = null;
            System.Object.ctor.call(this);
            this._OriginalString = uri;
        },
        OriginalString$$: "System.String",
        get_OriginalString: function (){
            return this._OriginalString;
        },
        AbsoluteUri$$: "System.String",
        get_AbsoluteUri: function (){
            return this._OriginalString;
        },
        toString: function (){
            return this._OriginalString;
        },
        Equals$$Object: function (obj){
            return System.Uri.op_Equality(this, Cast(obj, System.Uri.ctor));
        },
        GetHashCode: function (){
            return System.Object.commonPrototype.GetHashCode.call(this);
        },
        Fragment$$: "System.String",
        get_Fragment: function (){
            if (this._Fragment == null){
                var idx = this._OriginalString.indexOf("#");
                if (idx == -1)
                    this._Fragment = "";
                else
                    this._Fragment = this._OriginalString.substr(idx);
            }
            return this._Fragment;
        },
        Query$$: "System.String",
        get_Query: function (){
            if (this._Query == null){
                var idx = this._OriginalString.indexOf("?");
                if (idx == -1)
                    this._Query = "";
                else {
                    var idx2 = this._OriginalString.indexOf("#");
                    if (idx2 == -1)
                        this._Query = this._OriginalString.substr(idx);
                    else
                        this._Query = this._OriginalString.substr(idx, idx2 - idx);
                }
            }
            return this._Query;
        }
    }
};
JsTypes.push(System$Uri);
var System$ValueType = {
    fullname: "System.ValueType",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$ValueType);
var SharpKit$Html4$HtmlDomEventHandler = {
    fullname: "SharpKit.Html4.HtmlDomEventHandler",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(SharpKit$Html4$HtmlDomEventHandler);
var JsRuntime = function (){
};
JsRuntime.Start = function (){
    Compile();
};

