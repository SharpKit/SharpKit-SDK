{"attributes": {"packageName": "qx.io", "type": "bootstrap", "fullName": "qx.io.ScriptLoader", "name": "ScriptLoader"}, "type": "class", "children": [{"attributes": {"text": "<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Loading of local or remote scripts.</p>\n\n<ul>\n<li>Supports cross-domain communication</li>\n<li>Automatically &#8220;embeds&#8221; script so when the loaded event occurs the new features are usable as well</li>\n</ul>"}, "type": "desc"}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"line": 30, "isCtor": true, "name": "ctor"}, "type": "method"}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"type": "Number", "name": "TIMEOUT", "value": "15"}, "type": "constant", "children": [{"attributes": {"text": "<p>{Number} Timeout limit in seconds that applies to browsers not supporting\nthe error handler. Default is 15 seconds. 0 means no timeout.</p>"}, "type": "desc"}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 1, "name": "__onevent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>Native event object</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Event"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Internal event listener for load and error events.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "line": 211, "name": "_getTimeout"}, "type": "method", "children": [{"attributes": {"text": "<p>Override to customize timeout limit.</p>\n\n<p>Note: Only affects browsers not supporting the error handler (Opera).</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Timeout limit in seconds</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"line": 139, "name": "abort"}, "type": "method", "children": [{"attributes": {"text": "<p>Aborts a currently running process.</p>"}, "type": "desc"}]}, {"attributes": {"line": 153, "name": "dispose"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "status"}, "type": "param", "children": [{"attributes": {"text": "<p>Any of success, fail or abort.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Internal cleanup method used after every successful\nor failed loading attempt.</p>"}, "type": "desc"}]}, {"attributes": {"line": 80, "name": "load"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "url"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">URL</span> of the script</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "callback"}, "type": "param", "children": [{"attributes": {"text": "<p>Callback to execute</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "window", "name": "context"}, "type": "param", "children": [{"attributes": {"text": "<p>Context in which the function should be executed</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Loads the script from the given <span class=\"caps\">URL</span>. It is possible to define\na callback and a context in which the callback is executed.</p>\n\n<p>The callback is executed when the process is done with any\nof these status messages: success, fail or abort.</p>\n\n<p>Note that browsers not supporting the native &#8220;error&#8221; event detect\nnetwork errors as soon as the timeout limit is reached.</p>"}, "type": "desc"}]}]}]}