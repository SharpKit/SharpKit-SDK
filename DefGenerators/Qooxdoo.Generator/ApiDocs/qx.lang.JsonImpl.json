{"attributes": {"name": "JsonImpl", "isInternal": true, "packageName": "qx.lang", "access": "internal", "superClass": "Object", "fullName": "qx.lang.JsonImpl", "type": "bootstrap"}, "type": "class", "children": [{"attributes": {"text": "<p>Pure JavaScript implementation of the EcmaScript 3.1 <span class=\"caps\">JSON</span> object. This class\nis used, if the browser does not support it natively.</p>"}, "type": "desc"}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"line": 43, "isCtor": true, "name": "ctor"}, "type": "method"}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "line": 292, "name": "__quote"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "string"}, "type": "param", "children": [{"attributes": {"text": "<p>The string to quote</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>If the string contains no control characters, no quote characters, and no\nbackslash characters, then we can safely slap some quotes around it.\nOtherwise we must also replace the offending characters with safe escape\nsequences.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The quoted string</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 124, "name": "__str"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "key"}, "type": "param", "children": [{"attributes": {"text": "<p>the map key</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "holder"}, "type": "param", "children": [{"attributes": {"text": "<p>an object with the given key</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Produce a string from holder[key].</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The string representation of holder[key]</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 392, "name": "__walk"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "holder"}, "type": "param", "children": [{"attributes": {"text": "<p>the root object</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "key"}, "type": "param", "children": [{"attributes": {"text": "<p>walk holder[key]</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "reviver"}, "type": "param", "children": [{"attributes": {"text": "<p>callback, which is called on every node.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>The walk method is used to recursively walk the resulting structure so\nthat modifications can be made.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The reviver&#8217;s return value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"line": 260, "name": "dateToJSON"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "date"}, "type": "param", "children": [{"attributes": {"text": "<p>The date to convert</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Date"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Convert a date to <span class=\"caps\">JSON</span></p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">JSON</span> representation of the date</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 335, "name": "parse"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "text"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">JSON</span> string to parse</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "reviver"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional reviver function to filter and transform the results</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This method parses a <span class=\"caps\">JSON</span> text to produce an object or array.\nIt can throw a SyntaxError exception.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The parsed <span class=\"caps\">JSON</span> object</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}]}, {"attributes": {"line": 76, "name": "stringify"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>any JavaScript value, usually an object or array.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}, {"attributes": {"name": "replacer"}, "type": "param", "children": [{"attributes": {"text": "<p>an optional parameter that determines how object values are stringified for objects. It can be a function or an array of strings.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"name": "space"}, "type": "param", "children": [{"attributes": {"text": "<p>an optional parameter that specifies the indentation of nested structures. If it is omitted, the text will be packed without extra whitespace. If it is a number, it will specify the number of spaces to indent at each level. If it is a string (such as &#8217;\\t&#8217; or &#8217;&nbsp;&#8217;), it contains the characters used to indent at each level.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This method produces a <span class=\"caps\">JSON</span> text from a JavaScript value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">JSON</span> string of the value</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}]}]}