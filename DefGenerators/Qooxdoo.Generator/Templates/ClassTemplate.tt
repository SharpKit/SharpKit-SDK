// Generated by SharpKit.QooxDoo.Generator
<#@ template language="C#" #>
<#@ import namespace="SharpKit.Qooxdoo.Generator.Metadata" #>
<# var model = Session["Model"] as MetaClass; #>
using System;
using System.Collections.Generic;
using SharpKit.Html;
using SharpKit.JavaScript;
<# foreach (var u in model.Usings) { #>
using <#= u #>;
<# } #>

namespace <#= model.Namespace #>
{
    <#= model.ParseXMLComment(1) #>[JsType(JsMode.Prototype, Name = "<#= model.OriginalFullName #>", OmitOptionalParameters = true, Export = false)]
    public <# if (model.IsAbstract) { #>abstract <# } #>partial class <#= model.Name #> <#= model.InheritanceList #>
    {
<# var events = model.GetAllEvents(); if (events.Count > 0) { #>
		#region Events

<# foreach (var eventItem in events) { #>
		<#= eventItem.ParseXMLComment(2) #>public event Action<<#= eventItem.EventType #>> <#= eventItem.FormattedName #>;

<# } #>
		#endregion Events

<# } #>
<# var properties = model.GetAllProperties(); if (properties.Count > 0) { #>
		#region Properties

<# foreach (var property in properties) { #>
		<#= property.ParseXMLComment(2) #>[JsProperty(Name = "<#= property.Name #>", NativeField = true)]
		<#= property.AccessType #> <#= property.Type #> <#= property.FormattedName #> { get; set; }

<# } #>
		#endregion Properties

<# } #>
<# var methods = model.GetAllMethods(); if (methods.Count > 0) { #>
		#region Methods

<# foreach (var method in methods) { #>
		<#= method.ParseXMLComment(2) #><# if (!method.IsConstructor) { #>
[JsMethod(Name = "<#= method.Name #>")]
		<# } #>
<#= method.AccessType #> <# if (method.IsStatic) { #>static <# } #><# if (!method.IsConstructor) { #><#= method.ReturnType #> <# } #><#= method.FormattedName #>(<#= method.GetParametersList() #>) { throw new NotImplementedException(); }

<# } #>
		#endregion Methods
<# } #>
    }
}